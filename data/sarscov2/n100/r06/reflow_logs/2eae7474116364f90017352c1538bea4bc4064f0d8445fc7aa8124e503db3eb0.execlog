2021/07/08 17:05:30 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 17:05:30 run ID: 2eae7474
2021/07/08 17:05:30 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r06.rf
	(no params)
	(no arguments)
2021/07/08 17:05:30 Trace: /home/niema/.reflow/runs/2eae7474116364f90017352c1538bea4bc4064f0d8445fc7aa8124e503db3eb0.trace
2021/07/08 17:05:30 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 17:05:31 scheduler task fe3638fa (flow c46e9ad2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s080_output\"\n        wget -O \"n100.r06.s080_output/n100.r06.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s080_output/n100.r06.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s080_output/n100.r06.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s080_output/n100.r06.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s080_output/n100.r06.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s080_output/n100.r06.s080.reference.fas\" \"n100.r06.s080_output/n100.r06.s080.fq1.fastq\" \"n100.r06.s080_output/n100.r06.s080.fq2.fastq\" | samtools view -bS - > \"n100.r06.s080_output/n100.r06.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s080_output/n100.r06.s080.untrimmed.sorted.bam\" \"n100.r06.s080_output/n100.r06.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s080_output/n100.r06.s080.untrimmed.sorted.bam\" -b \"n100.r06.s080_output/n100.r06.s080.primers.bed\" -p \"n100.r06.s080_output/n100.r06.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam\" \"n100.r06.s080_output/n100.r06.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s080_output/n100.r06.s080.reference.fas\" \"n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam\" > \"n100.r06.s080_output/n100.r06.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s080_output/n100.r06.s080.reference.fas\" --call-indels \"n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam\" > \"n100.r06.s080_output/n100.r06.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam\" > \"n100.r06.s080_output/n100.r06.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s080_output/n100.r06.s080.depth.txt\" \"n100.r06.s080_output/n100.r06.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s080_output/n100.r06.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s080_output/n100.r06.s080.reference.fas\" | bcftools consensus -m \"n100.r06.s080_output/n100.r06.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s080_output/n100.r06.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task bea561be (flow 60d3550b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s098_output\"\n        wget -O \"n100.r06.s098_output/n100.r06.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s098_output/n100.r06.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s098_output/n100.r06.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s098_output/n100.r06.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s098_output/n100.r06.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s098_output/n100.r06.s098.reference.fas\" \"n100.r06.s098_output/n100.r06.s098.fq1.fastq\" \"n100.r06.s098_output/n100.r06.s098.fq2.fastq\" | samtools view -bS - > \"n100.r06.s098_output/n100.r06.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s098_output/n100.r06.s098.untrimmed.sorted.bam\" \"n100.r06.s098_output/n100.r06.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s098_output/n100.r06.s098.untrimmed.sorted.bam\" -b \"n100.r06.s098_output/n100.r06.s098.primers.bed\" -p \"n100.r06.s098_output/n100.r06.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam\" \"n100.r06.s098_output/n100.r06.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s098_output/n100.r06.s098.reference.fas\" \"n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam\" > \"n100.r06.s098_output/n100.r06.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s098_output/n100.r06.s098.reference.fas\" --call-indels \"n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam\" > \"n100.r06.s098_output/n100.r06.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam\" > \"n100.r06.s098_output/n100.r06.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s098_output/n100.r06.s098.depth.txt\" \"n100.r06.s098_output/n100.r06.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s098_output/n100.r06.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s098_output/n100.r06.s098.reference.fas\" | bcftools consensus -m \"n100.r06.s098_output/n100.r06.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s098_output/n100.r06.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task ef167c15 (flow 9a691c74): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s076_output\"\n        wget -O \"n100.r06.s076_output/n100.r06.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s076_output/n100.r06.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s076_output/n100.r06.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s076_output/n100.r06.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s076_output/n100.r06.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s076_output/n100.r06.s076.reference.fas\" \"n100.r06.s076_output/n100.r06.s076.fq1.fastq\" \"n100.r06.s076_output/n100.r06.s076.fq2.fastq\" | samtools view -bS - > \"n100.r06.s076_output/n100.r06.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s076_output/n100.r06.s076.untrimmed.sorted.bam\" \"n100.r06.s076_output/n100.r06.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s076_output/n100.r06.s076.untrimmed.sorted.bam\" -b \"n100.r06.s076_output/n100.r06.s076.primers.bed\" -p \"n100.r06.s076_output/n100.r06.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam\" \"n100.r06.s076_output/n100.r06.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s076_output/n100.r06.s076.reference.fas\" \"n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam\" > \"n100.r06.s076_output/n100.r06.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s076_output/n100.r06.s076.reference.fas\" --call-indels \"n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam\" > \"n100.r06.s076_output/n100.r06.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam\" > \"n100.r06.s076_output/n100.r06.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s076_output/n100.r06.s076.depth.txt\" \"n100.r06.s076_output/n100.r06.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s076_output/n100.r06.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s076_output/n100.r06.s076.reference.fas\" | bcftools consensus -m \"n100.r06.s076_output/n100.r06.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s076_output/n100.r06.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task fc7b57e3 (flow b26d36ef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s092_output\"\n        wget -O \"n100.r06.s092_output/n100.r06.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s092_output/n100.r06.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s092_output/n100.r06.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s092_output/n100.r06.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s092_output/n100.r06.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s092_output/n100.r06.s092.reference.fas\" \"n100.r06.s092_output/n100.r06.s092.fq1.fastq\" \"n100.r06.s092_output/n100.r06.s092.fq2.fastq\" | samtools view -bS - > \"n100.r06.s092_output/n100.r06.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s092_output/n100.r06.s092.untrimmed.sorted.bam\" \"n100.r06.s092_output/n100.r06.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s092_output/n100.r06.s092.untrimmed.sorted.bam\" -b \"n100.r06.s092_output/n100.r06.s092.primers.bed\" -p \"n100.r06.s092_output/n100.r06.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam\" \"n100.r06.s092_output/n100.r06.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s092_output/n100.r06.s092.reference.fas\" \"n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam\" > \"n100.r06.s092_output/n100.r06.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s092_output/n100.r06.s092.reference.fas\" --call-indels \"n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam\" > \"n100.r06.s092_output/n100.r06.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam\" > \"n100.r06.s092_output/n100.r06.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s092_output/n100.r06.s092.depth.txt\" \"n100.r06.s092_output/n100.r06.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s092_output/n100.r06.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s092_output/n100.r06.s092.reference.fas\" | bcftools consensus -m \"n100.r06.s092_output/n100.r06.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s092_output/n100.r06.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task a1b7a353 (flow 94722989): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s025_output\"\n        wget -O \"n100.r06.s025_output/n100.r06.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s025_output/n100.r06.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s025_output/n100.r06.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s025_output/n100.r06.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s025_output/n100.r06.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s025_output/n100.r06.s025.reference.fas\" \"n100.r06.s025_output/n100.r06.s025.fq1.fastq\" \"n100.r06.s025_output/n100.r06.s025.fq2.fastq\" | samtools view -bS - > \"n100.r06.s025_output/n100.r06.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s025_output/n100.r06.s025.untrimmed.sorted.bam\" \"n100.r06.s025_output/n100.r06.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s025_output/n100.r06.s025.untrimmed.sorted.bam\" -b \"n100.r06.s025_output/n100.r06.s025.primers.bed\" -p \"n100.r06.s025_output/n100.r06.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam\" \"n100.r06.s025_output/n100.r06.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s025_output/n100.r06.s025.reference.fas\" \"n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam\" > \"n100.r06.s025_output/n100.r06.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s025_output/n100.r06.s025.reference.fas\" --call-indels \"n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam\" > \"n100.r06.s025_output/n100.r06.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam\" > \"n100.r06.s025_output/n100.r06.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s025_output/n100.r06.s025.depth.txt\" \"n100.r06.s025_output/n100.r06.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s025_output/n100.r06.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s025_output/n100.r06.s025.reference.fas\" | bcftools consensus -m \"n100.r06.s025_output/n100.r06.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s025_output/n100.r06.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 90258421 (flow 4b4267c3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s068_output\"\n        wget -O \"n100.r06.s068_output/n100.r06.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s068_output/n100.r06.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s068_output/n100.r06.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s068_output/n100.r06.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s068_output/n100.r06.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s068_output/n100.r06.s068.reference.fas\" \"n100.r06.s068_output/n100.r06.s068.fq1.fastq\" \"n100.r06.s068_output/n100.r06.s068.fq2.fastq\" | samtools view -bS - > \"n100.r06.s068_output/n100.r06.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s068_output/n100.r06.s068.untrimmed.sorted.bam\" \"n100.r06.s068_output/n100.r06.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s068_output/n100.r06.s068.untrimmed.sorted.bam\" -b \"n100.r06.s068_output/n100.r06.s068.primers.bed\" -p \"n100.r06.s068_output/n100.r06.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam\" \"n100.r06.s068_output/n100.r06.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s068_output/n100.r06.s068.reference.fas\" \"n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam\" > \"n100.r06.s068_output/n100.r06.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s068_output/n100.r06.s068.reference.fas\" --call-indels \"n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam\" > \"n100.r06.s068_output/n100.r06.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam\" > \"n100.r06.s068_output/n100.r06.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s068_output/n100.r06.s068.depth.txt\" \"n100.r06.s068_output/n100.r06.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s068_output/n100.r06.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s068_output/n100.r06.s068.reference.fas\" | bcftools consensus -m \"n100.r06.s068_output/n100.r06.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s068_output/n100.r06.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 957861f5 (flow 82bc0705): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s014_output\"\n        wget -O \"n100.r06.s014_output/n100.r06.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s014_output/n100.r06.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s014_output/n100.r06.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s014_output/n100.r06.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s014_output/n100.r06.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s014_output/n100.r06.s014.reference.fas\" \"n100.r06.s014_output/n100.r06.s014.fq1.fastq\" \"n100.r06.s014_output/n100.r06.s014.fq2.fastq\" | samtools view -bS - > \"n100.r06.s014_output/n100.r06.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s014_output/n100.r06.s014.untrimmed.sorted.bam\" \"n100.r06.s014_output/n100.r06.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s014_output/n100.r06.s014.untrimmed.sorted.bam\" -b \"n100.r06.s014_output/n100.r06.s014.primers.bed\" -p \"n100.r06.s014_output/n100.r06.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam\" \"n100.r06.s014_output/n100.r06.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s014_output/n100.r06.s014.reference.fas\" \"n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam\" > \"n100.r06.s014_output/n100.r06.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s014_output/n100.r06.s014.reference.fas\" --call-indels \"n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam\" > \"n100.r06.s014_output/n100.r06.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam\" > \"n100.r06.s014_output/n100.r06.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s014_output/n100.r06.s014.depth.txt\" \"n100.r06.s014_output/n100.r06.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s014_output/n100.r06.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s014_output/n100.r06.s014.reference.fas\" | bcftools consensus -m \"n100.r06.s014_output/n100.r06.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s014_output/n100.r06.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 13aceaad (flow 6791e387): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s038_output\"\n        wget -O \"n100.r06.s038_output/n100.r06.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s038_output/n100.r06.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s038_output/n100.r06.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s038_output/n100.r06.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s038_output/n100.r06.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s038_output/n100.r06.s038.reference.fas\" \"n100.r06.s038_output/n100.r06.s038.fq1.fastq\" \"n100.r06.s038_output/n100.r06.s038.fq2.fastq\" | samtools view -bS - > \"n100.r06.s038_output/n100.r06.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s038_output/n100.r06.s038.untrimmed.sorted.bam\" \"n100.r06.s038_output/n100.r06.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s038_output/n100.r06.s038.untrimmed.sorted.bam\" -b \"n100.r06.s038_output/n100.r06.s038.primers.bed\" -p \"n100.r06.s038_output/n100.r06.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam\" \"n100.r06.s038_output/n100.r06.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s038_output/n100.r06.s038.reference.fas\" \"n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam\" > \"n100.r06.s038_output/n100.r06.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s038_output/n100.r06.s038.reference.fas\" --call-indels \"n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam\" > \"n100.r06.s038_output/n100.r06.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam\" > \"n100.r06.s038_output/n100.r06.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s038_output/n100.r06.s038.depth.txt\" \"n100.r06.s038_output/n100.r06.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s038_output/n100.r06.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s038_output/n100.r06.s038.reference.fas\" | bcftools consensus -m \"n100.r06.s038_output/n100.r06.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s038_output/n100.r06.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task b067dbe8 (flow 946a9c13): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s004_output\"\n        wget -O \"n100.r06.s004_output/n100.r06.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s004_output/n100.r06.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s004_output/n100.r06.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s004_output/n100.r06.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s004_output/n100.r06.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s004_output/n100.r06.s004.reference.fas\" \"n100.r06.s004_output/n100.r06.s004.fq1.fastq\" \"n100.r06.s004_output/n100.r06.s004.fq2.fastq\" | samtools view -bS - > \"n100.r06.s004_output/n100.r06.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s004_output/n100.r06.s004.untrimmed.sorted.bam\" \"n100.r06.s004_output/n100.r06.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s004_output/n100.r06.s004.untrimmed.sorted.bam\" -b \"n100.r06.s004_output/n100.r06.s004.primers.bed\" -p \"n100.r06.s004_output/n100.r06.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam\" \"n100.r06.s004_output/n100.r06.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s004_output/n100.r06.s004.reference.fas\" \"n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam\" > \"n100.r06.s004_output/n100.r06.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s004_output/n100.r06.s004.reference.fas\" --call-indels \"n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam\" > \"n100.r06.s004_output/n100.r06.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam\" > \"n100.r06.s004_output/n100.r06.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s004_output/n100.r06.s004.depth.txt\" \"n100.r06.s004_output/n100.r06.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s004_output/n100.r06.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s004_output/n100.r06.s004.reference.fas\" | bcftools consensus -m \"n100.r06.s004_output/n100.r06.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s004_output/n100.r06.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task f8875ac4 (flow bd36172d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s061_output\"\n        wget -O \"n100.r06.s061_output/n100.r06.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s061_output/n100.r06.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s061_output/n100.r06.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s061_output/n100.r06.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s061_output/n100.r06.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s061_output/n100.r06.s061.reference.fas\" \"n100.r06.s061_output/n100.r06.s061.fq1.fastq\" \"n100.r06.s061_output/n100.r06.s061.fq2.fastq\" | samtools view -bS - > \"n100.r06.s061_output/n100.r06.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s061_output/n100.r06.s061.untrimmed.sorted.bam\" \"n100.r06.s061_output/n100.r06.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s061_output/n100.r06.s061.untrimmed.sorted.bam\" -b \"n100.r06.s061_output/n100.r06.s061.primers.bed\" -p \"n100.r06.s061_output/n100.r06.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam\" \"n100.r06.s061_output/n100.r06.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s061_output/n100.r06.s061.reference.fas\" \"n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam\" > \"n100.r06.s061_output/n100.r06.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s061_output/n100.r06.s061.reference.fas\" --call-indels \"n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam\" > \"n100.r06.s061_output/n100.r06.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam\" > \"n100.r06.s061_output/n100.r06.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s061_output/n100.r06.s061.depth.txt\" \"n100.r06.s061_output/n100.r06.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s061_output/n100.r06.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s061_output/n100.r06.s061.reference.fas\" | bcftools consensus -m \"n100.r06.s061_output/n100.r06.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s061_output/n100.r06.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 006129c5 (flow 70f0c0c0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s012_output\"\n        wget -O \"n100.r06.s012_output/n100.r06.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s012_output/n100.r06.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s012_output/n100.r06.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s012_output/n100.r06.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s012_output/n100.r06.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s012_output/n100.r06.s012.reference.fas\" \"n100.r06.s012_output/n100.r06.s012.fq1.fastq\" \"n100.r06.s012_output/n100.r06.s012.fq2.fastq\" | samtools view -bS - > \"n100.r06.s012_output/n100.r06.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s012_output/n100.r06.s012.untrimmed.sorted.bam\" \"n100.r06.s012_output/n100.r06.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s012_output/n100.r06.s012.untrimmed.sorted.bam\" -b \"n100.r06.s012_output/n100.r06.s012.primers.bed\" -p \"n100.r06.s012_output/n100.r06.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam\" \"n100.r06.s012_output/n100.r06.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s012_output/n100.r06.s012.reference.fas\" \"n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam\" > \"n100.r06.s012_output/n100.r06.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s012_output/n100.r06.s012.reference.fas\" --call-indels \"n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam\" > \"n100.r06.s012_output/n100.r06.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam\" > \"n100.r06.s012_output/n100.r06.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s012_output/n100.r06.s012.depth.txt\" \"n100.r06.s012_output/n100.r06.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s012_output/n100.r06.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s012_output/n100.r06.s012.reference.fas\" | bcftools consensus -m \"n100.r06.s012_output/n100.r06.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s012_output/n100.r06.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task aef1ea0c (flow d7bcee4f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s001_output\"\n        wget -O \"n100.r06.s001_output/n100.r06.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s001_output/n100.r06.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s001_output/n100.r06.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s001_output/n100.r06.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s001_output/n100.r06.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s001_output/n100.r06.s001.reference.fas\" \"n100.r06.s001_output/n100.r06.s001.fq1.fastq\" \"n100.r06.s001_output/n100.r06.s001.fq2.fastq\" | samtools view -bS - > \"n100.r06.s001_output/n100.r06.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s001_output/n100.r06.s001.untrimmed.sorted.bam\" \"n100.r06.s001_output/n100.r06.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s001_output/n100.r06.s001.untrimmed.sorted.bam\" -b \"n100.r06.s001_output/n100.r06.s001.primers.bed\" -p \"n100.r06.s001_output/n100.r06.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam\" \"n100.r06.s001_output/n100.r06.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s001_output/n100.r06.s001.reference.fas\" \"n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam\" > \"n100.r06.s001_output/n100.r06.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s001_output/n100.r06.s001.reference.fas\" --call-indels \"n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam\" > \"n100.r06.s001_output/n100.r06.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam\" > \"n100.r06.s001_output/n100.r06.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s001_output/n100.r06.s001.depth.txt\" \"n100.r06.s001_output/n100.r06.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s001_output/n100.r06.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s001_output/n100.r06.s001.reference.fas\" | bcftools consensus -m \"n100.r06.s001_output/n100.r06.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s001_output/n100.r06.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task d21f5df2 (flow 398ccd9b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s015_output\"\n        wget -O \"n100.r06.s015_output/n100.r06.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s015_output/n100.r06.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s015_output/n100.r06.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s015_output/n100.r06.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s015_output/n100.r06.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s015_output/n100.r06.s015.reference.fas\" \"n100.r06.s015_output/n100.r06.s015.fq1.fastq\" \"n100.r06.s015_output/n100.r06.s015.fq2.fastq\" | samtools view -bS - > \"n100.r06.s015_output/n100.r06.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s015_output/n100.r06.s015.untrimmed.sorted.bam\" \"n100.r06.s015_output/n100.r06.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s015_output/n100.r06.s015.untrimmed.sorted.bam\" -b \"n100.r06.s015_output/n100.r06.s015.primers.bed\" -p \"n100.r06.s015_output/n100.r06.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam\" \"n100.r06.s015_output/n100.r06.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s015_output/n100.r06.s015.reference.fas\" \"n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam\" > \"n100.r06.s015_output/n100.r06.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s015_output/n100.r06.s015.reference.fas\" --call-indels \"n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam\" > \"n100.r06.s015_output/n100.r06.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam\" > \"n100.r06.s015_output/n100.r06.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s015_output/n100.r06.s015.depth.txt\" \"n100.r06.s015_output/n100.r06.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s015_output/n100.r06.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s015_output/n100.r06.s015.reference.fas\" | bcftools consensus -m \"n100.r06.s015_output/n100.r06.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s015_output/n100.r06.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 3c99934a (flow 26782be1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s049_output\"\n        wget -O \"n100.r06.s049_output/n100.r06.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s049_output/n100.r06.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s049_output/n100.r06.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s049_output/n100.r06.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s049_output/n100.r06.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s049_output/n100.r06.s049.reference.fas\" \"n100.r06.s049_output/n100.r06.s049.fq1.fastq\" \"n100.r06.s049_output/n100.r06.s049.fq2.fastq\" | samtools view -bS - > \"n100.r06.s049_output/n100.r06.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s049_output/n100.r06.s049.untrimmed.sorted.bam\" \"n100.r06.s049_output/n100.r06.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s049_output/n100.r06.s049.untrimmed.sorted.bam\" -b \"n100.r06.s049_output/n100.r06.s049.primers.bed\" -p \"n100.r06.s049_output/n100.r06.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam\" \"n100.r06.s049_output/n100.r06.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s049_output/n100.r06.s049.reference.fas\" \"n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam\" > \"n100.r06.s049_output/n100.r06.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s049_output/n100.r06.s049.reference.fas\" --call-indels \"n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam\" > \"n100.r06.s049_output/n100.r06.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam\" > \"n100.r06.s049_output/n100.r06.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s049_output/n100.r06.s049.depth.txt\" \"n100.r06.s049_output/n100.r06.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s049_output/n100.r06.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s049_output/n100.r06.s049.reference.fas\" | bcftools consensus -m \"n100.r06.s049_output/n100.r06.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s049_output/n100.r06.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 2c9167d6 (flow bfdc7ffb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s019_output\"\n        wget -O \"n100.r06.s019_output/n100.r06.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s019_output/n100.r06.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s019_output/n100.r06.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s019_output/n100.r06.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s019_output/n100.r06.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s019_output/n100.r06.s019.reference.fas\" \"n100.r06.s019_output/n100.r06.s019.fq1.fastq\" \"n100.r06.s019_output/n100.r06.s019.fq2.fastq\" | samtools view -bS - > \"n100.r06.s019_output/n100.r06.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s019_output/n100.r06.s019.untrimmed.sorted.bam\" \"n100.r06.s019_output/n100.r06.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s019_output/n100.r06.s019.untrimmed.sorted.bam\" -b \"n100.r06.s019_output/n100.r06.s019.primers.bed\" -p \"n100.r06.s019_output/n100.r06.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam\" \"n100.r06.s019_output/n100.r06.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s019_output/n100.r06.s019.reference.fas\" \"n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam\" > \"n100.r06.s019_output/n100.r06.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s019_output/n100.r06.s019.reference.fas\" --call-indels \"n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam\" > \"n100.r06.s019_output/n100.r06.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam\" > \"n100.r06.s019_output/n100.r06.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s019_output/n100.r06.s019.depth.txt\" \"n100.r06.s019_output/n100.r06.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s019_output/n100.r06.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s019_output/n100.r06.s019.reference.fas\" | bcftools consensus -m \"n100.r06.s019_output/n100.r06.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s019_output/n100.r06.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task e0cd482b (flow 6eb687d9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s039_output\"\n        wget -O \"n100.r06.s039_output/n100.r06.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s039_output/n100.r06.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s039_output/n100.r06.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s039_output/n100.r06.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s039_output/n100.r06.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s039_output/n100.r06.s039.reference.fas\" \"n100.r06.s039_output/n100.r06.s039.fq1.fastq\" \"n100.r06.s039_output/n100.r06.s039.fq2.fastq\" | samtools view -bS - > \"n100.r06.s039_output/n100.r06.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s039_output/n100.r06.s039.untrimmed.sorted.bam\" \"n100.r06.s039_output/n100.r06.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s039_output/n100.r06.s039.untrimmed.sorted.bam\" -b \"n100.r06.s039_output/n100.r06.s039.primers.bed\" -p \"n100.r06.s039_output/n100.r06.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam\" \"n100.r06.s039_output/n100.r06.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s039_output/n100.r06.s039.reference.fas\" \"n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam\" > \"n100.r06.s039_output/n100.r06.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s039_output/n100.r06.s039.reference.fas\" --call-indels \"n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam\" > \"n100.r06.s039_output/n100.r06.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam\" > \"n100.r06.s039_output/n100.r06.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s039_output/n100.r06.s039.depth.txt\" \"n100.r06.s039_output/n100.r06.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s039_output/n100.r06.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s039_output/n100.r06.s039.reference.fas\" | bcftools consensus -m \"n100.r06.s039_output/n100.r06.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s039_output/n100.r06.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 1727ff25 (flow 05553cfd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s016_output\"\n        wget -O \"n100.r06.s016_output/n100.r06.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s016_output/n100.r06.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s016_output/n100.r06.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s016_output/n100.r06.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s016_output/n100.r06.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s016_output/n100.r06.s016.reference.fas\" \"n100.r06.s016_output/n100.r06.s016.fq1.fastq\" \"n100.r06.s016_output/n100.r06.s016.fq2.fastq\" | samtools view -bS - > \"n100.r06.s016_output/n100.r06.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s016_output/n100.r06.s016.untrimmed.sorted.bam\" \"n100.r06.s016_output/n100.r06.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s016_output/n100.r06.s016.untrimmed.sorted.bam\" -b \"n100.r06.s016_output/n100.r06.s016.primers.bed\" -p \"n100.r06.s016_output/n100.r06.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam\" \"n100.r06.s016_output/n100.r06.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s016_output/n100.r06.s016.reference.fas\" \"n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam\" > \"n100.r06.s016_output/n100.r06.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s016_output/n100.r06.s016.reference.fas\" --call-indels \"n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam\" > \"n100.r06.s016_output/n100.r06.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam\" > \"n100.r06.s016_output/n100.r06.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s016_output/n100.r06.s016.depth.txt\" \"n100.r06.s016_output/n100.r06.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s016_output/n100.r06.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s016_output/n100.r06.s016.reference.fas\" | bcftools consensus -m \"n100.r06.s016_output/n100.r06.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s016_output/n100.r06.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 30d52cd1 (flow 965617d8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s047_output\"\n        wget -O \"n100.r06.s047_output/n100.r06.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s047_output/n100.r06.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s047_output/n100.r06.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s047_output/n100.r06.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s047_output/n100.r06.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s047_output/n100.r06.s047.reference.fas\" \"n100.r06.s047_output/n100.r06.s047.fq1.fastq\" \"n100.r06.s047_output/n100.r06.s047.fq2.fastq\" | samtools view -bS - > \"n100.r06.s047_output/n100.r06.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s047_output/n100.r06.s047.untrimmed.sorted.bam\" \"n100.r06.s047_output/n100.r06.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s047_output/n100.r06.s047.untrimmed.sorted.bam\" -b \"n100.r06.s047_output/n100.r06.s047.primers.bed\" -p \"n100.r06.s047_output/n100.r06.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam\" \"n100.r06.s047_output/n100.r06.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s047_output/n100.r06.s047.reference.fas\" \"n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam\" > \"n100.r06.s047_output/n100.r06.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s047_output/n100.r06.s047.reference.fas\" --call-indels \"n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam\" > \"n100.r06.s047_output/n100.r06.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam\" > \"n100.r06.s047_output/n100.r06.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s047_output/n100.r06.s047.depth.txt\" \"n100.r06.s047_output/n100.r06.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s047_output/n100.r06.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s047_output/n100.r06.s047.reference.fas\" | bcftools consensus -m \"n100.r06.s047_output/n100.r06.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s047_output/n100.r06.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 371261a3 (flow e80820b2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s017_output\"\n        wget -O \"n100.r06.s017_output/n100.r06.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s017_output/n100.r06.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s017_output/n100.r06.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s017_output/n100.r06.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s017_output/n100.r06.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s017_output/n100.r06.s017.reference.fas\" \"n100.r06.s017_output/n100.r06.s017.fq1.fastq\" \"n100.r06.s017_output/n100.r06.s017.fq2.fastq\" | samtools view -bS - > \"n100.r06.s017_output/n100.r06.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s017_output/n100.r06.s017.untrimmed.sorted.bam\" \"n100.r06.s017_output/n100.r06.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s017_output/n100.r06.s017.untrimmed.sorted.bam\" -b \"n100.r06.s017_output/n100.r06.s017.primers.bed\" -p \"n100.r06.s017_output/n100.r06.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam\" \"n100.r06.s017_output/n100.r06.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s017_output/n100.r06.s017.reference.fas\" \"n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam\" > \"n100.r06.s017_output/n100.r06.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s017_output/n100.r06.s017.reference.fas\" --call-indels \"n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam\" > \"n100.r06.s017_output/n100.r06.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam\" > \"n100.r06.s017_output/n100.r06.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s017_output/n100.r06.s017.depth.txt\" \"n100.r06.s017_output/n100.r06.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s017_output/n100.r06.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s017_output/n100.r06.s017.reference.fas\" | bcftools consensus -m \"n100.r06.s017_output/n100.r06.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s017_output/n100.r06.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 4cea0c9b (flow 109c7075): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s018_output\"\n        wget -O \"n100.r06.s018_output/n100.r06.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s018_output/n100.r06.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s018_output/n100.r06.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s018_output/n100.r06.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s018_output/n100.r06.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s018_output/n100.r06.s018.reference.fas\" \"n100.r06.s018_output/n100.r06.s018.fq1.fastq\" \"n100.r06.s018_output/n100.r06.s018.fq2.fastq\" | samtools view -bS - > \"n100.r06.s018_output/n100.r06.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s018_output/n100.r06.s018.untrimmed.sorted.bam\" \"n100.r06.s018_output/n100.r06.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s018_output/n100.r06.s018.untrimmed.sorted.bam\" -b \"n100.r06.s018_output/n100.r06.s018.primers.bed\" -p \"n100.r06.s018_output/n100.r06.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam\" \"n100.r06.s018_output/n100.r06.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s018_output/n100.r06.s018.reference.fas\" \"n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam\" > \"n100.r06.s018_output/n100.r06.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s018_output/n100.r06.s018.reference.fas\" --call-indels \"n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam\" > \"n100.r06.s018_output/n100.r06.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam\" > \"n100.r06.s018_output/n100.r06.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s018_output/n100.r06.s018.depth.txt\" \"n100.r06.s018_output/n100.r06.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s018_output/n100.r06.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s018_output/n100.r06.s018.reference.fas\" | bcftools consensus -m \"n100.r06.s018_output/n100.r06.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s018_output/n100.r06.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task e737ca8f (flow 4bc88741): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s033_output\"\n        wget -O \"n100.r06.s033_output/n100.r06.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s033_output/n100.r06.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s033_output/n100.r06.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s033_output/n100.r06.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s033_output/n100.r06.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s033_output/n100.r06.s033.reference.fas\" \"n100.r06.s033_output/n100.r06.s033.fq1.fastq\" \"n100.r06.s033_output/n100.r06.s033.fq2.fastq\" | samtools view -bS - > \"n100.r06.s033_output/n100.r06.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s033_output/n100.r06.s033.untrimmed.sorted.bam\" \"n100.r06.s033_output/n100.r06.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s033_output/n100.r06.s033.untrimmed.sorted.bam\" -b \"n100.r06.s033_output/n100.r06.s033.primers.bed\" -p \"n100.r06.s033_output/n100.r06.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam\" \"n100.r06.s033_output/n100.r06.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s033_output/n100.r06.s033.reference.fas\" \"n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam\" > \"n100.r06.s033_output/n100.r06.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s033_output/n100.r06.s033.reference.fas\" --call-indels \"n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam\" > \"n100.r06.s033_output/n100.r06.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam\" > \"n100.r06.s033_output/n100.r06.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s033_output/n100.r06.s033.depth.txt\" \"n100.r06.s033_output/n100.r06.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s033_output/n100.r06.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s033_output/n100.r06.s033.reference.fas\" | bcftools consensus -m \"n100.r06.s033_output/n100.r06.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s033_output/n100.r06.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 70e83fb0 (flow f04fe471): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s031_output\"\n        wget -O \"n100.r06.s031_output/n100.r06.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s031_output/n100.r06.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s031_output/n100.r06.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s031_output/n100.r06.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s031_output/n100.r06.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s031_output/n100.r06.s031.reference.fas\" \"n100.r06.s031_output/n100.r06.s031.fq1.fastq\" \"n100.r06.s031_output/n100.r06.s031.fq2.fastq\" | samtools view -bS - > \"n100.r06.s031_output/n100.r06.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s031_output/n100.r06.s031.untrimmed.sorted.bam\" \"n100.r06.s031_output/n100.r06.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s031_output/n100.r06.s031.untrimmed.sorted.bam\" -b \"n100.r06.s031_output/n100.r06.s031.primers.bed\" -p \"n100.r06.s031_output/n100.r06.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam\" \"n100.r06.s031_output/n100.r06.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s031_output/n100.r06.s031.reference.fas\" \"n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam\" > \"n100.r06.s031_output/n100.r06.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s031_output/n100.r06.s031.reference.fas\" --call-indels \"n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam\" > \"n100.r06.s031_output/n100.r06.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam\" > \"n100.r06.s031_output/n100.r06.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s031_output/n100.r06.s031.depth.txt\" \"n100.r06.s031_output/n100.r06.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s031_output/n100.r06.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s031_output/n100.r06.s031.reference.fas\" | bcftools consensus -m \"n100.r06.s031_output/n100.r06.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s031_output/n100.r06.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task d862912d (flow 99d4b438): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s021_output\"\n        wget -O \"n100.r06.s021_output/n100.r06.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s021_output/n100.r06.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s021_output/n100.r06.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s021_output/n100.r06.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s021_output/n100.r06.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s021_output/n100.r06.s021.reference.fas\" \"n100.r06.s021_output/n100.r06.s021.fq1.fastq\" \"n100.r06.s021_output/n100.r06.s021.fq2.fastq\" | samtools view -bS - > \"n100.r06.s021_output/n100.r06.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s021_output/n100.r06.s021.untrimmed.sorted.bam\" \"n100.r06.s021_output/n100.r06.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s021_output/n100.r06.s021.untrimmed.sorted.bam\" -b \"n100.r06.s021_output/n100.r06.s021.primers.bed\" -p \"n100.r06.s021_output/n100.r06.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam\" \"n100.r06.s021_output/n100.r06.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s021_output/n100.r06.s021.reference.fas\" \"n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam\" > \"n100.r06.s021_output/n100.r06.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s021_output/n100.r06.s021.reference.fas\" --call-indels \"n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam\" > \"n100.r06.s021_output/n100.r06.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam\" > \"n100.r06.s021_output/n100.r06.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s021_output/n100.r06.s021.depth.txt\" \"n100.r06.s021_output/n100.r06.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s021_output/n100.r06.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s021_output/n100.r06.s021.reference.fas\" | bcftools consensus -m \"n100.r06.s021_output/n100.r06.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s021_output/n100.r06.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 69182bd0 (flow 73004c68): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s028_output\"\n        wget -O \"n100.r06.s028_output/n100.r06.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s028_output/n100.r06.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s028_output/n100.r06.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s028_output/n100.r06.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s028_output/n100.r06.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s028_output/n100.r06.s028.reference.fas\" \"n100.r06.s028_output/n100.r06.s028.fq1.fastq\" \"n100.r06.s028_output/n100.r06.s028.fq2.fastq\" | samtools view -bS - > \"n100.r06.s028_output/n100.r06.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s028_output/n100.r06.s028.untrimmed.sorted.bam\" \"n100.r06.s028_output/n100.r06.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s028_output/n100.r06.s028.untrimmed.sorted.bam\" -b \"n100.r06.s028_output/n100.r06.s028.primers.bed\" -p \"n100.r06.s028_output/n100.r06.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam\" \"n100.r06.s028_output/n100.r06.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s028_output/n100.r06.s028.reference.fas\" \"n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam\" > \"n100.r06.s028_output/n100.r06.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s028_output/n100.r06.s028.reference.fas\" --call-indels \"n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam\" > \"n100.r06.s028_output/n100.r06.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam\" > \"n100.r06.s028_output/n100.r06.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s028_output/n100.r06.s028.depth.txt\" \"n100.r06.s028_output/n100.r06.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s028_output/n100.r06.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s028_output/n100.r06.s028.reference.fas\" | bcftools consensus -m \"n100.r06.s028_output/n100.r06.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s028_output/n100.r06.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 8f12579b (flow 7b5b3afb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s050_output\"\n        wget -O \"n100.r06.s050_output/n100.r06.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s050_output/n100.r06.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s050_output/n100.r06.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s050_output/n100.r06.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s050_output/n100.r06.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s050_output/n100.r06.s050.reference.fas\" \"n100.r06.s050_output/n100.r06.s050.fq1.fastq\" \"n100.r06.s050_output/n100.r06.s050.fq2.fastq\" | samtools view -bS - > \"n100.r06.s050_output/n100.r06.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s050_output/n100.r06.s050.untrimmed.sorted.bam\" \"n100.r06.s050_output/n100.r06.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s050_output/n100.r06.s050.untrimmed.sorted.bam\" -b \"n100.r06.s050_output/n100.r06.s050.primers.bed\" -p \"n100.r06.s050_output/n100.r06.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam\" \"n100.r06.s050_output/n100.r06.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s050_output/n100.r06.s050.reference.fas\" \"n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam\" > \"n100.r06.s050_output/n100.r06.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s050_output/n100.r06.s050.reference.fas\" --call-indels \"n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam\" > \"n100.r06.s050_output/n100.r06.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam\" > \"n100.r06.s050_output/n100.r06.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s050_output/n100.r06.s050.depth.txt\" \"n100.r06.s050_output/n100.r06.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s050_output/n100.r06.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s050_output/n100.r06.s050.reference.fas\" | bcftools consensus -m \"n100.r06.s050_output/n100.r06.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s050_output/n100.r06.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task f672ef92 (flow 14086e68): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s093_output\"\n        wget -O \"n100.r06.s093_output/n100.r06.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s093_output/n100.r06.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s093_output/n100.r06.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s093_output/n100.r06.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s093_output/n100.r06.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s093_output/n100.r06.s093.reference.fas\" \"n100.r06.s093_output/n100.r06.s093.fq1.fastq\" \"n100.r06.s093_output/n100.r06.s093.fq2.fastq\" | samtools view -bS - > \"n100.r06.s093_output/n100.r06.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s093_output/n100.r06.s093.untrimmed.sorted.bam\" \"n100.r06.s093_output/n100.r06.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s093_output/n100.r06.s093.untrimmed.sorted.bam\" -b \"n100.r06.s093_output/n100.r06.s093.primers.bed\" -p \"n100.r06.s093_output/n100.r06.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam\" \"n100.r06.s093_output/n100.r06.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s093_output/n100.r06.s093.reference.fas\" \"n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam\" > \"n100.r06.s093_output/n100.r06.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s093_output/n100.r06.s093.reference.fas\" --call-indels \"n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam\" > \"n100.r06.s093_output/n100.r06.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam\" > \"n100.r06.s093_output/n100.r06.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s093_output/n100.r06.s093.depth.txt\" \"n100.r06.s093_output/n100.r06.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s093_output/n100.r06.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s093_output/n100.r06.s093.reference.fas\" | bcftools consensus -m \"n100.r06.s093_output/n100.r06.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s093_output/n100.r06.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task a7d07754 (flow 10cd036d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s007_output\"\n        wget -O \"n100.r06.s007_output/n100.r06.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s007_output/n100.r06.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s007_output/n100.r06.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s007_output/n100.r06.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s007_output/n100.r06.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s007_output/n100.r06.s007.reference.fas\" \"n100.r06.s007_output/n100.r06.s007.fq1.fastq\" \"n100.r06.s007_output/n100.r06.s007.fq2.fastq\" | samtools view -bS - > \"n100.r06.s007_output/n100.r06.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s007_output/n100.r06.s007.untrimmed.sorted.bam\" \"n100.r06.s007_output/n100.r06.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s007_output/n100.r06.s007.untrimmed.sorted.bam\" -b \"n100.r06.s007_output/n100.r06.s007.primers.bed\" -p \"n100.r06.s007_output/n100.r06.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam\" \"n100.r06.s007_output/n100.r06.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s007_output/n100.r06.s007.reference.fas\" \"n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam\" > \"n100.r06.s007_output/n100.r06.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s007_output/n100.r06.s007.reference.fas\" --call-indels \"n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam\" > \"n100.r06.s007_output/n100.r06.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam\" > \"n100.r06.s007_output/n100.r06.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s007_output/n100.r06.s007.depth.txt\" \"n100.r06.s007_output/n100.r06.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s007_output/n100.r06.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s007_output/n100.r06.s007.reference.fas\" | bcftools consensus -m \"n100.r06.s007_output/n100.r06.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s007_output/n100.r06.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 24761a03 (flow 4e887abd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s040_output\"\n        wget -O \"n100.r06.s040_output/n100.r06.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s040_output/n100.r06.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s040_output/n100.r06.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s040_output/n100.r06.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s040_output/n100.r06.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s040_output/n100.r06.s040.reference.fas\" \"n100.r06.s040_output/n100.r06.s040.fq1.fastq\" \"n100.r06.s040_output/n100.r06.s040.fq2.fastq\" | samtools view -bS - > \"n100.r06.s040_output/n100.r06.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s040_output/n100.r06.s040.untrimmed.sorted.bam\" \"n100.r06.s040_output/n100.r06.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s040_output/n100.r06.s040.untrimmed.sorted.bam\" -b \"n100.r06.s040_output/n100.r06.s040.primers.bed\" -p \"n100.r06.s040_output/n100.r06.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam\" \"n100.r06.s040_output/n100.r06.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s040_output/n100.r06.s040.reference.fas\" \"n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam\" > \"n100.r06.s040_output/n100.r06.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s040_output/n100.r06.s040.reference.fas\" --call-indels \"n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam\" > \"n100.r06.s040_output/n100.r06.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam\" > \"n100.r06.s040_output/n100.r06.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s040_output/n100.r06.s040.depth.txt\" \"n100.r06.s040_output/n100.r06.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s040_output/n100.r06.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s040_output/n100.r06.s040.reference.fas\" | bcftools consensus -m \"n100.r06.s040_output/n100.r06.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s040_output/n100.r06.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 5e093f54 (flow 2ab40335): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s041_output\"\n        wget -O \"n100.r06.s041_output/n100.r06.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s041_output/n100.r06.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s041_output/n100.r06.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s041_output/n100.r06.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s041_output/n100.r06.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s041_output/n100.r06.s041.reference.fas\" \"n100.r06.s041_output/n100.r06.s041.fq1.fastq\" \"n100.r06.s041_output/n100.r06.s041.fq2.fastq\" | samtools view -bS - > \"n100.r06.s041_output/n100.r06.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s041_output/n100.r06.s041.untrimmed.sorted.bam\" \"n100.r06.s041_output/n100.r06.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s041_output/n100.r06.s041.untrimmed.sorted.bam\" -b \"n100.r06.s041_output/n100.r06.s041.primers.bed\" -p \"n100.r06.s041_output/n100.r06.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam\" \"n100.r06.s041_output/n100.r06.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s041_output/n100.r06.s041.reference.fas\" \"n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam\" > \"n100.r06.s041_output/n100.r06.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s041_output/n100.r06.s041.reference.fas\" --call-indels \"n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam\" > \"n100.r06.s041_output/n100.r06.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam\" > \"n100.r06.s041_output/n100.r06.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s041_output/n100.r06.s041.depth.txt\" \"n100.r06.s041_output/n100.r06.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s041_output/n100.r06.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s041_output/n100.r06.s041.reference.fas\" | bcftools consensus -m \"n100.r06.s041_output/n100.r06.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s041_output/n100.r06.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 5ea6c273 (flow 572331ce): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s006_output\"\n        wget -O \"n100.r06.s006_output/n100.r06.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s006_output/n100.r06.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s006_output/n100.r06.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s006_output/n100.r06.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s006_output/n100.r06.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s006_output/n100.r06.s006.reference.fas\" \"n100.r06.s006_output/n100.r06.s006.fq1.fastq\" \"n100.r06.s006_output/n100.r06.s006.fq2.fastq\" | samtools view -bS - > \"n100.r06.s006_output/n100.r06.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s006_output/n100.r06.s006.untrimmed.sorted.bam\" \"n100.r06.s006_output/n100.r06.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s006_output/n100.r06.s006.untrimmed.sorted.bam\" -b \"n100.r06.s006_output/n100.r06.s006.primers.bed\" -p \"n100.r06.s006_output/n100.r06.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam\" \"n100.r06.s006_output/n100.r06.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s006_output/n100.r06.s006.reference.fas\" \"n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam\" > \"n100.r06.s006_output/n100.r06.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s006_output/n100.r06.s006.reference.fas\" --call-indels \"n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam\" > \"n100.r06.s006_output/n100.r06.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam\" > \"n100.r06.s006_output/n100.r06.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s006_output/n100.r06.s006.depth.txt\" \"n100.r06.s006_output/n100.r06.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s006_output/n100.r06.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s006_output/n100.r06.s006.reference.fas\" | bcftools consensus -m \"n100.r06.s006_output/n100.r06.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s006_output/n100.r06.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 46f78305 (flow 40aec702): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s020_output\"\n        wget -O \"n100.r06.s020_output/n100.r06.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s020_output/n100.r06.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s020_output/n100.r06.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s020_output/n100.r06.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s020_output/n100.r06.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s020_output/n100.r06.s020.reference.fas\" \"n100.r06.s020_output/n100.r06.s020.fq1.fastq\" \"n100.r06.s020_output/n100.r06.s020.fq2.fastq\" | samtools view -bS - > \"n100.r06.s020_output/n100.r06.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s020_output/n100.r06.s020.untrimmed.sorted.bam\" \"n100.r06.s020_output/n100.r06.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s020_output/n100.r06.s020.untrimmed.sorted.bam\" -b \"n100.r06.s020_output/n100.r06.s020.primers.bed\" -p \"n100.r06.s020_output/n100.r06.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam\" \"n100.r06.s020_output/n100.r06.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s020_output/n100.r06.s020.reference.fas\" \"n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam\" > \"n100.r06.s020_output/n100.r06.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s020_output/n100.r06.s020.reference.fas\" --call-indels \"n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam\" > \"n100.r06.s020_output/n100.r06.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam\" > \"n100.r06.s020_output/n100.r06.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s020_output/n100.r06.s020.depth.txt\" \"n100.r06.s020_output/n100.r06.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s020_output/n100.r06.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s020_output/n100.r06.s020.reference.fas\" | bcftools consensus -m \"n100.r06.s020_output/n100.r06.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s020_output/n100.r06.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task c68e568f (flow 689ddd7c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s052_output\"\n        wget -O \"n100.r06.s052_output/n100.r06.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s052_output/n100.r06.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s052_output/n100.r06.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s052_output/n100.r06.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s052_output/n100.r06.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s052_output/n100.r06.s052.reference.fas\" \"n100.r06.s052_output/n100.r06.s052.fq1.fastq\" \"n100.r06.s052_output/n100.r06.s052.fq2.fastq\" | samtools view -bS - > \"n100.r06.s052_output/n100.r06.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s052_output/n100.r06.s052.untrimmed.sorted.bam\" \"n100.r06.s052_output/n100.r06.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s052_output/n100.r06.s052.untrimmed.sorted.bam\" -b \"n100.r06.s052_output/n100.r06.s052.primers.bed\" -p \"n100.r06.s052_output/n100.r06.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam\" \"n100.r06.s052_output/n100.r06.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s052_output/n100.r06.s052.reference.fas\" \"n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam\" > \"n100.r06.s052_output/n100.r06.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s052_output/n100.r06.s052.reference.fas\" --call-indels \"n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam\" > \"n100.r06.s052_output/n100.r06.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam\" > \"n100.r06.s052_output/n100.r06.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s052_output/n100.r06.s052.depth.txt\" \"n100.r06.s052_output/n100.r06.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s052_output/n100.r06.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s052_output/n100.r06.s052.reference.fas\" | bcftools consensus -m \"n100.r06.s052_output/n100.r06.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s052_output/n100.r06.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task b9606491 (flow f9a07ecc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s022_output\"\n        wget -O \"n100.r06.s022_output/n100.r06.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s022_output/n100.r06.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s022_output/n100.r06.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s022_output/n100.r06.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s022_output/n100.r06.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s022_output/n100.r06.s022.reference.fas\" \"n100.r06.s022_output/n100.r06.s022.fq1.fastq\" \"n100.r06.s022_output/n100.r06.s022.fq2.fastq\" | samtools view -bS - > \"n100.r06.s022_output/n100.r06.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s022_output/n100.r06.s022.untrimmed.sorted.bam\" \"n100.r06.s022_output/n100.r06.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s022_output/n100.r06.s022.untrimmed.sorted.bam\" -b \"n100.r06.s022_output/n100.r06.s022.primers.bed\" -p \"n100.r06.s022_output/n100.r06.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam\" \"n100.r06.s022_output/n100.r06.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s022_output/n100.r06.s022.reference.fas\" \"n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam\" > \"n100.r06.s022_output/n100.r06.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s022_output/n100.r06.s022.reference.fas\" --call-indels \"n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam\" > \"n100.r06.s022_output/n100.r06.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam\" > \"n100.r06.s022_output/n100.r06.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s022_output/n100.r06.s022.depth.txt\" \"n100.r06.s022_output/n100.r06.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s022_output/n100.r06.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s022_output/n100.r06.s022.reference.fas\" | bcftools consensus -m \"n100.r06.s022_output/n100.r06.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s022_output/n100.r06.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 18412571 (flow e7209bac): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s051_output\"\n        wget -O \"n100.r06.s051_output/n100.r06.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s051_output/n100.r06.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s051_output/n100.r06.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s051_output/n100.r06.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s051_output/n100.r06.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s051_output/n100.r06.s051.reference.fas\" \"n100.r06.s051_output/n100.r06.s051.fq1.fastq\" \"n100.r06.s051_output/n100.r06.s051.fq2.fastq\" | samtools view -bS - > \"n100.r06.s051_output/n100.r06.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s051_output/n100.r06.s051.untrimmed.sorted.bam\" \"n100.r06.s051_output/n100.r06.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s051_output/n100.r06.s051.untrimmed.sorted.bam\" -b \"n100.r06.s051_output/n100.r06.s051.primers.bed\" -p \"n100.r06.s051_output/n100.r06.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam\" \"n100.r06.s051_output/n100.r06.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s051_output/n100.r06.s051.reference.fas\" \"n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam\" > \"n100.r06.s051_output/n100.r06.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s051_output/n100.r06.s051.reference.fas\" --call-indels \"n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam\" > \"n100.r06.s051_output/n100.r06.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam\" > \"n100.r06.s051_output/n100.r06.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s051_output/n100.r06.s051.depth.txt\" \"n100.r06.s051_output/n100.r06.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s051_output/n100.r06.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s051_output/n100.r06.s051.reference.fas\" | bcftools consensus -m \"n100.r06.s051_output/n100.r06.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s051_output/n100.r06.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 9c55a004 (flow 64a26024): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s032_output\"\n        wget -O \"n100.r06.s032_output/n100.r06.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s032_output/n100.r06.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s032_output/n100.r06.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s032_output/n100.r06.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s032_output/n100.r06.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s032_output/n100.r06.s032.reference.fas\" \"n100.r06.s032_output/n100.r06.s032.fq1.fastq\" \"n100.r06.s032_output/n100.r06.s032.fq2.fastq\" | samtools view -bS - > \"n100.r06.s032_output/n100.r06.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s032_output/n100.r06.s032.untrimmed.sorted.bam\" \"n100.r06.s032_output/n100.r06.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s032_output/n100.r06.s032.untrimmed.sorted.bam\" -b \"n100.r06.s032_output/n100.r06.s032.primers.bed\" -p \"n100.r06.s032_output/n100.r06.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam\" \"n100.r06.s032_output/n100.r06.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s032_output/n100.r06.s032.reference.fas\" \"n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam\" > \"n100.r06.s032_output/n100.r06.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s032_output/n100.r06.s032.reference.fas\" --call-indels \"n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam\" > \"n100.r06.s032_output/n100.r06.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam\" > \"n100.r06.s032_output/n100.r06.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s032_output/n100.r06.s032.depth.txt\" \"n100.r06.s032_output/n100.r06.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s032_output/n100.r06.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s032_output/n100.r06.s032.reference.fas\" | bcftools consensus -m \"n100.r06.s032_output/n100.r06.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s032_output/n100.r06.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task b5b1ad47 (flow 57088d8f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s043_output\"\n        wget -O \"n100.r06.s043_output/n100.r06.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s043_output/n100.r06.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s043_output/n100.r06.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s043_output/n100.r06.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s043_output/n100.r06.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s043_output/n100.r06.s043.reference.fas\" \"n100.r06.s043_output/n100.r06.s043.fq1.fastq\" \"n100.r06.s043_output/n100.r06.s043.fq2.fastq\" | samtools view -bS - > \"n100.r06.s043_output/n100.r06.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s043_output/n100.r06.s043.untrimmed.sorted.bam\" \"n100.r06.s043_output/n100.r06.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s043_output/n100.r06.s043.untrimmed.sorted.bam\" -b \"n100.r06.s043_output/n100.r06.s043.primers.bed\" -p \"n100.r06.s043_output/n100.r06.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam\" \"n100.r06.s043_output/n100.r06.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s043_output/n100.r06.s043.reference.fas\" \"n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam\" > \"n100.r06.s043_output/n100.r06.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s043_output/n100.r06.s043.reference.fas\" --call-indels \"n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam\" > \"n100.r06.s043_output/n100.r06.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam\" > \"n100.r06.s043_output/n100.r06.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s043_output/n100.r06.s043.depth.txt\" \"n100.r06.s043_output/n100.r06.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s043_output/n100.r06.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s043_output/n100.r06.s043.reference.fas\" | bcftools consensus -m \"n100.r06.s043_output/n100.r06.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s043_output/n100.r06.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 476b976c (flow 639e3264): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s030_output\"\n        wget -O \"n100.r06.s030_output/n100.r06.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s030_output/n100.r06.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s030_output/n100.r06.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s030_output/n100.r06.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s030_output/n100.r06.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s030_output/n100.r06.s030.reference.fas\" \"n100.r06.s030_output/n100.r06.s030.fq1.fastq\" \"n100.r06.s030_output/n100.r06.s030.fq2.fastq\" | samtools view -bS - > \"n100.r06.s030_output/n100.r06.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s030_output/n100.r06.s030.untrimmed.sorted.bam\" \"n100.r06.s030_output/n100.r06.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s030_output/n100.r06.s030.untrimmed.sorted.bam\" -b \"n100.r06.s030_output/n100.r06.s030.primers.bed\" -p \"n100.r06.s030_output/n100.r06.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam\" \"n100.r06.s030_output/n100.r06.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s030_output/n100.r06.s030.reference.fas\" \"n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam\" > \"n100.r06.s030_output/n100.r06.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s030_output/n100.r06.s030.reference.fas\" --call-indels \"n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam\" > \"n100.r06.s030_output/n100.r06.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam\" > \"n100.r06.s030_output/n100.r06.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s030_output/n100.r06.s030.depth.txt\" \"n100.r06.s030_output/n100.r06.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s030_output/n100.r06.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s030_output/n100.r06.s030.reference.fas\" | bcftools consensus -m \"n100.r06.s030_output/n100.r06.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s030_output/n100.r06.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 14aa39a0 (flow 96cae92b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s029_output\"\n        wget -O \"n100.r06.s029_output/n100.r06.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s029_output/n100.r06.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s029_output/n100.r06.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s029_output/n100.r06.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s029_output/n100.r06.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s029_output/n100.r06.s029.reference.fas\" \"n100.r06.s029_output/n100.r06.s029.fq1.fastq\" \"n100.r06.s029_output/n100.r06.s029.fq2.fastq\" | samtools view -bS - > \"n100.r06.s029_output/n100.r06.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s029_output/n100.r06.s029.untrimmed.sorted.bam\" \"n100.r06.s029_output/n100.r06.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s029_output/n100.r06.s029.untrimmed.sorted.bam\" -b \"n100.r06.s029_output/n100.r06.s029.primers.bed\" -p \"n100.r06.s029_output/n100.r06.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam\" \"n100.r06.s029_output/n100.r06.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s029_output/n100.r06.s029.reference.fas\" \"n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam\" > \"n100.r06.s029_output/n100.r06.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s029_output/n100.r06.s029.reference.fas\" --call-indels \"n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam\" > \"n100.r06.s029_output/n100.r06.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam\" > \"n100.r06.s029_output/n100.r06.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s029_output/n100.r06.s029.depth.txt\" \"n100.r06.s029_output/n100.r06.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s029_output/n100.r06.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s029_output/n100.r06.s029.reference.fas\" | bcftools consensus -m \"n100.r06.s029_output/n100.r06.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s029_output/n100.r06.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 83e10361 (flow cf58eefc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s042_output\"\n        wget -O \"n100.r06.s042_output/n100.r06.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s042_output/n100.r06.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s042_output/n100.r06.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s042_output/n100.r06.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s042_output/n100.r06.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s042_output/n100.r06.s042.reference.fas\" \"n100.r06.s042_output/n100.r06.s042.fq1.fastq\" \"n100.r06.s042_output/n100.r06.s042.fq2.fastq\" | samtools view -bS - > \"n100.r06.s042_output/n100.r06.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s042_output/n100.r06.s042.untrimmed.sorted.bam\" \"n100.r06.s042_output/n100.r06.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s042_output/n100.r06.s042.untrimmed.sorted.bam\" -b \"n100.r06.s042_output/n100.r06.s042.primers.bed\" -p \"n100.r06.s042_output/n100.r06.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam\" \"n100.r06.s042_output/n100.r06.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s042_output/n100.r06.s042.reference.fas\" \"n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam\" > \"n100.r06.s042_output/n100.r06.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s042_output/n100.r06.s042.reference.fas\" --call-indels \"n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam\" > \"n100.r06.s042_output/n100.r06.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam\" > \"n100.r06.s042_output/n100.r06.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s042_output/n100.r06.s042.depth.txt\" \"n100.r06.s042_output/n100.r06.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s042_output/n100.r06.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s042_output/n100.r06.s042.reference.fas\" | bcftools consensus -m \"n100.r06.s042_output/n100.r06.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s042_output/n100.r06.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task d21f287b (flow ba80dc65): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s026_output\"\n        wget -O \"n100.r06.s026_output/n100.r06.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s026_output/n100.r06.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s026_output/n100.r06.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s026_output/n100.r06.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s026_output/n100.r06.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s026_output/n100.r06.s026.reference.fas\" \"n100.r06.s026_output/n100.r06.s026.fq1.fastq\" \"n100.r06.s026_output/n100.r06.s026.fq2.fastq\" | samtools view -bS - > \"n100.r06.s026_output/n100.r06.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s026_output/n100.r06.s026.untrimmed.sorted.bam\" \"n100.r06.s026_output/n100.r06.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s026_output/n100.r06.s026.untrimmed.sorted.bam\" -b \"n100.r06.s026_output/n100.r06.s026.primers.bed\" -p \"n100.r06.s026_output/n100.r06.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam\" \"n100.r06.s026_output/n100.r06.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s026_output/n100.r06.s026.reference.fas\" \"n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam\" > \"n100.r06.s026_output/n100.r06.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s026_output/n100.r06.s026.reference.fas\" --call-indels \"n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam\" > \"n100.r06.s026_output/n100.r06.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam\" > \"n100.r06.s026_output/n100.r06.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s026_output/n100.r06.s026.depth.txt\" \"n100.r06.s026_output/n100.r06.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s026_output/n100.r06.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s026_output/n100.r06.s026.reference.fas\" | bcftools consensus -m \"n100.r06.s026_output/n100.r06.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s026_output/n100.r06.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task f7976c84 (flow 9f59688b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s002_output\"\n        wget -O \"n100.r06.s002_output/n100.r06.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s002_output/n100.r06.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s002_output/n100.r06.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s002_output/n100.r06.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s002_output/n100.r06.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s002_output/n100.r06.s002.reference.fas\" \"n100.r06.s002_output/n100.r06.s002.fq1.fastq\" \"n100.r06.s002_output/n100.r06.s002.fq2.fastq\" | samtools view -bS - > \"n100.r06.s002_output/n100.r06.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s002_output/n100.r06.s002.untrimmed.sorted.bam\" \"n100.r06.s002_output/n100.r06.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s002_output/n100.r06.s002.untrimmed.sorted.bam\" -b \"n100.r06.s002_output/n100.r06.s002.primers.bed\" -p \"n100.r06.s002_output/n100.r06.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam\" \"n100.r06.s002_output/n100.r06.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s002_output/n100.r06.s002.reference.fas\" \"n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam\" > \"n100.r06.s002_output/n100.r06.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s002_output/n100.r06.s002.reference.fas\" --call-indels \"n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam\" > \"n100.r06.s002_output/n100.r06.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam\" > \"n100.r06.s002_output/n100.r06.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s002_output/n100.r06.s002.depth.txt\" \"n100.r06.s002_output/n100.r06.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s002_output/n100.r06.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s002_output/n100.r06.s002.reference.fas\" | bcftools consensus -m \"n100.r06.s002_output/n100.r06.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s002_output/n100.r06.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 3205c8c6 (flow 6a43092a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s023_output\"\n        wget -O \"n100.r06.s023_output/n100.r06.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s023_output/n100.r06.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s023_output/n100.r06.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s023_output/n100.r06.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s023_output/n100.r06.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s023_output/n100.r06.s023.reference.fas\" \"n100.r06.s023_output/n100.r06.s023.fq1.fastq\" \"n100.r06.s023_output/n100.r06.s023.fq2.fastq\" | samtools view -bS - > \"n100.r06.s023_output/n100.r06.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s023_output/n100.r06.s023.untrimmed.sorted.bam\" \"n100.r06.s023_output/n100.r06.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s023_output/n100.r06.s023.untrimmed.sorted.bam\" -b \"n100.r06.s023_output/n100.r06.s023.primers.bed\" -p \"n100.r06.s023_output/n100.r06.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam\" \"n100.r06.s023_output/n100.r06.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s023_output/n100.r06.s023.reference.fas\" \"n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam\" > \"n100.r06.s023_output/n100.r06.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s023_output/n100.r06.s023.reference.fas\" --call-indels \"n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam\" > \"n100.r06.s023_output/n100.r06.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam\" > \"n100.r06.s023_output/n100.r06.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s023_output/n100.r06.s023.depth.txt\" \"n100.r06.s023_output/n100.r06.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s023_output/n100.r06.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s023_output/n100.r06.s023.reference.fas\" | bcftools consensus -m \"n100.r06.s023_output/n100.r06.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s023_output/n100.r06.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task b76e0131 (flow bd79a373): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s003_output\"\n        wget -O \"n100.r06.s003_output/n100.r06.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s003_output/n100.r06.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s003_output/n100.r06.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s003_output/n100.r06.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s003_output/n100.r06.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s003_output/n100.r06.s003.reference.fas\" \"n100.r06.s003_output/n100.r06.s003.fq1.fastq\" \"n100.r06.s003_output/n100.r06.s003.fq2.fastq\" | samtools view -bS - > \"n100.r06.s003_output/n100.r06.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s003_output/n100.r06.s003.untrimmed.sorted.bam\" \"n100.r06.s003_output/n100.r06.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s003_output/n100.r06.s003.untrimmed.sorted.bam\" -b \"n100.r06.s003_output/n100.r06.s003.primers.bed\" -p \"n100.r06.s003_output/n100.r06.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam\" \"n100.r06.s003_output/n100.r06.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s003_output/n100.r06.s003.reference.fas\" \"n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam\" > \"n100.r06.s003_output/n100.r06.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s003_output/n100.r06.s003.reference.fas\" --call-indels \"n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam\" > \"n100.r06.s003_output/n100.r06.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam\" > \"n100.r06.s003_output/n100.r06.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s003_output/n100.r06.s003.depth.txt\" \"n100.r06.s003_output/n100.r06.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s003_output/n100.r06.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s003_output/n100.r06.s003.reference.fas\" | bcftools consensus -m \"n100.r06.s003_output/n100.r06.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s003_output/n100.r06.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 6f2866a3 (flow 34528a24): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s053_output\"\n        wget -O \"n100.r06.s053_output/n100.r06.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s053_output/n100.r06.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s053_output/n100.r06.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s053_output/n100.r06.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s053_output/n100.r06.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s053_output/n100.r06.s053.reference.fas\" \"n100.r06.s053_output/n100.r06.s053.fq1.fastq\" \"n100.r06.s053_output/n100.r06.s053.fq2.fastq\" | samtools view -bS - > \"n100.r06.s053_output/n100.r06.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s053_output/n100.r06.s053.untrimmed.sorted.bam\" \"n100.r06.s053_output/n100.r06.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s053_output/n100.r06.s053.untrimmed.sorted.bam\" -b \"n100.r06.s053_output/n100.r06.s053.primers.bed\" -p \"n100.r06.s053_output/n100.r06.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam\" \"n100.r06.s053_output/n100.r06.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s053_output/n100.r06.s053.reference.fas\" \"n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam\" > \"n100.r06.s053_output/n100.r06.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s053_output/n100.r06.s053.reference.fas\" --call-indels \"n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam\" > \"n100.r06.s053_output/n100.r06.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam\" > \"n100.r06.s053_output/n100.r06.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s053_output/n100.r06.s053.depth.txt\" \"n100.r06.s053_output/n100.r06.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s053_output/n100.r06.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s053_output/n100.r06.s053.reference.fas\" | bcftools consensus -m \"n100.r06.s053_output/n100.r06.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s053_output/n100.r06.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task bc733e05 (flow 50764c57): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s027_output\"\n        wget -O \"n100.r06.s027_output/n100.r06.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s027_output/n100.r06.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s027_output/n100.r06.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s027_output/n100.r06.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s027_output/n100.r06.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s027_output/n100.r06.s027.reference.fas\" \"n100.r06.s027_output/n100.r06.s027.fq1.fastq\" \"n100.r06.s027_output/n100.r06.s027.fq2.fastq\" | samtools view -bS - > \"n100.r06.s027_output/n100.r06.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s027_output/n100.r06.s027.untrimmed.sorted.bam\" \"n100.r06.s027_output/n100.r06.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s027_output/n100.r06.s027.untrimmed.sorted.bam\" -b \"n100.r06.s027_output/n100.r06.s027.primers.bed\" -p \"n100.r06.s027_output/n100.r06.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam\" \"n100.r06.s027_output/n100.r06.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s027_output/n100.r06.s027.reference.fas\" \"n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam\" > \"n100.r06.s027_output/n100.r06.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s027_output/n100.r06.s027.reference.fas\" --call-indels \"n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam\" > \"n100.r06.s027_output/n100.r06.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam\" > \"n100.r06.s027_output/n100.r06.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s027_output/n100.r06.s027.depth.txt\" \"n100.r06.s027_output/n100.r06.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s027_output/n100.r06.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s027_output/n100.r06.s027.reference.fas\" | bcftools consensus -m \"n100.r06.s027_output/n100.r06.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s027_output/n100.r06.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 828d1448 (flow 66f9b0f9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s064_output\"\n        wget -O \"n100.r06.s064_output/n100.r06.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s064_output/n100.r06.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s064_output/n100.r06.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s064_output/n100.r06.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s064_output/n100.r06.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s064_output/n100.r06.s064.reference.fas\" \"n100.r06.s064_output/n100.r06.s064.fq1.fastq\" \"n100.r06.s064_output/n100.r06.s064.fq2.fastq\" | samtools view -bS - > \"n100.r06.s064_output/n100.r06.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s064_output/n100.r06.s064.untrimmed.sorted.bam\" \"n100.r06.s064_output/n100.r06.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s064_output/n100.r06.s064.untrimmed.sorted.bam\" -b \"n100.r06.s064_output/n100.r06.s064.primers.bed\" -p \"n100.r06.s064_output/n100.r06.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam\" \"n100.r06.s064_output/n100.r06.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s064_output/n100.r06.s064.reference.fas\" \"n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam\" > \"n100.r06.s064_output/n100.r06.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s064_output/n100.r06.s064.reference.fas\" --call-indels \"n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam\" > \"n100.r06.s064_output/n100.r06.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam\" > \"n100.r06.s064_output/n100.r06.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s064_output/n100.r06.s064.depth.txt\" \"n100.r06.s064_output/n100.r06.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s064_output/n100.r06.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s064_output/n100.r06.s064.reference.fas\" | bcftools consensus -m \"n100.r06.s064_output/n100.r06.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s064_output/n100.r06.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task c3f45696 (flow d8bb6c45): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s090_output\"\n        wget -O \"n100.r06.s090_output/n100.r06.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s090_output/n100.r06.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s090_output/n100.r06.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s090_output/n100.r06.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s090_output/n100.r06.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s090_output/n100.r06.s090.reference.fas\" \"n100.r06.s090_output/n100.r06.s090.fq1.fastq\" \"n100.r06.s090_output/n100.r06.s090.fq2.fastq\" | samtools view -bS - > \"n100.r06.s090_output/n100.r06.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s090_output/n100.r06.s090.untrimmed.sorted.bam\" \"n100.r06.s090_output/n100.r06.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s090_output/n100.r06.s090.untrimmed.sorted.bam\" -b \"n100.r06.s090_output/n100.r06.s090.primers.bed\" -p \"n100.r06.s090_output/n100.r06.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam\" \"n100.r06.s090_output/n100.r06.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s090_output/n100.r06.s090.reference.fas\" \"n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam\" > \"n100.r06.s090_output/n100.r06.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s090_output/n100.r06.s090.reference.fas\" --call-indels \"n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam\" > \"n100.r06.s090_output/n100.r06.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam\" > \"n100.r06.s090_output/n100.r06.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s090_output/n100.r06.s090.depth.txt\" \"n100.r06.s090_output/n100.r06.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s090_output/n100.r06.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s090_output/n100.r06.s090.reference.fas\" | bcftools consensus -m \"n100.r06.s090_output/n100.r06.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s090_output/n100.r06.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task fe380a87 (flow 1035b4db): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s037_output\"\n        wget -O \"n100.r06.s037_output/n100.r06.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s037_output/n100.r06.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s037_output/n100.r06.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s037_output/n100.r06.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s037_output/n100.r06.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s037_output/n100.r06.s037.reference.fas\" \"n100.r06.s037_output/n100.r06.s037.fq1.fastq\" \"n100.r06.s037_output/n100.r06.s037.fq2.fastq\" | samtools view -bS - > \"n100.r06.s037_output/n100.r06.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s037_output/n100.r06.s037.untrimmed.sorted.bam\" \"n100.r06.s037_output/n100.r06.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s037_output/n100.r06.s037.untrimmed.sorted.bam\" -b \"n100.r06.s037_output/n100.r06.s037.primers.bed\" -p \"n100.r06.s037_output/n100.r06.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam\" \"n100.r06.s037_output/n100.r06.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s037_output/n100.r06.s037.reference.fas\" \"n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam\" > \"n100.r06.s037_output/n100.r06.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s037_output/n100.r06.s037.reference.fas\" --call-indels \"n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam\" > \"n100.r06.s037_output/n100.r06.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam\" > \"n100.r06.s037_output/n100.r06.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s037_output/n100.r06.s037.depth.txt\" \"n100.r06.s037_output/n100.r06.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s037_output/n100.r06.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s037_output/n100.r06.s037.reference.fas\" | bcftools consensus -m \"n100.r06.s037_output/n100.r06.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s037_output/n100.r06.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 8c8e5588 (flow dd21f074): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s013_output\"\n        wget -O \"n100.r06.s013_output/n100.r06.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s013_output/n100.r06.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s013_output/n100.r06.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s013_output/n100.r06.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s013_output/n100.r06.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s013_output/n100.r06.s013.reference.fas\" \"n100.r06.s013_output/n100.r06.s013.fq1.fastq\" \"n100.r06.s013_output/n100.r06.s013.fq2.fastq\" | samtools view -bS - > \"n100.r06.s013_output/n100.r06.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s013_output/n100.r06.s013.untrimmed.sorted.bam\" \"n100.r06.s013_output/n100.r06.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s013_output/n100.r06.s013.untrimmed.sorted.bam\" -b \"n100.r06.s013_output/n100.r06.s013.primers.bed\" -p \"n100.r06.s013_output/n100.r06.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam\" \"n100.r06.s013_output/n100.r06.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s013_output/n100.r06.s013.reference.fas\" \"n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam\" > \"n100.r06.s013_output/n100.r06.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s013_output/n100.r06.s013.reference.fas\" --call-indels \"n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam\" > \"n100.r06.s013_output/n100.r06.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam\" > \"n100.r06.s013_output/n100.r06.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s013_output/n100.r06.s013.depth.txt\" \"n100.r06.s013_output/n100.r06.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s013_output/n100.r06.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s013_output/n100.r06.s013.reference.fas\" | bcftools consensus -m \"n100.r06.s013_output/n100.r06.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s013_output/n100.r06.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task f8df3480 (flow 502645a1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s010_output\"\n        wget -O \"n100.r06.s010_output/n100.r06.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s010_output/n100.r06.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s010_output/n100.r06.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s010_output/n100.r06.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s010_output/n100.r06.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s010_output/n100.r06.s010.reference.fas\" \"n100.r06.s010_output/n100.r06.s010.fq1.fastq\" \"n100.r06.s010_output/n100.r06.s010.fq2.fastq\" | samtools view -bS - > \"n100.r06.s010_output/n100.r06.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s010_output/n100.r06.s010.untrimmed.sorted.bam\" \"n100.r06.s010_output/n100.r06.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s010_output/n100.r06.s010.untrimmed.sorted.bam\" -b \"n100.r06.s010_output/n100.r06.s010.primers.bed\" -p \"n100.r06.s010_output/n100.r06.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam\" \"n100.r06.s010_output/n100.r06.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s010_output/n100.r06.s010.reference.fas\" \"n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam\" > \"n100.r06.s010_output/n100.r06.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s010_output/n100.r06.s010.reference.fas\" --call-indels \"n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam\" > \"n100.r06.s010_output/n100.r06.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam\" > \"n100.r06.s010_output/n100.r06.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s010_output/n100.r06.s010.depth.txt\" \"n100.r06.s010_output/n100.r06.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s010_output/n100.r06.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s010_output/n100.r06.s010.reference.fas\" | bcftools consensus -m \"n100.r06.s010_output/n100.r06.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s010_output/n100.r06.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 22258bab (flow ff4d8244): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s065_output\"\n        wget -O \"n100.r06.s065_output/n100.r06.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s065_output/n100.r06.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s065_output/n100.r06.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s065_output/n100.r06.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s065_output/n100.r06.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s065_output/n100.r06.s065.reference.fas\" \"n100.r06.s065_output/n100.r06.s065.fq1.fastq\" \"n100.r06.s065_output/n100.r06.s065.fq2.fastq\" | samtools view -bS - > \"n100.r06.s065_output/n100.r06.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s065_output/n100.r06.s065.untrimmed.sorted.bam\" \"n100.r06.s065_output/n100.r06.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s065_output/n100.r06.s065.untrimmed.sorted.bam\" -b \"n100.r06.s065_output/n100.r06.s065.primers.bed\" -p \"n100.r06.s065_output/n100.r06.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam\" \"n100.r06.s065_output/n100.r06.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s065_output/n100.r06.s065.reference.fas\" \"n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam\" > \"n100.r06.s065_output/n100.r06.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s065_output/n100.r06.s065.reference.fas\" --call-indels \"n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam\" > \"n100.r06.s065_output/n100.r06.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam\" > \"n100.r06.s065_output/n100.r06.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s065_output/n100.r06.s065.depth.txt\" \"n100.r06.s065_output/n100.r06.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s065_output/n100.r06.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s065_output/n100.r06.s065.reference.fas\" | bcftools consensus -m \"n100.r06.s065_output/n100.r06.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s065_output/n100.r06.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 1116b1ea (flow 0f8df37c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s078_output\"\n        wget -O \"n100.r06.s078_output/n100.r06.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s078_output/n100.r06.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s078_output/n100.r06.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s078_output/n100.r06.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s078_output/n100.r06.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s078_output/n100.r06.s078.reference.fas\" \"n100.r06.s078_output/n100.r06.s078.fq1.fastq\" \"n100.r06.s078_output/n100.r06.s078.fq2.fastq\" | samtools view -bS - > \"n100.r06.s078_output/n100.r06.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s078_output/n100.r06.s078.untrimmed.sorted.bam\" \"n100.r06.s078_output/n100.r06.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s078_output/n100.r06.s078.untrimmed.sorted.bam\" -b \"n100.r06.s078_output/n100.r06.s078.primers.bed\" -p \"n100.r06.s078_output/n100.r06.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam\" \"n100.r06.s078_output/n100.r06.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s078_output/n100.r06.s078.reference.fas\" \"n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam\" > \"n100.r06.s078_output/n100.r06.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s078_output/n100.r06.s078.reference.fas\" --call-indels \"n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam\" > \"n100.r06.s078_output/n100.r06.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam\" > \"n100.r06.s078_output/n100.r06.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s078_output/n100.r06.s078.depth.txt\" \"n100.r06.s078_output/n100.r06.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s078_output/n100.r06.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s078_output/n100.r06.s078.reference.fas\" | bcftools consensus -m \"n100.r06.s078_output/n100.r06.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s078_output/n100.r06.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 07200e78 (flow 8e2cdc8e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s048_output\"\n        wget -O \"n100.r06.s048_output/n100.r06.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s048_output/n100.r06.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s048_output/n100.r06.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s048_output/n100.r06.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s048_output/n100.r06.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s048_output/n100.r06.s048.reference.fas\" \"n100.r06.s048_output/n100.r06.s048.fq1.fastq\" \"n100.r06.s048_output/n100.r06.s048.fq2.fastq\" | samtools view -bS - > \"n100.r06.s048_output/n100.r06.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s048_output/n100.r06.s048.untrimmed.sorted.bam\" \"n100.r06.s048_output/n100.r06.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s048_output/n100.r06.s048.untrimmed.sorted.bam\" -b \"n100.r06.s048_output/n100.r06.s048.primers.bed\" -p \"n100.r06.s048_output/n100.r06.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam\" \"n100.r06.s048_output/n100.r06.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s048_output/n100.r06.s048.reference.fas\" \"n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam\" > \"n100.r06.s048_output/n100.r06.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s048_output/n100.r06.s048.reference.fas\" --call-indels \"n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam\" > \"n100.r06.s048_output/n100.r06.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam\" > \"n100.r06.s048_output/n100.r06.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s048_output/n100.r06.s048.depth.txt\" \"n100.r06.s048_output/n100.r06.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s048_output/n100.r06.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s048_output/n100.r06.s048.reference.fas\" | bcftools consensus -m \"n100.r06.s048_output/n100.r06.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s048_output/n100.r06.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 95bbbc50 (flow 080658ce): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s071_output\"\n        wget -O \"n100.r06.s071_output/n100.r06.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s071_output/n100.r06.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s071_output/n100.r06.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s071_output/n100.r06.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s071_output/n100.r06.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s071_output/n100.r06.s071.reference.fas\" \"n100.r06.s071_output/n100.r06.s071.fq1.fastq\" \"n100.r06.s071_output/n100.r06.s071.fq2.fastq\" | samtools view -bS - > \"n100.r06.s071_output/n100.r06.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s071_output/n100.r06.s071.untrimmed.sorted.bam\" \"n100.r06.s071_output/n100.r06.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s071_output/n100.r06.s071.untrimmed.sorted.bam\" -b \"n100.r06.s071_output/n100.r06.s071.primers.bed\" -p \"n100.r06.s071_output/n100.r06.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam\" \"n100.r06.s071_output/n100.r06.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s071_output/n100.r06.s071.reference.fas\" \"n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam\" > \"n100.r06.s071_output/n100.r06.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s071_output/n100.r06.s071.reference.fas\" --call-indels \"n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam\" > \"n100.r06.s071_output/n100.r06.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam\" > \"n100.r06.s071_output/n100.r06.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s071_output/n100.r06.s071.depth.txt\" \"n100.r06.s071_output/n100.r06.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s071_output/n100.r06.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s071_output/n100.r06.s071.reference.fas\" | bcftools consensus -m \"n100.r06.s071_output/n100.r06.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s071_output/n100.r06.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 626618af (flow 3d47e552): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s005_output\"\n        wget -O \"n100.r06.s005_output/n100.r06.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s005_output/n100.r06.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s005_output/n100.r06.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s005_output/n100.r06.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s005_output/n100.r06.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s005_output/n100.r06.s005.reference.fas\" \"n100.r06.s005_output/n100.r06.s005.fq1.fastq\" \"n100.r06.s005_output/n100.r06.s005.fq2.fastq\" | samtools view -bS - > \"n100.r06.s005_output/n100.r06.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s005_output/n100.r06.s005.untrimmed.sorted.bam\" \"n100.r06.s005_output/n100.r06.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s005_output/n100.r06.s005.untrimmed.sorted.bam\" -b \"n100.r06.s005_output/n100.r06.s005.primers.bed\" -p \"n100.r06.s005_output/n100.r06.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam\" \"n100.r06.s005_output/n100.r06.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s005_output/n100.r06.s005.reference.fas\" \"n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam\" > \"n100.r06.s005_output/n100.r06.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s005_output/n100.r06.s005.reference.fas\" --call-indels \"n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam\" > \"n100.r06.s005_output/n100.r06.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam\" > \"n100.r06.s005_output/n100.r06.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s005_output/n100.r06.s005.depth.txt\" \"n100.r06.s005_output/n100.r06.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s005_output/n100.r06.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s005_output/n100.r06.s005.reference.fas\" | bcftools consensus -m \"n100.r06.s005_output/n100.r06.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s005_output/n100.r06.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 0a7ec48b (flow eda7cfd2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s011_output\"\n        wget -O \"n100.r06.s011_output/n100.r06.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s011_output/n100.r06.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s011_output/n100.r06.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s011_output/n100.r06.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s011_output/n100.r06.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s011_output/n100.r06.s011.reference.fas\" \"n100.r06.s011_output/n100.r06.s011.fq1.fastq\" \"n100.r06.s011_output/n100.r06.s011.fq2.fastq\" | samtools view -bS - > \"n100.r06.s011_output/n100.r06.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s011_output/n100.r06.s011.untrimmed.sorted.bam\" \"n100.r06.s011_output/n100.r06.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s011_output/n100.r06.s011.untrimmed.sorted.bam\" -b \"n100.r06.s011_output/n100.r06.s011.primers.bed\" -p \"n100.r06.s011_output/n100.r06.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam\" \"n100.r06.s011_output/n100.r06.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s011_output/n100.r06.s011.reference.fas\" \"n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam\" > \"n100.r06.s011_output/n100.r06.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s011_output/n100.r06.s011.reference.fas\" --call-indels \"n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam\" > \"n100.r06.s011_output/n100.r06.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam\" > \"n100.r06.s011_output/n100.r06.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s011_output/n100.r06.s011.depth.txt\" \"n100.r06.s011_output/n100.r06.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s011_output/n100.r06.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s011_output/n100.r06.s011.reference.fas\" | bcftools consensus -m \"n100.r06.s011_output/n100.r06.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s011_output/n100.r06.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 965baf5b (flow d8da4a43): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s036_output\"\n        wget -O \"n100.r06.s036_output/n100.r06.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s036_output/n100.r06.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s036_output/n100.r06.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s036_output/n100.r06.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s036_output/n100.r06.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s036_output/n100.r06.s036.reference.fas\" \"n100.r06.s036_output/n100.r06.s036.fq1.fastq\" \"n100.r06.s036_output/n100.r06.s036.fq2.fastq\" | samtools view -bS - > \"n100.r06.s036_output/n100.r06.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s036_output/n100.r06.s036.untrimmed.sorted.bam\" \"n100.r06.s036_output/n100.r06.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s036_output/n100.r06.s036.untrimmed.sorted.bam\" -b \"n100.r06.s036_output/n100.r06.s036.primers.bed\" -p \"n100.r06.s036_output/n100.r06.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam\" \"n100.r06.s036_output/n100.r06.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s036_output/n100.r06.s036.reference.fas\" \"n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam\" > \"n100.r06.s036_output/n100.r06.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s036_output/n100.r06.s036.reference.fas\" --call-indels \"n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam\" > \"n100.r06.s036_output/n100.r06.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam\" > \"n100.r06.s036_output/n100.r06.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s036_output/n100.r06.s036.depth.txt\" \"n100.r06.s036_output/n100.r06.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s036_output/n100.r06.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s036_output/n100.r06.s036.reference.fas\" | bcftools consensus -m \"n100.r06.s036_output/n100.r06.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s036_output/n100.r06.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 4947ed18 (flow 75ab46a8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s081_output\"\n        wget -O \"n100.r06.s081_output/n100.r06.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s081_output/n100.r06.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s081_output/n100.r06.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s081_output/n100.r06.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s081_output/n100.r06.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s081_output/n100.r06.s081.reference.fas\" \"n100.r06.s081_output/n100.r06.s081.fq1.fastq\" \"n100.r06.s081_output/n100.r06.s081.fq2.fastq\" | samtools view -bS - > \"n100.r06.s081_output/n100.r06.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s081_output/n100.r06.s081.untrimmed.sorted.bam\" \"n100.r06.s081_output/n100.r06.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s081_output/n100.r06.s081.untrimmed.sorted.bam\" -b \"n100.r06.s081_output/n100.r06.s081.primers.bed\" -p \"n100.r06.s081_output/n100.r06.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam\" \"n100.r06.s081_output/n100.r06.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s081_output/n100.r06.s081.reference.fas\" \"n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam\" > \"n100.r06.s081_output/n100.r06.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s081_output/n100.r06.s081.reference.fas\" --call-indels \"n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam\" > \"n100.r06.s081_output/n100.r06.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam\" > \"n100.r06.s081_output/n100.r06.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s081_output/n100.r06.s081.depth.txt\" \"n100.r06.s081_output/n100.r06.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s081_output/n100.r06.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s081_output/n100.r06.s081.reference.fas\" | bcftools consensus -m \"n100.r06.s081_output/n100.r06.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s081_output/n100.r06.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task c2bb6acb (flow e34273b7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s070_output\"\n        wget -O \"n100.r06.s070_output/n100.r06.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s070_output/n100.r06.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s070_output/n100.r06.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s070_output/n100.r06.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s070_output/n100.r06.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s070_output/n100.r06.s070.reference.fas\" \"n100.r06.s070_output/n100.r06.s070.fq1.fastq\" \"n100.r06.s070_output/n100.r06.s070.fq2.fastq\" | samtools view -bS - > \"n100.r06.s070_output/n100.r06.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s070_output/n100.r06.s070.untrimmed.sorted.bam\" \"n100.r06.s070_output/n100.r06.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s070_output/n100.r06.s070.untrimmed.sorted.bam\" -b \"n100.r06.s070_output/n100.r06.s070.primers.bed\" -p \"n100.r06.s070_output/n100.r06.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam\" \"n100.r06.s070_output/n100.r06.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s070_output/n100.r06.s070.reference.fas\" \"n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam\" > \"n100.r06.s070_output/n100.r06.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s070_output/n100.r06.s070.reference.fas\" --call-indels \"n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam\" > \"n100.r06.s070_output/n100.r06.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam\" > \"n100.r06.s070_output/n100.r06.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s070_output/n100.r06.s070.depth.txt\" \"n100.r06.s070_output/n100.r06.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s070_output/n100.r06.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s070_output/n100.r06.s070.reference.fas\" | bcftools consensus -m \"n100.r06.s070_output/n100.r06.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s070_output/n100.r06.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 0d8b3e97 (flow ec2e1134): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s057_output\"\n        wget -O \"n100.r06.s057_output/n100.r06.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s057_output/n100.r06.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s057_output/n100.r06.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s057_output/n100.r06.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s057_output/n100.r06.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s057_output/n100.r06.s057.reference.fas\" \"n100.r06.s057_output/n100.r06.s057.fq1.fastq\" \"n100.r06.s057_output/n100.r06.s057.fq2.fastq\" | samtools view -bS - > \"n100.r06.s057_output/n100.r06.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s057_output/n100.r06.s057.untrimmed.sorted.bam\" \"n100.r06.s057_output/n100.r06.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s057_output/n100.r06.s057.untrimmed.sorted.bam\" -b \"n100.r06.s057_output/n100.r06.s057.primers.bed\" -p \"n100.r06.s057_output/n100.r06.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam\" \"n100.r06.s057_output/n100.r06.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s057_output/n100.r06.s057.reference.fas\" \"n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam\" > \"n100.r06.s057_output/n100.r06.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s057_output/n100.r06.s057.reference.fas\" --call-indels \"n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam\" > \"n100.r06.s057_output/n100.r06.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam\" > \"n100.r06.s057_output/n100.r06.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s057_output/n100.r06.s057.depth.txt\" \"n100.r06.s057_output/n100.r06.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s057_output/n100.r06.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s057_output/n100.r06.s057.reference.fas\" | bcftools consensus -m \"n100.r06.s057_output/n100.r06.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s057_output/n100.r06.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 625453dd (flow 0088c4ca): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s034_output\"\n        wget -O \"n100.r06.s034_output/n100.r06.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s034_output/n100.r06.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s034_output/n100.r06.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s034_output/n100.r06.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s034_output/n100.r06.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s034_output/n100.r06.s034.reference.fas\" \"n100.r06.s034_output/n100.r06.s034.fq1.fastq\" \"n100.r06.s034_output/n100.r06.s034.fq2.fastq\" | samtools view -bS - > \"n100.r06.s034_output/n100.r06.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s034_output/n100.r06.s034.untrimmed.sorted.bam\" \"n100.r06.s034_output/n100.r06.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s034_output/n100.r06.s034.untrimmed.sorted.bam\" -b \"n100.r06.s034_output/n100.r06.s034.primers.bed\" -p \"n100.r06.s034_output/n100.r06.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam\" \"n100.r06.s034_output/n100.r06.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s034_output/n100.r06.s034.reference.fas\" \"n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam\" > \"n100.r06.s034_output/n100.r06.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s034_output/n100.r06.s034.reference.fas\" --call-indels \"n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam\" > \"n100.r06.s034_output/n100.r06.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam\" > \"n100.r06.s034_output/n100.r06.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s034_output/n100.r06.s034.depth.txt\" \"n100.r06.s034_output/n100.r06.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s034_output/n100.r06.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s034_output/n100.r06.s034.reference.fas\" | bcftools consensus -m \"n100.r06.s034_output/n100.r06.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s034_output/n100.r06.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task cbed6014 (flow 936d4ab9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s088_output\"\n        wget -O \"n100.r06.s088_output/n100.r06.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s088_output/n100.r06.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s088_output/n100.r06.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s088_output/n100.r06.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s088_output/n100.r06.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s088_output/n100.r06.s088.reference.fas\" \"n100.r06.s088_output/n100.r06.s088.fq1.fastq\" \"n100.r06.s088_output/n100.r06.s088.fq2.fastq\" | samtools view -bS - > \"n100.r06.s088_output/n100.r06.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s088_output/n100.r06.s088.untrimmed.sorted.bam\" \"n100.r06.s088_output/n100.r06.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s088_output/n100.r06.s088.untrimmed.sorted.bam\" -b \"n100.r06.s088_output/n100.r06.s088.primers.bed\" -p \"n100.r06.s088_output/n100.r06.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam\" \"n100.r06.s088_output/n100.r06.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s088_output/n100.r06.s088.reference.fas\" \"n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam\" > \"n100.r06.s088_output/n100.r06.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s088_output/n100.r06.s088.reference.fas\" --call-indels \"n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam\" > \"n100.r06.s088_output/n100.r06.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam\" > \"n100.r06.s088_output/n100.r06.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s088_output/n100.r06.s088.depth.txt\" \"n100.r06.s088_output/n100.r06.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s088_output/n100.r06.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s088_output/n100.r06.s088.reference.fas\" | bcftools consensus -m \"n100.r06.s088_output/n100.r06.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s088_output/n100.r06.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 0f930977 (flow 56443f2e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s024_output\"\n        wget -O \"n100.r06.s024_output/n100.r06.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s024_output/n100.r06.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s024_output/n100.r06.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s024_output/n100.r06.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s024_output/n100.r06.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s024_output/n100.r06.s024.reference.fas\" \"n100.r06.s024_output/n100.r06.s024.fq1.fastq\" \"n100.r06.s024_output/n100.r06.s024.fq2.fastq\" | samtools view -bS - > \"n100.r06.s024_output/n100.r06.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s024_output/n100.r06.s024.untrimmed.sorted.bam\" \"n100.r06.s024_output/n100.r06.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s024_output/n100.r06.s024.untrimmed.sorted.bam\" -b \"n100.r06.s024_output/n100.r06.s024.primers.bed\" -p \"n100.r06.s024_output/n100.r06.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam\" \"n100.r06.s024_output/n100.r06.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s024_output/n100.r06.s024.reference.fas\" \"n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam\" > \"n100.r06.s024_output/n100.r06.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s024_output/n100.r06.s024.reference.fas\" --call-indels \"n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam\" > \"n100.r06.s024_output/n100.r06.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam\" > \"n100.r06.s024_output/n100.r06.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s024_output/n100.r06.s024.depth.txt\" \"n100.r06.s024_output/n100.r06.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s024_output/n100.r06.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s024_output/n100.r06.s024.reference.fas\" | bcftools consensus -m \"n100.r06.s024_output/n100.r06.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s024_output/n100.r06.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 404819b8 (flow a42a45fe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s091_output\"\n        wget -O \"n100.r06.s091_output/n100.r06.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s091_output/n100.r06.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s091_output/n100.r06.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s091_output/n100.r06.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s091_output/n100.r06.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s091_output/n100.r06.s091.reference.fas\" \"n100.r06.s091_output/n100.r06.s091.fq1.fastq\" \"n100.r06.s091_output/n100.r06.s091.fq2.fastq\" | samtools view -bS - > \"n100.r06.s091_output/n100.r06.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s091_output/n100.r06.s091.untrimmed.sorted.bam\" \"n100.r06.s091_output/n100.r06.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s091_output/n100.r06.s091.untrimmed.sorted.bam\" -b \"n100.r06.s091_output/n100.r06.s091.primers.bed\" -p \"n100.r06.s091_output/n100.r06.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam\" \"n100.r06.s091_output/n100.r06.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s091_output/n100.r06.s091.reference.fas\" \"n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam\" > \"n100.r06.s091_output/n100.r06.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s091_output/n100.r06.s091.reference.fas\" --call-indels \"n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam\" > \"n100.r06.s091_output/n100.r06.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam\" > \"n100.r06.s091_output/n100.r06.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s091_output/n100.r06.s091.depth.txt\" \"n100.r06.s091_output/n100.r06.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s091_output/n100.r06.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s091_output/n100.r06.s091.reference.fas\" | bcftools consensus -m \"n100.r06.s091_output/n100.r06.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s091_output/n100.r06.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 53e9365d (flow b71a7073): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s066_output\"\n        wget -O \"n100.r06.s066_output/n100.r06.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s066_output/n100.r06.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s066_output/n100.r06.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s066_output/n100.r06.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s066_output/n100.r06.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s066_output/n100.r06.s066.reference.fas\" \"n100.r06.s066_output/n100.r06.s066.fq1.fastq\" \"n100.r06.s066_output/n100.r06.s066.fq2.fastq\" | samtools view -bS - > \"n100.r06.s066_output/n100.r06.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s066_output/n100.r06.s066.untrimmed.sorted.bam\" \"n100.r06.s066_output/n100.r06.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s066_output/n100.r06.s066.untrimmed.sorted.bam\" -b \"n100.r06.s066_output/n100.r06.s066.primers.bed\" -p \"n100.r06.s066_output/n100.r06.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam\" \"n100.r06.s066_output/n100.r06.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s066_output/n100.r06.s066.reference.fas\" \"n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam\" > \"n100.r06.s066_output/n100.r06.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s066_output/n100.r06.s066.reference.fas\" --call-indels \"n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam\" > \"n100.r06.s066_output/n100.r06.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam\" > \"n100.r06.s066_output/n100.r06.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s066_output/n100.r06.s066.depth.txt\" \"n100.r06.s066_output/n100.r06.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s066_output/n100.r06.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s066_output/n100.r06.s066.reference.fas\" | bcftools consensus -m \"n100.r06.s066_output/n100.r06.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s066_output/n100.r06.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task fbc799bb (flow 54a753f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s044_output\"\n        wget -O \"n100.r06.s044_output/n100.r06.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s044_output/n100.r06.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s044_output/n100.r06.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s044_output/n100.r06.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s044_output/n100.r06.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s044_output/n100.r06.s044.reference.fas\" \"n100.r06.s044_output/n100.r06.s044.fq1.fastq\" \"n100.r06.s044_output/n100.r06.s044.fq2.fastq\" | samtools view -bS - > \"n100.r06.s044_output/n100.r06.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s044_output/n100.r06.s044.untrimmed.sorted.bam\" \"n100.r06.s044_output/n100.r06.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s044_output/n100.r06.s044.untrimmed.sorted.bam\" -b \"n100.r06.s044_output/n100.r06.s044.primers.bed\" -p \"n100.r06.s044_output/n100.r06.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam\" \"n100.r06.s044_output/n100.r06.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s044_output/n100.r06.s044.reference.fas\" \"n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam\" > \"n100.r06.s044_output/n100.r06.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s044_output/n100.r06.s044.reference.fas\" --call-indels \"n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam\" > \"n100.r06.s044_output/n100.r06.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam\" > \"n100.r06.s044_output/n100.r06.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s044_output/n100.r06.s044.depth.txt\" \"n100.r06.s044_output/n100.r06.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s044_output/n100.r06.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s044_output/n100.r06.s044.reference.fas\" | bcftools consensus -m \"n100.r06.s044_output/n100.r06.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s044_output/n100.r06.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task ee390516 (flow dece9cd5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s035_output\"\n        wget -O \"n100.r06.s035_output/n100.r06.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s035_output/n100.r06.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s035_output/n100.r06.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s035_output/n100.r06.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s035_output/n100.r06.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s035_output/n100.r06.s035.reference.fas\" \"n100.r06.s035_output/n100.r06.s035.fq1.fastq\" \"n100.r06.s035_output/n100.r06.s035.fq2.fastq\" | samtools view -bS - > \"n100.r06.s035_output/n100.r06.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s035_output/n100.r06.s035.untrimmed.sorted.bam\" \"n100.r06.s035_output/n100.r06.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s035_output/n100.r06.s035.untrimmed.sorted.bam\" -b \"n100.r06.s035_output/n100.r06.s035.primers.bed\" -p \"n100.r06.s035_output/n100.r06.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam\" \"n100.r06.s035_output/n100.r06.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s035_output/n100.r06.s035.reference.fas\" \"n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam\" > \"n100.r06.s035_output/n100.r06.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s035_output/n100.r06.s035.reference.fas\" --call-indels \"n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam\" > \"n100.r06.s035_output/n100.r06.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam\" > \"n100.r06.s035_output/n100.r06.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s035_output/n100.r06.s035.depth.txt\" \"n100.r06.s035_output/n100.r06.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s035_output/n100.r06.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s035_output/n100.r06.s035.reference.fas\" | bcftools consensus -m \"n100.r06.s035_output/n100.r06.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s035_output/n100.r06.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 144f69b7 (flow 0a334aa8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s087_output\"\n        wget -O \"n100.r06.s087_output/n100.r06.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s087_output/n100.r06.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s087_output/n100.r06.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s087_output/n100.r06.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s087_output/n100.r06.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s087_output/n100.r06.s087.reference.fas\" \"n100.r06.s087_output/n100.r06.s087.fq1.fastq\" \"n100.r06.s087_output/n100.r06.s087.fq2.fastq\" | samtools view -bS - > \"n100.r06.s087_output/n100.r06.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s087_output/n100.r06.s087.untrimmed.sorted.bam\" \"n100.r06.s087_output/n100.r06.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s087_output/n100.r06.s087.untrimmed.sorted.bam\" -b \"n100.r06.s087_output/n100.r06.s087.primers.bed\" -p \"n100.r06.s087_output/n100.r06.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam\" \"n100.r06.s087_output/n100.r06.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s087_output/n100.r06.s087.reference.fas\" \"n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam\" > \"n100.r06.s087_output/n100.r06.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s087_output/n100.r06.s087.reference.fas\" --call-indels \"n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam\" > \"n100.r06.s087_output/n100.r06.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam\" > \"n100.r06.s087_output/n100.r06.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s087_output/n100.r06.s087.depth.txt\" \"n100.r06.s087_output/n100.r06.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s087_output/n100.r06.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s087_output/n100.r06.s087.reference.fas\" | bcftools consensus -m \"n100.r06.s087_output/n100.r06.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s087_output/n100.r06.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task f2651734 (flow c09542e4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s097_output\"\n        wget -O \"n100.r06.s097_output/n100.r06.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s097_output/n100.r06.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s097_output/n100.r06.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s097_output/n100.r06.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s097_output/n100.r06.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s097_output/n100.r06.s097.reference.fas\" \"n100.r06.s097_output/n100.r06.s097.fq1.fastq\" \"n100.r06.s097_output/n100.r06.s097.fq2.fastq\" | samtools view -bS - > \"n100.r06.s097_output/n100.r06.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s097_output/n100.r06.s097.untrimmed.sorted.bam\" \"n100.r06.s097_output/n100.r06.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s097_output/n100.r06.s097.untrimmed.sorted.bam\" -b \"n100.r06.s097_output/n100.r06.s097.primers.bed\" -p \"n100.r06.s097_output/n100.r06.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam\" \"n100.r06.s097_output/n100.r06.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s097_output/n100.r06.s097.reference.fas\" \"n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam\" > \"n100.r06.s097_output/n100.r06.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s097_output/n100.r06.s097.reference.fas\" --call-indels \"n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam\" > \"n100.r06.s097_output/n100.r06.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam\" > \"n100.r06.s097_output/n100.r06.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s097_output/n100.r06.s097.depth.txt\" \"n100.r06.s097_output/n100.r06.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s097_output/n100.r06.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s097_output/n100.r06.s097.reference.fas\" | bcftools consensus -m \"n100.r06.s097_output/n100.r06.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s097_output/n100.r06.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 2bb36640 (flow b8449ca4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s073_output\"\n        wget -O \"n100.r06.s073_output/n100.r06.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s073_output/n100.r06.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s073_output/n100.r06.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s073_output/n100.r06.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s073_output/n100.r06.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s073_output/n100.r06.s073.reference.fas\" \"n100.r06.s073_output/n100.r06.s073.fq1.fastq\" \"n100.r06.s073_output/n100.r06.s073.fq2.fastq\" | samtools view -bS - > \"n100.r06.s073_output/n100.r06.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s073_output/n100.r06.s073.untrimmed.sorted.bam\" \"n100.r06.s073_output/n100.r06.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s073_output/n100.r06.s073.untrimmed.sorted.bam\" -b \"n100.r06.s073_output/n100.r06.s073.primers.bed\" -p \"n100.r06.s073_output/n100.r06.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam\" \"n100.r06.s073_output/n100.r06.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s073_output/n100.r06.s073.reference.fas\" \"n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam\" > \"n100.r06.s073_output/n100.r06.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s073_output/n100.r06.s073.reference.fas\" --call-indels \"n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam\" > \"n100.r06.s073_output/n100.r06.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam\" > \"n100.r06.s073_output/n100.r06.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s073_output/n100.r06.s073.depth.txt\" \"n100.r06.s073_output/n100.r06.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s073_output/n100.r06.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s073_output/n100.r06.s073.reference.fas\" | bcftools consensus -m \"n100.r06.s073_output/n100.r06.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s073_output/n100.r06.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task e962eb6a (flow 285f2d1c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s067_output\"\n        wget -O \"n100.r06.s067_output/n100.r06.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s067_output/n100.r06.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s067_output/n100.r06.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s067_output/n100.r06.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s067_output/n100.r06.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s067_output/n100.r06.s067.reference.fas\" \"n100.r06.s067_output/n100.r06.s067.fq1.fastq\" \"n100.r06.s067_output/n100.r06.s067.fq2.fastq\" | samtools view -bS - > \"n100.r06.s067_output/n100.r06.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s067_output/n100.r06.s067.untrimmed.sorted.bam\" \"n100.r06.s067_output/n100.r06.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s067_output/n100.r06.s067.untrimmed.sorted.bam\" -b \"n100.r06.s067_output/n100.r06.s067.primers.bed\" -p \"n100.r06.s067_output/n100.r06.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam\" \"n100.r06.s067_output/n100.r06.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s067_output/n100.r06.s067.reference.fas\" \"n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam\" > \"n100.r06.s067_output/n100.r06.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s067_output/n100.r06.s067.reference.fas\" --call-indels \"n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam\" > \"n100.r06.s067_output/n100.r06.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam\" > \"n100.r06.s067_output/n100.r06.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s067_output/n100.r06.s067.depth.txt\" \"n100.r06.s067_output/n100.r06.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s067_output/n100.r06.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s067_output/n100.r06.s067.reference.fas\" | bcftools consensus -m \"n100.r06.s067_output/n100.r06.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s067_output/n100.r06.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 26eb79b8 (flow 58c2da81): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s095_output\"\n        wget -O \"n100.r06.s095_output/n100.r06.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s095_output/n100.r06.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s095_output/n100.r06.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s095_output/n100.r06.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s095_output/n100.r06.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s095_output/n100.r06.s095.reference.fas\" \"n100.r06.s095_output/n100.r06.s095.fq1.fastq\" \"n100.r06.s095_output/n100.r06.s095.fq2.fastq\" | samtools view -bS - > \"n100.r06.s095_output/n100.r06.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s095_output/n100.r06.s095.untrimmed.sorted.bam\" \"n100.r06.s095_output/n100.r06.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s095_output/n100.r06.s095.untrimmed.sorted.bam\" -b \"n100.r06.s095_output/n100.r06.s095.primers.bed\" -p \"n100.r06.s095_output/n100.r06.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam\" \"n100.r06.s095_output/n100.r06.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s095_output/n100.r06.s095.reference.fas\" \"n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam\" > \"n100.r06.s095_output/n100.r06.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s095_output/n100.r06.s095.reference.fas\" --call-indels \"n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam\" > \"n100.r06.s095_output/n100.r06.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam\" > \"n100.r06.s095_output/n100.r06.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s095_output/n100.r06.s095.depth.txt\" \"n100.r06.s095_output/n100.r06.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s095_output/n100.r06.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s095_output/n100.r06.s095.reference.fas\" | bcftools consensus -m \"n100.r06.s095_output/n100.r06.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s095_output/n100.r06.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task f3c12ff0 (flow e7449678): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s072_output\"\n        wget -O \"n100.r06.s072_output/n100.r06.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s072_output/n100.r06.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s072_output/n100.r06.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s072_output/n100.r06.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s072_output/n100.r06.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s072_output/n100.r06.s072.reference.fas\" \"n100.r06.s072_output/n100.r06.s072.fq1.fastq\" \"n100.r06.s072_output/n100.r06.s072.fq2.fastq\" | samtools view -bS - > \"n100.r06.s072_output/n100.r06.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s072_output/n100.r06.s072.untrimmed.sorted.bam\" \"n100.r06.s072_output/n100.r06.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s072_output/n100.r06.s072.untrimmed.sorted.bam\" -b \"n100.r06.s072_output/n100.r06.s072.primers.bed\" -p \"n100.r06.s072_output/n100.r06.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam\" \"n100.r06.s072_output/n100.r06.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s072_output/n100.r06.s072.reference.fas\" \"n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam\" > \"n100.r06.s072_output/n100.r06.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s072_output/n100.r06.s072.reference.fas\" --call-indels \"n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam\" > \"n100.r06.s072_output/n100.r06.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam\" > \"n100.r06.s072_output/n100.r06.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s072_output/n100.r06.s072.depth.txt\" \"n100.r06.s072_output/n100.r06.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s072_output/n100.r06.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s072_output/n100.r06.s072.reference.fas\" | bcftools consensus -m \"n100.r06.s072_output/n100.r06.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s072_output/n100.r06.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task d78303d7 (flow d6368caa): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s008_output\"\n        wget -O \"n100.r06.s008_output/n100.r06.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s008_output/n100.r06.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s008_output/n100.r06.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s008_output/n100.r06.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s008_output/n100.r06.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s008_output/n100.r06.s008.reference.fas\" \"n100.r06.s008_output/n100.r06.s008.fq1.fastq\" \"n100.r06.s008_output/n100.r06.s008.fq2.fastq\" | samtools view -bS - > \"n100.r06.s008_output/n100.r06.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s008_output/n100.r06.s008.untrimmed.sorted.bam\" \"n100.r06.s008_output/n100.r06.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s008_output/n100.r06.s008.untrimmed.sorted.bam\" -b \"n100.r06.s008_output/n100.r06.s008.primers.bed\" -p \"n100.r06.s008_output/n100.r06.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam\" \"n100.r06.s008_output/n100.r06.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s008_output/n100.r06.s008.reference.fas\" \"n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam\" > \"n100.r06.s008_output/n100.r06.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s008_output/n100.r06.s008.reference.fas\" --call-indels \"n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam\" > \"n100.r06.s008_output/n100.r06.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam\" > \"n100.r06.s008_output/n100.r06.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s008_output/n100.r06.s008.depth.txt\" \"n100.r06.s008_output/n100.r06.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s008_output/n100.r06.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s008_output/n100.r06.s008.reference.fas\" | bcftools consensus -m \"n100.r06.s008_output/n100.r06.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s008_output/n100.r06.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 35e0ee38 (flow 2337b222): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s046_output\"\n        wget -O \"n100.r06.s046_output/n100.r06.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s046_output/n100.r06.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s046_output/n100.r06.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s046_output/n100.r06.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s046_output/n100.r06.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s046_output/n100.r06.s046.reference.fas\" \"n100.r06.s046_output/n100.r06.s046.fq1.fastq\" \"n100.r06.s046_output/n100.r06.s046.fq2.fastq\" | samtools view -bS - > \"n100.r06.s046_output/n100.r06.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s046_output/n100.r06.s046.untrimmed.sorted.bam\" \"n100.r06.s046_output/n100.r06.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s046_output/n100.r06.s046.untrimmed.sorted.bam\" -b \"n100.r06.s046_output/n100.r06.s046.primers.bed\" -p \"n100.r06.s046_output/n100.r06.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam\" \"n100.r06.s046_output/n100.r06.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s046_output/n100.r06.s046.reference.fas\" \"n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam\" > \"n100.r06.s046_output/n100.r06.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s046_output/n100.r06.s046.reference.fas\" --call-indels \"n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam\" > \"n100.r06.s046_output/n100.r06.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam\" > \"n100.r06.s046_output/n100.r06.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s046_output/n100.r06.s046.depth.txt\" \"n100.r06.s046_output/n100.r06.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s046_output/n100.r06.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s046_output/n100.r06.s046.reference.fas\" | bcftools consensus -m \"n100.r06.s046_output/n100.r06.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s046_output/n100.r06.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task e15277a8 (flow c9e40fed): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s096_output\"\n        wget -O \"n100.r06.s096_output/n100.r06.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s096_output/n100.r06.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s096_output/n100.r06.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s096_output/n100.r06.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s096_output/n100.r06.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s096_output/n100.r06.s096.reference.fas\" \"n100.r06.s096_output/n100.r06.s096.fq1.fastq\" \"n100.r06.s096_output/n100.r06.s096.fq2.fastq\" | samtools view -bS - > \"n100.r06.s096_output/n100.r06.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s096_output/n100.r06.s096.untrimmed.sorted.bam\" \"n100.r06.s096_output/n100.r06.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s096_output/n100.r06.s096.untrimmed.sorted.bam\" -b \"n100.r06.s096_output/n100.r06.s096.primers.bed\" -p \"n100.r06.s096_output/n100.r06.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam\" \"n100.r06.s096_output/n100.r06.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s096_output/n100.r06.s096.reference.fas\" \"n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam\" > \"n100.r06.s096_output/n100.r06.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s096_output/n100.r06.s096.reference.fas\" --call-indels \"n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam\" > \"n100.r06.s096_output/n100.r06.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam\" > \"n100.r06.s096_output/n100.r06.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s096_output/n100.r06.s096.depth.txt\" \"n100.r06.s096_output/n100.r06.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s096_output/n100.r06.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s096_output/n100.r06.s096.reference.fas\" | bcftools consensus -m \"n100.r06.s096_output/n100.r06.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s096_output/n100.r06.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 6ee3129d (flow 7515a847): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s085_output\"\n        wget -O \"n100.r06.s085_output/n100.r06.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s085_output/n100.r06.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s085_output/n100.r06.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s085_output/n100.r06.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s085_output/n100.r06.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s085_output/n100.r06.s085.reference.fas\" \"n100.r06.s085_output/n100.r06.s085.fq1.fastq\" \"n100.r06.s085_output/n100.r06.s085.fq2.fastq\" | samtools view -bS - > \"n100.r06.s085_output/n100.r06.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s085_output/n100.r06.s085.untrimmed.sorted.bam\" \"n100.r06.s085_output/n100.r06.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s085_output/n100.r06.s085.untrimmed.sorted.bam\" -b \"n100.r06.s085_output/n100.r06.s085.primers.bed\" -p \"n100.r06.s085_output/n100.r06.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam\" \"n100.r06.s085_output/n100.r06.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s085_output/n100.r06.s085.reference.fas\" \"n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam\" > \"n100.r06.s085_output/n100.r06.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s085_output/n100.r06.s085.reference.fas\" --call-indels \"n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam\" > \"n100.r06.s085_output/n100.r06.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam\" > \"n100.r06.s085_output/n100.r06.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s085_output/n100.r06.s085.depth.txt\" \"n100.r06.s085_output/n100.r06.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s085_output/n100.r06.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s085_output/n100.r06.s085.reference.fas\" | bcftools consensus -m \"n100.r06.s085_output/n100.r06.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s085_output/n100.r06.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 7a0d4a9f (flow dd42e107): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s084_output\"\n        wget -O \"n100.r06.s084_output/n100.r06.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s084_output/n100.r06.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s084_output/n100.r06.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s084_output/n100.r06.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s084_output/n100.r06.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s084_output/n100.r06.s084.reference.fas\" \"n100.r06.s084_output/n100.r06.s084.fq1.fastq\" \"n100.r06.s084_output/n100.r06.s084.fq2.fastq\" | samtools view -bS - > \"n100.r06.s084_output/n100.r06.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s084_output/n100.r06.s084.untrimmed.sorted.bam\" \"n100.r06.s084_output/n100.r06.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s084_output/n100.r06.s084.untrimmed.sorted.bam\" -b \"n100.r06.s084_output/n100.r06.s084.primers.bed\" -p \"n100.r06.s084_output/n100.r06.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam\" \"n100.r06.s084_output/n100.r06.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s084_output/n100.r06.s084.reference.fas\" \"n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam\" > \"n100.r06.s084_output/n100.r06.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s084_output/n100.r06.s084.reference.fas\" --call-indels \"n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam\" > \"n100.r06.s084_output/n100.r06.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam\" > \"n100.r06.s084_output/n100.r06.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s084_output/n100.r06.s084.depth.txt\" \"n100.r06.s084_output/n100.r06.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s084_output/n100.r06.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s084_output/n100.r06.s084.reference.fas\" | bcftools consensus -m \"n100.r06.s084_output/n100.r06.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s084_output/n100.r06.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task c2bd846b (flow 25ed0be7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s058_output\"\n        wget -O \"n100.r06.s058_output/n100.r06.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s058_output/n100.r06.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s058_output/n100.r06.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s058_output/n100.r06.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s058_output/n100.r06.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s058_output/n100.r06.s058.reference.fas\" \"n100.r06.s058_output/n100.r06.s058.fq1.fastq\" \"n100.r06.s058_output/n100.r06.s058.fq2.fastq\" | samtools view -bS - > \"n100.r06.s058_output/n100.r06.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s058_output/n100.r06.s058.untrimmed.sorted.bam\" \"n100.r06.s058_output/n100.r06.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s058_output/n100.r06.s058.untrimmed.sorted.bam\" -b \"n100.r06.s058_output/n100.r06.s058.primers.bed\" -p \"n100.r06.s058_output/n100.r06.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam\" \"n100.r06.s058_output/n100.r06.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s058_output/n100.r06.s058.reference.fas\" \"n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam\" > \"n100.r06.s058_output/n100.r06.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s058_output/n100.r06.s058.reference.fas\" --call-indels \"n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam\" > \"n100.r06.s058_output/n100.r06.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam\" > \"n100.r06.s058_output/n100.r06.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s058_output/n100.r06.s058.depth.txt\" \"n100.r06.s058_output/n100.r06.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s058_output/n100.r06.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s058_output/n100.r06.s058.reference.fas\" | bcftools consensus -m \"n100.r06.s058_output/n100.r06.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s058_output/n100.r06.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task fdd894a1 (flow b4e03496): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s099_output\"\n        wget -O \"n100.r06.s099_output/n100.r06.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s099_output/n100.r06.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s099_output/n100.r06.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s099_output/n100.r06.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s099_output/n100.r06.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s099_output/n100.r06.s099.reference.fas\" \"n100.r06.s099_output/n100.r06.s099.fq1.fastq\" \"n100.r06.s099_output/n100.r06.s099.fq2.fastq\" | samtools view -bS - > \"n100.r06.s099_output/n100.r06.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s099_output/n100.r06.s099.untrimmed.sorted.bam\" \"n100.r06.s099_output/n100.r06.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s099_output/n100.r06.s099.untrimmed.sorted.bam\" -b \"n100.r06.s099_output/n100.r06.s099.primers.bed\" -p \"n100.r06.s099_output/n100.r06.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam\" \"n100.r06.s099_output/n100.r06.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s099_output/n100.r06.s099.reference.fas\" \"n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam\" > \"n100.r06.s099_output/n100.r06.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s099_output/n100.r06.s099.reference.fas\" --call-indels \"n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam\" > \"n100.r06.s099_output/n100.r06.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam\" > \"n100.r06.s099_output/n100.r06.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s099_output/n100.r06.s099.depth.txt\" \"n100.r06.s099_output/n100.r06.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s099_output/n100.r06.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s099_output/n100.r06.s099.reference.fas\" | bcftools consensus -m \"n100.r06.s099_output/n100.r06.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s099_output/n100.r06.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task d50902bd (flow 4c9d792b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s079_output\"\n        wget -O \"n100.r06.s079_output/n100.r06.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s079_output/n100.r06.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s079_output/n100.r06.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s079_output/n100.r06.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s079_output/n100.r06.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s079_output/n100.r06.s079.reference.fas\" \"n100.r06.s079_output/n100.r06.s079.fq1.fastq\" \"n100.r06.s079_output/n100.r06.s079.fq2.fastq\" | samtools view -bS - > \"n100.r06.s079_output/n100.r06.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s079_output/n100.r06.s079.untrimmed.sorted.bam\" \"n100.r06.s079_output/n100.r06.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s079_output/n100.r06.s079.untrimmed.sorted.bam\" -b \"n100.r06.s079_output/n100.r06.s079.primers.bed\" -p \"n100.r06.s079_output/n100.r06.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam\" \"n100.r06.s079_output/n100.r06.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s079_output/n100.r06.s079.reference.fas\" \"n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam\" > \"n100.r06.s079_output/n100.r06.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s079_output/n100.r06.s079.reference.fas\" --call-indels \"n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam\" > \"n100.r06.s079_output/n100.r06.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam\" > \"n100.r06.s079_output/n100.r06.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s079_output/n100.r06.s079.depth.txt\" \"n100.r06.s079_output/n100.r06.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s079_output/n100.r06.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s079_output/n100.r06.s079.reference.fas\" | bcftools consensus -m \"n100.r06.s079_output/n100.r06.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s079_output/n100.r06.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 42d67778 (flow b302f74d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s045_output\"\n        wget -O \"n100.r06.s045_output/n100.r06.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s045_output/n100.r06.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s045_output/n100.r06.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s045_output/n100.r06.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s045_output/n100.r06.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s045_output/n100.r06.s045.reference.fas\" \"n100.r06.s045_output/n100.r06.s045.fq1.fastq\" \"n100.r06.s045_output/n100.r06.s045.fq2.fastq\" | samtools view -bS - > \"n100.r06.s045_output/n100.r06.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s045_output/n100.r06.s045.untrimmed.sorted.bam\" \"n100.r06.s045_output/n100.r06.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s045_output/n100.r06.s045.untrimmed.sorted.bam\" -b \"n100.r06.s045_output/n100.r06.s045.primers.bed\" -p \"n100.r06.s045_output/n100.r06.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam\" \"n100.r06.s045_output/n100.r06.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s045_output/n100.r06.s045.reference.fas\" \"n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam\" > \"n100.r06.s045_output/n100.r06.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s045_output/n100.r06.s045.reference.fas\" --call-indels \"n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam\" > \"n100.r06.s045_output/n100.r06.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam\" > \"n100.r06.s045_output/n100.r06.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s045_output/n100.r06.s045.depth.txt\" \"n100.r06.s045_output/n100.r06.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s045_output/n100.r06.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s045_output/n100.r06.s045.reference.fas\" | bcftools consensus -m \"n100.r06.s045_output/n100.r06.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s045_output/n100.r06.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 5a7c1684 (flow 02d78e7e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s094_output\"\n        wget -O \"n100.r06.s094_output/n100.r06.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s094_output/n100.r06.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s094_output/n100.r06.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s094_output/n100.r06.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s094_output/n100.r06.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s094_output/n100.r06.s094.reference.fas\" \"n100.r06.s094_output/n100.r06.s094.fq1.fastq\" \"n100.r06.s094_output/n100.r06.s094.fq2.fastq\" | samtools view -bS - > \"n100.r06.s094_output/n100.r06.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s094_output/n100.r06.s094.untrimmed.sorted.bam\" \"n100.r06.s094_output/n100.r06.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s094_output/n100.r06.s094.untrimmed.sorted.bam\" -b \"n100.r06.s094_output/n100.r06.s094.primers.bed\" -p \"n100.r06.s094_output/n100.r06.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam\" \"n100.r06.s094_output/n100.r06.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s094_output/n100.r06.s094.reference.fas\" \"n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam\" > \"n100.r06.s094_output/n100.r06.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s094_output/n100.r06.s094.reference.fas\" --call-indels \"n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam\" > \"n100.r06.s094_output/n100.r06.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam\" > \"n100.r06.s094_output/n100.r06.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s094_output/n100.r06.s094.depth.txt\" \"n100.r06.s094_output/n100.r06.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s094_output/n100.r06.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s094_output/n100.r06.s094.reference.fas\" | bcftools consensus -m \"n100.r06.s094_output/n100.r06.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s094_output/n100.r06.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 5234b714 (flow 7814bb1a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s074_output\"\n        wget -O \"n100.r06.s074_output/n100.r06.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s074_output/n100.r06.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s074_output/n100.r06.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s074_output/n100.r06.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s074_output/n100.r06.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s074_output/n100.r06.s074.reference.fas\" \"n100.r06.s074_output/n100.r06.s074.fq1.fastq\" \"n100.r06.s074_output/n100.r06.s074.fq2.fastq\" | samtools view -bS - > \"n100.r06.s074_output/n100.r06.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s074_output/n100.r06.s074.untrimmed.sorted.bam\" \"n100.r06.s074_output/n100.r06.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s074_output/n100.r06.s074.untrimmed.sorted.bam\" -b \"n100.r06.s074_output/n100.r06.s074.primers.bed\" -p \"n100.r06.s074_output/n100.r06.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam\" \"n100.r06.s074_output/n100.r06.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s074_output/n100.r06.s074.reference.fas\" \"n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam\" > \"n100.r06.s074_output/n100.r06.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s074_output/n100.r06.s074.reference.fas\" --call-indels \"n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam\" > \"n100.r06.s074_output/n100.r06.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam\" > \"n100.r06.s074_output/n100.r06.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s074_output/n100.r06.s074.depth.txt\" \"n100.r06.s074_output/n100.r06.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s074_output/n100.r06.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s074_output/n100.r06.s074.reference.fas\" | bcftools consensus -m \"n100.r06.s074_output/n100.r06.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s074_output/n100.r06.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 9775a3d6 (flow 8e0a6c25): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s063_output\"\n        wget -O \"n100.r06.s063_output/n100.r06.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s063_output/n100.r06.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s063_output/n100.r06.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s063_output/n100.r06.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s063_output/n100.r06.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s063_output/n100.r06.s063.reference.fas\" \"n100.r06.s063_output/n100.r06.s063.fq1.fastq\" \"n100.r06.s063_output/n100.r06.s063.fq2.fastq\" | samtools view -bS - > \"n100.r06.s063_output/n100.r06.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s063_output/n100.r06.s063.untrimmed.sorted.bam\" \"n100.r06.s063_output/n100.r06.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s063_output/n100.r06.s063.untrimmed.sorted.bam\" -b \"n100.r06.s063_output/n100.r06.s063.primers.bed\" -p \"n100.r06.s063_output/n100.r06.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam\" \"n100.r06.s063_output/n100.r06.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s063_output/n100.r06.s063.reference.fas\" \"n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam\" > \"n100.r06.s063_output/n100.r06.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s063_output/n100.r06.s063.reference.fas\" --call-indels \"n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam\" > \"n100.r06.s063_output/n100.r06.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam\" > \"n100.r06.s063_output/n100.r06.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s063_output/n100.r06.s063.depth.txt\" \"n100.r06.s063_output/n100.r06.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s063_output/n100.r06.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s063_output/n100.r06.s063.reference.fas\" | bcftools consensus -m \"n100.r06.s063_output/n100.r06.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s063_output/n100.r06.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task d3fe6c76 (flow b67385b5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s089_output\"\n        wget -O \"n100.r06.s089_output/n100.r06.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s089_output/n100.r06.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s089_output/n100.r06.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s089_output/n100.r06.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s089_output/n100.r06.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s089_output/n100.r06.s089.reference.fas\" \"n100.r06.s089_output/n100.r06.s089.fq1.fastq\" \"n100.r06.s089_output/n100.r06.s089.fq2.fastq\" | samtools view -bS - > \"n100.r06.s089_output/n100.r06.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s089_output/n100.r06.s089.untrimmed.sorted.bam\" \"n100.r06.s089_output/n100.r06.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s089_output/n100.r06.s089.untrimmed.sorted.bam\" -b \"n100.r06.s089_output/n100.r06.s089.primers.bed\" -p \"n100.r06.s089_output/n100.r06.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam\" \"n100.r06.s089_output/n100.r06.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s089_output/n100.r06.s089.reference.fas\" \"n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam\" > \"n100.r06.s089_output/n100.r06.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s089_output/n100.r06.s089.reference.fas\" --call-indels \"n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam\" > \"n100.r06.s089_output/n100.r06.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam\" > \"n100.r06.s089_output/n100.r06.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s089_output/n100.r06.s089.depth.txt\" \"n100.r06.s089_output/n100.r06.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s089_output/n100.r06.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s089_output/n100.r06.s089.reference.fas\" | bcftools consensus -m \"n100.r06.s089_output/n100.r06.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s089_output/n100.r06.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 839dd58e (flow ad16a62e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s077_output\"\n        wget -O \"n100.r06.s077_output/n100.r06.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s077_output/n100.r06.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s077_output/n100.r06.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s077_output/n100.r06.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s077_output/n100.r06.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s077_output/n100.r06.s077.reference.fas\" \"n100.r06.s077_output/n100.r06.s077.fq1.fastq\" \"n100.r06.s077_output/n100.r06.s077.fq2.fastq\" | samtools view -bS - > \"n100.r06.s077_output/n100.r06.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s077_output/n100.r06.s077.untrimmed.sorted.bam\" \"n100.r06.s077_output/n100.r06.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s077_output/n100.r06.s077.untrimmed.sorted.bam\" -b \"n100.r06.s077_output/n100.r06.s077.primers.bed\" -p \"n100.r06.s077_output/n100.r06.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam\" \"n100.r06.s077_output/n100.r06.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s077_output/n100.r06.s077.reference.fas\" \"n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam\" > \"n100.r06.s077_output/n100.r06.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s077_output/n100.r06.s077.reference.fas\" --call-indels \"n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam\" > \"n100.r06.s077_output/n100.r06.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam\" > \"n100.r06.s077_output/n100.r06.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s077_output/n100.r06.s077.depth.txt\" \"n100.r06.s077_output/n100.r06.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s077_output/n100.r06.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s077_output/n100.r06.s077.reference.fas\" | bcftools consensus -m \"n100.r06.s077_output/n100.r06.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s077_output/n100.r06.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 0a05c490 (flow 0133fcdc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s054_output\"\n        wget -O \"n100.r06.s054_output/n100.r06.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s054_output/n100.r06.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s054_output/n100.r06.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s054_output/n100.r06.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s054_output/n100.r06.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s054_output/n100.r06.s054.reference.fas\" \"n100.r06.s054_output/n100.r06.s054.fq1.fastq\" \"n100.r06.s054_output/n100.r06.s054.fq2.fastq\" | samtools view -bS - > \"n100.r06.s054_output/n100.r06.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s054_output/n100.r06.s054.untrimmed.sorted.bam\" \"n100.r06.s054_output/n100.r06.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s054_output/n100.r06.s054.untrimmed.sorted.bam\" -b \"n100.r06.s054_output/n100.r06.s054.primers.bed\" -p \"n100.r06.s054_output/n100.r06.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam\" \"n100.r06.s054_output/n100.r06.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s054_output/n100.r06.s054.reference.fas\" \"n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam\" > \"n100.r06.s054_output/n100.r06.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s054_output/n100.r06.s054.reference.fas\" --call-indels \"n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam\" > \"n100.r06.s054_output/n100.r06.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam\" > \"n100.r06.s054_output/n100.r06.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s054_output/n100.r06.s054.depth.txt\" \"n100.r06.s054_output/n100.r06.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s054_output/n100.r06.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s054_output/n100.r06.s054.reference.fas\" | bcftools consensus -m \"n100.r06.s054_output/n100.r06.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s054_output/n100.r06.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task e671b3d5 (flow e2cc75f4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s082_output\"\n        wget -O \"n100.r06.s082_output/n100.r06.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s082_output/n100.r06.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s082_output/n100.r06.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s082_output/n100.r06.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s082_output/n100.r06.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s082_output/n100.r06.s082.reference.fas\" \"n100.r06.s082_output/n100.r06.s082.fq1.fastq\" \"n100.r06.s082_output/n100.r06.s082.fq2.fastq\" | samtools view -bS - > \"n100.r06.s082_output/n100.r06.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s082_output/n100.r06.s082.untrimmed.sorted.bam\" \"n100.r06.s082_output/n100.r06.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s082_output/n100.r06.s082.untrimmed.sorted.bam\" -b \"n100.r06.s082_output/n100.r06.s082.primers.bed\" -p \"n100.r06.s082_output/n100.r06.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam\" \"n100.r06.s082_output/n100.r06.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s082_output/n100.r06.s082.reference.fas\" \"n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam\" > \"n100.r06.s082_output/n100.r06.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s082_output/n100.r06.s082.reference.fas\" --call-indels \"n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam\" > \"n100.r06.s082_output/n100.r06.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam\" > \"n100.r06.s082_output/n100.r06.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s082_output/n100.r06.s082.depth.txt\" \"n100.r06.s082_output/n100.r06.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s082_output/n100.r06.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s082_output/n100.r06.s082.reference.fas\" | bcftools consensus -m \"n100.r06.s082_output/n100.r06.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s082_output/n100.r06.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 5f63db20 (flow 38aa0f8b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s075_output\"\n        wget -O \"n100.r06.s075_output/n100.r06.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s075_output/n100.r06.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s075_output/n100.r06.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s075_output/n100.r06.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s075_output/n100.r06.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s075_output/n100.r06.s075.reference.fas\" \"n100.r06.s075_output/n100.r06.s075.fq1.fastq\" \"n100.r06.s075_output/n100.r06.s075.fq2.fastq\" | samtools view -bS - > \"n100.r06.s075_output/n100.r06.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s075_output/n100.r06.s075.untrimmed.sorted.bam\" \"n100.r06.s075_output/n100.r06.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s075_output/n100.r06.s075.untrimmed.sorted.bam\" -b \"n100.r06.s075_output/n100.r06.s075.primers.bed\" -p \"n100.r06.s075_output/n100.r06.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam\" \"n100.r06.s075_output/n100.r06.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s075_output/n100.r06.s075.reference.fas\" \"n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam\" > \"n100.r06.s075_output/n100.r06.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s075_output/n100.r06.s075.reference.fas\" --call-indels \"n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam\" > \"n100.r06.s075_output/n100.r06.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam\" > \"n100.r06.s075_output/n100.r06.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s075_output/n100.r06.s075.depth.txt\" \"n100.r06.s075_output/n100.r06.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s075_output/n100.r06.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s075_output/n100.r06.s075.reference.fas\" | bcftools consensus -m \"n100.r06.s075_output/n100.r06.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s075_output/n100.r06.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 5bab0f48 (flow ed96eb31): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s086_output\"\n        wget -O \"n100.r06.s086_output/n100.r06.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s086_output/n100.r06.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s086_output/n100.r06.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s086_output/n100.r06.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s086_output/n100.r06.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s086_output/n100.r06.s086.reference.fas\" \"n100.r06.s086_output/n100.r06.s086.fq1.fastq\" \"n100.r06.s086_output/n100.r06.s086.fq2.fastq\" | samtools view -bS - > \"n100.r06.s086_output/n100.r06.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s086_output/n100.r06.s086.untrimmed.sorted.bam\" \"n100.r06.s086_output/n100.r06.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s086_output/n100.r06.s086.untrimmed.sorted.bam\" -b \"n100.r06.s086_output/n100.r06.s086.primers.bed\" -p \"n100.r06.s086_output/n100.r06.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam\" \"n100.r06.s086_output/n100.r06.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s086_output/n100.r06.s086.reference.fas\" \"n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam\" > \"n100.r06.s086_output/n100.r06.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s086_output/n100.r06.s086.reference.fas\" --call-indels \"n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam\" > \"n100.r06.s086_output/n100.r06.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam\" > \"n100.r06.s086_output/n100.r06.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s086_output/n100.r06.s086.depth.txt\" \"n100.r06.s086_output/n100.r06.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s086_output/n100.r06.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s086_output/n100.r06.s086.reference.fas\" | bcftools consensus -m \"n100.r06.s086_output/n100.r06.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s086_output/n100.r06.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task a624161c (flow 8ae2595d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s059_output\"\n        wget -O \"n100.r06.s059_output/n100.r06.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s059_output/n100.r06.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s059_output/n100.r06.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s059_output/n100.r06.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s059_output/n100.r06.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s059_output/n100.r06.s059.reference.fas\" \"n100.r06.s059_output/n100.r06.s059.fq1.fastq\" \"n100.r06.s059_output/n100.r06.s059.fq2.fastq\" | samtools view -bS - > \"n100.r06.s059_output/n100.r06.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s059_output/n100.r06.s059.untrimmed.sorted.bam\" \"n100.r06.s059_output/n100.r06.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s059_output/n100.r06.s059.untrimmed.sorted.bam\" -b \"n100.r06.s059_output/n100.r06.s059.primers.bed\" -p \"n100.r06.s059_output/n100.r06.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam\" \"n100.r06.s059_output/n100.r06.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s059_output/n100.r06.s059.reference.fas\" \"n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam\" > \"n100.r06.s059_output/n100.r06.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s059_output/n100.r06.s059.reference.fas\" --call-indels \"n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam\" > \"n100.r06.s059_output/n100.r06.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam\" > \"n100.r06.s059_output/n100.r06.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s059_output/n100.r06.s059.depth.txt\" \"n100.r06.s059_output/n100.r06.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s059_output/n100.r06.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s059_output/n100.r06.s059.reference.fas\" | bcftools consensus -m \"n100.r06.s059_output/n100.r06.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s059_output/n100.r06.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task aefe22c5 (flow 3c997280): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s060_output\"\n        wget -O \"n100.r06.s060_output/n100.r06.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s060_output/n100.r06.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s060_output/n100.r06.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s060_output/n100.r06.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s060_output/n100.r06.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s060_output/n100.r06.s060.reference.fas\" \"n100.r06.s060_output/n100.r06.s060.fq1.fastq\" \"n100.r06.s060_output/n100.r06.s060.fq2.fastq\" | samtools view -bS - > \"n100.r06.s060_output/n100.r06.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s060_output/n100.r06.s060.untrimmed.sorted.bam\" \"n100.r06.s060_output/n100.r06.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s060_output/n100.r06.s060.untrimmed.sorted.bam\" -b \"n100.r06.s060_output/n100.r06.s060.primers.bed\" -p \"n100.r06.s060_output/n100.r06.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam\" \"n100.r06.s060_output/n100.r06.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s060_output/n100.r06.s060.reference.fas\" \"n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam\" > \"n100.r06.s060_output/n100.r06.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s060_output/n100.r06.s060.reference.fas\" --call-indels \"n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam\" > \"n100.r06.s060_output/n100.r06.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam\" > \"n100.r06.s060_output/n100.r06.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s060_output/n100.r06.s060.depth.txt\" \"n100.r06.s060_output/n100.r06.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s060_output/n100.r06.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s060_output/n100.r06.s060.reference.fas\" | bcftools consensus -m \"n100.r06.s060_output/n100.r06.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s060_output/n100.r06.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 415eac3c (flow 87851dc6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s055_output\"\n        wget -O \"n100.r06.s055_output/n100.r06.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s055_output/n100.r06.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s055_output/n100.r06.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s055_output/n100.r06.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s055_output/n100.r06.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s055_output/n100.r06.s055.reference.fas\" \"n100.r06.s055_output/n100.r06.s055.fq1.fastq\" \"n100.r06.s055_output/n100.r06.s055.fq2.fastq\" | samtools view -bS - > \"n100.r06.s055_output/n100.r06.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s055_output/n100.r06.s055.untrimmed.sorted.bam\" \"n100.r06.s055_output/n100.r06.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s055_output/n100.r06.s055.untrimmed.sorted.bam\" -b \"n100.r06.s055_output/n100.r06.s055.primers.bed\" -p \"n100.r06.s055_output/n100.r06.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam\" \"n100.r06.s055_output/n100.r06.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s055_output/n100.r06.s055.reference.fas\" \"n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam\" > \"n100.r06.s055_output/n100.r06.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s055_output/n100.r06.s055.reference.fas\" --call-indels \"n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam\" > \"n100.r06.s055_output/n100.r06.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam\" > \"n100.r06.s055_output/n100.r06.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s055_output/n100.r06.s055.depth.txt\" \"n100.r06.s055_output/n100.r06.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s055_output/n100.r06.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s055_output/n100.r06.s055.reference.fas\" | bcftools consensus -m \"n100.r06.s055_output/n100.r06.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s055_output/n100.r06.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 34721296 (flow 26cf7ba6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s100_output\"\n        wget -O \"n100.r06.s100_output/n100.r06.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s100_output/n100.r06.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s100_output/n100.r06.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s100_output/n100.r06.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s100_output/n100.r06.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s100_output/n100.r06.s100.reference.fas\" \"n100.r06.s100_output/n100.r06.s100.fq1.fastq\" \"n100.r06.s100_output/n100.r06.s100.fq2.fastq\" | samtools view -bS - > \"n100.r06.s100_output/n100.r06.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s100_output/n100.r06.s100.untrimmed.sorted.bam\" \"n100.r06.s100_output/n100.r06.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s100_output/n100.r06.s100.untrimmed.sorted.bam\" -b \"n100.r06.s100_output/n100.r06.s100.primers.bed\" -p \"n100.r06.s100_output/n100.r06.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam\" \"n100.r06.s100_output/n100.r06.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s100_output/n100.r06.s100.reference.fas\" \"n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam\" > \"n100.r06.s100_output/n100.r06.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s100_output/n100.r06.s100.reference.fas\" --call-indels \"n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam\" > \"n100.r06.s100_output/n100.r06.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam\" > \"n100.r06.s100_output/n100.r06.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s100_output/n100.r06.s100.depth.txt\" \"n100.r06.s100_output/n100.r06.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s100_output/n100.r06.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s100_output/n100.r06.s100.reference.fas\" | bcftools consensus -m \"n100.r06.s100_output/n100.r06.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s100_output/n100.r06.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 21addea5 (flow 807ea2cc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s083_output\"\n        wget -O \"n100.r06.s083_output/n100.r06.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s083_output/n100.r06.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s083_output/n100.r06.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s083_output/n100.r06.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s083_output/n100.r06.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s083_output/n100.r06.s083.reference.fas\" \"n100.r06.s083_output/n100.r06.s083.fq1.fastq\" \"n100.r06.s083_output/n100.r06.s083.fq2.fastq\" | samtools view -bS - > \"n100.r06.s083_output/n100.r06.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s083_output/n100.r06.s083.untrimmed.sorted.bam\" \"n100.r06.s083_output/n100.r06.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s083_output/n100.r06.s083.untrimmed.sorted.bam\" -b \"n100.r06.s083_output/n100.r06.s083.primers.bed\" -p \"n100.r06.s083_output/n100.r06.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam\" \"n100.r06.s083_output/n100.r06.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s083_output/n100.r06.s083.reference.fas\" \"n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam\" > \"n100.r06.s083_output/n100.r06.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s083_output/n100.r06.s083.reference.fas\" --call-indels \"n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam\" > \"n100.r06.s083_output/n100.r06.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam\" > \"n100.r06.s083_output/n100.r06.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s083_output/n100.r06.s083.depth.txt\" \"n100.r06.s083_output/n100.r06.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s083_output/n100.r06.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s083_output/n100.r06.s083.reference.fas\" | bcftools consensus -m \"n100.r06.s083_output/n100.r06.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s083_output/n100.r06.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 36bad443 (flow f9e00fa2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s062_output\"\n        wget -O \"n100.r06.s062_output/n100.r06.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s062_output/n100.r06.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s062_output/n100.r06.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s062_output/n100.r06.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s062_output/n100.r06.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s062_output/n100.r06.s062.reference.fas\" \"n100.r06.s062_output/n100.r06.s062.fq1.fastq\" \"n100.r06.s062_output/n100.r06.s062.fq2.fastq\" | samtools view -bS - > \"n100.r06.s062_output/n100.r06.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s062_output/n100.r06.s062.untrimmed.sorted.bam\" \"n100.r06.s062_output/n100.r06.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s062_output/n100.r06.s062.untrimmed.sorted.bam\" -b \"n100.r06.s062_output/n100.r06.s062.primers.bed\" -p \"n100.r06.s062_output/n100.r06.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam\" \"n100.r06.s062_output/n100.r06.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s062_output/n100.r06.s062.reference.fas\" \"n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam\" > \"n100.r06.s062_output/n100.r06.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s062_output/n100.r06.s062.reference.fas\" --call-indels \"n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam\" > \"n100.r06.s062_output/n100.r06.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam\" > \"n100.r06.s062_output/n100.r06.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s062_output/n100.r06.s062.depth.txt\" \"n100.r06.s062_output/n100.r06.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s062_output/n100.r06.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s062_output/n100.r06.s062.reference.fas\" | bcftools consensus -m \"n100.r06.s062_output/n100.r06.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s062_output/n100.r06.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 0405c8f8 (flow c10a38f2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s056_output\"\n        wget -O \"n100.r06.s056_output/n100.r06.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s056_output/n100.r06.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s056_output/n100.r06.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s056_output/n100.r06.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s056_output/n100.r06.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s056_output/n100.r06.s056.reference.fas\" \"n100.r06.s056_output/n100.r06.s056.fq1.fastq\" \"n100.r06.s056_output/n100.r06.s056.fq2.fastq\" | samtools view -bS - > \"n100.r06.s056_output/n100.r06.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s056_output/n100.r06.s056.untrimmed.sorted.bam\" \"n100.r06.s056_output/n100.r06.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s056_output/n100.r06.s056.untrimmed.sorted.bam\" -b \"n100.r06.s056_output/n100.r06.s056.primers.bed\" -p \"n100.r06.s056_output/n100.r06.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam\" \"n100.r06.s056_output/n100.r06.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s056_output/n100.r06.s056.reference.fas\" \"n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam\" > \"n100.r06.s056_output/n100.r06.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s056_output/n100.r06.s056.reference.fas\" --call-indels \"n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam\" > \"n100.r06.s056_output/n100.r06.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam\" > \"n100.r06.s056_output/n100.r06.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s056_output/n100.r06.s056.depth.txt\" \"n100.r06.s056_output/n100.r06.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s056_output/n100.r06.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s056_output/n100.r06.s056.reference.fas\" | bcftools consensus -m \"n100.r06.s056_output/n100.r06.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s056_output/n100.r06.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task e67335ac (flow bad69a68): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s009_output\"\n        wget -O \"n100.r06.s009_output/n100.r06.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s009_output/n100.r06.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s009_output/n100.r06.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s009_output/n100.r06.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s009_output/n100.r06.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s009_output/n100.r06.s009.reference.fas\" \"n100.r06.s009_output/n100.r06.s009.fq1.fastq\" \"n100.r06.s009_output/n100.r06.s009.fq2.fastq\" | samtools view -bS - > \"n100.r06.s009_output/n100.r06.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s009_output/n100.r06.s009.untrimmed.sorted.bam\" \"n100.r06.s009_output/n100.r06.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s009_output/n100.r06.s009.untrimmed.sorted.bam\" -b \"n100.r06.s009_output/n100.r06.s009.primers.bed\" -p \"n100.r06.s009_output/n100.r06.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam\" \"n100.r06.s009_output/n100.r06.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s009_output/n100.r06.s009.reference.fas\" \"n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam\" > \"n100.r06.s009_output/n100.r06.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s009_output/n100.r06.s009.reference.fas\" --call-indels \"n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam\" > \"n100.r06.s009_output/n100.r06.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam\" > \"n100.r06.s009_output/n100.r06.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s009_output/n100.r06.s009.depth.txt\" \"n100.r06.s009_output/n100.r06.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s009_output/n100.r06.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s009_output/n100.r06.s009.reference.fas\" | bcftools consensus -m \"n100.r06.s009_output/n100.r06.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s009_output/n100.r06.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:05:31 scheduler task 4a370f54 (flow 5c4c374f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r06.s069_output\"\n        wget -O \"n100.r06.s069_output/n100.r06.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r06.s069_output/n100.r06.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r06.s069_output/n100.r06.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r06.s069_output/n100.r06.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r06.s069_output/n100.r06.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r06.s069_output/n100.r06.s069.reference.fas\" \"n100.r06.s069_output/n100.r06.s069.fq1.fastq\" \"n100.r06.s069_output/n100.r06.s069.fq2.fastq\" | samtools view -bS - > \"n100.r06.s069_output/n100.r06.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s069_output/n100.r06.s069.untrimmed.sorted.bam\" \"n100.r06.s069_output/n100.r06.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r06.s069_output/n100.r06.s069.untrimmed.sorted.bam\" -b \"n100.r06.s069_output/n100.r06.s069.primers.bed\" -p \"n100.r06.s069_output/n100.r06.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam\" \"n100.r06.s069_output/n100.r06.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r06.s069_output/n100.r06.s069.reference.fas\" \"n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam\" > \"n100.r06.s069_output/n100.r06.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r06.s069_output/n100.r06.s069.reference.fas\" --call-indels \"n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam\" > \"n100.r06.s069_output/n100.r06.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam\" > \"n100.r06.s069_output/n100.r06.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r06.s069_output/n100.r06.s069.depth.txt\" \"n100.r06.s069_output/n100.r06.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r06.s069_output/n100.r06.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r06.s069_output/n100.r06.s069.reference.fas\" | bcftools consensus -m \"n100.r06.s069_output/n100.r06.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r06.s069_output/n100.r06.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r06.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r06/n100.r06.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r06/n100.r06.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:06:25 scheduler task fe3638fa (flow c46e9ad2): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 4a370f54 (flow 5c4c374f): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e67335ac (flow bad69a68): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 0405c8f8 (flow c10a38f2): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 36bad443 (flow f9e00fa2): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 21addea5 (flow 807ea2cc): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 34721296 (flow 26cf7ba6): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 0405c8f8 (flow c10a38f2): loading (try 0): started
2021/07/08 17:06:25 scheduler task 34721296 (flow 26cf7ba6): loading (try 0): started
2021/07/08 17:06:25 scheduler task 21addea5 (flow 807ea2cc): loading (try 0): started
2021/07/08 17:06:25 scheduler task 34721296 (flow 26cf7ba6): loading val<.=s3://niema-test/n100/r06/n100.r06.s100_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 21addea5 (flow 807ea2cc): loading val<.=s3://niema-test/n100/r06/n100.r06.s083_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0405c8f8 (flow c10a38f2): loading val<.=s3://niema-test/n100/r06/n100.r06.s056_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0405c8f8 (flow c10a38f2): loading val<.=s3://niema-test/n100/r06/n100.r06.s056_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 21addea5 (flow 807ea2cc): loading val<.=s3://niema-test/n100/r06/n100.r06.s083_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 36bad443 (flow f9e00fa2): loading (try 0): started
2021/07/08 17:06:25 scheduler task 36bad443 (flow f9e00fa2): loading val<.=s3://niema-test/n100/r06/n100.r06.s062_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 4a370f54 (flow 5c4c374f): loading (try 0): started
2021/07/08 17:06:25 scheduler task 4a370f54 (flow 5c4c374f): loading val<.=s3://niema-test/n100/r06/n100.r06.s069_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 36bad443 (flow f9e00fa2): loading val<.=s3://niema-test/n100/r06/n100.r06.s062_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 34721296 (flow 26cf7ba6): loading val<.=s3://niema-test/n100/r06/n100.r06.s100_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 4a370f54 (flow 5c4c374f): loading val<.=s3://niema-test/n100/r06/n100.r06.s069_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fe3638fa (flow c46e9ad2): loading (try 0): started
2021/07/08 17:06:25 scheduler task fe3638fa (flow c46e9ad2): loading val<.=s3://niema-test/n100/r06/n100.r06.s080_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 415eac3c (flow 87851dc6): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task aefe22c5 (flow 3c997280): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task a624161c (flow 8ae2595d): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 5bab0f48 (flow ed96eb31): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e67335ac (flow bad69a68): loading (try 0): started
2021/07/08 17:06:25 scheduler task 415eac3c (flow 87851dc6): loading (try 0): started
2021/07/08 17:06:25 scheduler task e67335ac (flow bad69a68): loading val<.=s3://niema-test/n100/r06/n100.r06.s009_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e67335ac (flow bad69a68): loading val<.=s3://niema-test/n100/r06/n100.r06.s009_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5f63db20 (flow 38aa0f8b): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e671b3d5 (flow e2cc75f4): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 0a05c490 (flow 0133fcdc): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 839dd58e (flow ad16a62e): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task d3fe6c76 (flow b67385b5): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 9775a3d6 (flow 8e0a6c25): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 5234b714 (flow 7814bb1a): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 5a7c1684 (flow 02d78e7e): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 42d67778 (flow b302f74d): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task d50902bd (flow 4c9d792b): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task fdd894a1 (flow b4e03496): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task c2bd846b (flow 25ed0be7): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 7a0d4a9f (flow dd42e107): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e671b3d5 (flow e2cc75f4): loading (try 0): started
2021/07/08 17:06:25 scheduler task 839dd58e (flow ad16a62e): loading (try 0): started
2021/07/08 17:06:25 scheduler task d50902bd (flow 4c9d792b): loading (try 0): started
2021/07/08 17:06:25 scheduler task e671b3d5 (flow e2cc75f4): loading val<.=s3://niema-test/n100/r06/n100.r06.s082_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 839dd58e (flow ad16a62e): loading val<.=s3://niema-test/n100/r06/n100.r06.s077_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 839dd58e (flow ad16a62e): loading val<.=s3://niema-test/n100/r06/n100.r06.s077_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d50902bd (flow 4c9d792b): loading val<.=s3://niema-test/n100/r06/n100.r06.s079_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 6ee3129d (flow 7515a847): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e15277a8 (flow c9e40fed): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 35e0ee38 (flow 2337b222): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task d78303d7 (flow d6368caa): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f3c12ff0 (flow e7449678): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 26eb79b8 (flow 58c2da81): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e962eb6a (flow 285f2d1c): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 2bb36640 (flow b8449ca4): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f3c12ff0 (flow e7449678): loading (try 0): started
2021/07/08 17:06:25 scheduler task e962eb6a (flow 285f2d1c): loading (try 0): started
2021/07/08 17:06:25 scheduler task f3c12ff0 (flow e7449678): loading val<.=s3://niema-test/n100/r06/n100.r06.s072_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e962eb6a (flow 285f2d1c): loading val<.=s3://niema-test/n100/r06/n100.r06.s067_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d78303d7 (flow d6368caa): loading (try 0): started
2021/07/08 17:06:25 scheduler task e962eb6a (flow 285f2d1c): loading val<.=s3://niema-test/n100/r06/n100.r06.s067_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d78303d7 (flow d6368caa): loading val<.=s3://niema-test/n100/r06/n100.r06.s008_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d50902bd (flow 4c9d792b): loading val<.=s3://niema-test/n100/r06/n100.r06.s079_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e15277a8 (flow c9e40fed): loading (try 0): started
2021/07/08 17:06:25 scheduler task e15277a8 (flow c9e40fed): loading val<.=s3://niema-test/n100/r06/n100.r06.s096_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f3c12ff0 (flow e7449678): loading val<.=s3://niema-test/n100/r06/n100.r06.s072_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5bab0f48 (flow ed96eb31): loading (try 0): started
2021/07/08 17:06:25 scheduler task 5bab0f48 (flow ed96eb31): loading val<.=s3://niema-test/n100/r06/n100.r06.s086_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5bab0f48 (flow ed96eb31): loading val<.=s3://niema-test/n100/r06/n100.r06.s086_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 2bb36640 (flow b8449ca4): loading (try 0): started
2021/07/08 17:06:25 scheduler task 2bb36640 (flow b8449ca4): loading val<.=s3://niema-test/n100/r06/n100.r06.s073_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task aefe22c5 (flow 3c997280): loading (try 0): started
2021/07/08 17:06:25 scheduler task aefe22c5 (flow 3c997280): loading val<.=s3://niema-test/n100/r06/n100.r06.s060_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 2bb36640 (flow b8449ca4): loading val<.=s3://niema-test/n100/r06/n100.r06.s073_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task a624161c (flow 8ae2595d): loading (try 0): started
2021/07/08 17:06:25 scheduler task a624161c (flow 8ae2595d): loading val<.=s3://niema-test/n100/r06/n100.r06.s059_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task aefe22c5 (flow 3c997280): loading val<.=s3://niema-test/n100/r06/n100.r06.s060_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 415eac3c (flow 87851dc6): loading val<.=s3://niema-test/n100/r06/n100.r06.s055_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 415eac3c (flow 87851dc6): loading val<.=s3://niema-test/n100/r06/n100.r06.s055_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0a05c490 (flow 0133fcdc): loading (try 0): started
2021/07/08 17:06:25 scheduler task 0a05c490 (flow 0133fcdc): loading val<.=s3://niema-test/n100/r06/n100.r06.s054_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task a624161c (flow 8ae2595d): loading val<.=s3://niema-test/n100/r06/n100.r06.s059_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d3fe6c76 (flow b67385b5): loading (try 0): started
2021/07/08 17:06:25 scheduler task 5234b714 (flow 7814bb1a): loading (try 0): started
2021/07/08 17:06:25 scheduler task d3fe6c76 (flow b67385b5): loading val<.=s3://niema-test/n100/r06/n100.r06.s089_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5234b714 (flow 7814bb1a): loading val<.=s3://niema-test/n100/r06/n100.r06.s074_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fdd894a1 (flow b4e03496): loading (try 0): started
2021/07/08 17:06:25 scheduler task d3fe6c76 (flow b67385b5): loading val<.=s3://niema-test/n100/r06/n100.r06.s089_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5234b714 (flow 7814bb1a): loading val<.=s3://niema-test/n100/r06/n100.r06.s074_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fdd894a1 (flow b4e03496): loading val<.=s3://niema-test/n100/r06/n100.r06.s099_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e671b3d5 (flow e2cc75f4): loading val<.=s3://niema-test/n100/r06/n100.r06.s082_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c2bd846b (flow 25ed0be7): loading (try 0): started
2021/07/08 17:06:25 scheduler task c2bd846b (flow 25ed0be7): loading val<.=s3://niema-test/n100/r06/n100.r06.s058_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 42d67778 (flow b302f74d): loading (try 0): started
2021/07/08 17:06:25 scheduler task 42d67778 (flow b302f74d): loading val<.=s3://niema-test/n100/r06/n100.r06.s045_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c2bd846b (flow 25ed0be7): loading val<.=s3://niema-test/n100/r06/n100.r06.s058_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5f63db20 (flow 38aa0f8b): loading (try 0): started
2021/07/08 17:06:25 scheduler task 5f63db20 (flow 38aa0f8b): loading val<.=s3://niema-test/n100/r06/n100.r06.s075_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 42d67778 (flow b302f74d): loading val<.=s3://niema-test/n100/r06/n100.r06.s045_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 9775a3d6 (flow 8e0a6c25): loading (try 0): started
2021/07/08 17:06:25 scheduler task 9775a3d6 (flow 8e0a6c25): loading val<.=s3://niema-test/n100/r06/n100.r06.s063_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 7a0d4a9f (flow dd42e107): loading (try 0): started
2021/07/08 17:06:25 scheduler task 5f63db20 (flow 38aa0f8b): loading val<.=s3://niema-test/n100/r06/n100.r06.s075_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 7a0d4a9f (flow dd42e107): loading val<.=s3://niema-test/n100/r06/n100.r06.s084_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5a7c1684 (flow 02d78e7e): loading (try 0): started
2021/07/08 17:06:25 scheduler task 7a0d4a9f (flow dd42e107): loading val<.=s3://niema-test/n100/r06/n100.r06.s084_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 6ee3129d (flow 7515a847): loading (try 0): started
2021/07/08 17:06:25 scheduler task 35e0ee38 (flow 2337b222): loading (try 0): started
2021/07/08 17:06:25 scheduler task f2651734 (flow c09542e4): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 26eb79b8 (flow 58c2da81): loading (try 0): started
2021/07/08 17:06:25 scheduler task d78303d7 (flow d6368caa): loading val<.=s3://niema-test/n100/r06/n100.r06.s008_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e15277a8 (flow c9e40fed): loading val<.=s3://niema-test/n100/r06/n100.r06.s096_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0a05c490 (flow 0133fcdc): loading val<.=s3://niema-test/n100/r06/n100.r06.s054_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fdd894a1 (flow b4e03496): loading val<.=s3://niema-test/n100/r06/n100.r06.s099_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fe3638fa (flow c46e9ad2): loading val<.=s3://niema-test/n100/r06/n100.r06.s080_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 9775a3d6 (flow 8e0a6c25): loading val<.=s3://niema-test/n100/r06/n100.r06.s063_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5a7c1684 (flow 02d78e7e): loading val<.=s3://niema-test/n100/r06/n100.r06.s094_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5a7c1684 (flow 02d78e7e): loading val<.=s3://niema-test/n100/r06/n100.r06.s094_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 6ee3129d (flow 7515a847): loading val<.=s3://niema-test/n100/r06/n100.r06.s085_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 35e0ee38 (flow 2337b222): loading val<.=s3://niema-test/n100/r06/n100.r06.s046_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 6ee3129d (flow 7515a847): loading val<.=s3://niema-test/n100/r06/n100.r06.s085_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 144f69b7 (flow 0a334aa8): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task ee390516 (flow dece9cd5): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f2651734 (flow c09542e4): loading (try 0): started
2021/07/08 17:06:25 scheduler task 144f69b7 (flow 0a334aa8): loading (try 0): started
2021/07/08 17:06:25 scheduler task 35e0ee38 (flow 2337b222): loading val<.=s3://niema-test/n100/r06/n100.r06.s046_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f2651734 (flow c09542e4): loading val<.=s3://niema-test/n100/r06/n100.r06.s097_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 26eb79b8 (flow 58c2da81): loading val<.=s3://niema-test/n100/r06/n100.r06.s095_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f2651734 (flow c09542e4): loading val<.=s3://niema-test/n100/r06/n100.r06.s097_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 144f69b7 (flow 0a334aa8): loading val<.=s3://niema-test/n100/r06/n100.r06.s087_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fbc799bb (flow 54a753f3): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 53e9365d (flow b71a7073): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 404819b8 (flow a42a45fe): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 0f930977 (flow 56443f2e): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task cbed6014 (flow 936d4ab9): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 625453dd (flow 0088c4ca): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 0d8b3e97 (flow ec2e1134): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task c2bb6acb (flow e34273b7): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 4947ed18 (flow 75ab46a8): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 965baf5b (flow d8da4a43): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 0a7ec48b (flow eda7cfd2): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 626618af (flow 3d47e552): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 95bbbc50 (flow 080658ce): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 07200e78 (flow 8e2cdc8e): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 1116b1ea (flow 0f8df37c): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 22258bab (flow ff4d8244): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f8df3480 (flow 502645a1): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 8c8e5588 (flow dd21f074): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task fe380a87 (flow 1035b4db): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task c3f45696 (flow d8bb6c45): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 828d1448 (flow 66f9b0f9): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task bc733e05 (flow 50764c57): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 6f2866a3 (flow 34528a24): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task b76e0131 (flow bd79a373): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 3205c8c6 (flow 6a43092a): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f7976c84 (flow 9f59688b): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task d21f287b (flow ba80dc65): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 83e10361 (flow cf58eefc): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 14aa39a0 (flow 96cae92b): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 476b976c (flow 639e3264): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task b5b1ad47 (flow 57088d8f): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 9c55a004 (flow 64a26024): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 18412571 (flow e7209bac): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task b9606491 (flow f9a07ecc): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task c68e568f (flow 689ddd7c): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 46f78305 (flow 40aec702): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 5ea6c273 (flow 572331ce): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 5e093f54 (flow 2ab40335): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 24761a03 (flow 4e887abd): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task a7d07754 (flow 10cd036d): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f672ef92 (flow 14086e68): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 8f12579b (flow 7b5b3afb): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 69182bd0 (flow 73004c68): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task d862912d (flow 99d4b438): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 70e83fb0 (flow f04fe471): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e737ca8f (flow 4bc88741): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 4cea0c9b (flow 109c7075): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 371261a3 (flow e80820b2): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 30d52cd1 (flow 965617d8): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 1727ff25 (flow 05553cfd): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task e0cd482b (flow 6eb687d9): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 2c9167d6 (flow bfdc7ffb): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 3c99934a (flow 26782be1): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task d21f5df2 (flow 398ccd9b): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task aef1ea0c (flow d7bcee4f): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 006129c5 (flow 70f0c0c0): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task f8875ac4 (flow bd36172d): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task b067dbe8 (flow 946a9c13): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task ee390516 (flow dece9cd5): loading (try 0): started
2021/07/08 17:06:25 scheduler task b067dbe8 (flow 946a9c13): loading (try 0): started
2021/07/08 17:06:25 scheduler task e737ca8f (flow 4bc88741): loading (try 0): started
2021/07/08 17:06:25 scheduler task b067dbe8 (flow 946a9c13): loading val<.=s3://niema-test/n100/r06/n100.r06.s004_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 53e9365d (flow b71a7073): loading (try 0): started
2021/07/08 17:06:25 scheduler task d862912d (flow 99d4b438): loading (try 0): started
2021/07/08 17:06:25 scheduler task 9c55a004 (flow 64a26024): loading (try 0): started
2021/07/08 17:06:25 scheduler task 4947ed18 (flow 75ab46a8): loading (try 0): started
2021/07/08 17:06:25 scheduler task 70e83fb0 (flow f04fe471): loading (try 0): started
2021/07/08 17:06:25 scheduler task ee390516 (flow dece9cd5): loading val<.=s3://niema-test/n100/r06/n100.r06.s035_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 4cea0c9b (flow 109c7075): loading (try 0): started
2021/07/08 17:06:25 scheduler task 70e83fb0 (flow f04fe471): loading val<.=s3://niema-test/n100/r06/n100.r06.s031_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d21f5df2 (flow 398ccd9b): loading (try 0): started
2021/07/08 17:06:25 scheduler task 53e9365d (flow b71a7073): loading val<.=s3://niema-test/n100/r06/n100.r06.s066_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 4cea0c9b (flow 109c7075): loading val<.=s3://niema-test/n100/r06/n100.r06.s018_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task cbed6014 (flow 936d4ab9): loading (try 0): started
2021/07/08 17:06:25 scheduler task 5e093f54 (flow 2ab40335): loading (try 0): started
2021/07/08 17:06:25 scheduler task d21f5df2 (flow 398ccd9b): loading val<.=s3://niema-test/n100/r06/n100.r06.s015_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 3205c8c6 (flow 6a43092a): loading (try 0): started
2021/07/08 17:06:25 scheduler task 625453dd (flow 0088c4ca): loading (try 0): started
2021/07/08 17:06:25 scheduler task 70e83fb0 (flow f04fe471): loading val<.=s3://niema-test/n100/r06/n100.r06.s031_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 9c55a004 (flow 64a26024): loading val<.=s3://niema-test/n100/r06/n100.r06.s032_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 625453dd (flow 0088c4ca): loading val<.=s3://niema-test/n100/r06/n100.r06.s034_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 626618af (flow 3d47e552): loading (try 0): started
2021/07/08 17:06:25 scheduler task a7d07754 (flow 10cd036d): loading (try 0): started
2021/07/08 17:06:25 scheduler task 626618af (flow 3d47e552): loading val<.=s3://niema-test/n100/r06/n100.r06.s005_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 626618af (flow 3d47e552): loading val<.=s3://niema-test/n100/r06/n100.r06.s005_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 83e10361 (flow cf58eefc): loading (try 0): started
2021/07/08 17:06:25 scheduler task a7d07754 (flow 10cd036d): loading val<.=s3://niema-test/n100/r06/n100.r06.s007_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 83e10361 (flow cf58eefc): loading val<.=s3://niema-test/n100/r06/n100.r06.s042_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task ee390516 (flow dece9cd5): loading val<.=s3://niema-test/n100/r06/n100.r06.s035_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 83e10361 (flow cf58eefc): loading val<.=s3://niema-test/n100/r06/n100.r06.s042_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5e093f54 (flow 2ab40335): loading val<.=s3://niema-test/n100/r06/n100.r06.s041_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task b9606491 (flow f9a07ecc): loading (try 0): started
2021/07/08 17:06:25 scheduler task b9606491 (flow f9a07ecc): loading val<.=s3://niema-test/n100/r06/n100.r06.s022_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c2bb6acb (flow e34273b7): loading (try 0): started
2021/07/08 17:06:25 scheduler task fbc799bb (flow 54a753f3): loading (try 0): started
2021/07/08 17:06:25 scheduler task c2bb6acb (flow e34273b7): loading val<.=s3://niema-test/n100/r06/n100.r06.s070_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fbc799bb (flow 54a753f3): loading val<.=s3://niema-test/n100/r06/n100.r06.s044_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fbc799bb (flow 54a753f3): loading val<.=s3://niema-test/n100/r06/n100.r06.s044_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d21f5df2 (flow 398ccd9b): loading val<.=s3://niema-test/n100/r06/n100.r06.s015_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 9c55a004 (flow 64a26024): loading val<.=s3://niema-test/n100/r06/n100.r06.s032_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e737ca8f (flow 4bc88741): loading val<.=s3://niema-test/n100/r06/n100.r06.s033_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 26eb79b8 (flow 58c2da81): loading val<.=s3://niema-test/n100/r06/n100.r06.s095_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 371261a3 (flow e80820b2): loading (try 0): started
2021/07/08 17:06:25 scheduler task 371261a3 (flow e80820b2): loading val<.=s3://niema-test/n100/r06/n100.r06.s017_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 13aceaad (flow 6791e387): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 957861f5 (flow 82bc0705): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 90258421 (flow 4b4267c3): assigning to alloc ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:06:25 scheduler task 371261a3 (flow e80820b2): loading val<.=s3://niema-test/n100/r06/n100.r06.s017_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 957861f5 (flow 82bc0705): loading (try 0): started
2021/07/08 17:06:25 scheduler task 957861f5 (flow 82bc0705): loading val<.=s3://niema-test/n100/r06/n100.r06.s014_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f672ef92 (flow 14086e68): loading (try 0): started
2021/07/08 17:06:25 scheduler task f672ef92 (flow 14086e68): loading val<.=s3://niema-test/n100/r06/n100.r06.s093_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 13aceaad (flow 6791e387): loading (try 0): started
2021/07/08 17:06:25 scheduler task 13aceaad (flow 6791e387): loading val<.=s3://niema-test/n100/r06/n100.r06.s038_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 90258421 (flow 4b4267c3): loading (try 0): started
2021/07/08 17:06:25 scheduler task 90258421 (flow 4b4267c3): loading val<.=s3://niema-test/n100/r06/n100.r06.s068_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 957861f5 (flow 82bc0705): loading val<.=s3://niema-test/n100/r06/n100.r06.s014_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 8f12579b (flow 7b5b3afb): loading (try 0): started
2021/07/08 17:06:25 scheduler task 8f12579b (flow 7b5b3afb): loading val<.=s3://niema-test/n100/r06/n100.r06.s050_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f672ef92 (flow 14086e68): loading val<.=s3://niema-test/n100/r06/n100.r06.s093_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 90258421 (flow 4b4267c3): loading val<.=s3://niema-test/n100/r06/n100.r06.s068_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 14aa39a0 (flow 96cae92b): loading (try 0): started
2021/07/08 17:06:25 scheduler task 476b976c (flow 639e3264): loading (try 0): started
2021/07/08 17:06:25 scheduler task b5b1ad47 (flow 57088d8f): loading (try 0): started
2021/07/08 17:06:25 scheduler task aef1ea0c (flow d7bcee4f): loading (try 0): started
2021/07/08 17:06:25 scheduler task e737ca8f (flow 4bc88741): loading val<.=s3://niema-test/n100/r06/n100.r06.s033_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 8c8e5588 (flow dd21f074): loading (try 0): started
2021/07/08 17:06:25 scheduler task 30d52cd1 (flow 965617d8): loading (try 0): started
2021/07/08 17:06:25 scheduler task 95bbbc50 (flow 080658ce): loading (try 0): started
2021/07/08 17:06:25 scheduler task d862912d (flow 99d4b438): loading val<.=s3://niema-test/n100/r06/n100.r06.s021_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fe380a87 (flow 1035b4db): loading (try 0): started
2021/07/08 17:06:25 scheduler task 07200e78 (flow 8e2cdc8e): loading (try 0): started
2021/07/08 17:06:25 scheduler task 965baf5b (flow d8da4a43): loading (try 0): started
2021/07/08 17:06:25 scheduler task 1727ff25 (flow 05553cfd): loading (try 0): started
2021/07/08 17:06:25 scheduler task e0cd482b (flow 6eb687d9): loading (try 0): started
2021/07/08 17:06:25 scheduler task d862912d (flow 99d4b438): loading val<.=s3://niema-test/n100/r06/n100.r06.s021_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c3f45696 (flow d8bb6c45): loading (try 0): started
2021/07/08 17:06:25 scheduler task 144f69b7 (flow 0a334aa8): loading val<.=s3://niema-test/n100/r06/n100.r06.s087_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f8875ac4 (flow bd36172d): loading (try 0): started
2021/07/08 17:06:25 scheduler task 2c9167d6 (flow bfdc7ffb): loading (try 0): started
2021/07/08 17:06:25 scheduler task f7976c84 (flow 9f59688b): loading (try 0): started
2021/07/08 17:06:25 scheduler task 18412571 (flow e7209bac): loading (try 0): started
2021/07/08 17:06:25 scheduler task b067dbe8 (flow 946a9c13): loading val<.=s3://niema-test/n100/r06/n100.r06.s004_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d21f287b (flow ba80dc65): loading (try 0): started
2021/07/08 17:06:25 scheduler task 3c99934a (flow 26782be1): loading (try 0): started
2021/07/08 17:06:25 scheduler task 4947ed18 (flow 75ab46a8): loading val<.=s3://niema-test/n100/r06/n100.r06.s081_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 828d1448 (flow 66f9b0f9): loading (try 0): started
2021/07/08 17:06:25 scheduler task 0a7ec48b (flow eda7cfd2): loading (try 0): started
2021/07/08 17:06:25 scheduler task c68e568f (flow 689ddd7c): loading (try 0): started
2021/07/08 17:06:25 scheduler task 404819b8 (flow a42a45fe): loading (try 0): started
2021/07/08 17:06:25 scheduler task bc733e05 (flow 50764c57): loading (try 0): started
2021/07/08 17:06:25 scheduler task 4cea0c9b (flow 109c7075): loading val<.=s3://niema-test/n100/r06/n100.r06.s018_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 53e9365d (flow b71a7073): loading val<.=s3://niema-test/n100/r06/n100.r06.s066_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0f930977 (flow 56443f2e): loading (try 0): started
2021/07/08 17:06:25 scheduler task 46f78305 (flow 40aec702): loading (try 0): started
2021/07/08 17:06:25 scheduler task 6f2866a3 (flow 34528a24): loading (try 0): started
2021/07/08 17:06:25 scheduler task f8df3480 (flow 502645a1): loading (try 0): started
2021/07/08 17:06:25 scheduler task 5ea6c273 (flow 572331ce): loading (try 0): started
2021/07/08 17:06:25 scheduler task 1116b1ea (flow 0f8df37c): loading (try 0): started
2021/07/08 17:06:25 scheduler task b76e0131 (flow bd79a373): loading (try 0): started
2021/07/08 17:06:25 scheduler task 22258bab (flow ff4d8244): loading (try 0): started
2021/07/08 17:06:25 scheduler task cbed6014 (flow 936d4ab9): loading val<.=s3://niema-test/n100/r06/n100.r06.s088_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 006129c5 (flow 70f0c0c0): loading (try 0): started
2021/07/08 17:06:25 scheduler task 4947ed18 (flow 75ab46a8): loading val<.=s3://niema-test/n100/r06/n100.r06.s081_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 24761a03 (flow 4e887abd): loading (try 0): started
2021/07/08 17:06:25 scheduler task 0d8b3e97 (flow ec2e1134): loading (try 0): started
2021/07/08 17:06:25 scheduler task 3205c8c6 (flow 6a43092a): loading val<.=s3://niema-test/n100/r06/n100.r06.s023_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 625453dd (flow 0088c4ca): loading val<.=s3://niema-test/n100/r06/n100.r06.s034_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 3205c8c6 (flow 6a43092a): loading val<.=s3://niema-test/n100/r06/n100.r06.s023_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task cbed6014 (flow 936d4ab9): loading val<.=s3://niema-test/n100/r06/n100.r06.s088_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5e093f54 (flow 2ab40335): loading val<.=s3://niema-test/n100/r06/n100.r06.s041_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task a7d07754 (flow 10cd036d): loading val<.=s3://niema-test/n100/r06/n100.r06.s007_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task b9606491 (flow f9a07ecc): loading val<.=s3://niema-test/n100/r06/n100.r06.s022_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c2bb6acb (flow e34273b7): loading val<.=s3://niema-test/n100/r06/n100.r06.s070_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 69182bd0 (flow 73004c68): loading (try 0): started
2021/07/08 17:06:25 scheduler task 13aceaad (flow 6791e387): loading val<.=s3://niema-test/n100/r06/n100.r06.s038_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 8f12579b (flow 7b5b3afb): loading val<.=s3://niema-test/n100/r06/n100.r06.s050_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 14aa39a0 (flow 96cae92b): loading val<.=s3://niema-test/n100/r06/n100.r06.s029_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 476b976c (flow 639e3264): loading val<.=s3://niema-test/n100/r06/n100.r06.s030_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 476b976c (flow 639e3264): loading val<.=s3://niema-test/n100/r06/n100.r06.s030_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 14aa39a0 (flow 96cae92b): loading val<.=s3://niema-test/n100/r06/n100.r06.s029_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task b5b1ad47 (flow 57088d8f): loading val<.=s3://niema-test/n100/r06/n100.r06.s043_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task b5b1ad47 (flow 57088d8f): loading val<.=s3://niema-test/n100/r06/n100.r06.s043_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task aef1ea0c (flow d7bcee4f): loading val<.=s3://niema-test/n100/r06/n100.r06.s001_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task aef1ea0c (flow d7bcee4f): loading val<.=s3://niema-test/n100/r06/n100.r06.s001_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 8c8e5588 (flow dd21f074): loading val<.=s3://niema-test/n100/r06/n100.r06.s013_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 30d52cd1 (flow 965617d8): loading val<.=s3://niema-test/n100/r06/n100.r06.s047_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 8c8e5588 (flow dd21f074): loading val<.=s3://niema-test/n100/r06/n100.r06.s013_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 95bbbc50 (flow 080658ce): loading val<.=s3://niema-test/n100/r06/n100.r06.s071_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 30d52cd1 (flow 965617d8): loading val<.=s3://niema-test/n100/r06/n100.r06.s047_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 95bbbc50 (flow 080658ce): loading val<.=s3://niema-test/n100/r06/n100.r06.s071_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fe380a87 (flow 1035b4db): loading val<.=s3://niema-test/n100/r06/n100.r06.s037_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 07200e78 (flow 8e2cdc8e): loading val<.=s3://niema-test/n100/r06/n100.r06.s048_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task fe380a87 (flow 1035b4db): loading val<.=s3://niema-test/n100/r06/n100.r06.s037_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 965baf5b (flow d8da4a43): loading val<.=s3://niema-test/n100/r06/n100.r06.s036_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 07200e78 (flow 8e2cdc8e): loading val<.=s3://niema-test/n100/r06/n100.r06.s048_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 1727ff25 (flow 05553cfd): loading val<.=s3://niema-test/n100/r06/n100.r06.s016_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 965baf5b (flow d8da4a43): loading val<.=s3://niema-test/n100/r06/n100.r06.s036_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e0cd482b (flow 6eb687d9): loading val<.=s3://niema-test/n100/r06/n100.r06.s039_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 1727ff25 (flow 05553cfd): loading val<.=s3://niema-test/n100/r06/n100.r06.s016_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task e0cd482b (flow 6eb687d9): loading val<.=s3://niema-test/n100/r06/n100.r06.s039_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c3f45696 (flow d8bb6c45): loading val<.=s3://niema-test/n100/r06/n100.r06.s090_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c3f45696 (flow d8bb6c45): loading val<.=s3://niema-test/n100/r06/n100.r06.s090_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f8875ac4 (flow bd36172d): loading val<.=s3://niema-test/n100/r06/n100.r06.s061_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 2c9167d6 (flow bfdc7ffb): loading val<.=s3://niema-test/n100/r06/n100.r06.s019_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f8875ac4 (flow bd36172d): loading val<.=s3://niema-test/n100/r06/n100.r06.s061_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 2c9167d6 (flow bfdc7ffb): loading val<.=s3://niema-test/n100/r06/n100.r06.s019_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f7976c84 (flow 9f59688b): loading val<.=s3://niema-test/n100/r06/n100.r06.s002_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f7976c84 (flow 9f59688b): loading val<.=s3://niema-test/n100/r06/n100.r06.s002_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 18412571 (flow e7209bac): loading val<.=s3://niema-test/n100/r06/n100.r06.s051_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 18412571 (flow e7209bac): loading val<.=s3://niema-test/n100/r06/n100.r06.s051_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d21f287b (flow ba80dc65): loading val<.=s3://niema-test/n100/r06/n100.r06.s026_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task d21f287b (flow ba80dc65): loading val<.=s3://niema-test/n100/r06/n100.r06.s026_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 3c99934a (flow 26782be1): loading val<.=s3://niema-test/n100/r06/n100.r06.s049_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 3c99934a (flow 26782be1): loading val<.=s3://niema-test/n100/r06/n100.r06.s049_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 828d1448 (flow 66f9b0f9): loading val<.=s3://niema-test/n100/r06/n100.r06.s064_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0a7ec48b (flow eda7cfd2): loading val<.=s3://niema-test/n100/r06/n100.r06.s011_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 828d1448 (flow 66f9b0f9): loading val<.=s3://niema-test/n100/r06/n100.r06.s064_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c68e568f (flow 689ddd7c): loading val<.=s3://niema-test/n100/r06/n100.r06.s052_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0a7ec48b (flow eda7cfd2): loading val<.=s3://niema-test/n100/r06/n100.r06.s011_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 404819b8 (flow a42a45fe): loading val<.=s3://niema-test/n100/r06/n100.r06.s091_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task c68e568f (flow 689ddd7c): loading val<.=s3://niema-test/n100/r06/n100.r06.s052_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task bc733e05 (flow 50764c57): loading val<.=s3://niema-test/n100/r06/n100.r06.s027_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 404819b8 (flow a42a45fe): loading val<.=s3://niema-test/n100/r06/n100.r06.s091_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task bc733e05 (flow 50764c57): loading val<.=s3://niema-test/n100/r06/n100.r06.s027_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0f930977 (flow 56443f2e): loading val<.=s3://niema-test/n100/r06/n100.r06.s024_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 46f78305 (flow 40aec702): loading val<.=s3://niema-test/n100/r06/n100.r06.s020_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0f930977 (flow 56443f2e): loading val<.=s3://niema-test/n100/r06/n100.r06.s024_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 6f2866a3 (flow 34528a24): loading val<.=s3://niema-test/n100/r06/n100.r06.s053_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 46f78305 (flow 40aec702): loading val<.=s3://niema-test/n100/r06/n100.r06.s020_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f8df3480 (flow 502645a1): loading val<.=s3://niema-test/n100/r06/n100.r06.s010_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 6f2866a3 (flow 34528a24): loading val<.=s3://niema-test/n100/r06/n100.r06.s053_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5ea6c273 (flow 572331ce): loading val<.=s3://niema-test/n100/r06/n100.r06.s006_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task f8df3480 (flow 502645a1): loading val<.=s3://niema-test/n100/r06/n100.r06.s010_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 1116b1ea (flow 0f8df37c): loading val<.=s3://niema-test/n100/r06/n100.r06.s078_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 5ea6c273 (flow 572331ce): loading val<.=s3://niema-test/n100/r06/n100.r06.s006_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task b76e0131 (flow bd79a373): loading val<.=s3://niema-test/n100/r06/n100.r06.s003_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 1116b1ea (flow 0f8df37c): loading val<.=s3://niema-test/n100/r06/n100.r06.s078_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 22258bab (flow ff4d8244): loading val<.=s3://niema-test/n100/r06/n100.r06.s065_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task b76e0131 (flow bd79a373): loading val<.=s3://niema-test/n100/r06/n100.r06.s003_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 22258bab (flow ff4d8244): loading val<.=s3://niema-test/n100/r06/n100.r06.s065_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 006129c5 (flow 70f0c0c0): loading val<.=s3://niema-test/n100/r06/n100.r06.s012_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 006129c5 (flow 70f0c0c0): loading val<.=s3://niema-test/n100/r06/n100.r06.s012_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 24761a03 (flow 4e887abd): loading val<.=s3://niema-test/n100/r06/n100.r06.s040_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0d8b3e97 (flow ec2e1134): loading val<.=s3://niema-test/n100/r06/n100.r06.s057_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 24761a03 (flow 4e887abd): loading val<.=s3://niema-test/n100/r06/n100.r06.s040_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 0d8b3e97 (flow ec2e1134): loading val<.=s3://niema-test/n100/r06/n100.r06.s057_R1.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 69182bd0 (flow 73004c68): loading val<.=s3://niema-test/n100/r06/n100.r06.s028_R2.fastq 35.4MiB>
2021/07/08 17:06:25 scheduler task 69182bd0 (flow 73004c68): loading val<.=s3://niema-test/n100/r06/n100.r06.s028_R1.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task a1b7a353 (flow 94722989): assigning to alloc ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:06:26 scheduler task fc7b57e3 (flow b26d36ef): assigning to alloc ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:06:26 scheduler task ef167c15 (flow 9a691c74): assigning to alloc ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:06:26 scheduler task bea561be (flow 60d3550b): assigning to alloc ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:06:26 scheduler task bea561be (flow 60d3550b): loading (try 0): started
2021/07/08 17:06:26 scheduler task bea561be (flow 60d3550b): loading val<.=s3://niema-test/n100/r06/n100.r06.s098_R2.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task ef167c15 (flow 9a691c74): loading (try 0): started
2021/07/08 17:06:26 scheduler task ef167c15 (flow 9a691c74): loading val<.=s3://niema-test/n100/r06/n100.r06.s076_R2.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task bea561be (flow 60d3550b): loading val<.=s3://niema-test/n100/r06/n100.r06.s098_R1.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task a1b7a353 (flow 94722989): loading (try 0): started
2021/07/08 17:06:26 scheduler task fc7b57e3 (flow b26d36ef): loading (try 0): started
2021/07/08 17:06:26 scheduler task a1b7a353 (flow 94722989): loading val<.=s3://niema-test/n100/r06/n100.r06.s025_R2.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task a1b7a353 (flow 94722989): loading val<.=s3://niema-test/n100/r06/n100.r06.s025_R1.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task fc7b57e3 (flow b26d36ef): loading val<.=s3://niema-test/n100/r06/n100.r06.s092_R1.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task fc7b57e3 (flow b26d36ef): loading val<.=s3://niema-test/n100/r06/n100.r06.s092_R2.fastq 35.4MiB>
2021/07/08 17:06:26 scheduler task ef167c15 (flow 9a691c74): loading val<.=s3://niema-test/n100/r06/n100.r06.s076_R1.fastq 35.4MiB>
2021/07/08 17:06:27 scheduler task 21addea5 (flow 807ea2cc): loaded val<.=68a096e4 35.4MiB>
2021/07/08 17:06:27 scheduler task e15277a8 (flow c9e40fed): loaded val<.=c9bb508d 35.4MiB>
2021/07/08 17:06:27 scheduler task aefe22c5 (flow 3c997280): loaded val<.=bd4e1b1b 35.4MiB>
2021/07/08 17:06:27 scheduler task 839dd58e (flow ad16a62e): loaded val<.=13b27e18 35.4MiB>
2021/07/08 17:06:27 scheduler task 5f63db20 (flow 38aa0f8b): loaded val<.=29b5ca36 35.4MiB>
2021/07/08 17:06:27 scheduler task d78303d7 (flow d6368caa): loaded val<.=6c45d47c 35.4MiB>
2021/07/08 17:06:27 scheduler task f3c12ff0 (flow e7449678): loaded val<.=413c0bb6 35.4MiB>
2021/07/08 17:06:27 scheduler task fe3638fa (flow c46e9ad2): loaded val<.=39fda9b8 35.4MiB>
2021/07/08 17:06:27 scheduler task c2bd846b (flow 25ed0be7): loaded val<.=7a86a17f 35.4MiB>
2021/07/08 17:06:27 scheduler task 0a05c490 (flow 0133fcdc): loaded val<.=c215978a 35.4MiB>
2021/07/08 17:06:27 scheduler task e15277a8 (flow c9e40fed): loaded val<.=65925390 35.4MiB>
2021/07/08 17:06:27 scheduler task d78303d7 (flow d6368caa): loaded val<.=debc1dd0 35.4MiB>
2021/07/08 17:06:27 scheduler task e15277a8 (flow c9e40fed): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task d78303d7 (flow d6368caa): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task e15277a8 (flow c9e40fed): submitting (try 0): started
2021/07/08 17:06:27 scheduler task d78303d7 (flow d6368caa): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 0405c8f8 (flow c10a38f2): loaded val<.=7a9a9c82 35.4MiB>
2021/07/08 17:06:27 scheduler task 21addea5 (flow 807ea2cc): loaded val<.=6df5914c 35.4MiB>
2021/07/08 17:06:27 scheduler task 35e0ee38 (flow 2337b222): loaded val<.=fab3987b 35.4MiB>
2021/07/08 17:06:27 scheduler task 21addea5 (flow 807ea2cc): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 36bad443 (flow f9e00fa2): loaded val<.=6db8bff7 35.4MiB>
2021/07/08 17:06:27 scheduler task 2bb36640 (flow b8449ca4): loaded val<.=ffeef6a0 35.4MiB>
2021/07/08 17:06:27 scheduler task 36bad443 (flow f9e00fa2): loaded val<.=0adc070d 35.4MiB>
2021/07/08 17:06:27 scheduler task 36bad443 (flow f9e00fa2): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task e962eb6a (flow 285f2d1c): loaded val<.=892d3cd7 35.4MiB>
2021/07/08 17:06:27 scheduler task aefe22c5 (flow 3c997280): loaded val<.=fb5b7a02 35.4MiB>
2021/07/08 17:06:27 scheduler task aefe22c5 (flow 3c997280): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 21addea5 (flow 807ea2cc): submitting (try 0): started
2021/07/08 17:06:27 scheduler task bea561be (flow 60d3550b): loaded val<.=558afc37 35.4MiB>
2021/07/08 17:06:27 scheduler task 36bad443 (flow f9e00fa2): submitting (try 0): started
2021/07/08 17:06:27 scheduler task aefe22c5 (flow 3c997280): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 42d67778 (flow b302f74d): loaded val<.=fd7122eb 35.4MiB>
2021/07/08 17:06:27 scheduler task e671b3d5 (flow e2cc75f4): loaded val<.=5c013856 35.4MiB>
2021/07/08 17:06:27 scheduler task f3c12ff0 (flow e7449678): loaded val<.=c6c59f5c 35.4MiB>
2021/07/08 17:06:27 scheduler task f3c12ff0 (flow e7449678): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 415eac3c (flow 87851dc6): loaded val<.=a7cbe0f6 35.4MiB>
2021/07/08 17:06:27 scheduler task 6ee3129d (flow 7515a847): loaded val<.=c910bc13 35.4MiB>
2021/07/08 17:06:27 scheduler task a624161c (flow 8ae2595d): loaded val<.=11baf1eb 35.4MiB>
2021/07/08 17:06:27 scheduler task 42d67778 (flow b302f74d): loaded val<.=e35949ca 35.4MiB>
2021/07/08 17:06:27 scheduler task 4a370f54 (flow 5c4c374f): loaded val<.=48e9b6a2 35.4MiB>
2021/07/08 17:06:27 scheduler task 42d67778 (flow b302f74d): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 0a05c490 (flow 0133fcdc): loaded val<.=7b062515 35.4MiB>
2021/07/08 17:06:27 scheduler task 0a05c490 (flow 0133fcdc): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 7a0d4a9f (flow dd42e107): loaded val<.=48f9a998 35.4MiB>
2021/07/08 17:06:27 scheduler task a624161c (flow 8ae2595d): loaded val<.=cc57cca5 35.4MiB>
2021/07/08 17:06:27 scheduler task c2bd846b (flow 25ed0be7): loaded val<.=09d72408 35.4MiB>
2021/07/08 17:06:27 scheduler task 5f63db20 (flow 38aa0f8b): loaded val<.=c3680476 35.4MiB>
2021/07/08 17:06:27 scheduler task 5f63db20 (flow 38aa0f8b): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task a624161c (flow 8ae2595d): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task c2bd846b (flow 25ed0be7): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task f3c12ff0 (flow e7449678): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 42d67778 (flow b302f74d): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 0405c8f8 (flow c10a38f2): loaded val<.=ee628215 35.4MiB>
2021/07/08 17:06:27 scheduler task 0405c8f8 (flow c10a38f2): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 2bb36640 (flow b8449ca4): loaded val<.=1e2e6d2e 35.4MiB>
2021/07/08 17:06:27 scheduler task 2bb36640 (flow b8449ca4): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 5bab0f48 (flow ed96eb31): loaded val<.=58a19e69 35.4MiB>
2021/07/08 17:06:27 scheduler task f2651734 (flow c09542e4): loaded val<.=91a34978 35.4MiB>
2021/07/08 17:06:27 scheduler task d3fe6c76 (flow b67385b5): loaded val<.=15fe6e2b 35.4MiB>
2021/07/08 17:06:27 scheduler task 5bab0f48 (flow ed96eb31): loaded val<.=f135a24c 35.4MiB>
2021/07/08 17:06:27 scheduler task 5bab0f48 (flow ed96eb31): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 26eb79b8 (flow 58c2da81): loaded val<.=c2348087 35.4MiB>
2021/07/08 17:06:27 scheduler task 0a05c490 (flow 0133fcdc): submitting (try 0): started
2021/07/08 17:06:27 scheduler task d50902bd (flow 4c9d792b): loaded val<.=2b27e97c 35.4MiB>
2021/07/08 17:06:27 scheduler task 5f63db20 (flow 38aa0f8b): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 34721296 (flow 26cf7ba6): loaded val<.=3672e557 35.4MiB>
2021/07/08 17:06:27 scheduler task 9775a3d6 (flow 8e0a6c25): loaded val<.=c460c419 35.4MiB>
2021/07/08 17:06:27 scheduler task e671b3d5 (flow e2cc75f4): loaded val<.=84e48c4d 35.4MiB>
2021/07/08 17:06:27 scheduler task e671b3d5 (flow e2cc75f4): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task a624161c (flow 8ae2595d): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 5234b714 (flow 7814bb1a): loaded val<.=0c76f13d 35.4MiB>
2021/07/08 17:06:27 scheduler task c2bd846b (flow 25ed0be7): submitting (try 0): started
2021/07/08 17:06:27 scheduler task e67335ac (flow bad69a68): loaded val<.=c08b227e 35.4MiB>
2021/07/08 17:06:27 scheduler task fc7b57e3 (flow b26d36ef): loaded val<.=dd5c26d3 35.4MiB>
2021/07/08 17:06:27 scheduler task a1b7a353 (flow 94722989): loaded val<.=97217c68 35.4MiB>
2021/07/08 17:06:27 scheduler task 0405c8f8 (flow c10a38f2): submitting (try 0): started
2021/07/08 17:06:27 scheduler task fdd894a1 (flow b4e03496): loaded val<.=cba6b8de 35.4MiB>
2021/07/08 17:06:27 scheduler task fc7b57e3 (flow b26d36ef): loaded val<.=a6cf715e 35.4MiB>
2021/07/08 17:06:27 scheduler task fc7b57e3 (flow b26d36ef): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task d50902bd (flow 4c9d792b): loaded val<.=c81dad9b 35.4MiB>
2021/07/08 17:06:27 scheduler task d50902bd (flow 4c9d792b): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task a1b7a353 (flow 94722989): loaded val<.=57988bd8 35.4MiB>
2021/07/08 17:06:27 scheduler task a1b7a353 (flow 94722989): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 9775a3d6 (flow 8e0a6c25): loaded val<.=fa781d1e 35.4MiB>
2021/07/08 17:06:27 scheduler task 9775a3d6 (flow 8e0a6c25): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 839dd58e (flow ad16a62e): loaded val<.=87a75767 35.4MiB>
2021/07/08 17:06:27 scheduler task 839dd58e (flow ad16a62e): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 2bb36640 (flow b8449ca4): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 5bab0f48 (flow ed96eb31): submitting (try 0): started
2021/07/08 17:06:27 scheduler task e962eb6a (flow 285f2d1c): loaded val<.=57fd4e69 35.4MiB>
2021/07/08 17:06:27 scheduler task e962eb6a (flow 285f2d1c): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 5a7c1684 (flow 02d78e7e): loaded val<.=04157c4a 35.4MiB>
2021/07/08 17:06:27 scheduler task fdd894a1 (flow b4e03496): loaded val<.=4e7c077f 35.4MiB>
2021/07/08 17:06:27 scheduler task d3fe6c76 (flow b67385b5): loaded val<.=4623c3cb 35.4MiB>
2021/07/08 17:06:27 scheduler task fdd894a1 (flow b4e03496): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task d3fe6c76 (flow b67385b5): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task e671b3d5 (flow e2cc75f4): submitting (try 0): started
2021/07/08 17:06:27 scheduler task ef167c15 (flow 9a691c74): loaded val<.=4f8ff594 35.4MiB>
2021/07/08 17:06:27 scheduler task fc7b57e3 (flow b26d36ef): submitting (try 0): started
2021/07/08 17:06:27 scheduler task ef167c15 (flow 9a691c74): loaded val<.=fb40f77d 35.4MiB>
2021/07/08 17:06:27 scheduler task ef167c15 (flow 9a691c74): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task d50902bd (flow 4c9d792b): submitting (try 0): started
2021/07/08 17:06:27 scheduler task a1b7a353 (flow 94722989): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 9775a3d6 (flow 8e0a6c25): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 839dd58e (flow ad16a62e): submitting (try 0): started
2021/07/08 17:06:27 scheduler task e962eb6a (flow 285f2d1c): submitting (try 0): started
2021/07/08 17:06:27 scheduler task fdd894a1 (flow b4e03496): submitting (try 0): started
2021/07/08 17:06:27 scheduler task d3fe6c76 (flow b67385b5): submitting (try 0): started
2021/07/08 17:06:27 scheduler task ef167c15 (flow 9a691c74): submitting (try 0): started
2021/07/08 17:06:27 scheduler task e67335ac (flow bad69a68): loaded val<.=b70d074e 35.4MiB>
2021/07/08 17:06:27 scheduler task e67335ac (flow bad69a68): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task e67335ac (flow bad69a68): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 4a370f54 (flow 5c4c374f): loaded val<.=28d84b02 35.4MiB>
2021/07/08 17:06:27 scheduler task 4a370f54 (flow 5c4c374f): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 34721296 (flow 26cf7ba6): loaded val<.=06525461 35.4MiB>
2021/07/08 17:06:27 scheduler task 34721296 (flow 26cf7ba6): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 4a370f54 (flow 5c4c374f): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 34721296 (flow 26cf7ba6): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 5234b714 (flow 7814bb1a): loaded val<.=b2f24b95 35.4MiB>
2021/07/08 17:06:27 scheduler task 5234b714 (flow 7814bb1a): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 5234b714 (flow 7814bb1a): submitting (try 0): started
2021/07/08 17:06:27 scheduler task bea561be (flow 60d3550b): loaded val<.=8ab4e300 35.4MiB>
2021/07/08 17:06:27 scheduler task bea561be (flow 60d3550b): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task fe3638fa (flow c46e9ad2): loaded val<.=d6888b5d 35.4MiB>
2021/07/08 17:06:27 scheduler task fe3638fa (flow c46e9ad2): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 7a0d4a9f (flow dd42e107): loaded val<.=4cac8859 35.4MiB>
2021/07/08 17:06:27 scheduler task 7a0d4a9f (flow dd42e107): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task bea561be (flow 60d3550b): submitting (try 0): started
2021/07/08 17:06:27 scheduler task fe3638fa (flow c46e9ad2): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 7a0d4a9f (flow dd42e107): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 5a7c1684 (flow 02d78e7e): loaded val<.=ac281127 35.4MiB>
2021/07/08 17:06:27 scheduler task 5a7c1684 (flow 02d78e7e): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 5a7c1684 (flow 02d78e7e): submitting (try 0): started
2021/07/08 17:06:27 scheduler task 6ee3129d (flow 7515a847): loaded val<.=10d96ede 35.4MiB>
2021/07/08 17:06:27 scheduler task 6ee3129d (flow 7515a847): loading (try 0): successful, next state: submitting
2021/07/08 17:06:27 scheduler task 6ee3129d (flow 7515a847): submitting (try 0): started
2021/07/08 17:06:27 scheduler task aef1ea0c (flow d7bcee4f): loaded val<.=a32f10c6 35.4MiB>
2021/07/08 17:06:27 scheduler task 3c99934a (flow 26782be1): loaded val<.=b326c308 35.4MiB>
2021/07/08 17:06:27 scheduler task e15277a8 (flow c9e40fed): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:27 scheduler task e15277a8 (flow c9e40fed): waiting for completion (try 0): started
2021/07/08 17:06:27  ->  n100.r06.s096.Main.out_file c9e40fed exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:27 n100.r06.s096.Main.out_file c9e40fed n100/r06/n100.r06.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cf2bc32054a277e691996d4ce4c38eda65968435ee0b79b4fe1237dac98a362
	sha256:c9e40fed599cb6a21ca1b3db06d56dca354e7f7672ab1c007a8daec4a1885b90
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e15277a882366d41884123bc566461136d6c23db3bb89f5761b191190474c041
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s096_output"
	    wget -O "n100.r06.s096_output/n100.r06.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s096_output/n100.r06.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s096_output/n100.r06.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s096_output/n100.r06.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s096_output/n100.r06.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s096_output/n100.r06.s096.reference.fas" "n100.r06.s096_output/n100.r06.s096.fq1.fastq" "n100.r06.s096_output/n100.r06.s096.fq2.fastq" | samtools view -bS - > "n100.r06.s096_output/n100.r06.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s096_output/n100.r06.s096.untrimmed.sorted.bam" "n100.r06.s096_output/n100.r06.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s096_output/n100.r06.s096.untrimmed.sorted.bam" -b "n100.r06.s096_output/n100.r06.s096.primers.bed" -p "n100.r06.s096_output/n100.r06.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" "n100.r06.s096_output/n100.r06.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s096_output/n100.r06.s096.reference.fas" "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" > "n100.r06.s096_output/n100.r06.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s096_output/n100.r06.s096.reference.fas" --call-indels "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" > "n100.r06.s096_output/n100.r06.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" > "n100.r06.s096_output/n100.r06.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s096_output/n100.r06.s096.depth.txt" "n100.r06.s096_output/n100.r06.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s096_output/n100.r06.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s096_output/n100.r06.s096.reference.fas" | bcftools consensus -m "n100.r06.s096_output/n100.r06.s096.low_depth.tsv" tmp.vcf.gz > "n100.r06.s096_output/n100.r06.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:27 scheduler task fc7b57e3 (flow b26d36ef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:27 scheduler task fc7b57e3 (flow b26d36ef): waiting for completion (try 0): started
2021/07/08 17:06:27  ->  n100.r06.s092.Main.out_file b26d36ef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:27 n100.r06.s092.Main.out_file b26d36ef n100/r06/n100.r06.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:223302d75863da87ff675230de09fd57fb4f16a365484a8558b04a3221c8a321
	sha256:b26d36efb2a0374bd7a7019eb762bff28c2005b69af8d4e77a56211f1f4e8022
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fc7b57e3eb3301860c8e41d9c89a5f730180c928e5a5110836582e60444d66ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s092_output"
	    wget -O "n100.r06.s092_output/n100.r06.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s092_output/n100.r06.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s092_output/n100.r06.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s092_output/n100.r06.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s092_output/n100.r06.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s092_output/n100.r06.s092.reference.fas" "n100.r06.s092_output/n100.r06.s092.fq1.fastq" "n100.r06.s092_output/n100.r06.s092.fq2.fastq" | samtools view -bS - > "n100.r06.s092_output/n100.r06.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s092_output/n100.r06.s092.untrimmed.sorted.bam" "n100.r06.s092_output/n100.r06.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s092_output/n100.r06.s092.untrimmed.sorted.bam" -b "n100.r06.s092_output/n100.r06.s092.primers.bed" -p "n100.r06.s092_output/n100.r06.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" "n100.r06.s092_output/n100.r06.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s092_output/n100.r06.s092.reference.fas" "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" > "n100.r06.s092_output/n100.r06.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s092_output/n100.r06.s092.reference.fas" --call-indels "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" > "n100.r06.s092_output/n100.r06.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" > "n100.r06.s092_output/n100.r06.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s092_output/n100.r06.s092.depth.txt" "n100.r06.s092_output/n100.r06.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s092_output/n100.r06.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s092_output/n100.r06.s092.reference.fas" | bcftools consensus -m "n100.r06.s092_output/n100.r06.s092.low_depth.tsv" tmp.vcf.gz > "n100.r06.s092_output/n100.r06.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:27 scheduler task d78303d7 (flow d6368caa): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:27 scheduler task a1b7a353 (flow 94722989): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:27 scheduler task d78303d7 (flow d6368caa): waiting for completion (try 0): started
2021/07/08 17:06:27  ->  n100.r06.s008.Main.out_file d6368caa exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:27 n100.r06.s008.Main.out_file d6368caa n100/r06/n100.r06.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0f9d5c9f269bdd394acb740ad8915f618a4c9067f1e7361d6f344a13728c3c10
	sha256:d6368caa28617b6eb1cdac7c375d440d15ecf8ad90b8255306f3c32a8d65797f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d78303d7d7e5ece1f0c32e2daab5d830681cae8112f9cb882cf52615fd30aadc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s008_output"
	    wget -O "n100.r06.s008_output/n100.r06.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s008_output/n100.r06.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s008_output/n100.r06.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s008_output/n100.r06.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s008_output/n100.r06.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s008_output/n100.r06.s008.reference.fas" "n100.r06.s008_output/n100.r06.s008.fq1.fastq" "n100.r06.s008_output/n100.r06.s008.fq2.fastq" | samtools view -bS - > "n100.r06.s008_output/n100.r06.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s008_output/n100.r06.s008.untrimmed.sorted.bam" "n100.r06.s008_output/n100.r06.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s008_output/n100.r06.s008.untrimmed.sorted.bam" -b "n100.r06.s008_output/n100.r06.s008.primers.bed" -p "n100.r06.s008_output/n100.r06.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" "n100.r06.s008_output/n100.r06.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s008_output/n100.r06.s008.reference.fas" "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" > "n100.r06.s008_output/n100.r06.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s008_output/n100.r06.s008.reference.fas" --call-indels "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" > "n100.r06.s008_output/n100.r06.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" > "n100.r06.s008_output/n100.r06.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s008_output/n100.r06.s008.depth.txt" "n100.r06.s008_output/n100.r06.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s008_output/n100.r06.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s008_output/n100.r06.s008.reference.fas" | bcftools consensus -m "n100.r06.s008_output/n100.r06.s008.low_depth.tsv" tmp.vcf.gz > "n100.r06.s008_output/n100.r06.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:27 scheduler task 22258bab (flow ff4d8244): loaded val<.=998e16db 35.4MiB>
2021/07/08 17:06:27 scheduler task a1b7a353 (flow 94722989): waiting for completion (try 0): started
2021/07/08 17:06:27  ->  n100.r06.s025.Main.out_file 94722989 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:27 n100.r06.s025.Main.out_file 94722989 n100/r06/n100.r06.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b03e504dc6ad98bbf510dcbc87b536d25a6defec29002f67183dfdc8d696b721
	sha256:947229899424765893ab2a8da1a83936e23431d24d1274db3b0877d8554d2b53
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1b7a35330963db1e9918e422caf25437eee6103d2b24dd9c9b76588bd97972b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s025_output"
	    wget -O "n100.r06.s025_output/n100.r06.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s025_output/n100.r06.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s025_output/n100.r06.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s025_output/n100.r06.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s025_output/n100.r06.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s025_output/n100.r06.s025.reference.fas" "n100.r06.s025_output/n100.r06.s025.fq1.fastq" "n100.r06.s025_output/n100.r06.s025.fq2.fastq" | samtools view -bS - > "n100.r06.s025_output/n100.r06.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s025_output/n100.r06.s025.untrimmed.sorted.bam" "n100.r06.s025_output/n100.r06.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s025_output/n100.r06.s025.untrimmed.sorted.bam" -b "n100.r06.s025_output/n100.r06.s025.primers.bed" -p "n100.r06.s025_output/n100.r06.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" "n100.r06.s025_output/n100.r06.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s025_output/n100.r06.s025.reference.fas" "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" > "n100.r06.s025_output/n100.r06.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s025_output/n100.r06.s025.reference.fas" --call-indels "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" > "n100.r06.s025_output/n100.r06.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" > "n100.r06.s025_output/n100.r06.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s025_output/n100.r06.s025.depth.txt" "n100.r06.s025_output/n100.r06.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s025_output/n100.r06.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s025_output/n100.r06.s025.reference.fas" | bcftools consensus -m "n100.r06.s025_output/n100.r06.s025.low_depth.tsv" tmp.vcf.gz > "n100.r06.s025_output/n100.r06.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:27 scheduler task a7d07754 (flow 10cd036d): loaded val<.=f25a78c9 35.4MiB>
2021/07/08 17:06:27 scheduler task 13aceaad (flow 6791e387): loaded val<.=0dea0d2a 35.4MiB>
2021/07/08 17:06:27 scheduler task 70e83fb0 (flow f04fe471): loaded val<.=279aeb89 35.4MiB>
2021/07/08 17:06:27 scheduler task f672ef92 (flow 14086e68): loaded val<.=2f3cf97c 35.4MiB>
2021/07/08 17:06:27 scheduler task 476b976c (flow 639e3264): loaded val<.=01188f0a 35.4MiB>
2021/07/08 17:06:27 scheduler task 006129c5 (flow 70f0c0c0): loaded val<.=d25eeb70 35.4MiB>
2021/07/08 17:06:27 scheduler task 144f69b7 (flow 0a334aa8): loaded val<.=305d23d5 35.4MiB>
2021/07/08 17:06:27 scheduler task 965baf5b (flow d8da4a43): loaded val<.=ad350577 35.4MiB>
2021/07/08 17:06:27 scheduler task 5e093f54 (flow 2ab40335): loaded val<.=3680ac62 35.4MiB>
2021/07/08 17:06:28 scheduler task 21addea5 (flow 807ea2cc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task b067dbe8 (flow 946a9c13): loaded val<.=f4c52b19 35.4MiB>
2021/07/08 17:06:28 scheduler task 476b976c (flow 639e3264): loaded val<.=44b327d1 35.4MiB>
2021/07/08 17:06:28 scheduler task 476b976c (flow 639e3264): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 21addea5 (flow 807ea2cc): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s083.Main.out_file 807ea2cc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s083.Main.out_file 807ea2cc n100/r06/n100.r06.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d4c594150aacdc76a0b417655e7fd20199a250c21bff826f0e58b29471e59899
	sha256:807ea2cc9bd3c2d979a0ffdeca52d2530559d04e83c96b9adc8d4896d41e7077
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21addea505a1cdb0ff17b3f4105df491bc3644c4f47f5675078515a39d2263d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s083_output"
	    wget -O "n100.r06.s083_output/n100.r06.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s083_output/n100.r06.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s083_output/n100.r06.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s083_output/n100.r06.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s083_output/n100.r06.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s083_output/n100.r06.s083.reference.fas" "n100.r06.s083_output/n100.r06.s083.fq1.fastq" "n100.r06.s083_output/n100.r06.s083.fq2.fastq" | samtools view -bS - > "n100.r06.s083_output/n100.r06.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s083_output/n100.r06.s083.untrimmed.sorted.bam" "n100.r06.s083_output/n100.r06.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s083_output/n100.r06.s083.untrimmed.sorted.bam" -b "n100.r06.s083_output/n100.r06.s083.primers.bed" -p "n100.r06.s083_output/n100.r06.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" "n100.r06.s083_output/n100.r06.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s083_output/n100.r06.s083.reference.fas" "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" > "n100.r06.s083_output/n100.r06.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s083_output/n100.r06.s083.reference.fas" --call-indels "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" > "n100.r06.s083_output/n100.r06.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" > "n100.r06.s083_output/n100.r06.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s083_output/n100.r06.s083.depth.txt" "n100.r06.s083_output/n100.r06.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s083_output/n100.r06.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s083_output/n100.r06.s083.reference.fas" | bcftools consensus -m "n100.r06.s083_output/n100.r06.s083.low_depth.tsv" tmp.vcf.gz > "n100.r06.s083_output/n100.r06.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task 0f930977 (flow 56443f2e): loaded val<.=59ab9219 35.4MiB>
2021/07/08 17:06:28 scheduler task 8f12579b (flow 7b5b3afb): loaded val<.=2f9d28a9 35.4MiB>
2021/07/08 17:06:28 scheduler task 476b976c (flow 639e3264): submitting (try 0): started
2021/07/08 17:06:28 scheduler task b76e0131 (flow bd79a373): loaded val<.=1766711f 35.4MiB>
2021/07/08 17:06:28 scheduler task ef167c15 (flow 9a691c74): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task d21f5df2 (flow 398ccd9b): loaded val<.=87640960 35.4MiB>
2021/07/08 17:06:28 scheduler task fbc799bb (flow 54a753f3): loaded val<.=c95b2f62 35.4MiB>
2021/07/08 17:06:28 scheduler task ef167c15 (flow 9a691c74): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s076.Main.out_file 9a691c74 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s076.Main.out_file 9a691c74 n100/r06/n100.r06.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c6d2facf0c823e689d946494b7927f8a66bb8b0f6fc93bcc166b441280af6db9
	sha256:9a691c7493861ff05cbd8d0d45923f0fd8abbf1ba91ce3f2ee2d18e36b06dd42
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ef167c156ebeca77b2cf2d86069ec2a39626cad79b3b4f2ccc2e7982af9babed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s076_output"
	    wget -O "n100.r06.s076_output/n100.r06.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s076_output/n100.r06.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s076_output/n100.r06.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s076_output/n100.r06.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s076_output/n100.r06.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s076_output/n100.r06.s076.reference.fas" "n100.r06.s076_output/n100.r06.s076.fq1.fastq" "n100.r06.s076_output/n100.r06.s076.fq2.fastq" | samtools view -bS - > "n100.r06.s076_output/n100.r06.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s076_output/n100.r06.s076.untrimmed.sorted.bam" "n100.r06.s076_output/n100.r06.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s076_output/n100.r06.s076.untrimmed.sorted.bam" -b "n100.r06.s076_output/n100.r06.s076.primers.bed" -p "n100.r06.s076_output/n100.r06.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" "n100.r06.s076_output/n100.r06.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s076_output/n100.r06.s076.reference.fas" "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" > "n100.r06.s076_output/n100.r06.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s076_output/n100.r06.s076.reference.fas" --call-indels "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" > "n100.r06.s076_output/n100.r06.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" > "n100.r06.s076_output/n100.r06.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s076_output/n100.r06.s076.depth.txt" "n100.r06.s076_output/n100.r06.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s076_output/n100.r06.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s076_output/n100.r06.s076.reference.fas" | bcftools consensus -m "n100.r06.s076_output/n100.r06.s076.low_depth.tsv" tmp.vcf.gz > "n100.r06.s076_output/n100.r06.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task a7d07754 (flow 10cd036d): loaded val<.=d260ce29 35.4MiB>
2021/07/08 17:06:28 scheduler task a7d07754 (flow 10cd036d): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 965baf5b (flow d8da4a43): loaded val<.=a2a2e3c8 35.4MiB>
2021/07/08 17:06:28 scheduler task 965baf5b (flow d8da4a43): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 18412571 (flow e7209bac): loaded val<.=81276bd6 35.4MiB>
2021/07/08 17:06:28 scheduler task b067dbe8 (flow 946a9c13): loaded val<.=2307b4d6 35.4MiB>
2021/07/08 17:06:28 scheduler task b067dbe8 (flow 946a9c13): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 1727ff25 (flow 05553cfd): loaded val<.=11e544b0 35.4MiB>
2021/07/08 17:06:28 scheduler task 9c55a004 (flow 64a26024): loaded val<.=325f797f 35.4MiB>
2021/07/08 17:06:28 scheduler task b76e0131 (flow bd79a373): loaded val<.=da195187 35.4MiB>
2021/07/08 17:06:28 scheduler task b76e0131 (flow bd79a373): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 6f2866a3 (flow 34528a24): loaded val<.=f3d607f0 35.4MiB>
2021/07/08 17:06:28 scheduler task a7d07754 (flow 10cd036d): submitting (try 0): started
2021/07/08 17:06:28 scheduler task ee390516 (flow dece9cd5): loaded val<.=59ac069a 35.4MiB>
2021/07/08 17:06:28 scheduler task fe380a87 (flow 1035b4db): loaded val<.=b707f925 35.4MiB>
2021/07/08 17:06:28 scheduler task 144f69b7 (flow 0a334aa8): loaded val<.=23874eb3 35.4MiB>
2021/07/08 17:06:28 scheduler task 144f69b7 (flow 0a334aa8): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 965baf5b (flow d8da4a43): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f8875ac4 (flow bd36172d): loaded val<.=18f97ca0 35.4MiB>
2021/07/08 17:06:28 scheduler task 35e0ee38 (flow 2337b222): loaded val<.=8a3d37e9 35.4MiB>
2021/07/08 17:06:28 scheduler task 35e0ee38 (flow 2337b222): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task b067dbe8 (flow 946a9c13): submitting (try 0): started
2021/07/08 17:06:28 scheduler task cbed6014 (flow 936d4ab9): loaded val<.=be5b0846 35.4MiB>
2021/07/08 17:06:28 scheduler task b76e0131 (flow bd79a373): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 4cea0c9b (flow 109c7075): loaded val<.=d33f8448 35.4MiB>
2021/07/08 17:06:28 scheduler task 53e9365d (flow b71a7073): loaded val<.=7bb3ed64 35.4MiB>
2021/07/08 17:06:28 scheduler task 144f69b7 (flow 0a334aa8): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 83e10361 (flow cf58eefc): loaded val<.=53631f99 35.4MiB>
2021/07/08 17:06:28 scheduler task 35e0ee38 (flow 2337b222): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 625453dd (flow 0088c4ca): loaded val<.=18819991 35.4MiB>
2021/07/08 17:06:28 scheduler task 415eac3c (flow 87851dc6): loaded val<.=ebf0d220 35.4MiB>
2021/07/08 17:06:28 scheduler task 415eac3c (flow 87851dc6): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 90258421 (flow 4b4267c3): loaded val<.=605490cc 35.4MiB>
2021/07/08 17:06:28 scheduler task d862912d (flow 99d4b438): loaded val<.=2c106f33 35.4MiB>
2021/07/08 17:06:28 scheduler task e737ca8f (flow 4bc88741): loaded val<.=ff49255a 35.4MiB>
2021/07/08 17:06:28 scheduler task c3f45696 (flow d8bb6c45): loaded val<.=0c6deac6 35.4MiB>
2021/07/08 17:06:28 scheduler task 415eac3c (flow 87851dc6): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f8df3480 (flow 502645a1): loaded val<.=4eaf88d8 35.4MiB>
2021/07/08 17:06:28 scheduler task 22258bab (flow ff4d8244): loaded val<.=4b2a7848 35.4MiB>
2021/07/08 17:06:28 scheduler task c68e568f (flow 689ddd7c): loaded val<.=d80821dc 35.4MiB>
2021/07/08 17:06:28 scheduler task 22258bab (flow ff4d8244): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 07200e78 (flow 8e2cdc8e): loaded val<.=ad64e8a3 35.4MiB>
2021/07/08 17:06:28 scheduler task 6f2866a3 (flow 34528a24): loaded val<.=53394b1e 35.4MiB>
2021/07/08 17:06:28 scheduler task 3c99934a (flow 26782be1): loaded val<.=cd99cb50 35.4MiB>
2021/07/08 17:06:28 scheduler task 3c99934a (flow 26782be1): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 95bbbc50 (flow 080658ce): loaded val<.=4ae6acb6 35.4MiB>
2021/07/08 17:06:28 scheduler task 6f2866a3 (flow 34528a24): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 22258bab (flow ff4d8244): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 13aceaad (flow 6791e387): loaded val<.=257c62eb 35.4MiB>
2021/07/08 17:06:28 scheduler task d21f287b (flow ba80dc65): loaded val<.=4aca29b8 35.4MiB>
2021/07/08 17:06:28 scheduler task 26eb79b8 (flow 58c2da81): loaded val<.=60d80ff0 35.4MiB>
2021/07/08 17:06:28 scheduler task 26eb79b8 (flow 58c2da81): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 13aceaad (flow 6791e387): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 3c99934a (flow 26782be1): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 24761a03 (flow 4e887abd): loaded val<.=16f00fec 35.4MiB>
2021/07/08 17:06:28 scheduler task b5b1ad47 (flow 57088d8f): loaded val<.=f28d994f 35.4MiB>
2021/07/08 17:06:28 scheduler task 6f2866a3 (flow 34528a24): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 26eb79b8 (flow 58c2da81): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 13aceaad (flow 6791e387): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 626618af (flow 3d47e552): loaded val<.=85609160 35.4MiB>
2021/07/08 17:06:28 scheduler task 36bad443 (flow f9e00fa2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task 36bad443 (flow f9e00fa2): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s062.Main.out_file f9e00fa2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s062.Main.out_file f9e00fa2 n100/r06/n100.r06.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a102214a714b4ff2cdb3dfaf70b5508c8d97d95370ce5572df9a4e005154d2b
	sha256:f9e00fa28346d4a5c12e128aca53983be3ee0acfcbf50e93d01b00cd64313c79
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36bad4434e5b2c420ba9d3aa04a167f437dfa2aa46303dac3009866d55535923
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s062_output"
	    wget -O "n100.r06.s062_output/n100.r06.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s062_output/n100.r06.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s062_output/n100.r06.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s062_output/n100.r06.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s062_output/n100.r06.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s062_output/n100.r06.s062.reference.fas" "n100.r06.s062_output/n100.r06.s062.fq1.fastq" "n100.r06.s062_output/n100.r06.s062.fq2.fastq" | samtools view -bS - > "n100.r06.s062_output/n100.r06.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s062_output/n100.r06.s062.untrimmed.sorted.bam" "n100.r06.s062_output/n100.r06.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s062_output/n100.r06.s062.untrimmed.sorted.bam" -b "n100.r06.s062_output/n100.r06.s062.primers.bed" -p "n100.r06.s062_output/n100.r06.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" "n100.r06.s062_output/n100.r06.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s062_output/n100.r06.s062.reference.fas" "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" > "n100.r06.s062_output/n100.r06.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s062_output/n100.r06.s062.reference.fas" --call-indels "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" > "n100.r06.s062_output/n100.r06.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" > "n100.r06.s062_output/n100.r06.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s062_output/n100.r06.s062.depth.txt" "n100.r06.s062_output/n100.r06.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s062_output/n100.r06.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s062_output/n100.r06.s062.reference.fas" | bcftools consensus -m "n100.r06.s062_output/n100.r06.s062.low_depth.tsv" tmp.vcf.gz > "n100.r06.s062_output/n100.r06.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task bea561be (flow 60d3550b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task 0d8b3e97 (flow ec2e1134): loaded val<.=a52241a6 35.4MiB>
2021/07/08 17:06:28 scheduler task bea561be (flow 60d3550b): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s098.Main.out_file 60d3550b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s098.Main.out_file 60d3550b n100/r06/n100.r06.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55a1bc2f82092b6c9fb6461b0c73af1fb2841afad6a945b657558cf9d5abb9ac
	sha256:60d3550b8884531957295eff3c2dd0ce34378ba6792df76a82b687447c89caf5
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bea561beda0ed22d3907d05f237e4535ca94a0cbcfd996d017d00638671203c5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s098_output"
	    wget -O "n100.r06.s098_output/n100.r06.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s098_output/n100.r06.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s098_output/n100.r06.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s098_output/n100.r06.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s098_output/n100.r06.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s098_output/n100.r06.s098.reference.fas" "n100.r06.s098_output/n100.r06.s098.fq1.fastq" "n100.r06.s098_output/n100.r06.s098.fq2.fastq" | samtools view -bS - > "n100.r06.s098_output/n100.r06.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s098_output/n100.r06.s098.untrimmed.sorted.bam" "n100.r06.s098_output/n100.r06.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s098_output/n100.r06.s098.untrimmed.sorted.bam" -b "n100.r06.s098_output/n100.r06.s098.primers.bed" -p "n100.r06.s098_output/n100.r06.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" "n100.r06.s098_output/n100.r06.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s098_output/n100.r06.s098.reference.fas" "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" > "n100.r06.s098_output/n100.r06.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s098_output/n100.r06.s098.reference.fas" --call-indels "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" > "n100.r06.s098_output/n100.r06.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" > "n100.r06.s098_output/n100.r06.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s098_output/n100.r06.s098.depth.txt" "n100.r06.s098_output/n100.r06.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s098_output/n100.r06.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s098_output/n100.r06.s098.reference.fas" | bcftools consensus -m "n100.r06.s098_output/n100.r06.s098.low_depth.tsv" tmp.vcf.gz > "n100.r06.s098_output/n100.r06.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task c3f45696 (flow d8bb6c45): loaded val<.=19fc314f 35.4MiB>
2021/07/08 17:06:28 scheduler task c3f45696 (flow d8bb6c45): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task c3f45696 (flow d8bb6c45): submitting (try 0): started
2021/07/08 17:06:28 scheduler task aefe22c5 (flow 3c997280): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task 625453dd (flow 0088c4ca): loaded val<.=91ccc030 35.4MiB>
2021/07/08 17:06:28 scheduler task 625453dd (flow 0088c4ca): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task aefe22c5 (flow 3c997280): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s060.Main.out_file 3c997280 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s060.Main.out_file 3c997280 n100/r06/n100.r06.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61ebf28997ebcda2439ca31a27097555bf4a560324c497193d10f57c006ed5bc
	sha256:3c9972802343e3fac0e797c94c1e21f360752985d556afa180ced892f75e7274
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aefe22c5839fe5297617027c2ae9b3fce60daa34a2d889ba6275311b9a1718e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s060_output"
	    wget -O "n100.r06.s060_output/n100.r06.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s060_output/n100.r06.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s060_output/n100.r06.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s060_output/n100.r06.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s060_output/n100.r06.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s060_output/n100.r06.s060.reference.fas" "n100.r06.s060_output/n100.r06.s060.fq1.fastq" "n100.r06.s060_output/n100.r06.s060.fq2.fastq" | samtools view -bS - > "n100.r06.s060_output/n100.r06.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s060_output/n100.r06.s060.untrimmed.sorted.bam" "n100.r06.s060_output/n100.r06.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s060_output/n100.r06.s060.untrimmed.sorted.bam" -b "n100.r06.s060_output/n100.r06.s060.primers.bed" -p "n100.r06.s060_output/n100.r06.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" "n100.r06.s060_output/n100.r06.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s060_output/n100.r06.s060.reference.fas" "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" > "n100.r06.s060_output/n100.r06.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s060_output/n100.r06.s060.reference.fas" --call-indels "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" > "n100.r06.s060_output/n100.r06.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" > "n100.r06.s060_output/n100.r06.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s060_output/n100.r06.s060.depth.txt" "n100.r06.s060_output/n100.r06.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s060_output/n100.r06.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s060_output/n100.r06.s060.reference.fas" | bcftools consensus -m "n100.r06.s060_output/n100.r06.s060.low_depth.tsv" tmp.vcf.gz > "n100.r06.s060_output/n100.r06.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task 625453dd (flow 0088c4ca): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 14aa39a0 (flow 96cae92b): loaded val<.=44351b3b 35.4MiB>
2021/07/08 17:06:28 scheduler task 1116b1ea (flow 0f8df37c): loaded val<.=7389a7e5 35.4MiB>
2021/07/08 17:06:28 scheduler task f3c12ff0 (flow e7449678): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task f3c12ff0 (flow e7449678): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s072.Main.out_file e7449678 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s072.Main.out_file e7449678 n100/r06/n100.r06.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d7ac44cbbc0c87e5a4e007992503ca1e5cae2ec1bc8bb704579ff0fc514bcbd6
	sha256:e7449678190b676e502a61c50d9ef6fa8fcc33212fb1f97a94d687e7fee52518
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f3c12ff0d5189fa5e553567125a8d1fcf978dee6859003372fe8742c9b2ec24a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s072_output"
	    wget -O "n100.r06.s072_output/n100.r06.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s072_output/n100.r06.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s072_output/n100.r06.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s072_output/n100.r06.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s072_output/n100.r06.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s072_output/n100.r06.s072.reference.fas" "n100.r06.s072_output/n100.r06.s072.fq1.fastq" "n100.r06.s072_output/n100.r06.s072.fq2.fastq" | samtools view -bS - > "n100.r06.s072_output/n100.r06.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s072_output/n100.r06.s072.untrimmed.sorted.bam" "n100.r06.s072_output/n100.r06.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s072_output/n100.r06.s072.untrimmed.sorted.bam" -b "n100.r06.s072_output/n100.r06.s072.primers.bed" -p "n100.r06.s072_output/n100.r06.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" "n100.r06.s072_output/n100.r06.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s072_output/n100.r06.s072.reference.fas" "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" > "n100.r06.s072_output/n100.r06.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s072_output/n100.r06.s072.reference.fas" --call-indels "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" > "n100.r06.s072_output/n100.r06.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" > "n100.r06.s072_output/n100.r06.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s072_output/n100.r06.s072.depth.txt" "n100.r06.s072_output/n100.r06.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s072_output/n100.r06.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s072_output/n100.r06.s072.reference.fas" | bcftools consensus -m "n100.r06.s072_output/n100.r06.s072.low_depth.tsv" tmp.vcf.gz > "n100.r06.s072_output/n100.r06.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task b9606491 (flow f9a07ecc): loaded val<.=17c4ef1e 35.4MiB>
2021/07/08 17:06:28 scheduler task 53e9365d (flow b71a7073): loaded val<.=fcc37f18 35.4MiB>
2021/07/08 17:06:28 scheduler task 53e9365d (flow b71a7073): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 53e9365d (flow b71a7073): submitting (try 0): started
2021/07/08 17:06:28 scheduler task fe380a87 (flow 1035b4db): loaded val<.=8c3edcd9 35.4MiB>
2021/07/08 17:06:28 scheduler task fe380a87 (flow 1035b4db): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task fe380a87 (flow 1035b4db): submitting (try 0): started
2021/07/08 17:06:28 scheduler task d21f287b (flow ba80dc65): loaded val<.=40f6295b 35.4MiB>
2021/07/08 17:06:28 scheduler task d21f287b (flow ba80dc65): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task d21f287b (flow ba80dc65): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 0a7ec48b (flow eda7cfd2): loaded val<.=6da5ccb4 35.4MiB>
2021/07/08 17:06:28 scheduler task 42d67778 (flow b302f74d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task 9c55a004 (flow 64a26024): loaded val<.=f6c9a420 35.4MiB>
2021/07/08 17:06:28 scheduler task 9c55a004 (flow 64a26024): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 42d67778 (flow b302f74d): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s045.Main.out_file b302f74d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s045.Main.out_file b302f74d n100/r06/n100.r06.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0002a68dc99c9366c06ec5f445296e55ff83abadf5ad299882a133c094d8cb41
	sha256:b302f74dbe8d0e55c8e333c005b5946725cb08cf222c8cc9cb308c33bb35d336
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/42d677789c0d8261bd4565eab0cc822ddb00873f8b869d8e0ae5f43d29a58fe3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s045_output"
	    wget -O "n100.r06.s045_output/n100.r06.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s045_output/n100.r06.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s045_output/n100.r06.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s045_output/n100.r06.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s045_output/n100.r06.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s045_output/n100.r06.s045.reference.fas" "n100.r06.s045_output/n100.r06.s045.fq1.fastq" "n100.r06.s045_output/n100.r06.s045.fq2.fastq" | samtools view -bS - > "n100.r06.s045_output/n100.r06.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s045_output/n100.r06.s045.untrimmed.sorted.bam" "n100.r06.s045_output/n100.r06.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s045_output/n100.r06.s045.untrimmed.sorted.bam" -b "n100.r06.s045_output/n100.r06.s045.primers.bed" -p "n100.r06.s045_output/n100.r06.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" "n100.r06.s045_output/n100.r06.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s045_output/n100.r06.s045.reference.fas" "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" > "n100.r06.s045_output/n100.r06.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s045_output/n100.r06.s045.reference.fas" --call-indels "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" > "n100.r06.s045_output/n100.r06.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" > "n100.r06.s045_output/n100.r06.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s045_output/n100.r06.s045.depth.txt" "n100.r06.s045_output/n100.r06.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s045_output/n100.r06.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s045_output/n100.r06.s045.reference.fas" | bcftools consensus -m "n100.r06.s045_output/n100.r06.s045.low_depth.tsv" tmp.vcf.gz > "n100.r06.s045_output/n100.r06.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task 828d1448 (flow 66f9b0f9): loaded val<.=ea6cf558 35.4MiB>
2021/07/08 17:06:28 scheduler task 07200e78 (flow 8e2cdc8e): loaded val<.=61e5c857 35.4MiB>
2021/07/08 17:06:28 scheduler task 07200e78 (flow 8e2cdc8e): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 9c55a004 (flow 64a26024): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 07200e78 (flow 8e2cdc8e): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 8c8e5588 (flow dd21f074): loaded val<.=354a772b 35.4MiB>
2021/07/08 17:06:28 scheduler task fbc799bb (flow 54a753f3): loaded val<.=d6ba20e8 35.4MiB>
2021/07/08 17:06:28 scheduler task fbc799bb (flow 54a753f3): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task f2651734 (flow c09542e4): loaded val<.=d7c95eaa 35.4MiB>
2021/07/08 17:06:28 scheduler task f2651734 (flow c09542e4): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 95bbbc50 (flow 080658ce): loaded val<.=5c9ed4ca 35.4MiB>
2021/07/08 17:06:28 scheduler task 95bbbc50 (flow 080658ce): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 0d8b3e97 (flow ec2e1134): loaded val<.=0ae454d7 35.4MiB>
2021/07/08 17:06:28 scheduler task 0d8b3e97 (flow ec2e1134): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task fbc799bb (flow 54a753f3): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 4947ed18 (flow 75ab46a8): loaded val<.=3a28b781 35.4MiB>
2021/07/08 17:06:28 scheduler task f2651734 (flow c09542e4): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 14aa39a0 (flow 96cae92b): loaded val<.=20062b5b 35.4MiB>
2021/07/08 17:06:28 scheduler task 14aa39a0 (flow 96cae92b): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 371261a3 (flow e80820b2): loaded val<.=e24446c4 35.4MiB>
2021/07/08 17:06:28 scheduler task 95bbbc50 (flow 080658ce): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 3205c8c6 (flow 6a43092a): loaded val<.=a0f0baeb 35.4MiB>
2021/07/08 17:06:28 scheduler task 0d8b3e97 (flow ec2e1134): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f8875ac4 (flow bd36172d): loaded val<.=60d66f5c 35.4MiB>
2021/07/08 17:06:28 scheduler task f8875ac4 (flow bd36172d): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 14aa39a0 (flow 96cae92b): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f8875ac4 (flow bd36172d): submitting (try 0): started
2021/07/08 17:06:28 scheduler task b9606491 (flow f9a07ecc): loaded val<.=6f8be0c2 35.4MiB>
2021/07/08 17:06:28 scheduler task b9606491 (flow f9a07ecc): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task b9606491 (flow f9a07ecc): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 8f12579b (flow 7b5b3afb): loaded val<.=780157d3 35.4MiB>
2021/07/08 17:06:28 scheduler task 8f12579b (flow 7b5b3afb): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 8f12579b (flow 7b5b3afb): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 4947ed18 (flow 75ab46a8): loaded val<.=82727ae6 35.4MiB>
2021/07/08 17:06:28 scheduler task 4947ed18 (flow 75ab46a8): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 4947ed18 (flow 75ab46a8): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f7976c84 (flow 9f59688b): loaded val<.=b74227c1 35.4MiB>
2021/07/08 17:06:28 scheduler task 46f78305 (flow 40aec702): loaded val<.=c696dd5f 35.4MiB>
2021/07/08 17:06:28 scheduler task aef1ea0c (flow d7bcee4f): loaded val<.=d065a3b3 35.4MiB>
2021/07/08 17:06:28 scheduler task aef1ea0c (flow d7bcee4f): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task aef1ea0c (flow d7bcee4f): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 0a05c490 (flow 0133fcdc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task 5e093f54 (flow 2ab40335): loaded val<.=19c7a8cc 35.4MiB>
2021/07/08 17:06:28 scheduler task 5e093f54 (flow 2ab40335): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 0a05c490 (flow 0133fcdc): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s054.Main.out_file 0133fcdc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s054.Main.out_file 0133fcdc n100/r06/n100.r06.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61a1b68b9ef245d55fb415ce789a50835ec46d543b2d575b6f19d1914928baca
	sha256:0133fcdc21e0a675f202bd4240103f5f67596f73c0079c86822f316fd8823d93
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a05c490443f70b4ff21e2c8c00c06a553c933ebefca6df77ea17a27f82a2832
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s054_output"
	    wget -O "n100.r06.s054_output/n100.r06.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s054_output/n100.r06.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s054_output/n100.r06.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s054_output/n100.r06.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s054_output/n100.r06.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s054_output/n100.r06.s054.reference.fas" "n100.r06.s054_output/n100.r06.s054.fq1.fastq" "n100.r06.s054_output/n100.r06.s054.fq2.fastq" | samtools view -bS - > "n100.r06.s054_output/n100.r06.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s054_output/n100.r06.s054.untrimmed.sorted.bam" "n100.r06.s054_output/n100.r06.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s054_output/n100.r06.s054.untrimmed.sorted.bam" -b "n100.r06.s054_output/n100.r06.s054.primers.bed" -p "n100.r06.s054_output/n100.r06.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" "n100.r06.s054_output/n100.r06.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s054_output/n100.r06.s054.reference.fas" "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" > "n100.r06.s054_output/n100.r06.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s054_output/n100.r06.s054.reference.fas" --call-indels "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" > "n100.r06.s054_output/n100.r06.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" > "n100.r06.s054_output/n100.r06.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s054_output/n100.r06.s054.depth.txt" "n100.r06.s054_output/n100.r06.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s054_output/n100.r06.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s054_output/n100.r06.s054.reference.fas" | bcftools consensus -m "n100.r06.s054_output/n100.r06.s054.low_depth.tsv" tmp.vcf.gz > "n100.r06.s054_output/n100.r06.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task 5e093f54 (flow 2ab40335): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 90258421 (flow 4b4267c3): loaded val<.=82a8a4f7 35.4MiB>
2021/07/08 17:06:28 scheduler task 90258421 (flow 4b4267c3): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 90258421 (flow 4b4267c3): submitting (try 0): started
2021/07/08 17:06:28 scheduler task c2bb6acb (flow e34273b7): loaded val<.=40e5c37e 35.4MiB>
2021/07/08 17:06:28 scheduler task e0cd482b (flow 6eb687d9): loaded val<.=af1c93a8 35.4MiB>
2021/07/08 17:06:28 scheduler task 404819b8 (flow a42a45fe): loaded val<.=6467ee5f 35.4MiB>
2021/07/08 17:06:28 scheduler task 1116b1ea (flow 0f8df37c): loaded val<.=c664e266 35.4MiB>
2021/07/08 17:06:28 scheduler task 1116b1ea (flow 0f8df37c): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 1116b1ea (flow 0f8df37c): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 404819b8 (flow a42a45fe): loaded val<.=1a754215 35.4MiB>
2021/07/08 17:06:28 scheduler task 404819b8 (flow a42a45fe): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 404819b8 (flow a42a45fe): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 8c8e5588 (flow dd21f074): loaded val<.=d7ae7849 35.4MiB>
2021/07/08 17:06:28 scheduler task 8c8e5588 (flow dd21f074): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 18412571 (flow e7209bac): loaded val<.=59f5690a 35.4MiB>
2021/07/08 17:06:28 scheduler task 18412571 (flow e7209bac): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 8c8e5588 (flow dd21f074): submitting (try 0): started
2021/07/08 17:06:28 scheduler task c2bb6acb (flow e34273b7): loaded val<.=9c95bd33 35.4MiB>
2021/07/08 17:06:28 scheduler task c2bb6acb (flow e34273b7): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 69182bd0 (flow 73004c68): loaded val<.=154155f3 35.4MiB>
2021/07/08 17:06:28 scheduler task b5b1ad47 (flow 57088d8f): loaded val<.=feecab12 35.4MiB>
2021/07/08 17:06:28 scheduler task b5b1ad47 (flow 57088d8f): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 18412571 (flow e7209bac): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 2c9167d6 (flow bfdc7ffb): loaded val<.=83abda35 35.4MiB>
2021/07/08 17:06:28 scheduler task c2bb6acb (flow e34273b7): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 3205c8c6 (flow 6a43092a): loaded val<.=48f8c623 35.4MiB>
2021/07/08 17:06:28 scheduler task 3205c8c6 (flow 6a43092a): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task b5b1ad47 (flow 57088d8f): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 3205c8c6 (flow 6a43092a): submitting (try 0): started
2021/07/08 17:06:28 scheduler task c68e568f (flow 689ddd7c): loaded val<.=ac7dc2c3 35.4MiB>
2021/07/08 17:06:28 scheduler task c68e568f (flow 689ddd7c): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task c68e568f (flow 689ddd7c): submitting (try 0): started
2021/07/08 17:06:28 scheduler task d862912d (flow 99d4b438): loaded val<.=57d59e55 35.4MiB>
2021/07/08 17:06:28 scheduler task d862912d (flow 99d4b438): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task f8df3480 (flow 502645a1): loaded val<.=8044f19b 35.4MiB>
2021/07/08 17:06:28 scheduler task f8df3480 (flow 502645a1): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 0f930977 (flow 56443f2e): loaded val<.=3d38eea3 35.4MiB>
2021/07/08 17:06:28 scheduler task 5ea6c273 (flow 572331ce): loaded val<.=285e05bc 35.4MiB>
2021/07/08 17:06:28 scheduler task 0f930977 (flow 56443f2e): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task e737ca8f (flow 4bc88741): loaded val<.=15c5bdb7 35.4MiB>
2021/07/08 17:06:28 scheduler task e737ca8f (flow 4bc88741): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task d862912d (flow 99d4b438): submitting (try 0): started
2021/07/08 17:06:28 scheduler task bc733e05 (flow 50764c57): loaded val<.=79b34920 35.4MiB>
2021/07/08 17:06:28 scheduler task 24761a03 (flow 4e887abd): loaded val<.=49ee3fa9 35.4MiB>
2021/07/08 17:06:28 scheduler task 24761a03 (flow 4e887abd): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task f8df3480 (flow 502645a1): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 4cea0c9b (flow 109c7075): loaded val<.=099aef25 35.4MiB>
2021/07/08 17:06:28 scheduler task 4cea0c9b (flow 109c7075): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 0f930977 (flow 56443f2e): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 006129c5 (flow 70f0c0c0): loaded val<.=55aad3c3 35.4MiB>
2021/07/08 17:06:28 scheduler task 006129c5 (flow 70f0c0c0): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task bc733e05 (flow 50764c57): loaded val<.=dd9e6390 35.4MiB>
2021/07/08 17:06:28 scheduler task bc733e05 (flow 50764c57): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 5ea6c273 (flow 572331ce): loaded val<.=2796a714 35.4MiB>
2021/07/08 17:06:28 scheduler task 5ea6c273 (flow 572331ce): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 006129c5 (flow 70f0c0c0): submitting (try 0): started
2021/07/08 17:06:28 scheduler task e737ca8f (flow 4bc88741): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 0a7ec48b (flow eda7cfd2): loaded val<.=03ffd14e 35.4MiB>
2021/07/08 17:06:28 scheduler task 0a7ec48b (flow eda7cfd2): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 24761a03 (flow 4e887abd): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f7976c84 (flow 9f59688b): loaded val<.=1c41c856 35.4MiB>
2021/07/08 17:06:28 scheduler task f7976c84 (flow 9f59688b): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 4cea0c9b (flow 109c7075): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 5f63db20 (flow 38aa0f8b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:28 scheduler task bc733e05 (flow 50764c57): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 5ea6c273 (flow 572331ce): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 0a7ec48b (flow eda7cfd2): submitting (try 0): started
2021/07/08 17:06:28 scheduler task f7976c84 (flow 9f59688b): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 5f63db20 (flow 38aa0f8b): waiting for completion (try 0): started
2021/07/08 17:06:28  ->  n100.r06.s075.Main.out_file 38aa0f8b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:28 n100.r06.s075.Main.out_file 38aa0f8b n100/r06/n100.r06.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a70a0289d83ca0ef5bbbdfe9e8d05a4e5958548f3c9b7a58d75e1f3a43829a22
	sha256:38aa0f8bf43e3591b1b2be0cec6699cc7902cc7547dbde304178d044e9130184
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f63db205e701f7b42b085a3e03ddaae7984693d7a4ff021327129950d3cdfde
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s075_output"
	    wget -O "n100.r06.s075_output/n100.r06.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s075_output/n100.r06.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s075_output/n100.r06.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s075_output/n100.r06.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s075_output/n100.r06.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s075_output/n100.r06.s075.reference.fas" "n100.r06.s075_output/n100.r06.s075.fq1.fastq" "n100.r06.s075_output/n100.r06.s075.fq2.fastq" | samtools view -bS - > "n100.r06.s075_output/n100.r06.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s075_output/n100.r06.s075.untrimmed.sorted.bam" "n100.r06.s075_output/n100.r06.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s075_output/n100.r06.s075.untrimmed.sorted.bam" -b "n100.r06.s075_output/n100.r06.s075.primers.bed" -p "n100.r06.s075_output/n100.r06.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" "n100.r06.s075_output/n100.r06.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s075_output/n100.r06.s075.reference.fas" "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" > "n100.r06.s075_output/n100.r06.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s075_output/n100.r06.s075.reference.fas" --call-indels "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" > "n100.r06.s075_output/n100.r06.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" > "n100.r06.s075_output/n100.r06.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s075_output/n100.r06.s075.depth.txt" "n100.r06.s075_output/n100.r06.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s075_output/n100.r06.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s075_output/n100.r06.s075.reference.fas" | bcftools consensus -m "n100.r06.s075_output/n100.r06.s075.low_depth.tsv" tmp.vcf.gz > "n100.r06.s075_output/n100.r06.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:28 scheduler task 83e10361 (flow cf58eefc): loaded val<.=5e0a96f9 35.4MiB>
2021/07/08 17:06:28 scheduler task 83e10361 (flow cf58eefc): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 957861f5 (flow 82bc0705): loaded val<.=4658f176 35.4MiB>
2021/07/08 17:06:28 scheduler task e0cd482b (flow 6eb687d9): loaded val<.=6696775b 35.4MiB>
2021/07/08 17:06:28 scheduler task e0cd482b (flow 6eb687d9): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 83e10361 (flow cf58eefc): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 69182bd0 (flow 73004c68): loaded val<.=141eaed2 35.4MiB>
2021/07/08 17:06:28 scheduler task 69182bd0 (flow 73004c68): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task e0cd482b (flow 6eb687d9): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 69182bd0 (flow 73004c68): submitting (try 0): started
2021/07/08 17:06:28 scheduler task 1727ff25 (flow 05553cfd): loaded val<.=d49b0dd0 35.4MiB>
2021/07/08 17:06:28 scheduler task 1727ff25 (flow 05553cfd): loading (try 0): successful, next state: submitting
2021/07/08 17:06:28 scheduler task 1727ff25 (flow 05553cfd): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 46f78305 (flow 40aec702): loaded val<.=845450d2 35.4MiB>
2021/07/08 17:06:29 scheduler task 46f78305 (flow 40aec702): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 46f78305 (flow 40aec702): submitting (try 0): started
2021/07/08 17:06:29 scheduler task d21f5df2 (flow 398ccd9b): loaded val<.=5962b3fc 35.4MiB>
2021/07/08 17:06:29 scheduler task d21f5df2 (flow 398ccd9b): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task d21f5df2 (flow 398ccd9b): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 30d52cd1 (flow 965617d8): loaded val<.=4966f95e 35.4MiB>
2021/07/08 17:06:29 scheduler task a624161c (flow 8ae2595d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:29 scheduler task a624161c (flow 8ae2595d): waiting for completion (try 0): started
2021/07/08 17:06:29  ->  n100.r06.s059.Main.out_file 8ae2595d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:29 n100.r06.s059.Main.out_file 8ae2595d n100/r06/n100.r06.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:60694eb00b3551d68e433c0266f3e0a82e15b75c9f911bd53b051a870a14b76e
	sha256:8ae2595db4ae88fe11bcd87baec0c37016a830c1879fdc4da82459d1508f17fc
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a624161cc6780b938906804c37f3bc5c9aafe52adff5ad3cb292202456d20888
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s059_output"
	    wget -O "n100.r06.s059_output/n100.r06.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s059_output/n100.r06.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s059_output/n100.r06.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s059_output/n100.r06.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s059_output/n100.r06.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s059_output/n100.r06.s059.reference.fas" "n100.r06.s059_output/n100.r06.s059.fq1.fastq" "n100.r06.s059_output/n100.r06.s059.fq2.fastq" | samtools view -bS - > "n100.r06.s059_output/n100.r06.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s059_output/n100.r06.s059.untrimmed.sorted.bam" "n100.r06.s059_output/n100.r06.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s059_output/n100.r06.s059.untrimmed.sorted.bam" -b "n100.r06.s059_output/n100.r06.s059.primers.bed" -p "n100.r06.s059_output/n100.r06.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" "n100.r06.s059_output/n100.r06.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s059_output/n100.r06.s059.reference.fas" "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" > "n100.r06.s059_output/n100.r06.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s059_output/n100.r06.s059.reference.fas" --call-indels "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" > "n100.r06.s059_output/n100.r06.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" > "n100.r06.s059_output/n100.r06.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s059_output/n100.r06.s059.depth.txt" "n100.r06.s059_output/n100.r06.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s059_output/n100.r06.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s059_output/n100.r06.s059.reference.fas" | bcftools consensus -m "n100.r06.s059_output/n100.r06.s059.low_depth.tsv" tmp.vcf.gz > "n100.r06.s059_output/n100.r06.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:29 scheduler task 828d1448 (flow 66f9b0f9): loaded val<.=c3c92858 35.4MiB>
2021/07/08 17:06:29 scheduler task 828d1448 (flow 66f9b0f9): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 828d1448 (flow 66f9b0f9): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 2c9167d6 (flow bfdc7ffb): loaded val<.=6a686933 35.4MiB>
2021/07/08 17:06:29 scheduler task 2c9167d6 (flow bfdc7ffb): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 2c9167d6 (flow bfdc7ffb): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 626618af (flow 3d47e552): loaded val<.=bdddbf65 35.4MiB>
2021/07/08 17:06:29 scheduler task 626618af (flow 3d47e552): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 626618af (flow 3d47e552): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 70e83fb0 (flow f04fe471): loaded val<.=2549abaa 35.4MiB>
2021/07/08 17:06:29 scheduler task 70e83fb0 (flow f04fe471): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task cbed6014 (flow 936d4ab9): loaded val<.=3abcdebc 35.4MiB>
2021/07/08 17:06:29 scheduler task cbed6014 (flow 936d4ab9): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 70e83fb0 (flow f04fe471): submitting (try 0): started
2021/07/08 17:06:29 scheduler task cbed6014 (flow 936d4ab9): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 30d52cd1 (flow 965617d8): loaded val<.=f01d3690 35.4MiB>
2021/07/08 17:06:29 scheduler task 30d52cd1 (flow 965617d8): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 30d52cd1 (flow 965617d8): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 371261a3 (flow e80820b2): loaded val<.=ae88e88d 35.4MiB>
2021/07/08 17:06:29 scheduler task 371261a3 (flow e80820b2): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task c2bd846b (flow 25ed0be7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:29 scheduler task ee390516 (flow dece9cd5): loaded val<.=7a4fdad0 35.4MiB>
2021/07/08 17:06:29 scheduler task ee390516 (flow dece9cd5): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 371261a3 (flow e80820b2): submitting (try 0): started
2021/07/08 17:06:29 scheduler task c2bd846b (flow 25ed0be7): waiting for completion (try 0): started
2021/07/08 17:06:29  ->  n100.r06.s058.Main.out_file 25ed0be7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:29 n100.r06.s058.Main.out_file 25ed0be7 n100/r06/n100.r06.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:69ed4c13f3b5face356b1095d8b7ca7540e7f07d75ffd5aa52e77e58eb4e4ad2
	sha256:25ed0be7a0b8691580590545262dcd6239f735bd8761f3c9c57e886020d1cd1f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c2bd846b7ed72775fa0d89dba5a065c6b8f229ef00f6c3a2d152c67498dd3f57
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s058_output"
	    wget -O "n100.r06.s058_output/n100.r06.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s058_output/n100.r06.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s058_output/n100.r06.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s058_output/n100.r06.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s058_output/n100.r06.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s058_output/n100.r06.s058.reference.fas" "n100.r06.s058_output/n100.r06.s058.fq1.fastq" "n100.r06.s058_output/n100.r06.s058.fq2.fastq" | samtools view -bS - > "n100.r06.s058_output/n100.r06.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s058_output/n100.r06.s058.untrimmed.sorted.bam" "n100.r06.s058_output/n100.r06.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s058_output/n100.r06.s058.untrimmed.sorted.bam" -b "n100.r06.s058_output/n100.r06.s058.primers.bed" -p "n100.r06.s058_output/n100.r06.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" "n100.r06.s058_output/n100.r06.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s058_output/n100.r06.s058.reference.fas" "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" > "n100.r06.s058_output/n100.r06.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s058_output/n100.r06.s058.reference.fas" --call-indels "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" > "n100.r06.s058_output/n100.r06.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" > "n100.r06.s058_output/n100.r06.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s058_output/n100.r06.s058.depth.txt" "n100.r06.s058_output/n100.r06.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s058_output/n100.r06.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s058_output/n100.r06.s058.reference.fas" | bcftools consensus -m "n100.r06.s058_output/n100.r06.s058.low_depth.tsv" tmp.vcf.gz > "n100.r06.s058_output/n100.r06.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:29 scheduler task ee390516 (flow dece9cd5): submitting (try 0): started
2021/07/08 17:06:29 scheduler task f672ef92 (flow 14086e68): loaded val<.=0d93ad45 35.4MiB>
2021/07/08 17:06:29 scheduler task f672ef92 (flow 14086e68): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task 957861f5 (flow 82bc0705): loaded val<.=37e1e93d 35.4MiB>
2021/07/08 17:06:29 scheduler task 957861f5 (flow 82bc0705): loading (try 0): successful, next state: submitting
2021/07/08 17:06:29 scheduler task f672ef92 (flow 14086e68): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 957861f5 (flow 82bc0705): submitting (try 0): started
2021/07/08 17:06:29 scheduler task 0405c8f8 (flow c10a38f2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:29 scheduler task 0405c8f8 (flow c10a38f2): waiting for completion (try 0): started
2021/07/08 17:06:29  ->  n100.r06.s056.Main.out_file c10a38f2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:29 n100.r06.s056.Main.out_file c10a38f2 n100/r06/n100.r06.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cf13777bce7d62f20914dcb387048a1ca8973f16be0ba4dfb018f4139f2df143
	sha256:c10a38f22b75f20b5065ef418639f5a966234c37dc0fd4a925935af355518209
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0405c8f842dde027d046fdf0e49682f0d9d7b328a774cbd3f870769af1687702
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s056_output"
	    wget -O "n100.r06.s056_output/n100.r06.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s056_output/n100.r06.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s056_output/n100.r06.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s056_output/n100.r06.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s056_output/n100.r06.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s056_output/n100.r06.s056.reference.fas" "n100.r06.s056_output/n100.r06.s056.fq1.fastq" "n100.r06.s056_output/n100.r06.s056.fq2.fastq" | samtools view -bS - > "n100.r06.s056_output/n100.r06.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s056_output/n100.r06.s056.untrimmed.sorted.bam" "n100.r06.s056_output/n100.r06.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s056_output/n100.r06.s056.untrimmed.sorted.bam" -b "n100.r06.s056_output/n100.r06.s056.primers.bed" -p "n100.r06.s056_output/n100.r06.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" "n100.r06.s056_output/n100.r06.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s056_output/n100.r06.s056.reference.fas" "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" > "n100.r06.s056_output/n100.r06.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s056_output/n100.r06.s056.reference.fas" --call-indels "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" > "n100.r06.s056_output/n100.r06.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" > "n100.r06.s056_output/n100.r06.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s056_output/n100.r06.s056.depth.txt" "n100.r06.s056_output/n100.r06.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s056_output/n100.r06.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s056_output/n100.r06.s056.reference.fas" | bcftools consensus -m "n100.r06.s056_output/n100.r06.s056.low_depth.tsv" tmp.vcf.gz > "n100.r06.s056_output/n100.r06.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:29 scheduler task 2bb36640 (flow b8449ca4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:29 scheduler task 2bb36640 (flow b8449ca4): waiting for completion (try 0): started
2021/07/08 17:06:29  ->  n100.r06.s073.Main.out_file b8449ca4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:29 n100.r06.s073.Main.out_file b8449ca4 n100/r06/n100.r06.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:394ad0e09beca5011d2b28c505de0d0de93215086aba6f645378ace299214108
	sha256:b8449ca4d6d2c9ecf67dcbcda40dc7f706a0c82e7d8adb7e45f2ff7d09be5080
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2bb366408a8c59bd2f53f603ae01835b5fd75b8be556ed4b128c0d92826c6d4e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s073_output"
	    wget -O "n100.r06.s073_output/n100.r06.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s073_output/n100.r06.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s073_output/n100.r06.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s073_output/n100.r06.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s073_output/n100.r06.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s073_output/n100.r06.s073.reference.fas" "n100.r06.s073_output/n100.r06.s073.fq1.fastq" "n100.r06.s073_output/n100.r06.s073.fq2.fastq" | samtools view -bS - > "n100.r06.s073_output/n100.r06.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s073_output/n100.r06.s073.untrimmed.sorted.bam" "n100.r06.s073_output/n100.r06.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s073_output/n100.r06.s073.untrimmed.sorted.bam" -b "n100.r06.s073_output/n100.r06.s073.primers.bed" -p "n100.r06.s073_output/n100.r06.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" "n100.r06.s073_output/n100.r06.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s073_output/n100.r06.s073.reference.fas" "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" > "n100.r06.s073_output/n100.r06.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s073_output/n100.r06.s073.reference.fas" --call-indels "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" > "n100.r06.s073_output/n100.r06.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" > "n100.r06.s073_output/n100.r06.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s073_output/n100.r06.s073.depth.txt" "n100.r06.s073_output/n100.r06.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s073_output/n100.r06.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s073_output/n100.r06.s073.reference.fas" | bcftools consensus -m "n100.r06.s073_output/n100.r06.s073.low_depth.tsv" tmp.vcf.gz > "n100.r06.s073_output/n100.r06.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:29 scheduler task 5bab0f48 (flow ed96eb31): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:29 scheduler task 5bab0f48 (flow ed96eb31): waiting for completion (try 0): started
2021/07/08 17:06:29  ->  n100.r06.s086.Main.out_file ed96eb31 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:29 n100.r06.s086.Main.out_file ed96eb31 n100/r06/n100.r06.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a4daabae0e32e6234d40ace7a99b9624c62406b6811381dc812fb15ca37fe9c
	sha256:ed96eb312ba9318759318cd7e55e35a2e540fe4b0c690b69b2b261164c536ab6
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bab0f485cfc1e7d768a26c497ac65da140254dc1061f7c3e200073b5b85af54
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s086_output"
	    wget -O "n100.r06.s086_output/n100.r06.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s086_output/n100.r06.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s086_output/n100.r06.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s086_output/n100.r06.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s086_output/n100.r06.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s086_output/n100.r06.s086.reference.fas" "n100.r06.s086_output/n100.r06.s086.fq1.fastq" "n100.r06.s086_output/n100.r06.s086.fq2.fastq" | samtools view -bS - > "n100.r06.s086_output/n100.r06.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s086_output/n100.r06.s086.untrimmed.sorted.bam" "n100.r06.s086_output/n100.r06.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s086_output/n100.r06.s086.untrimmed.sorted.bam" -b "n100.r06.s086_output/n100.r06.s086.primers.bed" -p "n100.r06.s086_output/n100.r06.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" "n100.r06.s086_output/n100.r06.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s086_output/n100.r06.s086.reference.fas" "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" > "n100.r06.s086_output/n100.r06.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s086_output/n100.r06.s086.reference.fas" --call-indels "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" > "n100.r06.s086_output/n100.r06.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" > "n100.r06.s086_output/n100.r06.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s086_output/n100.r06.s086.depth.txt" "n100.r06.s086_output/n100.r06.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s086_output/n100.r06.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s086_output/n100.r06.s086.reference.fas" | bcftools consensus -m "n100.r06.s086_output/n100.r06.s086.low_depth.tsv" tmp.vcf.gz > "n100.r06.s086_output/n100.r06.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:29 scheduler task e671b3d5 (flow e2cc75f4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:29 scheduler task e671b3d5 (flow e2cc75f4): waiting for completion (try 0): started
2021/07/08 17:06:29  ->  n100.r06.s082.Main.out_file e2cc75f4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:29 n100.r06.s082.Main.out_file e2cc75f4 n100/r06/n100.r06.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fa73ccac7e40a1492b806775b3d3b8d02f9959f2f10280ffc7bc12bb660acbe4
	sha256:e2cc75f48094ac7554905ce766b977f575e7d4d5e88907e33dd84e9ff53878ce
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e671b3d52575a5cda1882f0aab6843f5d34c26195b474375c2fa6dd2e389325b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s082_output"
	    wget -O "n100.r06.s082_output/n100.r06.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s082_output/n100.r06.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s082_output/n100.r06.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s082_output/n100.r06.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s082_output/n100.r06.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s082_output/n100.r06.s082.reference.fas" "n100.r06.s082_output/n100.r06.s082.fq1.fastq" "n100.r06.s082_output/n100.r06.s082.fq2.fastq" | samtools view -bS - > "n100.r06.s082_output/n100.r06.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s082_output/n100.r06.s082.untrimmed.sorted.bam" "n100.r06.s082_output/n100.r06.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s082_output/n100.r06.s082.untrimmed.sorted.bam" -b "n100.r06.s082_output/n100.r06.s082.primers.bed" -p "n100.r06.s082_output/n100.r06.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" "n100.r06.s082_output/n100.r06.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s082_output/n100.r06.s082.reference.fas" "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" > "n100.r06.s082_output/n100.r06.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s082_output/n100.r06.s082.reference.fas" --call-indels "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" > "n100.r06.s082_output/n100.r06.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" > "n100.r06.s082_output/n100.r06.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s082_output/n100.r06.s082.depth.txt" "n100.r06.s082_output/n100.r06.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s082_output/n100.r06.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s082_output/n100.r06.s082.reference.fas" | bcftools consensus -m "n100.r06.s082_output/n100.r06.s082.low_depth.tsv" tmp.vcf.gz > "n100.r06.s082_output/n100.r06.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task d50902bd (flow 4c9d792b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task d50902bd (flow 4c9d792b): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s079.Main.out_file 4c9d792b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s079.Main.out_file 4c9d792b n100/r06/n100.r06.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a0a73d26f4d2aa2f9311895f21b637734385533a2f18f6a64f8896d3ed5cbf04
	sha256:4c9d792b90fb9d3a49882af5b402d312e99ef5f81429639fac9b1ae66aa46b6a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d50902bd22d5d8b3171b274040e474dc4acc0ab10efeadbfbfa0e0d77d12df14
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s079_output"
	    wget -O "n100.r06.s079_output/n100.r06.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s079_output/n100.r06.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s079_output/n100.r06.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s079_output/n100.r06.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s079_output/n100.r06.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s079_output/n100.r06.s079.reference.fas" "n100.r06.s079_output/n100.r06.s079.fq1.fastq" "n100.r06.s079_output/n100.r06.s079.fq2.fastq" | samtools view -bS - > "n100.r06.s079_output/n100.r06.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s079_output/n100.r06.s079.untrimmed.sorted.bam" "n100.r06.s079_output/n100.r06.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s079_output/n100.r06.s079.untrimmed.sorted.bam" -b "n100.r06.s079_output/n100.r06.s079.primers.bed" -p "n100.r06.s079_output/n100.r06.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" "n100.r06.s079_output/n100.r06.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s079_output/n100.r06.s079.reference.fas" "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" > "n100.r06.s079_output/n100.r06.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s079_output/n100.r06.s079.reference.fas" --call-indels "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" > "n100.r06.s079_output/n100.r06.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" > "n100.r06.s079_output/n100.r06.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s079_output/n100.r06.s079.depth.txt" "n100.r06.s079_output/n100.r06.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s079_output/n100.r06.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s079_output/n100.r06.s079.reference.fas" | bcftools consensus -m "n100.r06.s079_output/n100.r06.s079.low_depth.tsv" tmp.vcf.gz > "n100.r06.s079_output/n100.r06.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task 9775a3d6 (flow 8e0a6c25): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task 9775a3d6 (flow 8e0a6c25): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s063.Main.out_file 8e0a6c25 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s063.Main.out_file 8e0a6c25 n100/r06/n100.r06.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:54cf81ef2ab1678c964a9718d1cfdfec50c746429ba7cfc5fe5c264b9bd37833
	sha256:8e0a6c2555aa17db50f9a2569bdb7810738e434f7b520074a2b26077707a0bef
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9775a3d69826b81b14087fe58f7f567db2283c17c59649ad2ede465050522f46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s063_output"
	    wget -O "n100.r06.s063_output/n100.r06.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s063_output/n100.r06.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s063_output/n100.r06.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s063_output/n100.r06.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s063_output/n100.r06.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s063_output/n100.r06.s063.reference.fas" "n100.r06.s063_output/n100.r06.s063.fq1.fastq" "n100.r06.s063_output/n100.r06.s063.fq2.fastq" | samtools view -bS - > "n100.r06.s063_output/n100.r06.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s063_output/n100.r06.s063.untrimmed.sorted.bam" "n100.r06.s063_output/n100.r06.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s063_output/n100.r06.s063.untrimmed.sorted.bam" -b "n100.r06.s063_output/n100.r06.s063.primers.bed" -p "n100.r06.s063_output/n100.r06.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" "n100.r06.s063_output/n100.r06.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s063_output/n100.r06.s063.reference.fas" "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" > "n100.r06.s063_output/n100.r06.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s063_output/n100.r06.s063.reference.fas" --call-indels "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" > "n100.r06.s063_output/n100.r06.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" > "n100.r06.s063_output/n100.r06.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s063_output/n100.r06.s063.depth.txt" "n100.r06.s063_output/n100.r06.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s063_output/n100.r06.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s063_output/n100.r06.s063.reference.fas" | bcftools consensus -m "n100.r06.s063_output/n100.r06.s063.low_depth.tsv" tmp.vcf.gz > "n100.r06.s063_output/n100.r06.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task 839dd58e (flow ad16a62e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task 839dd58e (flow ad16a62e): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s077.Main.out_file ad16a62e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s077.Main.out_file ad16a62e n100/r06/n100.r06.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f8f9569f1b7460e80e1647bf5ace64d1220de427babcd7a3b3241c272a985ed
	sha256:ad16a62e60b49672299dc883c431d7aadf78223d78a205220227eed378a7485a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/839dd58e59a2126f5d3b0bd0f326c53d79cb97b01ae02fd792452416749e812c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s077_output"
	    wget -O "n100.r06.s077_output/n100.r06.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s077_output/n100.r06.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s077_output/n100.r06.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s077_output/n100.r06.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s077_output/n100.r06.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s077_output/n100.r06.s077.reference.fas" "n100.r06.s077_output/n100.r06.s077.fq1.fastq" "n100.r06.s077_output/n100.r06.s077.fq2.fastq" | samtools view -bS - > "n100.r06.s077_output/n100.r06.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s077_output/n100.r06.s077.untrimmed.sorted.bam" "n100.r06.s077_output/n100.r06.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s077_output/n100.r06.s077.untrimmed.sorted.bam" -b "n100.r06.s077_output/n100.r06.s077.primers.bed" -p "n100.r06.s077_output/n100.r06.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" "n100.r06.s077_output/n100.r06.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s077_output/n100.r06.s077.reference.fas" "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" > "n100.r06.s077_output/n100.r06.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s077_output/n100.r06.s077.reference.fas" --call-indels "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" > "n100.r06.s077_output/n100.r06.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" > "n100.r06.s077_output/n100.r06.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s077_output/n100.r06.s077.depth.txt" "n100.r06.s077_output/n100.r06.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s077_output/n100.r06.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s077_output/n100.r06.s077.reference.fas" | bcftools consensus -m "n100.r06.s077_output/n100.r06.s077.low_depth.tsv" tmp.vcf.gz > "n100.r06.s077_output/n100.r06.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task e962eb6a (flow 285f2d1c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task e962eb6a (flow 285f2d1c): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s067.Main.out_file 285f2d1c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s067.Main.out_file 285f2d1c n100/r06/n100.r06.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:beee405b044e603c7a33e615a3fd7f4351bf380005fea3ba701be9cdfcf6a70d
	sha256:285f2d1ce879c69a082745260c828d5747cd9992a9926f33f298787f19096091
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e962eb6a7fbec89bafb7733b23456d1c8d1e0c1a32b09362d7871574bcc18504
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s067_output"
	    wget -O "n100.r06.s067_output/n100.r06.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s067_output/n100.r06.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s067_output/n100.r06.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s067_output/n100.r06.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s067_output/n100.r06.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s067_output/n100.r06.s067.reference.fas" "n100.r06.s067_output/n100.r06.s067.fq1.fastq" "n100.r06.s067_output/n100.r06.s067.fq2.fastq" | samtools view -bS - > "n100.r06.s067_output/n100.r06.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s067_output/n100.r06.s067.untrimmed.sorted.bam" "n100.r06.s067_output/n100.r06.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s067_output/n100.r06.s067.untrimmed.sorted.bam" -b "n100.r06.s067_output/n100.r06.s067.primers.bed" -p "n100.r06.s067_output/n100.r06.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" "n100.r06.s067_output/n100.r06.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s067_output/n100.r06.s067.reference.fas" "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" > "n100.r06.s067_output/n100.r06.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s067_output/n100.r06.s067.reference.fas" --call-indels "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" > "n100.r06.s067_output/n100.r06.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" > "n100.r06.s067_output/n100.r06.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s067_output/n100.r06.s067.depth.txt" "n100.r06.s067_output/n100.r06.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s067_output/n100.r06.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s067_output/n100.r06.s067.reference.fas" | bcftools consensus -m "n100.r06.s067_output/n100.r06.s067.low_depth.tsv" tmp.vcf.gz > "n100.r06.s067_output/n100.r06.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task fdd894a1 (flow b4e03496): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task fdd894a1 (flow b4e03496): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s099.Main.out_file b4e03496 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s099.Main.out_file b4e03496 n100/r06/n100.r06.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d3fac6985275eb34cf7076c2e2fa7e6ad961a31a13a3bdb991382c08dba43f1a
	sha256:b4e03496243d7cf7db201e6abde048e4512ea26ed4a3bdc972c53b48dc7b55e7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fdd894a12ee1bdb608207f517f28dae021d8b5a0e1a4bc801eca0dfe7412cd3d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s099_output"
	    wget -O "n100.r06.s099_output/n100.r06.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s099_output/n100.r06.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s099_output/n100.r06.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s099_output/n100.r06.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s099_output/n100.r06.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s099_output/n100.r06.s099.reference.fas" "n100.r06.s099_output/n100.r06.s099.fq1.fastq" "n100.r06.s099_output/n100.r06.s099.fq2.fastq" | samtools view -bS - > "n100.r06.s099_output/n100.r06.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s099_output/n100.r06.s099.untrimmed.sorted.bam" "n100.r06.s099_output/n100.r06.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s099_output/n100.r06.s099.untrimmed.sorted.bam" -b "n100.r06.s099_output/n100.r06.s099.primers.bed" -p "n100.r06.s099_output/n100.r06.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" "n100.r06.s099_output/n100.r06.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s099_output/n100.r06.s099.reference.fas" "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" > "n100.r06.s099_output/n100.r06.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s099_output/n100.r06.s099.reference.fas" --call-indels "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" > "n100.r06.s099_output/n100.r06.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" > "n100.r06.s099_output/n100.r06.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s099_output/n100.r06.s099.depth.txt" "n100.r06.s099_output/n100.r06.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s099_output/n100.r06.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s099_output/n100.r06.s099.reference.fas" | bcftools consensus -m "n100.r06.s099_output/n100.r06.s099.low_depth.tsv" tmp.vcf.gz > "n100.r06.s099_output/n100.r06.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task d3fe6c76 (flow b67385b5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task d3fe6c76 (flow b67385b5): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s089.Main.out_file b67385b5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s089.Main.out_file b67385b5 n100/r06/n100.r06.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4872ebb18dbbb19dc62abbc957842c6a7890d782ea8b1a6ae1aec3af93261e18
	sha256:b67385b50fdaa85cdf99d9496e1cb95379d75d34c92d753daeed235ac7f1cb44
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3fe6c7676b60b27988a28c405ddcb1e0f66442e7c019ae9b913543b3b522471
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s089_output"
	    wget -O "n100.r06.s089_output/n100.r06.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s089_output/n100.r06.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s089_output/n100.r06.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s089_output/n100.r06.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s089_output/n100.r06.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s089_output/n100.r06.s089.reference.fas" "n100.r06.s089_output/n100.r06.s089.fq1.fastq" "n100.r06.s089_output/n100.r06.s089.fq2.fastq" | samtools view -bS - > "n100.r06.s089_output/n100.r06.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s089_output/n100.r06.s089.untrimmed.sorted.bam" "n100.r06.s089_output/n100.r06.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s089_output/n100.r06.s089.untrimmed.sorted.bam" -b "n100.r06.s089_output/n100.r06.s089.primers.bed" -p "n100.r06.s089_output/n100.r06.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" "n100.r06.s089_output/n100.r06.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s089_output/n100.r06.s089.reference.fas" "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" > "n100.r06.s089_output/n100.r06.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s089_output/n100.r06.s089.reference.fas" --call-indels "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" > "n100.r06.s089_output/n100.r06.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" > "n100.r06.s089_output/n100.r06.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s089_output/n100.r06.s089.depth.txt" "n100.r06.s089_output/n100.r06.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s089_output/n100.r06.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s089_output/n100.r06.s089.reference.fas" | bcftools consensus -m "n100.r06.s089_output/n100.r06.s089.low_depth.tsv" tmp.vcf.gz > "n100.r06.s089_output/n100.r06.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:30 scheduler task e67335ac (flow bad69a68): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:30 scheduler task e67335ac (flow bad69a68): waiting for completion (try 0): started
2021/07/08 17:06:30  ->  n100.r06.s009.Main.out_file bad69a68 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:30 n100.r06.s009.Main.out_file bad69a68 n100/r06/n100.r06.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f813d518bcb09710b6da6b184737dbf6c93ab9f2b150aea08f62404ae7f879d3
	sha256:bad69a6846046e03e66473ba9b4ce3d6063f54c34b16f7c0cc8cb22cf8af0192
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e67335ac8f008388811bb022e63800f8864714b1c35a0a86356d8f58d4e9664d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s009_output"
	    wget -O "n100.r06.s009_output/n100.r06.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s009_output/n100.r06.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s009_output/n100.r06.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s009_output/n100.r06.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s009_output/n100.r06.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s009_output/n100.r06.s009.reference.fas" "n100.r06.s009_output/n100.r06.s009.fq1.fastq" "n100.r06.s009_output/n100.r06.s009.fq2.fastq" | samtools view -bS - > "n100.r06.s009_output/n100.r06.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s009_output/n100.r06.s009.untrimmed.sorted.bam" "n100.r06.s009_output/n100.r06.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s009_output/n100.r06.s009.untrimmed.sorted.bam" -b "n100.r06.s009_output/n100.r06.s009.primers.bed" -p "n100.r06.s009_output/n100.r06.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" "n100.r06.s009_output/n100.r06.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s009_output/n100.r06.s009.reference.fas" "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" > "n100.r06.s009_output/n100.r06.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s009_output/n100.r06.s009.reference.fas" --call-indels "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" > "n100.r06.s009_output/n100.r06.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" > "n100.r06.s009_output/n100.r06.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s009_output/n100.r06.s009.depth.txt" "n100.r06.s009_output/n100.r06.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s009_output/n100.r06.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s009_output/n100.r06.s009.reference.fas" | bcftools consensus -m "n100.r06.s009_output/n100.r06.s009.low_depth.tsv" tmp.vcf.gz > "n100.r06.s009_output/n100.r06.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:31 scheduler task 4a370f54 (flow 5c4c374f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:31 scheduler task 4a370f54 (flow 5c4c374f): waiting for completion (try 0): started
2021/07/08 17:06:31  ->  n100.r06.s069.Main.out_file 5c4c374f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:31 n100.r06.s069.Main.out_file 5c4c374f n100/r06/n100.r06.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d5ec5e0ece41efcc6ff365e3546f1a12331b9503158da0bf598002717fe4189
	sha256:5c4c374f3346887702691f13279227b9301a3b28ac5486fedade7f8919812239
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4a370f54a7dd5384564698e9051f1cf51f33d1c77c56edd5fdc7e3f67e418b39
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s069_output"
	    wget -O "n100.r06.s069_output/n100.r06.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s069_output/n100.r06.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s069_output/n100.r06.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s069_output/n100.r06.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s069_output/n100.r06.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s069_output/n100.r06.s069.reference.fas" "n100.r06.s069_output/n100.r06.s069.fq1.fastq" "n100.r06.s069_output/n100.r06.s069.fq2.fastq" | samtools view -bS - > "n100.r06.s069_output/n100.r06.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s069_output/n100.r06.s069.untrimmed.sorted.bam" "n100.r06.s069_output/n100.r06.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s069_output/n100.r06.s069.untrimmed.sorted.bam" -b "n100.r06.s069_output/n100.r06.s069.primers.bed" -p "n100.r06.s069_output/n100.r06.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" "n100.r06.s069_output/n100.r06.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s069_output/n100.r06.s069.reference.fas" "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" > "n100.r06.s069_output/n100.r06.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s069_output/n100.r06.s069.reference.fas" --call-indels "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" > "n100.r06.s069_output/n100.r06.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" > "n100.r06.s069_output/n100.r06.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s069_output/n100.r06.s069.depth.txt" "n100.r06.s069_output/n100.r06.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s069_output/n100.r06.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s069_output/n100.r06.s069.reference.fas" | bcftools consensus -m "n100.r06.s069_output/n100.r06.s069.low_depth.tsv" tmp.vcf.gz > "n100.r06.s069_output/n100.r06.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:31 scheduler task 34721296 (flow 26cf7ba6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:31 scheduler task 34721296 (flow 26cf7ba6): waiting for completion (try 0): started
2021/07/08 17:06:31  ->  n100.r06.s100.Main.out_file 26cf7ba6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:31 n100.r06.s100.Main.out_file 26cf7ba6 n100/r06/n100.r06.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:741efa4710c6bfdd814d07b27411b7e910703ff8f7a35fb275606452cb0ba930
	sha256:26cf7ba62407dc239d5c3c85b11afc7df0331975dd8e49c8db2ae0f797fb85e4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3472129653dcb3178ae1f1593d2eb2180c2c66441e11f7e967452bdc90d71493
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s100_output"
	    wget -O "n100.r06.s100_output/n100.r06.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s100_output/n100.r06.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s100_output/n100.r06.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s100_output/n100.r06.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s100_output/n100.r06.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s100_output/n100.r06.s100.reference.fas" "n100.r06.s100_output/n100.r06.s100.fq1.fastq" "n100.r06.s100_output/n100.r06.s100.fq2.fastq" | samtools view -bS - > "n100.r06.s100_output/n100.r06.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s100_output/n100.r06.s100.untrimmed.sorted.bam" "n100.r06.s100_output/n100.r06.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s100_output/n100.r06.s100.untrimmed.sorted.bam" -b "n100.r06.s100_output/n100.r06.s100.primers.bed" -p "n100.r06.s100_output/n100.r06.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" "n100.r06.s100_output/n100.r06.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s100_output/n100.r06.s100.reference.fas" "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" > "n100.r06.s100_output/n100.r06.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s100_output/n100.r06.s100.reference.fas" --call-indels "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" > "n100.r06.s100_output/n100.r06.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" > "n100.r06.s100_output/n100.r06.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s100_output/n100.r06.s100.depth.txt" "n100.r06.s100_output/n100.r06.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s100_output/n100.r06.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s100_output/n100.r06.s100.reference.fas" | bcftools consensus -m "n100.r06.s100_output/n100.r06.s100.low_depth.tsv" tmp.vcf.gz > "n100.r06.s100_output/n100.r06.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:31 scheduler task 5234b714 (flow 7814bb1a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:31 scheduler task 5234b714 (flow 7814bb1a): waiting for completion (try 0): started
2021/07/08 17:06:31  ->  n100.r06.s074.Main.out_file 7814bb1a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:31 n100.r06.s074.Main.out_file 7814bb1a n100/r06/n100.r06.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:56cd1b8475e095e2a560aea611dde07a596e962912e081f62800602d4d0c175a
	sha256:7814bb1a6bd6c5690196ec0884d7ab2733543a0332d6fab65e522952bc108057
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5234b7141ed3b8da914516b479cd038627707bd299c091c77523968c6251a96b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s074_output"
	    wget -O "n100.r06.s074_output/n100.r06.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s074_output/n100.r06.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s074_output/n100.r06.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s074_output/n100.r06.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s074_output/n100.r06.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s074_output/n100.r06.s074.reference.fas" "n100.r06.s074_output/n100.r06.s074.fq1.fastq" "n100.r06.s074_output/n100.r06.s074.fq2.fastq" | samtools view -bS - > "n100.r06.s074_output/n100.r06.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s074_output/n100.r06.s074.untrimmed.sorted.bam" "n100.r06.s074_output/n100.r06.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s074_output/n100.r06.s074.untrimmed.sorted.bam" -b "n100.r06.s074_output/n100.r06.s074.primers.bed" -p "n100.r06.s074_output/n100.r06.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" "n100.r06.s074_output/n100.r06.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s074_output/n100.r06.s074.reference.fas" "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" > "n100.r06.s074_output/n100.r06.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s074_output/n100.r06.s074.reference.fas" --call-indels "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" > "n100.r06.s074_output/n100.r06.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" > "n100.r06.s074_output/n100.r06.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s074_output/n100.r06.s074.depth.txt" "n100.r06.s074_output/n100.r06.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s074_output/n100.r06.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s074_output/n100.r06.s074.reference.fas" | bcftools consensus -m "n100.r06.s074_output/n100.r06.s074.low_depth.tsv" tmp.vcf.gz > "n100.r06.s074_output/n100.r06.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:31 scheduler task fe3638fa (flow c46e9ad2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:31 scheduler task fe3638fa (flow c46e9ad2): waiting for completion (try 0): started
2021/07/08 17:06:31  ->  n100.r06.s080.Main.out_file c46e9ad2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:31 n100.r06.s080.Main.out_file c46e9ad2 n100/r06/n100.r06.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8447375b9af2cdeb4d3f018f8a5053f7c4f3590c371fb11641ea864a161733e4
	sha256:c46e9ad28ddc204df9d363d84e164f13bd5a97ab4d3df3ccb2119b96fe0df649
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fe3638fa2004fb2024b7c929e10b6caf441ce8738dc7936adb43a6c45677ff5b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s080_output"
	    wget -O "n100.r06.s080_output/n100.r06.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s080_output/n100.r06.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s080_output/n100.r06.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s080_output/n100.r06.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s080_output/n100.r06.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s080_output/n100.r06.s080.reference.fas" "n100.r06.s080_output/n100.r06.s080.fq1.fastq" "n100.r06.s080_output/n100.r06.s080.fq2.fastq" | samtools view -bS - > "n100.r06.s080_output/n100.r06.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s080_output/n100.r06.s080.untrimmed.sorted.bam" "n100.r06.s080_output/n100.r06.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s080_output/n100.r06.s080.untrimmed.sorted.bam" -b "n100.r06.s080_output/n100.r06.s080.primers.bed" -p "n100.r06.s080_output/n100.r06.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" "n100.r06.s080_output/n100.r06.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s080_output/n100.r06.s080.reference.fas" "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" > "n100.r06.s080_output/n100.r06.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s080_output/n100.r06.s080.reference.fas" --call-indels "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" > "n100.r06.s080_output/n100.r06.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" > "n100.r06.s080_output/n100.r06.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s080_output/n100.r06.s080.depth.txt" "n100.r06.s080_output/n100.r06.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s080_output/n100.r06.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s080_output/n100.r06.s080.reference.fas" | bcftools consensus -m "n100.r06.s080_output/n100.r06.s080.low_depth.tsv" tmp.vcf.gz > "n100.r06.s080_output/n100.r06.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:31 scheduler task 7a0d4a9f (flow dd42e107): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:31 scheduler task 7a0d4a9f (flow dd42e107): waiting for completion (try 0): started
2021/07/08 17:06:31  ->  n100.r06.s084.Main.out_file dd42e107 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:31 n100.r06.s084.Main.out_file dd42e107 n100/r06/n100.r06.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2e924559924f69c6a7dc60ed4b9cc2b8bb485e3af21ab36a159dcca8450018ab
	sha256:dd42e1074bfc9005b3cbdb347f06e4ee7100b10343197ee0b9cb1c5e5b0aab5e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a0d4a9ff25c312091282884e8697ca2951c5909d864c24b455f005bb0a0e991
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s084_output"
	    wget -O "n100.r06.s084_output/n100.r06.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s084_output/n100.r06.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s084_output/n100.r06.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s084_output/n100.r06.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s084_output/n100.r06.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s084_output/n100.r06.s084.reference.fas" "n100.r06.s084_output/n100.r06.s084.fq1.fastq" "n100.r06.s084_output/n100.r06.s084.fq2.fastq" | samtools view -bS - > "n100.r06.s084_output/n100.r06.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s084_output/n100.r06.s084.untrimmed.sorted.bam" "n100.r06.s084_output/n100.r06.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s084_output/n100.r06.s084.untrimmed.sorted.bam" -b "n100.r06.s084_output/n100.r06.s084.primers.bed" -p "n100.r06.s084_output/n100.r06.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" "n100.r06.s084_output/n100.r06.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s084_output/n100.r06.s084.reference.fas" "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" > "n100.r06.s084_output/n100.r06.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s084_output/n100.r06.s084.reference.fas" --call-indels "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" > "n100.r06.s084_output/n100.r06.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" > "n100.r06.s084_output/n100.r06.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s084_output/n100.r06.s084.depth.txt" "n100.r06.s084_output/n100.r06.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s084_output/n100.r06.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s084_output/n100.r06.s084.reference.fas" | bcftools consensus -m "n100.r06.s084_output/n100.r06.s084.low_depth.tsv" tmp.vcf.gz > "n100.r06.s084_output/n100.r06.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:32 scheduler task 5a7c1684 (flow 02d78e7e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:32 scheduler task 5a7c1684 (flow 02d78e7e): waiting for completion (try 0): started
2021/07/08 17:06:32  ->  n100.r06.s094.Main.out_file 02d78e7e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:32 n100.r06.s094.Main.out_file 02d78e7e n100/r06/n100.r06.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ccd681ecd4e70023b285677811093f8b57aaf95b0cbdfcb663bb9059c9840a67
	sha256:02d78e7ebe1e01c98d3d0129d37d1b9b7d87a3e1afa89f317d8d29e23954bf88
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a7c1684a56d69b5182de7afa3293160a7e69ea5f78a07fff30e32e4ea77375e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s094_output"
	    wget -O "n100.r06.s094_output/n100.r06.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s094_output/n100.r06.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s094_output/n100.r06.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s094_output/n100.r06.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s094_output/n100.r06.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s094_output/n100.r06.s094.reference.fas" "n100.r06.s094_output/n100.r06.s094.fq1.fastq" "n100.r06.s094_output/n100.r06.s094.fq2.fastq" | samtools view -bS - > "n100.r06.s094_output/n100.r06.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s094_output/n100.r06.s094.untrimmed.sorted.bam" "n100.r06.s094_output/n100.r06.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s094_output/n100.r06.s094.untrimmed.sorted.bam" -b "n100.r06.s094_output/n100.r06.s094.primers.bed" -p "n100.r06.s094_output/n100.r06.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" "n100.r06.s094_output/n100.r06.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s094_output/n100.r06.s094.reference.fas" "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" > "n100.r06.s094_output/n100.r06.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s094_output/n100.r06.s094.reference.fas" --call-indels "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" > "n100.r06.s094_output/n100.r06.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" > "n100.r06.s094_output/n100.r06.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s094_output/n100.r06.s094.depth.txt" "n100.r06.s094_output/n100.r06.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s094_output/n100.r06.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s094_output/n100.r06.s094.reference.fas" | bcftools consensus -m "n100.r06.s094_output/n100.r06.s094.low_depth.tsv" tmp.vcf.gz > "n100.r06.s094_output/n100.r06.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:32 scheduler task 6ee3129d (flow 7515a847): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:32 scheduler task 6ee3129d (flow 7515a847): waiting for completion (try 0): started
2021/07/08 17:06:32  ->  n100.r06.s085.Main.out_file 7515a847 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:32 n100.r06.s085.Main.out_file 7515a847 n100/r06/n100.r06.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f235c0285dbf447209da9ce20fef7edbad6e47c04e6a55dc37937756713802e4
	sha256:7515a847b39d6579ffb70fa247a4a54b2a103d798bf18dfd6c7bb5c898802222
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ee3129d33649e87cc411ccc05316aa1ebf485559cb863fecedb5f8312cbb8e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s085_output"
	    wget -O "n100.r06.s085_output/n100.r06.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s085_output/n100.r06.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s085_output/n100.r06.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s085_output/n100.r06.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s085_output/n100.r06.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s085_output/n100.r06.s085.reference.fas" "n100.r06.s085_output/n100.r06.s085.fq1.fastq" "n100.r06.s085_output/n100.r06.s085.fq2.fastq" | samtools view -bS - > "n100.r06.s085_output/n100.r06.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s085_output/n100.r06.s085.untrimmed.sorted.bam" "n100.r06.s085_output/n100.r06.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s085_output/n100.r06.s085.untrimmed.sorted.bam" -b "n100.r06.s085_output/n100.r06.s085.primers.bed" -p "n100.r06.s085_output/n100.r06.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" "n100.r06.s085_output/n100.r06.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s085_output/n100.r06.s085.reference.fas" "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" > "n100.r06.s085_output/n100.r06.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s085_output/n100.r06.s085.reference.fas" --call-indels "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" > "n100.r06.s085_output/n100.r06.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" > "n100.r06.s085_output/n100.r06.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s085_output/n100.r06.s085.depth.txt" "n100.r06.s085_output/n100.r06.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s085_output/n100.r06.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s085_output/n100.r06.s085.reference.fas" | bcftools consensus -m "n100.r06.s085_output/n100.r06.s085.low_depth.tsv" tmp.vcf.gz > "n100.r06.s085_output/n100.r06.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:32 scheduler task 476b976c (flow 639e3264): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:32 scheduler task 476b976c (flow 639e3264): waiting for completion (try 0): started
2021/07/08 17:06:32  ->  n100.r06.s030.Main.out_file 639e3264 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:32 n100.r06.s030.Main.out_file 639e3264 n100/r06/n100.r06.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61336bdccec5bd22fb73ca5dd187cc48e9227692771aac30e63ccce51cdf67c2
	sha256:639e3264507d1a6a6959131f09d2d2b1c65a98416e0ece40a1b2353b4a7e6389
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/476b976c9476d223edc837210d74663dbf2ddbd369ecd11abc5532e06e67f685
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s030_output"
	    wget -O "n100.r06.s030_output/n100.r06.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s030_output/n100.r06.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s030_output/n100.r06.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s030_output/n100.r06.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s030_output/n100.r06.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s030_output/n100.r06.s030.reference.fas" "n100.r06.s030_output/n100.r06.s030.fq1.fastq" "n100.r06.s030_output/n100.r06.s030.fq2.fastq" | samtools view -bS - > "n100.r06.s030_output/n100.r06.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s030_output/n100.r06.s030.untrimmed.sorted.bam" "n100.r06.s030_output/n100.r06.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s030_output/n100.r06.s030.untrimmed.sorted.bam" -b "n100.r06.s030_output/n100.r06.s030.primers.bed" -p "n100.r06.s030_output/n100.r06.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" "n100.r06.s030_output/n100.r06.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s030_output/n100.r06.s030.reference.fas" "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" > "n100.r06.s030_output/n100.r06.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s030_output/n100.r06.s030.reference.fas" --call-indels "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" > "n100.r06.s030_output/n100.r06.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" > "n100.r06.s030_output/n100.r06.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s030_output/n100.r06.s030.depth.txt" "n100.r06.s030_output/n100.r06.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s030_output/n100.r06.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s030_output/n100.r06.s030.reference.fas" | bcftools consensus -m "n100.r06.s030_output/n100.r06.s030.low_depth.tsv" tmp.vcf.gz > "n100.r06.s030_output/n100.r06.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:32 scheduler task a7d07754 (flow 10cd036d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:32 scheduler task a7d07754 (flow 10cd036d): waiting for completion (try 0): started
2021/07/08 17:06:32  ->  n100.r06.s007.Main.out_file 10cd036d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:32 n100.r06.s007.Main.out_file 10cd036d n100/r06/n100.r06.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:980834353f24afaacaac0b87aaf4da347454e57c3e35d5d2090ba14cfbc96797
	sha256:10cd036d6a0406452a8bda39e0682b784fef4866d6ebf15bbd2b93a2948c9cf8
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a7d077548662803b8df18e03701bc1bc3d0296bd8674c7f3c16d34a2917adde8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s007_output"
	    wget -O "n100.r06.s007_output/n100.r06.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s007_output/n100.r06.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s007_output/n100.r06.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s007_output/n100.r06.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s007_output/n100.r06.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s007_output/n100.r06.s007.reference.fas" "n100.r06.s007_output/n100.r06.s007.fq1.fastq" "n100.r06.s007_output/n100.r06.s007.fq2.fastq" | samtools view -bS - > "n100.r06.s007_output/n100.r06.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s007_output/n100.r06.s007.untrimmed.sorted.bam" "n100.r06.s007_output/n100.r06.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s007_output/n100.r06.s007.untrimmed.sorted.bam" -b "n100.r06.s007_output/n100.r06.s007.primers.bed" -p "n100.r06.s007_output/n100.r06.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" "n100.r06.s007_output/n100.r06.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s007_output/n100.r06.s007.reference.fas" "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" > "n100.r06.s007_output/n100.r06.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s007_output/n100.r06.s007.reference.fas" --call-indels "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" > "n100.r06.s007_output/n100.r06.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" > "n100.r06.s007_output/n100.r06.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s007_output/n100.r06.s007.depth.txt" "n100.r06.s007_output/n100.r06.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s007_output/n100.r06.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s007_output/n100.r06.s007.reference.fas" | bcftools consensus -m "n100.r06.s007_output/n100.r06.s007.low_depth.tsv" tmp.vcf.gz > "n100.r06.s007_output/n100.r06.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:32 scheduler task 965baf5b (flow d8da4a43): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:32 scheduler task 965baf5b (flow d8da4a43): waiting for completion (try 0): started
2021/07/08 17:06:32  ->  n100.r06.s036.Main.out_file d8da4a43 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:32 n100.r06.s036.Main.out_file d8da4a43 n100/r06/n100.r06.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2f59bbcddb58ab8a4d43dfccb2ca3650cda47004115a8170ad976a22b3168423
	sha256:d8da4a43650c048a4135075a470d5379ccf8318e0ee16a81ad1bc52e4f45be70
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/965baf5b0465a962058562e62a7bac7d25724af68f0ab61ec40b28f3e3dce523
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s036_output"
	    wget -O "n100.r06.s036_output/n100.r06.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s036_output/n100.r06.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s036_output/n100.r06.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s036_output/n100.r06.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s036_output/n100.r06.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s036_output/n100.r06.s036.reference.fas" "n100.r06.s036_output/n100.r06.s036.fq1.fastq" "n100.r06.s036_output/n100.r06.s036.fq2.fastq" | samtools view -bS - > "n100.r06.s036_output/n100.r06.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s036_output/n100.r06.s036.untrimmed.sorted.bam" "n100.r06.s036_output/n100.r06.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s036_output/n100.r06.s036.untrimmed.sorted.bam" -b "n100.r06.s036_output/n100.r06.s036.primers.bed" -p "n100.r06.s036_output/n100.r06.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" "n100.r06.s036_output/n100.r06.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s036_output/n100.r06.s036.reference.fas" "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" > "n100.r06.s036_output/n100.r06.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s036_output/n100.r06.s036.reference.fas" --call-indels "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" > "n100.r06.s036_output/n100.r06.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" > "n100.r06.s036_output/n100.r06.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s036_output/n100.r06.s036.depth.txt" "n100.r06.s036_output/n100.r06.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s036_output/n100.r06.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s036_output/n100.r06.s036.reference.fas" | bcftools consensus -m "n100.r06.s036_output/n100.r06.s036.low_depth.tsv" tmp.vcf.gz > "n100.r06.s036_output/n100.r06.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:32 scheduler task b067dbe8 (flow 946a9c13): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:32 scheduler task b067dbe8 (flow 946a9c13): waiting for completion (try 0): started
2021/07/08 17:06:32  ->  n100.r06.s004.Main.out_file 946a9c13 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:32 n100.r06.s004.Main.out_file 946a9c13 n100/r06/n100.r06.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4bcfe6b5002352bb4aced4f0a3aa6dacec19a7d6eb4e169b7126b0b874bc2351
	sha256:946a9c13dec6b81204fb425fe9501d9615db40a1d159530b4e718e8b88954361
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b067dbe87a583e2ba6053e9675c1dcc8959f613adeff300e2a7d45f6e9b421c5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s004_output"
	    wget -O "n100.r06.s004_output/n100.r06.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s004_output/n100.r06.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s004_output/n100.r06.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s004_output/n100.r06.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s004_output/n100.r06.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s004_output/n100.r06.s004.reference.fas" "n100.r06.s004_output/n100.r06.s004.fq1.fastq" "n100.r06.s004_output/n100.r06.s004.fq2.fastq" | samtools view -bS - > "n100.r06.s004_output/n100.r06.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s004_output/n100.r06.s004.untrimmed.sorted.bam" "n100.r06.s004_output/n100.r06.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s004_output/n100.r06.s004.untrimmed.sorted.bam" -b "n100.r06.s004_output/n100.r06.s004.primers.bed" -p "n100.r06.s004_output/n100.r06.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" "n100.r06.s004_output/n100.r06.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s004_output/n100.r06.s004.reference.fas" "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" > "n100.r06.s004_output/n100.r06.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s004_output/n100.r06.s004.reference.fas" --call-indels "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" > "n100.r06.s004_output/n100.r06.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" > "n100.r06.s004_output/n100.r06.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s004_output/n100.r06.s004.depth.txt" "n100.r06.s004_output/n100.r06.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s004_output/n100.r06.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s004_output/n100.r06.s004.reference.fas" | bcftools consensus -m "n100.r06.s004_output/n100.r06.s004.low_depth.tsv" tmp.vcf.gz > "n100.r06.s004_output/n100.r06.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task b76e0131 (flow bd79a373): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task b76e0131 (flow bd79a373): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s003.Main.out_file bd79a373 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s003.Main.out_file bd79a373 n100/r06/n100.r06.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:095c25c1010eee76e534c414e4327cbc914b745c0cbd05d654613592c5926021
	sha256:bd79a373b72595bf51ce0fbeeba912eab54d65828e6bc3a30e78c01ab48887d4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b76e0131f81ea61dbf8d71b4fc34a630b64b502a74c8d46481363020a2d474c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s003_output"
	    wget -O "n100.r06.s003_output/n100.r06.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s003_output/n100.r06.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s003_output/n100.r06.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s003_output/n100.r06.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s003_output/n100.r06.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s003_output/n100.r06.s003.reference.fas" "n100.r06.s003_output/n100.r06.s003.fq1.fastq" "n100.r06.s003_output/n100.r06.s003.fq2.fastq" | samtools view -bS - > "n100.r06.s003_output/n100.r06.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s003_output/n100.r06.s003.untrimmed.sorted.bam" "n100.r06.s003_output/n100.r06.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s003_output/n100.r06.s003.untrimmed.sorted.bam" -b "n100.r06.s003_output/n100.r06.s003.primers.bed" -p "n100.r06.s003_output/n100.r06.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" "n100.r06.s003_output/n100.r06.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s003_output/n100.r06.s003.reference.fas" "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" > "n100.r06.s003_output/n100.r06.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s003_output/n100.r06.s003.reference.fas" --call-indels "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" > "n100.r06.s003_output/n100.r06.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" > "n100.r06.s003_output/n100.r06.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s003_output/n100.r06.s003.depth.txt" "n100.r06.s003_output/n100.r06.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s003_output/n100.r06.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s003_output/n100.r06.s003.reference.fas" | bcftools consensus -m "n100.r06.s003_output/n100.r06.s003.low_depth.tsv" tmp.vcf.gz > "n100.r06.s003_output/n100.r06.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task 144f69b7 (flow 0a334aa8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task 144f69b7 (flow 0a334aa8): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s087.Main.out_file 0a334aa8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s087.Main.out_file 0a334aa8 n100/r06/n100.r06.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7f45eadb9766745a029268d7bd0255c73390529a7de332e3f3406db932d54d1a
	sha256:0a334aa871e42b0173c5fdf224fdee838c132c9f950a9d5067c255732f08a43f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/144f69b730cb47be77bc4c344d8db71d17d2eb5b9afebe096902ed2e216e55fd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s087_output"
	    wget -O "n100.r06.s087_output/n100.r06.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s087_output/n100.r06.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s087_output/n100.r06.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s087_output/n100.r06.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s087_output/n100.r06.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s087_output/n100.r06.s087.reference.fas" "n100.r06.s087_output/n100.r06.s087.fq1.fastq" "n100.r06.s087_output/n100.r06.s087.fq2.fastq" | samtools view -bS - > "n100.r06.s087_output/n100.r06.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s087_output/n100.r06.s087.untrimmed.sorted.bam" "n100.r06.s087_output/n100.r06.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s087_output/n100.r06.s087.untrimmed.sorted.bam" -b "n100.r06.s087_output/n100.r06.s087.primers.bed" -p "n100.r06.s087_output/n100.r06.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" "n100.r06.s087_output/n100.r06.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s087_output/n100.r06.s087.reference.fas" "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" > "n100.r06.s087_output/n100.r06.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s087_output/n100.r06.s087.reference.fas" --call-indels "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" > "n100.r06.s087_output/n100.r06.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" > "n100.r06.s087_output/n100.r06.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s087_output/n100.r06.s087.depth.txt" "n100.r06.s087_output/n100.r06.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s087_output/n100.r06.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s087_output/n100.r06.s087.reference.fas" | bcftools consensus -m "n100.r06.s087_output/n100.r06.s087.low_depth.tsv" tmp.vcf.gz > "n100.r06.s087_output/n100.r06.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task 35e0ee38 (flow 2337b222): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task 35e0ee38 (flow 2337b222): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s046.Main.out_file 2337b222 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s046.Main.out_file 2337b222 n100/r06/n100.r06.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bb8bac1036b9ad8a38a136b6a6325483d8a43f5da1ed51a882d31973a9603df2
	sha256:2337b222ff4364741f541290c5c42e46945d0668ea684526914920c05b4901f9
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/35e0ee38e989eeb3794fdd981b2b879bfd2e4043861f3d6bcdb1af91b1f47487
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s046_output"
	    wget -O "n100.r06.s046_output/n100.r06.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s046_output/n100.r06.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s046_output/n100.r06.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s046_output/n100.r06.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s046_output/n100.r06.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s046_output/n100.r06.s046.reference.fas" "n100.r06.s046_output/n100.r06.s046.fq1.fastq" "n100.r06.s046_output/n100.r06.s046.fq2.fastq" | samtools view -bS - > "n100.r06.s046_output/n100.r06.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s046_output/n100.r06.s046.untrimmed.sorted.bam" "n100.r06.s046_output/n100.r06.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s046_output/n100.r06.s046.untrimmed.sorted.bam" -b "n100.r06.s046_output/n100.r06.s046.primers.bed" -p "n100.r06.s046_output/n100.r06.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" "n100.r06.s046_output/n100.r06.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s046_output/n100.r06.s046.reference.fas" "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" > "n100.r06.s046_output/n100.r06.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s046_output/n100.r06.s046.reference.fas" --call-indels "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" > "n100.r06.s046_output/n100.r06.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" > "n100.r06.s046_output/n100.r06.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s046_output/n100.r06.s046.depth.txt" "n100.r06.s046_output/n100.r06.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s046_output/n100.r06.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s046_output/n100.r06.s046.reference.fas" | bcftools consensus -m "n100.r06.s046_output/n100.r06.s046.low_depth.tsv" tmp.vcf.gz > "n100.r06.s046_output/n100.r06.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task 415eac3c (flow 87851dc6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task 415eac3c (flow 87851dc6): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s055.Main.out_file 87851dc6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s055.Main.out_file 87851dc6 n100/r06/n100.r06.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d6e03a3f541e2785e7f46c0343df763569a545a071113268beed77d4477b3f45
	sha256:87851dc6863b4b368c1199a1d7db1588c794e0481b72b247f42a3346096d501f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/415eac3c996cb49a8255ff36bf36f994cc21ff03a23a831a084f2d0c46f74165
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s055_output"
	    wget -O "n100.r06.s055_output/n100.r06.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s055_output/n100.r06.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s055_output/n100.r06.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s055_output/n100.r06.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s055_output/n100.r06.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s055_output/n100.r06.s055.reference.fas" "n100.r06.s055_output/n100.r06.s055.fq1.fastq" "n100.r06.s055_output/n100.r06.s055.fq2.fastq" | samtools view -bS - > "n100.r06.s055_output/n100.r06.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s055_output/n100.r06.s055.untrimmed.sorted.bam" "n100.r06.s055_output/n100.r06.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s055_output/n100.r06.s055.untrimmed.sorted.bam" -b "n100.r06.s055_output/n100.r06.s055.primers.bed" -p "n100.r06.s055_output/n100.r06.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" "n100.r06.s055_output/n100.r06.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s055_output/n100.r06.s055.reference.fas" "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" > "n100.r06.s055_output/n100.r06.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s055_output/n100.r06.s055.reference.fas" --call-indels "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" > "n100.r06.s055_output/n100.r06.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" > "n100.r06.s055_output/n100.r06.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s055_output/n100.r06.s055.depth.txt" "n100.r06.s055_output/n100.r06.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s055_output/n100.r06.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s055_output/n100.r06.s055.reference.fas" | bcftools consensus -m "n100.r06.s055_output/n100.r06.s055.low_depth.tsv" tmp.vcf.gz > "n100.r06.s055_output/n100.r06.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task 22258bab (flow ff4d8244): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task 22258bab (flow ff4d8244): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s065.Main.out_file ff4d8244 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s065.Main.out_file ff4d8244 n100/r06/n100.r06.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:652c4a878c617e6ed91000e0f763e4fea61ab9715dba284790e39ea56e93e04f
	sha256:ff4d82440a2d303daeda50323d28c25aec1628040ab199df1f0209b405e10239
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/22258bab61e7a1cc8b1b24851b40515f7d1ccbd60993a9b87c069f751a72749d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s065_output"
	    wget -O "n100.r06.s065_output/n100.r06.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s065_output/n100.r06.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s065_output/n100.r06.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s065_output/n100.r06.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s065_output/n100.r06.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s065_output/n100.r06.s065.reference.fas" "n100.r06.s065_output/n100.r06.s065.fq1.fastq" "n100.r06.s065_output/n100.r06.s065.fq2.fastq" | samtools view -bS - > "n100.r06.s065_output/n100.r06.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s065_output/n100.r06.s065.untrimmed.sorted.bam" "n100.r06.s065_output/n100.r06.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s065_output/n100.r06.s065.untrimmed.sorted.bam" -b "n100.r06.s065_output/n100.r06.s065.primers.bed" -p "n100.r06.s065_output/n100.r06.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" "n100.r06.s065_output/n100.r06.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s065_output/n100.r06.s065.reference.fas" "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" > "n100.r06.s065_output/n100.r06.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s065_output/n100.r06.s065.reference.fas" --call-indels "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" > "n100.r06.s065_output/n100.r06.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" > "n100.r06.s065_output/n100.r06.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s065_output/n100.r06.s065.depth.txt" "n100.r06.s065_output/n100.r06.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s065_output/n100.r06.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s065_output/n100.r06.s065.reference.fas" | bcftools consensus -m "n100.r06.s065_output/n100.r06.s065.low_depth.tsv" tmp.vcf.gz > "n100.r06.s065_output/n100.r06.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task 3c99934a (flow 26782be1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task 3c99934a (flow 26782be1): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s049.Main.out_file 26782be1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s049.Main.out_file 26782be1 n100/r06/n100.r06.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dc6d9be7f98210fadd5118fb18c65b9c129a13b04204e1ba17d07c72b504c60b
	sha256:26782be19236a292d86f98bc58a9bd78025c2adc30895bdb62c81c179b9d6c34
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3c99934a8efbc2b192c70c327c1163329b250763cf70c37945b6c9f5a2a1aaf7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s049_output"
	    wget -O "n100.r06.s049_output/n100.r06.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s049_output/n100.r06.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s049_output/n100.r06.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s049_output/n100.r06.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s049_output/n100.r06.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s049_output/n100.r06.s049.reference.fas" "n100.r06.s049_output/n100.r06.s049.fq1.fastq" "n100.r06.s049_output/n100.r06.s049.fq2.fastq" | samtools view -bS - > "n100.r06.s049_output/n100.r06.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s049_output/n100.r06.s049.untrimmed.sorted.bam" "n100.r06.s049_output/n100.r06.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s049_output/n100.r06.s049.untrimmed.sorted.bam" -b "n100.r06.s049_output/n100.r06.s049.primers.bed" -p "n100.r06.s049_output/n100.r06.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" "n100.r06.s049_output/n100.r06.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s049_output/n100.r06.s049.reference.fas" "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" > "n100.r06.s049_output/n100.r06.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s049_output/n100.r06.s049.reference.fas" --call-indels "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" > "n100.r06.s049_output/n100.r06.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" > "n100.r06.s049_output/n100.r06.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s049_output/n100.r06.s049.depth.txt" "n100.r06.s049_output/n100.r06.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s049_output/n100.r06.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s049_output/n100.r06.s049.reference.fas" | bcftools consensus -m "n100.r06.s049_output/n100.r06.s049.low_depth.tsv" tmp.vcf.gz > "n100.r06.s049_output/n100.r06.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:33 scheduler task 6f2866a3 (flow 34528a24): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:33 scheduler task 6f2866a3 (flow 34528a24): waiting for completion (try 0): started
2021/07/08 17:06:33  ->  n100.r06.s053.Main.out_file 34528a24 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:33 n100.r06.s053.Main.out_file 34528a24 n100/r06/n100.r06.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2974836e1eafb0582b24954acdc7739c5421ca9394791b338575891ab2b30513
	sha256:34528a24d28df290d7f41b83618cfe7a43d9c97f04de33241e3d46e76bb5128e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f2866a343206b4841b21923761898f5fa718d0d45546e9928e192e47227e670
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s053_output"
	    wget -O "n100.r06.s053_output/n100.r06.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s053_output/n100.r06.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s053_output/n100.r06.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s053_output/n100.r06.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s053_output/n100.r06.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s053_output/n100.r06.s053.reference.fas" "n100.r06.s053_output/n100.r06.s053.fq1.fastq" "n100.r06.s053_output/n100.r06.s053.fq2.fastq" | samtools view -bS - > "n100.r06.s053_output/n100.r06.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s053_output/n100.r06.s053.untrimmed.sorted.bam" "n100.r06.s053_output/n100.r06.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s053_output/n100.r06.s053.untrimmed.sorted.bam" -b "n100.r06.s053_output/n100.r06.s053.primers.bed" -p "n100.r06.s053_output/n100.r06.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" "n100.r06.s053_output/n100.r06.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s053_output/n100.r06.s053.reference.fas" "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" > "n100.r06.s053_output/n100.r06.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s053_output/n100.r06.s053.reference.fas" --call-indels "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" > "n100.r06.s053_output/n100.r06.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" > "n100.r06.s053_output/n100.r06.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s053_output/n100.r06.s053.depth.txt" "n100.r06.s053_output/n100.r06.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s053_output/n100.r06.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s053_output/n100.r06.s053.reference.fas" | bcftools consensus -m "n100.r06.s053_output/n100.r06.s053.low_depth.tsv" tmp.vcf.gz > "n100.r06.s053_output/n100.r06.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:34 scheduler task 26eb79b8 (flow 58c2da81): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:34 scheduler task 13aceaad (flow 6791e387): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:34 scheduler task 26eb79b8 (flow 58c2da81): waiting for completion (try 0): started
2021/07/08 17:06:34  ->  n100.r06.s095.Main.out_file 58c2da81 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:34 n100.r06.s095.Main.out_file 58c2da81 n100/r06/n100.r06.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4d4a8f5f9147ab8213c4d87cb0665eaf745aeef5c52ea6a14584532d48ca8d44
	sha256:58c2da81fd6f0d6eb0d25d76da628e69cbfcfd4ec0432dd1dbf1be8fa9dfd802
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26eb79b8dae24b8711573081efc09e084c858f7c9138c00821dc63cddba8c6d8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s095_output"
	    wget -O "n100.r06.s095_output/n100.r06.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s095_output/n100.r06.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s095_output/n100.r06.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s095_output/n100.r06.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s095_output/n100.r06.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s095_output/n100.r06.s095.reference.fas" "n100.r06.s095_output/n100.r06.s095.fq1.fastq" "n100.r06.s095_output/n100.r06.s095.fq2.fastq" | samtools view -bS - > "n100.r06.s095_output/n100.r06.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s095_output/n100.r06.s095.untrimmed.sorted.bam" "n100.r06.s095_output/n100.r06.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s095_output/n100.r06.s095.untrimmed.sorted.bam" -b "n100.r06.s095_output/n100.r06.s095.primers.bed" -p "n100.r06.s095_output/n100.r06.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" "n100.r06.s095_output/n100.r06.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s095_output/n100.r06.s095.reference.fas" "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" > "n100.r06.s095_output/n100.r06.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s095_output/n100.r06.s095.reference.fas" --call-indels "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" > "n100.r06.s095_output/n100.r06.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" > "n100.r06.s095_output/n100.r06.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s095_output/n100.r06.s095.depth.txt" "n100.r06.s095_output/n100.r06.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s095_output/n100.r06.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s095_output/n100.r06.s095.reference.fas" | bcftools consensus -m "n100.r06.s095_output/n100.r06.s095.low_depth.tsv" tmp.vcf.gz > "n100.r06.s095_output/n100.r06.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:34 scheduler task 13aceaad (flow 6791e387): waiting for completion (try 0): started
2021/07/08 17:06:34  ->  n100.r06.s038.Main.out_file 6791e387 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:34 n100.r06.s038.Main.out_file 6791e387 n100/r06/n100.r06.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d41c075b97cf016ce22ef52946c4426dff18474e6faac1c6150a17de0a439ad6
	sha256:6791e38733e4cce63c1818c2b478624fd1cbb11e9bc24076c91392c02c4954f6
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13aceaadc7cfdb25a16054bee6d042a6452fad7c9a13e06fbdec83172dbc0316
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s038_output"
	    wget -O "n100.r06.s038_output/n100.r06.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s038_output/n100.r06.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s038_output/n100.r06.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s038_output/n100.r06.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s038_output/n100.r06.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s038_output/n100.r06.s038.reference.fas" "n100.r06.s038_output/n100.r06.s038.fq1.fastq" "n100.r06.s038_output/n100.r06.s038.fq2.fastq" | samtools view -bS - > "n100.r06.s038_output/n100.r06.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s038_output/n100.r06.s038.untrimmed.sorted.bam" "n100.r06.s038_output/n100.r06.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s038_output/n100.r06.s038.untrimmed.sorted.bam" -b "n100.r06.s038_output/n100.r06.s038.primers.bed" -p "n100.r06.s038_output/n100.r06.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" "n100.r06.s038_output/n100.r06.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s038_output/n100.r06.s038.reference.fas" "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" > "n100.r06.s038_output/n100.r06.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s038_output/n100.r06.s038.reference.fas" --call-indels "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" > "n100.r06.s038_output/n100.r06.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" > "n100.r06.s038_output/n100.r06.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s038_output/n100.r06.s038.depth.txt" "n100.r06.s038_output/n100.r06.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s038_output/n100.r06.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s038_output/n100.r06.s038.reference.fas" | bcftools consensus -m "n100.r06.s038_output/n100.r06.s038.low_depth.tsv" tmp.vcf.gz > "n100.r06.s038_output/n100.r06.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:34 scheduler task c3f45696 (flow d8bb6c45): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:34 scheduler task c3f45696 (flow d8bb6c45): waiting for completion (try 0): started
2021/07/08 17:06:34  ->  n100.r06.s090.Main.out_file d8bb6c45 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:34 n100.r06.s090.Main.out_file d8bb6c45 n100/r06/n100.r06.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bceace940ff681107e2150942470a9c20c6550e6cfbecf87790fb6f8f30f85d1
	sha256:d8bb6c456c42314d7316d9f63b8b7152e698e160b088f798eb32651e614b50a7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3f45696ab20255e11a68e7615fa981d9f63d76c8819a2db53cb12fbe2ab0624
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s090_output"
	    wget -O "n100.r06.s090_output/n100.r06.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s090_output/n100.r06.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s090_output/n100.r06.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s090_output/n100.r06.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s090_output/n100.r06.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s090_output/n100.r06.s090.reference.fas" "n100.r06.s090_output/n100.r06.s090.fq1.fastq" "n100.r06.s090_output/n100.r06.s090.fq2.fastq" | samtools view -bS - > "n100.r06.s090_output/n100.r06.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s090_output/n100.r06.s090.untrimmed.sorted.bam" "n100.r06.s090_output/n100.r06.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s090_output/n100.r06.s090.untrimmed.sorted.bam" -b "n100.r06.s090_output/n100.r06.s090.primers.bed" -p "n100.r06.s090_output/n100.r06.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" "n100.r06.s090_output/n100.r06.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s090_output/n100.r06.s090.reference.fas" "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" > "n100.r06.s090_output/n100.r06.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s090_output/n100.r06.s090.reference.fas" --call-indels "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" > "n100.r06.s090_output/n100.r06.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" > "n100.r06.s090_output/n100.r06.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s090_output/n100.r06.s090.depth.txt" "n100.r06.s090_output/n100.r06.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s090_output/n100.r06.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s090_output/n100.r06.s090.reference.fas" | bcftools consensus -m "n100.r06.s090_output/n100.r06.s090.low_depth.tsv" tmp.vcf.gz > "n100.r06.s090_output/n100.r06.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:34 scheduler task 625453dd (flow 0088c4ca): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:34 scheduler task 625453dd (flow 0088c4ca): waiting for completion (try 0): started
2021/07/08 17:06:34  ->  n100.r06.s034.Main.out_file 0088c4ca exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:34 n100.r06.s034.Main.out_file 0088c4ca n100/r06/n100.r06.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f28bb2915d607c1dc18d8f675bb3f8a8e2467c204d0a30aa31892c6be67317d4
	sha256:0088c4ca2916556aa36b443131d2b8e2dfc8cec34a6f0c2a2d2e7478b47bedf8
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/625453dd95b5440de36739dd8bb9aac4d36bf7a142e09f3b40bc774dec1265c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s034_output"
	    wget -O "n100.r06.s034_output/n100.r06.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s034_output/n100.r06.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s034_output/n100.r06.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s034_output/n100.r06.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s034_output/n100.r06.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s034_output/n100.r06.s034.reference.fas" "n100.r06.s034_output/n100.r06.s034.fq1.fastq" "n100.r06.s034_output/n100.r06.s034.fq2.fastq" | samtools view -bS - > "n100.r06.s034_output/n100.r06.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s034_output/n100.r06.s034.untrimmed.sorted.bam" "n100.r06.s034_output/n100.r06.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s034_output/n100.r06.s034.untrimmed.sorted.bam" -b "n100.r06.s034_output/n100.r06.s034.primers.bed" -p "n100.r06.s034_output/n100.r06.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" "n100.r06.s034_output/n100.r06.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s034_output/n100.r06.s034.reference.fas" "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" > "n100.r06.s034_output/n100.r06.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s034_output/n100.r06.s034.reference.fas" --call-indels "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" > "n100.r06.s034_output/n100.r06.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" > "n100.r06.s034_output/n100.r06.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s034_output/n100.r06.s034.depth.txt" "n100.r06.s034_output/n100.r06.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s034_output/n100.r06.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s034_output/n100.r06.s034.reference.fas" | bcftools consensus -m "n100.r06.s034_output/n100.r06.s034.low_depth.tsv" tmp.vcf.gz > "n100.r06.s034_output/n100.r06.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:34 scheduler task 53e9365d (flow b71a7073): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:34 scheduler task 53e9365d (flow b71a7073): waiting for completion (try 0): started
2021/07/08 17:06:34  ->  n100.r06.s066.Main.out_file b71a7073 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:34 n100.r06.s066.Main.out_file b71a7073 n100/r06/n100.r06.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6db2f449583e1376e7183f37c2272e776988b8ddec5714db465d7b9f397efd13
	sha256:b71a7073b095292dd67fc52e33840accdc7370d954a3b7e4c8b2bb8e3e73dcf7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/53e9365d1838fc142a7f3131c1ba6b89b5d6c3f59637788d52e163c0eb097b8d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s066_output"
	    wget -O "n100.r06.s066_output/n100.r06.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s066_output/n100.r06.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s066_output/n100.r06.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s066_output/n100.r06.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s066_output/n100.r06.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s066_output/n100.r06.s066.reference.fas" "n100.r06.s066_output/n100.r06.s066.fq1.fastq" "n100.r06.s066_output/n100.r06.s066.fq2.fastq" | samtools view -bS - > "n100.r06.s066_output/n100.r06.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s066_output/n100.r06.s066.untrimmed.sorted.bam" "n100.r06.s066_output/n100.r06.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s066_output/n100.r06.s066.untrimmed.sorted.bam" -b "n100.r06.s066_output/n100.r06.s066.primers.bed" -p "n100.r06.s066_output/n100.r06.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" "n100.r06.s066_output/n100.r06.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s066_output/n100.r06.s066.reference.fas" "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" > "n100.r06.s066_output/n100.r06.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s066_output/n100.r06.s066.reference.fas" --call-indels "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" > "n100.r06.s066_output/n100.r06.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" > "n100.r06.s066_output/n100.r06.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s066_output/n100.r06.s066.depth.txt" "n100.r06.s066_output/n100.r06.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s066_output/n100.r06.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s066_output/n100.r06.s066.reference.fas" | bcftools consensus -m "n100.r06.s066_output/n100.r06.s066.low_depth.tsv" tmp.vcf.gz > "n100.r06.s066_output/n100.r06.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:34 scheduler task fe380a87 (flow 1035b4db): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:34 scheduler task fe380a87 (flow 1035b4db): waiting for completion (try 0): started
2021/07/08 17:06:34  ->  n100.r06.s037.Main.out_file 1035b4db exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:34 n100.r06.s037.Main.out_file 1035b4db n100/r06/n100.r06.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c42ec9fdba8c3c05bf6d37674ed40422ee8de4a4064c955fd9dda725d9e9ed60
	sha256:1035b4db94ca396fe9cffd4c89755cde4ed072062d9d075296926f81afc7865a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fe380a871289547655ed05aead1db05f69f94cc9ae6c3c209679031833f693b5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s037_output"
	    wget -O "n100.r06.s037_output/n100.r06.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s037_output/n100.r06.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s037_output/n100.r06.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s037_output/n100.r06.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s037_output/n100.r06.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s037_output/n100.r06.s037.reference.fas" "n100.r06.s037_output/n100.r06.s037.fq1.fastq" "n100.r06.s037_output/n100.r06.s037.fq2.fastq" | samtools view -bS - > "n100.r06.s037_output/n100.r06.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s037_output/n100.r06.s037.untrimmed.sorted.bam" "n100.r06.s037_output/n100.r06.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s037_output/n100.r06.s037.untrimmed.sorted.bam" -b "n100.r06.s037_output/n100.r06.s037.primers.bed" -p "n100.r06.s037_output/n100.r06.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" "n100.r06.s037_output/n100.r06.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s037_output/n100.r06.s037.reference.fas" "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" > "n100.r06.s037_output/n100.r06.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s037_output/n100.r06.s037.reference.fas" --call-indels "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" > "n100.r06.s037_output/n100.r06.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" > "n100.r06.s037_output/n100.r06.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s037_output/n100.r06.s037.depth.txt" "n100.r06.s037_output/n100.r06.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s037_output/n100.r06.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s037_output/n100.r06.s037.reference.fas" | bcftools consensus -m "n100.r06.s037_output/n100.r06.s037.low_depth.tsv" tmp.vcf.gz > "n100.r06.s037_output/n100.r06.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:35 scheduler task d21f287b (flow ba80dc65): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:35 scheduler task d21f287b (flow ba80dc65): waiting for completion (try 0): started
2021/07/08 17:06:35  ->  n100.r06.s026.Main.out_file ba80dc65 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:35 n100.r06.s026.Main.out_file ba80dc65 n100/r06/n100.r06.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d11e03d08ec0d948f8e678fd4ed78a1c5e1440e3a6d2cacc4fc5d0cc242624d
	sha256:ba80dc6520970a3c23fa472e1d46a572d6cd3327b4f488d32beb177892000228
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d21f287b9617b4e6f2da9aef67d3c93dfe23c026f4b00908e6c187a7149602d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s026_output"
	    wget -O "n100.r06.s026_output/n100.r06.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s026_output/n100.r06.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s026_output/n100.r06.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s026_output/n100.r06.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s026_output/n100.r06.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s026_output/n100.r06.s026.reference.fas" "n100.r06.s026_output/n100.r06.s026.fq1.fastq" "n100.r06.s026_output/n100.r06.s026.fq2.fastq" | samtools view -bS - > "n100.r06.s026_output/n100.r06.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s026_output/n100.r06.s026.untrimmed.sorted.bam" "n100.r06.s026_output/n100.r06.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s026_output/n100.r06.s026.untrimmed.sorted.bam" -b "n100.r06.s026_output/n100.r06.s026.primers.bed" -p "n100.r06.s026_output/n100.r06.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" "n100.r06.s026_output/n100.r06.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s026_output/n100.r06.s026.reference.fas" "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" > "n100.r06.s026_output/n100.r06.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s026_output/n100.r06.s026.reference.fas" --call-indels "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" > "n100.r06.s026_output/n100.r06.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" > "n100.r06.s026_output/n100.r06.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s026_output/n100.r06.s026.depth.txt" "n100.r06.s026_output/n100.r06.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s026_output/n100.r06.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s026_output/n100.r06.s026.reference.fas" | bcftools consensus -m "n100.r06.s026_output/n100.r06.s026.low_depth.tsv" tmp.vcf.gz > "n100.r06.s026_output/n100.r06.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:35 scheduler task 9c55a004 (flow 64a26024): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:35 scheduler task 9c55a004 (flow 64a26024): waiting for completion (try 0): started
2021/07/08 17:06:35  ->  n100.r06.s032.Main.out_file 64a26024 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:35 n100.r06.s032.Main.out_file 64a26024 n100/r06/n100.r06.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42d3e824030a1f70cde713386244538fa9e9ffcd1d64cababe9070db1dc3f7dd
	sha256:64a260249ef060e0ddf67426e666751f727916f1d0f5f9cfb98c54ef8c8f9f75
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9c55a004e9b832483fdb000f1daa75a98ab23e0fec4ce0feb00f6d26bb5ac72f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s032_output"
	    wget -O "n100.r06.s032_output/n100.r06.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s032_output/n100.r06.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s032_output/n100.r06.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s032_output/n100.r06.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s032_output/n100.r06.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s032_output/n100.r06.s032.reference.fas" "n100.r06.s032_output/n100.r06.s032.fq1.fastq" "n100.r06.s032_output/n100.r06.s032.fq2.fastq" | samtools view -bS - > "n100.r06.s032_output/n100.r06.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s032_output/n100.r06.s032.untrimmed.sorted.bam" "n100.r06.s032_output/n100.r06.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s032_output/n100.r06.s032.untrimmed.sorted.bam" -b "n100.r06.s032_output/n100.r06.s032.primers.bed" -p "n100.r06.s032_output/n100.r06.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" "n100.r06.s032_output/n100.r06.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s032_output/n100.r06.s032.reference.fas" "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" > "n100.r06.s032_output/n100.r06.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s032_output/n100.r06.s032.reference.fas" --call-indels "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" > "n100.r06.s032_output/n100.r06.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" > "n100.r06.s032_output/n100.r06.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s032_output/n100.r06.s032.depth.txt" "n100.r06.s032_output/n100.r06.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s032_output/n100.r06.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s032_output/n100.r06.s032.reference.fas" | bcftools consensus -m "n100.r06.s032_output/n100.r06.s032.low_depth.tsv" tmp.vcf.gz > "n100.r06.s032_output/n100.r06.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:35 scheduler task 07200e78 (flow 8e2cdc8e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:35 scheduler task 07200e78 (flow 8e2cdc8e): waiting for completion (try 0): started
2021/07/08 17:06:35  ->  n100.r06.s048.Main.out_file 8e2cdc8e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:35 n100.r06.s048.Main.out_file 8e2cdc8e n100/r06/n100.r06.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:01eefd3168f386477dcba9e88f9ef1deef56c365df80b7d536390d7f691ff62f
	sha256:8e2cdc8e6a8b959cf78efdb5b592305d0953dc4fd6114ba0e8726647618f07a3
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/07200e78bb8b1f9d4ca2a8c4450d0fe9d353bf9383979df2c83b270517a8a26e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s048_output"
	    wget -O "n100.r06.s048_output/n100.r06.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s048_output/n100.r06.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s048_output/n100.r06.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s048_output/n100.r06.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s048_output/n100.r06.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s048_output/n100.r06.s048.reference.fas" "n100.r06.s048_output/n100.r06.s048.fq1.fastq" "n100.r06.s048_output/n100.r06.s048.fq2.fastq" | samtools view -bS - > "n100.r06.s048_output/n100.r06.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s048_output/n100.r06.s048.untrimmed.sorted.bam" "n100.r06.s048_output/n100.r06.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s048_output/n100.r06.s048.untrimmed.sorted.bam" -b "n100.r06.s048_output/n100.r06.s048.primers.bed" -p "n100.r06.s048_output/n100.r06.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" "n100.r06.s048_output/n100.r06.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s048_output/n100.r06.s048.reference.fas" "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" > "n100.r06.s048_output/n100.r06.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s048_output/n100.r06.s048.reference.fas" --call-indels "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" > "n100.r06.s048_output/n100.r06.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" > "n100.r06.s048_output/n100.r06.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s048_output/n100.r06.s048.depth.txt" "n100.r06.s048_output/n100.r06.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s048_output/n100.r06.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s048_output/n100.r06.s048.reference.fas" | bcftools consensus -m "n100.r06.s048_output/n100.r06.s048.low_depth.tsv" tmp.vcf.gz > "n100.r06.s048_output/n100.r06.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:35 scheduler task fbc799bb (flow 54a753f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:35 scheduler task fbc799bb (flow 54a753f3): waiting for completion (try 0): started
2021/07/08 17:06:35  ->  n100.r06.s044.Main.out_file 54a753f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:35 n100.r06.s044.Main.out_file 54a753f3 n100/r06/n100.r06.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:446cafbe46cfca853f2a86268df8632dcbb1a02b4256f8e210f1b38be17d4801
	sha256:54a753f3e89b31f36ab34da46bc417920d2dffc274585d620968bc8c71a78fff
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fbc799bbc803f67b0d59f07bbfdb0f8f2ee4e8aeeae8a7e7dd4ee9dc1b1126c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s044_output"
	    wget -O "n100.r06.s044_output/n100.r06.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s044_output/n100.r06.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s044_output/n100.r06.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s044_output/n100.r06.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s044_output/n100.r06.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s044_output/n100.r06.s044.reference.fas" "n100.r06.s044_output/n100.r06.s044.fq1.fastq" "n100.r06.s044_output/n100.r06.s044.fq2.fastq" | samtools view -bS - > "n100.r06.s044_output/n100.r06.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s044_output/n100.r06.s044.untrimmed.sorted.bam" "n100.r06.s044_output/n100.r06.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s044_output/n100.r06.s044.untrimmed.sorted.bam" -b "n100.r06.s044_output/n100.r06.s044.primers.bed" -p "n100.r06.s044_output/n100.r06.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" "n100.r06.s044_output/n100.r06.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s044_output/n100.r06.s044.reference.fas" "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" > "n100.r06.s044_output/n100.r06.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s044_output/n100.r06.s044.reference.fas" --call-indels "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" > "n100.r06.s044_output/n100.r06.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" > "n100.r06.s044_output/n100.r06.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s044_output/n100.r06.s044.depth.txt" "n100.r06.s044_output/n100.r06.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s044_output/n100.r06.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s044_output/n100.r06.s044.reference.fas" | bcftools consensus -m "n100.r06.s044_output/n100.r06.s044.low_depth.tsv" tmp.vcf.gz > "n100.r06.s044_output/n100.r06.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:35 scheduler task f2651734 (flow c09542e4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:35 scheduler task f2651734 (flow c09542e4): waiting for completion (try 0): started
2021/07/08 17:06:35  ->  n100.r06.s097.Main.out_file c09542e4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:35 n100.r06.s097.Main.out_file c09542e4 n100/r06/n100.r06.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:83d8d888a2d057c4962c2de5c19b96848160d1aa23b078d279b1975487b80562
	sha256:c09542e49ea3b5352b8969ac0a06796aaa3950ae3ce4917448e755c96c71c037
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2651734d029e52816067c006b6cbe2f262e7e02734e3a05c7397eef6cef48eb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s097_output"
	    wget -O "n100.r06.s097_output/n100.r06.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s097_output/n100.r06.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s097_output/n100.r06.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s097_output/n100.r06.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s097_output/n100.r06.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s097_output/n100.r06.s097.reference.fas" "n100.r06.s097_output/n100.r06.s097.fq1.fastq" "n100.r06.s097_output/n100.r06.s097.fq2.fastq" | samtools view -bS - > "n100.r06.s097_output/n100.r06.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s097_output/n100.r06.s097.untrimmed.sorted.bam" "n100.r06.s097_output/n100.r06.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s097_output/n100.r06.s097.untrimmed.sorted.bam" -b "n100.r06.s097_output/n100.r06.s097.primers.bed" -p "n100.r06.s097_output/n100.r06.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" "n100.r06.s097_output/n100.r06.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s097_output/n100.r06.s097.reference.fas" "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" > "n100.r06.s097_output/n100.r06.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s097_output/n100.r06.s097.reference.fas" --call-indels "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" > "n100.r06.s097_output/n100.r06.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" > "n100.r06.s097_output/n100.r06.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s097_output/n100.r06.s097.depth.txt" "n100.r06.s097_output/n100.r06.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s097_output/n100.r06.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s097_output/n100.r06.s097.reference.fas" | bcftools consensus -m "n100.r06.s097_output/n100.r06.s097.low_depth.tsv" tmp.vcf.gz > "n100.r06.s097_output/n100.r06.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:35 scheduler task 0d8b3e97 (flow ec2e1134): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:35 scheduler task 0d8b3e97 (flow ec2e1134): waiting for completion (try 0): started
2021/07/08 17:06:35  ->  n100.r06.s057.Main.out_file ec2e1134 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:35 n100.r06.s057.Main.out_file ec2e1134 n100/r06/n100.r06.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db6743a78974d0ae63845a6e9d0bf1d2eb1eacab6dc50d83858a6ccdae74e93c
	sha256:ec2e11343170f79ba719cadecc0bc4bc204f79420bc1f8b896cd54af1b7f60c4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d8b3e97c5ba136b6a89bfc3cdfc1baa98d0b5190168bea385b649b504d30773
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s057_output"
	    wget -O "n100.r06.s057_output/n100.r06.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s057_output/n100.r06.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s057_output/n100.r06.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s057_output/n100.r06.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s057_output/n100.r06.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s057_output/n100.r06.s057.reference.fas" "n100.r06.s057_output/n100.r06.s057.fq1.fastq" "n100.r06.s057_output/n100.r06.s057.fq2.fastq" | samtools view -bS - > "n100.r06.s057_output/n100.r06.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s057_output/n100.r06.s057.untrimmed.sorted.bam" "n100.r06.s057_output/n100.r06.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s057_output/n100.r06.s057.untrimmed.sorted.bam" -b "n100.r06.s057_output/n100.r06.s057.primers.bed" -p "n100.r06.s057_output/n100.r06.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" "n100.r06.s057_output/n100.r06.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s057_output/n100.r06.s057.reference.fas" "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" > "n100.r06.s057_output/n100.r06.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s057_output/n100.r06.s057.reference.fas" --call-indels "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" > "n100.r06.s057_output/n100.r06.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" > "n100.r06.s057_output/n100.r06.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s057_output/n100.r06.s057.depth.txt" "n100.r06.s057_output/n100.r06.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s057_output/n100.r06.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s057_output/n100.r06.s057.reference.fas" | bcftools consensus -m "n100.r06.s057_output/n100.r06.s057.low_depth.tsv" tmp.vcf.gz > "n100.r06.s057_output/n100.r06.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:36 scheduler task 95bbbc50 (flow 080658ce): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:36 scheduler task 95bbbc50 (flow 080658ce): waiting for completion (try 0): started
2021/07/08 17:06:36  ->  n100.r06.s071.Main.out_file 080658ce exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:36 n100.r06.s071.Main.out_file 080658ce n100/r06/n100.r06.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2121952f16ba00682ebf1cdb9c0449070f519ff5b1cf40e9b5eaf78de807f1a4
	sha256:080658ce5ab85f6627d15d2012894718c14fbad95b0af2ca3c5b2bd93b59c4bc
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95bbbc500dc18543daff915a3f2ff79b55b38768bec08d4614d15748a7698085
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s071_output"
	    wget -O "n100.r06.s071_output/n100.r06.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s071_output/n100.r06.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s071_output/n100.r06.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s071_output/n100.r06.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s071_output/n100.r06.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s071_output/n100.r06.s071.reference.fas" "n100.r06.s071_output/n100.r06.s071.fq1.fastq" "n100.r06.s071_output/n100.r06.s071.fq2.fastq" | samtools view -bS - > "n100.r06.s071_output/n100.r06.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s071_output/n100.r06.s071.untrimmed.sorted.bam" "n100.r06.s071_output/n100.r06.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s071_output/n100.r06.s071.untrimmed.sorted.bam" -b "n100.r06.s071_output/n100.r06.s071.primers.bed" -p "n100.r06.s071_output/n100.r06.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" "n100.r06.s071_output/n100.r06.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s071_output/n100.r06.s071.reference.fas" "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" > "n100.r06.s071_output/n100.r06.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s071_output/n100.r06.s071.reference.fas" --call-indels "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" > "n100.r06.s071_output/n100.r06.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" > "n100.r06.s071_output/n100.r06.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s071_output/n100.r06.s071.depth.txt" "n100.r06.s071_output/n100.r06.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s071_output/n100.r06.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s071_output/n100.r06.s071.reference.fas" | bcftools consensus -m "n100.r06.s071_output/n100.r06.s071.low_depth.tsv" tmp.vcf.gz > "n100.r06.s071_output/n100.r06.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:36 scheduler task 14aa39a0 (flow 96cae92b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:36 scheduler task 14aa39a0 (flow 96cae92b): waiting for completion (try 0): started
2021/07/08 17:06:36  ->  n100.r06.s029.Main.out_file 96cae92b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:36 n100.r06.s029.Main.out_file 96cae92b n100/r06/n100.r06.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b4e759e8c083cc18f4677dedf52f75549084978a6e9a1ae49b8939e9c8d955be
	sha256:96cae92bf93a2dc7e9ac68f075e69771a1ddff8e9fa59f423b121bbfe2689035
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/14aa39a09ff023a38c2bbb1d4b1f8cd30781ce2f0d255d361c13dc07e8800bc8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s029_output"
	    wget -O "n100.r06.s029_output/n100.r06.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s029_output/n100.r06.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s029_output/n100.r06.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s029_output/n100.r06.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s029_output/n100.r06.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s029_output/n100.r06.s029.reference.fas" "n100.r06.s029_output/n100.r06.s029.fq1.fastq" "n100.r06.s029_output/n100.r06.s029.fq2.fastq" | samtools view -bS - > "n100.r06.s029_output/n100.r06.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s029_output/n100.r06.s029.untrimmed.sorted.bam" "n100.r06.s029_output/n100.r06.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s029_output/n100.r06.s029.untrimmed.sorted.bam" -b "n100.r06.s029_output/n100.r06.s029.primers.bed" -p "n100.r06.s029_output/n100.r06.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" "n100.r06.s029_output/n100.r06.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s029_output/n100.r06.s029.reference.fas" "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" > "n100.r06.s029_output/n100.r06.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s029_output/n100.r06.s029.reference.fas" --call-indels "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" > "n100.r06.s029_output/n100.r06.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" > "n100.r06.s029_output/n100.r06.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s029_output/n100.r06.s029.depth.txt" "n100.r06.s029_output/n100.r06.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s029_output/n100.r06.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s029_output/n100.r06.s029.reference.fas" | bcftools consensus -m "n100.r06.s029_output/n100.r06.s029.low_depth.tsv" tmp.vcf.gz > "n100.r06.s029_output/n100.r06.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:36 scheduler task f8875ac4 (flow bd36172d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:36 scheduler task f8875ac4 (flow bd36172d): waiting for completion (try 0): started
2021/07/08 17:06:36  ->  n100.r06.s061.Main.out_file bd36172d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:36 n100.r06.s061.Main.out_file bd36172d n100/r06/n100.r06.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d5485e3ccd4855ba8b749588f5060c6d113db72ee35b86505bb23ff8dc7bb143
	sha256:bd36172df6f68b26b21de4a5dc37a5ec9b89b0a9b1773bd5ee1143e5f34bfb1b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f8875ac4d4bd26ca2f13a8156584dae4643d6ed380b4e393a658d1a661aa8960
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s061_output"
	    wget -O "n100.r06.s061_output/n100.r06.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s061_output/n100.r06.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s061_output/n100.r06.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s061_output/n100.r06.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s061_output/n100.r06.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s061_output/n100.r06.s061.reference.fas" "n100.r06.s061_output/n100.r06.s061.fq1.fastq" "n100.r06.s061_output/n100.r06.s061.fq2.fastq" | samtools view -bS - > "n100.r06.s061_output/n100.r06.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s061_output/n100.r06.s061.untrimmed.sorted.bam" "n100.r06.s061_output/n100.r06.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s061_output/n100.r06.s061.untrimmed.sorted.bam" -b "n100.r06.s061_output/n100.r06.s061.primers.bed" -p "n100.r06.s061_output/n100.r06.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" "n100.r06.s061_output/n100.r06.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s061_output/n100.r06.s061.reference.fas" "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" > "n100.r06.s061_output/n100.r06.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s061_output/n100.r06.s061.reference.fas" --call-indels "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" > "n100.r06.s061_output/n100.r06.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" > "n100.r06.s061_output/n100.r06.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s061_output/n100.r06.s061.depth.txt" "n100.r06.s061_output/n100.r06.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s061_output/n100.r06.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s061_output/n100.r06.s061.reference.fas" | bcftools consensus -m "n100.r06.s061_output/n100.r06.s061.low_depth.tsv" tmp.vcf.gz > "n100.r06.s061_output/n100.r06.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:36 scheduler task b9606491 (flow f9a07ecc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:36 scheduler task b9606491 (flow f9a07ecc): waiting for completion (try 0): started
2021/07/08 17:06:36  ->  n100.r06.s022.Main.out_file f9a07ecc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:36 n100.r06.s022.Main.out_file f9a07ecc n100/r06/n100.r06.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2bbd4ff0ada3b6fe002b6de2dd577988f9e03e51da316ad30527fb35f6858edd
	sha256:f9a07ecc49d856a27fa9a86f2172f9e708406b5e6355b1b16df7c33b350540db
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b9606491ba584898a48e66597dbf76fa3109b8ca700e4fd3a5baa44f37f2b2d0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s022_output"
	    wget -O "n100.r06.s022_output/n100.r06.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s022_output/n100.r06.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s022_output/n100.r06.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s022_output/n100.r06.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s022_output/n100.r06.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s022_output/n100.r06.s022.reference.fas" "n100.r06.s022_output/n100.r06.s022.fq1.fastq" "n100.r06.s022_output/n100.r06.s022.fq2.fastq" | samtools view -bS - > "n100.r06.s022_output/n100.r06.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s022_output/n100.r06.s022.untrimmed.sorted.bam" "n100.r06.s022_output/n100.r06.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s022_output/n100.r06.s022.untrimmed.sorted.bam" -b "n100.r06.s022_output/n100.r06.s022.primers.bed" -p "n100.r06.s022_output/n100.r06.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" "n100.r06.s022_output/n100.r06.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s022_output/n100.r06.s022.reference.fas" "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" > "n100.r06.s022_output/n100.r06.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s022_output/n100.r06.s022.reference.fas" --call-indels "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" > "n100.r06.s022_output/n100.r06.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" > "n100.r06.s022_output/n100.r06.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s022_output/n100.r06.s022.depth.txt" "n100.r06.s022_output/n100.r06.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s022_output/n100.r06.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s022_output/n100.r06.s022.reference.fas" | bcftools consensus -m "n100.r06.s022_output/n100.r06.s022.low_depth.tsv" tmp.vcf.gz > "n100.r06.s022_output/n100.r06.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:36 scheduler task 8f12579b (flow 7b5b3afb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:36 scheduler task 8f12579b (flow 7b5b3afb): waiting for completion (try 0): started
2021/07/08 17:06:36  ->  n100.r06.s050.Main.out_file 7b5b3afb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:36 n100.r06.s050.Main.out_file 7b5b3afb n100/r06/n100.r06.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:17162145dd3a76885ea7eed8c46151a7d22be93ba1a4bf072ba3cb71545739b7
	sha256:7b5b3afb30e35193fe5a60b1808f62c92b0c78d3224d812d9393d8b9bc84c04e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f12579baf3d551420e54e23486a06e7f24c52daeacae9953277bcf89f24c1cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s050_output"
	    wget -O "n100.r06.s050_output/n100.r06.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s050_output/n100.r06.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s050_output/n100.r06.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s050_output/n100.r06.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s050_output/n100.r06.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s050_output/n100.r06.s050.reference.fas" "n100.r06.s050_output/n100.r06.s050.fq1.fastq" "n100.r06.s050_output/n100.r06.s050.fq2.fastq" | samtools view -bS - > "n100.r06.s050_output/n100.r06.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s050_output/n100.r06.s050.untrimmed.sorted.bam" "n100.r06.s050_output/n100.r06.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s050_output/n100.r06.s050.untrimmed.sorted.bam" -b "n100.r06.s050_output/n100.r06.s050.primers.bed" -p "n100.r06.s050_output/n100.r06.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" "n100.r06.s050_output/n100.r06.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s050_output/n100.r06.s050.reference.fas" "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" > "n100.r06.s050_output/n100.r06.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s050_output/n100.r06.s050.reference.fas" --call-indels "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" > "n100.r06.s050_output/n100.r06.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" > "n100.r06.s050_output/n100.r06.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s050_output/n100.r06.s050.depth.txt" "n100.r06.s050_output/n100.r06.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s050_output/n100.r06.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s050_output/n100.r06.s050.reference.fas" | bcftools consensus -m "n100.r06.s050_output/n100.r06.s050.low_depth.tsv" tmp.vcf.gz > "n100.r06.s050_output/n100.r06.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:36 scheduler task 4947ed18 (flow 75ab46a8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:36 scheduler task 4947ed18 (flow 75ab46a8): waiting for completion (try 0): started
2021/07/08 17:06:36  ->  n100.r06.s081.Main.out_file 75ab46a8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:36 n100.r06.s081.Main.out_file 75ab46a8 n100/r06/n100.r06.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4393d21f5197b12451ea20fbb4ee09e3d0b28aea835de267b357225af758b93f
	sha256:75ab46a896bd477dd6e98a54ad80c28975cdd1a530d3bec20f888b7a4cd4a79b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4947ed1874c0015f9dd8cd3d949229f50ea51ab55bebfff3189aaf00c2a0b7a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s081_output"
	    wget -O "n100.r06.s081_output/n100.r06.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s081_output/n100.r06.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s081_output/n100.r06.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s081_output/n100.r06.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s081_output/n100.r06.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s081_output/n100.r06.s081.reference.fas" "n100.r06.s081_output/n100.r06.s081.fq1.fastq" "n100.r06.s081_output/n100.r06.s081.fq2.fastq" | samtools view -bS - > "n100.r06.s081_output/n100.r06.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s081_output/n100.r06.s081.untrimmed.sorted.bam" "n100.r06.s081_output/n100.r06.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s081_output/n100.r06.s081.untrimmed.sorted.bam" -b "n100.r06.s081_output/n100.r06.s081.primers.bed" -p "n100.r06.s081_output/n100.r06.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" "n100.r06.s081_output/n100.r06.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s081_output/n100.r06.s081.reference.fas" "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" > "n100.r06.s081_output/n100.r06.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s081_output/n100.r06.s081.reference.fas" --call-indels "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" > "n100.r06.s081_output/n100.r06.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" > "n100.r06.s081_output/n100.r06.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s081_output/n100.r06.s081.depth.txt" "n100.r06.s081_output/n100.r06.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s081_output/n100.r06.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s081_output/n100.r06.s081.reference.fas" | bcftools consensus -m "n100.r06.s081_output/n100.r06.s081.low_depth.tsv" tmp.vcf.gz > "n100.r06.s081_output/n100.r06.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:37 scheduler task aef1ea0c (flow d7bcee4f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:37 scheduler task aef1ea0c (flow d7bcee4f): waiting for completion (try 0): started
2021/07/08 17:06:37  ->  n100.r06.s001.Main.out_file d7bcee4f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:37 n100.r06.s001.Main.out_file d7bcee4f n100/r06/n100.r06.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:683bb0c84d241236f3537f183d340ae8b75cc505d19b6bb72c27439650fcf6a6
	sha256:d7bcee4fda3b05ca94ad5fc04427ab6ee9d44bae6dd2ddd2519533bb5fef6100
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aef1ea0ce75cc4d14eb79b1178b007c550d5cf31c7e1c8baccee0bd96549a228
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s001_output"
	    wget -O "n100.r06.s001_output/n100.r06.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s001_output/n100.r06.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s001_output/n100.r06.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s001_output/n100.r06.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s001_output/n100.r06.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s001_output/n100.r06.s001.reference.fas" "n100.r06.s001_output/n100.r06.s001.fq1.fastq" "n100.r06.s001_output/n100.r06.s001.fq2.fastq" | samtools view -bS - > "n100.r06.s001_output/n100.r06.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s001_output/n100.r06.s001.untrimmed.sorted.bam" "n100.r06.s001_output/n100.r06.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s001_output/n100.r06.s001.untrimmed.sorted.bam" -b "n100.r06.s001_output/n100.r06.s001.primers.bed" -p "n100.r06.s001_output/n100.r06.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" "n100.r06.s001_output/n100.r06.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s001_output/n100.r06.s001.reference.fas" "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" > "n100.r06.s001_output/n100.r06.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s001_output/n100.r06.s001.reference.fas" --call-indels "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" > "n100.r06.s001_output/n100.r06.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" > "n100.r06.s001_output/n100.r06.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s001_output/n100.r06.s001.depth.txt" "n100.r06.s001_output/n100.r06.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s001_output/n100.r06.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s001_output/n100.r06.s001.reference.fas" | bcftools consensus -m "n100.r06.s001_output/n100.r06.s001.low_depth.tsv" tmp.vcf.gz > "n100.r06.s001_output/n100.r06.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:37 scheduler task 5e093f54 (flow 2ab40335): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:37 scheduler task 5e093f54 (flow 2ab40335): waiting for completion (try 0): started
2021/07/08 17:06:37  ->  n100.r06.s041.Main.out_file 2ab40335 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:37 n100.r06.s041.Main.out_file 2ab40335 n100/r06/n100.r06.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ec52098cb21bebc2e82a2b9cfb38b87c2afa943538ff23521cc2c8be2be26aaa
	sha256:2ab40335b4e4dab2544a30eacc567c78df07a893a101a0f6b0ccac9e4355fbd6
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5e093f54e0b4841342f4e3bde7e45f4d37261ef33394aa09466878f869f8db6c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s041_output"
	    wget -O "n100.r06.s041_output/n100.r06.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s041_output/n100.r06.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s041_output/n100.r06.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s041_output/n100.r06.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s041_output/n100.r06.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s041_output/n100.r06.s041.reference.fas" "n100.r06.s041_output/n100.r06.s041.fq1.fastq" "n100.r06.s041_output/n100.r06.s041.fq2.fastq" | samtools view -bS - > "n100.r06.s041_output/n100.r06.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s041_output/n100.r06.s041.untrimmed.sorted.bam" "n100.r06.s041_output/n100.r06.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s041_output/n100.r06.s041.untrimmed.sorted.bam" -b "n100.r06.s041_output/n100.r06.s041.primers.bed" -p "n100.r06.s041_output/n100.r06.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" "n100.r06.s041_output/n100.r06.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s041_output/n100.r06.s041.reference.fas" "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" > "n100.r06.s041_output/n100.r06.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s041_output/n100.r06.s041.reference.fas" --call-indels "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" > "n100.r06.s041_output/n100.r06.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" > "n100.r06.s041_output/n100.r06.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s041_output/n100.r06.s041.depth.txt" "n100.r06.s041_output/n100.r06.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s041_output/n100.r06.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s041_output/n100.r06.s041.reference.fas" | bcftools consensus -m "n100.r06.s041_output/n100.r06.s041.low_depth.tsv" tmp.vcf.gz > "n100.r06.s041_output/n100.r06.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:37 scheduler task 90258421 (flow 4b4267c3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:37 scheduler task 90258421 (flow 4b4267c3): waiting for completion (try 0): started
2021/07/08 17:06:37  ->  n100.r06.s068.Main.out_file 4b4267c3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:37 n100.r06.s068.Main.out_file 4b4267c3 n100/r06/n100.r06.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4e6db93ce21c283bd365fff0b5d6ae5a0193d8c4125f691717e03339f9a41e6b
	sha256:4b4267c3eccfe0bf11e99db59b0485a9c2d372afb4c096a94a68f2eace653d61
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/90258421bea61e27e06da8ab7827652e9f2e2c18fe5e92bdca87d163b10be952
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s068_output"
	    wget -O "n100.r06.s068_output/n100.r06.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s068_output/n100.r06.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s068_output/n100.r06.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s068_output/n100.r06.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s068_output/n100.r06.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s068_output/n100.r06.s068.reference.fas" "n100.r06.s068_output/n100.r06.s068.fq1.fastq" "n100.r06.s068_output/n100.r06.s068.fq2.fastq" | samtools view -bS - > "n100.r06.s068_output/n100.r06.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s068_output/n100.r06.s068.untrimmed.sorted.bam" "n100.r06.s068_output/n100.r06.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s068_output/n100.r06.s068.untrimmed.sorted.bam" -b "n100.r06.s068_output/n100.r06.s068.primers.bed" -p "n100.r06.s068_output/n100.r06.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" "n100.r06.s068_output/n100.r06.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s068_output/n100.r06.s068.reference.fas" "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" > "n100.r06.s068_output/n100.r06.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s068_output/n100.r06.s068.reference.fas" --call-indels "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" > "n100.r06.s068_output/n100.r06.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" > "n100.r06.s068_output/n100.r06.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s068_output/n100.r06.s068.depth.txt" "n100.r06.s068_output/n100.r06.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s068_output/n100.r06.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s068_output/n100.r06.s068.reference.fas" | bcftools consensus -m "n100.r06.s068_output/n100.r06.s068.low_depth.tsv" tmp.vcf.gz > "n100.r06.s068_output/n100.r06.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:37 scheduler task 1116b1ea (flow 0f8df37c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:37 scheduler task 1116b1ea (flow 0f8df37c): waiting for completion (try 0): started
2021/07/08 17:06:37  ->  n100.r06.s078.Main.out_file 0f8df37c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:37 n100.r06.s078.Main.out_file 0f8df37c n100/r06/n100.r06.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1cf04e5adfacc3b8a006c792bdf9be24a3c2531c017edfb9dc8ee7319bf44392
	sha256:0f8df37c9ade8fe626d6a4b2e7eadbf7e468646077b6a979ff75c6f3529a45a1
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1116b1ead78ee12ba853682789259301550c4dd0bdb6af75bb4ca9aee3d23bc5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s078_output"
	    wget -O "n100.r06.s078_output/n100.r06.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s078_output/n100.r06.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s078_output/n100.r06.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s078_output/n100.r06.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s078_output/n100.r06.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s078_output/n100.r06.s078.reference.fas" "n100.r06.s078_output/n100.r06.s078.fq1.fastq" "n100.r06.s078_output/n100.r06.s078.fq2.fastq" | samtools view -bS - > "n100.r06.s078_output/n100.r06.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s078_output/n100.r06.s078.untrimmed.sorted.bam" "n100.r06.s078_output/n100.r06.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s078_output/n100.r06.s078.untrimmed.sorted.bam" -b "n100.r06.s078_output/n100.r06.s078.primers.bed" -p "n100.r06.s078_output/n100.r06.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" "n100.r06.s078_output/n100.r06.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s078_output/n100.r06.s078.reference.fas" "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" > "n100.r06.s078_output/n100.r06.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s078_output/n100.r06.s078.reference.fas" --call-indels "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" > "n100.r06.s078_output/n100.r06.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" > "n100.r06.s078_output/n100.r06.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s078_output/n100.r06.s078.depth.txt" "n100.r06.s078_output/n100.r06.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s078_output/n100.r06.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s078_output/n100.r06.s078.reference.fas" | bcftools consensus -m "n100.r06.s078_output/n100.r06.s078.low_depth.tsv" tmp.vcf.gz > "n100.r06.s078_output/n100.r06.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:37 scheduler task 404819b8 (flow a42a45fe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:37 scheduler task 404819b8 (flow a42a45fe): waiting for completion (try 0): started
2021/07/08 17:06:37  ->  n100.r06.s091.Main.out_file a42a45fe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:37 n100.r06.s091.Main.out_file a42a45fe n100/r06/n100.r06.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3b5b0cc8789b61cb462b44ccb50f7f9ba5764a30e14c09a8962d5c3d68acb892
	sha256:a42a45fe464f0599881078d3e55ae80333a2e4f8fd383ae50c9955ec6a6bf65c
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/404819b87f2b1b2ba922dee81d2af62ac8662d9ddec172582ad0f58d78677ef4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s091_output"
	    wget -O "n100.r06.s091_output/n100.r06.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s091_output/n100.r06.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s091_output/n100.r06.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s091_output/n100.r06.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s091_output/n100.r06.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s091_output/n100.r06.s091.reference.fas" "n100.r06.s091_output/n100.r06.s091.fq1.fastq" "n100.r06.s091_output/n100.r06.s091.fq2.fastq" | samtools view -bS - > "n100.r06.s091_output/n100.r06.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s091_output/n100.r06.s091.untrimmed.sorted.bam" "n100.r06.s091_output/n100.r06.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s091_output/n100.r06.s091.untrimmed.sorted.bam" -b "n100.r06.s091_output/n100.r06.s091.primers.bed" -p "n100.r06.s091_output/n100.r06.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" "n100.r06.s091_output/n100.r06.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s091_output/n100.r06.s091.reference.fas" "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" > "n100.r06.s091_output/n100.r06.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s091_output/n100.r06.s091.reference.fas" --call-indels "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" > "n100.r06.s091_output/n100.r06.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" > "n100.r06.s091_output/n100.r06.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s091_output/n100.r06.s091.depth.txt" "n100.r06.s091_output/n100.r06.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s091_output/n100.r06.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s091_output/n100.r06.s091.reference.fas" | bcftools consensus -m "n100.r06.s091_output/n100.r06.s091.low_depth.tsv" tmp.vcf.gz > "n100.r06.s091_output/n100.r06.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:37 scheduler task 8c8e5588 (flow dd21f074): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:37 scheduler task 8c8e5588 (flow dd21f074): waiting for completion (try 0): started
2021/07/08 17:06:37  ->  n100.r06.s013.Main.out_file dd21f074 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:37 n100.r06.s013.Main.out_file dd21f074 n100/r06/n100.r06.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:00ca6fe626aa776dcfacce6b82f9b8f9f8d636a4807fdb250329dd08106b0ce8
	sha256:dd21f0747cd0ec7fb9e0caea479450df9759e0d92ecfa35a2c5b1aece80eddfb
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c8e5588aa72e3e92ae98b67aa373a973ec32e1cd07050aa9e208967360e0d1f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s013_output"
	    wget -O "n100.r06.s013_output/n100.r06.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s013_output/n100.r06.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s013_output/n100.r06.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s013_output/n100.r06.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s013_output/n100.r06.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s013_output/n100.r06.s013.reference.fas" "n100.r06.s013_output/n100.r06.s013.fq1.fastq" "n100.r06.s013_output/n100.r06.s013.fq2.fastq" | samtools view -bS - > "n100.r06.s013_output/n100.r06.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s013_output/n100.r06.s013.untrimmed.sorted.bam" "n100.r06.s013_output/n100.r06.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s013_output/n100.r06.s013.untrimmed.sorted.bam" -b "n100.r06.s013_output/n100.r06.s013.primers.bed" -p "n100.r06.s013_output/n100.r06.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" "n100.r06.s013_output/n100.r06.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s013_output/n100.r06.s013.reference.fas" "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" > "n100.r06.s013_output/n100.r06.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s013_output/n100.r06.s013.reference.fas" --call-indels "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" > "n100.r06.s013_output/n100.r06.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" > "n100.r06.s013_output/n100.r06.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s013_output/n100.r06.s013.depth.txt" "n100.r06.s013_output/n100.r06.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s013_output/n100.r06.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s013_output/n100.r06.s013.reference.fas" | bcftools consensus -m "n100.r06.s013_output/n100.r06.s013.low_depth.tsv" tmp.vcf.gz > "n100.r06.s013_output/n100.r06.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task 18412571 (flow e7209bac): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task 18412571 (flow e7209bac): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s051.Main.out_file e7209bac exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s051.Main.out_file e7209bac n100/r06/n100.r06.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:574bcf63f63444926fa2cd62e48c3d6e1cd9f7bf8dd03ab93f140a7b3a8f46da
	sha256:e7209bac11c154fe8dbcae199ce5d04e8cab265785b838f85b0ee13587b5621a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1841257154907636edcfcd9299778e7c94bf1931d9a436e2ab94d0d0a95b142e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s051_output"
	    wget -O "n100.r06.s051_output/n100.r06.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s051_output/n100.r06.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s051_output/n100.r06.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s051_output/n100.r06.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s051_output/n100.r06.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s051_output/n100.r06.s051.reference.fas" "n100.r06.s051_output/n100.r06.s051.fq1.fastq" "n100.r06.s051_output/n100.r06.s051.fq2.fastq" | samtools view -bS - > "n100.r06.s051_output/n100.r06.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s051_output/n100.r06.s051.untrimmed.sorted.bam" "n100.r06.s051_output/n100.r06.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s051_output/n100.r06.s051.untrimmed.sorted.bam" -b "n100.r06.s051_output/n100.r06.s051.primers.bed" -p "n100.r06.s051_output/n100.r06.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" "n100.r06.s051_output/n100.r06.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s051_output/n100.r06.s051.reference.fas" "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" > "n100.r06.s051_output/n100.r06.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s051_output/n100.r06.s051.reference.fas" --call-indels "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" > "n100.r06.s051_output/n100.r06.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" > "n100.r06.s051_output/n100.r06.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s051_output/n100.r06.s051.depth.txt" "n100.r06.s051_output/n100.r06.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s051_output/n100.r06.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s051_output/n100.r06.s051.reference.fas" | bcftools consensus -m "n100.r06.s051_output/n100.r06.s051.low_depth.tsv" tmp.vcf.gz > "n100.r06.s051_output/n100.r06.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task c2bb6acb (flow e34273b7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task c2bb6acb (flow e34273b7): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s070.Main.out_file e34273b7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s070.Main.out_file e34273b7 n100/r06/n100.r06.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f02ca0f2bc2ffb4147dc8d0ba6395b219b666082464832fb0bd74edc89eecef
	sha256:e34273b7facd97ea5ec2acd9f489a92fcd0129aed14af36214218db73e73fa04
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c2bb6acbfe9347f0c9f8494d260cd50370702cab8d37d6eb1d21fb88dc788ccc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s070_output"
	    wget -O "n100.r06.s070_output/n100.r06.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s070_output/n100.r06.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s070_output/n100.r06.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s070_output/n100.r06.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s070_output/n100.r06.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s070_output/n100.r06.s070.reference.fas" "n100.r06.s070_output/n100.r06.s070.fq1.fastq" "n100.r06.s070_output/n100.r06.s070.fq2.fastq" | samtools view -bS - > "n100.r06.s070_output/n100.r06.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s070_output/n100.r06.s070.untrimmed.sorted.bam" "n100.r06.s070_output/n100.r06.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s070_output/n100.r06.s070.untrimmed.sorted.bam" -b "n100.r06.s070_output/n100.r06.s070.primers.bed" -p "n100.r06.s070_output/n100.r06.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" "n100.r06.s070_output/n100.r06.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s070_output/n100.r06.s070.reference.fas" "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" > "n100.r06.s070_output/n100.r06.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s070_output/n100.r06.s070.reference.fas" --call-indels "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" > "n100.r06.s070_output/n100.r06.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" > "n100.r06.s070_output/n100.r06.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s070_output/n100.r06.s070.depth.txt" "n100.r06.s070_output/n100.r06.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s070_output/n100.r06.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s070_output/n100.r06.s070.reference.fas" | bcftools consensus -m "n100.r06.s070_output/n100.r06.s070.low_depth.tsv" tmp.vcf.gz > "n100.r06.s070_output/n100.r06.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task b5b1ad47 (flow 57088d8f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task b5b1ad47 (flow 57088d8f): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s043.Main.out_file 57088d8f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s043.Main.out_file 57088d8f n100/r06/n100.r06.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d0d462820b12282449503ade9f5f1f2946853cc63469c2cd2c3c3d1cb18fcaaa
	sha256:57088d8ffa73e3d3904f053ac8a0ac40a90b9125bba82158a786e3b7bceaa7a3
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5b1ad470058093df214fb2b58086f8c92946bf8d4620d8a833bd9435af1fcc0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s043_output"
	    wget -O "n100.r06.s043_output/n100.r06.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s043_output/n100.r06.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s043_output/n100.r06.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s043_output/n100.r06.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s043_output/n100.r06.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s043_output/n100.r06.s043.reference.fas" "n100.r06.s043_output/n100.r06.s043.fq1.fastq" "n100.r06.s043_output/n100.r06.s043.fq2.fastq" | samtools view -bS - > "n100.r06.s043_output/n100.r06.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s043_output/n100.r06.s043.untrimmed.sorted.bam" "n100.r06.s043_output/n100.r06.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s043_output/n100.r06.s043.untrimmed.sorted.bam" -b "n100.r06.s043_output/n100.r06.s043.primers.bed" -p "n100.r06.s043_output/n100.r06.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" "n100.r06.s043_output/n100.r06.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s043_output/n100.r06.s043.reference.fas" "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" > "n100.r06.s043_output/n100.r06.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s043_output/n100.r06.s043.reference.fas" --call-indels "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" > "n100.r06.s043_output/n100.r06.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" > "n100.r06.s043_output/n100.r06.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s043_output/n100.r06.s043.depth.txt" "n100.r06.s043_output/n100.r06.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s043_output/n100.r06.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s043_output/n100.r06.s043.reference.fas" | bcftools consensus -m "n100.r06.s043_output/n100.r06.s043.low_depth.tsv" tmp.vcf.gz > "n100.r06.s043_output/n100.r06.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task 3205c8c6 (flow 6a43092a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task 3205c8c6 (flow 6a43092a): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s023.Main.out_file 6a43092a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s023.Main.out_file 6a43092a n100/r06/n100.r06.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9b49f564806ffad19dd84c8a62187fad6ab6f64d1a63d27baee048d4b9ed1c5d
	sha256:6a43092a656e2c586176c6b5b46a18a3d896303a1062091e7c3ef179a0234271
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3205c8c6e4314460aa5661af0ac556520adc27d397c82fb85a41fad18341e812
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s023_output"
	    wget -O "n100.r06.s023_output/n100.r06.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s023_output/n100.r06.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s023_output/n100.r06.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s023_output/n100.r06.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s023_output/n100.r06.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s023_output/n100.r06.s023.reference.fas" "n100.r06.s023_output/n100.r06.s023.fq1.fastq" "n100.r06.s023_output/n100.r06.s023.fq2.fastq" | samtools view -bS - > "n100.r06.s023_output/n100.r06.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s023_output/n100.r06.s023.untrimmed.sorted.bam" "n100.r06.s023_output/n100.r06.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s023_output/n100.r06.s023.untrimmed.sorted.bam" -b "n100.r06.s023_output/n100.r06.s023.primers.bed" -p "n100.r06.s023_output/n100.r06.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" "n100.r06.s023_output/n100.r06.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s023_output/n100.r06.s023.reference.fas" "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" > "n100.r06.s023_output/n100.r06.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s023_output/n100.r06.s023.reference.fas" --call-indels "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" > "n100.r06.s023_output/n100.r06.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" > "n100.r06.s023_output/n100.r06.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s023_output/n100.r06.s023.depth.txt" "n100.r06.s023_output/n100.r06.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s023_output/n100.r06.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s023_output/n100.r06.s023.reference.fas" | bcftools consensus -m "n100.r06.s023_output/n100.r06.s023.low_depth.tsv" tmp.vcf.gz > "n100.r06.s023_output/n100.r06.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task c68e568f (flow 689ddd7c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task c68e568f (flow 689ddd7c): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s052.Main.out_file 689ddd7c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s052.Main.out_file 689ddd7c n100/r06/n100.r06.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:02fbe4cb172898f946bfeef0915a7968d41832e075f5c4507723a0cf16cfbe05
	sha256:689ddd7caf1e599c2643b48ec42fedd7e04669988ba48c473b971bfab61dde7f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c68e568ff0c551e6fdc090411c396c41fa6dd31eb2fad7cd1763c8c4291c9d41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s052_output"
	    wget -O "n100.r06.s052_output/n100.r06.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s052_output/n100.r06.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s052_output/n100.r06.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s052_output/n100.r06.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s052_output/n100.r06.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s052_output/n100.r06.s052.reference.fas" "n100.r06.s052_output/n100.r06.s052.fq1.fastq" "n100.r06.s052_output/n100.r06.s052.fq2.fastq" | samtools view -bS - > "n100.r06.s052_output/n100.r06.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s052_output/n100.r06.s052.untrimmed.sorted.bam" "n100.r06.s052_output/n100.r06.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s052_output/n100.r06.s052.untrimmed.sorted.bam" -b "n100.r06.s052_output/n100.r06.s052.primers.bed" -p "n100.r06.s052_output/n100.r06.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" "n100.r06.s052_output/n100.r06.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s052_output/n100.r06.s052.reference.fas" "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" > "n100.r06.s052_output/n100.r06.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s052_output/n100.r06.s052.reference.fas" --call-indels "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" > "n100.r06.s052_output/n100.r06.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" > "n100.r06.s052_output/n100.r06.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s052_output/n100.r06.s052.depth.txt" "n100.r06.s052_output/n100.r06.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s052_output/n100.r06.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s052_output/n100.r06.s052.reference.fas" | bcftools consensus -m "n100.r06.s052_output/n100.r06.s052.low_depth.tsv" tmp.vcf.gz > "n100.r06.s052_output/n100.r06.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task d862912d (flow 99d4b438): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task d862912d (flow 99d4b438): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s021.Main.out_file 99d4b438 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s021.Main.out_file 99d4b438 n100/r06/n100.r06.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f8293a512571efd46b76532a8f5feea9e89f600b4b23f36b0996ba18e702686
	sha256:99d4b438eac7dd2a194896c85ec2da6374deb37b3fbc00d4b1af49a2b156f655
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d862912ddafe2b9a2e67efcf67124b2804369e2a3154c44a4526e4cf6914da26
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s021_output"
	    wget -O "n100.r06.s021_output/n100.r06.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s021_output/n100.r06.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s021_output/n100.r06.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s021_output/n100.r06.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s021_output/n100.r06.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s021_output/n100.r06.s021.reference.fas" "n100.r06.s021_output/n100.r06.s021.fq1.fastq" "n100.r06.s021_output/n100.r06.s021.fq2.fastq" | samtools view -bS - > "n100.r06.s021_output/n100.r06.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s021_output/n100.r06.s021.untrimmed.sorted.bam" "n100.r06.s021_output/n100.r06.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s021_output/n100.r06.s021.untrimmed.sorted.bam" -b "n100.r06.s021_output/n100.r06.s021.primers.bed" -p "n100.r06.s021_output/n100.r06.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" "n100.r06.s021_output/n100.r06.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s021_output/n100.r06.s021.reference.fas" "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" > "n100.r06.s021_output/n100.r06.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s021_output/n100.r06.s021.reference.fas" --call-indels "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" > "n100.r06.s021_output/n100.r06.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" > "n100.r06.s021_output/n100.r06.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s021_output/n100.r06.s021.depth.txt" "n100.r06.s021_output/n100.r06.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s021_output/n100.r06.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s021_output/n100.r06.s021.reference.fas" | bcftools consensus -m "n100.r06.s021_output/n100.r06.s021.low_depth.tsv" tmp.vcf.gz > "n100.r06.s021_output/n100.r06.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:38 scheduler task f8df3480 (flow 502645a1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:38 scheduler task f8df3480 (flow 502645a1): waiting for completion (try 0): started
2021/07/08 17:06:38  ->  n100.r06.s010.Main.out_file 502645a1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:38 n100.r06.s010.Main.out_file 502645a1 n100/r06/n100.r06.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:daa5ac261aec007cebdf8d09f850256bf6c9867e7e439cc47612beea2c919ba5
	sha256:502645a16fc4baadd2567f517c23f8be5216eee6abf4e1244e66ff2eb9904d7b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f8df3480ad4ef30221754d16e8878db8eb023a434fa5e7abe5ce10ccd2eab8ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s010_output"
	    wget -O "n100.r06.s010_output/n100.r06.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s010_output/n100.r06.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s010_output/n100.r06.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s010_output/n100.r06.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s010_output/n100.r06.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s010_output/n100.r06.s010.reference.fas" "n100.r06.s010_output/n100.r06.s010.fq1.fastq" "n100.r06.s010_output/n100.r06.s010.fq2.fastq" | samtools view -bS - > "n100.r06.s010_output/n100.r06.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s010_output/n100.r06.s010.untrimmed.sorted.bam" "n100.r06.s010_output/n100.r06.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s010_output/n100.r06.s010.untrimmed.sorted.bam" -b "n100.r06.s010_output/n100.r06.s010.primers.bed" -p "n100.r06.s010_output/n100.r06.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" "n100.r06.s010_output/n100.r06.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s010_output/n100.r06.s010.reference.fas" "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" > "n100.r06.s010_output/n100.r06.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s010_output/n100.r06.s010.reference.fas" --call-indels "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" > "n100.r06.s010_output/n100.r06.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" > "n100.r06.s010_output/n100.r06.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s010_output/n100.r06.s010.depth.txt" "n100.r06.s010_output/n100.r06.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s010_output/n100.r06.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s010_output/n100.r06.s010.reference.fas" | bcftools consensus -m "n100.r06.s010_output/n100.r06.s010.low_depth.tsv" tmp.vcf.gz > "n100.r06.s010_output/n100.r06.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:39 scheduler task 0f930977 (flow 56443f2e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:39 scheduler task 0f930977 (flow 56443f2e): waiting for completion (try 0): started
2021/07/08 17:06:39  ->  n100.r06.s024.Main.out_file 56443f2e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:39 n100.r06.s024.Main.out_file 56443f2e n100/r06/n100.r06.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a41b3eefe1aaeb20b11ea9b35e19e69e7fa6fa4d348f9ae239176b19be98b47c
	sha256:56443f2eaab0cc1192629ebeff821f67e9107d7ac303ce908e710727961227a4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0f930977112c4824a846bf02fed2afeeec9bd5b980c07cc8b3b4fd23c883c098
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s024_output"
	    wget -O "n100.r06.s024_output/n100.r06.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s024_output/n100.r06.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s024_output/n100.r06.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s024_output/n100.r06.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s024_output/n100.r06.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s024_output/n100.r06.s024.reference.fas" "n100.r06.s024_output/n100.r06.s024.fq1.fastq" "n100.r06.s024_output/n100.r06.s024.fq2.fastq" | samtools view -bS - > "n100.r06.s024_output/n100.r06.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s024_output/n100.r06.s024.untrimmed.sorted.bam" "n100.r06.s024_output/n100.r06.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s024_output/n100.r06.s024.untrimmed.sorted.bam" -b "n100.r06.s024_output/n100.r06.s024.primers.bed" -p "n100.r06.s024_output/n100.r06.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" "n100.r06.s024_output/n100.r06.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s024_output/n100.r06.s024.reference.fas" "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" > "n100.r06.s024_output/n100.r06.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s024_output/n100.r06.s024.reference.fas" --call-indels "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" > "n100.r06.s024_output/n100.r06.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" > "n100.r06.s024_output/n100.r06.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s024_output/n100.r06.s024.depth.txt" "n100.r06.s024_output/n100.r06.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s024_output/n100.r06.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s024_output/n100.r06.s024.reference.fas" | bcftools consensus -m "n100.r06.s024_output/n100.r06.s024.low_depth.tsv" tmp.vcf.gz > "n100.r06.s024_output/n100.r06.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:39 scheduler task 006129c5 (flow 70f0c0c0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:39 scheduler task 006129c5 (flow 70f0c0c0): waiting for completion (try 0): started
2021/07/08 17:06:39  ->  n100.r06.s012.Main.out_file 70f0c0c0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:39 n100.r06.s012.Main.out_file 70f0c0c0 n100/r06/n100.r06.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b28ca1cce125f7ae2f09ced81be4b53b0b3d7397711d98bbbe727655e7f86171
	sha256:70f0c0c0b65f8a795600c66c68f0577739ac2f6eb2cd569bb0adab259486699f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/006129c58b7e8491783d77a41b75e5a65b0df22276443102b1f6875106f33b99
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s012_output"
	    wget -O "n100.r06.s012_output/n100.r06.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s012_output/n100.r06.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s012_output/n100.r06.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s012_output/n100.r06.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s012_output/n100.r06.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s012_output/n100.r06.s012.reference.fas" "n100.r06.s012_output/n100.r06.s012.fq1.fastq" "n100.r06.s012_output/n100.r06.s012.fq2.fastq" | samtools view -bS - > "n100.r06.s012_output/n100.r06.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s012_output/n100.r06.s012.untrimmed.sorted.bam" "n100.r06.s012_output/n100.r06.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s012_output/n100.r06.s012.untrimmed.sorted.bam" -b "n100.r06.s012_output/n100.r06.s012.primers.bed" -p "n100.r06.s012_output/n100.r06.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" "n100.r06.s012_output/n100.r06.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s012_output/n100.r06.s012.reference.fas" "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" > "n100.r06.s012_output/n100.r06.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s012_output/n100.r06.s012.reference.fas" --call-indels "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" > "n100.r06.s012_output/n100.r06.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" > "n100.r06.s012_output/n100.r06.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s012_output/n100.r06.s012.depth.txt" "n100.r06.s012_output/n100.r06.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s012_output/n100.r06.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s012_output/n100.r06.s012.reference.fas" | bcftools consensus -m "n100.r06.s012_output/n100.r06.s012.low_depth.tsv" tmp.vcf.gz > "n100.r06.s012_output/n100.r06.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:39 scheduler task e737ca8f (flow 4bc88741): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:39 scheduler task e737ca8f (flow 4bc88741): waiting for completion (try 0): started
2021/07/08 17:06:39  ->  n100.r06.s033.Main.out_file 4bc88741 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:39 n100.r06.s033.Main.out_file 4bc88741 n100/r06/n100.r06.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5bc26f2cd2f309448b937df8733d17a5454a947ef64721baa60207fd082d4534
	sha256:4bc887412ba39d462d63887c2e0f926721e6426bb77c55d9332cb1c42e350bec
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e737ca8ff07c807ee4f0f214976a452013dc5b8db9c2f00c9fb8b6107e2b95a0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s033_output"
	    wget -O "n100.r06.s033_output/n100.r06.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s033_output/n100.r06.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s033_output/n100.r06.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s033_output/n100.r06.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s033_output/n100.r06.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s033_output/n100.r06.s033.reference.fas" "n100.r06.s033_output/n100.r06.s033.fq1.fastq" "n100.r06.s033_output/n100.r06.s033.fq2.fastq" | samtools view -bS - > "n100.r06.s033_output/n100.r06.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s033_output/n100.r06.s033.untrimmed.sorted.bam" "n100.r06.s033_output/n100.r06.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s033_output/n100.r06.s033.untrimmed.sorted.bam" -b "n100.r06.s033_output/n100.r06.s033.primers.bed" -p "n100.r06.s033_output/n100.r06.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" "n100.r06.s033_output/n100.r06.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s033_output/n100.r06.s033.reference.fas" "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" > "n100.r06.s033_output/n100.r06.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s033_output/n100.r06.s033.reference.fas" --call-indels "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" > "n100.r06.s033_output/n100.r06.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" > "n100.r06.s033_output/n100.r06.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s033_output/n100.r06.s033.depth.txt" "n100.r06.s033_output/n100.r06.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s033_output/n100.r06.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s033_output/n100.r06.s033.reference.fas" | bcftools consensus -m "n100.r06.s033_output/n100.r06.s033.low_depth.tsv" tmp.vcf.gz > "n100.r06.s033_output/n100.r06.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:39 scheduler task 24761a03 (flow 4e887abd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:39 scheduler task 24761a03 (flow 4e887abd): waiting for completion (try 0): started
2021/07/08 17:06:39  ->  n100.r06.s040.Main.out_file 4e887abd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:39 n100.r06.s040.Main.out_file 4e887abd n100/r06/n100.r06.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07c12639a3ec6d6224f73babdf253a939457da41a50941afa9544058cbd086ae
	sha256:4e887abde78d77f62860bcf37a02d85f3eab2654fcf711a086d561f619762c15
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/24761a031a52a6afd02b221663c16bbd43c138ee70042e33d4a6a07ddb425232
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s040_output"
	    wget -O "n100.r06.s040_output/n100.r06.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s040_output/n100.r06.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s040_output/n100.r06.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s040_output/n100.r06.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s040_output/n100.r06.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s040_output/n100.r06.s040.reference.fas" "n100.r06.s040_output/n100.r06.s040.fq1.fastq" "n100.r06.s040_output/n100.r06.s040.fq2.fastq" | samtools view -bS - > "n100.r06.s040_output/n100.r06.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s040_output/n100.r06.s040.untrimmed.sorted.bam" "n100.r06.s040_output/n100.r06.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s040_output/n100.r06.s040.untrimmed.sorted.bam" -b "n100.r06.s040_output/n100.r06.s040.primers.bed" -p "n100.r06.s040_output/n100.r06.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" "n100.r06.s040_output/n100.r06.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s040_output/n100.r06.s040.reference.fas" "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" > "n100.r06.s040_output/n100.r06.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s040_output/n100.r06.s040.reference.fas" --call-indels "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" > "n100.r06.s040_output/n100.r06.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" > "n100.r06.s040_output/n100.r06.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s040_output/n100.r06.s040.depth.txt" "n100.r06.s040_output/n100.r06.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s040_output/n100.r06.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s040_output/n100.r06.s040.reference.fas" | bcftools consensus -m "n100.r06.s040_output/n100.r06.s040.low_depth.tsv" tmp.vcf.gz > "n100.r06.s040_output/n100.r06.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:39 scheduler task 4cea0c9b (flow 109c7075): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:39 scheduler task 4cea0c9b (flow 109c7075): waiting for completion (try 0): started
2021/07/08 17:06:39  ->  n100.r06.s018.Main.out_file 109c7075 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:39 n100.r06.s018.Main.out_file 109c7075 n100/r06/n100.r06.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fd9c209201f0e09bd4ad46e8eaa6658f62ed1399f5b6ad936f4b6872c7d271e
	sha256:109c70750ddecd946e6cf3a630a6ee9349983283c6364ea7986a7bea7d48fded
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4cea0c9b9913a0148825f30743cc1c1862a6a33a68ff6ba6a6409c7eaed73fdb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s018_output"
	    wget -O "n100.r06.s018_output/n100.r06.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s018_output/n100.r06.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s018_output/n100.r06.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s018_output/n100.r06.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s018_output/n100.r06.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s018_output/n100.r06.s018.reference.fas" "n100.r06.s018_output/n100.r06.s018.fq1.fastq" "n100.r06.s018_output/n100.r06.s018.fq2.fastq" | samtools view -bS - > "n100.r06.s018_output/n100.r06.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s018_output/n100.r06.s018.untrimmed.sorted.bam" "n100.r06.s018_output/n100.r06.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s018_output/n100.r06.s018.untrimmed.sorted.bam" -b "n100.r06.s018_output/n100.r06.s018.primers.bed" -p "n100.r06.s018_output/n100.r06.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" "n100.r06.s018_output/n100.r06.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s018_output/n100.r06.s018.reference.fas" "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" > "n100.r06.s018_output/n100.r06.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s018_output/n100.r06.s018.reference.fas" --call-indels "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" > "n100.r06.s018_output/n100.r06.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" > "n100.r06.s018_output/n100.r06.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s018_output/n100.r06.s018.depth.txt" "n100.r06.s018_output/n100.r06.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s018_output/n100.r06.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s018_output/n100.r06.s018.reference.fas" | bcftools consensus -m "n100.r06.s018_output/n100.r06.s018.low_depth.tsv" tmp.vcf.gz > "n100.r06.s018_output/n100.r06.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:40 scheduler task bc733e05 (flow 50764c57): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:40 scheduler task bc733e05 (flow 50764c57): waiting for completion (try 0): started
2021/07/08 17:06:40  ->  n100.r06.s027.Main.out_file 50764c57 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:40 n100.r06.s027.Main.out_file 50764c57 n100/r06/n100.r06.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e3152d5c133248348cadfb0dbd62e7a33fdb7d8aa957fd4933fc84a7e17e7f93
	sha256:50764c572591101e09550f750751709eca3b3c2b7857e45f42a15cb92b3a506b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc733e0500499a8781b1f721bdcaeecad18f7d6f5aadd8b1e768cb943069f907
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s027_output"
	    wget -O "n100.r06.s027_output/n100.r06.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s027_output/n100.r06.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s027_output/n100.r06.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s027_output/n100.r06.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s027_output/n100.r06.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s027_output/n100.r06.s027.reference.fas" "n100.r06.s027_output/n100.r06.s027.fq1.fastq" "n100.r06.s027_output/n100.r06.s027.fq2.fastq" | samtools view -bS - > "n100.r06.s027_output/n100.r06.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s027_output/n100.r06.s027.untrimmed.sorted.bam" "n100.r06.s027_output/n100.r06.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s027_output/n100.r06.s027.untrimmed.sorted.bam" -b "n100.r06.s027_output/n100.r06.s027.primers.bed" -p "n100.r06.s027_output/n100.r06.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" "n100.r06.s027_output/n100.r06.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s027_output/n100.r06.s027.reference.fas" "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" > "n100.r06.s027_output/n100.r06.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s027_output/n100.r06.s027.reference.fas" --call-indels "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" > "n100.r06.s027_output/n100.r06.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" > "n100.r06.s027_output/n100.r06.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s027_output/n100.r06.s027.depth.txt" "n100.r06.s027_output/n100.r06.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s027_output/n100.r06.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s027_output/n100.r06.s027.reference.fas" | bcftools consensus -m "n100.r06.s027_output/n100.r06.s027.low_depth.tsv" tmp.vcf.gz > "n100.r06.s027_output/n100.r06.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:40 scheduler task 5ea6c273 (flow 572331ce): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:40 scheduler task 5ea6c273 (flow 572331ce): waiting for completion (try 0): started
2021/07/08 17:06:40  ->  n100.r06.s006.Main.out_file 572331ce exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:40 n100.r06.s006.Main.out_file 572331ce n100/r06/n100.r06.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:154d1b1f616a25595b9d6a0617e48b836fcd8284fe4bc84f42abd239e4925d9a
	sha256:572331cec76c7104aac2d46732afb9ea7c8679e6f69a7886345aee2a7f91d9ce
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ea6c273c17b3f63fb6abf54903ba46e8dcde3601dea3cea959e1494c6794c20
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s006_output"
	    wget -O "n100.r06.s006_output/n100.r06.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s006_output/n100.r06.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s006_output/n100.r06.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s006_output/n100.r06.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s006_output/n100.r06.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s006_output/n100.r06.s006.reference.fas" "n100.r06.s006_output/n100.r06.s006.fq1.fastq" "n100.r06.s006_output/n100.r06.s006.fq2.fastq" | samtools view -bS - > "n100.r06.s006_output/n100.r06.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s006_output/n100.r06.s006.untrimmed.sorted.bam" "n100.r06.s006_output/n100.r06.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s006_output/n100.r06.s006.untrimmed.sorted.bam" -b "n100.r06.s006_output/n100.r06.s006.primers.bed" -p "n100.r06.s006_output/n100.r06.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" "n100.r06.s006_output/n100.r06.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s006_output/n100.r06.s006.reference.fas" "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" > "n100.r06.s006_output/n100.r06.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s006_output/n100.r06.s006.reference.fas" --call-indels "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" > "n100.r06.s006_output/n100.r06.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" > "n100.r06.s006_output/n100.r06.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s006_output/n100.r06.s006.depth.txt" "n100.r06.s006_output/n100.r06.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s006_output/n100.r06.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s006_output/n100.r06.s006.reference.fas" | bcftools consensus -m "n100.r06.s006_output/n100.r06.s006.low_depth.tsv" tmp.vcf.gz > "n100.r06.s006_output/n100.r06.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:40 scheduler task 0a7ec48b (flow eda7cfd2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:40 scheduler task 0a7ec48b (flow eda7cfd2): waiting for completion (try 0): started
2021/07/08 17:06:40  ->  n100.r06.s011.Main.out_file eda7cfd2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:40 n100.r06.s011.Main.out_file eda7cfd2 n100/r06/n100.r06.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aa64559de23c50b94fcb516cf9545471fc50f3edc2a53dcf637ffa0556a9c457
	sha256:eda7cfd2e99a0a9dd9e899d2c09f78eda432bd7b57ab731877a35b061f7d4e41
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a7ec48b5ad36f9f007e86bf208d41a2f7fed0b53636d883449247cc207c5924
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s011_output"
	    wget -O "n100.r06.s011_output/n100.r06.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s011_output/n100.r06.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s011_output/n100.r06.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s011_output/n100.r06.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s011_output/n100.r06.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s011_output/n100.r06.s011.reference.fas" "n100.r06.s011_output/n100.r06.s011.fq1.fastq" "n100.r06.s011_output/n100.r06.s011.fq2.fastq" | samtools view -bS - > "n100.r06.s011_output/n100.r06.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s011_output/n100.r06.s011.untrimmed.sorted.bam" "n100.r06.s011_output/n100.r06.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s011_output/n100.r06.s011.untrimmed.sorted.bam" -b "n100.r06.s011_output/n100.r06.s011.primers.bed" -p "n100.r06.s011_output/n100.r06.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" "n100.r06.s011_output/n100.r06.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s011_output/n100.r06.s011.reference.fas" "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" > "n100.r06.s011_output/n100.r06.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s011_output/n100.r06.s011.reference.fas" --call-indels "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" > "n100.r06.s011_output/n100.r06.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" > "n100.r06.s011_output/n100.r06.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s011_output/n100.r06.s011.depth.txt" "n100.r06.s011_output/n100.r06.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s011_output/n100.r06.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s011_output/n100.r06.s011.reference.fas" | bcftools consensus -m "n100.r06.s011_output/n100.r06.s011.low_depth.tsv" tmp.vcf.gz > "n100.r06.s011_output/n100.r06.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:40 scheduler task f7976c84 (flow 9f59688b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:40 scheduler task f7976c84 (flow 9f59688b): waiting for completion (try 0): started
2021/07/08 17:06:40  ->  n100.r06.s002.Main.out_file 9f59688b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:40 n100.r06.s002.Main.out_file 9f59688b n100/r06/n100.r06.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5ed5ea29802c3742e8b55eeeb9f69656bff69f37322db2b092d21ee7eb1d877
	sha256:9f59688b2d76a8ea0e3846cc478604e01913eeff52d164e5bd3e0a1dee9b4317
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f7976c84d9eb3a34705d0e675e4bf0f0bb2fcee726215672188815aafd1e8069
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s002_output"
	    wget -O "n100.r06.s002_output/n100.r06.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s002_output/n100.r06.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s002_output/n100.r06.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s002_output/n100.r06.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s002_output/n100.r06.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s002_output/n100.r06.s002.reference.fas" "n100.r06.s002_output/n100.r06.s002.fq1.fastq" "n100.r06.s002_output/n100.r06.s002.fq2.fastq" | samtools view -bS - > "n100.r06.s002_output/n100.r06.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s002_output/n100.r06.s002.untrimmed.sorted.bam" "n100.r06.s002_output/n100.r06.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s002_output/n100.r06.s002.untrimmed.sorted.bam" -b "n100.r06.s002_output/n100.r06.s002.primers.bed" -p "n100.r06.s002_output/n100.r06.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" "n100.r06.s002_output/n100.r06.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s002_output/n100.r06.s002.reference.fas" "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" > "n100.r06.s002_output/n100.r06.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s002_output/n100.r06.s002.reference.fas" --call-indels "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" > "n100.r06.s002_output/n100.r06.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" > "n100.r06.s002_output/n100.r06.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s002_output/n100.r06.s002.depth.txt" "n100.r06.s002_output/n100.r06.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s002_output/n100.r06.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s002_output/n100.r06.s002.reference.fas" | bcftools consensus -m "n100.r06.s002_output/n100.r06.s002.low_depth.tsv" tmp.vcf.gz > "n100.r06.s002_output/n100.r06.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:40 scheduler task 83e10361 (flow cf58eefc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:40 scheduler task 83e10361 (flow cf58eefc): waiting for completion (try 0): started
2021/07/08 17:06:40  ->  n100.r06.s042.Main.out_file cf58eefc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:40 n100.r06.s042.Main.out_file cf58eefc n100/r06/n100.r06.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:264c75a9b9fa87ce12c61337da8f26c169b7e88bb5b111f7becaa619f0e7a842
	sha256:cf58eefcbb31c6e452f909fc7eaeb7c4fd2ba71365455f3881893aec31da37ca
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83e103610d17001776562572a77da7df6de470f63996e2e8ccf82f99472f120b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s042_output"
	    wget -O "n100.r06.s042_output/n100.r06.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s042_output/n100.r06.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s042_output/n100.r06.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s042_output/n100.r06.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s042_output/n100.r06.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s042_output/n100.r06.s042.reference.fas" "n100.r06.s042_output/n100.r06.s042.fq1.fastq" "n100.r06.s042_output/n100.r06.s042.fq2.fastq" | samtools view -bS - > "n100.r06.s042_output/n100.r06.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s042_output/n100.r06.s042.untrimmed.sorted.bam" "n100.r06.s042_output/n100.r06.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s042_output/n100.r06.s042.untrimmed.sorted.bam" -b "n100.r06.s042_output/n100.r06.s042.primers.bed" -p "n100.r06.s042_output/n100.r06.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" "n100.r06.s042_output/n100.r06.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s042_output/n100.r06.s042.reference.fas" "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" > "n100.r06.s042_output/n100.r06.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s042_output/n100.r06.s042.reference.fas" --call-indels "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" > "n100.r06.s042_output/n100.r06.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" > "n100.r06.s042_output/n100.r06.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s042_output/n100.r06.s042.depth.txt" "n100.r06.s042_output/n100.r06.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s042_output/n100.r06.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s042_output/n100.r06.s042.reference.fas" | bcftools consensus -m "n100.r06.s042_output/n100.r06.s042.low_depth.tsv" tmp.vcf.gz > "n100.r06.s042_output/n100.r06.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:40 scheduler task e0cd482b (flow 6eb687d9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:40 scheduler task e0cd482b (flow 6eb687d9): waiting for completion (try 0): started
2021/07/08 17:06:40  ->  n100.r06.s039.Main.out_file 6eb687d9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:40 n100.r06.s039.Main.out_file 6eb687d9 n100/r06/n100.r06.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7bc5c979e157dbe7d924e731d14b378dfccc545a8c49316895f036db4b4d96b1
	sha256:6eb687d985907a7500e213f6e2f9bcfa415eece7a18c0fa4ffda40eb73402752
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e0cd482b81deb1bb853aeaae426ad3db9bab6fb7901b078885812faee9c5d7e7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s039_output"
	    wget -O "n100.r06.s039_output/n100.r06.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s039_output/n100.r06.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s039_output/n100.r06.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s039_output/n100.r06.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s039_output/n100.r06.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s039_output/n100.r06.s039.reference.fas" "n100.r06.s039_output/n100.r06.s039.fq1.fastq" "n100.r06.s039_output/n100.r06.s039.fq2.fastq" | samtools view -bS - > "n100.r06.s039_output/n100.r06.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s039_output/n100.r06.s039.untrimmed.sorted.bam" "n100.r06.s039_output/n100.r06.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s039_output/n100.r06.s039.untrimmed.sorted.bam" -b "n100.r06.s039_output/n100.r06.s039.primers.bed" -p "n100.r06.s039_output/n100.r06.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" "n100.r06.s039_output/n100.r06.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s039_output/n100.r06.s039.reference.fas" "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" > "n100.r06.s039_output/n100.r06.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s039_output/n100.r06.s039.reference.fas" --call-indels "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" > "n100.r06.s039_output/n100.r06.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" > "n100.r06.s039_output/n100.r06.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s039_output/n100.r06.s039.depth.txt" "n100.r06.s039_output/n100.r06.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s039_output/n100.r06.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s039_output/n100.r06.s039.reference.fas" | bcftools consensus -m "n100.r06.s039_output/n100.r06.s039.low_depth.tsv" tmp.vcf.gz > "n100.r06.s039_output/n100.r06.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:41 scheduler task 69182bd0 (flow 73004c68): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:41 scheduler task 69182bd0 (flow 73004c68): waiting for completion (try 0): started
2021/07/08 17:06:41  ->  n100.r06.s028.Main.out_file 73004c68 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:41 n100.r06.s028.Main.out_file 73004c68 n100/r06/n100.r06.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aeb19f87c3166e1033a96b94f833e8dac6a72ff9c9ccb155d29ee102d99ca6c8
	sha256:73004c68d8e012a0aa82da67ce64fc73ac666feb1fa7c53b2dfba1575ea2c231
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/69182bd08965d07bba9504d4bfa72f8a2bc3432b2116187267dc8560ec8e3f25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s028_output"
	    wget -O "n100.r06.s028_output/n100.r06.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s028_output/n100.r06.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s028_output/n100.r06.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s028_output/n100.r06.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s028_output/n100.r06.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s028_output/n100.r06.s028.reference.fas" "n100.r06.s028_output/n100.r06.s028.fq1.fastq" "n100.r06.s028_output/n100.r06.s028.fq2.fastq" | samtools view -bS - > "n100.r06.s028_output/n100.r06.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s028_output/n100.r06.s028.untrimmed.sorted.bam" "n100.r06.s028_output/n100.r06.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s028_output/n100.r06.s028.untrimmed.sorted.bam" -b "n100.r06.s028_output/n100.r06.s028.primers.bed" -p "n100.r06.s028_output/n100.r06.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" "n100.r06.s028_output/n100.r06.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s028_output/n100.r06.s028.reference.fas" "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" > "n100.r06.s028_output/n100.r06.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s028_output/n100.r06.s028.reference.fas" --call-indels "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" > "n100.r06.s028_output/n100.r06.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" > "n100.r06.s028_output/n100.r06.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s028_output/n100.r06.s028.depth.txt" "n100.r06.s028_output/n100.r06.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s028_output/n100.r06.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s028_output/n100.r06.s028.reference.fas" | bcftools consensus -m "n100.r06.s028_output/n100.r06.s028.low_depth.tsv" tmp.vcf.gz > "n100.r06.s028_output/n100.r06.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:41 scheduler task 1727ff25 (flow 05553cfd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:41 scheduler task 1727ff25 (flow 05553cfd): waiting for completion (try 0): started
2021/07/08 17:06:41  ->  n100.r06.s016.Main.out_file 05553cfd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:41 n100.r06.s016.Main.out_file 05553cfd n100/r06/n100.r06.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6110de55ac6647a078db7787e425494b9cc856a6343468b7b3bc150170910d0c
	sha256:05553cfda685013c2424b97385f8724eb5ecfd2dc11b333832f407b2900d168a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1727ff258c4d1df84901bda66cce1994b5be7651109d926be9659811ea09bdd0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s016_output"
	    wget -O "n100.r06.s016_output/n100.r06.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s016_output/n100.r06.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s016_output/n100.r06.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s016_output/n100.r06.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s016_output/n100.r06.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s016_output/n100.r06.s016.reference.fas" "n100.r06.s016_output/n100.r06.s016.fq1.fastq" "n100.r06.s016_output/n100.r06.s016.fq2.fastq" | samtools view -bS - > "n100.r06.s016_output/n100.r06.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s016_output/n100.r06.s016.untrimmed.sorted.bam" "n100.r06.s016_output/n100.r06.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s016_output/n100.r06.s016.untrimmed.sorted.bam" -b "n100.r06.s016_output/n100.r06.s016.primers.bed" -p "n100.r06.s016_output/n100.r06.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" "n100.r06.s016_output/n100.r06.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s016_output/n100.r06.s016.reference.fas" "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" > "n100.r06.s016_output/n100.r06.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s016_output/n100.r06.s016.reference.fas" --call-indels "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" > "n100.r06.s016_output/n100.r06.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" > "n100.r06.s016_output/n100.r06.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s016_output/n100.r06.s016.depth.txt" "n100.r06.s016_output/n100.r06.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s016_output/n100.r06.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s016_output/n100.r06.s016.reference.fas" | bcftools consensus -m "n100.r06.s016_output/n100.r06.s016.low_depth.tsv" tmp.vcf.gz > "n100.r06.s016_output/n100.r06.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:41 scheduler task 46f78305 (flow 40aec702): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:41 scheduler task 46f78305 (flow 40aec702): waiting for completion (try 0): started
2021/07/08 17:06:41  ->  n100.r06.s020.Main.out_file 40aec702 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:41 n100.r06.s020.Main.out_file 40aec702 n100/r06/n100.r06.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2571f0dbf36ccb9719c24cd6f040a2bb27ad459d60a6bb6803223768e4bf1d83
	sha256:40aec70298fb3a7107904c746a511aaa9a8c61675452d6b67b9b8f08f9a72a5d
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/46f78305322794745af222aa3a75871ff6979f71bab34281686e23b2fc5a8b28
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s020_output"
	    wget -O "n100.r06.s020_output/n100.r06.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s020_output/n100.r06.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s020_output/n100.r06.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s020_output/n100.r06.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s020_output/n100.r06.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s020_output/n100.r06.s020.reference.fas" "n100.r06.s020_output/n100.r06.s020.fq1.fastq" "n100.r06.s020_output/n100.r06.s020.fq2.fastq" | samtools view -bS - > "n100.r06.s020_output/n100.r06.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s020_output/n100.r06.s020.untrimmed.sorted.bam" "n100.r06.s020_output/n100.r06.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s020_output/n100.r06.s020.untrimmed.sorted.bam" -b "n100.r06.s020_output/n100.r06.s020.primers.bed" -p "n100.r06.s020_output/n100.r06.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" "n100.r06.s020_output/n100.r06.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s020_output/n100.r06.s020.reference.fas" "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" > "n100.r06.s020_output/n100.r06.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s020_output/n100.r06.s020.reference.fas" --call-indels "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" > "n100.r06.s020_output/n100.r06.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" > "n100.r06.s020_output/n100.r06.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s020_output/n100.r06.s020.depth.txt" "n100.r06.s020_output/n100.r06.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s020_output/n100.r06.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s020_output/n100.r06.s020.reference.fas" | bcftools consensus -m "n100.r06.s020_output/n100.r06.s020.low_depth.tsv" tmp.vcf.gz > "n100.r06.s020_output/n100.r06.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:41 scheduler task d21f5df2 (flow 398ccd9b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:41 scheduler task d21f5df2 (flow 398ccd9b): waiting for completion (try 0): started
2021/07/08 17:06:41  ->  n100.r06.s015.Main.out_file 398ccd9b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:41 n100.r06.s015.Main.out_file 398ccd9b n100/r06/n100.r06.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5b4ddb4fdc379498d6dabd2c43d6073334e9ced4cf14ef1d14e2441e625c0551
	sha256:398ccd9b20e06dc58410c05855299e98d22c31d0731d0415b57c71e30a60880e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d21f5df24813ad6e6ca107c74f19613a1a8d14ceb9f50a1a3902ded17b398d4d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s015_output"
	    wget -O "n100.r06.s015_output/n100.r06.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s015_output/n100.r06.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s015_output/n100.r06.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s015_output/n100.r06.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s015_output/n100.r06.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s015_output/n100.r06.s015.reference.fas" "n100.r06.s015_output/n100.r06.s015.fq1.fastq" "n100.r06.s015_output/n100.r06.s015.fq2.fastq" | samtools view -bS - > "n100.r06.s015_output/n100.r06.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s015_output/n100.r06.s015.untrimmed.sorted.bam" "n100.r06.s015_output/n100.r06.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s015_output/n100.r06.s015.untrimmed.sorted.bam" -b "n100.r06.s015_output/n100.r06.s015.primers.bed" -p "n100.r06.s015_output/n100.r06.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" "n100.r06.s015_output/n100.r06.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s015_output/n100.r06.s015.reference.fas" "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" > "n100.r06.s015_output/n100.r06.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s015_output/n100.r06.s015.reference.fas" --call-indels "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" > "n100.r06.s015_output/n100.r06.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" > "n100.r06.s015_output/n100.r06.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s015_output/n100.r06.s015.depth.txt" "n100.r06.s015_output/n100.r06.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s015_output/n100.r06.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s015_output/n100.r06.s015.reference.fas" | bcftools consensus -m "n100.r06.s015_output/n100.r06.s015.low_depth.tsv" tmp.vcf.gz > "n100.r06.s015_output/n100.r06.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:41 scheduler task 828d1448 (flow 66f9b0f9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:41 scheduler task 828d1448 (flow 66f9b0f9): waiting for completion (try 0): started
2021/07/08 17:06:41  ->  n100.r06.s064.Main.out_file 66f9b0f9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:41 n100.r06.s064.Main.out_file 66f9b0f9 n100/r06/n100.r06.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9c435e7b6afccfb2cc2e664441d7166f5c848977d7e109abffc827fbea07e979
	sha256:66f9b0f94adff8368260659f0c33639d80a330a83da4a8f5fcc3782d1bc419c2
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/828d1448c609dbb6d1ce8cfcdf9ea025de5c29b6f5b0c3c4bae0065abd64a832
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s064_output"
	    wget -O "n100.r06.s064_output/n100.r06.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s064_output/n100.r06.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s064_output/n100.r06.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s064_output/n100.r06.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s064_output/n100.r06.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s064_output/n100.r06.s064.reference.fas" "n100.r06.s064_output/n100.r06.s064.fq1.fastq" "n100.r06.s064_output/n100.r06.s064.fq2.fastq" | samtools view -bS - > "n100.r06.s064_output/n100.r06.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s064_output/n100.r06.s064.untrimmed.sorted.bam" "n100.r06.s064_output/n100.r06.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s064_output/n100.r06.s064.untrimmed.sorted.bam" -b "n100.r06.s064_output/n100.r06.s064.primers.bed" -p "n100.r06.s064_output/n100.r06.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" "n100.r06.s064_output/n100.r06.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s064_output/n100.r06.s064.reference.fas" "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" > "n100.r06.s064_output/n100.r06.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s064_output/n100.r06.s064.reference.fas" --call-indels "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" > "n100.r06.s064_output/n100.r06.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" > "n100.r06.s064_output/n100.r06.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s064_output/n100.r06.s064.depth.txt" "n100.r06.s064_output/n100.r06.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s064_output/n100.r06.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s064_output/n100.r06.s064.reference.fas" | bcftools consensus -m "n100.r06.s064_output/n100.r06.s064.low_depth.tsv" tmp.vcf.gz > "n100.r06.s064_output/n100.r06.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:41 scheduler task 2c9167d6 (flow bfdc7ffb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:41 scheduler task 2c9167d6 (flow bfdc7ffb): waiting for completion (try 0): started
2021/07/08 17:06:41  ->  n100.r06.s019.Main.out_file bfdc7ffb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:41 n100.r06.s019.Main.out_file bfdc7ffb n100/r06/n100.r06.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebf6ffe8e520fff22b16f49e8ae3fead3b5bd27e9ff8b07f26b1da16deb7fdeb
	sha256:bfdc7ffb15c6e6c40eb15503ea6647c233808d84cdd891f3aa3364267d54b8df
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c9167d6c365c6a1a4d4ca6dec4898ef37d34d31152c08efa5618307076f114a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s019_output"
	    wget -O "n100.r06.s019_output/n100.r06.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s019_output/n100.r06.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s019_output/n100.r06.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s019_output/n100.r06.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s019_output/n100.r06.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s019_output/n100.r06.s019.reference.fas" "n100.r06.s019_output/n100.r06.s019.fq1.fastq" "n100.r06.s019_output/n100.r06.s019.fq2.fastq" | samtools view -bS - > "n100.r06.s019_output/n100.r06.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s019_output/n100.r06.s019.untrimmed.sorted.bam" "n100.r06.s019_output/n100.r06.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s019_output/n100.r06.s019.untrimmed.sorted.bam" -b "n100.r06.s019_output/n100.r06.s019.primers.bed" -p "n100.r06.s019_output/n100.r06.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" "n100.r06.s019_output/n100.r06.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s019_output/n100.r06.s019.reference.fas" "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" > "n100.r06.s019_output/n100.r06.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s019_output/n100.r06.s019.reference.fas" --call-indels "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" > "n100.r06.s019_output/n100.r06.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" > "n100.r06.s019_output/n100.r06.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s019_output/n100.r06.s019.depth.txt" "n100.r06.s019_output/n100.r06.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s019_output/n100.r06.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s019_output/n100.r06.s019.reference.fas" | bcftools consensus -m "n100.r06.s019_output/n100.r06.s019.low_depth.tsv" tmp.vcf.gz > "n100.r06.s019_output/n100.r06.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task 626618af (flow 3d47e552): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task 626618af (flow 3d47e552): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s005.Main.out_file 3d47e552 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s005.Main.out_file 3d47e552 n100/r06/n100.r06.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2ad89c0a5c53e6fef7b96c93b68ddf065fab323faf0a1b63e43a415dd2aa2114
	sha256:3d47e552651e174bf5eb1e6ed46af03ae070bee25f97cb6a3467476fdfb88d98
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/626618af347c10d4f3b0b8c1235b3da76b3f1165023759e822ffcac940c75def
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s005_output"
	    wget -O "n100.r06.s005_output/n100.r06.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s005_output/n100.r06.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s005_output/n100.r06.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s005_output/n100.r06.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s005_output/n100.r06.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s005_output/n100.r06.s005.reference.fas" "n100.r06.s005_output/n100.r06.s005.fq1.fastq" "n100.r06.s005_output/n100.r06.s005.fq2.fastq" | samtools view -bS - > "n100.r06.s005_output/n100.r06.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s005_output/n100.r06.s005.untrimmed.sorted.bam" "n100.r06.s005_output/n100.r06.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s005_output/n100.r06.s005.untrimmed.sorted.bam" -b "n100.r06.s005_output/n100.r06.s005.primers.bed" -p "n100.r06.s005_output/n100.r06.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" "n100.r06.s005_output/n100.r06.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s005_output/n100.r06.s005.reference.fas" "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" > "n100.r06.s005_output/n100.r06.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s005_output/n100.r06.s005.reference.fas" --call-indels "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" > "n100.r06.s005_output/n100.r06.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" > "n100.r06.s005_output/n100.r06.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s005_output/n100.r06.s005.depth.txt" "n100.r06.s005_output/n100.r06.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s005_output/n100.r06.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s005_output/n100.r06.s005.reference.fas" | bcftools consensus -m "n100.r06.s005_output/n100.r06.s005.low_depth.tsv" tmp.vcf.gz > "n100.r06.s005_output/n100.r06.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task 70e83fb0 (flow f04fe471): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task 70e83fb0 (flow f04fe471): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s031.Main.out_file f04fe471 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s031.Main.out_file f04fe471 n100/r06/n100.r06.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a5b8114560041952a347c5835c289fac2fe2c8ed5063be7e3d4abb1c55c4dc7
	sha256:f04fe471bc0a37c6ca6d4ab741814228999b2d6d32838f2fabd0c06544caeeb7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/70e83fb000e6ecdf87f12e2a557413cde052334b1c2305a85d4ac6008bd20842
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s031_output"
	    wget -O "n100.r06.s031_output/n100.r06.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s031_output/n100.r06.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s031_output/n100.r06.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s031_output/n100.r06.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s031_output/n100.r06.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s031_output/n100.r06.s031.reference.fas" "n100.r06.s031_output/n100.r06.s031.fq1.fastq" "n100.r06.s031_output/n100.r06.s031.fq2.fastq" | samtools view -bS - > "n100.r06.s031_output/n100.r06.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s031_output/n100.r06.s031.untrimmed.sorted.bam" "n100.r06.s031_output/n100.r06.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s031_output/n100.r06.s031.untrimmed.sorted.bam" -b "n100.r06.s031_output/n100.r06.s031.primers.bed" -p "n100.r06.s031_output/n100.r06.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" "n100.r06.s031_output/n100.r06.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s031_output/n100.r06.s031.reference.fas" "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" > "n100.r06.s031_output/n100.r06.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s031_output/n100.r06.s031.reference.fas" --call-indels "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" > "n100.r06.s031_output/n100.r06.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" > "n100.r06.s031_output/n100.r06.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s031_output/n100.r06.s031.depth.txt" "n100.r06.s031_output/n100.r06.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s031_output/n100.r06.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s031_output/n100.r06.s031.reference.fas" | bcftools consensus -m "n100.r06.s031_output/n100.r06.s031.low_depth.tsv" tmp.vcf.gz > "n100.r06.s031_output/n100.r06.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task cbed6014 (flow 936d4ab9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task cbed6014 (flow 936d4ab9): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s088.Main.out_file 936d4ab9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s088.Main.out_file 936d4ab9 n100/r06/n100.r06.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9ff9a3e145f45be29eaa36afb25f747cc267005d451b5d7ea5b42290103e492
	sha256:936d4ab907d3a969612cb4ccbe5c1ab1a79702977f302e201c6d2d358713053f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbed6014e595832e1296b1060bbf31cde762bec2b77a7ca531bb43146395aeb2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s088_output"
	    wget -O "n100.r06.s088_output/n100.r06.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s088_output/n100.r06.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s088_output/n100.r06.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s088_output/n100.r06.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s088_output/n100.r06.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s088_output/n100.r06.s088.reference.fas" "n100.r06.s088_output/n100.r06.s088.fq1.fastq" "n100.r06.s088_output/n100.r06.s088.fq2.fastq" | samtools view -bS - > "n100.r06.s088_output/n100.r06.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s088_output/n100.r06.s088.untrimmed.sorted.bam" "n100.r06.s088_output/n100.r06.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s088_output/n100.r06.s088.untrimmed.sorted.bam" -b "n100.r06.s088_output/n100.r06.s088.primers.bed" -p "n100.r06.s088_output/n100.r06.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" "n100.r06.s088_output/n100.r06.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s088_output/n100.r06.s088.reference.fas" "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" > "n100.r06.s088_output/n100.r06.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s088_output/n100.r06.s088.reference.fas" --call-indels "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" > "n100.r06.s088_output/n100.r06.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" > "n100.r06.s088_output/n100.r06.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s088_output/n100.r06.s088.depth.txt" "n100.r06.s088_output/n100.r06.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s088_output/n100.r06.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s088_output/n100.r06.s088.reference.fas" | bcftools consensus -m "n100.r06.s088_output/n100.r06.s088.low_depth.tsv" tmp.vcf.gz > "n100.r06.s088_output/n100.r06.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task 30d52cd1 (flow 965617d8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task 30d52cd1 (flow 965617d8): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s047.Main.out_file 965617d8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s047.Main.out_file 965617d8 n100/r06/n100.r06.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5985ab79bc6bf76cc7d46a5ec337277f8174374bdde8be87e4a3e0fa109b095
	sha256:965617d8435d030a6055c6e290ebd74459f3a7f9703c23e799218d7ad5d83b26
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/30d52cd1522933307bcac7f72bd7059f0cc78fdd816303ee37e6925ee6935e1a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s047_output"
	    wget -O "n100.r06.s047_output/n100.r06.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s047_output/n100.r06.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s047_output/n100.r06.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s047_output/n100.r06.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s047_output/n100.r06.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s047_output/n100.r06.s047.reference.fas" "n100.r06.s047_output/n100.r06.s047.fq1.fastq" "n100.r06.s047_output/n100.r06.s047.fq2.fastq" | samtools view -bS - > "n100.r06.s047_output/n100.r06.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s047_output/n100.r06.s047.untrimmed.sorted.bam" "n100.r06.s047_output/n100.r06.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s047_output/n100.r06.s047.untrimmed.sorted.bam" -b "n100.r06.s047_output/n100.r06.s047.primers.bed" -p "n100.r06.s047_output/n100.r06.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" "n100.r06.s047_output/n100.r06.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s047_output/n100.r06.s047.reference.fas" "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" > "n100.r06.s047_output/n100.r06.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s047_output/n100.r06.s047.reference.fas" --call-indels "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" > "n100.r06.s047_output/n100.r06.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" > "n100.r06.s047_output/n100.r06.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s047_output/n100.r06.s047.depth.txt" "n100.r06.s047_output/n100.r06.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s047_output/n100.r06.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s047_output/n100.r06.s047.reference.fas" | bcftools consensus -m "n100.r06.s047_output/n100.r06.s047.low_depth.tsv" tmp.vcf.gz > "n100.r06.s047_output/n100.r06.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task 371261a3 (flow e80820b2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task 371261a3 (flow e80820b2): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s017.Main.out_file e80820b2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s017.Main.out_file e80820b2 n100/r06/n100.r06.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc4b4ac4b4767e391f00f5b232f5fae087f4ff45bf56546549e21532a44bc02a
	sha256:e80820b2beabd337153d57cdcc234e8f2796caa64d583ca7dde1a6685bce7426
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/371261a31e2d871e603679bb74f3c40a907aae973068d4618e2ff6284afec388
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s017_output"
	    wget -O "n100.r06.s017_output/n100.r06.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s017_output/n100.r06.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s017_output/n100.r06.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s017_output/n100.r06.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s017_output/n100.r06.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s017_output/n100.r06.s017.reference.fas" "n100.r06.s017_output/n100.r06.s017.fq1.fastq" "n100.r06.s017_output/n100.r06.s017.fq2.fastq" | samtools view -bS - > "n100.r06.s017_output/n100.r06.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s017_output/n100.r06.s017.untrimmed.sorted.bam" "n100.r06.s017_output/n100.r06.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s017_output/n100.r06.s017.untrimmed.sorted.bam" -b "n100.r06.s017_output/n100.r06.s017.primers.bed" -p "n100.r06.s017_output/n100.r06.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" "n100.r06.s017_output/n100.r06.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s017_output/n100.r06.s017.reference.fas" "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" > "n100.r06.s017_output/n100.r06.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s017_output/n100.r06.s017.reference.fas" --call-indels "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" > "n100.r06.s017_output/n100.r06.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" > "n100.r06.s017_output/n100.r06.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s017_output/n100.r06.s017.depth.txt" "n100.r06.s017_output/n100.r06.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s017_output/n100.r06.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s017_output/n100.r06.s017.reference.fas" | bcftools consensus -m "n100.r06.s017_output/n100.r06.s017.low_depth.tsv" tmp.vcf.gz > "n100.r06.s017_output/n100.r06.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task ee390516 (flow dece9cd5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task ee390516 (flow dece9cd5): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s035.Main.out_file dece9cd5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s035.Main.out_file dece9cd5 n100/r06/n100.r06.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e6e2b880a79395414a405228b54de8056e4685be3c719e8495e89e7f3980210a
	sha256:dece9cd590d55c764c04224621d3a570377a01bc2eda0e3040c2447711b6a20c
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee390516e243fd6e922510382c9ad4fa7a4248d291f2f83f0230ec0ca01d24fd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s035_output"
	    wget -O "n100.r06.s035_output/n100.r06.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s035_output/n100.r06.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s035_output/n100.r06.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s035_output/n100.r06.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s035_output/n100.r06.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s035_output/n100.r06.s035.reference.fas" "n100.r06.s035_output/n100.r06.s035.fq1.fastq" "n100.r06.s035_output/n100.r06.s035.fq2.fastq" | samtools view -bS - > "n100.r06.s035_output/n100.r06.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s035_output/n100.r06.s035.untrimmed.sorted.bam" "n100.r06.s035_output/n100.r06.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s035_output/n100.r06.s035.untrimmed.sorted.bam" -b "n100.r06.s035_output/n100.r06.s035.primers.bed" -p "n100.r06.s035_output/n100.r06.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" "n100.r06.s035_output/n100.r06.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s035_output/n100.r06.s035.reference.fas" "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" > "n100.r06.s035_output/n100.r06.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s035_output/n100.r06.s035.reference.fas" --call-indels "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" > "n100.r06.s035_output/n100.r06.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" > "n100.r06.s035_output/n100.r06.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s035_output/n100.r06.s035.depth.txt" "n100.r06.s035_output/n100.r06.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s035_output/n100.r06.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s035_output/n100.r06.s035.reference.fas" | bcftools consensus -m "n100.r06.s035_output/n100.r06.s035.low_depth.tsv" tmp.vcf.gz > "n100.r06.s035_output/n100.r06.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:42 scheduler task f672ef92 (flow 14086e68): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:42 scheduler task f672ef92 (flow 14086e68): waiting for completion (try 0): started
2021/07/08 17:06:42  ->  n100.r06.s093.Main.out_file 14086e68 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:42 n100.r06.s093.Main.out_file 14086e68 n100/r06/n100.r06.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd20ebd2b28633c0a0e4adaa4d182111456c121e59ddba69d8fdfb6db9e0cd70
	sha256:14086e68516d8ef6930db317140a3e3a35c8c6a6b4b2b2fc1a4c016490497c33
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f672ef92b3da298617e169874fc812f51ca15c9464e308fb54584142659decfc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s093_output"
	    wget -O "n100.r06.s093_output/n100.r06.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s093_output/n100.r06.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s093_output/n100.r06.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s093_output/n100.r06.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s093_output/n100.r06.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s093_output/n100.r06.s093.reference.fas" "n100.r06.s093_output/n100.r06.s093.fq1.fastq" "n100.r06.s093_output/n100.r06.s093.fq2.fastq" | samtools view -bS - > "n100.r06.s093_output/n100.r06.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s093_output/n100.r06.s093.untrimmed.sorted.bam" "n100.r06.s093_output/n100.r06.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s093_output/n100.r06.s093.untrimmed.sorted.bam" -b "n100.r06.s093_output/n100.r06.s093.primers.bed" -p "n100.r06.s093_output/n100.r06.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" "n100.r06.s093_output/n100.r06.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s093_output/n100.r06.s093.reference.fas" "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" > "n100.r06.s093_output/n100.r06.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s093_output/n100.r06.s093.reference.fas" --call-indels "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" > "n100.r06.s093_output/n100.r06.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" > "n100.r06.s093_output/n100.r06.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s093_output/n100.r06.s093.depth.txt" "n100.r06.s093_output/n100.r06.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s093_output/n100.r06.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s093_output/n100.r06.s093.reference.fas" | bcftools consensus -m "n100.r06.s093_output/n100.r06.s093.low_depth.tsv" tmp.vcf.gz > "n100.r06.s093_output/n100.r06.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:06:43 scheduler task 957861f5 (flow 82bc0705): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:06:43 scheduler task 957861f5 (flow 82bc0705): waiting for completion (try 0): started
2021/07/08 17:06:43  ->  n100.r06.s014.Main.out_file 82bc0705 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:06:43 n100.r06.s014.Main.out_file 82bc0705 n100/r06/n100.r06.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9f03c51eb3705a5bc2efde137f8632a850ebfb4e3cb0fc2ecb40c3aad5aacb2f
	sha256:82bc0705f934638b8c0ac275af738467735469cafe5db2e289934eed875cf059
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/957861f547d718f3ec2e338df0b29786a55b6fe2e7d8d0336dfeae8f2e306371
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s014_output"
	    wget -O "n100.r06.s014_output/n100.r06.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s014_output/n100.r06.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s014_output/n100.r06.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s014_output/n100.r06.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s014_output/n100.r06.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s014_output/n100.r06.s014.reference.fas" "n100.r06.s014_output/n100.r06.s014.fq1.fastq" "n100.r06.s014_output/n100.r06.s014.fq2.fastq" | samtools view -bS - > "n100.r06.s014_output/n100.r06.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s014_output/n100.r06.s014.untrimmed.sorted.bam" "n100.r06.s014_output/n100.r06.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s014_output/n100.r06.s014.untrimmed.sorted.bam" -b "n100.r06.s014_output/n100.r06.s014.primers.bed" -p "n100.r06.s014_output/n100.r06.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" "n100.r06.s014_output/n100.r06.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s014_output/n100.r06.s014.reference.fas" "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" > "n100.r06.s014_output/n100.r06.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s014_output/n100.r06.s014.reference.fas" --call-indels "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" > "n100.r06.s014_output/n100.r06.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" > "n100.r06.s014_output/n100.r06.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s014_output/n100.r06.s014.depth.txt" "n100.r06.s014_output/n100.r06.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s014_output/n100.r06.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s014_output/n100.r06.s014.reference.fas" | bcftools consensus -m "n100.r06.s014_output/n100.r06.s014.low_depth.tsv" tmp.vcf.gz > "n100.r06.s014_output/n100.r06.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): promoting objects (try 0): started
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): retrieving diagnostic output (try 0): started
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): retrieving result (try 0): started
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:10:43 scheduler task fc7b57e3 (flow b26d36ef): transferring output (try 0): started
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): promoting objects (try 0): started
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): retrieving diagnostic output (try 0): started
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): retrieving result (try 0): started
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): promoting objects (try 0): started
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:10:43 scheduler task bea561be (flow 60d3550b): transferring output (try 0): started
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): retrieving diagnostic output (try 0): started
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): retrieving result (try 0): started
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:10:43 scheduler task ef167c15 (flow 9a691c74): transferring output (try 0): started
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): transferring output (try 0): successful, next state: unloading
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloading (try 0): started
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloading val<.=dd5c26d3 35.4MiB>
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloading list<val<.=f8f1bb86 35.7MiB> 35.7MiB>
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloading val<.=a6cf715e 35.4MiB>
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloaded list<val<.=f8f1bb86 35.7MiB> 35.7MiB>
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloaded val<.=dd5c26d3 35.4MiB>
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloaded val<.=a6cf715e 35.4MiB>
2021/07/08 17:10:44 scheduler task fc7b57e3 (flow b26d36ef): unloading (try 0): successful, next state: complete
2021/07/08 17:10:44  <-  n100.r06.s092.Main.out_file b26d36ef ok     exec 3m59s 35.7MiB
2021/07/08 17:10:44 n100.r06.s092.Main.out_file b26d36ef n100/r06/n100.r06.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:223302d75863da87ff675230de09fd57fb4f16a365484a8558b04a3221c8a321
	sha256:b26d36efb2a0374bd7a7019eb762bff28c2005b69af8d4e77a56211f1f4e8022
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fc7b57e3eb3301860c8e41d9c89a5f730180c928e5a5110836582e60444d66ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s092_output"
	    wget -O "n100.r06.s092_output/n100.r06.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s092_output/n100.r06.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s092_output/n100.r06.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s092_output/n100.r06.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s092_output/n100.r06.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s092_output/n100.r06.s092.reference.fas" "n100.r06.s092_output/n100.r06.s092.fq1.fastq" "n100.r06.s092_output/n100.r06.s092.fq2.fastq" | samtools view -bS - > "n100.r06.s092_output/n100.r06.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s092_output/n100.r06.s092.untrimmed.sorted.bam" "n100.r06.s092_output/n100.r06.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s092_output/n100.r06.s092.untrimmed.sorted.bam" -b "n100.r06.s092_output/n100.r06.s092.primers.bed" -p "n100.r06.s092_output/n100.r06.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" "n100.r06.s092_output/n100.r06.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s092_output/n100.r06.s092.reference.fas" "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" > "n100.r06.s092_output/n100.r06.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s092_output/n100.r06.s092.reference.fas" --call-indels "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" > "n100.r06.s092_output/n100.r06.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s092_output/n100.r06.s092.trimmed.sorted.bam" > "n100.r06.s092_output/n100.r06.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s092_output/n100.r06.s092.depth.txt" "n100.r06.s092_output/n100.r06.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s092_output/n100.r06.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s092_output/n100.r06.s092.reference.fas" | bcftools consensus -m "n100.r06.s092_output/n100.r06.s092.low_depth.tsv" tmp.vcf.gz > "n100.r06.s092_output/n100.r06.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f8f1bb86dd533df1d802d83df7cbfe6147955619fedb249fbf1bd5d26342b39f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.8MiB max=125.5MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:10:44 scheduler task 6c1da4f5 (flow 380be2ad): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s092.tar.gz resources {}
2021/07/08 17:10:44  ->  n100.r06.s092.Main.cp_out_file 380be2ad exec extern s3://niema-test/n100/r06/n100.r06.s092.tar.gz 35.7MiB
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): transferring output (try 0): successful, next state: unloading
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloading (try 0): started
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloading list<val<.=182ff3ae 35.7MiB> 35.7MiB>
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloading val<.=4f8ff594 35.4MiB>
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloading val<.=fb40f77d 35.4MiB>
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloading (try 0): started
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloading list<val<.=68cf90d0 35.7MiB> 35.7MiB>
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloading val<.=8ab4e300 35.4MiB>
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloading val<.=558afc37 35.4MiB>
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): promoting objects (try 0): started
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloaded val<.=558afc37 35.4MiB>
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloaded val<.=8ab4e300 35.4MiB>
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloaded val<.=fb40f77d 35.4MiB>
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloaded list<val<.=182ff3ae 35.7MiB> 35.7MiB>
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloaded val<.=4f8ff594 35.4MiB>
2021/07/08 17:10:44 scheduler task ef167c15 (flow 9a691c74): unloading (try 0): successful, next state: complete
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloaded list<val<.=68cf90d0 35.7MiB> 35.7MiB>
2021/07/08 17:10:44 scheduler task bea561be (flow 60d3550b): unloading (try 0): successful, next state: complete
2021/07/08 17:10:44  <-  n100.r06.s076.Main.out_file 9a691c74 ok     exec 3m59s 35.7MiB
2021/07/08 17:10:44 n100.r06.s076.Main.out_file 9a691c74 n100/r06/n100.r06.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c6d2facf0c823e689d946494b7927f8a66bb8b0f6fc93bcc166b441280af6db9
	sha256:9a691c7493861ff05cbd8d0d45923f0fd8abbf1ba91ce3f2ee2d18e36b06dd42
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ef167c156ebeca77b2cf2d86069ec2a39626cad79b3b4f2ccc2e7982af9babed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s076_output"
	    wget -O "n100.r06.s076_output/n100.r06.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s076_output/n100.r06.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s076_output/n100.r06.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s076_output/n100.r06.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s076_output/n100.r06.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s076_output/n100.r06.s076.reference.fas" "n100.r06.s076_output/n100.r06.s076.fq1.fastq" "n100.r06.s076_output/n100.r06.s076.fq2.fastq" | samtools view -bS - > "n100.r06.s076_output/n100.r06.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s076_output/n100.r06.s076.untrimmed.sorted.bam" "n100.r06.s076_output/n100.r06.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s076_output/n100.r06.s076.untrimmed.sorted.bam" -b "n100.r06.s076_output/n100.r06.s076.primers.bed" -p "n100.r06.s076_output/n100.r06.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" "n100.r06.s076_output/n100.r06.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s076_output/n100.r06.s076.reference.fas" "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" > "n100.r06.s076_output/n100.r06.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s076_output/n100.r06.s076.reference.fas" --call-indels "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" > "n100.r06.s076_output/n100.r06.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s076_output/n100.r06.s076.trimmed.sorted.bam" > "n100.r06.s076_output/n100.r06.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s076_output/n100.r06.s076.depth.txt" "n100.r06.s076_output/n100.r06.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s076_output/n100.r06.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s076_output/n100.r06.s076.reference.fas" | bcftools consensus -m "n100.r06.s076_output/n100.r06.s076.low_depth.tsv" tmp.vcf.gz > "n100.r06.s076_output/n100.r06.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:182ff3ae027f28a866a62eba1d61610b110c5e6f6340d362bd0c7fecfc0c434a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.8MiB max=124.5MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:10:44 scheduler task 40af757b (flow e772e915): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s076.tar.gz resources {}
2021/07/08 17:10:44  ->  n100.r06.s076.Main.cp_out_file e772e915 exec extern s3://niema-test/n100/r06/n100.r06.s076.tar.gz 35.7MiB
2021/07/08 17:10:44  <-  n100.r06.s098.Main.out_file 60d3550b ok     exec 3m59s 35.7MiB
2021/07/08 17:10:44 n100.r06.s098.Main.out_file 60d3550b n100/r06/n100.r06.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55a1bc2f82092b6c9fb6461b0c73af1fb2841afad6a945b657558cf9d5abb9ac
	sha256:60d3550b8884531957295eff3c2dd0ce34378ba6792df76a82b687447c89caf5
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bea561beda0ed22d3907d05f237e4535ca94a0cbcfd996d017d00638671203c5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s098_output"
	    wget -O "n100.r06.s098_output/n100.r06.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s098_output/n100.r06.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s098_output/n100.r06.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s098_output/n100.r06.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s098_output/n100.r06.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s098_output/n100.r06.s098.reference.fas" "n100.r06.s098_output/n100.r06.s098.fq1.fastq" "n100.r06.s098_output/n100.r06.s098.fq2.fastq" | samtools view -bS - > "n100.r06.s098_output/n100.r06.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s098_output/n100.r06.s098.untrimmed.sorted.bam" "n100.r06.s098_output/n100.r06.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s098_output/n100.r06.s098.untrimmed.sorted.bam" -b "n100.r06.s098_output/n100.r06.s098.primers.bed" -p "n100.r06.s098_output/n100.r06.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" "n100.r06.s098_output/n100.r06.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s098_output/n100.r06.s098.reference.fas" "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" > "n100.r06.s098_output/n100.r06.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s098_output/n100.r06.s098.reference.fas" --call-indels "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" > "n100.r06.s098_output/n100.r06.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s098_output/n100.r06.s098.trimmed.sorted.bam" > "n100.r06.s098_output/n100.r06.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s098_output/n100.r06.s098.depth.txt" "n100.r06.s098_output/n100.r06.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s098_output/n100.r06.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s098_output/n100.r06.s098.reference.fas" | bcftools consensus -m "n100.r06.s098_output/n100.r06.s098.low_depth.tsv" tmp.vcf.gz > "n100.r06.s098_output/n100.r06.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:68cf90d097613c6e2ebed8b3ce282fdedf054fc764672e4cc105c8a45906d12c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.8MiB max=126.3MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:10:44 scheduler task 0fc992cf (flow 1ed246d2): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s098.tar.gz resources {}
2021/07/08 17:10:44  ->  n100.r06.s098.Main.cp_out_file 1ed246d2 exec extern s3://niema-test/n100/r06/n100.r06.s098.tar.gz 35.7MiB
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): retrieving diagnostic output (try 0): started
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): retrieving result (try 0): started
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:10:44 scheduler task a1b7a353 (flow 94722989): transferring output (try 0): started
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): transferring output (try 0): successful, next state: unloading
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloading (try 0): started
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloading list<val<.=d9327563 35.7MiB> 35.7MiB>
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloading val<.=57988bd8 35.4MiB>
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloading val<.=97217c68 35.4MiB>
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloaded list<val<.=d9327563 35.7MiB> 35.7MiB>
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloaded val<.=97217c68 35.4MiB>
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloaded val<.=57988bd8 35.4MiB>
2021/07/08 17:10:45 scheduler task a1b7a353 (flow 94722989): unloading (try 0): successful, next state: complete
2021/07/08 17:10:45  <-  n100.r06.s025.Main.out_file 94722989 ok     exec 4m0s 35.7MiB
2021/07/08 17:10:45 n100.r06.s025.Main.out_file 94722989 n100/r06/n100.r06.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b03e504dc6ad98bbf510dcbc87b536d25a6defec29002f67183dfdc8d696b721
	sha256:947229899424765893ab2a8da1a83936e23431d24d1274db3b0877d8554d2b53
	ec2-18-220-232-110.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1b7a35330963db1e9918e422caf25437eee6103d2b24dd9c9b76588bd97972b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s025_output"
	    wget -O "n100.r06.s025_output/n100.r06.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s025_output/n100.r06.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s025_output/n100.r06.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s025_output/n100.r06.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s025_output/n100.r06.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s025_output/n100.r06.s025.reference.fas" "n100.r06.s025_output/n100.r06.s025.fq1.fastq" "n100.r06.s025_output/n100.r06.s025.fq2.fastq" | samtools view -bS - > "n100.r06.s025_output/n100.r06.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s025_output/n100.r06.s025.untrimmed.sorted.bam" "n100.r06.s025_output/n100.r06.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s025_output/n100.r06.s025.untrimmed.sorted.bam" -b "n100.r06.s025_output/n100.r06.s025.primers.bed" -p "n100.r06.s025_output/n100.r06.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" "n100.r06.s025_output/n100.r06.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s025_output/n100.r06.s025.reference.fas" "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" > "n100.r06.s025_output/n100.r06.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s025_output/n100.r06.s025.reference.fas" --call-indels "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" > "n100.r06.s025_output/n100.r06.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s025_output/n100.r06.s025.trimmed.sorted.bam" > "n100.r06.s025_output/n100.r06.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s025_output/n100.r06.s025.depth.txt" "n100.r06.s025_output/n100.r06.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s025_output/n100.r06.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s025_output/n100.r06.s025.reference.fas" | bcftools consensus -m "n100.r06.s025_output/n100.r06.s025.low_depth.tsv" tmp.vcf.gz > "n100.r06.s025_output/n100.r06.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d932756343955ccb5bc66f332dd115510e4b9369e55f6bac7732f833f206afa1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.9MiB max=126.2MiB
	    disk mean=11.6MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:10:45 scheduler task d1308d3c (flow bcf4c7be): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s025.tar.gz resources {}
2021/07/08 17:10:45  ->  n100.r06.s025.Main.cp_out_file bcf4c7be exec extern s3://niema-test/n100/r06/n100.r06.s025.tar.gz 35.7MiB
2021/07/08 17:10:45 scheduler task 0fc992cf (flow 1ed246d2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:68cf90d097613c6e2ebed8b3ce282fdedf054fc764672e4cc105c8a45906d12c -> s3://niema-test/n100/r06/n100.r06.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:10:45  <-  n100.r06.s098.Main.cp_out_file 1ed246d2 ok   extern 0s 35.7MiB
2021/07/08 17:10:45 scheduler task 40af757b (flow e772e915): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:182ff3ae027f28a866a62eba1d61610b110c5e6f6340d362bd0c7fecfc0c434a -> s3://niema-test/n100/r06/n100.r06.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:10:45  <-  n100.r06.s076.Main.cp_out_file e772e915 ok   extern 0s 35.7MiB
2021/07/08 17:10:46 scheduler task 6c1da4f5 (flow 380be2ad): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f8f1bb86dd533df1d802d83df7cbfe6147955619fedb249fbf1bd5d26342b39f -> s3://niema-test/n100/r06/n100.r06.s092.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:10:46  <-  n100.r06.s092.Main.cp_out_file 380be2ad ok   extern 0s 35.7MiB
2021/07/08 17:10:46 scheduler task d1308d3c (flow bcf4c7be): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d932756343955ccb5bc66f332dd115510e4b9369e55f6bac7732f833f206afa1 -> s3://niema-test/n100/r06/n100.r06.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:10:46  <-  n100.r06.s025.Main.cp_out_file bcf4c7be ok   extern 0s 35.7MiB
2021/07/08 17:11:29 scheduler task 5e093f54 (flow 2ab40335): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:29 scheduler task 5e093f54 (flow 2ab40335): promoting objects (try 0): started
2021/07/08 17:11:29 scheduler task 5e093f54 (flow 2ab40335): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:29 scheduler task 5e093f54 (flow 2ab40335): retrieving diagnostic output (try 0): started
2021/07/08 17:11:30 scheduler task 5e093f54 (flow 2ab40335): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:30 scheduler task 5e093f54 (flow 2ab40335): retrieving result (try 0): started
2021/07/08 17:11:30 scheduler task 5e093f54 (flow 2ab40335): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:30 scheduler task 5e093f54 (flow 2ab40335): transferring output (try 0): started
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloading (try 0): started
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloading list<val<.=f1eb7424 35.7MiB> 35.7MiB>
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloading val<.=19c7a8cc 35.4MiB>
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloading val<.=3680ac62 35.4MiB>
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloaded val<.=19c7a8cc 35.4MiB>
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloaded list<val<.=f1eb7424 35.7MiB> 35.7MiB>
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloaded val<.=3680ac62 35.4MiB>
2021/07/08 17:11:31 scheduler task 5e093f54 (flow 2ab40335): unloading (try 0): successful, next state: complete
2021/07/08 17:11:31  <-  n100.r06.s041.Main.out_file 2ab40335 ok     exec 4m45s 35.7MiB
2021/07/08 17:11:31 n100.r06.s041.Main.out_file 2ab40335 n100/r06/n100.r06.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ec52098cb21bebc2e82a2b9cfb38b87c2afa943538ff23521cc2c8be2be26aaa
	sha256:2ab40335b4e4dab2544a30eacc567c78df07a893a101a0f6b0ccac9e4355fbd6
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5e093f54e0b4841342f4e3bde7e45f4d37261ef33394aa09466878f869f8db6c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s041_output"
	    wget -O "n100.r06.s041_output/n100.r06.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s041_output/n100.r06.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s041_output/n100.r06.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s041_output/n100.r06.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s041_output/n100.r06.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s041_output/n100.r06.s041.reference.fas" "n100.r06.s041_output/n100.r06.s041.fq1.fastq" "n100.r06.s041_output/n100.r06.s041.fq2.fastq" | samtools view -bS - > "n100.r06.s041_output/n100.r06.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s041_output/n100.r06.s041.untrimmed.sorted.bam" "n100.r06.s041_output/n100.r06.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s041_output/n100.r06.s041.untrimmed.sorted.bam" -b "n100.r06.s041_output/n100.r06.s041.primers.bed" -p "n100.r06.s041_output/n100.r06.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" "n100.r06.s041_output/n100.r06.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s041_output/n100.r06.s041.reference.fas" "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" > "n100.r06.s041_output/n100.r06.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s041_output/n100.r06.s041.reference.fas" --call-indels "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" > "n100.r06.s041_output/n100.r06.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s041_output/n100.r06.s041.trimmed.sorted.bam" > "n100.r06.s041_output/n100.r06.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s041_output/n100.r06.s041.depth.txt" "n100.r06.s041_output/n100.r06.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s041_output/n100.r06.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s041_output/n100.r06.s041.reference.fas" | bcftools consensus -m "n100.r06.s041_output/n100.r06.s041.low_depth.tsv" tmp.vcf.gz > "n100.r06.s041_output/n100.r06.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f1eb7424d3b7128145eeafb6513b0a605ff9345666b2804602e1e58c9d595b93 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=129.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:11:31 scheduler task 79f7397c (flow 8e1d1a2b): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s041.tar.gz resources {}
2021/07/08 17:11:31  ->  n100.r06.s041.Main.cp_out_file 8e1d1a2b exec extern s3://niema-test/n100/r06/n100.r06.s041.tar.gz 35.7MiB
2021/07/08 17:11:32 scheduler task 79f7397c (flow 8e1d1a2b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f1eb7424d3b7128145eeafb6513b0a605ff9345666b2804602e1e58c9d595b93 -> s3://niema-test/n100/r06/n100.r06.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:32  <-  n100.r06.s041.Main.cp_out_file 8e1d1a2b ok   extern 0s 35.7MiB
2021/07/08 17:11:33 scheduler task 9775a3d6 (flow 8e0a6c25): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:33 scheduler task 9775a3d6 (flow 8e0a6c25): promoting objects (try 0): started
2021/07/08 17:11:33 scheduler task 9775a3d6 (flow 8e0a6c25): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:33 scheduler task 9775a3d6 (flow 8e0a6c25): retrieving diagnostic output (try 0): started
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): retrieving result (try 0): started
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): transferring output (try 0): started
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloading (try 0): started
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloading list<val<.=7d0e33ba 35.7MiB> 35.7MiB>
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloading val<.=c460c419 35.4MiB>
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloading val<.=fa781d1e 35.4MiB>
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloaded val<.=fa781d1e 35.4MiB>
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloaded val<.=c460c419 35.4MiB>
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloaded list<val<.=7d0e33ba 35.7MiB> 35.7MiB>
2021/07/08 17:11:34 scheduler task 9775a3d6 (flow 8e0a6c25): unloading (try 0): successful, next state: complete
2021/07/08 17:11:34  <-  n100.r06.s063.Main.out_file 8e0a6c25 ok     exec 4m50s 35.7MiB
2021/07/08 17:11:34 n100.r06.s063.Main.out_file 8e0a6c25 n100/r06/n100.r06.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:54cf81ef2ab1678c964a9718d1cfdfec50c746429ba7cfc5fe5c264b9bd37833
	sha256:8e0a6c2555aa17db50f9a2569bdb7810738e434f7b520074a2b26077707a0bef
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9775a3d69826b81b14087fe58f7f567db2283c17c59649ad2ede465050522f46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s063_output"
	    wget -O "n100.r06.s063_output/n100.r06.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s063_output/n100.r06.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s063_output/n100.r06.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s063_output/n100.r06.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s063_output/n100.r06.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s063_output/n100.r06.s063.reference.fas" "n100.r06.s063_output/n100.r06.s063.fq1.fastq" "n100.r06.s063_output/n100.r06.s063.fq2.fastq" | samtools view -bS - > "n100.r06.s063_output/n100.r06.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s063_output/n100.r06.s063.untrimmed.sorted.bam" "n100.r06.s063_output/n100.r06.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s063_output/n100.r06.s063.untrimmed.sorted.bam" -b "n100.r06.s063_output/n100.r06.s063.primers.bed" -p "n100.r06.s063_output/n100.r06.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" "n100.r06.s063_output/n100.r06.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s063_output/n100.r06.s063.reference.fas" "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" > "n100.r06.s063_output/n100.r06.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s063_output/n100.r06.s063.reference.fas" --call-indels "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" > "n100.r06.s063_output/n100.r06.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s063_output/n100.r06.s063.trimmed.sorted.bam" > "n100.r06.s063_output/n100.r06.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s063_output/n100.r06.s063.depth.txt" "n100.r06.s063_output/n100.r06.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s063_output/n100.r06.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s063_output/n100.r06.s063.reference.fas" | bcftools consensus -m "n100.r06.s063_output/n100.r06.s063.low_depth.tsv" tmp.vcf.gz > "n100.r06.s063_output/n100.r06.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7d0e33ba1e6cb82ab605afc094b8ff80bb18a67c7afddfca7e6deef70bc6efb1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.7MiB max=128.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=1.0KiB
2021/07/08 17:11:34 scheduler task 0805eaf5 (flow 27a353a6): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s063.tar.gz resources {}
2021/07/08 17:11:34  ->  n100.r06.s063.Main.cp_out_file 27a353a6 exec extern s3://niema-test/n100/r06/n100.r06.s063.tar.gz 35.7MiB
2021/07/08 17:11:34 scheduler task 625453dd (flow 0088c4ca): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:34 scheduler task 625453dd (flow 0088c4ca): promoting objects (try 0): started
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): retrieving diagnostic output (try 0): started
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): retrieving result (try 0): started
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): transferring output (try 0): started
2021/07/08 17:11:35 scheduler task 0805eaf5 (flow 27a353a6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7d0e33ba1e6cb82ab605afc094b8ff80bb18a67c7afddfca7e6deef70bc6efb1 -> s3://niema-test/n100/r06/n100.r06.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:35  <-  n100.r06.s063.Main.cp_out_file 27a353a6 ok   extern 0s 35.7MiB
2021/07/08 17:11:35 scheduler task aef1ea0c (flow d7bcee4f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:35 scheduler task aef1ea0c (flow d7bcee4f): promoting objects (try 0): started
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): unloading (try 0): started
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): unloading list<val<.=bdd9d9bb 35.8MiB> 35.8MiB>
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): unloading val<.=18819991 35.4MiB>
2021/07/08 17:11:35 scheduler task 625453dd (flow 0088c4ca): unloading val<.=91ccc030 35.4MiB>
2021/07/08 17:11:35 scheduler task aef1ea0c (flow d7bcee4f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:35 scheduler task aef1ea0c (flow d7bcee4f): retrieving diagnostic output (try 0): started
2021/07/08 17:11:36 scheduler task 625453dd (flow 0088c4ca): unloaded val<.=91ccc030 35.4MiB>
2021/07/08 17:11:36 scheduler task 625453dd (flow 0088c4ca): unloaded list<val<.=bdd9d9bb 35.8MiB> 35.8MiB>
2021/07/08 17:11:36 scheduler task 625453dd (flow 0088c4ca): unloaded val<.=18819991 35.4MiB>
2021/07/08 17:11:36 scheduler task 625453dd (flow 0088c4ca): unloading (try 0): successful, next state: complete
2021/07/08 17:11:36  <-  n100.r06.s034.Main.out_file 0088c4ca ok     exec 4m50s 35.8MiB
2021/07/08 17:11:36 n100.r06.s034.Main.out_file 0088c4ca n100/r06/n100.r06.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f28bb2915d607c1dc18d8f675bb3f8a8e2467c204d0a30aa31892c6be67317d4
	sha256:0088c4ca2916556aa36b443131d2b8e2dfc8cec34a6f0c2a2d2e7478b47bedf8
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/625453dd95b5440de36739dd8bb9aac4d36bf7a142e09f3b40bc774dec1265c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s034_output"
	    wget -O "n100.r06.s034_output/n100.r06.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s034_output/n100.r06.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s034_output/n100.r06.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s034_output/n100.r06.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s034_output/n100.r06.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s034_output/n100.r06.s034.reference.fas" "n100.r06.s034_output/n100.r06.s034.fq1.fastq" "n100.r06.s034_output/n100.r06.s034.fq2.fastq" | samtools view -bS - > "n100.r06.s034_output/n100.r06.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s034_output/n100.r06.s034.untrimmed.sorted.bam" "n100.r06.s034_output/n100.r06.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s034_output/n100.r06.s034.untrimmed.sorted.bam" -b "n100.r06.s034_output/n100.r06.s034.primers.bed" -p "n100.r06.s034_output/n100.r06.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" "n100.r06.s034_output/n100.r06.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s034_output/n100.r06.s034.reference.fas" "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" > "n100.r06.s034_output/n100.r06.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s034_output/n100.r06.s034.reference.fas" --call-indels "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" > "n100.r06.s034_output/n100.r06.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s034_output/n100.r06.s034.trimmed.sorted.bam" > "n100.r06.s034_output/n100.r06.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s034_output/n100.r06.s034.depth.txt" "n100.r06.s034_output/n100.r06.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s034_output/n100.r06.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s034_output/n100.r06.s034.reference.fas" | bcftools consensus -m "n100.r06.s034_output/n100.r06.s034.low_depth.tsv" tmp.vcf.gz > "n100.r06.s034_output/n100.r06.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bdd9d9bb567e2af60043593eb1a4d0b78bd9eae0471336c0663f9fda2d2f21af 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=127.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:36 scheduler task 0a8a4fce (flow 1849aa8b): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s034.tar.gz resources {}
2021/07/08 17:11:36  ->  n100.r06.s034.Main.cp_out_file 1849aa8b exec extern s3://niema-test/n100/r06/n100.r06.s034.tar.gz 35.8MiB
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): retrieving result (try 0): started
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): transferring output (try 0): started
2021/07/08 17:11:36 scheduler task 0a8a4fce (flow 1849aa8b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bdd9d9bb567e2af60043593eb1a4d0b78bd9eae0471336c0663f9fda2d2f21af -> s3://niema-test/n100/r06/n100.r06.s034.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:36  <-  n100.r06.s034.Main.cp_out_file 1849aa8b ok   extern 0s 35.8MiB
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloading (try 0): started
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloading list<val<.=1d6b0235 35.7MiB> 35.7MiB>
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloading val<.=a32f10c6 35.4MiB>
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloading val<.=d065a3b3 35.4MiB>
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloaded val<.=d065a3b3 35.4MiB>
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloaded list<val<.=1d6b0235 35.7MiB> 35.7MiB>
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloaded val<.=a32f10c6 35.4MiB>
2021/07/08 17:11:36 scheduler task aef1ea0c (flow d7bcee4f): unloading (try 0): successful, next state: complete
2021/07/08 17:11:36  <-  n100.r06.s001.Main.out_file d7bcee4f ok     exec 4m51s 35.7MiB
2021/07/08 17:11:36 n100.r06.s001.Main.out_file d7bcee4f n100/r06/n100.r06.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:683bb0c84d241236f3537f183d340ae8b75cc505d19b6bb72c27439650fcf6a6
	sha256:d7bcee4fda3b05ca94ad5fc04427ab6ee9d44bae6dd2ddd2519533bb5fef6100
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aef1ea0ce75cc4d14eb79b1178b007c550d5cf31c7e1c8baccee0bd96549a228
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s001_output"
	    wget -O "n100.r06.s001_output/n100.r06.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s001_output/n100.r06.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s001_output/n100.r06.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s001_output/n100.r06.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s001_output/n100.r06.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s001_output/n100.r06.s001.reference.fas" "n100.r06.s001_output/n100.r06.s001.fq1.fastq" "n100.r06.s001_output/n100.r06.s001.fq2.fastq" | samtools view -bS - > "n100.r06.s001_output/n100.r06.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s001_output/n100.r06.s001.untrimmed.sorted.bam" "n100.r06.s001_output/n100.r06.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s001_output/n100.r06.s001.untrimmed.sorted.bam" -b "n100.r06.s001_output/n100.r06.s001.primers.bed" -p "n100.r06.s001_output/n100.r06.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" "n100.r06.s001_output/n100.r06.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s001_output/n100.r06.s001.reference.fas" "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" > "n100.r06.s001_output/n100.r06.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s001_output/n100.r06.s001.reference.fas" --call-indels "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" > "n100.r06.s001_output/n100.r06.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s001_output/n100.r06.s001.trimmed.sorted.bam" > "n100.r06.s001_output/n100.r06.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s001_output/n100.r06.s001.depth.txt" "n100.r06.s001_output/n100.r06.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s001_output/n100.r06.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s001_output/n100.r06.s001.reference.fas" | bcftools consensus -m "n100.r06.s001_output/n100.r06.s001.low_depth.tsv" tmp.vcf.gz > "n100.r06.s001_output/n100.r06.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1d6b0235d54bc75888d1bbedf4b0e5d08c665bf53387fcee0c3abc75569f842e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=128.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:11:36 scheduler task 0c49b56b (flow 47f7ae31): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s001.tar.gz resources {}
2021/07/08 17:11:36  ->  n100.r06.s001.Main.cp_out_file 47f7ae31 exec extern s3://niema-test/n100/r06/n100.r06.s001.tar.gz 35.7MiB
2021/07/08 17:11:37 scheduler task 0c49b56b (flow 47f7ae31): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1d6b0235d54bc75888d1bbedf4b0e5d08c665bf53387fcee0c3abc75569f842e -> s3://niema-test/n100/r06/n100.r06.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:37  <-  n100.r06.s001.Main.cp_out_file 47f7ae31 ok   extern 0s 35.7MiB
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): promoting objects (try 0): started
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): retrieving diagnostic output (try 0): started
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): retrieving result (try 0): started
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): transferring output (try 0): started
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): unloading (try 0): started
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): unloading list<val<.=baa4f48c 35.8MiB> 35.8MiB>
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): unloading val<.=f135a24c 35.4MiB>
2021/07/08 17:11:38 scheduler task 5bab0f48 (flow ed96eb31): unloading val<.=58a19e69 35.4MiB>
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): promoting objects (try 0): started
2021/07/08 17:11:39 scheduler task 5bab0f48 (flow ed96eb31): unloaded val<.=58a19e69 35.4MiB>
2021/07/08 17:11:39 scheduler task 5bab0f48 (flow ed96eb31): unloaded list<val<.=baa4f48c 35.8MiB> 35.8MiB>
2021/07/08 17:11:39 scheduler task 5bab0f48 (flow ed96eb31): unloaded val<.=f135a24c 35.4MiB>
2021/07/08 17:11:39 scheduler task 5bab0f48 (flow ed96eb31): unloading (try 0): successful, next state: complete
2021/07/08 17:11:39  <-  n100.r06.s086.Main.out_file ed96eb31 ok     exec 4m54s 35.8MiB
2021/07/08 17:11:39 n100.r06.s086.Main.out_file ed96eb31 n100/r06/n100.r06.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a4daabae0e32e6234d40ace7a99b9624c62406b6811381dc812fb15ca37fe9c
	sha256:ed96eb312ba9318759318cd7e55e35a2e540fe4b0c690b69b2b261164c536ab6
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bab0f485cfc1e7d768a26c497ac65da140254dc1061f7c3e200073b5b85af54
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s086_output"
	    wget -O "n100.r06.s086_output/n100.r06.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s086_output/n100.r06.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s086_output/n100.r06.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s086_output/n100.r06.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s086_output/n100.r06.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s086_output/n100.r06.s086.reference.fas" "n100.r06.s086_output/n100.r06.s086.fq1.fastq" "n100.r06.s086_output/n100.r06.s086.fq2.fastq" | samtools view -bS - > "n100.r06.s086_output/n100.r06.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s086_output/n100.r06.s086.untrimmed.sorted.bam" "n100.r06.s086_output/n100.r06.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s086_output/n100.r06.s086.untrimmed.sorted.bam" -b "n100.r06.s086_output/n100.r06.s086.primers.bed" -p "n100.r06.s086_output/n100.r06.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" "n100.r06.s086_output/n100.r06.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s086_output/n100.r06.s086.reference.fas" "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" > "n100.r06.s086_output/n100.r06.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s086_output/n100.r06.s086.reference.fas" --call-indels "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" > "n100.r06.s086_output/n100.r06.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s086_output/n100.r06.s086.trimmed.sorted.bam" > "n100.r06.s086_output/n100.r06.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s086_output/n100.r06.s086.depth.txt" "n100.r06.s086_output/n100.r06.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s086_output/n100.r06.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s086_output/n100.r06.s086.reference.fas" | bcftools consensus -m "n100.r06.s086_output/n100.r06.s086.low_depth.tsv" tmp.vcf.gz > "n100.r06.s086_output/n100.r06.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:baa4f48c47f341a40853692b97d195056eaf7a5981ed678e363784e69ecce776 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=127.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:11:39 scheduler task 1c0c257b (flow 61d3c5e8): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s086.tar.gz resources {}
2021/07/08 17:11:39  ->  n100.r06.s086.Main.cp_out_file 61d3c5e8 exec extern s3://niema-test/n100/r06/n100.r06.s086.tar.gz 35.8MiB
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): promoting objects (try 0): started
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): retrieving diagnostic output (try 0): started
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): retrieving diagnostic output (try 0): started
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): retrieving result (try 0): started
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): retrieving result (try 0): started
2021/07/08 17:11:39 scheduler task 18412571 (flow e7209bac): transferring output (try 0): started
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:39 scheduler task e671b3d5 (flow e2cc75f4): transferring output (try 0): started
2021/07/08 17:11:39 scheduler task 1c0c257b (flow 61d3c5e8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:baa4f48c47f341a40853692b97d195056eaf7a5981ed678e363784e69ecce776 -> s3://niema-test/n100/r06/n100.r06.s086.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:39  <-  n100.r06.s086.Main.cp_out_file 61d3c5e8 ok   extern 0s 35.8MiB
2021/07/08 17:11:39 scheduler task b9606491 (flow f9a07ecc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:39 scheduler task b9606491 (flow f9a07ecc): promoting objects (try 0): started
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): retrieving diagnostic output (try 0): started
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): retrieving result (try 0): started
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): transferring output (try 0): started
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): promoting objects (try 0): started
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): promoting objects (try 0): started
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): retrieving diagnostic output (try 0): started
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): retrieving diagnostic output (try 0): started
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): retrieving result (try 0): started
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloading (try 0): started
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloading list<val<.=6e2ceee9 35.7MiB> 35.7MiB>
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloading val<.=81276bd6 35.4MiB>
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloading val<.=59f5690a 35.4MiB>
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): retrieving result (try 0): started
2021/07/08 17:11:40 scheduler task 95bbbc50 (flow 080658ce): transferring output (try 0): started
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloading (try 0): started
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloading list<val<.=7f1ac774 35.7MiB> 35.7MiB>
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloading val<.=5c013856 35.4MiB>
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloading val<.=84e48c4d 35.4MiB>
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloaded list<val<.=6e2ceee9 35.7MiB> 35.7MiB>
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloaded val<.=59f5690a 35.4MiB>
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloaded val<.=81276bd6 35.4MiB>
2021/07/08 17:11:40 scheduler task 18412571 (flow e7209bac): unloading (try 0): successful, next state: complete
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:40  <-  n100.r06.s051.Main.out_file e7209bac ok     exec 4m54s 35.7MiB
2021/07/08 17:11:40 n100.r06.s051.Main.out_file e7209bac n100/r06/n100.r06.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:574bcf63f63444926fa2cd62e48c3d6e1cd9f7bf8dd03ab93f140a7b3a8f46da
	sha256:e7209bac11c154fe8dbcae199ce5d04e8cab265785b838f85b0ee13587b5621a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1841257154907636edcfcd9299778e7c94bf1931d9a436e2ab94d0d0a95b142e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s051_output"
	    wget -O "n100.r06.s051_output/n100.r06.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s051_output/n100.r06.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s051_output/n100.r06.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s051_output/n100.r06.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s051_output/n100.r06.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s051_output/n100.r06.s051.reference.fas" "n100.r06.s051_output/n100.r06.s051.fq1.fastq" "n100.r06.s051_output/n100.r06.s051.fq2.fastq" | samtools view -bS - > "n100.r06.s051_output/n100.r06.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s051_output/n100.r06.s051.untrimmed.sorted.bam" "n100.r06.s051_output/n100.r06.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s051_output/n100.r06.s051.untrimmed.sorted.bam" -b "n100.r06.s051_output/n100.r06.s051.primers.bed" -p "n100.r06.s051_output/n100.r06.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" "n100.r06.s051_output/n100.r06.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s051_output/n100.r06.s051.reference.fas" "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" > "n100.r06.s051_output/n100.r06.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s051_output/n100.r06.s051.reference.fas" --call-indels "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" > "n100.r06.s051_output/n100.r06.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s051_output/n100.r06.s051.trimmed.sorted.bam" > "n100.r06.s051_output/n100.r06.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s051_output/n100.r06.s051.depth.txt" "n100.r06.s051_output/n100.r06.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s051_output/n100.r06.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s051_output/n100.r06.s051.reference.fas" | bcftools consensus -m "n100.r06.s051_output/n100.r06.s051.low_depth.tsv" tmp.vcf.gz > "n100.r06.s051_output/n100.r06.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6e2ceee9348dd918ac77086cae5600b32d317329a509c4688b0a810cf2ad8c81 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=128.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:40 scheduler task 79ed700b (flow 1ca107b2): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s051.tar.gz resources {}
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:40  ->  n100.r06.s051.Main.cp_out_file 1ca107b2 exec extern s3://niema-test/n100/r06/n100.r06.s051.tar.gz 35.7MiB
2021/07/08 17:11:40 scheduler task 4cea0c9b (flow 109c7075): transferring output (try 0): started
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): unloading (try 0): started
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): unloading list<val<.=539e81e9 35.7MiB> 35.7MiB>
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): unloading val<.=6f8be0c2 35.4MiB>
2021/07/08 17:11:40 scheduler task b9606491 (flow f9a07ecc): unloading val<.=17c4ef1e 35.4MiB>
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloaded val<.=5c013856 35.4MiB>
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloaded list<val<.=7f1ac774 35.7MiB> 35.7MiB>
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloaded val<.=84e48c4d 35.4MiB>
2021/07/08 17:11:40 scheduler task e671b3d5 (flow e2cc75f4): unloading (try 0): successful, next state: complete
2021/07/08 17:11:41  <-  n100.r06.s082.Main.out_file e2cc75f4 ok     exec 4m55s 35.7MiB
2021/07/08 17:11:41 n100.r06.s082.Main.out_file e2cc75f4 n100/r06/n100.r06.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fa73ccac7e40a1492b806775b3d3b8d02f9959f2f10280ffc7bc12bb660acbe4
	sha256:e2cc75f48094ac7554905ce766b977f575e7d4d5e88907e33dd84e9ff53878ce
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e671b3d52575a5cda1882f0aab6843f5d34c26195b474375c2fa6dd2e389325b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s082_output"
	    wget -O "n100.r06.s082_output/n100.r06.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s082_output/n100.r06.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s082_output/n100.r06.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s082_output/n100.r06.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s082_output/n100.r06.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s082_output/n100.r06.s082.reference.fas" "n100.r06.s082_output/n100.r06.s082.fq1.fastq" "n100.r06.s082_output/n100.r06.s082.fq2.fastq" | samtools view -bS - > "n100.r06.s082_output/n100.r06.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s082_output/n100.r06.s082.untrimmed.sorted.bam" "n100.r06.s082_output/n100.r06.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s082_output/n100.r06.s082.untrimmed.sorted.bam" -b "n100.r06.s082_output/n100.r06.s082.primers.bed" -p "n100.r06.s082_output/n100.r06.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" "n100.r06.s082_output/n100.r06.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s082_output/n100.r06.s082.reference.fas" "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" > "n100.r06.s082_output/n100.r06.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s082_output/n100.r06.s082.reference.fas" --call-indels "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" > "n100.r06.s082_output/n100.r06.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s082_output/n100.r06.s082.trimmed.sorted.bam" > "n100.r06.s082_output/n100.r06.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s082_output/n100.r06.s082.depth.txt" "n100.r06.s082_output/n100.r06.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s082_output/n100.r06.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s082_output/n100.r06.s082.reference.fas" | bcftools consensus -m "n100.r06.s082_output/n100.r06.s082.low_depth.tsv" tmp.vcf.gz > "n100.r06.s082_output/n100.r06.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7f1ac7740819b0e79f80438172f8b69d5e0906cf3af9e723f3b3c3cf1c3cf8f0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=129.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:41 scheduler task 7574bd3b (flow 8f390d45): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s082.tar.gz resources {}
2021/07/08 17:11:41  ->  n100.r06.s082.Main.cp_out_file 8f390d45 exec extern s3://niema-test/n100/r06/n100.r06.s082.tar.gz 35.7MiB
2021/07/08 17:11:41 scheduler task b9606491 (flow f9a07ecc): unloaded val<.=6f8be0c2 35.4MiB>
2021/07/08 17:11:41 scheduler task b9606491 (flow f9a07ecc): unloaded val<.=17c4ef1e 35.4MiB>
2021/07/08 17:11:41 scheduler task b9606491 (flow f9a07ecc): unloaded list<val<.=539e81e9 35.7MiB> 35.7MiB>
2021/07/08 17:11:41 scheduler task b9606491 (flow f9a07ecc): unloading (try 0): successful, next state: complete
2021/07/08 17:11:41  <-  n100.r06.s022.Main.out_file f9a07ecc ok     exec 4m55s 35.7MiB
2021/07/08 17:11:41 n100.r06.s022.Main.out_file f9a07ecc n100/r06/n100.r06.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2bbd4ff0ada3b6fe002b6de2dd577988f9e03e51da316ad30527fb35f6858edd
	sha256:f9a07ecc49d856a27fa9a86f2172f9e708406b5e6355b1b16df7c33b350540db
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b9606491ba584898a48e66597dbf76fa3109b8ca700e4fd3a5baa44f37f2b2d0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s022_output"
	    wget -O "n100.r06.s022_output/n100.r06.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s022_output/n100.r06.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s022_output/n100.r06.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s022_output/n100.r06.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s022_output/n100.r06.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s022_output/n100.r06.s022.reference.fas" "n100.r06.s022_output/n100.r06.s022.fq1.fastq" "n100.r06.s022_output/n100.r06.s022.fq2.fastq" | samtools view -bS - > "n100.r06.s022_output/n100.r06.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s022_output/n100.r06.s022.untrimmed.sorted.bam" "n100.r06.s022_output/n100.r06.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s022_output/n100.r06.s022.untrimmed.sorted.bam" -b "n100.r06.s022_output/n100.r06.s022.primers.bed" -p "n100.r06.s022_output/n100.r06.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" "n100.r06.s022_output/n100.r06.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s022_output/n100.r06.s022.reference.fas" "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" > "n100.r06.s022_output/n100.r06.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s022_output/n100.r06.s022.reference.fas" --call-indels "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" > "n100.r06.s022_output/n100.r06.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s022_output/n100.r06.s022.trimmed.sorted.bam" > "n100.r06.s022_output/n100.r06.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s022_output/n100.r06.s022.depth.txt" "n100.r06.s022_output/n100.r06.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s022_output/n100.r06.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s022_output/n100.r06.s022.reference.fas" | bcftools consensus -m "n100.r06.s022_output/n100.r06.s022.low_depth.tsv" tmp.vcf.gz > "n100.r06.s022_output/n100.r06.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:539e81e97d71ac12122c1d602c2270dbe4c392c5ea9058691ad4fe19f8d75c23 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=126.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:41 scheduler task b329418c (flow a8635c60): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s022.tar.gz resources {}
2021/07/08 17:11:41  ->  n100.r06.s022.Main.cp_out_file a8635c60 exec extern s3://niema-test/n100/r06/n100.r06.s022.tar.gz 35.7MiB
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloading (try 0): started
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloading list<val<.=2dbe45c2 35.8MiB> 35.8MiB>
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloading val<.=5c9ed4ca 35.4MiB>
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloading val<.=4ae6acb6 35.4MiB>
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloaded list<val<.=2dbe45c2 35.8MiB> 35.8MiB>
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloaded val<.=5c9ed4ca 35.4MiB>
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloaded val<.=4ae6acb6 35.4MiB>
2021/07/08 17:11:41 scheduler task 95bbbc50 (flow 080658ce): unloading (try 0): successful, next state: complete
2021/07/08 17:11:41  <-  n100.r06.s071.Main.out_file 080658ce ok     exec 4m56s 35.8MiB
2021/07/08 17:11:41 n100.r06.s071.Main.out_file 080658ce n100/r06/n100.r06.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2121952f16ba00682ebf1cdb9c0449070f519ff5b1cf40e9b5eaf78de807f1a4
	sha256:080658ce5ab85f6627d15d2012894718c14fbad95b0af2ca3c5b2bd93b59c4bc
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95bbbc500dc18543daff915a3f2ff79b55b38768bec08d4614d15748a7698085
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s071_output"
	    wget -O "n100.r06.s071_output/n100.r06.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s071_output/n100.r06.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s071_output/n100.r06.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s071_output/n100.r06.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s071_output/n100.r06.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s071_output/n100.r06.s071.reference.fas" "n100.r06.s071_output/n100.r06.s071.fq1.fastq" "n100.r06.s071_output/n100.r06.s071.fq2.fastq" | samtools view -bS - > "n100.r06.s071_output/n100.r06.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s071_output/n100.r06.s071.untrimmed.sorted.bam" "n100.r06.s071_output/n100.r06.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s071_output/n100.r06.s071.untrimmed.sorted.bam" -b "n100.r06.s071_output/n100.r06.s071.primers.bed" -p "n100.r06.s071_output/n100.r06.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" "n100.r06.s071_output/n100.r06.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s071_output/n100.r06.s071.reference.fas" "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" > "n100.r06.s071_output/n100.r06.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s071_output/n100.r06.s071.reference.fas" --call-indels "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" > "n100.r06.s071_output/n100.r06.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s071_output/n100.r06.s071.trimmed.sorted.bam" > "n100.r06.s071_output/n100.r06.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s071_output/n100.r06.s071.depth.txt" "n100.r06.s071_output/n100.r06.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s071_output/n100.r06.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s071_output/n100.r06.s071.reference.fas" | bcftools consensus -m "n100.r06.s071_output/n100.r06.s071.low_depth.tsv" tmp.vcf.gz > "n100.r06.s071_output/n100.r06.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2dbe45c2fc2d0be76810c04ec28aba06001e76e49de0028167784d66705d3b9d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=127.4MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:11:41 scheduler task 6a6bc449 (flow fc4223aa): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s071.tar.gz resources {}
2021/07/08 17:11:41  ->  n100.r06.s071.Main.cp_out_file fc4223aa exec extern s3://niema-test/n100/r06/n100.r06.s071.tar.gz 35.8MiB
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloading (try 0): started
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloading list<val<.=eedfbe36 35.7MiB> 35.7MiB>
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloading val<.=d33f8448 35.4MiB>
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloading val<.=099aef25 35.4MiB>
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloaded val<.=099aef25 35.4MiB>
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloaded val<.=d33f8448 35.4MiB>
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloaded list<val<.=eedfbe36 35.7MiB> 35.7MiB>
2021/07/08 17:11:41 scheduler task 4cea0c9b (flow 109c7075): unloading (try 0): successful, next state: complete
2021/07/08 17:11:41  <-  n100.r06.s018.Main.out_file 109c7075 ok     exec 4m56s 35.7MiB
2021/07/08 17:11:41 n100.r06.s018.Main.out_file 109c7075 n100/r06/n100.r06.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fd9c209201f0e09bd4ad46e8eaa6658f62ed1399f5b6ad936f4b6872c7d271e
	sha256:109c70750ddecd946e6cf3a630a6ee9349983283c6364ea7986a7bea7d48fded
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4cea0c9b9913a0148825f30743cc1c1862a6a33a68ff6ba6a6409c7eaed73fdb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s018_output"
	    wget -O "n100.r06.s018_output/n100.r06.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s018_output/n100.r06.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s018_output/n100.r06.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s018_output/n100.r06.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s018_output/n100.r06.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s018_output/n100.r06.s018.reference.fas" "n100.r06.s018_output/n100.r06.s018.fq1.fastq" "n100.r06.s018_output/n100.r06.s018.fq2.fastq" | samtools view -bS - > "n100.r06.s018_output/n100.r06.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s018_output/n100.r06.s018.untrimmed.sorted.bam" "n100.r06.s018_output/n100.r06.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s018_output/n100.r06.s018.untrimmed.sorted.bam" -b "n100.r06.s018_output/n100.r06.s018.primers.bed" -p "n100.r06.s018_output/n100.r06.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" "n100.r06.s018_output/n100.r06.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s018_output/n100.r06.s018.reference.fas" "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" > "n100.r06.s018_output/n100.r06.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s018_output/n100.r06.s018.reference.fas" --call-indels "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" > "n100.r06.s018_output/n100.r06.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s018_output/n100.r06.s018.trimmed.sorted.bam" > "n100.r06.s018_output/n100.r06.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s018_output/n100.r06.s018.depth.txt" "n100.r06.s018_output/n100.r06.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s018_output/n100.r06.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s018_output/n100.r06.s018.reference.fas" | bcftools consensus -m "n100.r06.s018_output/n100.r06.s018.low_depth.tsv" tmp.vcf.gz > "n100.r06.s018_output/n100.r06.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eedfbe3651d6845a1dbbd01a93bf6c988cf4168a0ebd3f8346256025416930cf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=129.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:11:41 scheduler task 17f4af6c (flow 4e8bc7b7): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s018.tar.gz resources {}
2021/07/08 17:11:41  ->  n100.r06.s018.Main.cp_out_file 4e8bc7b7 exec extern s3://niema-test/n100/r06/n100.r06.s018.tar.gz 35.7MiB
2021/07/08 17:11:41 scheduler task 79ed700b (flow 1ca107b2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6e2ceee9348dd918ac77086cae5600b32d317329a509c4688b0a810cf2ad8c81 -> s3://niema-test/n100/r06/n100.r06.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:41  <-  n100.r06.s051.Main.cp_out_file 1ca107b2 ok   extern 0s 35.7MiB
2021/07/08 17:11:41 scheduler task 6f2866a3 (flow 34528a24): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:41 scheduler task 6f2866a3 (flow 34528a24): promoting objects (try 0): started
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): promoting objects (try 0): started
2021/07/08 17:11:42 scheduler task 6f2866a3 (flow 34528a24): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:42 scheduler task 6f2866a3 (flow 34528a24): retrieving diagnostic output (try 0): started
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): promoting objects (try 0): started
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:42 scheduler task 7574bd3b (flow 8f390d45): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7f1ac7740819b0e79f80438172f8b69d5e0906cf3af9e723f3b3c3cf1c3cf8f0 -> s3://niema-test/n100/r06/n100.r06.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:42  <-  n100.r06.s082.Main.cp_out_file 8f390d45 ok   extern 0s 35.7MiB
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): retrieving diagnostic output (try 0): started
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:42 scheduler task 6f2866a3 (flow 34528a24): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): retrieving diagnostic output (try 0): started
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): promoting objects (try 0): started
2021/07/08 17:11:42 scheduler task 6f2866a3 (flow 34528a24): retrieving result (try 0): started
2021/07/08 17:11:42 scheduler task b329418c (flow a8635c60): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:539e81e97d71ac12122c1d602c2270dbe4c392c5ea9058691ad4fe19f8d75c23 -> s3://niema-test/n100/r06/n100.r06.s022.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:42  <-  n100.r06.s022.Main.cp_out_file a8635c60 ok   extern 0s 35.7MiB
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): promoting objects (try 0): started
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): retrieving result (try 0): started
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:42 scheduler task 6f2866a3 (flow 34528a24): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): retrieving diagnostic output (try 0): started
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): retrieving result (try 0): started
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:42 scheduler task 6f2866a3 (flow 34528a24): transferring output (try 0): started
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): retrieving diagnostic output (try 0): started
2021/07/08 17:11:42 scheduler task 3205c8c6 (flow 6a43092a): transferring output (try 0): started
2021/07/08 17:11:42 scheduler task 6a6bc449 (flow fc4223aa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2dbe45c2fc2d0be76810c04ec28aba06001e76e49de0028167784d66705d3b9d -> s3://niema-test/n100/r06/n100.r06.s071.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:42  <-  n100.r06.s071.Main.cp_out_file fc4223aa ok   extern 0s 35.8MiB
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:42 scheduler task e737ca8f (flow 4bc88741): transferring output (try 0): started
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): retrieving result (try 0): started
2021/07/08 17:11:42 scheduler task 17f4af6c (flow 4e8bc7b7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eedfbe3651d6845a1dbbd01a93bf6c988cf4168a0ebd3f8346256025416930cf -> s3://niema-test/n100/r06/n100.r06.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:42  <-  n100.r06.s018.Main.cp_out_file 4e8bc7b7 ok   extern 0s 35.7MiB
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): retrieving result (try 0): started
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:42 scheduler task c3f45696 (flow d8bb6c45): transferring output (try 0): started
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:42 scheduler task e15277a8 (flow c9e40fed): transferring output (try 0): started
2021/07/08 17:11:42 scheduler task f8df3480 (flow 502645a1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:42 scheduler task f8df3480 (flow 502645a1): promoting objects (try 0): started
2021/07/08 17:11:42 scheduler task f8df3480 (flow 502645a1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:42 scheduler task f8df3480 (flow 502645a1): retrieving diagnostic output (try 0): started
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloading (try 0): started
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloading list<val<.=da2109f2 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloading val<.=48f8c623 35.4MiB>
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloading val<.=a0f0baeb 35.4MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): retrieving result (try 0): started
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloading (try 0): started
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloading list<val<.=f100b6dd 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloading val<.=53394b1e 35.4MiB>
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloading val<.=f3d607f0 35.4MiB>
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloaded val<.=48f8c623 35.4MiB>
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloaded val<.=a0f0baeb 35.4MiB>
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloaded list<val<.=da2109f2 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task 3205c8c6 (flow 6a43092a): unloading (try 0): successful, next state: complete
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloading (try 0): started
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloading list<val<.=1da819c3 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloading val<.=19fc314f 35.4MiB>
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloading val<.=0c6deac6 35.4MiB>
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloading (try 0): started
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloading list<val<.=85b8de16 35.8MiB> 35.8MiB>
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloading val<.=ff49255a 35.4MiB>
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloading val<.=15c5bdb7 35.4MiB>
2021/07/08 17:11:43  <-  n100.r06.s023.Main.out_file 6a43092a ok     exec 4m57s 35.7MiB
2021/07/08 17:11:43 n100.r06.s023.Main.out_file 6a43092a n100/r06/n100.r06.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9b49f564806ffad19dd84c8a62187fad6ab6f64d1a63d27baee048d4b9ed1c5d
	sha256:6a43092a656e2c586176c6b5b46a18a3d896303a1062091e7c3ef179a0234271
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3205c8c6e4314460aa5661af0ac556520adc27d397c82fb85a41fad18341e812
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s023_output"
	    wget -O "n100.r06.s023_output/n100.r06.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s023_output/n100.r06.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s023_output/n100.r06.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s023_output/n100.r06.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s023_output/n100.r06.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s023_output/n100.r06.s023.reference.fas" "n100.r06.s023_output/n100.r06.s023.fq1.fastq" "n100.r06.s023_output/n100.r06.s023.fq2.fastq" | samtools view -bS - > "n100.r06.s023_output/n100.r06.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s023_output/n100.r06.s023.untrimmed.sorted.bam" "n100.r06.s023_output/n100.r06.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s023_output/n100.r06.s023.untrimmed.sorted.bam" -b "n100.r06.s023_output/n100.r06.s023.primers.bed" -p "n100.r06.s023_output/n100.r06.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" "n100.r06.s023_output/n100.r06.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s023_output/n100.r06.s023.reference.fas" "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" > "n100.r06.s023_output/n100.r06.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s023_output/n100.r06.s023.reference.fas" --call-indels "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" > "n100.r06.s023_output/n100.r06.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s023_output/n100.r06.s023.trimmed.sorted.bam" > "n100.r06.s023_output/n100.r06.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s023_output/n100.r06.s023.depth.txt" "n100.r06.s023_output/n100.r06.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s023_output/n100.r06.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s023_output/n100.r06.s023.reference.fas" | bcftools consensus -m "n100.r06.s023_output/n100.r06.s023.low_depth.tsv" tmp.vcf.gz > "n100.r06.s023_output/n100.r06.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:da2109f2bcad80c87cc9cca1263fcae510440ad8eeeee064b3e5e05f0e9683ba 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=126.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:11:43 scheduler task e88c613b (flow 6e54b48f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s023.tar.gz resources {}
2021/07/08 17:11:43  ->  n100.r06.s023.Main.cp_out_file 6e54b48f exec extern s3://niema-test/n100/r06/n100.r06.s023.tar.gz 35.7MiB
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): transferring output (try 0): started
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloading (try 0): started
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloading list<val<.=561c8a5f 35.8MiB> 35.8MiB>
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloading val<.=65925390 35.4MiB>
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloading val<.=c9bb508d 35.4MiB>
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloaded list<val<.=f100b6dd 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloaded val<.=53394b1e 35.4MiB>
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloaded val<.=19fc314f 35.4MiB>
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloaded val<.=f3d607f0 35.4MiB>
2021/07/08 17:11:43 scheduler task 6f2866a3 (flow 34528a24): unloading (try 0): successful, next state: complete
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloaded val<.=0c6deac6 35.4MiB>
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloaded list<val<.=1da819c3 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task c3f45696 (flow d8bb6c45): unloading (try 0): successful, next state: complete
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloaded list<val<.=85b8de16 35.8MiB> 35.8MiB>
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloaded val<.=ff49255a 35.4MiB>
2021/07/08 17:11:43  <-  n100.r06.s053.Main.out_file 34528a24 ok     exec 4m58s 35.7MiB
2021/07/08 17:11:43 n100.r06.s053.Main.out_file 34528a24 n100/r06/n100.r06.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2974836e1eafb0582b24954acdc7739c5421ca9394791b338575891ab2b30513
	sha256:34528a24d28df290d7f41b83618cfe7a43d9c97f04de33241e3d46e76bb5128e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f2866a343206b4841b21923761898f5fa718d0d45546e9928e192e47227e670
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s053_output"
	    wget -O "n100.r06.s053_output/n100.r06.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s053_output/n100.r06.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s053_output/n100.r06.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s053_output/n100.r06.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s053_output/n100.r06.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s053_output/n100.r06.s053.reference.fas" "n100.r06.s053_output/n100.r06.s053.fq1.fastq" "n100.r06.s053_output/n100.r06.s053.fq2.fastq" | samtools view -bS - > "n100.r06.s053_output/n100.r06.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s053_output/n100.r06.s053.untrimmed.sorted.bam" "n100.r06.s053_output/n100.r06.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s053_output/n100.r06.s053.untrimmed.sorted.bam" -b "n100.r06.s053_output/n100.r06.s053.primers.bed" -p "n100.r06.s053_output/n100.r06.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" "n100.r06.s053_output/n100.r06.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s053_output/n100.r06.s053.reference.fas" "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" > "n100.r06.s053_output/n100.r06.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s053_output/n100.r06.s053.reference.fas" --call-indels "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" > "n100.r06.s053_output/n100.r06.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s053_output/n100.r06.s053.trimmed.sorted.bam" > "n100.r06.s053_output/n100.r06.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s053_output/n100.r06.s053.depth.txt" "n100.r06.s053_output/n100.r06.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s053_output/n100.r06.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s053_output/n100.r06.s053.reference.fas" | bcftools consensus -m "n100.r06.s053_output/n100.r06.s053.low_depth.tsv" tmp.vcf.gz > "n100.r06.s053_output/n100.r06.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f100b6dd91e13298f4e331f8531f46b1aeb817d3243d9cec523551d160c4e48f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=131.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 17:11:43 scheduler task 3b86ca5f (flow ff42d1bf): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s053.tar.gz resources {}
2021/07/08 17:11:43  ->  n100.r06.s053.Main.cp_out_file ff42d1bf exec extern s3://niema-test/n100/r06/n100.r06.s053.tar.gz 35.7MiB
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloaded val<.=15c5bdb7 35.4MiB>
2021/07/08 17:11:43 scheduler task e737ca8f (flow 4bc88741): unloading (try 0): successful, next state: complete
2021/07/08 17:11:43  <-  n100.r06.s090.Main.out_file d8bb6c45 ok     exec 4m57s 35.7MiB
2021/07/08 17:11:43 n100.r06.s090.Main.out_file d8bb6c45 n100/r06/n100.r06.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bceace940ff681107e2150942470a9c20c6550e6cfbecf87790fb6f8f30f85d1
	sha256:d8bb6c456c42314d7316d9f63b8b7152e698e160b088f798eb32651e614b50a7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3f45696ab20255e11a68e7615fa981d9f63d76c8819a2db53cb12fbe2ab0624
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s090_output"
	    wget -O "n100.r06.s090_output/n100.r06.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s090_output/n100.r06.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s090_output/n100.r06.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s090_output/n100.r06.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s090_output/n100.r06.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s090_output/n100.r06.s090.reference.fas" "n100.r06.s090_output/n100.r06.s090.fq1.fastq" "n100.r06.s090_output/n100.r06.s090.fq2.fastq" | samtools view -bS - > "n100.r06.s090_output/n100.r06.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s090_output/n100.r06.s090.untrimmed.sorted.bam" "n100.r06.s090_output/n100.r06.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s090_output/n100.r06.s090.untrimmed.sorted.bam" -b "n100.r06.s090_output/n100.r06.s090.primers.bed" -p "n100.r06.s090_output/n100.r06.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" "n100.r06.s090_output/n100.r06.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s090_output/n100.r06.s090.reference.fas" "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" > "n100.r06.s090_output/n100.r06.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s090_output/n100.r06.s090.reference.fas" --call-indels "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" > "n100.r06.s090_output/n100.r06.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s090_output/n100.r06.s090.trimmed.sorted.bam" > "n100.r06.s090_output/n100.r06.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s090_output/n100.r06.s090.depth.txt" "n100.r06.s090_output/n100.r06.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s090_output/n100.r06.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s090_output/n100.r06.s090.reference.fas" | bcftools consensus -m "n100.r06.s090_output/n100.r06.s090.low_depth.tsv" tmp.vcf.gz > "n100.r06.s090_output/n100.r06.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1da819c3a8acd5882dcf9985adbd5db3778f2e06147d988b7b6ecd919b8ffcfe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:43 scheduler task 8129af42 (flow 88a81b34): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s090.tar.gz resources {}
2021/07/08 17:11:43  ->  n100.r06.s090.Main.cp_out_file 88a81b34 exec extern s3://niema-test/n100/r06/n100.r06.s090.tar.gz 35.7MiB
2021/07/08 17:11:43  <-  n100.r06.s033.Main.out_file 4bc88741 ok     exec 4m58s 35.8MiB
2021/07/08 17:11:43 n100.r06.s033.Main.out_file 4bc88741 n100/r06/n100.r06.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5bc26f2cd2f309448b937df8733d17a5454a947ef64721baa60207fd082d4534
	sha256:4bc887412ba39d462d63887c2e0f926721e6426bb77c55d9332cb1c42e350bec
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e737ca8ff07c807ee4f0f214976a452013dc5b8db9c2f00c9fb8b6107e2b95a0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s033_output"
	    wget -O "n100.r06.s033_output/n100.r06.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s033_output/n100.r06.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s033_output/n100.r06.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s033_output/n100.r06.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s033_output/n100.r06.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s033_output/n100.r06.s033.reference.fas" "n100.r06.s033_output/n100.r06.s033.fq1.fastq" "n100.r06.s033_output/n100.r06.s033.fq2.fastq" | samtools view -bS - > "n100.r06.s033_output/n100.r06.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s033_output/n100.r06.s033.untrimmed.sorted.bam" "n100.r06.s033_output/n100.r06.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s033_output/n100.r06.s033.untrimmed.sorted.bam" -b "n100.r06.s033_output/n100.r06.s033.primers.bed" -p "n100.r06.s033_output/n100.r06.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" "n100.r06.s033_output/n100.r06.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s033_output/n100.r06.s033.reference.fas" "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" > "n100.r06.s033_output/n100.r06.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s033_output/n100.r06.s033.reference.fas" --call-indels "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" > "n100.r06.s033_output/n100.r06.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s033_output/n100.r06.s033.trimmed.sorted.bam" > "n100.r06.s033_output/n100.r06.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s033_output/n100.r06.s033.depth.txt" "n100.r06.s033_output/n100.r06.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s033_output/n100.r06.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s033_output/n100.r06.s033.reference.fas" | bcftools consensus -m "n100.r06.s033_output/n100.r06.s033.low_depth.tsv" tmp.vcf.gz > "n100.r06.s033_output/n100.r06.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:85b8de1625b7a7e7e4d4908e07038c42b2abdcc415f5da311cc881322da4aac7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=128.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:43 scheduler task a20a932b (flow a82a1ba3): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s033.tar.gz resources {}
2021/07/08 17:11:43  ->  n100.r06.s033.Main.cp_out_file a82a1ba3 exec extern s3://niema-test/n100/r06/n100.r06.s033.tar.gz 35.8MiB
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloaded list<val<.=561c8a5f 35.8MiB> 35.8MiB>
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloaded val<.=c9bb508d 35.4MiB>
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloaded val<.=65925390 35.4MiB>
2021/07/08 17:11:43 scheduler task e15277a8 (flow c9e40fed): unloading (try 0): successful, next state: complete
2021/07/08 17:11:43  <-  n100.r06.s096.Main.out_file c9e40fed ok     exec 4m58s 35.8MiB
2021/07/08 17:11:43 n100.r06.s096.Main.out_file c9e40fed n100/r06/n100.r06.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cf2bc32054a277e691996d4ce4c38eda65968435ee0b79b4fe1237dac98a362
	sha256:c9e40fed599cb6a21ca1b3db06d56dca354e7f7672ab1c007a8daec4a1885b90
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e15277a882366d41884123bc566461136d6c23db3bb89f5761b191190474c041
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s096_output"
	    wget -O "n100.r06.s096_output/n100.r06.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s096_output/n100.r06.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s096_output/n100.r06.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s096_output/n100.r06.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s096_output/n100.r06.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s096_output/n100.r06.s096.reference.fas" "n100.r06.s096_output/n100.r06.s096.fq1.fastq" "n100.r06.s096_output/n100.r06.s096.fq2.fastq" | samtools view -bS - > "n100.r06.s096_output/n100.r06.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s096_output/n100.r06.s096.untrimmed.sorted.bam" "n100.r06.s096_output/n100.r06.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s096_output/n100.r06.s096.untrimmed.sorted.bam" -b "n100.r06.s096_output/n100.r06.s096.primers.bed" -p "n100.r06.s096_output/n100.r06.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" "n100.r06.s096_output/n100.r06.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s096_output/n100.r06.s096.reference.fas" "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" > "n100.r06.s096_output/n100.r06.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s096_output/n100.r06.s096.reference.fas" --call-indels "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" > "n100.r06.s096_output/n100.r06.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s096_output/n100.r06.s096.trimmed.sorted.bam" > "n100.r06.s096_output/n100.r06.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s096_output/n100.r06.s096.depth.txt" "n100.r06.s096_output/n100.r06.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s096_output/n100.r06.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s096_output/n100.r06.s096.reference.fas" | bcftools consensus -m "n100.r06.s096_output/n100.r06.s096.low_depth.tsv" tmp.vcf.gz > "n100.r06.s096_output/n100.r06.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:561c8a5f611f6881fe888527dd78aba23fb9755193c03777973644d432cfde83 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=128.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:11:43 scheduler task 6f73f369 (flow aab2674f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s096.tar.gz resources {}
2021/07/08 17:11:43  ->  n100.r06.s096.Main.cp_out_file aab2674f exec extern s3://niema-test/n100/r06/n100.r06.s096.tar.gz 35.8MiB
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloading (try 0): started
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloading list<val<.=63375218 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloading val<.=8044f19b 35.4MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloading val<.=4eaf88d8 35.4MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloaded list<val<.=63375218 35.7MiB> 35.7MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloaded val<.=8044f19b 35.4MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloaded val<.=4eaf88d8 35.4MiB>
2021/07/08 17:11:43 scheduler task f8df3480 (flow 502645a1): unloading (try 0): successful, next state: complete
2021/07/08 17:11:43 scheduler task 35e0ee38 (flow 2337b222): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:43  <-  n100.r06.s010.Main.out_file 502645a1 ok     exec 4m58s 35.7MiB
2021/07/08 17:11:43 n100.r06.s010.Main.out_file 502645a1 n100/r06/n100.r06.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:daa5ac261aec007cebdf8d09f850256bf6c9867e7e439cc47612beea2c919ba5
	sha256:502645a16fc4baadd2567f517c23f8be5216eee6abf4e1244e66ff2eb9904d7b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f8df3480ad4ef30221754d16e8878db8eb023a434fa5e7abe5ce10ccd2eab8ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s010_output"
	    wget -O "n100.r06.s010_output/n100.r06.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s010_output/n100.r06.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s010_output/n100.r06.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s010_output/n100.r06.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s010_output/n100.r06.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s010_output/n100.r06.s010.reference.fas" "n100.r06.s010_output/n100.r06.s010.fq1.fastq" "n100.r06.s010_output/n100.r06.s010.fq2.fastq" | samtools view -bS - > "n100.r06.s010_output/n100.r06.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s010_output/n100.r06.s010.untrimmed.sorted.bam" "n100.r06.s010_output/n100.r06.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s010_output/n100.r06.s010.untrimmed.sorted.bam" -b "n100.r06.s010_output/n100.r06.s010.primers.bed" -p "n100.r06.s010_output/n100.r06.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" "n100.r06.s010_output/n100.r06.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s010_output/n100.r06.s010.reference.fas" "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" > "n100.r06.s010_output/n100.r06.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s010_output/n100.r06.s010.reference.fas" --call-indels "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" > "n100.r06.s010_output/n100.r06.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s010_output/n100.r06.s010.trimmed.sorted.bam" > "n100.r06.s010_output/n100.r06.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s010_output/n100.r06.s010.depth.txt" "n100.r06.s010_output/n100.r06.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s010_output/n100.r06.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s010_output/n100.r06.s010.reference.fas" | bcftools consensus -m "n100.r06.s010_output/n100.r06.s010.low_depth.tsv" tmp.vcf.gz > "n100.r06.s010_output/n100.r06.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:63375218a985838b8e6abe7063c9012750cef495e31bf1997f7c3656fc5a3c9a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=127.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:43 scheduler task 2e10abf3 (flow 58fc5586): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s010.tar.gz resources {}
2021/07/08 17:11:43  ->  n100.r06.s010.Main.cp_out_file 58fc5586 exec extern s3://niema-test/n100/r06/n100.r06.s010.tar.gz 35.7MiB
2021/07/08 17:11:43 scheduler task 35e0ee38 (flow 2337b222): promoting objects (try 0): started
2021/07/08 17:11:43 scheduler task e88c613b (flow 6e54b48f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:da2109f2bcad80c87cc9cca1263fcae510440ad8eeeee064b3e5e05f0e9683ba -> s3://niema-test/n100/r06/n100.r06.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:43  <-  n100.r06.s023.Main.cp_out_file 6e54b48f ok   extern 0s 35.7MiB
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): retrieving diagnostic output (try 0): started
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): retrieving result (try 0): started
2021/07/08 17:11:44 scheduler task 3b86ca5f (flow ff42d1bf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f100b6dd91e13298f4e331f8531f46b1aeb817d3243d9cec523551d160c4e48f -> s3://niema-test/n100/r06/n100.r06.s053.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:44  <-  n100.r06.s053.Main.cp_out_file ff42d1bf ok   extern 0s 35.7MiB
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): transferring output (try 0): started
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): promoting objects (try 0): started
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): retrieving diagnostic output (try 0): started
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): promoting objects (try 0): started
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): retrieving result (try 0): started
2021/07/08 17:11:44 scheduler task 6f73f369 (flow aab2674f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:561c8a5f611f6881fe888527dd78aba23fb9755193c03777973644d432cfde83 -> s3://niema-test/n100/r06/n100.r06.s096.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:44  <-  n100.r06.s096.Main.cp_out_file aab2674f ok   extern 0s 35.8MiB
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): retrieving diagnostic output (try 0): started
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:44 scheduler task e962eb6a (flow 285f2d1c): transferring output (try 0): started
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): promoting objects (try 0): started
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): retrieving result (try 0): started
2021/07/08 17:11:44 scheduler task 2e10abf3 (flow 58fc5586): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:63375218a985838b8e6abe7063c9012750cef495e31bf1997f7c3656fc5a3c9a -> s3://niema-test/n100/r06/n100.r06.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:44  <-  n100.r06.s010.Main.cp_out_file 58fc5586 ok   extern 0s 35.7MiB
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): retrieving diagnostic output (try 0): started
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:44 scheduler task b067dbe8 (flow 946a9c13): transferring output (try 0): started
2021/07/08 17:11:44 scheduler task a20a932b (flow a82a1ba3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:85b8de1625b7a7e7e4d4908e07038c42b2abdcc415f5da311cc881322da4aac7 -> s3://niema-test/n100/r06/n100.r06.s033.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:44  <-  n100.r06.s033.Main.cp_out_file a82a1ba3 ok   extern 0s 35.8MiB
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloading (try 0): started
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloading val<.=8a3d37e9 35.4MiB>
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloading list<val<.=2fce53f7 35.7MiB> 35.7MiB>
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloading val<.=fab3987b 35.4MiB>
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): retrieving result (try 0): started
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloaded list<val<.=2fce53f7 35.7MiB> 35.7MiB>
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloaded val<.=8a3d37e9 35.4MiB>
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloaded val<.=fab3987b 35.4MiB>
2021/07/08 17:11:44 scheduler task 35e0ee38 (flow 2337b222): unloading (try 0): successful, next state: complete
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:44  <-  n100.r06.s046.Main.out_file 2337b222 ok     exec 5m0s 35.7MiB
2021/07/08 17:11:44 n100.r06.s046.Main.out_file 2337b222 n100/r06/n100.r06.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bb8bac1036b9ad8a38a136b6a6325483d8a43f5da1ed51a882d31973a9603df2
	sha256:2337b222ff4364741f541290c5c42e46945d0668ea684526914920c05b4901f9
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/35e0ee38e989eeb3794fdd981b2b879bfd2e4043861f3d6bcdb1af91b1f47487
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s046_output"
	    wget -O "n100.r06.s046_output/n100.r06.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s046_output/n100.r06.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s046_output/n100.r06.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s046_output/n100.r06.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s046_output/n100.r06.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s046_output/n100.r06.s046.reference.fas" "n100.r06.s046_output/n100.r06.s046.fq1.fastq" "n100.r06.s046_output/n100.r06.s046.fq2.fastq" | samtools view -bS - > "n100.r06.s046_output/n100.r06.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s046_output/n100.r06.s046.untrimmed.sorted.bam" "n100.r06.s046_output/n100.r06.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s046_output/n100.r06.s046.untrimmed.sorted.bam" -b "n100.r06.s046_output/n100.r06.s046.primers.bed" -p "n100.r06.s046_output/n100.r06.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" "n100.r06.s046_output/n100.r06.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s046_output/n100.r06.s046.reference.fas" "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" > "n100.r06.s046_output/n100.r06.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s046_output/n100.r06.s046.reference.fas" --call-indels "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" > "n100.r06.s046_output/n100.r06.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s046_output/n100.r06.s046.trimmed.sorted.bam" > "n100.r06.s046_output/n100.r06.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s046_output/n100.r06.s046.depth.txt" "n100.r06.s046_output/n100.r06.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s046_output/n100.r06.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s046_output/n100.r06.s046.reference.fas" | bcftools consensus -m "n100.r06.s046_output/n100.r06.s046.low_depth.tsv" tmp.vcf.gz > "n100.r06.s046_output/n100.r06.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2fce53f7c78ee85d84b3151289fa0f7baed182f907ac9e17a828b25b7c3ccbf5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=129.3MiB
	    disk mean=11.4MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:11:44 scheduler task 8001e938 (flow 664e584a): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s046.tar.gz resources {}
2021/07/08 17:11:44  ->  n100.r06.s046.Main.cp_out_file 664e584a exec extern s3://niema-test/n100/r06/n100.r06.s046.tar.gz 35.7MiB
2021/07/08 17:11:44 scheduler task b5b1ad47 (flow 57088d8f): transferring output (try 0): started
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): promoting objects (try 0): started
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloading (try 0): started
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloading list<val<.=1fa6d240 35.7MiB> 35.7MiB>
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloading val<.=892d3cd7 35.4MiB>
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloading val<.=57fd4e69 35.4MiB>
2021/07/08 17:11:45 scheduler task 8129af42 (flow 88a81b34): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1da819c3a8acd5882dcf9985adbd5db3778f2e06147d988b7b6ecd919b8ffcfe -> s3://niema-test/n100/r06/n100.r06.s090.tar.gz (35.7MiB) in 2s (17.9MiB/s) 
2021/07/08 17:11:45  <-  n100.r06.s090.Main.cp_out_file 88a81b34 ok   extern 0s 35.7MiB
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): retrieving diagnostic output (try 0): started
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloading (try 0): started
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloading list<val<.=492c7fbc 35.8MiB> 35.8MiB>
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloading val<.=2307b4d6 35.4MiB>
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloading val<.=f4c52b19 35.4MiB>
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloaded val<.=57fd4e69 35.4MiB>
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloaded list<val<.=1fa6d240 35.7MiB> 35.7MiB>
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloaded val<.=892d3cd7 35.4MiB>
2021/07/08 17:11:45 scheduler task e962eb6a (flow 285f2d1c): unloading (try 0): successful, next state: complete
2021/07/08 17:11:45  <-  n100.r06.s067.Main.out_file 285f2d1c ok     exec 5m0s 35.7MiB
2021/07/08 17:11:45 n100.r06.s067.Main.out_file 285f2d1c n100/r06/n100.r06.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:beee405b044e603c7a33e615a3fd7f4351bf380005fea3ba701be9cdfcf6a70d
	sha256:285f2d1ce879c69a082745260c828d5747cd9992a9926f33f298787f19096091
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e962eb6a7fbec89bafb7733b23456d1c8d1e0c1a32b09362d7871574bcc18504
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s067_output"
	    wget -O "n100.r06.s067_output/n100.r06.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s067_output/n100.r06.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s067_output/n100.r06.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s067_output/n100.r06.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s067_output/n100.r06.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s067_output/n100.r06.s067.reference.fas" "n100.r06.s067_output/n100.r06.s067.fq1.fastq" "n100.r06.s067_output/n100.r06.s067.fq2.fastq" | samtools view -bS - > "n100.r06.s067_output/n100.r06.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s067_output/n100.r06.s067.untrimmed.sorted.bam" "n100.r06.s067_output/n100.r06.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s067_output/n100.r06.s067.untrimmed.sorted.bam" -b "n100.r06.s067_output/n100.r06.s067.primers.bed" -p "n100.r06.s067_output/n100.r06.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" "n100.r06.s067_output/n100.r06.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s067_output/n100.r06.s067.reference.fas" "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" > "n100.r06.s067_output/n100.r06.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s067_output/n100.r06.s067.reference.fas" --call-indels "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" > "n100.r06.s067_output/n100.r06.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s067_output/n100.r06.s067.trimmed.sorted.bam" > "n100.r06.s067_output/n100.r06.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s067_output/n100.r06.s067.depth.txt" "n100.r06.s067_output/n100.r06.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s067_output/n100.r06.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s067_output/n100.r06.s067.reference.fas" | bcftools consensus -m "n100.r06.s067_output/n100.r06.s067.low_depth.tsv" tmp.vcf.gz > "n100.r06.s067_output/n100.r06.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1fa6d2403adef7c6a184cac0caa1e18eb9fdc4dfc96a1a567968efa7a18cdbb0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=129.3MiB
	    disk mean=11.1MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:11:45 scheduler task 8613d2b5 (flow 98407f9b): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s067.tar.gz resources {}
2021/07/08 17:11:45  ->  n100.r06.s067.Main.cp_out_file 98407f9b exec extern s3://niema-test/n100/r06/n100.r06.s067.tar.gz 35.7MiB
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): promoting objects (try 0): started
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloaded val<.=f4c52b19 35.4MiB>
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloaded list<val<.=492c7fbc 35.8MiB> 35.8MiB>
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloaded val<.=2307b4d6 35.4MiB>
2021/07/08 17:11:45 scheduler task b067dbe8 (flow 946a9c13): unloading (try 0): successful, next state: complete
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:45  <-  n100.r06.s004.Main.out_file 946a9c13 ok     exec 5m0s 35.8MiB
2021/07/08 17:11:45 n100.r06.s004.Main.out_file 946a9c13 n100/r06/n100.r06.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4bcfe6b5002352bb4aced4f0a3aa6dacec19a7d6eb4e169b7126b0b874bc2351
	sha256:946a9c13dec6b81204fb425fe9501d9615db40a1d159530b4e718e8b88954361
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b067dbe87a583e2ba6053e9675c1dcc8959f613adeff300e2a7d45f6e9b421c5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s004_output"
	    wget -O "n100.r06.s004_output/n100.r06.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s004_output/n100.r06.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s004_output/n100.r06.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s004_output/n100.r06.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s004_output/n100.r06.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s004_output/n100.r06.s004.reference.fas" "n100.r06.s004_output/n100.r06.s004.fq1.fastq" "n100.r06.s004_output/n100.r06.s004.fq2.fastq" | samtools view -bS - > "n100.r06.s004_output/n100.r06.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s004_output/n100.r06.s004.untrimmed.sorted.bam" "n100.r06.s004_output/n100.r06.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s004_output/n100.r06.s004.untrimmed.sorted.bam" -b "n100.r06.s004_output/n100.r06.s004.primers.bed" -p "n100.r06.s004_output/n100.r06.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" "n100.r06.s004_output/n100.r06.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s004_output/n100.r06.s004.reference.fas" "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" > "n100.r06.s004_output/n100.r06.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s004_output/n100.r06.s004.reference.fas" --call-indels "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" > "n100.r06.s004_output/n100.r06.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s004_output/n100.r06.s004.trimmed.sorted.bam" > "n100.r06.s004_output/n100.r06.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s004_output/n100.r06.s004.depth.txt" "n100.r06.s004_output/n100.r06.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s004_output/n100.r06.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s004_output/n100.r06.s004.reference.fas" | bcftools consensus -m "n100.r06.s004_output/n100.r06.s004.low_depth.tsv" tmp.vcf.gz > "n100.r06.s004_output/n100.r06.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:492c7fbc015ea7b321387a2f6b27792e69fb2975628dd92054072f82740d038a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=128.1MiB
	    disk mean=11.0MiB max=35.8MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:11:45 scheduler task 4633d893 (flow be8040a1): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s004.tar.gz resources {}
2021/07/08 17:11:45  ->  n100.r06.s004.Main.cp_out_file be8040a1 exec extern s3://niema-test/n100/r06/n100.r06.s004.tar.gz 35.8MiB
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): retrieving result (try 0): started
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): retrieving diagnostic output (try 0): started
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloading (try 0): started
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloading list<val<.=fcb4d4c7 35.7MiB> 35.7MiB>
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloading val<.=feecab12 35.4MiB>
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloading val<.=f28d994f 35.4MiB>
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): transferring output (try 0): started
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): retrieving result (try 0): started
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloaded list<val<.=fcb4d4c7 35.7MiB> 35.7MiB>
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloaded val<.=f28d994f 35.4MiB>
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloaded val<.=feecab12 35.4MiB>
2021/07/08 17:11:45 scheduler task b5b1ad47 (flow 57088d8f): unloading (try 0): successful, next state: complete
2021/07/08 17:11:45  <-  n100.r06.s043.Main.out_file 57088d8f ok     exec 5m0s 35.7MiB
2021/07/08 17:11:45 n100.r06.s043.Main.out_file 57088d8f n100/r06/n100.r06.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d0d462820b12282449503ade9f5f1f2946853cc63469c2cd2c3c3d1cb18fcaaa
	sha256:57088d8ffa73e3d3904f053ac8a0ac40a90b9125bba82158a786e3b7bceaa7a3
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5b1ad470058093df214fb2b58086f8c92946bf8d4620d8a833bd9435af1fcc0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s043_output"
	    wget -O "n100.r06.s043_output/n100.r06.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s043_output/n100.r06.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s043_output/n100.r06.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s043_output/n100.r06.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s043_output/n100.r06.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s043_output/n100.r06.s043.reference.fas" "n100.r06.s043_output/n100.r06.s043.fq1.fastq" "n100.r06.s043_output/n100.r06.s043.fq2.fastq" | samtools view -bS - > "n100.r06.s043_output/n100.r06.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s043_output/n100.r06.s043.untrimmed.sorted.bam" "n100.r06.s043_output/n100.r06.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s043_output/n100.r06.s043.untrimmed.sorted.bam" -b "n100.r06.s043_output/n100.r06.s043.primers.bed" -p "n100.r06.s043_output/n100.r06.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" "n100.r06.s043_output/n100.r06.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s043_output/n100.r06.s043.reference.fas" "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" > "n100.r06.s043_output/n100.r06.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s043_output/n100.r06.s043.reference.fas" --call-indels "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" > "n100.r06.s043_output/n100.r06.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s043_output/n100.r06.s043.trimmed.sorted.bam" > "n100.r06.s043_output/n100.r06.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s043_output/n100.r06.s043.depth.txt" "n100.r06.s043_output/n100.r06.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s043_output/n100.r06.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s043_output/n100.r06.s043.reference.fas" | bcftools consensus -m "n100.r06.s043_output/n100.r06.s043.low_depth.tsv" tmp.vcf.gz > "n100.r06.s043_output/n100.r06.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fcb4d4c78d760965518ea5d2399a0c0379615b3fd789bfca26bf9cc04f3fe34b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=128.2MiB
	    disk mean=10.5MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:11:45 scheduler task c869de4e (flow f496d021): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s043.tar.gz resources {}
2021/07/08 17:11:45  ->  n100.r06.s043.Main.cp_out_file f496d021 exec extern s3://niema-test/n100/r06/n100.r06.s043.tar.gz 35.7MiB
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:45 scheduler task 21addea5 (flow 807ea2cc): transferring output (try 0): started
2021/07/08 17:11:45 scheduler task 8001e938 (flow 664e584a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2fce53f7c78ee85d84b3151289fa0f7baed182f907ac9e17a828b25b7c3ccbf5 -> s3://niema-test/n100/r06/n100.r06.s046.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:45  <-  n100.r06.s046.Main.cp_out_file 664e584a ok   extern 0s 35.7MiB
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): unloading (try 0): started
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): unloading list<val<.=c7f18318 35.7MiB> 35.7MiB>
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): unloading val<.=82727ae6 35.4MiB>
2021/07/08 17:11:45 scheduler task 4947ed18 (flow 75ab46a8): unloading val<.=3a28b781 35.4MiB>
2021/07/08 17:11:46 scheduler task 4947ed18 (flow 75ab46a8): unloaded val<.=3a28b781 35.4MiB>
2021/07/08 17:11:46 scheduler task 4947ed18 (flow 75ab46a8): unloaded list<val<.=c7f18318 35.7MiB> 35.7MiB>
2021/07/08 17:11:46 scheduler task 4947ed18 (flow 75ab46a8): unloaded val<.=82727ae6 35.4MiB>
2021/07/08 17:11:46 scheduler task 4947ed18 (flow 75ab46a8): unloading (try 0): successful, next state: complete
2021/07/08 17:11:46  <-  n100.r06.s081.Main.out_file 75ab46a8 ok     exec 5m1s 35.7MiB
2021/07/08 17:11:46 n100.r06.s081.Main.out_file 75ab46a8 n100/r06/n100.r06.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4393d21f5197b12451ea20fbb4ee09e3d0b28aea835de267b357225af758b93f
	sha256:75ab46a896bd477dd6e98a54ad80c28975cdd1a530d3bec20f888b7a4cd4a79b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4947ed1874c0015f9dd8cd3d949229f50ea51ab55bebfff3189aaf00c2a0b7a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s081_output"
	    wget -O "n100.r06.s081_output/n100.r06.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s081_output/n100.r06.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s081_output/n100.r06.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s081_output/n100.r06.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s081_output/n100.r06.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s081_output/n100.r06.s081.reference.fas" "n100.r06.s081_output/n100.r06.s081.fq1.fastq" "n100.r06.s081_output/n100.r06.s081.fq2.fastq" | samtools view -bS - > "n100.r06.s081_output/n100.r06.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s081_output/n100.r06.s081.untrimmed.sorted.bam" "n100.r06.s081_output/n100.r06.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s081_output/n100.r06.s081.untrimmed.sorted.bam" -b "n100.r06.s081_output/n100.r06.s081.primers.bed" -p "n100.r06.s081_output/n100.r06.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" "n100.r06.s081_output/n100.r06.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s081_output/n100.r06.s081.reference.fas" "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" > "n100.r06.s081_output/n100.r06.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s081_output/n100.r06.s081.reference.fas" --call-indels "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" > "n100.r06.s081_output/n100.r06.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s081_output/n100.r06.s081.trimmed.sorted.bam" > "n100.r06.s081_output/n100.r06.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s081_output/n100.r06.s081.depth.txt" "n100.r06.s081_output/n100.r06.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s081_output/n100.r06.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s081_output/n100.r06.s081.reference.fas" | bcftools consensus -m "n100.r06.s081_output/n100.r06.s081.low_depth.tsv" tmp.vcf.gz > "n100.r06.s081_output/n100.r06.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c7f18318176b6f9b3a1aa0eccd63bec74c09af9916ec72884256a531b6d625a0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.9MiB max=126.9MiB
	    disk mean=8.6MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:11:46 scheduler task b6e7bbe2 (flow 3aa98250): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s081.tar.gz resources {}
2021/07/08 17:11:46  ->  n100.r06.s081.Main.cp_out_file 3aa98250 exec extern s3://niema-test/n100/r06/n100.r06.s081.tar.gz 35.7MiB
2021/07/08 17:11:46 scheduler task 8613d2b5 (flow 98407f9b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1fa6d2403adef7c6a184cac0caa1e18eb9fdc4dfc96a1a567968efa7a18cdbb0 -> s3://niema-test/n100/r06/n100.r06.s067.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:46  <-  n100.r06.s067.Main.cp_out_file 98407f9b ok   extern 0s 35.7MiB
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloading (try 0): started
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloading list<val<.=dc1a80f8 35.8MiB> 35.8MiB>
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloading val<.=6df5914c 35.4MiB>
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloading val<.=68a096e4 35.4MiB>
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): promoting objects (try 0): started
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloaded list<val<.=dc1a80f8 35.8MiB> 35.8MiB>
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloaded val<.=68a096e4 35.4MiB>
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloaded val<.=6df5914c 35.4MiB>
2021/07/08 17:11:46 scheduler task 21addea5 (flow 807ea2cc): unloading (try 0): successful, next state: complete
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:46  <-  n100.r06.s083.Main.out_file 807ea2cc ok     exec 5m1s 35.8MiB
2021/07/08 17:11:46 n100.r06.s083.Main.out_file 807ea2cc n100/r06/n100.r06.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d4c594150aacdc76a0b417655e7fd20199a250c21bff826f0e58b29471e59899
	sha256:807ea2cc9bd3c2d979a0ffdeca52d2530559d04e83c96b9adc8d4896d41e7077
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21addea505a1cdb0ff17b3f4105df491bc3644c4f47f5675078515a39d2263d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s083_output"
	    wget -O "n100.r06.s083_output/n100.r06.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s083_output/n100.r06.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s083_output/n100.r06.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s083_output/n100.r06.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s083_output/n100.r06.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s083_output/n100.r06.s083.reference.fas" "n100.r06.s083_output/n100.r06.s083.fq1.fastq" "n100.r06.s083_output/n100.r06.s083.fq2.fastq" | samtools view -bS - > "n100.r06.s083_output/n100.r06.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s083_output/n100.r06.s083.untrimmed.sorted.bam" "n100.r06.s083_output/n100.r06.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s083_output/n100.r06.s083.untrimmed.sorted.bam" -b "n100.r06.s083_output/n100.r06.s083.primers.bed" -p "n100.r06.s083_output/n100.r06.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" "n100.r06.s083_output/n100.r06.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s083_output/n100.r06.s083.reference.fas" "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" > "n100.r06.s083_output/n100.r06.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s083_output/n100.r06.s083.reference.fas" --call-indels "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" > "n100.r06.s083_output/n100.r06.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s083_output/n100.r06.s083.trimmed.sorted.bam" > "n100.r06.s083_output/n100.r06.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s083_output/n100.r06.s083.depth.txt" "n100.r06.s083_output/n100.r06.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s083_output/n100.r06.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s083_output/n100.r06.s083.reference.fas" | bcftools consensus -m "n100.r06.s083_output/n100.r06.s083.low_depth.tsv" tmp.vcf.gz > "n100.r06.s083_output/n100.r06.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:dc1a80f8bebe61bfddd4b07c8c1cd3a2c0bd79b0063cf8d945f16cc17cddcb56 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=128.7MiB
	    disk mean=9.2MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:11:46 scheduler task 70ce1add (flow 27ad7a57): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s083.tar.gz resources {}
2021/07/08 17:11:46  ->  n100.r06.s083.Main.cp_out_file 27ad7a57 exec extern s3://niema-test/n100/r06/n100.r06.s083.tar.gz 35.8MiB
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): promoting objects (try 0): started
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): retrieving diagnostic output (try 0): started
2021/07/08 17:11:46 scheduler task c869de4e (flow f496d021): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fcb4d4c78d760965518ea5d2399a0c0379615b3fd789bfca26bf9cc04f3fe34b -> s3://niema-test/n100/r06/n100.r06.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:46  <-  n100.r06.s043.Main.cp_out_file f496d021 ok   extern 0s 35.7MiB
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): retrieving diagnostic output (try 0): started
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): retrieving result (try 0): started
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): retrieving result (try 0): started
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): transferring output (try 0): started
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:46 scheduler task 5ea6c273 (flow 572331ce): transferring output (try 0): started
2021/07/08 17:11:46 scheduler task 4633d893 (flow be8040a1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:492c7fbc015ea7b321387a2f6b27792e69fb2975628dd92054072f82740d038a -> s3://niema-test/n100/r06/n100.r06.s004.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:46  <-  n100.r06.s004.Main.cp_out_file be8040a1 ok   extern 0s 35.8MiB
2021/07/08 17:11:46 scheduler task 26eb79b8 (flow 58c2da81): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:46 scheduler task 26eb79b8 (flow 58c2da81): promoting objects (try 0): started
2021/07/08 17:11:46 scheduler task b6e7bbe2 (flow 3aa98250): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c7f18318176b6f9b3a1aa0eccd63bec74c09af9916ec72884256a531b6d625a0 -> s3://niema-test/n100/r06/n100.r06.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:46  <-  n100.r06.s081.Main.cp_out_file 3aa98250 ok   extern 0s 35.7MiB
2021/07/08 17:11:46 scheduler task 26eb79b8 (flow 58c2da81): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:46 scheduler task 26eb79b8 (flow 58c2da81): retrieving diagnostic output (try 0): started
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): unloading (try 0): started
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): unloading list<val<.=064e9e55 35.8MiB> 35.8MiB>
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): unloading val<.=cc57cca5 35.4MiB>
2021/07/08 17:11:46 scheduler task a624161c (flow 8ae2595d): unloading val<.=11baf1eb 35.4MiB>
2021/07/08 17:11:46 scheduler task 26eb79b8 (flow 58c2da81): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:46 scheduler task 26eb79b8 (flow 58c2da81): retrieving result (try 0): started
2021/07/08 17:11:46 scheduler task 70ce1add (flow 27ad7a57): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:dc1a80f8bebe61bfddd4b07c8c1cd3a2c0bd79b0063cf8d945f16cc17cddcb56 -> s3://niema-test/n100/r06/n100.r06.s083.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:46  <-  n100.r06.s083.Main.cp_out_file 27ad7a57 ok   extern 0s 35.8MiB
2021/07/08 17:11:47 scheduler task a624161c (flow 8ae2595d): unloaded list<val<.=064e9e55 35.8MiB> 35.8MiB>
2021/07/08 17:11:47 scheduler task a624161c (flow 8ae2595d): unloaded val<.=cc57cca5 35.4MiB>
2021/07/08 17:11:47 scheduler task a624161c (flow 8ae2595d): unloaded val<.=11baf1eb 35.4MiB>
2021/07/08 17:11:47 scheduler task a624161c (flow 8ae2595d): unloading (try 0): successful, next state: complete
2021/07/08 17:11:47  <-  n100.r06.s059.Main.out_file 8ae2595d ok     exec 5m2s 35.8MiB
2021/07/08 17:11:47 n100.r06.s059.Main.out_file 8ae2595d n100/r06/n100.r06.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:60694eb00b3551d68e433c0266f3e0a82e15b75c9f911bd53b051a870a14b76e
	sha256:8ae2595db4ae88fe11bcd87baec0c37016a830c1879fdc4da82459d1508f17fc
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a624161cc6780b938906804c37f3bc5c9aafe52adff5ad3cb292202456d20888
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s059_output"
	    wget -O "n100.r06.s059_output/n100.r06.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s059_output/n100.r06.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s059_output/n100.r06.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s059_output/n100.r06.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s059_output/n100.r06.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s059_output/n100.r06.s059.reference.fas" "n100.r06.s059_output/n100.r06.s059.fq1.fastq" "n100.r06.s059_output/n100.r06.s059.fq2.fastq" | samtools view -bS - > "n100.r06.s059_output/n100.r06.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s059_output/n100.r06.s059.untrimmed.sorted.bam" "n100.r06.s059_output/n100.r06.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s059_output/n100.r06.s059.untrimmed.sorted.bam" -b "n100.r06.s059_output/n100.r06.s059.primers.bed" -p "n100.r06.s059_output/n100.r06.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" "n100.r06.s059_output/n100.r06.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s059_output/n100.r06.s059.reference.fas" "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" > "n100.r06.s059_output/n100.r06.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s059_output/n100.r06.s059.reference.fas" --call-indels "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" > "n100.r06.s059_output/n100.r06.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s059_output/n100.r06.s059.trimmed.sorted.bam" > "n100.r06.s059_output/n100.r06.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s059_output/n100.r06.s059.depth.txt" "n100.r06.s059_output/n100.r06.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s059_output/n100.r06.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s059_output/n100.r06.s059.reference.fas" | bcftools consensus -m "n100.r06.s059_output/n100.r06.s059.low_depth.tsv" tmp.vcf.gz > "n100.r06.s059_output/n100.r06.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:064e9e5516f9ce5eb4c7dde3150c5754086071d6811fc9df4c26dc2b8e7fd6f8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=130.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:11:47 scheduler task a9dad6de (flow 29648ff5): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s059.tar.gz resources {}
2021/07/08 17:11:47  ->  n100.r06.s059.Main.cp_out_file 29648ff5 exec extern s3://niema-test/n100/r06/n100.r06.s059.tar.gz 35.8MiB
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloading (try 0): started
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloading list<val<.=97938ac0 35.7MiB> 35.7MiB>
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloading val<.=2796a714 35.4MiB>
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloading val<.=285e05bc 35.4MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): transferring output (try 0): started
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloaded val<.=285e05bc 35.4MiB>
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloaded list<val<.=97938ac0 35.7MiB> 35.7MiB>
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloaded val<.=2796a714 35.4MiB>
2021/07/08 17:11:47 scheduler task 5ea6c273 (flow 572331ce): unloading (try 0): successful, next state: complete
2021/07/08 17:11:47  <-  n100.r06.s006.Main.out_file 572331ce ok     exec 5m2s 35.7MiB
2021/07/08 17:11:47 n100.r06.s006.Main.out_file 572331ce n100/r06/n100.r06.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:154d1b1f616a25595b9d6a0617e48b836fcd8284fe4bc84f42abd239e4925d9a
	sha256:572331cec76c7104aac2d46732afb9ea7c8679e6f69a7886345aee2a7f91d9ce
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ea6c273c17b3f63fb6abf54903ba46e8dcde3601dea3cea959e1494c6794c20
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s006_output"
	    wget -O "n100.r06.s006_output/n100.r06.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s006_output/n100.r06.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s006_output/n100.r06.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s006_output/n100.r06.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s006_output/n100.r06.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s006_output/n100.r06.s006.reference.fas" "n100.r06.s006_output/n100.r06.s006.fq1.fastq" "n100.r06.s006_output/n100.r06.s006.fq2.fastq" | samtools view -bS - > "n100.r06.s006_output/n100.r06.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s006_output/n100.r06.s006.untrimmed.sorted.bam" "n100.r06.s006_output/n100.r06.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s006_output/n100.r06.s006.untrimmed.sorted.bam" -b "n100.r06.s006_output/n100.r06.s006.primers.bed" -p "n100.r06.s006_output/n100.r06.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" "n100.r06.s006_output/n100.r06.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s006_output/n100.r06.s006.reference.fas" "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" > "n100.r06.s006_output/n100.r06.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s006_output/n100.r06.s006.reference.fas" --call-indels "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" > "n100.r06.s006_output/n100.r06.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s006_output/n100.r06.s006.trimmed.sorted.bam" > "n100.r06.s006_output/n100.r06.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s006_output/n100.r06.s006.depth.txt" "n100.r06.s006_output/n100.r06.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s006_output/n100.r06.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s006_output/n100.r06.s006.reference.fas" | bcftools consensus -m "n100.r06.s006_output/n100.r06.s006.low_depth.tsv" tmp.vcf.gz > "n100.r06.s006_output/n100.r06.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:97938ac0738b4ccacaf2bdb6fe8fc9a2606ddf928f82ca6371efabe0801dec40 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.2MiB max=127.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:11:47 scheduler task 91644c81 (flow 3cd3324e): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s006.tar.gz resources {}
2021/07/08 17:11:47  ->  n100.r06.s006.Main.cp_out_file 3cd3324e exec extern s3://niema-test/n100/r06/n100.r06.s006.tar.gz 35.7MiB
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloading (try 0): started
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloading list<val<.=0e8e46c1 35.7MiB> 35.7MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloading val<.=60d80ff0 35.4MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloading val<.=c2348087 35.4MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloaded list<val<.=0e8e46c1 35.7MiB> 35.7MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloaded val<.=60d80ff0 35.4MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloaded val<.=c2348087 35.4MiB>
2021/07/08 17:11:47 scheduler task 26eb79b8 (flow 58c2da81): unloading (try 0): successful, next state: complete
2021/07/08 17:11:47  <-  n100.r06.s095.Main.out_file 58c2da81 ok     exec 5m2s 35.7MiB
2021/07/08 17:11:47 n100.r06.s095.Main.out_file 58c2da81 n100/r06/n100.r06.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4d4a8f5f9147ab8213c4d87cb0665eaf745aeef5c52ea6a14584532d48ca8d44
	sha256:58c2da81fd6f0d6eb0d25d76da628e69cbfcfd4ec0432dd1dbf1be8fa9dfd802
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26eb79b8dae24b8711573081efc09e084c858f7c9138c00821dc63cddba8c6d8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s095_output"
	    wget -O "n100.r06.s095_output/n100.r06.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s095_output/n100.r06.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s095_output/n100.r06.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s095_output/n100.r06.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s095_output/n100.r06.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s095_output/n100.r06.s095.reference.fas" "n100.r06.s095_output/n100.r06.s095.fq1.fastq" "n100.r06.s095_output/n100.r06.s095.fq2.fastq" | samtools view -bS - > "n100.r06.s095_output/n100.r06.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s095_output/n100.r06.s095.untrimmed.sorted.bam" "n100.r06.s095_output/n100.r06.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s095_output/n100.r06.s095.untrimmed.sorted.bam" -b "n100.r06.s095_output/n100.r06.s095.primers.bed" -p "n100.r06.s095_output/n100.r06.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" "n100.r06.s095_output/n100.r06.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s095_output/n100.r06.s095.reference.fas" "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" > "n100.r06.s095_output/n100.r06.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s095_output/n100.r06.s095.reference.fas" --call-indels "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" > "n100.r06.s095_output/n100.r06.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s095_output/n100.r06.s095.trimmed.sorted.bam" > "n100.r06.s095_output/n100.r06.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s095_output/n100.r06.s095.depth.txt" "n100.r06.s095_output/n100.r06.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s095_output/n100.r06.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s095_output/n100.r06.s095.reference.fas" | bcftools consensus -m "n100.r06.s095_output/n100.r06.s095.low_depth.tsv" tmp.vcf.gz > "n100.r06.s095_output/n100.r06.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0e8e46c157c0fe9ee498bea5f45b907b7542b75f9c0e78e3e72e373bed5d2622 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=125.0MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:11:47 scheduler task 739f3f59 (flow 82826c20): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s095.tar.gz resources {}
2021/07/08 17:11:47  ->  n100.r06.s095.Main.cp_out_file 82826c20 exec extern s3://niema-test/n100/r06/n100.r06.s095.tar.gz 35.7MiB
2021/07/08 17:11:47 scheduler task a9dad6de (flow 29648ff5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:064e9e5516f9ce5eb4c7dde3150c5754086071d6811fc9df4c26dc2b8e7fd6f8 -> s3://niema-test/n100/r06/n100.r06.s059.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:11:47  <-  n100.r06.s059.Main.cp_out_file 29648ff5 ok   extern 0s 35.8MiB
2021/07/08 17:11:48 scheduler task 91644c81 (flow 3cd3324e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:97938ac0738b4ccacaf2bdb6fe8fc9a2606ddf928f82ca6371efabe0801dec40 -> s3://niema-test/n100/r06/n100.r06.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:48  <-  n100.r06.s006.Main.cp_out_file 3cd3324e ok   extern 0s 35.7MiB
2021/07/08 17:11:48 scheduler task 739f3f59 (flow 82826c20): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0e8e46c157c0fe9ee498bea5f45b907b7542b75f9c0e78e3e72e373bed5d2622 -> s3://niema-test/n100/r06/n100.r06.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:48  <-  n100.r06.s095.Main.cp_out_file 82826c20 ok   extern 0s 35.7MiB
2021/07/08 17:11:49 scheduler task 2bb36640 (flow b8449ca4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:49 scheduler task 2bb36640 (flow b8449ca4): promoting objects (try 0): started
2021/07/08 17:11:49 scheduler task 2bb36640 (flow b8449ca4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:49 scheduler task 2bb36640 (flow b8449ca4): retrieving diagnostic output (try 0): started
2021/07/08 17:11:49 scheduler task 2bb36640 (flow b8449ca4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:49 scheduler task 2bb36640 (flow b8449ca4): retrieving result (try 0): started
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): transferring output (try 0): started
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): promoting objects (try 0): started
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): retrieving diagnostic output (try 0): started
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): retrieving result (try 0): started
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): transferring output (try 0): started
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloading (try 0): started
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloading list<val<.=68306eb2 35.7MiB> 35.7MiB>
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloading val<.=1e2e6d2e 35.4MiB>
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloading val<.=ffeef6a0 35.4MiB>
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloaded val<.=1e2e6d2e 35.4MiB>
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloaded val<.=ffeef6a0 35.4MiB>
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloaded list<val<.=68306eb2 35.7MiB> 35.7MiB>
2021/07/08 17:11:50 scheduler task 2bb36640 (flow b8449ca4): unloading (try 0): successful, next state: complete
2021/07/08 17:11:50  <-  n100.r06.s073.Main.out_file b8449ca4 ok     exec 5m5s 35.7MiB
2021/07/08 17:11:50 n100.r06.s073.Main.out_file b8449ca4 n100/r06/n100.r06.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:394ad0e09beca5011d2b28c505de0d0de93215086aba6f645378ace299214108
	sha256:b8449ca4d6d2c9ecf67dcbcda40dc7f706a0c82e7d8adb7e45f2ff7d09be5080
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2bb366408a8c59bd2f53f603ae01835b5fd75b8be556ed4b128c0d92826c6d4e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s073_output"
	    wget -O "n100.r06.s073_output/n100.r06.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s073_output/n100.r06.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s073_output/n100.r06.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s073_output/n100.r06.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s073_output/n100.r06.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s073_output/n100.r06.s073.reference.fas" "n100.r06.s073_output/n100.r06.s073.fq1.fastq" "n100.r06.s073_output/n100.r06.s073.fq2.fastq" | samtools view -bS - > "n100.r06.s073_output/n100.r06.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s073_output/n100.r06.s073.untrimmed.sorted.bam" "n100.r06.s073_output/n100.r06.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s073_output/n100.r06.s073.untrimmed.sorted.bam" -b "n100.r06.s073_output/n100.r06.s073.primers.bed" -p "n100.r06.s073_output/n100.r06.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" "n100.r06.s073_output/n100.r06.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s073_output/n100.r06.s073.reference.fas" "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" > "n100.r06.s073_output/n100.r06.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s073_output/n100.r06.s073.reference.fas" --call-indels "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" > "n100.r06.s073_output/n100.r06.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s073_output/n100.r06.s073.trimmed.sorted.bam" > "n100.r06.s073_output/n100.r06.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s073_output/n100.r06.s073.depth.txt" "n100.r06.s073_output/n100.r06.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s073_output/n100.r06.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s073_output/n100.r06.s073.reference.fas" | bcftools consensus -m "n100.r06.s073_output/n100.r06.s073.low_depth.tsv" tmp.vcf.gz > "n100.r06.s073_output/n100.r06.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:68306eb2bea7a35f957ffcb0e88f0eb162273f7a4637de796d49dfa824c5697a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=874B max=2.1KiB
2021/07/08 17:11:50 scheduler task 35ba2b30 (flow 8d2ede58): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s073.tar.gz resources {}
2021/07/08 17:11:50  ->  n100.r06.s073.Main.cp_out_file 8d2ede58 exec extern s3://niema-test/n100/r06/n100.r06.s073.tar.gz 35.7MiB
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): unloading (try 0): started
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): unloading list<val<.=c3164818 35.7MiB> 35.7MiB>
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): unloading val<.=87a75767 35.4MiB>
2021/07/08 17:11:50 scheduler task 839dd58e (flow ad16a62e): unloading val<.=13b27e18 35.4MiB>
2021/07/08 17:11:51 scheduler task 839dd58e (flow ad16a62e): unloaded val<.=87a75767 35.4MiB>
2021/07/08 17:11:51 scheduler task 839dd58e (flow ad16a62e): unloaded val<.=13b27e18 35.4MiB>
2021/07/08 17:11:51 scheduler task 839dd58e (flow ad16a62e): unloaded list<val<.=c3164818 35.7MiB> 35.7MiB>
2021/07/08 17:11:51 scheduler task 839dd58e (flow ad16a62e): unloading (try 0): successful, next state: complete
2021/07/08 17:11:51  <-  n100.r06.s077.Main.out_file ad16a62e ok     exec 5m6s 35.7MiB
2021/07/08 17:11:51 n100.r06.s077.Main.out_file ad16a62e n100/r06/n100.r06.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f8f9569f1b7460e80e1647bf5ace64d1220de427babcd7a3b3241c272a985ed
	sha256:ad16a62e60b49672299dc883c431d7aadf78223d78a205220227eed378a7485a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/839dd58e59a2126f5d3b0bd0f326c53d79cb97b01ae02fd792452416749e812c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s077_output"
	    wget -O "n100.r06.s077_output/n100.r06.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s077_output/n100.r06.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s077_output/n100.r06.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s077_output/n100.r06.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s077_output/n100.r06.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s077_output/n100.r06.s077.reference.fas" "n100.r06.s077_output/n100.r06.s077.fq1.fastq" "n100.r06.s077_output/n100.r06.s077.fq2.fastq" | samtools view -bS - > "n100.r06.s077_output/n100.r06.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s077_output/n100.r06.s077.untrimmed.sorted.bam" "n100.r06.s077_output/n100.r06.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s077_output/n100.r06.s077.untrimmed.sorted.bam" -b "n100.r06.s077_output/n100.r06.s077.primers.bed" -p "n100.r06.s077_output/n100.r06.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" "n100.r06.s077_output/n100.r06.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s077_output/n100.r06.s077.reference.fas" "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" > "n100.r06.s077_output/n100.r06.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s077_output/n100.r06.s077.reference.fas" --call-indels "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" > "n100.r06.s077_output/n100.r06.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s077_output/n100.r06.s077.trimmed.sorted.bam" > "n100.r06.s077_output/n100.r06.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s077_output/n100.r06.s077.depth.txt" "n100.r06.s077_output/n100.r06.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s077_output/n100.r06.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s077_output/n100.r06.s077.reference.fas" | bcftools consensus -m "n100.r06.s077_output/n100.r06.s077.low_depth.tsv" tmp.vcf.gz > "n100.r06.s077_output/n100.r06.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c3164818b93e88faf1d216dc8c0ef895955a2b81afb45101da9bc52c67a74ba0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:11:51 scheduler task b86dc47b (flow 357aeb14): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s077.tar.gz resources {}
2021/07/08 17:11:51  ->  n100.r06.s077.Main.cp_out_file 357aeb14 exec extern s3://niema-test/n100/r06/n100.r06.s077.tar.gz 35.7MiB
2021/07/08 17:11:51 scheduler task 35ba2b30 (flow 8d2ede58): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:68306eb2bea7a35f957ffcb0e88f0eb162273f7a4637de796d49dfa824c5697a -> s3://niema-test/n100/r06/n100.r06.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:51  <-  n100.r06.s073.Main.cp_out_file 8d2ede58 ok   extern 0s 35.7MiB
2021/07/08 17:11:51 scheduler task b86dc47b (flow 357aeb14): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c3164818b93e88faf1d216dc8c0ef895955a2b81afb45101da9bc52c67a74ba0 -> s3://niema-test/n100/r06/n100.r06.s077.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:51  <-  n100.r06.s077.Main.cp_out_file 357aeb14 ok   extern 0s 35.7MiB
2021/07/08 17:11:54 scheduler task 404819b8 (flow a42a45fe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:54 scheduler task 404819b8 (flow a42a45fe): promoting objects (try 0): started
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): retrieving diagnostic output (try 0): started
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): retrieving result (try 0): started
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): transferring output (try 0): started
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): promoting objects (try 0): started
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): retrieving diagnostic output (try 0): started
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): retrieving result (try 0): started
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:55 scheduler task d862912d (flow 99d4b438): transferring output (try 0): started
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloading (try 0): started
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloading list<val<.=6f601bb9 35.8MiB> 35.8MiB>
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloading val<.=6467ee5f 35.4MiB>
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloading val<.=1a754215 35.4MiB>
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloaded val<.=1a754215 35.4MiB>
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloaded val<.=6467ee5f 35.4MiB>
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloaded list<val<.=6f601bb9 35.8MiB> 35.8MiB>
2021/07/08 17:11:55 scheduler task 404819b8 (flow a42a45fe): unloading (try 0): successful, next state: complete
2021/07/08 17:11:55  <-  n100.r06.s091.Main.out_file a42a45fe ok     exec 4m58s 35.8MiB
2021/07/08 17:11:55 n100.r06.s091.Main.out_file a42a45fe n100/r06/n100.r06.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3b5b0cc8789b61cb462b44ccb50f7f9ba5764a30e14c09a8962d5c3d68acb892
	sha256:a42a45fe464f0599881078d3e55ae80333a2e4f8fd383ae50c9955ec6a6bf65c
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/404819b87f2b1b2ba922dee81d2af62ac8662d9ddec172582ad0f58d78677ef4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s091_output"
	    wget -O "n100.r06.s091_output/n100.r06.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s091_output/n100.r06.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s091_output/n100.r06.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s091_output/n100.r06.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s091_output/n100.r06.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s091_output/n100.r06.s091.reference.fas" "n100.r06.s091_output/n100.r06.s091.fq1.fastq" "n100.r06.s091_output/n100.r06.s091.fq2.fastq" | samtools view -bS - > "n100.r06.s091_output/n100.r06.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s091_output/n100.r06.s091.untrimmed.sorted.bam" "n100.r06.s091_output/n100.r06.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s091_output/n100.r06.s091.untrimmed.sorted.bam" -b "n100.r06.s091_output/n100.r06.s091.primers.bed" -p "n100.r06.s091_output/n100.r06.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" "n100.r06.s091_output/n100.r06.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s091_output/n100.r06.s091.reference.fas" "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" > "n100.r06.s091_output/n100.r06.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s091_output/n100.r06.s091.reference.fas" --call-indels "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" > "n100.r06.s091_output/n100.r06.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s091_output/n100.r06.s091.trimmed.sorted.bam" > "n100.r06.s091_output/n100.r06.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s091_output/n100.r06.s091.depth.txt" "n100.r06.s091_output/n100.r06.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s091_output/n100.r06.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s091_output/n100.r06.s091.reference.fas" | bcftools consensus -m "n100.r06.s091_output/n100.r06.s091.low_depth.tsv" tmp.vcf.gz > "n100.r06.s091_output/n100.r06.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6f601bb99021f722fb7ea5ffb918dd4e0badf06ee357781f166725d454e4e4f4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=128.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:11:55 scheduler task 0049389d (flow de7e3f81): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s091.tar.gz resources {}
2021/07/08 17:11:55  ->  n100.r06.s091.Main.cp_out_file de7e3f81 exec extern s3://niema-test/n100/r06/n100.r06.s091.tar.gz 35.8MiB
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloading (try 0): started
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloading list<val<.=59d72217 35.7MiB> 35.7MiB>
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloading val<.=2c106f33 35.4MiB>
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloading val<.=57d59e55 35.4MiB>
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloaded list<val<.=59d72217 35.7MiB> 35.7MiB>
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloaded val<.=2c106f33 35.4MiB>
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloaded val<.=57d59e55 35.4MiB>
2021/07/08 17:11:56 scheduler task d862912d (flow 99d4b438): unloading (try 0): successful, next state: complete
2021/07/08 17:11:56  <-  n100.r06.s021.Main.out_file 99d4b438 ok     exec 4m59s 35.7MiB
2021/07/08 17:11:56 n100.r06.s021.Main.out_file 99d4b438 n100/r06/n100.r06.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f8293a512571efd46b76532a8f5feea9e89f600b4b23f36b0996ba18e702686
	sha256:99d4b438eac7dd2a194896c85ec2da6374deb37b3fbc00d4b1af49a2b156f655
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d862912ddafe2b9a2e67efcf67124b2804369e2a3154c44a4526e4cf6914da26
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s021_output"
	    wget -O "n100.r06.s021_output/n100.r06.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s021_output/n100.r06.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s021_output/n100.r06.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s021_output/n100.r06.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s021_output/n100.r06.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s021_output/n100.r06.s021.reference.fas" "n100.r06.s021_output/n100.r06.s021.fq1.fastq" "n100.r06.s021_output/n100.r06.s021.fq2.fastq" | samtools view -bS - > "n100.r06.s021_output/n100.r06.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s021_output/n100.r06.s021.untrimmed.sorted.bam" "n100.r06.s021_output/n100.r06.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s021_output/n100.r06.s021.untrimmed.sorted.bam" -b "n100.r06.s021_output/n100.r06.s021.primers.bed" -p "n100.r06.s021_output/n100.r06.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" "n100.r06.s021_output/n100.r06.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s021_output/n100.r06.s021.reference.fas" "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" > "n100.r06.s021_output/n100.r06.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s021_output/n100.r06.s021.reference.fas" --call-indels "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" > "n100.r06.s021_output/n100.r06.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s021_output/n100.r06.s021.trimmed.sorted.bam" > "n100.r06.s021_output/n100.r06.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s021_output/n100.r06.s021.depth.txt" "n100.r06.s021_output/n100.r06.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s021_output/n100.r06.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s021_output/n100.r06.s021.reference.fas" | bcftools consensus -m "n100.r06.s021_output/n100.r06.s021.low_depth.tsv" tmp.vcf.gz > "n100.r06.s021_output/n100.r06.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:59d722176db3b0b9dd42054db287ff908fed82172dcf474b268e9bfe81c33a2b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=130.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:11:56 scheduler task 26a6c51b (flow 9f5a18a1): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s021.tar.gz resources {}
2021/07/08 17:11:56  ->  n100.r06.s021.Main.cp_out_file 9f5a18a1 exec extern s3://niema-test/n100/r06/n100.r06.s021.tar.gz 35.7MiB
2021/07/08 17:11:57 scheduler task 26a6c51b (flow 9f5a18a1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:59d722176db3b0b9dd42054db287ff908fed82172dcf474b268e9bfe81c33a2b -> s3://niema-test/n100/r06/n100.r06.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:57  <-  n100.r06.s021.Main.cp_out_file 9f5a18a1 ok   extern 0s 35.7MiB
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): promoting objects (try 0): started
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): retrieving diagnostic output (try 0): started
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): retrieving result (try 0): started
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:57 scheduler task f2651734 (flow c09542e4): transferring output (try 0): started
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloading (try 0): started
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloading list<val<.=bb1eae16 35.7MiB> 35.7MiB>
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloading val<.=d7c95eaa 35.4MiB>
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloading val<.=91a34978 35.4MiB>
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): promoting objects (try 0): started
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloaded val<.=91a34978 35.4MiB>
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloaded list<val<.=bb1eae16 35.7MiB> 35.7MiB>
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloaded val<.=d7c95eaa 35.4MiB>
2021/07/08 17:11:58 scheduler task f2651734 (flow c09542e4): unloading (try 0): successful, next state: complete
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:58  <-  n100.r06.s097.Main.out_file c09542e4 ok     exec 5m0s 35.7MiB
2021/07/08 17:11:58 n100.r06.s097.Main.out_file c09542e4 n100/r06/n100.r06.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:83d8d888a2d057c4962c2de5c19b96848160d1aa23b078d279b1975487b80562
	sha256:c09542e49ea3b5352b8969ac0a06796aaa3950ae3ce4917448e755c96c71c037
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2651734d029e52816067c006b6cbe2f262e7e02734e3a05c7397eef6cef48eb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s097_output"
	    wget -O "n100.r06.s097_output/n100.r06.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s097_output/n100.r06.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s097_output/n100.r06.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s097_output/n100.r06.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s097_output/n100.r06.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s097_output/n100.r06.s097.reference.fas" "n100.r06.s097_output/n100.r06.s097.fq1.fastq" "n100.r06.s097_output/n100.r06.s097.fq2.fastq" | samtools view -bS - > "n100.r06.s097_output/n100.r06.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s097_output/n100.r06.s097.untrimmed.sorted.bam" "n100.r06.s097_output/n100.r06.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s097_output/n100.r06.s097.untrimmed.sorted.bam" -b "n100.r06.s097_output/n100.r06.s097.primers.bed" -p "n100.r06.s097_output/n100.r06.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" "n100.r06.s097_output/n100.r06.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s097_output/n100.r06.s097.reference.fas" "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" > "n100.r06.s097_output/n100.r06.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s097_output/n100.r06.s097.reference.fas" --call-indels "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" > "n100.r06.s097_output/n100.r06.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s097_output/n100.r06.s097.trimmed.sorted.bam" > "n100.r06.s097_output/n100.r06.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s097_output/n100.r06.s097.depth.txt" "n100.r06.s097_output/n100.r06.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s097_output/n100.r06.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s097_output/n100.r06.s097.reference.fas" | bcftools consensus -m "n100.r06.s097_output/n100.r06.s097.low_depth.tsv" tmp.vcf.gz > "n100.r06.s097_output/n100.r06.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bb1eae160ba18271583335727b23ae8aab8b39a76f915aa7bd2baa737b50d13d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=126.6MiB
	    disk mean=9.1MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:11:58 scheduler task d1372ca0 (flow 72cbfa25): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s097.tar.gz resources {}
2021/07/08 17:11:58  ->  n100.r06.s097.Main.cp_out_file 72cbfa25 exec extern s3://niema-test/n100/r06/n100.r06.s097.tar.gz 35.7MiB
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): retrieving diagnostic output (try 0): started
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): retrieving result (try 0): started
2021/07/08 17:11:58 scheduler task 0049389d (flow de7e3f81): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6f601bb99021f722fb7ea5ffb918dd4e0badf06ee357781f166725d454e4e4f4 -> s3://niema-test/n100/r06/n100.r06.s091.tar.gz (35.8MiB) in 3s (11.9MiB/s) 
2021/07/08 17:11:58  <-  n100.r06.s091.Main.cp_out_file de7e3f81 ok   extern 0s 35.8MiB
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:58 scheduler task 9c55a004 (flow 64a26024): transferring output (try 0): started
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): promoting objects (try 0): started
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): promoting objects (try 0): started
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): promoting objects (try 0): started
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:59 scheduler task d1372ca0 (flow 72cbfa25): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bb1eae160ba18271583335727b23ae8aab8b39a76f915aa7bd2baa737b50d13d -> s3://niema-test/n100/r06/n100.r06.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:11:59  <-  n100.r06.s097.Main.cp_out_file 72cbfa25 ok   extern 0s 35.7MiB
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): retrieving diagnostic output (try 0): started
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloading (try 0): started
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloading list<val<.=ff5e8d23 35.7MiB> 35.7MiB>
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloading val<.=f6c9a420 35.4MiB>
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloading val<.=325f797f 35.4MiB>
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): retrieving diagnostic output (try 0): started
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): retrieving diagnostic output (try 0): started
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): retrieving result (try 0): started
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloaded list<val<.=ff5e8d23 35.7MiB> 35.7MiB>
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloaded val<.=f6c9a420 35.4MiB>
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloaded val<.=325f797f 35.4MiB>
2021/07/08 17:11:59 scheduler task 9c55a004 (flow 64a26024): unloading (try 0): successful, next state: complete
2021/07/08 17:11:59  <-  n100.r06.s032.Main.out_file 64a26024 ok     exec 5m2s 35.7MiB
2021/07/08 17:11:59 n100.r06.s032.Main.out_file 64a26024 n100/r06/n100.r06.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42d3e824030a1f70cde713386244538fa9e9ffcd1d64cababe9070db1dc3f7dd
	sha256:64a260249ef060e0ddf67426e666751f727916f1d0f5f9cfb98c54ef8c8f9f75
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9c55a004e9b832483fdb000f1daa75a98ab23e0fec4ce0feb00f6d26bb5ac72f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s032_output"
	    wget -O "n100.r06.s032_output/n100.r06.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s032_output/n100.r06.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s032_output/n100.r06.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s032_output/n100.r06.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s032_output/n100.r06.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s032_output/n100.r06.s032.reference.fas" "n100.r06.s032_output/n100.r06.s032.fq1.fastq" "n100.r06.s032_output/n100.r06.s032.fq2.fastq" | samtools view -bS - > "n100.r06.s032_output/n100.r06.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s032_output/n100.r06.s032.untrimmed.sorted.bam" "n100.r06.s032_output/n100.r06.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s032_output/n100.r06.s032.untrimmed.sorted.bam" -b "n100.r06.s032_output/n100.r06.s032.primers.bed" -p "n100.r06.s032_output/n100.r06.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" "n100.r06.s032_output/n100.r06.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s032_output/n100.r06.s032.reference.fas" "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" > "n100.r06.s032_output/n100.r06.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s032_output/n100.r06.s032.reference.fas" --call-indels "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" > "n100.r06.s032_output/n100.r06.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s032_output/n100.r06.s032.trimmed.sorted.bam" > "n100.r06.s032_output/n100.r06.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s032_output/n100.r06.s032.depth.txt" "n100.r06.s032_output/n100.r06.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s032_output/n100.r06.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s032_output/n100.r06.s032.reference.fas" | bcftools consensus -m "n100.r06.s032_output/n100.r06.s032.low_depth.tsv" tmp.vcf.gz > "n100.r06.s032_output/n100.r06.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ff5e8d239981f72c8ff1342ac5f7c385ffcb1b7ba91c7705ac67af63f087fb8d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.5MiB max=131.2MiB
	    disk mean=6.8MiB max=35.7MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 17:11:59 scheduler task 8c9629ad (flow 5efc4c83): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s032.tar.gz resources {}
2021/07/08 17:11:59  ->  n100.r06.s032.Main.cp_out_file 5efc4c83 exec extern s3://niema-test/n100/r06/n100.r06.s032.tar.gz 35.7MiB
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): retrieving result (try 0): started
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): retrieving result (try 0): started
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): transferring output (try 0): started
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): promoting objects (try 0): started
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:59 scheduler task 8f12579b (flow 7b5b3afb): transferring output (try 0): started
2021/07/08 17:11:59 scheduler task 22258bab (flow ff4d8244): transferring output (try 0): started
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): retrieving diagnostic output (try 0): started
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): retrieving result (try 0): started
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): promoting objects (try 0): started
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:11:59 scheduler task c68e568f (flow 689ddd7c): transferring output (try 0): started
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): retrieving diagnostic output (try 0): started
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): retrieving result (try 0): started
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): transferring output (try 0): successful, next state: unloading
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): unloading (try 0): started
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): unloading list<val<.=dcf1ad1b 35.7MiB> 35.7MiB>
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): unloading val<.=4e7c077f 35.4MiB>
2021/07/08 17:11:59 scheduler task fdd894a1 (flow b4e03496): unloading val<.=cba6b8de 35.4MiB>
2021/07/08 17:11:59 scheduler task 13aceaad (flow 6791e387): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): transferring output (try 0): started
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): promoting objects (try 0): started
2021/07/08 17:12:00 scheduler task fdd894a1 (flow b4e03496): unloaded val<.=cba6b8de 35.4MiB>
2021/07/08 17:12:00 scheduler task fdd894a1 (flow b4e03496): unloaded list<val<.=dcf1ad1b 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task fdd894a1 (flow b4e03496): unloaded val<.=4e7c077f 35.4MiB>
2021/07/08 17:12:00 scheduler task fdd894a1 (flow b4e03496): unloading (try 0): successful, next state: complete
2021/07/08 17:12:00  <-  n100.r06.s099.Main.out_file b4e03496 ok     exec 5m2s 35.7MiB
2021/07/08 17:12:00 n100.r06.s099.Main.out_file b4e03496 n100/r06/n100.r06.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d3fac6985275eb34cf7076c2e2fa7e6ad961a31a13a3bdb991382c08dba43f1a
	sha256:b4e03496243d7cf7db201e6abde048e4512ea26ed4a3bdc972c53b48dc7b55e7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fdd894a12ee1bdb608207f517f28dae021d8b5a0e1a4bc801eca0dfe7412cd3d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s099_output"
	    wget -O "n100.r06.s099_output/n100.r06.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s099_output/n100.r06.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s099_output/n100.r06.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s099_output/n100.r06.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s099_output/n100.r06.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s099_output/n100.r06.s099.reference.fas" "n100.r06.s099_output/n100.r06.s099.fq1.fastq" "n100.r06.s099_output/n100.r06.s099.fq2.fastq" | samtools view -bS - > "n100.r06.s099_output/n100.r06.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s099_output/n100.r06.s099.untrimmed.sorted.bam" "n100.r06.s099_output/n100.r06.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s099_output/n100.r06.s099.untrimmed.sorted.bam" -b "n100.r06.s099_output/n100.r06.s099.primers.bed" -p "n100.r06.s099_output/n100.r06.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" "n100.r06.s099_output/n100.r06.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s099_output/n100.r06.s099.reference.fas" "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" > "n100.r06.s099_output/n100.r06.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s099_output/n100.r06.s099.reference.fas" --call-indels "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" > "n100.r06.s099_output/n100.r06.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s099_output/n100.r06.s099.trimmed.sorted.bam" > "n100.r06.s099_output/n100.r06.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s099_output/n100.r06.s099.depth.txt" "n100.r06.s099_output/n100.r06.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s099_output/n100.r06.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s099_output/n100.r06.s099.reference.fas" | bcftools consensus -m "n100.r06.s099_output/n100.r06.s099.low_depth.tsv" tmp.vcf.gz > "n100.r06.s099_output/n100.r06.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:dcf1ad1b9b455790412623a39c76734b7a1c0366692fde4c68dd0d396d73b922 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=130.3MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:12:00 scheduler task 34f44f7b (flow 9828913f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s099.tar.gz resources {}
2021/07/08 17:12:00  ->  n100.r06.s099.Main.cp_out_file 9828913f exec extern s3://niema-test/n100/r06/n100.r06.s099.tar.gz 35.7MiB
2021/07/08 17:12:00 scheduler task 8c9629ad (flow 5efc4c83): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ff5e8d239981f72c8ff1342ac5f7c385ffcb1b7ba91c7705ac67af63f087fb8d -> s3://niema-test/n100/r06/n100.r06.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:00  <-  n100.r06.s032.Main.cp_out_file 5efc4c83 ok   extern 0s 35.7MiB
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloading (try 0): started
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloading list<val<.=631d550f 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloading val<.=780157d3 35.4MiB>
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloading val<.=2f9d28a9 35.4MiB>
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): retrieving diagnostic output (try 0): started
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloading (try 0): started
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloading list<val<.=39a6611b 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloading val<.=4b2a7848 35.4MiB>
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloading val<.=998e16db 35.4MiB>
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloaded list<val<.=631d550f 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloaded val<.=780157d3 35.4MiB>
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloaded val<.=2f9d28a9 35.4MiB>
2021/07/08 17:12:00 scheduler task 8f12579b (flow 7b5b3afb): unloading (try 0): successful, next state: complete
2021/07/08 17:12:00  <-  n100.r06.s050.Main.out_file 7b5b3afb ok     exec 5m3s 35.7MiB
2021/07/08 17:12:00 n100.r06.s050.Main.out_file 7b5b3afb n100/r06/n100.r06.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:17162145dd3a76885ea7eed8c46151a7d22be93ba1a4bf072ba3cb71545739b7
	sha256:7b5b3afb30e35193fe5a60b1808f62c92b0c78d3224d812d9393d8b9bc84c04e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f12579baf3d551420e54e23486a06e7f24c52daeacae9953277bcf89f24c1cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s050_output"
	    wget -O "n100.r06.s050_output/n100.r06.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s050_output/n100.r06.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s050_output/n100.r06.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s050_output/n100.r06.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s050_output/n100.r06.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s050_output/n100.r06.s050.reference.fas" "n100.r06.s050_output/n100.r06.s050.fq1.fastq" "n100.r06.s050_output/n100.r06.s050.fq2.fastq" | samtools view -bS - > "n100.r06.s050_output/n100.r06.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s050_output/n100.r06.s050.untrimmed.sorted.bam" "n100.r06.s050_output/n100.r06.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s050_output/n100.r06.s050.untrimmed.sorted.bam" -b "n100.r06.s050_output/n100.r06.s050.primers.bed" -p "n100.r06.s050_output/n100.r06.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" "n100.r06.s050_output/n100.r06.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s050_output/n100.r06.s050.reference.fas" "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" > "n100.r06.s050_output/n100.r06.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s050_output/n100.r06.s050.reference.fas" --call-indels "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" > "n100.r06.s050_output/n100.r06.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s050_output/n100.r06.s050.trimmed.sorted.bam" > "n100.r06.s050_output/n100.r06.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s050_output/n100.r06.s050.depth.txt" "n100.r06.s050_output/n100.r06.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s050_output/n100.r06.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s050_output/n100.r06.s050.reference.fas" | bcftools consensus -m "n100.r06.s050_output/n100.r06.s050.low_depth.tsv" tmp.vcf.gz > "n100.r06.s050_output/n100.r06.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:631d550f236dce0fef0e0693b1bf0934ca9f2086558fdf19205632855499fcbb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=866B max=3.1KiB
2021/07/08 17:12:00 scheduler task 4fea90c6 (flow ae3e99e4): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s050.tar.gz resources {}
2021/07/08 17:12:00  ->  n100.r06.s050.Main.cp_out_file ae3e99e4 exec extern s3://niema-test/n100/r06/n100.r06.s050.tar.gz 35.7MiB
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): retrieving result (try 0): started
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloaded list<val<.=39a6611b 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloaded val<.=998e16db 35.4MiB>
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloaded val<.=4b2a7848 35.4MiB>
2021/07/08 17:12:00 scheduler task 22258bab (flow ff4d8244): unloading (try 0): successful, next state: complete
2021/07/08 17:12:00  <-  n100.r06.s065.Main.out_file ff4d8244 ok     exec 5m3s 35.7MiB
2021/07/08 17:12:00 n100.r06.s065.Main.out_file ff4d8244 n100/r06/n100.r06.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:652c4a878c617e6ed91000e0f763e4fea61ab9715dba284790e39ea56e93e04f
	sha256:ff4d82440a2d303daeda50323d28c25aec1628040ab199df1f0209b405e10239
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/22258bab61e7a1cc8b1b24851b40515f7d1ccbd60993a9b87c069f751a72749d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s065_output"
	    wget -O "n100.r06.s065_output/n100.r06.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s065_output/n100.r06.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s065_output/n100.r06.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s065_output/n100.r06.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s065_output/n100.r06.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s065_output/n100.r06.s065.reference.fas" "n100.r06.s065_output/n100.r06.s065.fq1.fastq" "n100.r06.s065_output/n100.r06.s065.fq2.fastq" | samtools view -bS - > "n100.r06.s065_output/n100.r06.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s065_output/n100.r06.s065.untrimmed.sorted.bam" "n100.r06.s065_output/n100.r06.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s065_output/n100.r06.s065.untrimmed.sorted.bam" -b "n100.r06.s065_output/n100.r06.s065.primers.bed" -p "n100.r06.s065_output/n100.r06.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" "n100.r06.s065_output/n100.r06.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s065_output/n100.r06.s065.reference.fas" "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" > "n100.r06.s065_output/n100.r06.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s065_output/n100.r06.s065.reference.fas" --call-indels "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" > "n100.r06.s065_output/n100.r06.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s065_output/n100.r06.s065.trimmed.sorted.bam" > "n100.r06.s065_output/n100.r06.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s065_output/n100.r06.s065.depth.txt" "n100.r06.s065_output/n100.r06.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s065_output/n100.r06.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s065_output/n100.r06.s065.reference.fas" | bcftools consensus -m "n100.r06.s065_output/n100.r06.s065.low_depth.tsv" tmp.vcf.gz > "n100.r06.s065_output/n100.r06.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:39a6611b3423323bb258c457c6f2f27caf1a11a76f95eb65de06ca06bb31d5dc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.7MiB max=124.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:12:00 scheduler task 7b142539 (flow 080904d2): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s065.tar.gz resources {}
2021/07/08 17:12:00  ->  n100.r06.s065.Main.cp_out_file 080904d2 exec extern s3://niema-test/n100/r06/n100.r06.s065.tar.gz 35.7MiB
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): transferring output (try 0): started
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloading (try 0): started
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloading list<val<.=50ad57c7 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloading val<.=d80821dc 35.4MiB>
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloading val<.=ac7dc2c3 35.4MiB>
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloaded val<.=ac7dc2c3 35.4MiB>
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloaded val<.=d80821dc 35.4MiB>
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloaded list<val<.=50ad57c7 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task c68e568f (flow 689ddd7c): unloading (try 0): successful, next state: complete
2021/07/08 17:12:00  <-  n100.r06.s052.Main.out_file 689ddd7c ok     exec 5m3s 35.7MiB
2021/07/08 17:12:00 n100.r06.s052.Main.out_file 689ddd7c n100/r06/n100.r06.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:02fbe4cb172898f946bfeef0915a7968d41832e075f5c4507723a0cf16cfbe05
	sha256:689ddd7caf1e599c2643b48ec42fedd7e04669988ba48c473b971bfab61dde7f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c68e568ff0c551e6fdc090411c396c41fa6dd31eb2fad7cd1763c8c4291c9d41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s052_output"
	    wget -O "n100.r06.s052_output/n100.r06.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s052_output/n100.r06.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s052_output/n100.r06.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s052_output/n100.r06.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s052_output/n100.r06.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s052_output/n100.r06.s052.reference.fas" "n100.r06.s052_output/n100.r06.s052.fq1.fastq" "n100.r06.s052_output/n100.r06.s052.fq2.fastq" | samtools view -bS - > "n100.r06.s052_output/n100.r06.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s052_output/n100.r06.s052.untrimmed.sorted.bam" "n100.r06.s052_output/n100.r06.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s052_output/n100.r06.s052.untrimmed.sorted.bam" -b "n100.r06.s052_output/n100.r06.s052.primers.bed" -p "n100.r06.s052_output/n100.r06.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" "n100.r06.s052_output/n100.r06.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s052_output/n100.r06.s052.reference.fas" "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" > "n100.r06.s052_output/n100.r06.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s052_output/n100.r06.s052.reference.fas" --call-indels "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" > "n100.r06.s052_output/n100.r06.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s052_output/n100.r06.s052.trimmed.sorted.bam" > "n100.r06.s052_output/n100.r06.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s052_output/n100.r06.s052.depth.txt" "n100.r06.s052_output/n100.r06.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s052_output/n100.r06.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s052_output/n100.r06.s052.reference.fas" | bcftools consensus -m "n100.r06.s052_output/n100.r06.s052.low_depth.tsv" tmp.vcf.gz > "n100.r06.s052_output/n100.r06.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:50ad57c781405f61b9f63d760870a780c2579108565106ddc82afe9e528ea774 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.3MiB max=127.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 17:12:00 scheduler task 398cdf8e (flow c1a2c571): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s052.tar.gz resources {}
2021/07/08 17:12:00  ->  n100.r06.s052.Main.cp_out_file c1a2c571 exec extern s3://niema-test/n100/r06/n100.r06.s052.tar.gz 35.7MiB
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): promoting objects (try 0): started
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): retrieving diagnostic output (try 0): started
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloading (try 0): started
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloading list<val<.=b453df64 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloading val<.=257c62eb 35.4MiB>
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloading val<.=0dea0d2a 35.4MiB>
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): retrieving result (try 0): started
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloaded list<val<.=b453df64 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloaded val<.=257c62eb 35.4MiB>
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloaded val<.=0dea0d2a 35.4MiB>
2021/07/08 17:12:00 scheduler task 13aceaad (flow 6791e387): unloading (try 0): successful, next state: complete
2021/07/08 17:12:00  <-  n100.r06.s038.Main.out_file 6791e387 ok     exec 4m57s 35.7MiB
2021/07/08 17:12:00 n100.r06.s038.Main.out_file 6791e387 n100/r06/n100.r06.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d41c075b97cf016ce22ef52946c4426dff18474e6faac1c6150a17de0a439ad6
	sha256:6791e38733e4cce63c1818c2b478624fd1cbb11e9bc24076c91392c02c4954f6
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13aceaadc7cfdb25a16054bee6d042a6452fad7c9a13e06fbdec83172dbc0316
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s038_output"
	    wget -O "n100.r06.s038_output/n100.r06.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s038_output/n100.r06.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s038_output/n100.r06.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s038_output/n100.r06.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s038_output/n100.r06.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s038_output/n100.r06.s038.reference.fas" "n100.r06.s038_output/n100.r06.s038.fq1.fastq" "n100.r06.s038_output/n100.r06.s038.fq2.fastq" | samtools view -bS - > "n100.r06.s038_output/n100.r06.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s038_output/n100.r06.s038.untrimmed.sorted.bam" "n100.r06.s038_output/n100.r06.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s038_output/n100.r06.s038.untrimmed.sorted.bam" -b "n100.r06.s038_output/n100.r06.s038.primers.bed" -p "n100.r06.s038_output/n100.r06.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" "n100.r06.s038_output/n100.r06.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s038_output/n100.r06.s038.reference.fas" "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" > "n100.r06.s038_output/n100.r06.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s038_output/n100.r06.s038.reference.fas" --call-indels "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" > "n100.r06.s038_output/n100.r06.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s038_output/n100.r06.s038.trimmed.sorted.bam" > "n100.r06.s038_output/n100.r06.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s038_output/n100.r06.s038.depth.txt" "n100.r06.s038_output/n100.r06.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s038_output/n100.r06.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s038_output/n100.r06.s038.reference.fas" | bcftools consensus -m "n100.r06.s038_output/n100.r06.s038.low_depth.tsv" tmp.vcf.gz > "n100.r06.s038_output/n100.r06.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b453df647491e11d63a1f5834fcfb7e28e52a418ec0469b59e7f9ee226685f1b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=127.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:00 scheduler task 7bf9c0bc (flow 60ee05d4): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s038.tar.gz resources {}
2021/07/08 17:12:00  ->  n100.r06.s038.Main.cp_out_file 60ee05d4 exec extern s3://niema-test/n100/r06/n100.r06.s038.tar.gz 35.7MiB
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:00 scheduler task 14aa39a0 (flow 96cae92b): transferring output (try 0): started
2021/07/08 17:12:00 scheduler task a7d07754 (flow 10cd036d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:00 scheduler task a7d07754 (flow 10cd036d): promoting objects (try 0): started
2021/07/08 17:12:00 scheduler task 34f44f7b (flow 9828913f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:dcf1ad1b9b455790412623a39c76734b7a1c0366692fde4c68dd0d396d73b922 -> s3://niema-test/n100/r06/n100.r06.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:00  <-  n100.r06.s099.Main.cp_out_file 9828913f ok   extern 0s 35.7MiB
2021/07/08 17:12:00 scheduler task 4a370f54 (flow 5c4c374f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:00 scheduler task 4a370f54 (flow 5c4c374f): promoting objects (try 0): started
2021/07/08 17:12:00 scheduler task a7d07754 (flow 10cd036d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:00 scheduler task a7d07754 (flow 10cd036d): retrieving diagnostic output (try 0): started
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloading (try 0): started
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloading list<val<.=46948960 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloading val<.=7bb3ed64 35.4MiB>
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloading val<.=fcc37f18 35.4MiB>
2021/07/08 17:12:00 scheduler task 4a370f54 (flow 5c4c374f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:00 scheduler task 4a370f54 (flow 5c4c374f): retrieving diagnostic output (try 0): started
2021/07/08 17:12:00 scheduler task a7d07754 (flow 10cd036d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:00 scheduler task a7d07754 (flow 10cd036d): retrieving result (try 0): started
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloaded val<.=fcc37f18 35.4MiB>
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloaded list<val<.=46948960 35.7MiB> 35.7MiB>
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloaded val<.=7bb3ed64 35.4MiB>
2021/07/08 17:12:00 scheduler task 53e9365d (flow b71a7073): unloading (try 0): successful, next state: complete
2021/07/08 17:12:00  <-  n100.r06.s066.Main.out_file b71a7073 ok     exec 5m3s 35.7MiB
2021/07/08 17:12:00 n100.r06.s066.Main.out_file b71a7073 n100/r06/n100.r06.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6db2f449583e1376e7183f37c2272e776988b8ddec5714db465d7b9f397efd13
	sha256:b71a7073b095292dd67fc52e33840accdc7370d954a3b7e4c8b2bb8e3e73dcf7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/53e9365d1838fc142a7f3131c1ba6b89b5d6c3f59637788d52e163c0eb097b8d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s066_output"
	    wget -O "n100.r06.s066_output/n100.r06.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s066_output/n100.r06.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s066_output/n100.r06.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s066_output/n100.r06.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s066_output/n100.r06.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s066_output/n100.r06.s066.reference.fas" "n100.r06.s066_output/n100.r06.s066.fq1.fastq" "n100.r06.s066_output/n100.r06.s066.fq2.fastq" | samtools view -bS - > "n100.r06.s066_output/n100.r06.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s066_output/n100.r06.s066.untrimmed.sorted.bam" "n100.r06.s066_output/n100.r06.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s066_output/n100.r06.s066.untrimmed.sorted.bam" -b "n100.r06.s066_output/n100.r06.s066.primers.bed" -p "n100.r06.s066_output/n100.r06.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" "n100.r06.s066_output/n100.r06.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s066_output/n100.r06.s066.reference.fas" "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" > "n100.r06.s066_output/n100.r06.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s066_output/n100.r06.s066.reference.fas" --call-indels "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" > "n100.r06.s066_output/n100.r06.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s066_output/n100.r06.s066.trimmed.sorted.bam" > "n100.r06.s066_output/n100.r06.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s066_output/n100.r06.s066.depth.txt" "n100.r06.s066_output/n100.r06.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s066_output/n100.r06.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s066_output/n100.r06.s066.reference.fas" | bcftools consensus -m "n100.r06.s066_output/n100.r06.s066.low_depth.tsv" tmp.vcf.gz > "n100.r06.s066_output/n100.r06.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:46948960bb903a7eed331380a7b9960045032b5608ec07e5fc45803589d8783d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=126.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=694B max=2.0KiB
2021/07/08 17:12:00 scheduler task a7ea2d45 (flow 67812701): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s066.tar.gz resources {}
2021/07/08 17:12:00  ->  n100.r06.s066.Main.cp_out_file 67812701 exec extern s3://niema-test/n100/r06/n100.r06.s066.tar.gz 35.7MiB
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): retrieving result (try 0): started
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): transferring output (try 0): started
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:01 scheduler task 4fea90c6 (flow ae3e99e4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:631d550f236dce0fef0e0693b1bf0934ca9f2086558fdf19205632855499fcbb -> s3://niema-test/n100/r06/n100.r06.s050.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:01  <-  n100.r06.s050.Main.cp_out_file ae3e99e4 ok   extern 0s 35.7MiB
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): transferring output (try 0): started
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): promoting objects (try 0): started
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloading (try 0): started
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloading list<val<.=18a2649d 35.8MiB> 35.8MiB>
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloading val<.=44351b3b 35.4MiB>
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloading val<.=20062b5b 35.4MiB>
2021/07/08 17:12:01 scheduler task 398cdf8e (flow c1a2c571): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:50ad57c781405f61b9f63d760870a780c2579108565106ddc82afe9e528ea774 -> s3://niema-test/n100/r06/n100.r06.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:01  <-  n100.r06.s052.Main.cp_out_file c1a2c571 ok   extern 0s 35.7MiB
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): retrieving diagnostic output (try 0): started
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloaded val<.=20062b5b 35.4MiB>
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloaded list<val<.=18a2649d 35.8MiB> 35.8MiB>
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloaded val<.=44351b3b 35.4MiB>
2021/07/08 17:12:01 scheduler task 14aa39a0 (flow 96cae92b): unloading (try 0): successful, next state: complete
2021/07/08 17:12:01  <-  n100.r06.s029.Main.out_file 96cae92b ok     exec 5m3s 35.8MiB
2021/07/08 17:12:01 n100.r06.s029.Main.out_file 96cae92b n100/r06/n100.r06.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b4e759e8c083cc18f4677dedf52f75549084978a6e9a1ae49b8939e9c8d955be
	sha256:96cae92bf93a2dc7e9ac68f075e69771a1ddff8e9fa59f423b121bbfe2689035
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/14aa39a09ff023a38c2bbb1d4b1f8cd30781ce2f0d255d361c13dc07e8800bc8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s029_output"
	    wget -O "n100.r06.s029_output/n100.r06.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s029_output/n100.r06.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s029_output/n100.r06.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s029_output/n100.r06.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s029_output/n100.r06.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s029_output/n100.r06.s029.reference.fas" "n100.r06.s029_output/n100.r06.s029.fq1.fastq" "n100.r06.s029_output/n100.r06.s029.fq2.fastq" | samtools view -bS - > "n100.r06.s029_output/n100.r06.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s029_output/n100.r06.s029.untrimmed.sorted.bam" "n100.r06.s029_output/n100.r06.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s029_output/n100.r06.s029.untrimmed.sorted.bam" -b "n100.r06.s029_output/n100.r06.s029.primers.bed" -p "n100.r06.s029_output/n100.r06.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" "n100.r06.s029_output/n100.r06.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s029_output/n100.r06.s029.reference.fas" "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" > "n100.r06.s029_output/n100.r06.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s029_output/n100.r06.s029.reference.fas" --call-indels "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" > "n100.r06.s029_output/n100.r06.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s029_output/n100.r06.s029.trimmed.sorted.bam" > "n100.r06.s029_output/n100.r06.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s029_output/n100.r06.s029.depth.txt" "n100.r06.s029_output/n100.r06.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s029_output/n100.r06.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s029_output/n100.r06.s029.reference.fas" | bcftools consensus -m "n100.r06.s029_output/n100.r06.s029.low_depth.tsv" tmp.vcf.gz > "n100.r06.s029_output/n100.r06.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:18a2649d49109eefec1da8dd342ca5cb3c21840b4194955343e9ead920a8210e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.3MiB max=125.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:12:01 scheduler task a5c8a79f (flow 3861e8e1): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s029.tar.gz resources {}
2021/07/08 17:12:01  ->  n100.r06.s029.Main.cp_out_file 3861e8e1 exec extern s3://niema-test/n100/r06/n100.r06.s029.tar.gz 35.8MiB
2021/07/08 17:12:01 scheduler task 7b142539 (flow 080904d2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:39a6611b3423323bb258c457c6f2f27caf1a11a76f95eb65de06ca06bb31d5dc -> s3://niema-test/n100/r06/n100.r06.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:01  <-  n100.r06.s065.Main.cp_out_file 080904d2 ok   extern 0s 35.7MiB
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): retrieving result (try 0): started
2021/07/08 17:12:01 scheduler task 7bf9c0bc (flow 60ee05d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b453df647491e11d63a1f5834fcfb7e28e52a418ec0469b59e7f9ee226685f1b -> s3://niema-test/n100/r06/n100.r06.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:01  <-  n100.r06.s038.Main.cp_out_file 60ee05d4 ok   extern 0s 35.7MiB
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): transferring output (try 0): started
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloading (try 0): started
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloading list<val<.=f3815b6b 35.7MiB> 35.7MiB>
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloading val<.=d260ce29 35.4MiB>
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloading val<.=f25a78c9 35.4MiB>
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloaded val<.=d260ce29 35.4MiB>
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloaded list<val<.=f3815b6b 35.7MiB> 35.7MiB>
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloaded val<.=f25a78c9 35.4MiB>
2021/07/08 17:12:01 scheduler task a7d07754 (flow 10cd036d): unloading (try 0): successful, next state: complete
2021/07/08 17:12:01  <-  n100.r06.s007.Main.out_file 10cd036d ok     exec 5m4s 35.7MiB
2021/07/08 17:12:01 n100.r06.s007.Main.out_file 10cd036d n100/r06/n100.r06.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:980834353f24afaacaac0b87aaf4da347454e57c3e35d5d2090ba14cfbc96797
	sha256:10cd036d6a0406452a8bda39e0682b784fef4866d6ebf15bbd2b93a2948c9cf8
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a7d077548662803b8df18e03701bc1bc3d0296bd8674c7f3c16d34a2917adde8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s007_output"
	    wget -O "n100.r06.s007_output/n100.r06.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s007_output/n100.r06.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s007_output/n100.r06.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s007_output/n100.r06.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s007_output/n100.r06.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s007_output/n100.r06.s007.reference.fas" "n100.r06.s007_output/n100.r06.s007.fq1.fastq" "n100.r06.s007_output/n100.r06.s007.fq2.fastq" | samtools view -bS - > "n100.r06.s007_output/n100.r06.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s007_output/n100.r06.s007.untrimmed.sorted.bam" "n100.r06.s007_output/n100.r06.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s007_output/n100.r06.s007.untrimmed.sorted.bam" -b "n100.r06.s007_output/n100.r06.s007.primers.bed" -p "n100.r06.s007_output/n100.r06.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" "n100.r06.s007_output/n100.r06.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s007_output/n100.r06.s007.reference.fas" "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" > "n100.r06.s007_output/n100.r06.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s007_output/n100.r06.s007.reference.fas" --call-indels "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" > "n100.r06.s007_output/n100.r06.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s007_output/n100.r06.s007.trimmed.sorted.bam" > "n100.r06.s007_output/n100.r06.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s007_output/n100.r06.s007.depth.txt" "n100.r06.s007_output/n100.r06.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s007_output/n100.r06.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s007_output/n100.r06.s007.reference.fas" | bcftools consensus -m "n100.r06.s007_output/n100.r06.s007.low_depth.tsv" tmp.vcf.gz > "n100.r06.s007_output/n100.r06.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f3815b6b837c773a6268f317149bd1bcd0495518bcbae077ed45dceb454eade1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=124.9MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:12:01 scheduler task fd76b243 (flow edc152ce): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s007.tar.gz resources {}
2021/07/08 17:12:01  ->  n100.r06.s007.Main.cp_out_file edc152ce exec extern s3://niema-test/n100/r06/n100.r06.s007.tar.gz 35.7MiB
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloading (try 0): started
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloading list<val<.=95b5d405 35.7MiB> 35.7MiB>
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloading val<.=28d84b02 35.4MiB>
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloading val<.=48e9b6a2 35.4MiB>
2021/07/08 17:12:01 scheduler task a7ea2d45 (flow 67812701): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:46948960bb903a7eed331380a7b9960045032b5608ec07e5fc45803589d8783d -> s3://niema-test/n100/r06/n100.r06.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:01  <-  n100.r06.s066.Main.cp_out_file 67812701 ok   extern 0s 35.7MiB
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloaded val<.=28d84b02 35.4MiB>
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloaded list<val<.=95b5d405 35.7MiB> 35.7MiB>
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloaded val<.=48e9b6a2 35.4MiB>
2021/07/08 17:12:01 scheduler task 4a370f54 (flow 5c4c374f): unloading (try 0): successful, next state: complete
2021/07/08 17:12:01  <-  n100.r06.s069.Main.out_file 5c4c374f ok     exec 4m58s 35.7MiB
2021/07/08 17:12:01 n100.r06.s069.Main.out_file 5c4c374f n100/r06/n100.r06.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d5ec5e0ece41efcc6ff365e3546f1a12331b9503158da0bf598002717fe4189
	sha256:5c4c374f3346887702691f13279227b9301a3b28ac5486fedade7f8919812239
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4a370f54a7dd5384564698e9051f1cf51f33d1c77c56edd5fdc7e3f67e418b39
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s069_output"
	    wget -O "n100.r06.s069_output/n100.r06.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s069_output/n100.r06.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s069_output/n100.r06.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s069_output/n100.r06.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s069_output/n100.r06.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s069_output/n100.r06.s069.reference.fas" "n100.r06.s069_output/n100.r06.s069.fq1.fastq" "n100.r06.s069_output/n100.r06.s069.fq2.fastq" | samtools view -bS - > "n100.r06.s069_output/n100.r06.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s069_output/n100.r06.s069.untrimmed.sorted.bam" "n100.r06.s069_output/n100.r06.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s069_output/n100.r06.s069.untrimmed.sorted.bam" -b "n100.r06.s069_output/n100.r06.s069.primers.bed" -p "n100.r06.s069_output/n100.r06.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" "n100.r06.s069_output/n100.r06.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s069_output/n100.r06.s069.reference.fas" "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" > "n100.r06.s069_output/n100.r06.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s069_output/n100.r06.s069.reference.fas" --call-indels "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" > "n100.r06.s069_output/n100.r06.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s069_output/n100.r06.s069.trimmed.sorted.bam" > "n100.r06.s069_output/n100.r06.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s069_output/n100.r06.s069.depth.txt" "n100.r06.s069_output/n100.r06.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s069_output/n100.r06.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s069_output/n100.r06.s069.reference.fas" | bcftools consensus -m "n100.r06.s069_output/n100.r06.s069.low_depth.tsv" tmp.vcf.gz > "n100.r06.s069_output/n100.r06.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:95b5d405946a6098a644740a5356f69b4414670f0db994404d741e8a6a3d1195 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:12:01 scheduler task 82378056 (flow e7e69d9f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s069.tar.gz resources {}
2021/07/08 17:12:01  ->  n100.r06.s069.Main.cp_out_file e7e69d9f exec extern s3://niema-test/n100/r06/n100.r06.s069.tar.gz 35.7MiB
2021/07/08 17:12:01 scheduler task 0405c8f8 (flow c10a38f2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:01 scheduler task 0405c8f8 (flow c10a38f2): promoting objects (try 0): started
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): unloading (try 0): started
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): unloading list<val<.=0c2a4eda 35.7MiB> 35.7MiB>
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): unloading val<.=605490cc 35.4MiB>
2021/07/08 17:12:01 scheduler task 90258421 (flow 4b4267c3): unloading val<.=82a8a4f7 35.4MiB>
2021/07/08 17:12:01 scheduler task 0405c8f8 (flow c10a38f2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:01 scheduler task 0405c8f8 (flow c10a38f2): retrieving diagnostic output (try 0): started
2021/07/08 17:12:02 scheduler task 90258421 (flow 4b4267c3): unloaded list<val<.=0c2a4eda 35.7MiB> 35.7MiB>
2021/07/08 17:12:02 scheduler task 90258421 (flow 4b4267c3): unloaded val<.=82a8a4f7 35.4MiB>
2021/07/08 17:12:02 scheduler task 90258421 (flow 4b4267c3): unloaded val<.=605490cc 35.4MiB>
2021/07/08 17:12:02 scheduler task 90258421 (flow 4b4267c3): unloading (try 0): successful, next state: complete
2021/07/08 17:12:02  <-  n100.r06.s068.Main.out_file 4b4267c3 ok     exec 5m5s 35.7MiB
2021/07/08 17:12:02 n100.r06.s068.Main.out_file 4b4267c3 n100/r06/n100.r06.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4e6db93ce21c283bd365fff0b5d6ae5a0193d8c4125f691717e03339f9a41e6b
	sha256:4b4267c3eccfe0bf11e99db59b0485a9c2d372afb4c096a94a68f2eace653d61
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/90258421bea61e27e06da8ab7827652e9f2e2c18fe5e92bdca87d163b10be952
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s068_output"
	    wget -O "n100.r06.s068_output/n100.r06.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s068_output/n100.r06.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s068_output/n100.r06.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s068_output/n100.r06.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s068_output/n100.r06.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s068_output/n100.r06.s068.reference.fas" "n100.r06.s068_output/n100.r06.s068.fq1.fastq" "n100.r06.s068_output/n100.r06.s068.fq2.fastq" | samtools view -bS - > "n100.r06.s068_output/n100.r06.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s068_output/n100.r06.s068.untrimmed.sorted.bam" "n100.r06.s068_output/n100.r06.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s068_output/n100.r06.s068.untrimmed.sorted.bam" -b "n100.r06.s068_output/n100.r06.s068.primers.bed" -p "n100.r06.s068_output/n100.r06.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" "n100.r06.s068_output/n100.r06.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s068_output/n100.r06.s068.reference.fas" "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" > "n100.r06.s068_output/n100.r06.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s068_output/n100.r06.s068.reference.fas" --call-indels "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" > "n100.r06.s068_output/n100.r06.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s068_output/n100.r06.s068.trimmed.sorted.bam" > "n100.r06.s068_output/n100.r06.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s068_output/n100.r06.s068.depth.txt" "n100.r06.s068_output/n100.r06.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s068_output/n100.r06.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s068_output/n100.r06.s068.reference.fas" | bcftools consensus -m "n100.r06.s068_output/n100.r06.s068.low_depth.tsv" tmp.vcf.gz > "n100.r06.s068_output/n100.r06.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0c2a4edaf8bb59c167bbebd63d7829fdf330599c06cb5a32f5cdaedbf1294c4d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=862B max=3.0KiB
2021/07/08 17:12:02 scheduler task 1e4a1247 (flow e99b28d0): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s068.tar.gz resources {}
2021/07/08 17:12:02  ->  n100.r06.s068.Main.cp_out_file e99b28d0 exec extern s3://niema-test/n100/r06/n100.r06.s068.tar.gz 35.7MiB
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): retrieving result (try 0): started
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:02 scheduler task a5c8a79f (flow 3861e8e1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:18a2649d49109eefec1da8dd342ca5cb3c21840b4194955343e9ead920a8210e -> s3://niema-test/n100/r06/n100.r06.s029.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:02  <-  n100.r06.s029.Main.cp_out_file 3861e8e1 ok   extern 0s 35.8MiB
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): transferring output (try 0): started
2021/07/08 17:12:02 scheduler task fd76b243 (flow edc152ce): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f3815b6b837c773a6268f317149bd1bcd0495518bcbae077ed45dceb454eade1 -> s3://niema-test/n100/r06/n100.r06.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:02  <-  n100.r06.s007.Main.cp_out_file edc152ce ok   extern 0s 35.7MiB
2021/07/08 17:12:02 scheduler task 82378056 (flow e7e69d9f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:95b5d405946a6098a644740a5356f69b4414670f0db994404d741e8a6a3d1195 -> s3://niema-test/n100/r06/n100.r06.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:02  <-  n100.r06.s069.Main.cp_out_file e7e69d9f ok   extern 0s 35.7MiB
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): promoting objects (try 0): started
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): retrieving diagnostic output (try 0): started
2021/07/08 17:12:02 scheduler task 1e4a1247 (flow e99b28d0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0c2a4edaf8bb59c167bbebd63d7829fdf330599c06cb5a32f5cdaedbf1294c4d -> s3://niema-test/n100/r06/n100.r06.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:02  <-  n100.r06.s068.Main.cp_out_file e99b28d0 ok   extern 0s 35.7MiB
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloading (try 0): started
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloading val<.=7a9a9c82 35.4MiB>
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloading list<val<.=67b0d7ef 35.8MiB> 35.8MiB>
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloading val<.=ee628215 35.4MiB>
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): retrieving result (try 0): started
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloaded val<.=ee628215 35.4MiB>
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloaded list<val<.=67b0d7ef 35.8MiB> 35.8MiB>
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloaded val<.=7a9a9c82 35.4MiB>
2021/07/08 17:12:02 scheduler task 0405c8f8 (flow c10a38f2): unloading (try 0): successful, next state: complete
2021/07/08 17:12:02  <-  n100.r06.s056.Main.out_file c10a38f2 ok     exec 5m5s 35.8MiB
2021/07/08 17:12:02 n100.r06.s056.Main.out_file c10a38f2 n100/r06/n100.r06.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cf13777bce7d62f20914dcb387048a1ca8973f16be0ba4dfb018f4139f2df143
	sha256:c10a38f22b75f20b5065ef418639f5a966234c37dc0fd4a925935af355518209
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0405c8f842dde027d046fdf0e49682f0d9d7b328a774cbd3f870769af1687702
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s056_output"
	    wget -O "n100.r06.s056_output/n100.r06.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s056_output/n100.r06.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s056_output/n100.r06.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s056_output/n100.r06.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s056_output/n100.r06.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s056_output/n100.r06.s056.reference.fas" "n100.r06.s056_output/n100.r06.s056.fq1.fastq" "n100.r06.s056_output/n100.r06.s056.fq2.fastq" | samtools view -bS - > "n100.r06.s056_output/n100.r06.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s056_output/n100.r06.s056.untrimmed.sorted.bam" "n100.r06.s056_output/n100.r06.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s056_output/n100.r06.s056.untrimmed.sorted.bam" -b "n100.r06.s056_output/n100.r06.s056.primers.bed" -p "n100.r06.s056_output/n100.r06.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" "n100.r06.s056_output/n100.r06.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s056_output/n100.r06.s056.reference.fas" "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" > "n100.r06.s056_output/n100.r06.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s056_output/n100.r06.s056.reference.fas" --call-indels "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" > "n100.r06.s056_output/n100.r06.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s056_output/n100.r06.s056.trimmed.sorted.bam" > "n100.r06.s056_output/n100.r06.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s056_output/n100.r06.s056.depth.txt" "n100.r06.s056_output/n100.r06.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s056_output/n100.r06.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s056_output/n100.r06.s056.reference.fas" | bcftools consensus -m "n100.r06.s056_output/n100.r06.s056.low_depth.tsv" tmp.vcf.gz > "n100.r06.s056_output/n100.r06.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:67b0d7ef46df2dc9ffadcb228ebaa79ca7f69aa0fa5bf2326344fd3d7c9a0929 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.0MiB max=130.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=866B max=3.1KiB
2021/07/08 17:12:02 scheduler task 20920b9e (flow 6319d8ef): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s056.tar.gz resources {}
2021/07/08 17:12:02  ->  n100.r06.s056.Main.cp_out_file 6319d8ef exec extern s3://niema-test/n100/r06/n100.r06.s056.tar.gz 35.8MiB
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:02 scheduler task fe380a87 (flow 1035b4db): transferring output (try 0): started
2021/07/08 17:12:02 scheduler task 07200e78 (flow 8e2cdc8e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:02 scheduler task 07200e78 (flow 8e2cdc8e): promoting objects (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): promoting objects (try 0): started
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): retrieving diagnostic output (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): retrieving diagnostic output (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): retrieving result (try 0): started
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): retrieving result (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): transferring output (try 0): started
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): transferring output (try 0): started
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloading (try 0): started
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloading list<val<.=d59d15a7 35.7MiB> 35.7MiB>
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloading val<.=b707f925 35.4MiB>
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloading val<.=8c3edcd9 35.4MiB>
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): promoting objects (try 0): started
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): promoting objects (try 0): started
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloaded val<.=8c3edcd9 35.4MiB>
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloaded list<val<.=d59d15a7 35.7MiB> 35.7MiB>
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloaded val<.=b707f925 35.4MiB>
2021/07/08 17:12:03 scheduler task fe380a87 (flow 1035b4db): unloading (try 0): successful, next state: complete
2021/07/08 17:12:03  <-  n100.r06.s037.Main.out_file 1035b4db ok     exec 5m0s 35.7MiB
2021/07/08 17:12:03 n100.r06.s037.Main.out_file 1035b4db n100/r06/n100.r06.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c42ec9fdba8c3c05bf6d37674ed40422ee8de4a4064c955fd9dda725d9e9ed60
	sha256:1035b4db94ca396fe9cffd4c89755cde4ed072062d9d075296926f81afc7865a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fe380a871289547655ed05aead1db05f69f94cc9ae6c3c209679031833f693b5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s037_output"
	    wget -O "n100.r06.s037_output/n100.r06.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s037_output/n100.r06.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s037_output/n100.r06.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s037_output/n100.r06.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s037_output/n100.r06.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s037_output/n100.r06.s037.reference.fas" "n100.r06.s037_output/n100.r06.s037.fq1.fastq" "n100.r06.s037_output/n100.r06.s037.fq2.fastq" | samtools view -bS - > "n100.r06.s037_output/n100.r06.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s037_output/n100.r06.s037.untrimmed.sorted.bam" "n100.r06.s037_output/n100.r06.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s037_output/n100.r06.s037.untrimmed.sorted.bam" -b "n100.r06.s037_output/n100.r06.s037.primers.bed" -p "n100.r06.s037_output/n100.r06.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" "n100.r06.s037_output/n100.r06.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s037_output/n100.r06.s037.reference.fas" "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" > "n100.r06.s037_output/n100.r06.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s037_output/n100.r06.s037.reference.fas" --call-indels "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" > "n100.r06.s037_output/n100.r06.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s037_output/n100.r06.s037.trimmed.sorted.bam" > "n100.r06.s037_output/n100.r06.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s037_output/n100.r06.s037.depth.txt" "n100.r06.s037_output/n100.r06.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s037_output/n100.r06.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s037_output/n100.r06.s037.reference.fas" | bcftools consensus -m "n100.r06.s037_output/n100.r06.s037.low_depth.tsv" tmp.vcf.gz > "n100.r06.s037_output/n100.r06.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d59d15a7375ccae0d5f7d5fab64b2aa3d3689f5642749949419491d3caab107a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=130.5MiB
	    disk mean=11.4MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:03 scheduler task 5d363070 (flow da34c92e): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s037.tar.gz resources {}
2021/07/08 17:12:03  ->  n100.r06.s037.Main.cp_out_file da34c92e exec extern s3://niema-test/n100/r06/n100.r06.s037.tar.gz 35.7MiB
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): retrieving diagnostic output (try 0): started
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): retrieving diagnostic output (try 0): started
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): retrieving result (try 0): started
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): retrieving result (try 0): started
2021/07/08 17:12:03 scheduler task 20920b9e (flow 6319d8ef): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:67b0d7ef46df2dc9ffadcb228ebaa79ca7f69aa0fa5bf2326344fd3d7c9a0929 -> s3://niema-test/n100/r06/n100.r06.s056.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:03  <-  n100.r06.s056.Main.cp_out_file 6319d8ef ok   extern 0s 35.8MiB
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:03 scheduler task 0a05c490 (flow 0133fcdc): transferring output (try 0): started
2021/07/08 17:12:03 scheduler task 415eac3c (flow 87851dc6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:03 scheduler task 415eac3c (flow 87851dc6): promoting objects (try 0): started
2021/07/08 17:12:03 scheduler task 8c8e5588 (flow dd21f074): transferring output (try 0): started
2021/07/08 17:12:03 scheduler task d78303d7 (flow d6368caa): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:03 scheduler task d78303d7 (flow d6368caa): promoting objects (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloading (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloading list<val<.=bf77e906 35.7MiB> 35.7MiB>
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloading val<.=09d72408 35.4MiB>
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloading val<.=7a86a17f 35.4MiB>
2021/07/08 17:12:03 scheduler task 415eac3c (flow 87851dc6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:03 scheduler task 415eac3c (flow 87851dc6): retrieving diagnostic output (try 0): started
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:03 scheduler task d78303d7 (flow d6368caa): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): unloading (try 0): started
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): unloading list<val<.=a96fa130 35.7MiB> 35.7MiB>
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): unloading val<.=61e5c857 35.4MiB>
2021/07/08 17:12:03 scheduler task 07200e78 (flow 8e2cdc8e): unloading val<.=ad64e8a3 35.4MiB>
2021/07/08 17:12:03 scheduler task d78303d7 (flow d6368caa): retrieving diagnostic output (try 0): started
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloaded list<val<.=bf77e906 35.7MiB> 35.7MiB>
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloaded val<.=09d72408 35.4MiB>
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloaded val<.=7a86a17f 35.4MiB>
2021/07/08 17:12:03 scheduler task c2bd846b (flow 25ed0be7): unloading (try 0): successful, next state: complete
2021/07/08 17:12:03  <-  n100.r06.s058.Main.out_file 25ed0be7 ok     exec 5m6s 35.7MiB
2021/07/08 17:12:03 n100.r06.s058.Main.out_file 25ed0be7 n100/r06/n100.r06.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:69ed4c13f3b5face356b1095d8b7ca7540e7f07d75ffd5aa52e77e58eb4e4ad2
	sha256:25ed0be7a0b8691580590545262dcd6239f735bd8761f3c9c57e886020d1cd1f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c2bd846b7ed72775fa0d89dba5a065c6b8f229ef00f6c3a2d152c67498dd3f57
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s058_output"
	    wget -O "n100.r06.s058_output/n100.r06.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s058_output/n100.r06.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s058_output/n100.r06.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s058_output/n100.r06.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s058_output/n100.r06.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s058_output/n100.r06.s058.reference.fas" "n100.r06.s058_output/n100.r06.s058.fq1.fastq" "n100.r06.s058_output/n100.r06.s058.fq2.fastq" | samtools view -bS - > "n100.r06.s058_output/n100.r06.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s058_output/n100.r06.s058.untrimmed.sorted.bam" "n100.r06.s058_output/n100.r06.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s058_output/n100.r06.s058.untrimmed.sorted.bam" -b "n100.r06.s058_output/n100.r06.s058.primers.bed" -p "n100.r06.s058_output/n100.r06.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" "n100.r06.s058_output/n100.r06.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s058_output/n100.r06.s058.reference.fas" "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" > "n100.r06.s058_output/n100.r06.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s058_output/n100.r06.s058.reference.fas" --call-indels "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" > "n100.r06.s058_output/n100.r06.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s058_output/n100.r06.s058.trimmed.sorted.bam" > "n100.r06.s058_output/n100.r06.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s058_output/n100.r06.s058.depth.txt" "n100.r06.s058_output/n100.r06.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s058_output/n100.r06.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s058_output/n100.r06.s058.reference.fas" | bcftools consensus -m "n100.r06.s058_output/n100.r06.s058.low_depth.tsv" tmp.vcf.gz > "n100.r06.s058_output/n100.r06.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bf77e906d76465bbf0adc172f81869e24f284b61a099107c978b8da3352d91d8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=128.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:12:03 scheduler task fdd8cedf (flow d9a7da4b): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s058.tar.gz resources {}
2021/07/08 17:12:03  ->  n100.r06.s058.Main.cp_out_file d9a7da4b exec extern s3://niema-test/n100/r06/n100.r06.s058.tar.gz 35.7MiB
2021/07/08 17:12:03 scheduler task 415eac3c (flow 87851dc6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:03 scheduler task 415eac3c (flow 87851dc6): retrieving result (try 0): started
2021/07/08 17:12:04 scheduler task 07200e78 (flow 8e2cdc8e): unloaded val<.=ad64e8a3 35.4MiB>
2021/07/08 17:12:04 scheduler task 07200e78 (flow 8e2cdc8e): unloaded val<.=61e5c857 35.4MiB>
2021/07/08 17:12:04 scheduler task 07200e78 (flow 8e2cdc8e): unloaded list<val<.=a96fa130 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task 07200e78 (flow 8e2cdc8e): unloading (try 0): successful, next state: complete
2021/07/08 17:12:04  <-  n100.r06.s048.Main.out_file 8e2cdc8e ok     exec 5m6s 35.7MiB
2021/07/08 17:12:04 n100.r06.s048.Main.out_file 8e2cdc8e n100/r06/n100.r06.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:01eefd3168f386477dcba9e88f9ef1deef56c365df80b7d536390d7f691ff62f
	sha256:8e2cdc8e6a8b959cf78efdb5b592305d0953dc4fd6114ba0e8726647618f07a3
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/07200e78bb8b1f9d4ca2a8c4450d0fe9d353bf9383979df2c83b270517a8a26e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s048_output"
	    wget -O "n100.r06.s048_output/n100.r06.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s048_output/n100.r06.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s048_output/n100.r06.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s048_output/n100.r06.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s048_output/n100.r06.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s048_output/n100.r06.s048.reference.fas" "n100.r06.s048_output/n100.r06.s048.fq1.fastq" "n100.r06.s048_output/n100.r06.s048.fq2.fastq" | samtools view -bS - > "n100.r06.s048_output/n100.r06.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s048_output/n100.r06.s048.untrimmed.sorted.bam" "n100.r06.s048_output/n100.r06.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s048_output/n100.r06.s048.untrimmed.sorted.bam" -b "n100.r06.s048_output/n100.r06.s048.primers.bed" -p "n100.r06.s048_output/n100.r06.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" "n100.r06.s048_output/n100.r06.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s048_output/n100.r06.s048.reference.fas" "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" > "n100.r06.s048_output/n100.r06.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s048_output/n100.r06.s048.reference.fas" --call-indels "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" > "n100.r06.s048_output/n100.r06.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s048_output/n100.r06.s048.trimmed.sorted.bam" > "n100.r06.s048_output/n100.r06.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s048_output/n100.r06.s048.depth.txt" "n100.r06.s048_output/n100.r06.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s048_output/n100.r06.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s048_output/n100.r06.s048.reference.fas" | bcftools consensus -m "n100.r06.s048_output/n100.r06.s048.low_depth.tsv" tmp.vcf.gz > "n100.r06.s048_output/n100.r06.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a96fa13010f1b448dd9bf13409eaade7a589f56f42153bb85e601e023cb32993 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.0MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=873B max=2.1KiB
2021/07/08 17:12:04 scheduler task 730b83a0 (flow e6b368a0): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s048.tar.gz resources {}
2021/07/08 17:12:04  ->  n100.r06.s048.Main.cp_out_file e6b368a0 exec extern s3://niema-test/n100/r06/n100.r06.s048.tar.gz 35.7MiB
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): retrieving result (try 0): started
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): transferring output (try 0): started
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): transferring output (try 0): started
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloading (try 0): started
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloading list<val<.=ffd2476d 35.8MiB> 35.8MiB>
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloading val<.=7b062515 35.4MiB>
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloading val<.=c215978a 35.4MiB>
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): promoting objects (try 0): started
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloaded list<val<.=ffd2476d 35.8MiB> 35.8MiB>
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloaded val<.=7b062515 35.4MiB>
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloaded val<.=c215978a 35.4MiB>
2021/07/08 17:12:04 scheduler task 0a05c490 (flow 0133fcdc): unloading (try 0): successful, next state: complete
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloading (try 0): started
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloading list<val<.=66672e1d 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloading val<.=354a772b 35.4MiB>
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloading val<.=d7ae7849 35.4MiB>
2021/07/08 17:12:04  <-  n100.r06.s054.Main.out_file 0133fcdc ok     exec 5m1s 35.8MiB
2021/07/08 17:12:04 n100.r06.s054.Main.out_file 0133fcdc n100/r06/n100.r06.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61a1b68b9ef245d55fb415ce789a50835ec46d543b2d575b6f19d1914928baca
	sha256:0133fcdc21e0a675f202bd4240103f5f67596f73c0079c86822f316fd8823d93
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a05c490443f70b4ff21e2c8c00c06a553c933ebefca6df77ea17a27f82a2832
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s054_output"
	    wget -O "n100.r06.s054_output/n100.r06.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s054_output/n100.r06.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s054_output/n100.r06.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s054_output/n100.r06.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s054_output/n100.r06.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s054_output/n100.r06.s054.reference.fas" "n100.r06.s054_output/n100.r06.s054.fq1.fastq" "n100.r06.s054_output/n100.r06.s054.fq2.fastq" | samtools view -bS - > "n100.r06.s054_output/n100.r06.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s054_output/n100.r06.s054.untrimmed.sorted.bam" "n100.r06.s054_output/n100.r06.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s054_output/n100.r06.s054.untrimmed.sorted.bam" -b "n100.r06.s054_output/n100.r06.s054.primers.bed" -p "n100.r06.s054_output/n100.r06.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" "n100.r06.s054_output/n100.r06.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s054_output/n100.r06.s054.reference.fas" "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" > "n100.r06.s054_output/n100.r06.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s054_output/n100.r06.s054.reference.fas" --call-indels "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" > "n100.r06.s054_output/n100.r06.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s054_output/n100.r06.s054.trimmed.sorted.bam" > "n100.r06.s054_output/n100.r06.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s054_output/n100.r06.s054.depth.txt" "n100.r06.s054_output/n100.r06.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s054_output/n100.r06.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s054_output/n100.r06.s054.reference.fas" | bcftools consensus -m "n100.r06.s054_output/n100.r06.s054.low_depth.tsv" tmp.vcf.gz > "n100.r06.s054_output/n100.r06.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ffd2476d597bda241eed9e3ed014552e03b5f5eb396f1ff2370d039ad0e780c7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=128.8MiB
	    disk mean=9.1MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:12:04 scheduler task 03ee0ede (flow 902f50c4): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s054.tar.gz resources {}
2021/07/08 17:12:04  ->  n100.r06.s054.Main.cp_out_file 902f50c4 exec extern s3://niema-test/n100/r06/n100.r06.s054.tar.gz 35.8MiB
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): promoting objects (try 0): started
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): retrieving diagnostic output (try 0): started
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloaded val<.=354a772b 35.4MiB>
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloaded list<val<.=66672e1d 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloaded val<.=d7ae7849 35.4MiB>
2021/07/08 17:12:04 scheduler task 8c8e5588 (flow dd21f074): unloading (try 0): successful, next state: complete
2021/07/08 17:12:04  <-  n100.r06.s013.Main.out_file dd21f074 ok     exec 5m0s 35.7MiB
2021/07/08 17:12:04 n100.r06.s013.Main.out_file dd21f074 n100/r06/n100.r06.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:00ca6fe626aa776dcfacce6b82f9b8f9f8d636a4807fdb250329dd08106b0ce8
	sha256:dd21f0747cd0ec7fb9e0caea479450df9759e0d92ecfa35a2c5b1aece80eddfb
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c8e5588aa72e3e92ae98b67aa373a973ec32e1cd07050aa9e208967360e0d1f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s013_output"
	    wget -O "n100.r06.s013_output/n100.r06.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s013_output/n100.r06.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s013_output/n100.r06.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s013_output/n100.r06.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s013_output/n100.r06.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s013_output/n100.r06.s013.reference.fas" "n100.r06.s013_output/n100.r06.s013.fq1.fastq" "n100.r06.s013_output/n100.r06.s013.fq2.fastq" | samtools view -bS - > "n100.r06.s013_output/n100.r06.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s013_output/n100.r06.s013.untrimmed.sorted.bam" "n100.r06.s013_output/n100.r06.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s013_output/n100.r06.s013.untrimmed.sorted.bam" -b "n100.r06.s013_output/n100.r06.s013.primers.bed" -p "n100.r06.s013_output/n100.r06.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" "n100.r06.s013_output/n100.r06.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s013_output/n100.r06.s013.reference.fas" "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" > "n100.r06.s013_output/n100.r06.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s013_output/n100.r06.s013.reference.fas" --call-indels "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" > "n100.r06.s013_output/n100.r06.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s013_output/n100.r06.s013.trimmed.sorted.bam" > "n100.r06.s013_output/n100.r06.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s013_output/n100.r06.s013.depth.txt" "n100.r06.s013_output/n100.r06.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s013_output/n100.r06.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s013_output/n100.r06.s013.reference.fas" | bcftools consensus -m "n100.r06.s013_output/n100.r06.s013.low_depth.tsv" tmp.vcf.gz > "n100.r06.s013_output/n100.r06.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:66672e1dd4126fe74e33e6a684da1c8ab1bfeb95d5610b59d5f7a83fd352690e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=127.3MiB
	    disk mean=9.4MiB max=35.7MiB
	    tmp mean=348B max=2.0KiB
2021/07/08 17:12:04 scheduler task da4eda91 (flow cf247b53): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s013.tar.gz resources {}
2021/07/08 17:12:04  ->  n100.r06.s013.Main.cp_out_file cf247b53 exec extern s3://niema-test/n100/r06/n100.r06.s013.tar.gz 35.7MiB
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): retrieving diagnostic output (try 0): started
2021/07/08 17:12:04 scheduler task 5d363070 (flow da34c92e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d59d15a7375ccae0d5f7d5fab64b2aa3d3689f5642749949419491d3caab107a -> s3://niema-test/n100/r06/n100.r06.s037.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:04  <-  n100.r06.s037.Main.cp_out_file da34c92e ok   extern 0s 35.7MiB
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): retrieving result (try 0): started
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): retrieving result (try 0): started
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): transferring output (try 0): started
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): promoting objects (try 0): started
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:04 scheduler task d21f287b (flow ba80dc65): transferring output (try 0): started
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloading (try 0): started
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloading list<val<.=87b23703 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloading val<.=ebf0d220 35.4MiB>
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloading val<.=a7cbe0f6 35.4MiB>
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): retrieving diagnostic output (try 0): started
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): promoting objects (try 0): started
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloaded list<val<.=87b23703 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloaded val<.=a7cbe0f6 35.4MiB>
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloaded val<.=ebf0d220 35.4MiB>
2021/07/08 17:12:04 scheduler task 415eac3c (flow 87851dc6): unloading (try 0): successful, next state: complete
2021/07/08 17:12:04  <-  n100.r06.s055.Main.out_file 87851dc6 ok     exec 5m1s 35.7MiB
2021/07/08 17:12:04 n100.r06.s055.Main.out_file 87851dc6 n100/r06/n100.r06.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d6e03a3f541e2785e7f46c0343df763569a545a071113268beed77d4477b3f45
	sha256:87851dc6863b4b368c1199a1d7db1588c794e0481b72b247f42a3346096d501f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/415eac3c996cb49a8255ff36bf36f994cc21ff03a23a831a084f2d0c46f74165
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s055_output"
	    wget -O "n100.r06.s055_output/n100.r06.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s055_output/n100.r06.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s055_output/n100.r06.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s055_output/n100.r06.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s055_output/n100.r06.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s055_output/n100.r06.s055.reference.fas" "n100.r06.s055_output/n100.r06.s055.fq1.fastq" "n100.r06.s055_output/n100.r06.s055.fq2.fastq" | samtools view -bS - > "n100.r06.s055_output/n100.r06.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s055_output/n100.r06.s055.untrimmed.sorted.bam" "n100.r06.s055_output/n100.r06.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s055_output/n100.r06.s055.untrimmed.sorted.bam" -b "n100.r06.s055_output/n100.r06.s055.primers.bed" -p "n100.r06.s055_output/n100.r06.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" "n100.r06.s055_output/n100.r06.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s055_output/n100.r06.s055.reference.fas" "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" > "n100.r06.s055_output/n100.r06.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s055_output/n100.r06.s055.reference.fas" --call-indels "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" > "n100.r06.s055_output/n100.r06.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s055_output/n100.r06.s055.trimmed.sorted.bam" > "n100.r06.s055_output/n100.r06.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s055_output/n100.r06.s055.depth.txt" "n100.r06.s055_output/n100.r06.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s055_output/n100.r06.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s055_output/n100.r06.s055.reference.fas" | bcftools consensus -m "n100.r06.s055_output/n100.r06.s055.low_depth.tsv" tmp.vcf.gz > "n100.r06.s055_output/n100.r06.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:87b23703089c15dd48c7bafebda3ce76fcbe0a80b681a73508e135a8056d97b7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=124.0MiB
	    disk mean=7.0MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 17:12:04 scheduler task d97dcd39 (flow cf82f550): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s055.tar.gz resources {}
2021/07/08 17:12:04  ->  n100.r06.s055.Main.cp_out_file cf82f550 exec extern s3://niema-test/n100/r06/n100.r06.s055.tar.gz 35.7MiB
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): retrieving result (try 0): started
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloading (try 0): started
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloading list<val<.=6d87f1fe 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloading val<.=6c45d47c 35.4MiB>
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloading val<.=debc1dd0 35.4MiB>
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): retrieving diagnostic output (try 0): started
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloaded val<.=debc1dd0 35.4MiB>
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloaded val<.=6c45d47c 35.4MiB>
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloaded list<val<.=6d87f1fe 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task d78303d7 (flow d6368caa): unloading (try 0): successful, next state: complete
2021/07/08 17:12:04 scheduler task d50902bd (flow 4c9d792b): transferring output (try 0): started
2021/07/08 17:12:04  <-  n100.r06.s008.Main.out_file d6368caa ok     exec 5m1s 35.7MiB
2021/07/08 17:12:04 n100.r06.s008.Main.out_file d6368caa n100/r06/n100.r06.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0f9d5c9f269bdd394acb740ad8915f618a4c9067f1e7361d6f344a13728c3c10
	sha256:d6368caa28617b6eb1cdac7c375d440d15ecf8ad90b8255306f3c32a8d65797f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d78303d7d7e5ece1f0c32e2daab5d830681cae8112f9cb882cf52615fd30aadc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s008_output"
	    wget -O "n100.r06.s008_output/n100.r06.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s008_output/n100.r06.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s008_output/n100.r06.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s008_output/n100.r06.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s008_output/n100.r06.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s008_output/n100.r06.s008.reference.fas" "n100.r06.s008_output/n100.r06.s008.fq1.fastq" "n100.r06.s008_output/n100.r06.s008.fq2.fastq" | samtools view -bS - > "n100.r06.s008_output/n100.r06.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s008_output/n100.r06.s008.untrimmed.sorted.bam" "n100.r06.s008_output/n100.r06.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s008_output/n100.r06.s008.untrimmed.sorted.bam" -b "n100.r06.s008_output/n100.r06.s008.primers.bed" -p "n100.r06.s008_output/n100.r06.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" "n100.r06.s008_output/n100.r06.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s008_output/n100.r06.s008.reference.fas" "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" > "n100.r06.s008_output/n100.r06.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s008_output/n100.r06.s008.reference.fas" --call-indels "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" > "n100.r06.s008_output/n100.r06.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s008_output/n100.r06.s008.trimmed.sorted.bam" > "n100.r06.s008_output/n100.r06.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s008_output/n100.r06.s008.depth.txt" "n100.r06.s008_output/n100.r06.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s008_output/n100.r06.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s008_output/n100.r06.s008.reference.fas" | bcftools consensus -m "n100.r06.s008_output/n100.r06.s008.low_depth.tsv" tmp.vcf.gz > "n100.r06.s008_output/n100.r06.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6d87f1fecf737f82c715420e31dcef28f7a91974d3614ea954ec4c993550d7c3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=124.3MiB
	    disk mean=6.9MiB max=35.7MiB
	    tmp mean=175B max=1.0KiB
2021/07/08 17:12:04 scheduler task 2edadb82 (flow 2fe5d7d3): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s008.tar.gz resources {}
2021/07/08 17:12:04  ->  n100.r06.s008.Main.cp_out_file 2fe5d7d3 exec extern s3://niema-test/n100/r06/n100.r06.s008.tar.gz 35.7MiB
2021/07/08 17:12:04 scheduler task fdd8cedf (flow d9a7da4b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bf77e906d76465bbf0adc172f81869e24f284b61a099107c978b8da3352d91d8 -> s3://niema-test/n100/r06/n100.r06.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:04  <-  n100.r06.s058.Main.cp_out_file d9a7da4b ok   extern 0s 35.7MiB
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): retrieving result (try 0): started
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:04 scheduler task 42d67778 (flow b302f74d): transferring output (try 0): started
2021/07/08 17:12:04 scheduler task 730b83a0 (flow e6b368a0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a96fa13010f1b448dd9bf13409eaade7a589f56f42153bb85e601e023cb32993 -> s3://niema-test/n100/r06/n100.r06.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:04  <-  n100.r06.s048.Main.cp_out_file e6b368a0 ok   extern 0s 35.7MiB
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): unloading (try 0): started
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): unloading list<val<.=72732f57 35.7MiB> 35.7MiB>
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): unloading val<.=48f9a998 35.4MiB>
2021/07/08 17:12:04 scheduler task 7a0d4a9f (flow dd42e107): unloading val<.=4cac8859 35.4MiB>
2021/07/08 17:12:05 scheduler task 7a0d4a9f (flow dd42e107): unloaded list<val<.=72732f57 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task 03ee0ede (flow 902f50c4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ffd2476d597bda241eed9e3ed014552e03b5f5eb396f1ff2370d039ad0e780c7 -> s3://niema-test/n100/r06/n100.r06.s054.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:05  <-  n100.r06.s054.Main.cp_out_file 902f50c4 ok   extern 0s 35.8MiB
2021/07/08 17:12:05 scheduler task 7a0d4a9f (flow dd42e107): unloaded val<.=48f9a998 35.4MiB>
2021/07/08 17:12:05 scheduler task 7a0d4a9f (flow dd42e107): unloaded val<.=4cac8859 35.4MiB>
2021/07/08 17:12:05 scheduler task 7a0d4a9f (flow dd42e107): unloading (try 0): successful, next state: complete
2021/07/08 17:12:05  <-  n100.r06.s084.Main.out_file dd42e107 ok     exec 5m1s 35.7MiB
2021/07/08 17:12:05 n100.r06.s084.Main.out_file dd42e107 n100/r06/n100.r06.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2e924559924f69c6a7dc60ed4b9cc2b8bb485e3af21ab36a159dcca8450018ab
	sha256:dd42e1074bfc9005b3cbdb347f06e4ee7100b10343197ee0b9cb1c5e5b0aab5e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a0d4a9ff25c312091282884e8697ca2951c5909d864c24b455f005bb0a0e991
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s084_output"
	    wget -O "n100.r06.s084_output/n100.r06.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s084_output/n100.r06.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s084_output/n100.r06.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s084_output/n100.r06.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s084_output/n100.r06.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s084_output/n100.r06.s084.reference.fas" "n100.r06.s084_output/n100.r06.s084.fq1.fastq" "n100.r06.s084_output/n100.r06.s084.fq2.fastq" | samtools view -bS - > "n100.r06.s084_output/n100.r06.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s084_output/n100.r06.s084.untrimmed.sorted.bam" "n100.r06.s084_output/n100.r06.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s084_output/n100.r06.s084.untrimmed.sorted.bam" -b "n100.r06.s084_output/n100.r06.s084.primers.bed" -p "n100.r06.s084_output/n100.r06.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" "n100.r06.s084_output/n100.r06.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s084_output/n100.r06.s084.reference.fas" "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" > "n100.r06.s084_output/n100.r06.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s084_output/n100.r06.s084.reference.fas" --call-indels "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" > "n100.r06.s084_output/n100.r06.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s084_output/n100.r06.s084.trimmed.sorted.bam" > "n100.r06.s084_output/n100.r06.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s084_output/n100.r06.s084.depth.txt" "n100.r06.s084_output/n100.r06.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s084_output/n100.r06.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s084_output/n100.r06.s084.reference.fas" | bcftools consensus -m "n100.r06.s084_output/n100.r06.s084.low_depth.tsv" tmp.vcf.gz > "n100.r06.s084_output/n100.r06.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:72732f57edb03a0fe4e5f7b94b0412aa3b281f2def1a9d63bd94b4551a94cc52 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=128.5MiB
	    disk mean=7.6MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:12:05 scheduler task 37b3994e (flow 489458cf): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s084.tar.gz resources {}
2021/07/08 17:12:05  ->  n100.r06.s084.Main.cp_out_file 489458cf exec extern s3://niema-test/n100/r06/n100.r06.s084.tar.gz 35.7MiB
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloading (try 0): started
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloading list<val<.=aad0e428 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloading val<.=40f6295b 35.4MiB>
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloading val<.=4aca29b8 35.4MiB>
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloaded list<val<.=aad0e428 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): promoting objects (try 0): started
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloaded val<.=4aca29b8 35.4MiB>
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloaded val<.=40f6295b 35.4MiB>
2021/07/08 17:12:05 scheduler task d21f287b (flow ba80dc65): unloading (try 0): successful, next state: complete
2021/07/08 17:12:05  <-  n100.r06.s026.Main.out_file ba80dc65 ok     exec 5m1s 35.7MiB
2021/07/08 17:12:05 n100.r06.s026.Main.out_file ba80dc65 n100/r06/n100.r06.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d11e03d08ec0d948f8e678fd4ed78a1c5e1440e3a6d2cacc4fc5d0cc242624d
	sha256:ba80dc6520970a3c23fa472e1d46a572d6cd3327b4f488d32beb177892000228
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d21f287b9617b4e6f2da9aef67d3c93dfe23c026f4b00908e6c187a7149602d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s026_output"
	    wget -O "n100.r06.s026_output/n100.r06.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s026_output/n100.r06.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s026_output/n100.r06.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s026_output/n100.r06.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s026_output/n100.r06.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s026_output/n100.r06.s026.reference.fas" "n100.r06.s026_output/n100.r06.s026.fq1.fastq" "n100.r06.s026_output/n100.r06.s026.fq2.fastq" | samtools view -bS - > "n100.r06.s026_output/n100.r06.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s026_output/n100.r06.s026.untrimmed.sorted.bam" "n100.r06.s026_output/n100.r06.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s026_output/n100.r06.s026.untrimmed.sorted.bam" -b "n100.r06.s026_output/n100.r06.s026.primers.bed" -p "n100.r06.s026_output/n100.r06.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" "n100.r06.s026_output/n100.r06.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s026_output/n100.r06.s026.reference.fas" "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" > "n100.r06.s026_output/n100.r06.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s026_output/n100.r06.s026.reference.fas" --call-indels "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" > "n100.r06.s026_output/n100.r06.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s026_output/n100.r06.s026.trimmed.sorted.bam" > "n100.r06.s026_output/n100.r06.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s026_output/n100.r06.s026.depth.txt" "n100.r06.s026_output/n100.r06.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s026_output/n100.r06.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s026_output/n100.r06.s026.reference.fas" | bcftools consensus -m "n100.r06.s026_output/n100.r06.s026.low_depth.tsv" tmp.vcf.gz > "n100.r06.s026_output/n100.r06.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aad0e42876f31c5b57c761c5c45b3c9cebdd74d6816f7cec90afa8cf982dc303 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.4MiB max=130.5MiB
	    disk mean=7.2MiB max=35.7MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 17:12:05 scheduler task 1904d78a (flow e8ccf63a): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s026.tar.gz resources {}
2021/07/08 17:12:05  ->  n100.r06.s026.Main.cp_out_file e8ccf63a exec extern s3://niema-test/n100/r06/n100.r06.s026.tar.gz 35.7MiB
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): retrieving diagnostic output (try 0): started
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): promoting objects (try 0): started
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloading (try 0): started
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloading list<val<.=a59ecd45 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloading val<.=c81dad9b 35.4MiB>
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloading val<.=2b27e97c 35.4MiB>
2021/07/08 17:12:05 scheduler task da4eda91 (flow cf247b53): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:66672e1dd4126fe74e33e6a684da1c8ab1bfeb95d5610b59d5f7a83fd352690e -> s3://niema-test/n100/r06/n100.r06.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:05  <-  n100.r06.s013.Main.cp_out_file cf247b53 ok   extern 0s 35.7MiB
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): retrieving result (try 0): started
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): retrieving diagnostic output (try 0): started
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloaded list<val<.=a59ecd45 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloaded val<.=c81dad9b 35.4MiB>
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloaded val<.=2b27e97c 35.4MiB>
2021/07/08 17:12:05 scheduler task d50902bd (flow 4c9d792b): unloading (try 0): successful, next state: complete
2021/07/08 17:12:05  <-  n100.r06.s079.Main.out_file 4c9d792b ok     exec 5m1s 35.7MiB
2021/07/08 17:12:05 n100.r06.s079.Main.out_file 4c9d792b n100/r06/n100.r06.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a0a73d26f4d2aa2f9311895f21b637734385533a2f18f6a64f8896d3ed5cbf04
	sha256:4c9d792b90fb9d3a49882af5b402d312e99ef5f81429639fac9b1ae66aa46b6a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d50902bd22d5d8b3171b274040e474dc4acc0ab10efeadbfbfa0e0d77d12df14
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s079_output"
	    wget -O "n100.r06.s079_output/n100.r06.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s079_output/n100.r06.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s079_output/n100.r06.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s079_output/n100.r06.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s079_output/n100.r06.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s079_output/n100.r06.s079.reference.fas" "n100.r06.s079_output/n100.r06.s079.fq1.fastq" "n100.r06.s079_output/n100.r06.s079.fq2.fastq" | samtools view -bS - > "n100.r06.s079_output/n100.r06.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s079_output/n100.r06.s079.untrimmed.sorted.bam" "n100.r06.s079_output/n100.r06.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s079_output/n100.r06.s079.untrimmed.sorted.bam" -b "n100.r06.s079_output/n100.r06.s079.primers.bed" -p "n100.r06.s079_output/n100.r06.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" "n100.r06.s079_output/n100.r06.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s079_output/n100.r06.s079.reference.fas" "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" > "n100.r06.s079_output/n100.r06.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s079_output/n100.r06.s079.reference.fas" --call-indels "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" > "n100.r06.s079_output/n100.r06.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s079_output/n100.r06.s079.trimmed.sorted.bam" > "n100.r06.s079_output/n100.r06.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s079_output/n100.r06.s079.depth.txt" "n100.r06.s079_output/n100.r06.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s079_output/n100.r06.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s079_output/n100.r06.s079.reference.fas" | bcftools consensus -m "n100.r06.s079_output/n100.r06.s079.low_depth.tsv" tmp.vcf.gz > "n100.r06.s079_output/n100.r06.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a59ecd45f38d8206ac556454501d9a3c3c1d93ed22897b24594605073034d48b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=124.8MiB
	    disk mean=6.9MiB max=35.7MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 17:12:05 scheduler task e30bbd5f (flow 3871c226): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s079.tar.gz resources {}
2021/07/08 17:12:05  ->  n100.r06.s079.Main.cp_out_file 3871c226 exec extern s3://niema-test/n100/r06/n100.r06.s079.tar.gz 35.7MiB
2021/07/08 17:12:05 scheduler task d97dcd39 (flow cf82f550): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:87b23703089c15dd48c7bafebda3ce76fcbe0a80b681a73508e135a8056d97b7 -> s3://niema-test/n100/r06/n100.r06.s055.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:05  <-  n100.r06.s055.Main.cp_out_file cf82f550 ok   extern 0s 35.7MiB
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloading (try 0): started
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloading list<val<.=d77ba7fe 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloading val<.=e35949ca 35.4MiB>
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloading val<.=fd7122eb 35.4MiB>
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): transferring output (try 0): started
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): retrieving result (try 0): started
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloaded list<val<.=d77ba7fe 35.7MiB> 35.7MiB>
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloaded val<.=fd7122eb 35.4MiB>
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloaded val<.=e35949ca 35.4MiB>
2021/07/08 17:12:05 scheduler task 42d67778 (flow b302f74d): unloading (try 0): successful, next state: complete
2021/07/08 17:12:05  <-  n100.r06.s045.Main.out_file b302f74d ok     exec 5m2s 35.7MiB
2021/07/08 17:12:05 n100.r06.s045.Main.out_file b302f74d n100/r06/n100.r06.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0002a68dc99c9366c06ec5f445296e55ff83abadf5ad299882a133c094d8cb41
	sha256:b302f74dbe8d0e55c8e333c005b5946725cb08cf222c8cc9cb308c33bb35d336
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/42d677789c0d8261bd4565eab0cc822ddb00873f8b869d8e0ae5f43d29a58fe3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s045_output"
	    wget -O "n100.r06.s045_output/n100.r06.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s045_output/n100.r06.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s045_output/n100.r06.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s045_output/n100.r06.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s045_output/n100.r06.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s045_output/n100.r06.s045.reference.fas" "n100.r06.s045_output/n100.r06.s045.fq1.fastq" "n100.r06.s045_output/n100.r06.s045.fq2.fastq" | samtools view -bS - > "n100.r06.s045_output/n100.r06.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s045_output/n100.r06.s045.untrimmed.sorted.bam" "n100.r06.s045_output/n100.r06.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s045_output/n100.r06.s045.untrimmed.sorted.bam" -b "n100.r06.s045_output/n100.r06.s045.primers.bed" -p "n100.r06.s045_output/n100.r06.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" "n100.r06.s045_output/n100.r06.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s045_output/n100.r06.s045.reference.fas" "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" > "n100.r06.s045_output/n100.r06.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s045_output/n100.r06.s045.reference.fas" --call-indels "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" > "n100.r06.s045_output/n100.r06.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s045_output/n100.r06.s045.trimmed.sorted.bam" > "n100.r06.s045_output/n100.r06.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s045_output/n100.r06.s045.depth.txt" "n100.r06.s045_output/n100.r06.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s045_output/n100.r06.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s045_output/n100.r06.s045.reference.fas" | bcftools consensus -m "n100.r06.s045_output/n100.r06.s045.low_depth.tsv" tmp.vcf.gz > "n100.r06.s045_output/n100.r06.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d77ba7feeb4fbb288a0a17846325478a9703ab14273e2723a7db43cc71a3490f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=124.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:12:05 scheduler task d61d8c66 (flow c2e67bc8): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s045.tar.gz resources {}
2021/07/08 17:12:05  ->  n100.r06.s045.Main.cp_out_file c2e67bc8 exec extern s3://niema-test/n100/r06/n100.r06.s045.tar.gz 35.7MiB
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:05 scheduler task 5f63db20 (flow 38aa0f8b): transferring output (try 0): started
2021/07/08 17:12:05 scheduler task 2edadb82 (flow 2fe5d7d3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6d87f1fecf737f82c715420e31dcef28f7a91974d3614ea954ec4c993550d7c3 -> s3://niema-test/n100/r06/n100.r06.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:05  <-  n100.r06.s008.Main.cp_out_file 2fe5d7d3 ok   extern 0s 35.7MiB
2021/07/08 17:12:05 scheduler task f3c12ff0 (flow e7449678): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:05 scheduler task f3c12ff0 (flow e7449678): promoting objects (try 0): started
2021/07/08 17:12:05 scheduler task 37b3994e (flow 489458cf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:72732f57edb03a0fe4e5f7b94b0412aa3b281f2def1a9d63bd94b4551a94cc52 -> s3://niema-test/n100/r06/n100.r06.s084.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:05  <-  n100.r06.s084.Main.cp_out_file 489458cf ok   extern 0s 35.7MiB
2021/07/08 17:12:05 scheduler task f3c12ff0 (flow e7449678): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:05 scheduler task f3c12ff0 (flow e7449678): retrieving diagnostic output (try 0): started
2021/07/08 17:12:05 scheduler task 1904d78a (flow e8ccf63a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aad0e42876f31c5b57c761c5c45b3c9cebdd74d6816f7cec90afa8cf982dc303 -> s3://niema-test/n100/r06/n100.r06.s026.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:05  <-  n100.r06.s026.Main.cp_out_file e8ccf63a ok   extern 0s 35.7MiB
2021/07/08 17:12:05 scheduler task f3c12ff0 (flow e7449678): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:05 scheduler task f3c12ff0 (flow e7449678): retrieving result (try 0): started
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): unloading (try 0): started
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): unloading list<val<.=9693923f 35.8MiB> 35.8MiB>
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): unloading val<.=c910bc13 35.4MiB>
2021/07/08 17:12:05 scheduler task 6ee3129d (flow 7515a847): unloading val<.=10d96ede 35.4MiB>
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): transferring output (try 0): started
2021/07/08 17:12:06 scheduler task e30bbd5f (flow 3871c226): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a59ecd45f38d8206ac556454501d9a3c3c1d93ed22897b24594605073034d48b -> s3://niema-test/n100/r06/n100.r06.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:06  <-  n100.r06.s079.Main.cp_out_file 3871c226 ok   extern 0s 35.7MiB
2021/07/08 17:12:06 scheduler task 6ee3129d (flow 7515a847): unloaded list<val<.=9693923f 35.8MiB> 35.8MiB>
2021/07/08 17:12:06 scheduler task 6ee3129d (flow 7515a847): unloaded val<.=10d96ede 35.4MiB>
2021/07/08 17:12:06 scheduler task 6ee3129d (flow 7515a847): unloaded val<.=c910bc13 35.4MiB>
2021/07/08 17:12:06 scheduler task 6ee3129d (flow 7515a847): unloading (try 0): successful, next state: complete
2021/07/08 17:12:06  <-  n100.r06.s085.Main.out_file 7515a847 ok     exec 5m9s 35.8MiB
2021/07/08 17:12:06 n100.r06.s085.Main.out_file 7515a847 n100/r06/n100.r06.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f235c0285dbf447209da9ce20fef7edbad6e47c04e6a55dc37937756713802e4
	sha256:7515a847b39d6579ffb70fa247a4a54b2a103d798bf18dfd6c7bb5c898802222
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ee3129d33649e87cc411ccc05316aa1ebf485559cb863fecedb5f8312cbb8e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s085_output"
	    wget -O "n100.r06.s085_output/n100.r06.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s085_output/n100.r06.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s085_output/n100.r06.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s085_output/n100.r06.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s085_output/n100.r06.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s085_output/n100.r06.s085.reference.fas" "n100.r06.s085_output/n100.r06.s085.fq1.fastq" "n100.r06.s085_output/n100.r06.s085.fq2.fastq" | samtools view -bS - > "n100.r06.s085_output/n100.r06.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s085_output/n100.r06.s085.untrimmed.sorted.bam" "n100.r06.s085_output/n100.r06.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s085_output/n100.r06.s085.untrimmed.sorted.bam" -b "n100.r06.s085_output/n100.r06.s085.primers.bed" -p "n100.r06.s085_output/n100.r06.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" "n100.r06.s085_output/n100.r06.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s085_output/n100.r06.s085.reference.fas" "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" > "n100.r06.s085_output/n100.r06.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s085_output/n100.r06.s085.reference.fas" --call-indels "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" > "n100.r06.s085_output/n100.r06.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s085_output/n100.r06.s085.trimmed.sorted.bam" > "n100.r06.s085_output/n100.r06.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s085_output/n100.r06.s085.depth.txt" "n100.r06.s085_output/n100.r06.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s085_output/n100.r06.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s085_output/n100.r06.s085.reference.fas" | bcftools consensus -m "n100.r06.s085_output/n100.r06.s085.low_depth.tsv" tmp.vcf.gz > "n100.r06.s085_output/n100.r06.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9693923f5409e9582a46db56c3a8121175e7cd8403bac4a6bfb661e8c7103ffd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=130.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=700B max=2.1KiB
2021/07/08 17:12:06 scheduler task a8b28f32 (flow 8d045f46): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s085.tar.gz resources {}
2021/07/08 17:12:06  ->  n100.r06.s085.Main.cp_out_file 8d045f46 exec extern s3://niema-test/n100/r06/n100.r06.s085.tar.gz 35.8MiB
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloading (try 0): started
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloading list<val<.=d53791b7 35.7MiB> 35.7MiB>
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloading val<.=29b5ca36 35.4MiB>
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloading val<.=c3680476 35.4MiB>
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloaded val<.=c3680476 35.4MiB>
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloaded list<val<.=d53791b7 35.7MiB> 35.7MiB>
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloaded val<.=29b5ca36 35.4MiB>
2021/07/08 17:12:06 scheduler task 5f63db20 (flow 38aa0f8b): unloading (try 0): successful, next state: complete
2021/07/08 17:12:06  <-  n100.r06.s075.Main.out_file 38aa0f8b ok     exec 5m9s 35.7MiB
2021/07/08 17:12:06 n100.r06.s075.Main.out_file 38aa0f8b n100/r06/n100.r06.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a70a0289d83ca0ef5bbbdfe9e8d05a4e5958548f3c9b7a58d75e1f3a43829a22
	sha256:38aa0f8bf43e3591b1b2be0cec6699cc7902cc7547dbde304178d044e9130184
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f63db205e701f7b42b085a3e03ddaae7984693d7a4ff021327129950d3cdfde
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s075_output"
	    wget -O "n100.r06.s075_output/n100.r06.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s075_output/n100.r06.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s075_output/n100.r06.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s075_output/n100.r06.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s075_output/n100.r06.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s075_output/n100.r06.s075.reference.fas" "n100.r06.s075_output/n100.r06.s075.fq1.fastq" "n100.r06.s075_output/n100.r06.s075.fq2.fastq" | samtools view -bS - > "n100.r06.s075_output/n100.r06.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s075_output/n100.r06.s075.untrimmed.sorted.bam" "n100.r06.s075_output/n100.r06.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s075_output/n100.r06.s075.untrimmed.sorted.bam" -b "n100.r06.s075_output/n100.r06.s075.primers.bed" -p "n100.r06.s075_output/n100.r06.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" "n100.r06.s075_output/n100.r06.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s075_output/n100.r06.s075.reference.fas" "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" > "n100.r06.s075_output/n100.r06.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s075_output/n100.r06.s075.reference.fas" --call-indels "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" > "n100.r06.s075_output/n100.r06.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s075_output/n100.r06.s075.trimmed.sorted.bam" > "n100.r06.s075_output/n100.r06.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s075_output/n100.r06.s075.depth.txt" "n100.r06.s075_output/n100.r06.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s075_output/n100.r06.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s075_output/n100.r06.s075.reference.fas" | bcftools consensus -m "n100.r06.s075_output/n100.r06.s075.low_depth.tsv" tmp.vcf.gz > "n100.r06.s075_output/n100.r06.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d53791b7f36399034c4adf79091f71f16a84a027de754c1ad813e78c8b0ef43b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=128.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:12:06 scheduler task ebfe7edc (flow b1e2e3ab): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s075.tar.gz resources {}
2021/07/08 17:12:06  ->  n100.r06.s075.Main.cp_out_file b1e2e3ab exec extern s3://niema-test/n100/r06/n100.r06.s075.tar.gz 35.7MiB
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): promoting objects (try 0): started
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): retrieving diagnostic output (try 0): started
2021/07/08 17:12:06 scheduler task d61d8c66 (flow c2e67bc8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d77ba7feeb4fbb288a0a17846325478a9703ab14273e2723a7db43cc71a3490f -> s3://niema-test/n100/r06/n100.r06.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:06  <-  n100.r06.s045.Main.cp_out_file c2e67bc8 ok   extern 0s 35.7MiB
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): retrieving result (try 0): started
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloading (try 0): started
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloading list<val<.=9347c4e9 35.7MiB> 35.7MiB>
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloading val<.=c6c59f5c 35.4MiB>
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloading val<.=413c0bb6 35.4MiB>
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:06 scheduler task f8875ac4 (flow bd36172d): transferring output (try 0): started
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloaded val<.=413c0bb6 35.4MiB>
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloaded val<.=c6c59f5c 35.4MiB>
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloaded list<val<.=9347c4e9 35.7MiB> 35.7MiB>
2021/07/08 17:12:06 scheduler task f3c12ff0 (flow e7449678): unloading (try 0): successful, next state: complete
2021/07/08 17:12:06  <-  n100.r06.s072.Main.out_file e7449678 ok     exec 5m3s 35.7MiB
2021/07/08 17:12:06 n100.r06.s072.Main.out_file e7449678 n100/r06/n100.r06.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d7ac44cbbc0c87e5a4e007992503ca1e5cae2ec1bc8bb704579ff0fc514bcbd6
	sha256:e7449678190b676e502a61c50d9ef6fa8fcc33212fb1f97a94d687e7fee52518
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f3c12ff0d5189fa5e553567125a8d1fcf978dee6859003372fe8742c9b2ec24a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s072_output"
	    wget -O "n100.r06.s072_output/n100.r06.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s072_output/n100.r06.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s072_output/n100.r06.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s072_output/n100.r06.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s072_output/n100.r06.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s072_output/n100.r06.s072.reference.fas" "n100.r06.s072_output/n100.r06.s072.fq1.fastq" "n100.r06.s072_output/n100.r06.s072.fq2.fastq" | samtools view -bS - > "n100.r06.s072_output/n100.r06.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s072_output/n100.r06.s072.untrimmed.sorted.bam" "n100.r06.s072_output/n100.r06.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s072_output/n100.r06.s072.untrimmed.sorted.bam" -b "n100.r06.s072_output/n100.r06.s072.primers.bed" -p "n100.r06.s072_output/n100.r06.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" "n100.r06.s072_output/n100.r06.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s072_output/n100.r06.s072.reference.fas" "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" > "n100.r06.s072_output/n100.r06.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s072_output/n100.r06.s072.reference.fas" --call-indels "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" > "n100.r06.s072_output/n100.r06.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s072_output/n100.r06.s072.trimmed.sorted.bam" > "n100.r06.s072_output/n100.r06.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s072_output/n100.r06.s072.depth.txt" "n100.r06.s072_output/n100.r06.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s072_output/n100.r06.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s072_output/n100.r06.s072.reference.fas" | bcftools consensus -m "n100.r06.s072_output/n100.r06.s072.low_depth.tsv" tmp.vcf.gz > "n100.r06.s072_output/n100.r06.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9347c4e9e6aa23561e7f27629a0902cd0d73ce1edec3b798000228a66a881242 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.6MiB max=125.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:12:06 scheduler task 46d91cb6 (flow 87129988): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s072.tar.gz resources {}
2021/07/08 17:12:06  ->  n100.r06.s072.Main.cp_out_file 87129988 exec extern s3://niema-test/n100/r06/n100.r06.s072.tar.gz 35.7MiB
2021/07/08 17:12:06 scheduler task a8b28f32 (flow 8d045f46): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9693923f5409e9582a46db56c3a8121175e7cd8403bac4a6bfb661e8c7103ffd -> s3://niema-test/n100/r06/n100.r06.s085.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:06  <-  n100.r06.s085.Main.cp_out_file 8d045f46 ok   extern 0s 35.8MiB
2021/07/08 17:12:06 scheduler task ebfe7edc (flow b1e2e3ab): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d53791b7f36399034c4adf79091f71f16a84a027de754c1ad813e78c8b0ef43b -> s3://niema-test/n100/r06/n100.r06.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:06  <-  n100.r06.s075.Main.cp_out_file b1e2e3ab ok   extern 0s 35.7MiB
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloading (try 0): started
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloading list<val<.=f9cfaf0e 35.7MiB> 35.7MiB>
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloading val<.=18f97ca0 35.4MiB>
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloading val<.=60d66f5c 35.4MiB>
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloaded list<val<.=f9cfaf0e 35.7MiB> 35.7MiB>
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloaded val<.=18f97ca0 35.4MiB>
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloaded val<.=60d66f5c 35.4MiB>
2021/07/08 17:12:07 scheduler task f8875ac4 (flow bd36172d): unloading (try 0): successful, next state: complete
2021/07/08 17:12:07  <-  n100.r06.s061.Main.out_file bd36172d ok     exec 5m4s 35.7MiB
2021/07/08 17:12:07 n100.r06.s061.Main.out_file bd36172d n100/r06/n100.r06.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d5485e3ccd4855ba8b749588f5060c6d113db72ee35b86505bb23ff8dc7bb143
	sha256:bd36172df6f68b26b21de4a5dc37a5ec9b89b0a9b1773bd5ee1143e5f34bfb1b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f8875ac4d4bd26ca2f13a8156584dae4643d6ed380b4e393a658d1a661aa8960
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s061_output"
	    wget -O "n100.r06.s061_output/n100.r06.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s061_output/n100.r06.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s061_output/n100.r06.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s061_output/n100.r06.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s061_output/n100.r06.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s061_output/n100.r06.s061.reference.fas" "n100.r06.s061_output/n100.r06.s061.fq1.fastq" "n100.r06.s061_output/n100.r06.s061.fq2.fastq" | samtools view -bS - > "n100.r06.s061_output/n100.r06.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s061_output/n100.r06.s061.untrimmed.sorted.bam" "n100.r06.s061_output/n100.r06.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s061_output/n100.r06.s061.untrimmed.sorted.bam" -b "n100.r06.s061_output/n100.r06.s061.primers.bed" -p "n100.r06.s061_output/n100.r06.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" "n100.r06.s061_output/n100.r06.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s061_output/n100.r06.s061.reference.fas" "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" > "n100.r06.s061_output/n100.r06.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s061_output/n100.r06.s061.reference.fas" --call-indels "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" > "n100.r06.s061_output/n100.r06.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s061_output/n100.r06.s061.trimmed.sorted.bam" > "n100.r06.s061_output/n100.r06.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s061_output/n100.r06.s061.depth.txt" "n100.r06.s061_output/n100.r06.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s061_output/n100.r06.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s061_output/n100.r06.s061.reference.fas" | bcftools consensus -m "n100.r06.s061_output/n100.r06.s061.low_depth.tsv" tmp.vcf.gz > "n100.r06.s061_output/n100.r06.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f9cfaf0e73269b0c9cc6ad3d45024fdf8a8ec57104d32e904a71970689cba6f0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=131.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=867B max=3.0KiB
2021/07/08 17:12:07 scheduler task 35e1e452 (flow c80acdb8): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s061.tar.gz resources {}
2021/07/08 17:12:07  ->  n100.r06.s061.Main.cp_out_file c80acdb8 exec extern s3://niema-test/n100/r06/n100.r06.s061.tar.gz 35.7MiB
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): promoting objects (try 0): started
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): retrieving diagnostic output (try 0): started
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): retrieving result (try 0): started
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): transferring output (try 0): started
2021/07/08 17:12:07 scheduler task 46d91cb6 (flow 87129988): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9347c4e9e6aa23561e7f27629a0902cd0d73ce1edec3b798000228a66a881242 -> s3://niema-test/n100/r06/n100.r06.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:07  <-  n100.r06.s072.Main.cp_out_file 87129988 ok   extern 0s 35.7MiB
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): promoting objects (try 0): started
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): retrieving diagnostic output (try 0): started
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): retrieving result (try 0): started
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:07 scheduler task 0f930977 (flow 56443f2e): transferring output (try 0): started
2021/07/08 17:12:07 scheduler task 35e1e452 (flow c80acdb8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f9cfaf0e73269b0c9cc6ad3d45024fdf8a8ec57104d32e904a71970689cba6f0 -> s3://niema-test/n100/r06/n100.r06.s061.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:07  <-  n100.r06.s061.Main.cp_out_file c80acdb8 ok   extern 0s 35.7MiB
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): unloading (try 0): started
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): unloading list<val<.=71ee7203 35.7MiB> 35.7MiB>
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): unloading val<.=fb5b7a02 35.4MiB>
2021/07/08 17:12:07 scheduler task aefe22c5 (flow 3c997280): unloading val<.=bd4e1b1b 35.4MiB>
2021/07/08 17:12:08 scheduler task aefe22c5 (flow 3c997280): unloaded val<.=bd4e1b1b 35.4MiB>
2021/07/08 17:12:08 scheduler task aefe22c5 (flow 3c997280): unloaded val<.=fb5b7a02 35.4MiB>
2021/07/08 17:12:08 scheduler task aefe22c5 (flow 3c997280): unloaded list<val<.=71ee7203 35.7MiB> 35.7MiB>
2021/07/08 17:12:08 scheduler task aefe22c5 (flow 3c997280): unloading (try 0): successful, next state: complete
2021/07/08 17:12:08  <-  n100.r06.s060.Main.out_file 3c997280 ok     exec 5m4s 35.7MiB
2021/07/08 17:12:08 n100.r06.s060.Main.out_file 3c997280 n100/r06/n100.r06.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61ebf28997ebcda2439ca31a27097555bf4a560324c497193d10f57c006ed5bc
	sha256:3c9972802343e3fac0e797c94c1e21f360752985d556afa180ced892f75e7274
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aefe22c5839fe5297617027c2ae9b3fce60daa34a2d889ba6275311b9a1718e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s060_output"
	    wget -O "n100.r06.s060_output/n100.r06.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s060_output/n100.r06.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s060_output/n100.r06.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s060_output/n100.r06.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s060_output/n100.r06.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s060_output/n100.r06.s060.reference.fas" "n100.r06.s060_output/n100.r06.s060.fq1.fastq" "n100.r06.s060_output/n100.r06.s060.fq2.fastq" | samtools view -bS - > "n100.r06.s060_output/n100.r06.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s060_output/n100.r06.s060.untrimmed.sorted.bam" "n100.r06.s060_output/n100.r06.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s060_output/n100.r06.s060.untrimmed.sorted.bam" -b "n100.r06.s060_output/n100.r06.s060.primers.bed" -p "n100.r06.s060_output/n100.r06.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" "n100.r06.s060_output/n100.r06.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s060_output/n100.r06.s060.reference.fas" "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" > "n100.r06.s060_output/n100.r06.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s060_output/n100.r06.s060.reference.fas" --call-indels "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" > "n100.r06.s060_output/n100.r06.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s060_output/n100.r06.s060.trimmed.sorted.bam" > "n100.r06.s060_output/n100.r06.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s060_output/n100.r06.s060.depth.txt" "n100.r06.s060_output/n100.r06.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s060_output/n100.r06.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s060_output/n100.r06.s060.reference.fas" | bcftools consensus -m "n100.r06.s060_output/n100.r06.s060.low_depth.tsv" tmp.vcf.gz > "n100.r06.s060_output/n100.r06.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:71ee72030070a8676be3837b624f38272fc644c5a78b85bf480969b45b5af3bc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.9MiB max=126.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:12:08 scheduler task 76023413 (flow 79dcc0bd): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s060.tar.gz resources {}
2021/07/08 17:12:08  ->  n100.r06.s060.Main.cp_out_file 79dcc0bd exec extern s3://niema-test/n100/r06/n100.r06.s060.tar.gz 35.7MiB
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloading (try 0): started
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloading list<val<.=d6fb04ed 35.7MiB> 35.7MiB>
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloading val<.=59ab9219 35.4MiB>
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloading val<.=3d38eea3 35.4MiB>
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloaded list<val<.=d6fb04ed 35.7MiB> 35.7MiB>
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloaded val<.=59ab9219 35.4MiB>
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloaded val<.=3d38eea3 35.4MiB>
2021/07/08 17:12:08 scheduler task 0f930977 (flow 56443f2e): unloading (try 0): successful, next state: complete
2021/07/08 17:12:08  <-  n100.r06.s024.Main.out_file 56443f2e ok     exec 5m5s 35.7MiB
2021/07/08 17:12:08 n100.r06.s024.Main.out_file 56443f2e n100/r06/n100.r06.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a41b3eefe1aaeb20b11ea9b35e19e69e7fa6fa4d348f9ae239176b19be98b47c
	sha256:56443f2eaab0cc1192629ebeff821f67e9107d7ac303ce908e710727961227a4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0f930977112c4824a846bf02fed2afeeec9bd5b980c07cc8b3b4fd23c883c098
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s024_output"
	    wget -O "n100.r06.s024_output/n100.r06.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s024_output/n100.r06.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s024_output/n100.r06.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s024_output/n100.r06.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s024_output/n100.r06.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s024_output/n100.r06.s024.reference.fas" "n100.r06.s024_output/n100.r06.s024.fq1.fastq" "n100.r06.s024_output/n100.r06.s024.fq2.fastq" | samtools view -bS - > "n100.r06.s024_output/n100.r06.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s024_output/n100.r06.s024.untrimmed.sorted.bam" "n100.r06.s024_output/n100.r06.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s024_output/n100.r06.s024.untrimmed.sorted.bam" -b "n100.r06.s024_output/n100.r06.s024.primers.bed" -p "n100.r06.s024_output/n100.r06.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" "n100.r06.s024_output/n100.r06.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s024_output/n100.r06.s024.reference.fas" "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" > "n100.r06.s024_output/n100.r06.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s024_output/n100.r06.s024.reference.fas" --call-indels "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" > "n100.r06.s024_output/n100.r06.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s024_output/n100.r06.s024.trimmed.sorted.bam" > "n100.r06.s024_output/n100.r06.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s024_output/n100.r06.s024.depth.txt" "n100.r06.s024_output/n100.r06.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s024_output/n100.r06.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s024_output/n100.r06.s024.reference.fas" | bcftools consensus -m "n100.r06.s024_output/n100.r06.s024.low_depth.tsv" tmp.vcf.gz > "n100.r06.s024_output/n100.r06.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d6fb04ed9f7f2ec197d6fb21d44f447e8c6bcd237277f7f3bc6c1ab5eda72ef1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=131.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 17:12:08 scheduler task 3a9a559b (flow 8ba4afdd): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s024.tar.gz resources {}
2021/07/08 17:12:08  ->  n100.r06.s024.Main.cp_out_file 8ba4afdd exec extern s3://niema-test/n100/r06/n100.r06.s024.tar.gz 35.7MiB
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): promoting objects (try 0): started
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): retrieving diagnostic output (try 0): started
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): retrieving result (try 0): started
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:08 scheduler task 76023413 (flow 79dcc0bd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:71ee72030070a8676be3837b624f38272fc644c5a78b85bf480969b45b5af3bc -> s3://niema-test/n100/r06/n100.r06.s060.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:08  <-  n100.r06.s060.Main.cp_out_file 79dcc0bd ok   extern 0s 35.7MiB
2021/07/08 17:12:08 scheduler task 144f69b7 (flow 0a334aa8): transferring output (try 0): started
2021/07/08 17:12:08 scheduler task 0a7ec48b (flow eda7cfd2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:08 scheduler task 0a7ec48b (flow eda7cfd2): promoting objects (try 0): started
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): retrieving diagnostic output (try 0): started
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): retrieving result (try 0): started
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): transferring output (try 0): started
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:09 scheduler task 3a9a559b (flow 8ba4afdd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d6fb04ed9f7f2ec197d6fb21d44f447e8c6bcd237277f7f3bc6c1ab5eda72ef1 -> s3://niema-test/n100/r06/n100.r06.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:09  <-  n100.r06.s024.Main.cp_out_file 8ba4afdd ok   extern 0s 35.7MiB
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): promoting objects (try 0): started
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): retrieving diagnostic output (try 0): started
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloading (try 0): started
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloading list<val<.=4d60d8dd 35.7MiB> 35.7MiB>
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloading val<.=305d23d5 35.4MiB>
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloading val<.=23874eb3 35.4MiB>
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): retrieving result (try 0): started
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloaded val<.=23874eb3 35.4MiB>
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloaded val<.=305d23d5 35.4MiB>
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloaded list<val<.=4d60d8dd 35.7MiB> 35.7MiB>
2021/07/08 17:12:09 scheduler task 144f69b7 (flow 0a334aa8): unloading (try 0): successful, next state: complete
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:09  <-  n100.r06.s087.Main.out_file 0a334aa8 ok     exec 5m5s 35.7MiB
2021/07/08 17:12:09 n100.r06.s087.Main.out_file 0a334aa8 n100/r06/n100.r06.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7f45eadb9766745a029268d7bd0255c73390529a7de332e3f3406db932d54d1a
	sha256:0a334aa871e42b0173c5fdf224fdee838c132c9f950a9d5067c255732f08a43f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/144f69b730cb47be77bc4c344d8db71d17d2eb5b9afebe096902ed2e216e55fd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s087_output"
	    wget -O "n100.r06.s087_output/n100.r06.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s087_output/n100.r06.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s087_output/n100.r06.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s087_output/n100.r06.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s087_output/n100.r06.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s087_output/n100.r06.s087.reference.fas" "n100.r06.s087_output/n100.r06.s087.fq1.fastq" "n100.r06.s087_output/n100.r06.s087.fq2.fastq" | samtools view -bS - > "n100.r06.s087_output/n100.r06.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s087_output/n100.r06.s087.untrimmed.sorted.bam" "n100.r06.s087_output/n100.r06.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s087_output/n100.r06.s087.untrimmed.sorted.bam" -b "n100.r06.s087_output/n100.r06.s087.primers.bed" -p "n100.r06.s087_output/n100.r06.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" "n100.r06.s087_output/n100.r06.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s087_output/n100.r06.s087.reference.fas" "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" > "n100.r06.s087_output/n100.r06.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s087_output/n100.r06.s087.reference.fas" --call-indels "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" > "n100.r06.s087_output/n100.r06.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s087_output/n100.r06.s087.trimmed.sorted.bam" > "n100.r06.s087_output/n100.r06.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s087_output/n100.r06.s087.depth.txt" "n100.r06.s087_output/n100.r06.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s087_output/n100.r06.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s087_output/n100.r06.s087.reference.fas" | bcftools consensus -m "n100.r06.s087_output/n100.r06.s087.low_depth.tsv" tmp.vcf.gz > "n100.r06.s087_output/n100.r06.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4d60d8dd0d552416ab1f49a32f2a42cf698df39e64e43822cc7e2ce4bb818e34 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=124.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:12:09 scheduler task 80f22a30 (flow 49b6748b): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s087.tar.gz resources {}
2021/07/08 17:12:09  ->  n100.r06.s087.Main.cp_out_file 49b6748b exec extern s3://niema-test/n100/r06/n100.r06.s087.tar.gz 35.7MiB
2021/07/08 17:12:09 scheduler task 1116b1ea (flow 0f8df37c): transferring output (try 0): started
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): promoting objects (try 0): started
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): retrieving diagnostic output (try 0): started
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): retrieving result (try 0): started
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloading (try 0): started
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloading list<val<.=4ec6c11b 35.7MiB> 35.7MiB>
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloading val<.=6da5ccb4 35.4MiB>
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloading val<.=03ffd14e 35.4MiB>
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloaded val<.=6da5ccb4 35.4MiB>
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloaded list<val<.=4ec6c11b 35.7MiB> 35.7MiB>
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloaded val<.=03ffd14e 35.4MiB>
2021/07/08 17:12:09 scheduler task 0a7ec48b (flow eda7cfd2): unloading (try 0): successful, next state: complete
2021/07/08 17:12:09 scheduler task 006129c5 (flow 70f0c0c0): transferring output (try 0): started
2021/07/08 17:12:09  <-  n100.r06.s011.Main.out_file eda7cfd2 ok     exec 4m56s 35.7MiB
2021/07/08 17:12:09 n100.r06.s011.Main.out_file eda7cfd2 n100/r06/n100.r06.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aa64559de23c50b94fcb516cf9545471fc50f3edc2a53dcf637ffa0556a9c457
	sha256:eda7cfd2e99a0a9dd9e899d2c09f78eda432bd7b57ab731877a35b061f7d4e41
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a7ec48b5ad36f9f007e86bf208d41a2f7fed0b53636d883449247cc207c5924
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s011_output"
	    wget -O "n100.r06.s011_output/n100.r06.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s011_output/n100.r06.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s011_output/n100.r06.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s011_output/n100.r06.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s011_output/n100.r06.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s011_output/n100.r06.s011.reference.fas" "n100.r06.s011_output/n100.r06.s011.fq1.fastq" "n100.r06.s011_output/n100.r06.s011.fq2.fastq" | samtools view -bS - > "n100.r06.s011_output/n100.r06.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s011_output/n100.r06.s011.untrimmed.sorted.bam" "n100.r06.s011_output/n100.r06.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s011_output/n100.r06.s011.untrimmed.sorted.bam" -b "n100.r06.s011_output/n100.r06.s011.primers.bed" -p "n100.r06.s011_output/n100.r06.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" "n100.r06.s011_output/n100.r06.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s011_output/n100.r06.s011.reference.fas" "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" > "n100.r06.s011_output/n100.r06.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s011_output/n100.r06.s011.reference.fas" --call-indels "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" > "n100.r06.s011_output/n100.r06.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s011_output/n100.r06.s011.trimmed.sorted.bam" > "n100.r06.s011_output/n100.r06.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s011_output/n100.r06.s011.depth.txt" "n100.r06.s011_output/n100.r06.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s011_output/n100.r06.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s011_output/n100.r06.s011.reference.fas" | bcftools consensus -m "n100.r06.s011_output/n100.r06.s011.low_depth.tsv" tmp.vcf.gz > "n100.r06.s011_output/n100.r06.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4ec6c11bee485d61a3ce018a5e7957d6b250ea30ebc530a8fa15925713572cac 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.1MiB max=126.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:09 scheduler task 725a4de6 (flow 31856493): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s011.tar.gz resources {}
2021/07/08 17:12:09  ->  n100.r06.s011.Main.cp_out_file 31856493 exec extern s3://niema-test/n100/r06/n100.r06.s011.tar.gz 35.7MiB
2021/07/08 17:12:09 scheduler task fbc799bb (flow 54a753f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:09 scheduler task fbc799bb (flow 54a753f3): promoting objects (try 0): started
2021/07/08 17:12:09 scheduler task 965baf5b (flow d8da4a43): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:09 scheduler task 965baf5b (flow d8da4a43): promoting objects (try 0): started
2021/07/08 17:12:09 scheduler task fbc799bb (flow 54a753f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:09 scheduler task fbc799bb (flow 54a753f3): retrieving diagnostic output (try 0): started
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloading (try 0): started
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloading list<val<.=158e09f5 35.7MiB> 35.7MiB>
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloading val<.=7389a7e5 35.4MiB>
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloading val<.=c664e266 35.4MiB>
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): retrieving diagnostic output (try 0): started
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): retrieving result (try 0): started
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloaded list<val<.=158e09f5 35.7MiB> 35.7MiB>
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloaded val<.=7389a7e5 35.4MiB>
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloaded val<.=c664e266 35.4MiB>
2021/07/08 17:12:10 scheduler task 1116b1ea (flow 0f8df37c): unloading (try 0): successful, next state: complete
2021/07/08 17:12:10  <-  n100.r06.s078.Main.out_file 0f8df37c ok     exec 4m56s 35.7MiB
2021/07/08 17:12:10 n100.r06.s078.Main.out_file 0f8df37c n100/r06/n100.r06.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1cf04e5adfacc3b8a006c792bdf9be24a3c2531c017edfb9dc8ee7319bf44392
	sha256:0f8df37c9ade8fe626d6a4b2e7eadbf7e468646077b6a979ff75c6f3529a45a1
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1116b1ead78ee12ba853682789259301550c4dd0bdb6af75bb4ca9aee3d23bc5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s078_output"
	    wget -O "n100.r06.s078_output/n100.r06.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s078_output/n100.r06.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s078_output/n100.r06.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s078_output/n100.r06.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s078_output/n100.r06.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s078_output/n100.r06.s078.reference.fas" "n100.r06.s078_output/n100.r06.s078.fq1.fastq" "n100.r06.s078_output/n100.r06.s078.fq2.fastq" | samtools view -bS - > "n100.r06.s078_output/n100.r06.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s078_output/n100.r06.s078.untrimmed.sorted.bam" "n100.r06.s078_output/n100.r06.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s078_output/n100.r06.s078.untrimmed.sorted.bam" -b "n100.r06.s078_output/n100.r06.s078.primers.bed" -p "n100.r06.s078_output/n100.r06.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" "n100.r06.s078_output/n100.r06.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s078_output/n100.r06.s078.reference.fas" "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" > "n100.r06.s078_output/n100.r06.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s078_output/n100.r06.s078.reference.fas" --call-indels "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" > "n100.r06.s078_output/n100.r06.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s078_output/n100.r06.s078.trimmed.sorted.bam" > "n100.r06.s078_output/n100.r06.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s078_output/n100.r06.s078.depth.txt" "n100.r06.s078_output/n100.r06.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s078_output/n100.r06.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s078_output/n100.r06.s078.reference.fas" | bcftools consensus -m "n100.r06.s078_output/n100.r06.s078.low_depth.tsv" tmp.vcf.gz > "n100.r06.s078_output/n100.r06.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:158e09f58ea1b4098b8d6ce6ddda042d5c1900f3c96e94a6c57deeaa518d6e95 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.0MiB max=131.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:10 scheduler task 4b725a6b (flow 04b2e2e2): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s078.tar.gz resources {}
2021/07/08 17:12:10  ->  n100.r06.s078.Main.cp_out_file 04b2e2e2 exec extern s3://niema-test/n100/r06/n100.r06.s078.tar.gz 35.7MiB
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): transferring output (try 0): started
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): retrieving result (try 0): started
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): transferring output (try 0): started
2021/07/08 17:12:10 scheduler task 80f22a30 (flow 49b6748b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4d60d8dd0d552416ab1f49a32f2a42cf698df39e64e43822cc7e2ce4bb818e34 -> s3://niema-test/n100/r06/n100.r06.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:10  <-  n100.r06.s087.Main.cp_out_file 49b6748b ok   extern 0s 35.7MiB
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloading (try 0): started
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloading list<val<.=12c319df 35.8MiB> 35.8MiB>
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloading val<.=d25eeb70 35.4MiB>
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloading val<.=55aad3c3 35.4MiB>
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloaded list<val<.=12c319df 35.8MiB> 35.8MiB>
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloaded val<.=d25eeb70 35.4MiB>
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloaded val<.=55aad3c3 35.4MiB>
2021/07/08 17:12:10 scheduler task 006129c5 (flow 70f0c0c0): unloading (try 0): successful, next state: complete
2021/07/08 17:12:10  <-  n100.r06.s012.Main.out_file 70f0c0c0 ok     exec 5m7s 35.8MiB
2021/07/08 17:12:10 n100.r06.s012.Main.out_file 70f0c0c0 n100/r06/n100.r06.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b28ca1cce125f7ae2f09ced81be4b53b0b3d7397711d98bbbe727655e7f86171
	sha256:70f0c0c0b65f8a795600c66c68f0577739ac2f6eb2cd569bb0adab259486699f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/006129c58b7e8491783d77a41b75e5a65b0df22276443102b1f6875106f33b99
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s012_output"
	    wget -O "n100.r06.s012_output/n100.r06.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s012_output/n100.r06.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s012_output/n100.r06.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s012_output/n100.r06.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s012_output/n100.r06.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s012_output/n100.r06.s012.reference.fas" "n100.r06.s012_output/n100.r06.s012.fq1.fastq" "n100.r06.s012_output/n100.r06.s012.fq2.fastq" | samtools view -bS - > "n100.r06.s012_output/n100.r06.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s012_output/n100.r06.s012.untrimmed.sorted.bam" "n100.r06.s012_output/n100.r06.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s012_output/n100.r06.s012.untrimmed.sorted.bam" -b "n100.r06.s012_output/n100.r06.s012.primers.bed" -p "n100.r06.s012_output/n100.r06.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" "n100.r06.s012_output/n100.r06.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s012_output/n100.r06.s012.reference.fas" "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" > "n100.r06.s012_output/n100.r06.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s012_output/n100.r06.s012.reference.fas" --call-indels "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" > "n100.r06.s012_output/n100.r06.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s012_output/n100.r06.s012.trimmed.sorted.bam" > "n100.r06.s012_output/n100.r06.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s012_output/n100.r06.s012.depth.txt" "n100.r06.s012_output/n100.r06.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s012_output/n100.r06.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s012_output/n100.r06.s012.reference.fas" | bcftools consensus -m "n100.r06.s012_output/n100.r06.s012.low_depth.tsv" tmp.vcf.gz > "n100.r06.s012_output/n100.r06.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:12c319df2b1274aa9b4c7bde7c7e447c1e34ae7299ce8f28638844a127c3ccfa 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=129.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:12:10 scheduler task ba90d0f3 (flow ac1e678f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s012.tar.gz resources {}
2021/07/08 17:12:10  ->  n100.r06.s012.Main.cp_out_file ac1e678f exec extern s3://niema-test/n100/r06/n100.r06.s012.tar.gz 35.8MiB
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloading (try 0): started
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloading list<val<.=0c216b2f 35.8MiB> 35.8MiB>
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloading val<.=c95b2f62 35.4MiB>
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloading val<.=d6ba20e8 35.4MiB>
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): promoting objects (try 0): started
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloaded list<val<.=0c216b2f 35.8MiB> 35.8MiB>
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloaded val<.=c95b2f62 35.4MiB>
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloaded val<.=d6ba20e8 35.4MiB>
2021/07/08 17:12:10 scheduler task fbc799bb (flow 54a753f3): unloading (try 0): successful, next state: complete
2021/07/08 17:12:10  <-  n100.r06.s044.Main.out_file 54a753f3 ok     exec 5m7s 35.8MiB
2021/07/08 17:12:10 n100.r06.s044.Main.out_file 54a753f3 n100/r06/n100.r06.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:446cafbe46cfca853f2a86268df8632dcbb1a02b4256f8e210f1b38be17d4801
	sha256:54a753f3e89b31f36ab34da46bc417920d2dffc274585d620968bc8c71a78fff
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fbc799bbc803f67b0d59f07bbfdb0f8f2ee4e8aeeae8a7e7dd4ee9dc1b1126c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s044_output"
	    wget -O "n100.r06.s044_output/n100.r06.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s044_output/n100.r06.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s044_output/n100.r06.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s044_output/n100.r06.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s044_output/n100.r06.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s044_output/n100.r06.s044.reference.fas" "n100.r06.s044_output/n100.r06.s044.fq1.fastq" "n100.r06.s044_output/n100.r06.s044.fq2.fastq" | samtools view -bS - > "n100.r06.s044_output/n100.r06.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s044_output/n100.r06.s044.untrimmed.sorted.bam" "n100.r06.s044_output/n100.r06.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s044_output/n100.r06.s044.untrimmed.sorted.bam" -b "n100.r06.s044_output/n100.r06.s044.primers.bed" -p "n100.r06.s044_output/n100.r06.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" "n100.r06.s044_output/n100.r06.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s044_output/n100.r06.s044.reference.fas" "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" > "n100.r06.s044_output/n100.r06.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s044_output/n100.r06.s044.reference.fas" --call-indels "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" > "n100.r06.s044_output/n100.r06.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s044_output/n100.r06.s044.trimmed.sorted.bam" > "n100.r06.s044_output/n100.r06.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s044_output/n100.r06.s044.depth.txt" "n100.r06.s044_output/n100.r06.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s044_output/n100.r06.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s044_output/n100.r06.s044.reference.fas" | bcftools consensus -m "n100.r06.s044_output/n100.r06.s044.low_depth.tsv" tmp.vcf.gz > "n100.r06.s044_output/n100.r06.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0c216b2fbc1b99e39fdb2eadc2111449a7db6c6260ab89774659d704398f37c8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=128.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:12:10 scheduler task 0cc4c1ba (flow 1c953d39): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s044.tar.gz resources {}
2021/07/08 17:12:10  ->  n100.r06.s044.Main.cp_out_file 1c953d39 exec extern s3://niema-test/n100/r06/n100.r06.s044.tar.gz 35.8MiB
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloading (try 0): started
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloading val<.=ad350577 35.4MiB>
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloading val<.=a2a2e3c8 35.4MiB>
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloading list<val<.=2bdbfcd1 35.7MiB> 35.7MiB>
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): retrieving diagnostic output (try 0): started
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloaded val<.=ad350577 35.4MiB>
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloaded list<val<.=2bdbfcd1 35.7MiB> 35.7MiB>
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloaded val<.=a2a2e3c8 35.4MiB>
2021/07/08 17:12:10 scheduler task 965baf5b (flow d8da4a43): unloading (try 0): successful, next state: complete
2021/07/08 17:12:10  <-  n100.r06.s036.Main.out_file d8da4a43 ok     exec 4m57s 35.7MiB
2021/07/08 17:12:10 n100.r06.s036.Main.out_file d8da4a43 n100/r06/n100.r06.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2f59bbcddb58ab8a4d43dfccb2ca3650cda47004115a8170ad976a22b3168423
	sha256:d8da4a43650c048a4135075a470d5379ccf8318e0ee16a81ad1bc52e4f45be70
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/965baf5b0465a962058562e62a7bac7d25724af68f0ab61ec40b28f3e3dce523
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s036_output"
	    wget -O "n100.r06.s036_output/n100.r06.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s036_output/n100.r06.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s036_output/n100.r06.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s036_output/n100.r06.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s036_output/n100.r06.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s036_output/n100.r06.s036.reference.fas" "n100.r06.s036_output/n100.r06.s036.fq1.fastq" "n100.r06.s036_output/n100.r06.s036.fq2.fastq" | samtools view -bS - > "n100.r06.s036_output/n100.r06.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s036_output/n100.r06.s036.untrimmed.sorted.bam" "n100.r06.s036_output/n100.r06.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s036_output/n100.r06.s036.untrimmed.sorted.bam" -b "n100.r06.s036_output/n100.r06.s036.primers.bed" -p "n100.r06.s036_output/n100.r06.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" "n100.r06.s036_output/n100.r06.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s036_output/n100.r06.s036.reference.fas" "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" > "n100.r06.s036_output/n100.r06.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s036_output/n100.r06.s036.reference.fas" --call-indels "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" > "n100.r06.s036_output/n100.r06.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s036_output/n100.r06.s036.trimmed.sorted.bam" > "n100.r06.s036_output/n100.r06.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s036_output/n100.r06.s036.depth.txt" "n100.r06.s036_output/n100.r06.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s036_output/n100.r06.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s036_output/n100.r06.s036.reference.fas" | bcftools consensus -m "n100.r06.s036_output/n100.r06.s036.low_depth.tsv" tmp.vcf.gz > "n100.r06.s036_output/n100.r06.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2bdbfcd1e55b2e21b10712c4ad2aa494871823a5daf88aaa29f4b62b717915cb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.9MiB max=131.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:10 scheduler task 6408b27a (flow 211c6b9f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s036.tar.gz resources {}
2021/07/08 17:12:10  ->  n100.r06.s036.Main.cp_out_file 211c6b9f exec extern s3://niema-test/n100/r06/n100.r06.s036.tar.gz 35.7MiB
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): retrieving result (try 0): started
2021/07/08 17:12:10 scheduler task 4b725a6b (flow 04b2e2e2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:158e09f58ea1b4098b8d6ce6ddda042d5c1900f3c96e94a6c57deeaa518d6e95 -> s3://niema-test/n100/r06/n100.r06.s078.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:10  <-  n100.r06.s078.Main.cp_out_file 04b2e2e2 ok   extern 0s 35.7MiB
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:10 scheduler task 476b976c (flow 639e3264): transferring output (try 0): started
2021/07/08 17:12:11 scheduler task 725a4de6 (flow 31856493): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4ec6c11bee485d61a3ce018a5e7957d6b250ea30ebc530a8fa15925713572cac -> s3://niema-test/n100/r06/n100.r06.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:11  <-  n100.r06.s011.Main.cp_out_file 31856493 ok   extern 0s 35.7MiB
2021/07/08 17:12:11 scheduler task ba90d0f3 (flow ac1e678f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:12c319df2b1274aa9b4c7bde7c7e447c1e34ae7299ce8f28638844a127c3ccfa -> s3://niema-test/n100/r06/n100.r06.s012.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:11  <-  n100.r06.s012.Main.cp_out_file ac1e678f ok   extern 0s 35.8MiB
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloading (try 0): started
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloading list<val<.=fd07da1f 35.8MiB> 35.8MiB>
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloading val<.=44b327d1 35.4MiB>
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloading val<.=01188f0a 35.4MiB>
2021/07/08 17:12:11 scheduler task 0cc4c1ba (flow 1c953d39): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0c216b2fbc1b99e39fdb2eadc2111449a7db6c6260ab89774659d704398f37c8 -> s3://niema-test/n100/r06/n100.r06.s044.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:11  <-  n100.r06.s044.Main.cp_out_file 1c953d39 ok   extern 0s 35.8MiB
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloaded list<val<.=fd07da1f 35.8MiB> 35.8MiB>
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloaded val<.=01188f0a 35.4MiB>
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloaded val<.=44b327d1 35.4MiB>
2021/07/08 17:12:11 scheduler task 476b976c (flow 639e3264): unloading (try 0): successful, next state: complete
2021/07/08 17:12:11  <-  n100.r06.s030.Main.out_file 639e3264 ok     exec 5m8s 35.8MiB
2021/07/08 17:12:11 n100.r06.s030.Main.out_file 639e3264 n100/r06/n100.r06.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61336bdccec5bd22fb73ca5dd187cc48e9227692771aac30e63ccce51cdf67c2
	sha256:639e3264507d1a6a6959131f09d2d2b1c65a98416e0ece40a1b2353b4a7e6389
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/476b976c9476d223edc837210d74663dbf2ddbd369ecd11abc5532e06e67f685
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s030_output"
	    wget -O "n100.r06.s030_output/n100.r06.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s030_output/n100.r06.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s030_output/n100.r06.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s030_output/n100.r06.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s030_output/n100.r06.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s030_output/n100.r06.s030.reference.fas" "n100.r06.s030_output/n100.r06.s030.fq1.fastq" "n100.r06.s030_output/n100.r06.s030.fq2.fastq" | samtools view -bS - > "n100.r06.s030_output/n100.r06.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s030_output/n100.r06.s030.untrimmed.sorted.bam" "n100.r06.s030_output/n100.r06.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s030_output/n100.r06.s030.untrimmed.sorted.bam" -b "n100.r06.s030_output/n100.r06.s030.primers.bed" -p "n100.r06.s030_output/n100.r06.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" "n100.r06.s030_output/n100.r06.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s030_output/n100.r06.s030.reference.fas" "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" > "n100.r06.s030_output/n100.r06.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s030_output/n100.r06.s030.reference.fas" --call-indels "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" > "n100.r06.s030_output/n100.r06.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s030_output/n100.r06.s030.trimmed.sorted.bam" > "n100.r06.s030_output/n100.r06.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s030_output/n100.r06.s030.depth.txt" "n100.r06.s030_output/n100.r06.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s030_output/n100.r06.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s030_output/n100.r06.s030.reference.fas" | bcftools consensus -m "n100.r06.s030_output/n100.r06.s030.low_depth.tsv" tmp.vcf.gz > "n100.r06.s030_output/n100.r06.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fd07da1f81a3cbc1877b657a891a3f7965215d081c2118a1b4167631847dbd9c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=129.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:12:11 scheduler task 7b0d1945 (flow 17a00c8d): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s030.tar.gz resources {}
2021/07/08 17:12:11  ->  n100.r06.s030.Main.cp_out_file 17a00c8d exec extern s3://niema-test/n100/r06/n100.r06.s030.tar.gz 35.8MiB
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): promoting objects (try 0): started
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): promoting objects (try 0): started
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): promoting objects (try 0): started
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): retrieving diagnostic output (try 0): started
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): retrieving diagnostic output (try 0): started
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): promoting objects (try 0): started
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): retrieving diagnostic output (try 0): started
2021/07/08 17:12:11 scheduler task 6408b27a (flow 211c6b9f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2bdbfcd1e55b2e21b10712c4ad2aa494871823a5daf88aaa29f4b62b717915cb -> s3://niema-test/n100/r06/n100.r06.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:11  <-  n100.r06.s036.Main.cp_out_file 211c6b9f ok   extern 0s 35.7MiB
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): retrieving result (try 0): started
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): retrieving result (try 0): started
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): retrieving diagnostic output (try 0): started
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:11 scheduler task d3fe6c76 (flow b67385b5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): retrieving result (try 0): started
2021/07/08 17:12:11 scheduler task d3fe6c76 (flow b67385b5): promoting objects (try 0): started
2021/07/08 17:12:11 scheduler task 626618af (flow 3d47e552): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:11 scheduler task 46f78305 (flow 40aec702): transferring output (try 0): started
2021/07/08 17:12:11 scheduler task 626618af (flow 3d47e552): promoting objects (try 0): started
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:11 scheduler task b76e0131 (flow bd79a373): transferring output (try 0): started
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): retrieving result (try 0): started
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:11 scheduler task d3fe6c76 (flow b67385b5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:11 scheduler task fe3638fa (flow c46e9ad2): transferring output (try 0): started
2021/07/08 17:12:11 scheduler task d3fe6c76 (flow b67385b5): retrieving diagnostic output (try 0): started
2021/07/08 17:12:11 scheduler task 626618af (flow 3d47e552): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:11 scheduler task 626618af (flow 3d47e552): retrieving diagnostic output (try 0): started
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:11 scheduler task e67335ac (flow bad69a68): transferring output (try 0): started
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): retrieving result (try 0): started
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): retrieving result (try 0): started
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): transferring output (try 0): started
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): transferring output (try 0): started
2021/07/08 17:12:12 scheduler task 7b0d1945 (flow 17a00c8d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fd07da1f81a3cbc1877b657a891a3f7965215d081c2118a1b4167631847dbd9c -> s3://niema-test/n100/r06/n100.r06.s030.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:12  <-  n100.r06.s030.Main.cp_out_file 17a00c8d ok   extern 0s 35.8MiB
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): promoting objects (try 0): started
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): promoting objects (try 0): started
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloading (try 0): started
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloading list<val<.=20a927e6 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloading val<.=845450d2 35.4MiB>
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloading val<.=c696dd5f 35.4MiB>
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): retrieving diagnostic output (try 0): started
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): retrieving diagnostic output (try 0): started
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloaded val<.=845450d2 35.4MiB>
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloaded val<.=c696dd5f 35.4MiB>
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloaded list<val<.=20a927e6 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task 46f78305 (flow 40aec702): unloading (try 0): successful, next state: complete
2021/07/08 17:12:12  <-  n100.r06.s020.Main.out_file 40aec702 ok     exec 4m53s 35.7MiB
2021/07/08 17:12:12 n100.r06.s020.Main.out_file 40aec702 n100/r06/n100.r06.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2571f0dbf36ccb9719c24cd6f040a2bb27ad459d60a6bb6803223768e4bf1d83
	sha256:40aec70298fb3a7107904c746a511aaa9a8c61675452d6b67b9b8f08f9a72a5d
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/46f78305322794745af222aa3a75871ff6979f71bab34281686e23b2fc5a8b28
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s020_output"
	    wget -O "n100.r06.s020_output/n100.r06.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s020_output/n100.r06.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s020_output/n100.r06.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s020_output/n100.r06.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s020_output/n100.r06.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s020_output/n100.r06.s020.reference.fas" "n100.r06.s020_output/n100.r06.s020.fq1.fastq" "n100.r06.s020_output/n100.r06.s020.fq2.fastq" | samtools view -bS - > "n100.r06.s020_output/n100.r06.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s020_output/n100.r06.s020.untrimmed.sorted.bam" "n100.r06.s020_output/n100.r06.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s020_output/n100.r06.s020.untrimmed.sorted.bam" -b "n100.r06.s020_output/n100.r06.s020.primers.bed" -p "n100.r06.s020_output/n100.r06.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" "n100.r06.s020_output/n100.r06.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s020_output/n100.r06.s020.reference.fas" "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" > "n100.r06.s020_output/n100.r06.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s020_output/n100.r06.s020.reference.fas" --call-indels "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" > "n100.r06.s020_output/n100.r06.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s020_output/n100.r06.s020.trimmed.sorted.bam" > "n100.r06.s020_output/n100.r06.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s020_output/n100.r06.s020.depth.txt" "n100.r06.s020_output/n100.r06.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s020_output/n100.r06.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s020_output/n100.r06.s020.reference.fas" | bcftools consensus -m "n100.r06.s020_output/n100.r06.s020.low_depth.tsv" tmp.vcf.gz > "n100.r06.s020_output/n100.r06.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:20a927e6675fe207d836becd9da51327f3009c510d1ee3017a30e310c5595c51 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=130.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:12 scheduler task 07cb2082 (flow eb65e852): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s020.tar.gz resources {}
2021/07/08 17:12:12  ->  n100.r06.s020.Main.cp_out_file eb65e852 exec extern s3://niema-test/n100/r06/n100.r06.s020.tar.gz 35.7MiB
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloading (try 0): started
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloading list<val<.=11028281 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloading val<.=d6888b5d 35.4MiB>
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloading val<.=39fda9b8 35.4MiB>
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): retrieving result (try 0): started
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloading (try 0): started
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloading list<val<.=84e29f2b 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloading val<.=da195187 35.4MiB>
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloading val<.=1766711f 35.4MiB>
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): retrieving result (try 0): started
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloading (try 0): started
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloading list<val<.=39cd1a90 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloading val<.=c08b227e 35.4MiB>
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloading val<.=b70d074e 35.4MiB>
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloaded list<val<.=11028281 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloaded val<.=d6888b5d 35.4MiB>
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloaded val<.=39fda9b8 35.4MiB>
2021/07/08 17:12:12 scheduler task fe3638fa (flow c46e9ad2): unloading (try 0): successful, next state: complete
2021/07/08 17:12:12  <-  n100.r06.s080.Main.out_file c46e9ad2 ok     exec 4m59s 35.7MiB
2021/07/08 17:12:12 n100.r06.s080.Main.out_file c46e9ad2 n100/r06/n100.r06.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8447375b9af2cdeb4d3f018f8a5053f7c4f3590c371fb11641ea864a161733e4
	sha256:c46e9ad28ddc204df9d363d84e164f13bd5a97ab4d3df3ccb2119b96fe0df649
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fe3638fa2004fb2024b7c929e10b6caf441ce8738dc7936adb43a6c45677ff5b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s080_output"
	    wget -O "n100.r06.s080_output/n100.r06.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s080_output/n100.r06.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s080_output/n100.r06.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s080_output/n100.r06.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s080_output/n100.r06.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s080_output/n100.r06.s080.reference.fas" "n100.r06.s080_output/n100.r06.s080.fq1.fastq" "n100.r06.s080_output/n100.r06.s080.fq2.fastq" | samtools view -bS - > "n100.r06.s080_output/n100.r06.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s080_output/n100.r06.s080.untrimmed.sorted.bam" "n100.r06.s080_output/n100.r06.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s080_output/n100.r06.s080.untrimmed.sorted.bam" -b "n100.r06.s080_output/n100.r06.s080.primers.bed" -p "n100.r06.s080_output/n100.r06.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" "n100.r06.s080_output/n100.r06.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s080_output/n100.r06.s080.reference.fas" "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" > "n100.r06.s080_output/n100.r06.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s080_output/n100.r06.s080.reference.fas" --call-indels "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" > "n100.r06.s080_output/n100.r06.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s080_output/n100.r06.s080.trimmed.sorted.bam" > "n100.r06.s080_output/n100.r06.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s080_output/n100.r06.s080.depth.txt" "n100.r06.s080_output/n100.r06.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s080_output/n100.r06.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s080_output/n100.r06.s080.reference.fas" | bcftools consensus -m "n100.r06.s080_output/n100.r06.s080.low_depth.tsv" tmp.vcf.gz > "n100.r06.s080_output/n100.r06.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:110282814ae07dee68b8d154a5a22efac9c2831789541821c452309396770ed7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.4MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:12 scheduler task 4924e592 (flow b7f697a6): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s080.tar.gz resources {}
2021/07/08 17:12:12  ->  n100.r06.s080.Main.cp_out_file b7f697a6 exec extern s3://niema-test/n100/r06/n100.r06.s080.tar.gz 35.7MiB
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:12 scheduler task 69182bd0 (flow 73004c68): transferring output (try 0): started
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloaded val<.=da195187 35.4MiB>
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloaded val<.=1766711f 35.4MiB>
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloaded list<val<.=84e29f2b 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task b76e0131 (flow bd79a373): unloading (try 0): successful, next state: complete
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:12  <-  n100.r06.s003.Main.out_file bd79a373 ok     exec 4m56s 35.7MiB
2021/07/08 17:12:12 n100.r06.s003.Main.out_file bd79a373 n100/r06/n100.r06.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:095c25c1010eee76e534c414e4327cbc914b745c0cbd05d654613592c5926021
	sha256:bd79a373b72595bf51ce0fbeeba912eab54d65828e6bc3a30e78c01ab48887d4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b76e0131f81ea61dbf8d71b4fc34a630b64b502a74c8d46481363020a2d474c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s003_output"
	    wget -O "n100.r06.s003_output/n100.r06.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s003_output/n100.r06.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s003_output/n100.r06.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s003_output/n100.r06.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s003_output/n100.r06.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s003_output/n100.r06.s003.reference.fas" "n100.r06.s003_output/n100.r06.s003.fq1.fastq" "n100.r06.s003_output/n100.r06.s003.fq2.fastq" | samtools view -bS - > "n100.r06.s003_output/n100.r06.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s003_output/n100.r06.s003.untrimmed.sorted.bam" "n100.r06.s003_output/n100.r06.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s003_output/n100.r06.s003.untrimmed.sorted.bam" -b "n100.r06.s003_output/n100.r06.s003.primers.bed" -p "n100.r06.s003_output/n100.r06.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" "n100.r06.s003_output/n100.r06.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s003_output/n100.r06.s003.reference.fas" "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" > "n100.r06.s003_output/n100.r06.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s003_output/n100.r06.s003.reference.fas" --call-indels "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" > "n100.r06.s003_output/n100.r06.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s003_output/n100.r06.s003.trimmed.sorted.bam" > "n100.r06.s003_output/n100.r06.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s003_output/n100.r06.s003.depth.txt" "n100.r06.s003_output/n100.r06.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s003_output/n100.r06.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s003_output/n100.r06.s003.reference.fas" | bcftools consensus -m "n100.r06.s003_output/n100.r06.s003.low_depth.tsv" tmp.vcf.gz > "n100.r06.s003_output/n100.r06.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:84e29f2bbc3a375d1678425a8015ed350f7a6ee92394d38b6d974fe64707283d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.7MiB max=128.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 17:12:12 scheduler task 89553257 (flow d06f9fb8): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s003.tar.gz resources {}
2021/07/08 17:12:12  ->  n100.r06.s003.Main.cp_out_file d06f9fb8 exec extern s3://niema-test/n100/r06/n100.r06.s003.tar.gz 35.7MiB
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloading (try 0): started
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloading list<val<.=3701d7cf 35.8MiB> 35.8MiB>
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloading val<.=15fe6e2b 35.4MiB>
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloading val<.=4623c3cb 35.4MiB>
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:12 scheduler task 5a7c1684 (flow 02d78e7e): transferring output (try 0): started
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloaded list<val<.=39cd1a90 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloaded val<.=c08b227e 35.4MiB>
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloaded val<.=b70d074e 35.4MiB>
2021/07/08 17:12:12 scheduler task e67335ac (flow bad69a68): unloading (try 0): successful, next state: complete
2021/07/08 17:12:12  <-  n100.r06.s009.Main.out_file bad69a68 ok     exec 4m59s 35.7MiB
2021/07/08 17:12:12 n100.r06.s009.Main.out_file bad69a68 n100/r06/n100.r06.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f813d518bcb09710b6da6b184737dbf6c93ab9f2b150aea08f62404ae7f879d3
	sha256:bad69a6846046e03e66473ba9b4ce3d6063f54c34b16f7c0cc8cb22cf8af0192
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e67335ac8f008388811bb022e63800f8864714b1c35a0a86356d8f58d4e9664d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s009_output"
	    wget -O "n100.r06.s009_output/n100.r06.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s009_output/n100.r06.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s009_output/n100.r06.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s009_output/n100.r06.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s009_output/n100.r06.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s009_output/n100.r06.s009.reference.fas" "n100.r06.s009_output/n100.r06.s009.fq1.fastq" "n100.r06.s009_output/n100.r06.s009.fq2.fastq" | samtools view -bS - > "n100.r06.s009_output/n100.r06.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s009_output/n100.r06.s009.untrimmed.sorted.bam" "n100.r06.s009_output/n100.r06.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s009_output/n100.r06.s009.untrimmed.sorted.bam" -b "n100.r06.s009_output/n100.r06.s009.primers.bed" -p "n100.r06.s009_output/n100.r06.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" "n100.r06.s009_output/n100.r06.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s009_output/n100.r06.s009.reference.fas" "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" > "n100.r06.s009_output/n100.r06.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s009_output/n100.r06.s009.reference.fas" --call-indels "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" > "n100.r06.s009_output/n100.r06.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s009_output/n100.r06.s009.trimmed.sorted.bam" > "n100.r06.s009_output/n100.r06.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s009_output/n100.r06.s009.depth.txt" "n100.r06.s009_output/n100.r06.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s009_output/n100.r06.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s009_output/n100.r06.s009.reference.fas" | bcftools consensus -m "n100.r06.s009_output/n100.r06.s009.low_depth.tsv" tmp.vcf.gz > "n100.r06.s009_output/n100.r06.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:39cd1a905a380def882408691a977caf33916456669453dd7a69da825551b4fe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.0MiB max=126.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:12 scheduler task 336f3c0e (flow a7d0ac90): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s009.tar.gz resources {}
2021/07/08 17:12:12  ->  n100.r06.s009.Main.cp_out_file a7d0ac90 exec extern s3://niema-test/n100/r06/n100.r06.s009.tar.gz 35.7MiB
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloading (try 0): started
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloading list<val<.=9bbb3517 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloading val<.=bdddbf65 35.4MiB>
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloading val<.=85609160 35.4MiB>
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloaded val<.=4623c3cb 35.4MiB>
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloaded list<val<.=3701d7cf 35.8MiB> 35.8MiB>
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloaded val<.=15fe6e2b 35.4MiB>
2021/07/08 17:12:12 scheduler task d3fe6c76 (flow b67385b5): unloading (try 0): successful, next state: complete
2021/07/08 17:12:12  <-  n100.r06.s089.Main.out_file b67385b5 ok     exec 4m59s 35.8MiB
2021/07/08 17:12:12 n100.r06.s089.Main.out_file b67385b5 n100/r06/n100.r06.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4872ebb18dbbb19dc62abbc957842c6a7890d782ea8b1a6ae1aec3af93261e18
	sha256:b67385b50fdaa85cdf99d9496e1cb95379d75d34c92d753daeed235ac7f1cb44
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3fe6c7676b60b27988a28c405ddcb1e0f66442e7c019ae9b913543b3b522471
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s089_output"
	    wget -O "n100.r06.s089_output/n100.r06.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s089_output/n100.r06.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s089_output/n100.r06.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s089_output/n100.r06.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s089_output/n100.r06.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s089_output/n100.r06.s089.reference.fas" "n100.r06.s089_output/n100.r06.s089.fq1.fastq" "n100.r06.s089_output/n100.r06.s089.fq2.fastq" | samtools view -bS - > "n100.r06.s089_output/n100.r06.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s089_output/n100.r06.s089.untrimmed.sorted.bam" "n100.r06.s089_output/n100.r06.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s089_output/n100.r06.s089.untrimmed.sorted.bam" -b "n100.r06.s089_output/n100.r06.s089.primers.bed" -p "n100.r06.s089_output/n100.r06.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" "n100.r06.s089_output/n100.r06.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s089_output/n100.r06.s089.reference.fas" "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" > "n100.r06.s089_output/n100.r06.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s089_output/n100.r06.s089.reference.fas" --call-indels "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" > "n100.r06.s089_output/n100.r06.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s089_output/n100.r06.s089.trimmed.sorted.bam" > "n100.r06.s089_output/n100.r06.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s089_output/n100.r06.s089.depth.txt" "n100.r06.s089_output/n100.r06.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s089_output/n100.r06.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s089_output/n100.r06.s089.reference.fas" | bcftools consensus -m "n100.r06.s089_output/n100.r06.s089.low_depth.tsv" tmp.vcf.gz > "n100.r06.s089_output/n100.r06.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3701d7cf3f06ee305c2175bf143e67826f8f7319211f757e7a0df891a116c8d9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.4MiB max=132.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:12 scheduler task d694175a (flow a63c0590): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s089.tar.gz resources {}
2021/07/08 17:12:12  ->  n100.r06.s089.Main.cp_out_file a63c0590 exec extern s3://niema-test/n100/r06/n100.r06.s089.tar.gz 35.8MiB
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloaded val<.=bdddbf65 35.4MiB>
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloaded val<.=85609160 35.4MiB>
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloaded list<val<.=9bbb3517 35.7MiB> 35.7MiB>
2021/07/08 17:12:12 scheduler task 626618af (flow 3d47e552): unloading (try 0): successful, next state: complete
2021/07/08 17:12:12  <-  n100.r06.s005.Main.out_file 3d47e552 ok     exec 4m54s 35.7MiB
2021/07/08 17:12:12 n100.r06.s005.Main.out_file 3d47e552 n100/r06/n100.r06.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2ad89c0a5c53e6fef7b96c93b68ddf065fab323faf0a1b63e43a415dd2aa2114
	sha256:3d47e552651e174bf5eb1e6ed46af03ae070bee25f97cb6a3467476fdfb88d98
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/626618af347c10d4f3b0b8c1235b3da76b3f1165023759e822ffcac940c75def
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s005_output"
	    wget -O "n100.r06.s005_output/n100.r06.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s005_output/n100.r06.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s005_output/n100.r06.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s005_output/n100.r06.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s005_output/n100.r06.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s005_output/n100.r06.s005.reference.fas" "n100.r06.s005_output/n100.r06.s005.fq1.fastq" "n100.r06.s005_output/n100.r06.s005.fq2.fastq" | samtools view -bS - > "n100.r06.s005_output/n100.r06.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s005_output/n100.r06.s005.untrimmed.sorted.bam" "n100.r06.s005_output/n100.r06.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s005_output/n100.r06.s005.untrimmed.sorted.bam" -b "n100.r06.s005_output/n100.r06.s005.primers.bed" -p "n100.r06.s005_output/n100.r06.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" "n100.r06.s005_output/n100.r06.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s005_output/n100.r06.s005.reference.fas" "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" > "n100.r06.s005_output/n100.r06.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s005_output/n100.r06.s005.reference.fas" --call-indels "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" > "n100.r06.s005_output/n100.r06.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s005_output/n100.r06.s005.trimmed.sorted.bam" > "n100.r06.s005_output/n100.r06.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s005_output/n100.r06.s005.depth.txt" "n100.r06.s005_output/n100.r06.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s005_output/n100.r06.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s005_output/n100.r06.s005.reference.fas" | bcftools consensus -m "n100.r06.s005_output/n100.r06.s005.low_depth.tsv" tmp.vcf.gz > "n100.r06.s005_output/n100.r06.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9bbb3517189c0bba2939aa98699be1687ac9053ac0bb841db1e88ed330781784 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=128.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:12 scheduler task cf6f7fea (flow 8496f21d): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s005.tar.gz resources {}
2021/07/08 17:12:12  ->  n100.r06.s005.Main.cp_out_file 8496f21d exec extern s3://niema-test/n100/r06/n100.r06.s005.tar.gz 35.7MiB
2021/07/08 17:12:12 scheduler task 0d8b3e97 (flow ec2e1134): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:12 scheduler task 0d8b3e97 (flow ec2e1134): promoting objects (try 0): started
2021/07/08 17:12:12 scheduler task 0d8b3e97 (flow ec2e1134): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:12 scheduler task 0d8b3e97 (flow ec2e1134): retrieving diagnostic output (try 0): started
2021/07/08 17:12:12 scheduler task 0d8b3e97 (flow ec2e1134): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:12 scheduler task 0d8b3e97 (flow ec2e1134): retrieving result (try 0): started
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): transferring output (try 0): started
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): promoting objects (try 0): started
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): retrieving diagnostic output (try 0): started
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloading (try 0): started
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloading list<val<.=679f8c09 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloading val<.=141eaed2 35.4MiB>
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloading val<.=154155f3 35.4MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): retrieving result (try 0): started
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloaded val<.=154155f3 35.4MiB>
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloaded list<val<.=679f8c09 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloaded val<.=141eaed2 35.4MiB>
2021/07/08 17:12:13 scheduler task 69182bd0 (flow 73004c68): unloading (try 0): successful, next state: complete
2021/07/08 17:12:13  <-  n100.r06.s028.Main.out_file 73004c68 ok     exec 4m54s 35.7MiB
2021/07/08 17:12:13 n100.r06.s028.Main.out_file 73004c68 n100/r06/n100.r06.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aeb19f87c3166e1033a96b94f833e8dac6a72ff9c9ccb155d29ee102d99ca6c8
	sha256:73004c68d8e012a0aa82da67ce64fc73ac666feb1fa7c53b2dfba1575ea2c231
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/69182bd08965d07bba9504d4bfa72f8a2bc3432b2116187267dc8560ec8e3f25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s028_output"
	    wget -O "n100.r06.s028_output/n100.r06.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s028_output/n100.r06.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s028_output/n100.r06.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s028_output/n100.r06.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s028_output/n100.r06.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s028_output/n100.r06.s028.reference.fas" "n100.r06.s028_output/n100.r06.s028.fq1.fastq" "n100.r06.s028_output/n100.r06.s028.fq2.fastq" | samtools view -bS - > "n100.r06.s028_output/n100.r06.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s028_output/n100.r06.s028.untrimmed.sorted.bam" "n100.r06.s028_output/n100.r06.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s028_output/n100.r06.s028.untrimmed.sorted.bam" -b "n100.r06.s028_output/n100.r06.s028.primers.bed" -p "n100.r06.s028_output/n100.r06.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" "n100.r06.s028_output/n100.r06.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s028_output/n100.r06.s028.reference.fas" "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" > "n100.r06.s028_output/n100.r06.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s028_output/n100.r06.s028.reference.fas" --call-indels "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" > "n100.r06.s028_output/n100.r06.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s028_output/n100.r06.s028.trimmed.sorted.bam" > "n100.r06.s028_output/n100.r06.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s028_output/n100.r06.s028.depth.txt" "n100.r06.s028_output/n100.r06.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s028_output/n100.r06.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s028_output/n100.r06.s028.reference.fas" | bcftools consensus -m "n100.r06.s028_output/n100.r06.s028.low_depth.tsv" tmp.vcf.gz > "n100.r06.s028_output/n100.r06.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:679f8c09ab3cbc8055a70a727ccb3a8a46992747b29b0578a1aada5c10828d66 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:13 scheduler task eec4c0fd (flow 62058cb6): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s028.tar.gz resources {}
2021/07/08 17:12:13  ->  n100.r06.s028.Main.cp_out_file 62058cb6 exec extern s3://niema-test/n100/r06/n100.r06.s028.tar.gz 35.7MiB
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloading (try 0): started
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloading list<val<.=117938ba 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloading val<.=ac281127 35.4MiB>
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloading val<.=04157c4a 35.4MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): transferring output (try 0): started
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloaded val<.=04157c4a 35.4MiB>
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloaded list<val<.=117938ba 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloaded val<.=ac281127 35.4MiB>
2021/07/08 17:12:13 scheduler task 5a7c1684 (flow 02d78e7e): unloading (try 0): successful, next state: complete
2021/07/08 17:12:13  <-  n100.r06.s094.Main.out_file 02d78e7e ok     exec 4m55s 35.7MiB
2021/07/08 17:12:13 n100.r06.s094.Main.out_file 02d78e7e n100/r06/n100.r06.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ccd681ecd4e70023b285677811093f8b57aaf95b0cbdfcb663bb9059c9840a67
	sha256:02d78e7ebe1e01c98d3d0129d37d1b9b7d87a3e1afa89f317d8d29e23954bf88
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a7c1684a56d69b5182de7afa3293160a7e69ea5f78a07fff30e32e4ea77375e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s094_output"
	    wget -O "n100.r06.s094_output/n100.r06.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s094_output/n100.r06.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s094_output/n100.r06.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s094_output/n100.r06.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s094_output/n100.r06.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s094_output/n100.r06.s094.reference.fas" "n100.r06.s094_output/n100.r06.s094.fq1.fastq" "n100.r06.s094_output/n100.r06.s094.fq2.fastq" | samtools view -bS - > "n100.r06.s094_output/n100.r06.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s094_output/n100.r06.s094.untrimmed.sorted.bam" "n100.r06.s094_output/n100.r06.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s094_output/n100.r06.s094.untrimmed.sorted.bam" -b "n100.r06.s094_output/n100.r06.s094.primers.bed" -p "n100.r06.s094_output/n100.r06.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" "n100.r06.s094_output/n100.r06.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s094_output/n100.r06.s094.reference.fas" "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" > "n100.r06.s094_output/n100.r06.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s094_output/n100.r06.s094.reference.fas" --call-indels "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" > "n100.r06.s094_output/n100.r06.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s094_output/n100.r06.s094.trimmed.sorted.bam" > "n100.r06.s094_output/n100.r06.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s094_output/n100.r06.s094.depth.txt" "n100.r06.s094_output/n100.r06.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s094_output/n100.r06.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s094_output/n100.r06.s094.reference.fas" | bcftools consensus -m "n100.r06.s094_output/n100.r06.s094.low_depth.tsv" tmp.vcf.gz > "n100.r06.s094_output/n100.r06.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:117938ba3c95283a26655c264d524011304f6c9bcd9da68f75fc45638a862077 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=129.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:13 scheduler task a3432d1e (flow 326d100a): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s094.tar.gz resources {}
2021/07/08 17:12:13  ->  n100.r06.s094.Main.cp_out_file 326d100a exec extern s3://niema-test/n100/r06/n100.r06.s094.tar.gz 35.7MiB
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): promoting objects (try 0): started
2021/07/08 17:12:13 scheduler task 07cb2082 (flow eb65e852): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:20a927e6675fe207d836becd9da51327f3009c510d1ee3017a30e310c5595c51 -> s3://niema-test/n100/r06/n100.r06.s020.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:13  <-  n100.r06.s020.Main.cp_out_file eb65e852 ok   extern 0s 35.7MiB
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloading (try 0): started
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloading list<val<.=60703764 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloading val<.=0ae454d7 35.4MiB>
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloading val<.=a52241a6 35.4MiB>
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): retrieving diagnostic output (try 0): started
2021/07/08 17:12:13 scheduler task 4924e592 (flow b7f697a6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:110282814ae07dee68b8d154a5a22efac9c2831789541821c452309396770ed7 -> s3://niema-test/n100/r06/n100.r06.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:13  <-  n100.r06.s080.Main.cp_out_file b7f697a6 ok   extern 0s 35.7MiB
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloaded val<.=0ae454d7 35.4MiB>
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloaded list<val<.=60703764 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloaded val<.=a52241a6 35.4MiB>
2021/07/08 17:12:13 scheduler task 0d8b3e97 (flow ec2e1134): unloading (try 0): successful, next state: complete
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:13  <-  n100.r06.s057.Main.out_file ec2e1134 ok     exec 4m55s 35.7MiB
2021/07/08 17:12:13 n100.r06.s057.Main.out_file ec2e1134 n100/r06/n100.r06.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db6743a78974d0ae63845a6e9d0bf1d2eb1eacab6dc50d83858a6ccdae74e93c
	sha256:ec2e11343170f79ba719cadecc0bc4bc204f79420bc1f8b896cd54af1b7f60c4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d8b3e97c5ba136b6a89bfc3cdfc1baa98d0b5190168bea385b649b504d30773
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s057_output"
	    wget -O "n100.r06.s057_output/n100.r06.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s057_output/n100.r06.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s057_output/n100.r06.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s057_output/n100.r06.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s057_output/n100.r06.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s057_output/n100.r06.s057.reference.fas" "n100.r06.s057_output/n100.r06.s057.fq1.fastq" "n100.r06.s057_output/n100.r06.s057.fq2.fastq" | samtools view -bS - > "n100.r06.s057_output/n100.r06.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s057_output/n100.r06.s057.untrimmed.sorted.bam" "n100.r06.s057_output/n100.r06.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s057_output/n100.r06.s057.untrimmed.sorted.bam" -b "n100.r06.s057_output/n100.r06.s057.primers.bed" -p "n100.r06.s057_output/n100.r06.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" "n100.r06.s057_output/n100.r06.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s057_output/n100.r06.s057.reference.fas" "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" > "n100.r06.s057_output/n100.r06.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s057_output/n100.r06.s057.reference.fas" --call-indels "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" > "n100.r06.s057_output/n100.r06.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s057_output/n100.r06.s057.trimmed.sorted.bam" > "n100.r06.s057_output/n100.r06.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s057_output/n100.r06.s057.depth.txt" "n100.r06.s057_output/n100.r06.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s057_output/n100.r06.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s057_output/n100.r06.s057.reference.fas" | bcftools consensus -m "n100.r06.s057_output/n100.r06.s057.low_depth.tsv" tmp.vcf.gz > "n100.r06.s057_output/n100.r06.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:60703764c2f2157d56227adccc09eee1dd6c565a406e1410a352a1cb241c4916 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=126.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 17:12:13 scheduler task ce95b70b (flow 09487d87): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s057.tar.gz resources {}
2021/07/08 17:12:13  ->  n100.r06.s057.Main.cp_out_file 09487d87 exec extern s3://niema-test/n100/r06/n100.r06.s057.tar.gz 35.7MiB
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): retrieving result (try 0): started
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:13 scheduler task 1727ff25 (flow 05553cfd): transferring output (try 0): started
2021/07/08 17:12:13 scheduler task 89553257 (flow d06f9fb8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:84e29f2bbc3a375d1678425a8015ed350f7a6ee92394d38b6d974fe64707283d -> s3://niema-test/n100/r06/n100.r06.s003.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:13  <-  n100.r06.s003.Main.cp_out_file d06f9fb8 ok   extern 0s 35.7MiB
2021/07/08 17:12:13 scheduler task 336f3c0e (flow a7d0ac90): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:39cd1a905a380def882408691a977caf33916456669453dd7a69da825551b4fe -> s3://niema-test/n100/r06/n100.r06.s009.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:13  <-  n100.r06.s009.Main.cp_out_file a7d0ac90 ok   extern 0s 35.7MiB
2021/07/08 17:12:13 scheduler task d694175a (flow a63c0590): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3701d7cf3f06ee305c2175bf143e67826f8f7319211f757e7a0df891a116c8d9 -> s3://niema-test/n100/r06/n100.r06.s089.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:13  <-  n100.r06.s089.Main.cp_out_file a63c0590 ok   extern 0s 35.8MiB
2021/07/08 17:12:13 scheduler task cf6f7fea (flow 8496f21d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9bbb3517189c0bba2939aa98699be1687ac9053ac0bb841db1e88ed330781784 -> s3://niema-test/n100/r06/n100.r06.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:13  <-  n100.r06.s005.Main.cp_out_file 8496f21d ok   extern 0s 35.7MiB
2021/07/08 17:12:13 scheduler task 3c99934a (flow 26782be1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:13 scheduler task 3c99934a (flow 26782be1): promoting objects (try 0): started
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloading (try 0): started
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloading list<val<.=a214db06 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloading val<.=6db8bff7 35.4MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloading val<.=0adc070d 35.4MiB>
2021/07/08 17:12:13 scheduler task 3c99934a (flow 26782be1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:13 scheduler task 3c99934a (flow 26782be1): retrieving diagnostic output (try 0): started
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloaded val<.=0adc070d 35.4MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloaded list<val<.=a214db06 35.7MiB> 35.7MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloaded val<.=6db8bff7 35.4MiB>
2021/07/08 17:12:13 scheduler task 36bad443 (flow f9e00fa2): unloading (try 0): successful, next state: complete
2021/07/08 17:12:14  <-  n100.r06.s062.Main.out_file f9e00fa2 ok     exec 5m10s 35.7MiB
2021/07/08 17:12:14 n100.r06.s062.Main.out_file f9e00fa2 n100/r06/n100.r06.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a102214a714b4ff2cdb3dfaf70b5508c8d97d95370ce5572df9a4e005154d2b
	sha256:f9e00fa28346d4a5c12e128aca53983be3ee0acfcbf50e93d01b00cd64313c79
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36bad4434e5b2c420ba9d3aa04a167f437dfa2aa46303dac3009866d55535923
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s062_output"
	    wget -O "n100.r06.s062_output/n100.r06.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s062_output/n100.r06.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s062_output/n100.r06.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s062_output/n100.r06.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s062_output/n100.r06.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s062_output/n100.r06.s062.reference.fas" "n100.r06.s062_output/n100.r06.s062.fq1.fastq" "n100.r06.s062_output/n100.r06.s062.fq2.fastq" | samtools view -bS - > "n100.r06.s062_output/n100.r06.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s062_output/n100.r06.s062.untrimmed.sorted.bam" "n100.r06.s062_output/n100.r06.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s062_output/n100.r06.s062.untrimmed.sorted.bam" -b "n100.r06.s062_output/n100.r06.s062.primers.bed" -p "n100.r06.s062_output/n100.r06.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" "n100.r06.s062_output/n100.r06.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s062_output/n100.r06.s062.reference.fas" "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" > "n100.r06.s062_output/n100.r06.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s062_output/n100.r06.s062.reference.fas" --call-indels "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" > "n100.r06.s062_output/n100.r06.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s062_output/n100.r06.s062.trimmed.sorted.bam" > "n100.r06.s062_output/n100.r06.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s062_output/n100.r06.s062.depth.txt" "n100.r06.s062_output/n100.r06.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s062_output/n100.r06.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s062_output/n100.r06.s062.reference.fas" | bcftools consensus -m "n100.r06.s062_output/n100.r06.s062.low_depth.tsv" tmp.vcf.gz > "n100.r06.s062_output/n100.r06.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a214db06b18b034d5d19e848619cf468e695f9e1477fe9f2c68e4c3360b2b3a0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=126.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:12:14 scheduler task be033515 (flow b22600e6): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s062.tar.gz resources {}
2021/07/08 17:12:14  ->  n100.r06.s062.Main.cp_out_file b22600e6 exec extern s3://niema-test/n100/r06/n100.r06.s062.tar.gz 35.7MiB
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): retrieving result (try 0): started
2021/07/08 17:12:14 scheduler task a3432d1e (flow 326d100a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:117938ba3c95283a26655c264d524011304f6c9bcd9da68f75fc45638a862077 -> s3://niema-test/n100/r06/n100.r06.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:14  <-  n100.r06.s094.Main.cp_out_file 326d100a ok   extern 0s 35.7MiB
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): transferring output (try 0): started
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): promoting objects (try 0): started
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): retrieving diagnostic output (try 0): started
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloading (try 0): started
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloading list<val<.=d07a045c 35.8MiB> 35.8MiB>
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloading val<.=d49b0dd0 35.4MiB>
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloading val<.=11e544b0 35.4MiB>
2021/07/08 17:12:14 scheduler task eec4c0fd (flow 62058cb6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:679f8c09ab3cbc8055a70a727ccb3a8a46992747b29b0578a1aada5c10828d66 -> s3://niema-test/n100/r06/n100.r06.s028.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:14  <-  n100.r06.s028.Main.cp_out_file 62058cb6 ok   extern 0s 35.7MiB
2021/07/08 17:12:14 scheduler task ce95b70b (flow 09487d87): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:60703764c2f2157d56227adccc09eee1dd6c565a406e1410a352a1cb241c4916 -> s3://niema-test/n100/r06/n100.r06.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:14  <-  n100.r06.s057.Main.cp_out_file 09487d87 ok   extern 0s 35.7MiB
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloaded list<val<.=d07a045c 35.8MiB> 35.8MiB>
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloaded val<.=11e544b0 35.4MiB>
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloaded val<.=d49b0dd0 35.4MiB>
2021/07/08 17:12:14 scheduler task 1727ff25 (flow 05553cfd): unloading (try 0): successful, next state: complete
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): retrieving result (try 0): started
2021/07/08 17:12:14  <-  n100.r06.s016.Main.out_file 05553cfd ok     exec 4m55s 35.8MiB
2021/07/08 17:12:14 n100.r06.s016.Main.out_file 05553cfd n100/r06/n100.r06.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6110de55ac6647a078db7787e425494b9cc856a6343468b7b3bc150170910d0c
	sha256:05553cfda685013c2424b97385f8724eb5ecfd2dc11b333832f407b2900d168a
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1727ff258c4d1df84901bda66cce1994b5be7651109d926be9659811ea09bdd0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s016_output"
	    wget -O "n100.r06.s016_output/n100.r06.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s016_output/n100.r06.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s016_output/n100.r06.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s016_output/n100.r06.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s016_output/n100.r06.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s016_output/n100.r06.s016.reference.fas" "n100.r06.s016_output/n100.r06.s016.fq1.fastq" "n100.r06.s016_output/n100.r06.s016.fq2.fastq" | samtools view -bS - > "n100.r06.s016_output/n100.r06.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s016_output/n100.r06.s016.untrimmed.sorted.bam" "n100.r06.s016_output/n100.r06.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s016_output/n100.r06.s016.untrimmed.sorted.bam" -b "n100.r06.s016_output/n100.r06.s016.primers.bed" -p "n100.r06.s016_output/n100.r06.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" "n100.r06.s016_output/n100.r06.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s016_output/n100.r06.s016.reference.fas" "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" > "n100.r06.s016_output/n100.r06.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s016_output/n100.r06.s016.reference.fas" --call-indels "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" > "n100.r06.s016_output/n100.r06.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s016_output/n100.r06.s016.trimmed.sorted.bam" > "n100.r06.s016_output/n100.r06.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s016_output/n100.r06.s016.depth.txt" "n100.r06.s016_output/n100.r06.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s016_output/n100.r06.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s016_output/n100.r06.s016.reference.fas" | bcftools consensus -m "n100.r06.s016_output/n100.r06.s016.low_depth.tsv" tmp.vcf.gz > "n100.r06.s016_output/n100.r06.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d07a045c60857ebbc0850ed111644eebeb1ecde8a0f312faf2635ea410734944 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=127.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:14 scheduler task 439913f7 (flow 8781ead5): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s016.tar.gz resources {}
2021/07/08 17:12:14  ->  n100.r06.s016.Main.cp_out_file 8781ead5 exec extern s3://niema-test/n100/r06/n100.r06.s016.tar.gz 35.8MiB
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): transferring output (try 0): started
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloading (try 0): started
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloading list<val<.=e2b0e572 35.7MiB> 35.7MiB>
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloading val<.=cd99cb50 35.4MiB>
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloading val<.=b326c308 35.4MiB>
2021/07/08 17:12:14 scheduler task be033515 (flow b22600e6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a214db06b18b034d5d19e848619cf468e695f9e1477fe9f2c68e4c3360b2b3a0 -> s3://niema-test/n100/r06/n100.r06.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:14  <-  n100.r06.s062.Main.cp_out_file b22600e6 ok   extern 0s 35.7MiB
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloaded list<val<.=e2b0e572 35.7MiB> 35.7MiB>
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloaded val<.=cd99cb50 35.4MiB>
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloaded val<.=b326c308 35.4MiB>
2021/07/08 17:12:14 scheduler task 3c99934a (flow 26782be1): unloading (try 0): successful, next state: complete
2021/07/08 17:12:14  <-  n100.r06.s049.Main.out_file 26782be1 ok     exec 5m1s 35.7MiB
2021/07/08 17:12:14 n100.r06.s049.Main.out_file 26782be1 n100/r06/n100.r06.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dc6d9be7f98210fadd5118fb18c65b9c129a13b04204e1ba17d07c72b504c60b
	sha256:26782be19236a292d86f98bc58a9bd78025c2adc30895bdb62c81c179b9d6c34
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3c99934a8efbc2b192c70c327c1163329b250763cf70c37945b6c9f5a2a1aaf7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s049_output"
	    wget -O "n100.r06.s049_output/n100.r06.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s049_output/n100.r06.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s049_output/n100.r06.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s049_output/n100.r06.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s049_output/n100.r06.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s049_output/n100.r06.s049.reference.fas" "n100.r06.s049_output/n100.r06.s049.fq1.fastq" "n100.r06.s049_output/n100.r06.s049.fq2.fastq" | samtools view -bS - > "n100.r06.s049_output/n100.r06.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s049_output/n100.r06.s049.untrimmed.sorted.bam" "n100.r06.s049_output/n100.r06.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s049_output/n100.r06.s049.untrimmed.sorted.bam" -b "n100.r06.s049_output/n100.r06.s049.primers.bed" -p "n100.r06.s049_output/n100.r06.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" "n100.r06.s049_output/n100.r06.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s049_output/n100.r06.s049.reference.fas" "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" > "n100.r06.s049_output/n100.r06.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s049_output/n100.r06.s049.reference.fas" --call-indels "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" > "n100.r06.s049_output/n100.r06.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s049_output/n100.r06.s049.trimmed.sorted.bam" > "n100.r06.s049_output/n100.r06.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s049_output/n100.r06.s049.depth.txt" "n100.r06.s049_output/n100.r06.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s049_output/n100.r06.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s049_output/n100.r06.s049.reference.fas" | bcftools consensus -m "n100.r06.s049_output/n100.r06.s049.low_depth.tsv" tmp.vcf.gz > "n100.r06.s049_output/n100.r06.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e2b0e57231ef05dcfd047fb33b26d7e90f254b5a955efceb526f3032d670c387 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.2MiB max=127.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:12:14 scheduler task 404d4cdd (flow ca452626): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s049.tar.gz resources {}
2021/07/08 17:12:14  ->  n100.r06.s049.Main.cp_out_file ca452626 exec extern s3://niema-test/n100/r06/n100.r06.s049.tar.gz 35.7MiB
2021/07/08 17:12:14 scheduler task 5234b714 (flow 7814bb1a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:14 scheduler task 5234b714 (flow 7814bb1a): promoting objects (try 0): started
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): unloading (try 0): started
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): unloading list<val<.=1aeb2117 35.7MiB> 35.7MiB>
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): unloading val<.=279aeb89 35.4MiB>
2021/07/08 17:12:14 scheduler task 70e83fb0 (flow f04fe471): unloading val<.=2549abaa 35.4MiB>
2021/07/08 17:12:14 scheduler task 5234b714 (flow 7814bb1a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:14 scheduler task 5234b714 (flow 7814bb1a): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task 70e83fb0 (flow f04fe471): unloaded list<val<.=1aeb2117 35.7MiB> 35.7MiB>
2021/07/08 17:12:15 scheduler task 70e83fb0 (flow f04fe471): unloaded val<.=2549abaa 35.4MiB>
2021/07/08 17:12:15 scheduler task 70e83fb0 (flow f04fe471): unloaded val<.=279aeb89 35.4MiB>
2021/07/08 17:12:15 scheduler task 70e83fb0 (flow f04fe471): unloading (try 0): successful, next state: complete
2021/07/08 17:12:15  <-  n100.r06.s031.Main.out_file f04fe471 ok     exec 4m56s 35.7MiB
2021/07/08 17:12:15 n100.r06.s031.Main.out_file f04fe471 n100/r06/n100.r06.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a5b8114560041952a347c5835c289fac2fe2c8ed5063be7e3d4abb1c55c4dc7
	sha256:f04fe471bc0a37c6ca6d4ab741814228999b2d6d32838f2fabd0c06544caeeb7
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/70e83fb000e6ecdf87f12e2a557413cde052334b1c2305a85d4ac6008bd20842
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s031_output"
	    wget -O "n100.r06.s031_output/n100.r06.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s031_output/n100.r06.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s031_output/n100.r06.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s031_output/n100.r06.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s031_output/n100.r06.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s031_output/n100.r06.s031.reference.fas" "n100.r06.s031_output/n100.r06.s031.fq1.fastq" "n100.r06.s031_output/n100.r06.s031.fq2.fastq" | samtools view -bS - > "n100.r06.s031_output/n100.r06.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s031_output/n100.r06.s031.untrimmed.sorted.bam" "n100.r06.s031_output/n100.r06.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s031_output/n100.r06.s031.untrimmed.sorted.bam" -b "n100.r06.s031_output/n100.r06.s031.primers.bed" -p "n100.r06.s031_output/n100.r06.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" "n100.r06.s031_output/n100.r06.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s031_output/n100.r06.s031.reference.fas" "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" > "n100.r06.s031_output/n100.r06.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s031_output/n100.r06.s031.reference.fas" --call-indels "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" > "n100.r06.s031_output/n100.r06.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s031_output/n100.r06.s031.trimmed.sorted.bam" > "n100.r06.s031_output/n100.r06.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s031_output/n100.r06.s031.depth.txt" "n100.r06.s031_output/n100.r06.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s031_output/n100.r06.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s031_output/n100.r06.s031.reference.fas" | bcftools consensus -m "n100.r06.s031_output/n100.r06.s031.low_depth.tsv" tmp.vcf.gz > "n100.r06.s031_output/n100.r06.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1aeb211785569319159d5b3580333cd9620211faaca9ecda81853d193b623037 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=132.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:15 scheduler task b7470c08 (flow 8e7dd802): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s031.tar.gz resources {}
2021/07/08 17:12:15  ->  n100.r06.s031.Main.cp_out_file 8e7dd802 exec extern s3://niema-test/n100/r06/n100.r06.s031.tar.gz 35.7MiB
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): transferring output (try 0): started
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task 439913f7 (flow 8781ead5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d07a045c60857ebbc0850ed111644eebeb1ecde8a0f312faf2635ea410734944 -> s3://niema-test/n100/r06/n100.r06.s016.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:15  <-  n100.r06.s016.Main.cp_out_file 8781ead5 ok   extern 0s 35.8MiB
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): transferring output (try 0): started
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task 404d4cdd (flow ca452626): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e2b0e57231ef05dcfd047fb33b26d7e90f254b5a955efceb526f3032d670c387 -> s3://niema-test/n100/r06/n100.r06.s049.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:15  <-  n100.r06.s049.Main.cp_out_file ca452626 ok   extern 0s 35.7MiB
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:15 scheduler task cbed6014 (flow 936d4ab9): transferring output (try 0): started
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): promoting objects (try 0): started
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task d21f5df2 (flow 398ccd9b): transferring output (try 0): started
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloading (try 0): started
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloading list<val<.=d407d1a2 35.8MiB> 35.8MiB>
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloading val<.=0c76f13d 35.4MiB>
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloading val<.=b2f24b95 35.4MiB>
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 828d1448 (flow 66f9b0f9): transferring output (try 0): started
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloaded list<val<.=d407d1a2 35.8MiB> 35.8MiB>
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloaded val<.=b2f24b95 35.4MiB>
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloaded val<.=0c76f13d 35.4MiB>
2021/07/08 17:12:15 scheduler task 5234b714 (flow 7814bb1a): unloading (try 0): successful, next state: complete
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): retrieving diagnostic output (try 0): started
2021/07/08 17:12:15 scheduler task 2c9167d6 (flow bfdc7ffb): transferring output (try 0): started
2021/07/08 17:12:15 scheduler task c2bb6acb (flow e34273b7): transferring output (try 0): started
2021/07/08 17:12:15  <-  n100.r06.s074.Main.out_file 7814bb1a ok     exec 4m57s 35.8MiB
2021/07/08 17:12:15 n100.r06.s074.Main.out_file 7814bb1a n100/r06/n100.r06.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:56cd1b8475e095e2a560aea611dde07a596e962912e081f62800602d4d0c175a
	sha256:7814bb1a6bd6c5690196ec0884d7ab2733543a0332d6fab65e522952bc108057
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5234b7141ed3b8da914516b479cd038627707bd299c091c77523968c6251a96b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s074_output"
	    wget -O "n100.r06.s074_output/n100.r06.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s074_output/n100.r06.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s074_output/n100.r06.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s074_output/n100.r06.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s074_output/n100.r06.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s074_output/n100.r06.s074.reference.fas" "n100.r06.s074_output/n100.r06.s074.fq1.fastq" "n100.r06.s074_output/n100.r06.s074.fq2.fastq" | samtools view -bS - > "n100.r06.s074_output/n100.r06.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s074_output/n100.r06.s074.untrimmed.sorted.bam" "n100.r06.s074_output/n100.r06.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s074_output/n100.r06.s074.untrimmed.sorted.bam" -b "n100.r06.s074_output/n100.r06.s074.primers.bed" -p "n100.r06.s074_output/n100.r06.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" "n100.r06.s074_output/n100.r06.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s074_output/n100.r06.s074.reference.fas" "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" > "n100.r06.s074_output/n100.r06.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s074_output/n100.r06.s074.reference.fas" --call-indels "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" > "n100.r06.s074_output/n100.r06.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s074_output/n100.r06.s074.trimmed.sorted.bam" > "n100.r06.s074_output/n100.r06.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s074_output/n100.r06.s074.depth.txt" "n100.r06.s074_output/n100.r06.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s074_output/n100.r06.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s074_output/n100.r06.s074.reference.fas" | bcftools consensus -m "n100.r06.s074_output/n100.r06.s074.low_depth.tsv" tmp.vcf.gz > "n100.r06.s074_output/n100.r06.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d407d1a2d9ec42150b50ae1565ffcc0a51a871c0e7f8bbfe47a75aa45a58e3cb 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=127.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:15 scheduler task 5f6616ec (flow 65d6be24): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s074.tar.gz resources {}
2021/07/08 17:12:15  ->  n100.r06.s074.Main.cp_out_file 65d6be24 exec extern s3://niema-test/n100/r06/n100.r06.s074.tar.gz 35.8MiB
2021/07/08 17:12:15 scheduler task b7470c08 (flow 8e7dd802): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1aeb211785569319159d5b3580333cd9620211faaca9ecda81853d193b623037 -> s3://niema-test/n100/r06/n100.r06.s031.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:15  <-  n100.r06.s031.Main.cp_out_file 8e7dd802 ok   extern 0s 35.7MiB
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloading (try 0): started
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloading list<val<.=142c42ca 35.7MiB> 35.7MiB>
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloading val<.=16f00fec 35.4MiB>
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloading val<.=49ee3fa9 35.4MiB>
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): retrieving result (try 0): started
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloaded list<val<.=142c42ca 35.7MiB> 35.7MiB>
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloaded val<.=16f00fec 35.4MiB>
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloaded val<.=49ee3fa9 35.4MiB>
2021/07/08 17:12:15 scheduler task 24761a03 (flow 4e887abd): unloading (try 0): successful, next state: complete
2021/07/08 17:12:15  <-  n100.r06.s040.Main.out_file 4e887abd ok     exec 4m57s 35.7MiB
2021/07/08 17:12:15 n100.r06.s040.Main.out_file 4e887abd n100/r06/n100.r06.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07c12639a3ec6d6224f73babdf253a939457da41a50941afa9544058cbd086ae
	sha256:4e887abde78d77f62860bcf37a02d85f3eab2654fcf711a086d561f619762c15
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/24761a031a52a6afd02b221663c16bbd43c138ee70042e33d4a6a07ddb425232
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s040_output"
	    wget -O "n100.r06.s040_output/n100.r06.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s040_output/n100.r06.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s040_output/n100.r06.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s040_output/n100.r06.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s040_output/n100.r06.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s040_output/n100.r06.s040.reference.fas" "n100.r06.s040_output/n100.r06.s040.fq1.fastq" "n100.r06.s040_output/n100.r06.s040.fq2.fastq" | samtools view -bS - > "n100.r06.s040_output/n100.r06.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s040_output/n100.r06.s040.untrimmed.sorted.bam" "n100.r06.s040_output/n100.r06.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s040_output/n100.r06.s040.untrimmed.sorted.bam" -b "n100.r06.s040_output/n100.r06.s040.primers.bed" -p "n100.r06.s040_output/n100.r06.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" "n100.r06.s040_output/n100.r06.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s040_output/n100.r06.s040.reference.fas" "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" > "n100.r06.s040_output/n100.r06.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s040_output/n100.r06.s040.reference.fas" --call-indels "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" > "n100.r06.s040_output/n100.r06.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s040_output/n100.r06.s040.trimmed.sorted.bam" > "n100.r06.s040_output/n100.r06.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s040_output/n100.r06.s040.depth.txt" "n100.r06.s040_output/n100.r06.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s040_output/n100.r06.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s040_output/n100.r06.s040.reference.fas" | bcftools consensus -m "n100.r06.s040_output/n100.r06.s040.low_depth.tsv" tmp.vcf.gz > "n100.r06.s040_output/n100.r06.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:142c42caf443f361419df3985bed362a1a0408829009e429f55480e8f2437e73 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:15 scheduler task 8ab2f441 (flow 8023b4cb): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s040.tar.gz resources {}
2021/07/08 17:12:15  ->  n100.r06.s040.Main.cp_out_file 8023b4cb exec extern s3://niema-test/n100/r06/n100.r06.s040.tar.gz 35.7MiB
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:15 scheduler task 30d52cd1 (flow 965617d8): transferring output (try 0): started
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloading (try 0): started
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloading list<val<.=a641f18c 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloading val<.=3abcdebc 35.4MiB>
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloading val<.=be5b0846 35.4MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloading (try 0): started
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloading list<val<.=5f9f0c10 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloading val<.=5962b3fc 35.4MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloading val<.=87640960 35.4MiB>
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloaded val<.=be5b0846 35.4MiB>
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloaded list<val<.=a641f18c 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloaded val<.=3abcdebc 35.4MiB>
2021/07/08 17:12:16 scheduler task cbed6014 (flow 936d4ab9): unloading (try 0): successful, next state: complete
2021/07/08 17:12:16  <-  n100.r06.s088.Main.out_file 936d4ab9 ok     exec 4m57s 35.7MiB
2021/07/08 17:12:16 n100.r06.s088.Main.out_file 936d4ab9 n100/r06/n100.r06.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9ff9a3e145f45be29eaa36afb25f747cc267005d451b5d7ea5b42290103e492
	sha256:936d4ab907d3a969612cb4ccbe5c1ab1a79702977f302e201c6d2d358713053f
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbed6014e595832e1296b1060bbf31cde762bec2b77a7ca531bb43146395aeb2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s088_output"
	    wget -O "n100.r06.s088_output/n100.r06.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s088_output/n100.r06.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s088_output/n100.r06.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s088_output/n100.r06.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s088_output/n100.r06.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s088_output/n100.r06.s088.reference.fas" "n100.r06.s088_output/n100.r06.s088.fq1.fastq" "n100.r06.s088_output/n100.r06.s088.fq2.fastq" | samtools view -bS - > "n100.r06.s088_output/n100.r06.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s088_output/n100.r06.s088.untrimmed.sorted.bam" "n100.r06.s088_output/n100.r06.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s088_output/n100.r06.s088.untrimmed.sorted.bam" -b "n100.r06.s088_output/n100.r06.s088.primers.bed" -p "n100.r06.s088_output/n100.r06.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" "n100.r06.s088_output/n100.r06.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s088_output/n100.r06.s088.reference.fas" "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" > "n100.r06.s088_output/n100.r06.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s088_output/n100.r06.s088.reference.fas" --call-indels "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" > "n100.r06.s088_output/n100.r06.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s088_output/n100.r06.s088.trimmed.sorted.bam" > "n100.r06.s088_output/n100.r06.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s088_output/n100.r06.s088.depth.txt" "n100.r06.s088_output/n100.r06.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s088_output/n100.r06.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s088_output/n100.r06.s088.reference.fas" | bcftools consensus -m "n100.r06.s088_output/n100.r06.s088.low_depth.tsv" tmp.vcf.gz > "n100.r06.s088_output/n100.r06.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a641f18c175e01a68e19bd7916153a00d91b77470457b4ff17cf23c55e1fe449 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=128.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:16 scheduler task b2cc6194 (flow 994c8b73): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s088.tar.gz resources {}
2021/07/08 17:12:16  ->  n100.r06.s088.Main.cp_out_file 994c8b73 exec extern s3://niema-test/n100/r06/n100.r06.s088.tar.gz 35.7MiB
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloading (try 0): started
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloading list<val<.=0ab76569 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloading val<.=83abda35 35.4MiB>
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloading val<.=6a686933 35.4MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloaded list<val<.=5f9f0c10 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloaded val<.=87640960 35.4MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloaded val<.=5962b3fc 35.4MiB>
2021/07/08 17:12:16 scheduler task d21f5df2 (flow 398ccd9b): unloading (try 0): successful, next state: complete
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:16  <-  n100.r06.s015.Main.out_file 398ccd9b ok     exec 4m57s 35.7MiB
2021/07/08 17:12:16 n100.r06.s015.Main.out_file 398ccd9b n100/r06/n100.r06.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5b4ddb4fdc379498d6dabd2c43d6073334e9ced4cf14ef1d14e2441e625c0551
	sha256:398ccd9b20e06dc58410c05855299e98d22c31d0731d0415b57c71e30a60880e
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d21f5df24813ad6e6ca107c74f19613a1a8d14ceb9f50a1a3902ded17b398d4d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s015_output"
	    wget -O "n100.r06.s015_output/n100.r06.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s015_output/n100.r06.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s015_output/n100.r06.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s015_output/n100.r06.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s015_output/n100.r06.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s015_output/n100.r06.s015.reference.fas" "n100.r06.s015_output/n100.r06.s015.fq1.fastq" "n100.r06.s015_output/n100.r06.s015.fq2.fastq" | samtools view -bS - > "n100.r06.s015_output/n100.r06.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s015_output/n100.r06.s015.untrimmed.sorted.bam" "n100.r06.s015_output/n100.r06.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s015_output/n100.r06.s015.untrimmed.sorted.bam" -b "n100.r06.s015_output/n100.r06.s015.primers.bed" -p "n100.r06.s015_output/n100.r06.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" "n100.r06.s015_output/n100.r06.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s015_output/n100.r06.s015.reference.fas" "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" > "n100.r06.s015_output/n100.r06.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s015_output/n100.r06.s015.reference.fas" --call-indels "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" > "n100.r06.s015_output/n100.r06.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s015_output/n100.r06.s015.trimmed.sorted.bam" > "n100.r06.s015_output/n100.r06.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s015_output/n100.r06.s015.depth.txt" "n100.r06.s015_output/n100.r06.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s015_output/n100.r06.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s015_output/n100.r06.s015.reference.fas" | bcftools consensus -m "n100.r06.s015_output/n100.r06.s015.low_depth.tsv" tmp.vcf.gz > "n100.r06.s015_output/n100.r06.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5f9f0c10ef162b1187fb3a490a01e1d4812496e7c6b4252fd6a27413d1b3b028 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=125.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:16 scheduler task aa604525 (flow 32079caa): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s015.tar.gz resources {}
2021/07/08 17:12:16  ->  n100.r06.s015.Main.cp_out_file 32079caa exec extern s3://niema-test/n100/r06/n100.r06.s015.tar.gz 35.7MiB
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloading (try 0): started
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloading list<val<.=52dddb79 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloading val<.=c3c92858 35.4MiB>
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloading val<.=ea6cf558 35.4MiB>
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloaded val<.=6a686933 35.4MiB>
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloaded list<val<.=0ab76569 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloaded val<.=83abda35 35.4MiB>
2021/07/08 17:12:16 scheduler task 2c9167d6 (flow bfdc7ffb): unloading (try 0): successful, next state: complete
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloading (try 0): started
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloading list<val<.=1a561b74 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloading val<.=40e5c37e 35.4MiB>
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloading val<.=9c95bd33 35.4MiB>
2021/07/08 17:12:16  <-  n100.r06.s019.Main.out_file bfdc7ffb ok     exec 4m57s 35.7MiB
2021/07/08 17:12:16 n100.r06.s019.Main.out_file bfdc7ffb n100/r06/n100.r06.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebf6ffe8e520fff22b16f49e8ae3fead3b5bd27e9ff8b07f26b1da16deb7fdeb
	sha256:bfdc7ffb15c6e6c40eb15503ea6647c233808d84cdd891f3aa3364267d54b8df
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c9167d6c365c6a1a4d4ca6dec4898ef37d34d31152c08efa5618307076f114a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s019_output"
	    wget -O "n100.r06.s019_output/n100.r06.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s019_output/n100.r06.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s019_output/n100.r06.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s019_output/n100.r06.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s019_output/n100.r06.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s019_output/n100.r06.s019.reference.fas" "n100.r06.s019_output/n100.r06.s019.fq1.fastq" "n100.r06.s019_output/n100.r06.s019.fq2.fastq" | samtools view -bS - > "n100.r06.s019_output/n100.r06.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s019_output/n100.r06.s019.untrimmed.sorted.bam" "n100.r06.s019_output/n100.r06.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s019_output/n100.r06.s019.untrimmed.sorted.bam" -b "n100.r06.s019_output/n100.r06.s019.primers.bed" -p "n100.r06.s019_output/n100.r06.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" "n100.r06.s019_output/n100.r06.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s019_output/n100.r06.s019.reference.fas" "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" > "n100.r06.s019_output/n100.r06.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s019_output/n100.r06.s019.reference.fas" --call-indels "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" > "n100.r06.s019_output/n100.r06.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s019_output/n100.r06.s019.trimmed.sorted.bam" > "n100.r06.s019_output/n100.r06.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s019_output/n100.r06.s019.depth.txt" "n100.r06.s019_output/n100.r06.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s019_output/n100.r06.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s019_output/n100.r06.s019.reference.fas" | bcftools consensus -m "n100.r06.s019_output/n100.r06.s019.low_depth.tsv" tmp.vcf.gz > "n100.r06.s019_output/n100.r06.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0ab76569339b1f13cda9f8988d58ebba691dae6848e988da316d60dbdd60540e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=130.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 17:12:16 scheduler task aba7f8c2 (flow 19ea8a97): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s019.tar.gz resources {}
2021/07/08 17:12:16  ->  n100.r06.s019.Main.cp_out_file 19ea8a97 exec extern s3://niema-test/n100/r06/n100.r06.s019.tar.gz 35.7MiB
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloaded list<val<.=52dddb79 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloaded val<.=c3c92858 35.4MiB>
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloaded val<.=ea6cf558 35.4MiB>
2021/07/08 17:12:16 scheduler task 828d1448 (flow 66f9b0f9): unloading (try 0): successful, next state: complete
2021/07/08 17:12:16  <-  n100.r06.s064.Main.out_file 66f9b0f9 ok     exec 4m57s 35.7MiB
2021/07/08 17:12:16 n100.r06.s064.Main.out_file 66f9b0f9 n100/r06/n100.r06.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9c435e7b6afccfb2cc2e664441d7166f5c848977d7e109abffc827fbea07e979
	sha256:66f9b0f94adff8368260659f0c33639d80a330a83da4a8f5fcc3782d1bc419c2
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/828d1448c609dbb6d1ce8cfcdf9ea025de5c29b6f5b0c3c4bae0065abd64a832
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s064_output"
	    wget -O "n100.r06.s064_output/n100.r06.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s064_output/n100.r06.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s064_output/n100.r06.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s064_output/n100.r06.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s064_output/n100.r06.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s064_output/n100.r06.s064.reference.fas" "n100.r06.s064_output/n100.r06.s064.fq1.fastq" "n100.r06.s064_output/n100.r06.s064.fq2.fastq" | samtools view -bS - > "n100.r06.s064_output/n100.r06.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s064_output/n100.r06.s064.untrimmed.sorted.bam" "n100.r06.s064_output/n100.r06.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s064_output/n100.r06.s064.untrimmed.sorted.bam" -b "n100.r06.s064_output/n100.r06.s064.primers.bed" -p "n100.r06.s064_output/n100.r06.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" "n100.r06.s064_output/n100.r06.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s064_output/n100.r06.s064.reference.fas" "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" > "n100.r06.s064_output/n100.r06.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s064_output/n100.r06.s064.reference.fas" --call-indels "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" > "n100.r06.s064_output/n100.r06.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s064_output/n100.r06.s064.trimmed.sorted.bam" > "n100.r06.s064_output/n100.r06.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s064_output/n100.r06.s064.depth.txt" "n100.r06.s064_output/n100.r06.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s064_output/n100.r06.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s064_output/n100.r06.s064.reference.fas" | bcftools consensus -m "n100.r06.s064_output/n100.r06.s064.low_depth.tsv" tmp.vcf.gz > "n100.r06.s064_output/n100.r06.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:52dddb79e601301490de585aede150a28c65658ec05cdba24ad9eadcfcdce5f8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=126.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:12:16 scheduler task 4e6bad3b (flow a273639f): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s064.tar.gz resources {}
2021/07/08 17:12:16  ->  n100.r06.s064.Main.cp_out_file a273639f exec extern s3://niema-test/n100/r06/n100.r06.s064.tar.gz 35.7MiB
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloaded val<.=40e5c37e 35.4MiB>
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloaded list<val<.=1a561b74 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloaded val<.=9c95bd33 35.4MiB>
2021/07/08 17:12:16 scheduler task c2bb6acb (flow e34273b7): unloading (try 0): successful, next state: complete
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): promoting objects (try 0): started
2021/07/08 17:12:16  <-  n100.r06.s070.Main.out_file e34273b7 ok     exec 5m3s 35.7MiB
2021/07/08 17:12:16 n100.r06.s070.Main.out_file e34273b7 n100/r06/n100.r06.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f02ca0f2bc2ffb4147dc8d0ba6395b219b666082464832fb0bd74edc89eecef
	sha256:e34273b7facd97ea5ec2acd9f489a92fcd0129aed14af36214218db73e73fa04
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c2bb6acbfe9347f0c9f8494d260cd50370702cab8d37d6eb1d21fb88dc788ccc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s070_output"
	    wget -O "n100.r06.s070_output/n100.r06.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s070_output/n100.r06.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s070_output/n100.r06.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s070_output/n100.r06.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s070_output/n100.r06.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s070_output/n100.r06.s070.reference.fas" "n100.r06.s070_output/n100.r06.s070.fq1.fastq" "n100.r06.s070_output/n100.r06.s070.fq2.fastq" | samtools view -bS - > "n100.r06.s070_output/n100.r06.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s070_output/n100.r06.s070.untrimmed.sorted.bam" "n100.r06.s070_output/n100.r06.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s070_output/n100.r06.s070.untrimmed.sorted.bam" -b "n100.r06.s070_output/n100.r06.s070.primers.bed" -p "n100.r06.s070_output/n100.r06.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" "n100.r06.s070_output/n100.r06.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s070_output/n100.r06.s070.reference.fas" "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" > "n100.r06.s070_output/n100.r06.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s070_output/n100.r06.s070.reference.fas" --call-indels "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" > "n100.r06.s070_output/n100.r06.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s070_output/n100.r06.s070.trimmed.sorted.bam" > "n100.r06.s070_output/n100.r06.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s070_output/n100.r06.s070.depth.txt" "n100.r06.s070_output/n100.r06.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s070_output/n100.r06.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s070_output/n100.r06.s070.reference.fas" | bcftools consensus -m "n100.r06.s070_output/n100.r06.s070.low_depth.tsv" tmp.vcf.gz > "n100.r06.s070_output/n100.r06.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1a561b743c54389800aef46c23a5cfae8008b140ccd1865fe3d17920076f79ca 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=128.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:12:16 scheduler task 69948011 (flow 610c2171): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s070.tar.gz resources {}
2021/07/08 17:12:16  ->  n100.r06.s070.Main.cp_out_file 610c2171 exec extern s3://niema-test/n100/r06/n100.r06.s070.tar.gz 35.7MiB
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): promoting objects (try 0): started
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloading (try 0): started
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloading list<val<.=00dc9f2f 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloading val<.=4966f95e 35.4MiB>
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloading val<.=f01d3690 35.4MiB>
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): promoting objects (try 0): started
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): retrieving diagnostic output (try 0): started
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): retrieving diagnostic output (try 0): started
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloaded list<val<.=00dc9f2f 35.7MiB> 35.7MiB>
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloaded val<.=4966f95e 35.4MiB>
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloaded val<.=f01d3690 35.4MiB>
2021/07/08 17:12:16 scheduler task 30d52cd1 (flow 965617d8): unloading (try 0): successful, next state: complete
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:16 scheduler task 8ab2f441 (flow 8023b4cb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:142c42caf443f361419df3985bed362a1a0408829009e429f55480e8f2437e73 -> s3://niema-test/n100/r06/n100.r06.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:16  <-  n100.r06.s040.Main.cp_out_file 8023b4cb ok   extern 0s 35.7MiB
2021/07/08 17:12:16  <-  n100.r06.s047.Main.out_file 965617d8 ok     exec 4m57s 35.7MiB
2021/07/08 17:12:16 n100.r06.s047.Main.out_file 965617d8 n100/r06/n100.r06.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5985ab79bc6bf76cc7d46a5ec337277f8174374bdde8be87e4a3e0fa109b095
	sha256:965617d8435d030a6055c6e290ebd74459f3a7f9703c23e799218d7ad5d83b26
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/30d52cd1522933307bcac7f72bd7059f0cc78fdd816303ee37e6925ee6935e1a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s047_output"
	    wget -O "n100.r06.s047_output/n100.r06.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s047_output/n100.r06.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s047_output/n100.r06.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s047_output/n100.r06.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s047_output/n100.r06.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s047_output/n100.r06.s047.reference.fas" "n100.r06.s047_output/n100.r06.s047.fq1.fastq" "n100.r06.s047_output/n100.r06.s047.fq2.fastq" | samtools view -bS - > "n100.r06.s047_output/n100.r06.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s047_output/n100.r06.s047.untrimmed.sorted.bam" "n100.r06.s047_output/n100.r06.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s047_output/n100.r06.s047.untrimmed.sorted.bam" -b "n100.r06.s047_output/n100.r06.s047.primers.bed" -p "n100.r06.s047_output/n100.r06.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" "n100.r06.s047_output/n100.r06.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s047_output/n100.r06.s047.reference.fas" "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" > "n100.r06.s047_output/n100.r06.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s047_output/n100.r06.s047.reference.fas" --call-indels "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" > "n100.r06.s047_output/n100.r06.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s047_output/n100.r06.s047.trimmed.sorted.bam" > "n100.r06.s047_output/n100.r06.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s047_output/n100.r06.s047.depth.txt" "n100.r06.s047_output/n100.r06.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s047_output/n100.r06.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s047_output/n100.r06.s047.reference.fas" | bcftools consensus -m "n100.r06.s047_output/n100.r06.s047.low_depth.tsv" tmp.vcf.gz > "n100.r06.s047_output/n100.r06.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:00dc9f2f598a807a3db41f888c0cd4067d828340d1c366a3f1ae781c7ce2d14a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=126.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:16 scheduler task 133881d0 (flow 0ac13124): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s047.tar.gz resources {}
2021/07/08 17:12:16  ->  n100.r06.s047.Main.cp_out_file 0ac13124 exec extern s3://niema-test/n100/r06/n100.r06.s047.tar.gz 35.7MiB
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): retrieving diagnostic output (try 0): started
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): retrieving result (try 0): started
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): retrieving result (try 0): started
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): retrieving result (try 0): started
2021/07/08 17:12:16 scheduler task 34721296 (flow 26cf7ba6): transferring output (try 0): started
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:16 scheduler task bc733e05 (flow 50764c57): transferring output (try 0): started
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:16 scheduler task 83e10361 (flow cf58eefc): transferring output (try 0): started
2021/07/08 17:12:17 scheduler task b2cc6194 (flow 994c8b73): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a641f18c175e01a68e19bd7916153a00d91b77470457b4ff17cf23c55e1fe449 -> s3://niema-test/n100/r06/n100.r06.s088.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s088.Main.cp_out_file 994c8b73 ok   extern 0s 35.7MiB
2021/07/08 17:12:17 scheduler task aa604525 (flow 32079caa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5f9f0c10ef162b1187fb3a490a01e1d4812496e7c6b4252fd6a27413d1b3b028 -> s3://niema-test/n100/r06/n100.r06.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s015.Main.cp_out_file 32079caa ok   extern 0s 35.7MiB
2021/07/08 17:12:17 scheduler task aba7f8c2 (flow 19ea8a97): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0ab76569339b1f13cda9f8988d58ebba691dae6848e988da316d60dbdd60540e -> s3://niema-test/n100/r06/n100.r06.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s019.Main.cp_out_file 19ea8a97 ok   extern 0s 35.7MiB
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloading (try 0): started
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloading list<val<.=8c5e66d5 35.8MiB> 35.8MiB>
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloading val<.=53631f99 35.4MiB>
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloading val<.=5e0a96f9 35.4MiB>
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloading (try 0): started
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloading list<val<.=3cb64af9 35.8MiB> 35.8MiB>
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloading val<.=06525461 35.4MiB>
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloading val<.=3672e557 35.4MiB>
2021/07/08 17:12:17 scheduler task 5f6616ec (flow 65d6be24): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d407d1a2d9ec42150b50ae1565ffcc0a51a871c0e7f8bbfe47a75aa45a58e3cb -> s3://niema-test/n100/r06/n100.r06.s074.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s074.Main.cp_out_file 65d6be24 ok   extern 0s 35.8MiB
2021/07/08 17:12:17 scheduler task 69948011 (flow 610c2171): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1a561b743c54389800aef46c23a5cfae8008b140ccd1865fe3d17920076f79ca -> s3://niema-test/n100/r06/n100.r06.s070.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s070.Main.cp_out_file 610c2171 ok   extern 0s 35.7MiB
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloading (try 0): started
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloading list<val<.=c2e0d733 35.7MiB> 35.7MiB>
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloading val<.=dd9e6390 35.4MiB>
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloading val<.=79b34920 35.4MiB>
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloaded list<val<.=8c5e66d5 35.8MiB> 35.8MiB>
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloaded val<.=53631f99 35.4MiB>
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloaded val<.=5e0a96f9 35.4MiB>
2021/07/08 17:12:17 scheduler task 83e10361 (flow cf58eefc): unloading (try 0): successful, next state: complete
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloaded list<val<.=3cb64af9 35.8MiB> 35.8MiB>
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloaded val<.=06525461 35.4MiB>
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloaded val<.=3672e557 35.4MiB>
2021/07/08 17:12:17 scheduler task 34721296 (flow 26cf7ba6): unloading (try 0): successful, next state: complete
2021/07/08 17:12:17  <-  n100.r06.s042.Main.out_file cf58eefc ok     exec 4m59s 35.8MiB
2021/07/08 17:12:17 n100.r06.s042.Main.out_file cf58eefc n100/r06/n100.r06.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:264c75a9b9fa87ce12c61337da8f26c169b7e88bb5b111f7becaa619f0e7a842
	sha256:cf58eefcbb31c6e452f909fc7eaeb7c4fd2ba71365455f3881893aec31da37ca
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83e103610d17001776562572a77da7df6de470f63996e2e8ccf82f99472f120b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s042_output"
	    wget -O "n100.r06.s042_output/n100.r06.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s042_output/n100.r06.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s042_output/n100.r06.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s042_output/n100.r06.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s042_output/n100.r06.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s042_output/n100.r06.s042.reference.fas" "n100.r06.s042_output/n100.r06.s042.fq1.fastq" "n100.r06.s042_output/n100.r06.s042.fq2.fastq" | samtools view -bS - > "n100.r06.s042_output/n100.r06.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s042_output/n100.r06.s042.untrimmed.sorted.bam" "n100.r06.s042_output/n100.r06.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s042_output/n100.r06.s042.untrimmed.sorted.bam" -b "n100.r06.s042_output/n100.r06.s042.primers.bed" -p "n100.r06.s042_output/n100.r06.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" "n100.r06.s042_output/n100.r06.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s042_output/n100.r06.s042.reference.fas" "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" > "n100.r06.s042_output/n100.r06.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s042_output/n100.r06.s042.reference.fas" --call-indels "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" > "n100.r06.s042_output/n100.r06.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s042_output/n100.r06.s042.trimmed.sorted.bam" > "n100.r06.s042_output/n100.r06.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s042_output/n100.r06.s042.depth.txt" "n100.r06.s042_output/n100.r06.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s042_output/n100.r06.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s042_output/n100.r06.s042.reference.fas" | bcftools consensus -m "n100.r06.s042_output/n100.r06.s042.low_depth.tsv" tmp.vcf.gz > "n100.r06.s042_output/n100.r06.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8c5e66d50f3fe4852062d0a07cd898c5fba6790cee1fb06e7c0e178f4e75ad43 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=130.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=416B max=2.0KiB
2021/07/08 17:12:17 scheduler task b74bbb2b (flow 086d1152): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s042.tar.gz resources {}
2021/07/08 17:12:17  ->  n100.r06.s042.Main.cp_out_file 086d1152 exec extern s3://niema-test/n100/r06/n100.r06.s042.tar.gz 35.8MiB
2021/07/08 17:12:17  <-  n100.r06.s100.Main.out_file 26cf7ba6 ok     exec 4m59s 35.8MiB
2021/07/08 17:12:17 n100.r06.s100.Main.out_file 26cf7ba6 n100/r06/n100.r06.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:741efa4710c6bfdd814d07b27411b7e910703ff8f7a35fb275606452cb0ba930
	sha256:26cf7ba62407dc239d5c3c85b11afc7df0331975dd8e49c8db2ae0f797fb85e4
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3472129653dcb3178ae1f1593d2eb2180c2c66441e11f7e967452bdc90d71493
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s100_output"
	    wget -O "n100.r06.s100_output/n100.r06.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s100_output/n100.r06.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s100_output/n100.r06.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s100_output/n100.r06.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s100_output/n100.r06.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s100_output/n100.r06.s100.reference.fas" "n100.r06.s100_output/n100.r06.s100.fq1.fastq" "n100.r06.s100_output/n100.r06.s100.fq2.fastq" | samtools view -bS - > "n100.r06.s100_output/n100.r06.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s100_output/n100.r06.s100.untrimmed.sorted.bam" "n100.r06.s100_output/n100.r06.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s100_output/n100.r06.s100.untrimmed.sorted.bam" -b "n100.r06.s100_output/n100.r06.s100.primers.bed" -p "n100.r06.s100_output/n100.r06.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" "n100.r06.s100_output/n100.r06.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s100_output/n100.r06.s100.reference.fas" "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" > "n100.r06.s100_output/n100.r06.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s100_output/n100.r06.s100.reference.fas" --call-indels "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" > "n100.r06.s100_output/n100.r06.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s100_output/n100.r06.s100.trimmed.sorted.bam" > "n100.r06.s100_output/n100.r06.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s100_output/n100.r06.s100.depth.txt" "n100.r06.s100_output/n100.r06.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s100_output/n100.r06.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s100_output/n100.r06.s100.reference.fas" | bcftools consensus -m "n100.r06.s100_output/n100.r06.s100.low_depth.tsv" tmp.vcf.gz > "n100.r06.s100_output/n100.r06.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3cb64af97037bc1d9b296a573c62aa83850e6632a1db633603f982315456d314 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=128.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:17 scheduler task 05ae9382 (flow c2661e8a): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s100.tar.gz resources {}
2021/07/08 17:12:17  ->  n100.r06.s100.Main.cp_out_file c2661e8a exec extern s3://niema-test/n100/r06/n100.r06.s100.tar.gz 35.8MiB
2021/07/08 17:12:17 scheduler task 133881d0 (flow 0ac13124): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:00dc9f2f598a807a3db41f888c0cd4067d828340d1c366a3f1ae781c7ce2d14a -> s3://niema-test/n100/r06/n100.r06.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s047.Main.cp_out_file 0ac13124 ok   extern 0s 35.7MiB
2021/07/08 17:12:17 scheduler task 4e6bad3b (flow a273639f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:52dddb79e601301490de585aede150a28c65658ec05cdba24ad9eadcfcdce5f8 -> s3://niema-test/n100/r06/n100.r06.s064.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:17  <-  n100.r06.s064.Main.cp_out_file a273639f ok   extern 0s 35.7MiB
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): promoting objects (try 0): started
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloaded val<.=dd9e6390 35.4MiB>
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloaded val<.=79b34920 35.4MiB>
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloaded list<val<.=c2e0d733 35.7MiB> 35.7MiB>
2021/07/08 17:12:17 scheduler task bc733e05 (flow 50764c57): unloading (try 0): successful, next state: complete
2021/07/08 17:12:17  <-  n100.r06.s027.Main.out_file 50764c57 ok     exec 5m4s 35.7MiB
2021/07/08 17:12:17 n100.r06.s027.Main.out_file 50764c57 n100/r06/n100.r06.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e3152d5c133248348cadfb0dbd62e7a33fdb7d8aa957fd4933fc84a7e17e7f93
	sha256:50764c572591101e09550f750751709eca3b3c2b7857e45f42a15cb92b3a506b
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc733e0500499a8781b1f721bdcaeecad18f7d6f5aadd8b1e768cb943069f907
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s027_output"
	    wget -O "n100.r06.s027_output/n100.r06.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s027_output/n100.r06.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s027_output/n100.r06.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s027_output/n100.r06.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s027_output/n100.r06.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s027_output/n100.r06.s027.reference.fas" "n100.r06.s027_output/n100.r06.s027.fq1.fastq" "n100.r06.s027_output/n100.r06.s027.fq2.fastq" | samtools view -bS - > "n100.r06.s027_output/n100.r06.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s027_output/n100.r06.s027.untrimmed.sorted.bam" "n100.r06.s027_output/n100.r06.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s027_output/n100.r06.s027.untrimmed.sorted.bam" -b "n100.r06.s027_output/n100.r06.s027.primers.bed" -p "n100.r06.s027_output/n100.r06.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" "n100.r06.s027_output/n100.r06.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s027_output/n100.r06.s027.reference.fas" "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" > "n100.r06.s027_output/n100.r06.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s027_output/n100.r06.s027.reference.fas" --call-indels "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" > "n100.r06.s027_output/n100.r06.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s027_output/n100.r06.s027.trimmed.sorted.bam" > "n100.r06.s027_output/n100.r06.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s027_output/n100.r06.s027.depth.txt" "n100.r06.s027_output/n100.r06.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s027_output/n100.r06.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s027_output/n100.r06.s027.reference.fas" | bcftools consensus -m "n100.r06.s027_output/n100.r06.s027.low_depth.tsv" tmp.vcf.gz > "n100.r06.s027_output/n100.r06.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c2e0d733aa958cb26b3bc9b56e2e3a20043bbd4b55f50cc83ebdf0392c6285eb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.4MiB max=132.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:12:17 scheduler task 4c168a5d (flow 7ca1ac79): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s027.tar.gz resources {}
2021/07/08 17:12:17  ->  n100.r06.s027.Main.cp_out_file 7ca1ac79 exec extern s3://niema-test/n100/r06/n100.r06.s027.tar.gz 35.7MiB
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): retrieving diagnostic output (try 0): started
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): retrieving result (try 0): started
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:17 scheduler task ee390516 (flow dece9cd5): transferring output (try 0): started
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): promoting objects (try 0): started
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): retrieving diagnostic output (try 0): started
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): retrieving result (try 0): started
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:18 scheduler task 957861f5 (flow 82bc0705): transferring output (try 0): started
2021/07/08 17:12:18 scheduler task b74bbb2b (flow 086d1152): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8c5e66d50f3fe4852062d0a07cd898c5fba6790cee1fb06e7c0e178f4e75ad43 -> s3://niema-test/n100/r06/n100.r06.s042.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:18  <-  n100.r06.s042.Main.cp_out_file 086d1152 ok   extern 0s 35.8MiB
2021/07/08 17:12:18 scheduler task 05ae9382 (flow c2661e8a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3cb64af97037bc1d9b296a573c62aa83850e6632a1db633603f982315456d314 -> s3://niema-test/n100/r06/n100.r06.s100.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:18  <-  n100.r06.s100.Main.cp_out_file c2661e8a ok   extern 0s 35.8MiB
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): promoting objects (try 0): started
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): retrieving diagnostic output (try 0): started
2021/07/08 17:12:18 scheduler task 4c168a5d (flow 7ca1ac79): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c2e0d733aa958cb26b3bc9b56e2e3a20043bbd4b55f50cc83ebdf0392c6285eb -> s3://niema-test/n100/r06/n100.r06.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:18  <-  n100.r06.s027.Main.cp_out_file 7ca1ac79 ok   extern 0s 35.7MiB
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): retrieving result (try 0): started
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:18 scheduler task f7976c84 (flow 9f59688b): transferring output (try 0): started
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): promoting objects (try 0): started
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloading (try 0): started
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloading list<val<.=8de85ec6 35.7MiB> 35.7MiB>
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloading val<.=37e1e93d 35.4MiB>
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloading val<.=4658f176 35.4MiB>
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): retrieving diagnostic output (try 0): started
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): promoting objects (try 0): started
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloaded list<val<.=8de85ec6 35.7MiB> 35.7MiB>
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloaded val<.=4658f176 35.4MiB>
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloaded val<.=37e1e93d 35.4MiB>
2021/07/08 17:12:19 scheduler task 957861f5 (flow 82bc0705): unloading (try 0): successful, next state: complete
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloading (try 0): started
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloading list<val<.=a9ca9162 35.7MiB> 35.7MiB>
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloading val<.=59ac069a 35.4MiB>
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloading val<.=7a4fdad0 35.4MiB>
2021/07/08 17:12:19  <-  n100.r06.s014.Main.out_file 82bc0705 ok     exec 4m53s 35.7MiB
2021/07/08 17:12:19 n100.r06.s014.Main.out_file 82bc0705 n100/r06/n100.r06.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9f03c51eb3705a5bc2efde137f8632a850ebfb4e3cb0fc2ecb40c3aad5aacb2f
	sha256:82bc0705f934638b8c0ac275af738467735469cafe5db2e289934eed875cf059
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/957861f547d718f3ec2e338df0b29786a55b6fe2e7d8d0336dfeae8f2e306371
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s014_output"
	    wget -O "n100.r06.s014_output/n100.r06.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s014_output/n100.r06.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s014_output/n100.r06.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s014_output/n100.r06.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s014_output/n100.r06.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s014_output/n100.r06.s014.reference.fas" "n100.r06.s014_output/n100.r06.s014.fq1.fastq" "n100.r06.s014_output/n100.r06.s014.fq2.fastq" | samtools view -bS - > "n100.r06.s014_output/n100.r06.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s014_output/n100.r06.s014.untrimmed.sorted.bam" "n100.r06.s014_output/n100.r06.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s014_output/n100.r06.s014.untrimmed.sorted.bam" -b "n100.r06.s014_output/n100.r06.s014.primers.bed" -p "n100.r06.s014_output/n100.r06.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" "n100.r06.s014_output/n100.r06.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s014_output/n100.r06.s014.reference.fas" "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" > "n100.r06.s014_output/n100.r06.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s014_output/n100.r06.s014.reference.fas" --call-indels "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" > "n100.r06.s014_output/n100.r06.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s014_output/n100.r06.s014.trimmed.sorted.bam" > "n100.r06.s014_output/n100.r06.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s014_output/n100.r06.s014.depth.txt" "n100.r06.s014_output/n100.r06.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s014_output/n100.r06.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s014_output/n100.r06.s014.reference.fas" | bcftools consensus -m "n100.r06.s014_output/n100.r06.s014.low_depth.tsv" tmp.vcf.gz > "n100.r06.s014_output/n100.r06.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8de85ec6cc623c06da63e900594b7630e990e311ef3096053817aee083d1f07c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=126.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:19 scheduler task 8ba6fc59 (flow e7de1af7): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s014.tar.gz resources {}
2021/07/08 17:12:19  ->  n100.r06.s014.Main.cp_out_file e7de1af7 exec extern s3://niema-test/n100/r06/n100.r06.s014.tar.gz 35.7MiB
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): retrieving result (try 0): started
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): retrieving diagnostic output (try 0): started
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloaded list<val<.=a9ca9162 35.7MiB> 35.7MiB>
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloaded val<.=59ac069a 35.4MiB>
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloaded val<.=7a4fdad0 35.4MiB>
2021/07/08 17:12:19 scheduler task ee390516 (flow dece9cd5): unloading (try 0): successful, next state: complete
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:19  <-  n100.r06.s035.Main.out_file dece9cd5 ok     exec 4m52s 35.7MiB
2021/07/08 17:12:19 n100.r06.s035.Main.out_file dece9cd5 n100/r06/n100.r06.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e6e2b880a79395414a405228b54de8056e4685be3c719e8495e89e7f3980210a
	sha256:dece9cd590d55c764c04224621d3a570377a01bc2eda0e3040c2447711b6a20c
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee390516e243fd6e922510382c9ad4fa7a4248d291f2f83f0230ec0ca01d24fd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s035_output"
	    wget -O "n100.r06.s035_output/n100.r06.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s035_output/n100.r06.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s035_output/n100.r06.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s035_output/n100.r06.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s035_output/n100.r06.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s035_output/n100.r06.s035.reference.fas" "n100.r06.s035_output/n100.r06.s035.fq1.fastq" "n100.r06.s035_output/n100.r06.s035.fq2.fastq" | samtools view -bS - > "n100.r06.s035_output/n100.r06.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s035_output/n100.r06.s035.untrimmed.sorted.bam" "n100.r06.s035_output/n100.r06.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s035_output/n100.r06.s035.untrimmed.sorted.bam" -b "n100.r06.s035_output/n100.r06.s035.primers.bed" -p "n100.r06.s035_output/n100.r06.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" "n100.r06.s035_output/n100.r06.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s035_output/n100.r06.s035.reference.fas" "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" > "n100.r06.s035_output/n100.r06.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s035_output/n100.r06.s035.reference.fas" --call-indels "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" > "n100.r06.s035_output/n100.r06.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s035_output/n100.r06.s035.trimmed.sorted.bam" > "n100.r06.s035_output/n100.r06.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s035_output/n100.r06.s035.depth.txt" "n100.r06.s035_output/n100.r06.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s035_output/n100.r06.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s035_output/n100.r06.s035.reference.fas" | bcftools consensus -m "n100.r06.s035_output/n100.r06.s035.low_depth.tsv" tmp.vcf.gz > "n100.r06.s035_output/n100.r06.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a9ca9162e24512415898c0288a83e4b527ffafc3e6d6c90ed3a8730c65923d9b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:19 scheduler task f018bc85 (flow b2947eaa): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s035.tar.gz resources {}
2021/07/08 17:12:19  ->  n100.r06.s035.Main.cp_out_file b2947eaa exec extern s3://niema-test/n100/r06/n100.r06.s035.tar.gz 35.7MiB
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): transferring output (try 0): started
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): retrieving result (try 0): started
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:19 scheduler task e0cd482b (flow 6eb687d9): transferring output (try 0): started
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): promoting objects (try 0): started
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloading (try 0): started
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloading list<val<.=9f43255e 35.8MiB> 35.8MiB>
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloading val<.=b74227c1 35.4MiB>
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloading val<.=1c41c856 35.4MiB>
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): retrieving diagnostic output (try 0): started
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloaded val<.=b74227c1 35.4MiB>
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloaded list<val<.=9f43255e 35.8MiB> 35.8MiB>
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloaded val<.=1c41c856 35.4MiB>
2021/07/08 17:12:19 scheduler task f7976c84 (flow 9f59688b): unloading (try 0): successful, next state: complete
2021/07/08 17:12:19  <-  n100.r06.s002.Main.out_file 9f59688b ok     exec 5m1s 35.8MiB
2021/07/08 17:12:19 n100.r06.s002.Main.out_file 9f59688b n100/r06/n100.r06.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5ed5ea29802c3742e8b55eeeb9f69656bff69f37322db2b092d21ee7eb1d877
	sha256:9f59688b2d76a8ea0e3846cc478604e01913eeff52d164e5bd3e0a1dee9b4317
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f7976c84d9eb3a34705d0e675e4bf0f0bb2fcee726215672188815aafd1e8069
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s002_output"
	    wget -O "n100.r06.s002_output/n100.r06.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s002_output/n100.r06.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s002_output/n100.r06.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s002_output/n100.r06.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s002_output/n100.r06.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s002_output/n100.r06.s002.reference.fas" "n100.r06.s002_output/n100.r06.s002.fq1.fastq" "n100.r06.s002_output/n100.r06.s002.fq2.fastq" | samtools view -bS - > "n100.r06.s002_output/n100.r06.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s002_output/n100.r06.s002.untrimmed.sorted.bam" "n100.r06.s002_output/n100.r06.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s002_output/n100.r06.s002.untrimmed.sorted.bam" -b "n100.r06.s002_output/n100.r06.s002.primers.bed" -p "n100.r06.s002_output/n100.r06.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" "n100.r06.s002_output/n100.r06.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s002_output/n100.r06.s002.reference.fas" "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" > "n100.r06.s002_output/n100.r06.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s002_output/n100.r06.s002.reference.fas" --call-indels "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" > "n100.r06.s002_output/n100.r06.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s002_output/n100.r06.s002.trimmed.sorted.bam" > "n100.r06.s002_output/n100.r06.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s002_output/n100.r06.s002.depth.txt" "n100.r06.s002_output/n100.r06.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s002_output/n100.r06.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s002_output/n100.r06.s002.reference.fas" | bcftools consensus -m "n100.r06.s002_output/n100.r06.s002.low_depth.tsv" tmp.vcf.gz > "n100.r06.s002_output/n100.r06.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9f43255e2b76006a9d113b983033ac28542d309e3718336936344bdf51750b5e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=128.7MiB
	    disk mean=7.9MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:12:19 scheduler task e95b2798 (flow 8469a670): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s002.tar.gz resources {}
2021/07/08 17:12:19  ->  n100.r06.s002.Main.cp_out_file 8469a670 exec extern s3://niema-test/n100/r06/n100.r06.s002.tar.gz 35.8MiB
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): retrieving result (try 0): started
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:12:19 scheduler task 371261a3 (flow e80820b2): transferring output (try 0): started
2021/07/08 17:12:19 scheduler task 8ba6fc59 (flow e7de1af7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8de85ec6cc623c06da63e900594b7630e990e311ef3096053817aee083d1f07c -> s3://niema-test/n100/r06/n100.r06.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:19  <-  n100.r06.s014.Main.cp_out_file e7de1af7 ok   extern 0s 35.7MiB
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): unloading (try 0): started
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): unloading val<.=2f3cf97c 35.4MiB>
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): unloading list<val<.=edbf5daa 35.7MiB> 35.7MiB>
2021/07/08 17:12:19 scheduler task f672ef92 (flow 14086e68): unloading val<.=0d93ad45 35.4MiB>
2021/07/08 17:12:20 scheduler task f672ef92 (flow 14086e68): unloaded list<val<.=edbf5daa 35.7MiB> 35.7MiB>
2021/07/08 17:12:20 scheduler task f672ef92 (flow 14086e68): unloaded val<.=2f3cf97c 35.4MiB>
2021/07/08 17:12:20 scheduler task f672ef92 (flow 14086e68): unloaded val<.=0d93ad45 35.4MiB>
2021/07/08 17:12:20 scheduler task f672ef92 (flow 14086e68): unloading (try 0): successful, next state: complete
2021/07/08 17:12:20 scheduler task f018bc85 (flow b2947eaa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a9ca9162e24512415898c0288a83e4b527ffafc3e6d6c90ed3a8730c65923d9b -> s3://niema-test/n100/r06/n100.r06.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:20  <-  n100.r06.s035.Main.cp_out_file b2947eaa ok   extern 0s 35.7MiB
2021/07/08 17:12:20  <-  n100.r06.s093.Main.out_file 14086e68 ok     exec 4m54s 35.7MiB
2021/07/08 17:12:20 n100.r06.s093.Main.out_file 14086e68 n100/r06/n100.r06.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd20ebd2b28633c0a0e4adaa4d182111456c121e59ddba69d8fdfb6db9e0cd70
	sha256:14086e68516d8ef6930db317140a3e3a35c8c6a6b4b2b2fc1a4c016490497c33
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f672ef92b3da298617e169874fc812f51ca15c9464e308fb54584142659decfc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s093_output"
	    wget -O "n100.r06.s093_output/n100.r06.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s093_output/n100.r06.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s093_output/n100.r06.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s093_output/n100.r06.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s093_output/n100.r06.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s093_output/n100.r06.s093.reference.fas" "n100.r06.s093_output/n100.r06.s093.fq1.fastq" "n100.r06.s093_output/n100.r06.s093.fq2.fastq" | samtools view -bS - > "n100.r06.s093_output/n100.r06.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s093_output/n100.r06.s093.untrimmed.sorted.bam" "n100.r06.s093_output/n100.r06.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s093_output/n100.r06.s093.untrimmed.sorted.bam" -b "n100.r06.s093_output/n100.r06.s093.primers.bed" -p "n100.r06.s093_output/n100.r06.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" "n100.r06.s093_output/n100.r06.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s093_output/n100.r06.s093.reference.fas" "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" > "n100.r06.s093_output/n100.r06.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s093_output/n100.r06.s093.reference.fas" --call-indels "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" > "n100.r06.s093_output/n100.r06.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s093_output/n100.r06.s093.trimmed.sorted.bam" > "n100.r06.s093_output/n100.r06.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s093_output/n100.r06.s093.depth.txt" "n100.r06.s093_output/n100.r06.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s093_output/n100.r06.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s093_output/n100.r06.s093.reference.fas" | bcftools consensus -m "n100.r06.s093_output/n100.r06.s093.low_depth.tsv" tmp.vcf.gz > "n100.r06.s093_output/n100.r06.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:edbf5daa2016e6dcdee341d6e4b87222afb4b6480e30dd959dd2b9c1089c01b0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.8MiB max=132.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:12:20 scheduler task 2fb124d9 (flow 5e986eb3): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s093.tar.gz resources {}
2021/07/08 17:12:20  ->  n100.r06.s093.Main.cp_out_file 5e986eb3 exec extern s3://niema-test/n100/r06/n100.r06.s093.tar.gz 35.7MiB
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloading (try 0): started
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloading list<val<.=88416f63 35.8MiB> 35.8MiB>
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloading val<.=6696775b 35.4MiB>
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloading val<.=af1c93a8 35.4MiB>
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloaded list<val<.=88416f63 35.8MiB> 35.8MiB>
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloaded val<.=6696775b 35.4MiB>
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloaded val<.=af1c93a8 35.4MiB>
2021/07/08 17:12:20 scheduler task e0cd482b (flow 6eb687d9): unloading (try 0): successful, next state: complete
2021/07/08 17:12:20  <-  n100.r06.s039.Main.out_file 6eb687d9 ok     exec 5m1s 35.8MiB
2021/07/08 17:12:20 n100.r06.s039.Main.out_file 6eb687d9 n100/r06/n100.r06.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7bc5c979e157dbe7d924e731d14b378dfccc545a8c49316895f036db4b4d96b1
	sha256:6eb687d985907a7500e213f6e2f9bcfa415eece7a18c0fa4ffda40eb73402752
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e0cd482b81deb1bb853aeaae426ad3db9bab6fb7901b078885812faee9c5d7e7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s039_output"
	    wget -O "n100.r06.s039_output/n100.r06.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s039_output/n100.r06.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s039_output/n100.r06.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s039_output/n100.r06.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s039_output/n100.r06.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s039_output/n100.r06.s039.reference.fas" "n100.r06.s039_output/n100.r06.s039.fq1.fastq" "n100.r06.s039_output/n100.r06.s039.fq2.fastq" | samtools view -bS - > "n100.r06.s039_output/n100.r06.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s039_output/n100.r06.s039.untrimmed.sorted.bam" "n100.r06.s039_output/n100.r06.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s039_output/n100.r06.s039.untrimmed.sorted.bam" -b "n100.r06.s039_output/n100.r06.s039.primers.bed" -p "n100.r06.s039_output/n100.r06.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" "n100.r06.s039_output/n100.r06.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s039_output/n100.r06.s039.reference.fas" "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" > "n100.r06.s039_output/n100.r06.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s039_output/n100.r06.s039.reference.fas" --call-indels "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" > "n100.r06.s039_output/n100.r06.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s039_output/n100.r06.s039.trimmed.sorted.bam" > "n100.r06.s039_output/n100.r06.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s039_output/n100.r06.s039.depth.txt" "n100.r06.s039_output/n100.r06.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s039_output/n100.r06.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s039_output/n100.r06.s039.reference.fas" | bcftools consensus -m "n100.r06.s039_output/n100.r06.s039.low_depth.tsv" tmp.vcf.gz > "n100.r06.s039_output/n100.r06.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:88416f639f5d11144c0d9aa05c787d3d773a464e2f335dcaf358daf1ee866121 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=129.8MiB
	    disk mean=6.4MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:12:20 scheduler task beb65b9b (flow 5de80074): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s039.tar.gz resources {}
2021/07/08 17:12:20  ->  n100.r06.s039.Main.cp_out_file 5de80074 exec extern s3://niema-test/n100/r06/n100.r06.s039.tar.gz 35.8MiB
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloading (try 0): started
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloading list<val<.=9d69a757 35.7MiB> 35.7MiB>
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloading val<.=e24446c4 35.4MiB>
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloading val<.=ae88e88d 35.4MiB>
2021/07/08 17:12:20 scheduler task e95b2798 (flow 8469a670): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9f43255e2b76006a9d113b983033ac28542d309e3718336936344bdf51750b5e -> s3://niema-test/n100/r06/n100.r06.s002.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:20  <-  n100.r06.s002.Main.cp_out_file 8469a670 ok   extern 0s 35.8MiB
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloaded list<val<.=9d69a757 35.7MiB> 35.7MiB>
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloaded val<.=e24446c4 35.4MiB>
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloaded val<.=ae88e88d 35.4MiB>
2021/07/08 17:12:20 scheduler task 371261a3 (flow e80820b2): unloading (try 0): successful, next state: complete
2021/07/08 17:12:20  <-  n100.r06.s017.Main.out_file e80820b2 ok     exec 4m54s 35.7MiB
2021/07/08 17:12:20 n100.r06.s017.Main.out_file e80820b2 n100/r06/n100.r06.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc4b4ac4b4767e391f00f5b232f5fae087f4ff45bf56546549e21532a44bc02a
	sha256:e80820b2beabd337153d57cdcc234e8f2796caa64d583ca7dde1a6685bce7426
	ec2-3-142-210-145.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/371261a31e2d871e603679bb74f3c40a907aae973068d4618e2ff6284afec388
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r06.s017_output"
	    wget -O "n100.r06.s017_output/n100.r06.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r06.s017_output/n100.r06.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r06.s017_output/n100.r06.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r06.s017_output/n100.r06.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r06.s017_output/n100.r06.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r06.s017_output/n100.r06.s017.reference.fas" "n100.r06.s017_output/n100.r06.s017.fq1.fastq" "n100.r06.s017_output/n100.r06.s017.fq2.fastq" | samtools view -bS - > "n100.r06.s017_output/n100.r06.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s017_output/n100.r06.s017.untrimmed.sorted.bam" "n100.r06.s017_output/n100.r06.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r06.s017_output/n100.r06.s017.untrimmed.sorted.bam" -b "n100.r06.s017_output/n100.r06.s017.primers.bed" -p "n100.r06.s017_output/n100.r06.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" "n100.r06.s017_output/n100.r06.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r06.s017_output/n100.r06.s017.reference.fas" "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" > "n100.r06.s017_output/n100.r06.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r06.s017_output/n100.r06.s017.reference.fas" --call-indels "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" > "n100.r06.s017_output/n100.r06.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r06.s017_output/n100.r06.s017.trimmed.sorted.bam" > "n100.r06.s017_output/n100.r06.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r06.s017_output/n100.r06.s017.depth.txt" "n100.r06.s017_output/n100.r06.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r06.s017_output/n100.r06.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r06.s017_output/n100.r06.s017.reference.fas" | bcftools consensus -m "n100.r06.s017_output/n100.r06.s017.low_depth.tsv" tmp.vcf.gz > "n100.r06.s017_output/n100.r06.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r06.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9d69a757edc195a72c1e55a55ce9ddf5746490e3c3868ecd9b91b5d6dab5baaf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=208B max=1.0KiB
2021/07/08 17:12:20 scheduler task 974a82a4 (flow 242f869e): submitted with execconfig extern url s3://niema-test/n100/r06/n100.r06.s017.tar.gz resources {}
2021/07/08 17:12:20  ->  n100.r06.s017.Main.cp_out_file 242f869e exec extern s3://niema-test/n100/r06/n100.r06.s017.tar.gz 35.7MiB
2021/07/08 17:12:20 scheduler task 2fb124d9 (flow 5e986eb3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:edbf5daa2016e6dcdee341d6e4b87222afb4b6480e30dd959dd2b9c1089c01b0 -> s3://niema-test/n100/r06/n100.r06.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:20  <-  n100.r06.s093.Main.cp_out_file 5e986eb3 ok   extern 0s 35.7MiB
2021/07/08 17:12:20 scheduler task beb65b9b (flow 5de80074): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:88416f639f5d11144c0d9aa05c787d3d773a464e2f335dcaf358daf1ee866121 -> s3://niema-test/n100/r06/n100.r06.s039.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:12:20  <-  n100.r06.s039.Main.cp_out_file 5de80074 ok   extern 0s 35.8MiB
2021/07/08 17:12:21 scheduler task 974a82a4 (flow 242f869e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9d69a757edc195a72c1e55a55ce9ddf5746490e3c3868ecd9b91b5d6dab5baaf -> s3://niema-test/n100/r06/n100.r06.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:12:21  <-  n100.r06.s017.Main.cp_out_file 242f869e ok   extern 0s 35.7MiB
2021/07/08 17:12:21 total n=400 time=6m50s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r06.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s001.Main.fq1         1   0      0B                                                      
	n100.r06.s001.Main.fq2         1   0      0B                                                      
	n100.r06.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s002.Main.fq1         1   0      0B                                                      
	n100.r06.s002.Main.fq2         1   0      0B                                                      
	n100.r06.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s003.Main.fq1         1   0      0B                                                      
	n100.r06.s003.Main.fq2         1   0      0B                                                      
	n100.r06.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s004.Main.fq1         1   0      0B                                                      
	n100.r06.s004.Main.fq2         1   0      0B                                                      
	n100.r06.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s005.Main.fq1         1   0      0B                                                      
	n100.r06.s005.Main.fq2         1   0      0B                                                      
	n100.r06.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s006.Main.fq1         1   0      0B                                                      
	n100.r06.s006.Main.fq2         1   0      0B                                                      
	n100.r06.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s007.Main.fq1         1   0      0B                                                      
	n100.r06.s007.Main.fq2         1   0      0B                                                      
	n100.r06.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s008.Main.fq1         1   0      0B                                                      
	n100.r06.s008.Main.fq2         1   0      0B                                                      
	n100.r06.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s009.Main.fq1         1   0      0B                                                      
	n100.r06.s009.Main.fq2         1   0      0B                                                      
	n100.r06.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s010.Main.fq1         1   0      0B                                                      
	n100.r06.s010.Main.fq2         1   0      0B                                                      
	n100.r06.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s011.Main.fq1         1   0      0B                                                      
	n100.r06.s011.Main.fq2         1   0      0B                                                      
	n100.r06.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s012.Main.fq1         1   0      0B                                                      
	n100.r06.s012.Main.fq2         1   0      0B                                                      
	n100.r06.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s013.Main.fq1         1   0      0B                                                      
	n100.r06.s013.Main.fq2         1   0      0B                                                      
	n100.r06.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s014.Main.fq1         1   0      0B                                                      
	n100.r06.s014.Main.fq2         1   0      0B                                                      
	n100.r06.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s015.Main.fq1         1   0      0B                                                      
	n100.r06.s015.Main.fq2         1   0      0B                                                      
	n100.r06.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s016.Main.fq1         1   0      0B                                                      
	n100.r06.s016.Main.fq2         1   0      0B                                                      
	n100.r06.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s017.Main.fq1         1   0      0B                                                      
	n100.r06.s017.Main.fq2         1   0      0B                                                      
	n100.r06.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s018.Main.fq1         1   0      0B                                                      
	n100.r06.s018.Main.fq2         1   0      0B                                                      
	n100.r06.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s019.Main.fq1         1   0      0B                                                      
	n100.r06.s019.Main.fq2         1   0      0B                                                      
	n100.r06.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s020.Main.fq1         1   0      0B                                                      
	n100.r06.s020.Main.fq2         1   0      0B                                                      
	n100.r06.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s021.Main.fq1         1   0      0B                                                      
	n100.r06.s021.Main.fq2         1   0      0B                                                      
	n100.r06.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s022.Main.fq1         1   0      0B                                                      
	n100.r06.s022.Main.fq2         1   0      0B                                                      
	n100.r06.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s023.Main.fq1         1   0      0B                                                      
	n100.r06.s023.Main.fq2         1   0      0B                                                      
	n100.r06.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s024.Main.fq1         1   0      0B                                                      
	n100.r06.s024.Main.fq2         1   0      0B                                                      
	n100.r06.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s025.Main.fq1         1   0      0B                                                      
	n100.r06.s025.Main.fq2         1   0      0B                                                      
	n100.r06.s025.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s026.Main.fq1         1   0      0B                                                      
	n100.r06.s026.Main.fq2         1   0      0B                                                      
	n100.r06.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s027.Main.fq1         1   0      0B                                                      
	n100.r06.s027.Main.fq2         1   0      0B                                                      
	n100.r06.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s028.Main.fq1         1   0      0B                                                      
	n100.r06.s028.Main.fq2         1   0      0B                                                      
	n100.r06.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s029.Main.fq1         1   0      0B                                                      
	n100.r06.s029.Main.fq2         1   0      0B                                                      
	n100.r06.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s030.Main.fq1         1   0      0B                                                      
	n100.r06.s030.Main.fq2         1   0      0B                                                      
	n100.r06.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s031.Main.fq1         1   0      0B                                                      
	n100.r06.s031.Main.fq2         1   0      0B                                                      
	n100.r06.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s032.Main.fq1         1   0      0B                                                      
	n100.r06.s032.Main.fq2         1   0      0B                                                      
	n100.r06.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s033.Main.fq1         1   0      0B                                                      
	n100.r06.s033.Main.fq2         1   0      0B                                                      
	n100.r06.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s034.Main.fq1         1   0      0B                                                      
	n100.r06.s034.Main.fq2         1   0      0B                                                      
	n100.r06.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s035.Main.fq1         1   0      0B                                                      
	n100.r06.s035.Main.fq2         1   0      0B                                                      
	n100.r06.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s036.Main.fq1         1   0      0B                                                      
	n100.r06.s036.Main.fq2         1   0      0B                                                      
	n100.r06.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s037.Main.fq1         1   0      0B                                                      
	n100.r06.s037.Main.fq2         1   0      0B                                                      
	n100.r06.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s038.Main.fq1         1   0      0B                                                      
	n100.r06.s038.Main.fq2         1   0      0B                                                      
	n100.r06.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s039.Main.fq1         1   0      0B                                                      
	n100.r06.s039.Main.fq2         1   0      0B                                                      
	n100.r06.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s040.Main.fq1         1   0      0B                                                      
	n100.r06.s040.Main.fq2         1   0      0B                                                      
	n100.r06.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s041.Main.fq1         1   0      0B                                                      
	n100.r06.s041.Main.fq2         1   0      0B                                                      
	n100.r06.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s042.Main.fq1         1   0      0B                                                      
	n100.r06.s042.Main.fq2         1   0      0B                                                      
	n100.r06.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s043.Main.fq1         1   0      0B                                                      
	n100.r06.s043.Main.fq2         1   0      0B                                                      
	n100.r06.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s044.Main.fq1         1   0      0B                                                      
	n100.r06.s044.Main.fq2         1   0      0B                                                      
	n100.r06.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s045.Main.fq1         1   0      0B                                                      
	n100.r06.s045.Main.fq2         1   0      0B                                                      
	n100.r06.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s046.Main.fq1         1   0      0B                                                      
	n100.r06.s046.Main.fq2         1   0      0B                                                      
	n100.r06.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s047.Main.fq1         1   0      0B                                                      
	n100.r06.s047.Main.fq2         1   0      0B                                                      
	n100.r06.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s048.Main.fq1         1   0      0B                                                      
	n100.r06.s048.Main.fq2         1   0      0B                                                      
	n100.r06.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s049.Main.fq1         1   0      0B                                                      
	n100.r06.s049.Main.fq2         1   0      0B                                                      
	n100.r06.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s050.Main.fq1         1   0      0B                                                      
	n100.r06.s050.Main.fq2         1   0      0B                                                      
	n100.r06.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s051.Main.fq1         1   0      0B                                                      
	n100.r06.s051.Main.fq2         1   0      0B                                                      
	n100.r06.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s052.Main.fq1         1   0      0B                                                      
	n100.r06.s052.Main.fq2         1   0      0B                                                      
	n100.r06.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s053.Main.fq1         1   0      0B                                                      
	n100.r06.s053.Main.fq2         1   0      0B                                                      
	n100.r06.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s054.Main.fq1         1   0      0B                                                      
	n100.r06.s054.Main.fq2         1   0      0B                                                      
	n100.r06.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s055.Main.fq1         1   0      0B                                                      
	n100.r06.s055.Main.fq2         1   0      0B                                                      
	n100.r06.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s056.Main.fq1         1   0      0B                                                      
	n100.r06.s056.Main.fq2         1   0      0B                                                      
	n100.r06.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s057.Main.fq1         1   0      0B                                                      
	n100.r06.s057.Main.fq2         1   0      0B                                                      
	n100.r06.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s058.Main.fq1         1   0      0B                                                      
	n100.r06.s058.Main.fq2         1   0      0B                                                      
	n100.r06.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s059.Main.fq1         1   0      0B                                                      
	n100.r06.s059.Main.fq2         1   0      0B                                                      
	n100.r06.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s060.Main.fq1         1   0      0B                                                      
	n100.r06.s060.Main.fq2         1   0      0B                                                      
	n100.r06.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s061.Main.fq1         1   0      0B                                                      
	n100.r06.s061.Main.fq2         1   0      0B                                                      
	n100.r06.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s062.Main.fq1         1   0      0B                                                      
	n100.r06.s062.Main.fq2         1   0      0B                                                      
	n100.r06.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s063.Main.fq1         1   0      0B                                                      
	n100.r06.s063.Main.fq2         1   0      0B                                                      
	n100.r06.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s064.Main.fq1         1   0      0B                                                      
	n100.r06.s064.Main.fq2         1   0      0B                                                      
	n100.r06.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s065.Main.fq1         1   0      0B                                                      
	n100.r06.s065.Main.fq2         1   0      0B                                                      
	n100.r06.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s066.Main.fq1         1   0      0B                                                      
	n100.r06.s066.Main.fq2         1   0      0B                                                      
	n100.r06.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s067.Main.fq1         1   0      0B                                                      
	n100.r06.s067.Main.fq2         1   0      0B                                                      
	n100.r06.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s068.Main.fq1         1   0      0B                                                      
	n100.r06.s068.Main.fq2         1   0      0B                                                      
	n100.r06.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s069.Main.fq1         1   0      0B                                                      
	n100.r06.s069.Main.fq2         1   0      0B                                                      
	n100.r06.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s070.Main.fq1         1   0      0B                                                      
	n100.r06.s070.Main.fq2         1   0      0B                                                      
	n100.r06.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s071.Main.fq1         1   0      0B                                                      
	n100.r06.s071.Main.fq2         1   0      0B                                                      
	n100.r06.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s072.Main.fq1         1   0      0B                                                      
	n100.r06.s072.Main.fq2         1   0      0B                                                      
	n100.r06.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s073.Main.fq1         1   0      0B                                                      
	n100.r06.s073.Main.fq2         1   0      0B                                                      
	n100.r06.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s074.Main.fq1         1   0      0B                                                      
	n100.r06.s074.Main.fq2         1   0      0B                                                      
	n100.r06.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s075.Main.fq1         1   0      0B                                                      
	n100.r06.s075.Main.fq2         1   0      0B                                                      
	n100.r06.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s076.Main.fq1         1   0      0B                                                      
	n100.r06.s076.Main.fq2         1   0      0B                                                      
	n100.r06.s076.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s077.Main.fq1         1   0      0B                                                      
	n100.r06.s077.Main.fq2         1   0      0B                                                      
	n100.r06.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s078.Main.fq1         1   0      0B                                                      
	n100.r06.s078.Main.fq2         1   0      0B                                                      
	n100.r06.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s079.Main.fq1         1   0      0B                                                      
	n100.r06.s079.Main.fq2         1   0      0B                                                      
	n100.r06.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s080.Main.fq1         1   0      0B                                                      
	n100.r06.s080.Main.fq2         1   0      0B                                                      
	n100.r06.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s081.Main.fq1         1   0      0B                                                      
	n100.r06.s081.Main.fq2         1   0      0B                                                      
	n100.r06.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s082.Main.fq1         1   0      0B                                                      
	n100.r06.s082.Main.fq2         1   0      0B                                                      
	n100.r06.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s083.Main.fq1         1   0      0B                                                      
	n100.r06.s083.Main.fq2         1   0      0B                                                      
	n100.r06.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s084.Main.fq1         1   0      0B                                                      
	n100.r06.s084.Main.fq2         1   0      0B                                                      
	n100.r06.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s085.Main.fq1         1   0      0B                                                      
	n100.r06.s085.Main.fq2         1   0      0B                                                      
	n100.r06.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s086.Main.fq1         1   0      0B                                                      
	n100.r06.s086.Main.fq2         1   0      0B                                                      
	n100.r06.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s087.Main.fq1         1   0      0B                                                      
	n100.r06.s087.Main.fq2         1   0      0B                                                      
	n100.r06.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s088.Main.fq1         1   0      0B                                                      
	n100.r06.s088.Main.fq2         1   0      0B                                                      
	n100.r06.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s089.Main.fq1         1   0      0B                                                      
	n100.r06.s089.Main.fq2         1   0      0B                                                      
	n100.r06.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s090.Main.fq1         1   0      0B                                                      
	n100.r06.s090.Main.fq2         1   0      0B                                                      
	n100.r06.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s091.Main.fq1         1   0      0B                                                      
	n100.r06.s091.Main.fq2         1   0      0B                                                      
	n100.r06.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s092.Main.fq1         1   0      0B                                                      
	n100.r06.s092.Main.fq2         1   0      0B                                                      
	n100.r06.s092.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s093.Main.fq1         1   0      0B                                                      
	n100.r06.s093.Main.fq2         1   0      0B                                                      
	n100.r06.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s094.Main.fq1         1   0      0B                                                      
	n100.r06.s094.Main.fq2         1   0      0B                                                      
	n100.r06.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s095.Main.fq1         1   0      0B                                                      
	n100.r06.s095.Main.fq2         1   0      0B                                                      
	n100.r06.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s096.Main.fq1         1   0      0B                                                      
	n100.r06.s096.Main.fq2         1   0      0B                                                      
	n100.r06.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s097.Main.fq1         1   0      0B                                                      
	n100.r06.s097.Main.fq2         1   0      0B                                                      
	n100.r06.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s098.Main.fq1         1   0      0B                                                      
	n100.r06.s098.Main.fq2         1   0      0B                                                      
	n100.r06.s098.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s099.Main.fq1         1   0      0B                                                      
	n100.r06.s099.Main.fq2         1   0      0B                                                      
	n100.r06.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r06.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r06.s100.Main.fq1         1   0      0B                                                      
	n100.r06.s100.Main.fq2         1   0      0B                                                      
	n100.r06.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r06.s001.Main.out_file, n100.r06.s002.Main.out_file, n100.r06.s003.Main.out_file, n100.r06.s004.Main.out_file, n100.r06.s005.Main.out_file, n100.r06.s006.Main.out_file, n100.r06.s007.Main.out_file, n100.r06.s008.Main.out_file, n100.r06.s009.Main.out_file, n100.r06.s010.Main.out_file, n100.r06.s011.Main.out_file, n100.r06.s012.Main.out_file, n100.r06.s013.Main.out_file, n100.r06.s014.Main.out_file, n100.r06.s015.Main.out_file, n100.r06.s016.Main.out_file, n100.r06.s017.Main.out_file, n100.r06.s018.Main.out_file, n100.r06.s019.Main.out_file, n100.r06.s020.Main.out_file, n100.r06.s021.Main.out_file, n100.r06.s022.Main.out_file, n100.r06.s023.Main.out_file, n100.r06.s024.Main.out_file, n100.r06.s025.Main.out_file, n100.r06.s026.Main.out_file, n100.r06.s027.Main.out_file, n100.r06.s028.Main.out_file, n100.r06.s029.Main.out_file, n100.r06.s030.Main.out_file, n100.r06.s031.Main.out_file, n100.r06.s032.Main.out_file, n100.r06.s033.Main.out_file, n100.r06.s034.Main.out_file, n100.r06.s035.Main.out_file, n100.r06.s036.Main.out_file, n100.r06.s037.Main.out_file, n100.r06.s038.Main.out_file, n100.r06.s039.Main.out_file, n100.r06.s040.Main.out_file, n100.r06.s041.Main.out_file, n100.r06.s042.Main.out_file, n100.r06.s043.Main.out_file, n100.r06.s044.Main.out_file, n100.r06.s045.Main.out_file, n100.r06.s046.Main.out_file, n100.r06.s047.Main.out_file, n100.r06.s048.Main.out_file, n100.r06.s049.Main.out_file, n100.r06.s050.Main.out_file, n100.r06.s051.Main.out_file, n100.r06.s052.Main.out_file, n100.r06.s053.Main.out_file, n100.r06.s054.Main.out_file, n100.r06.s055.Main.out_file, n100.r06.s056.Main.out_file, n100.r06.s057.Main.out_file, n100.r06.s058.Main.out_file, n100.r06.s059.Main.out_file, n100.r06.s060.Main.out_file, n100.r06.s061.Main.out_file, n100.r06.s062.Main.out_file, n100.r06.s063.Main.out_file, n100.r06.s064.Main.out_file, n100.r06.s065.Main.out_file, n100.r06.s066.Main.out_file, n100.r06.s067.Main.out_file, n100.r06.s068.Main.out_file, n100.r06.s069.Main.out_file, n100.r06.s070.Main.out_file, n100.r06.s071.Main.out_file, n100.r06.s072.Main.out_file, n100.r06.s073.Main.out_file, n100.r06.s074.Main.out_file, n100.r06.s075.Main.out_file, n100.r06.s076.Main.out_file, n100.r06.s077.Main.out_file, n100.r06.s078.Main.out_file, n100.r06.s079.Main.out_file, n100.r06.s080.Main.out_file, n100.r06.s081.Main.out_file, n100.r06.s082.Main.out_file, n100.r06.s083.Main.out_file, n100.r06.s084.Main.out_file, n100.r06.s085.Main.out_file, n100.r06.s086.Main.out_file, n100.r06.s087.Main.out_file, n100.r06.s088.Main.out_file, n100.r06.s089.Main.out_file, n100.r06.s090.Main.out_file, n100.r06.s091.Main.out_file, n100.r06.s092.Main.out_file, n100.r06.s093.Main.out_file, n100.r06.s094.Main.out_file, n100.r06.s095.Main.out_file, n100.r06.s096.Main.out_file, n100.r06.s097.Main.out_file, n100.r06.s098.Main.out_file, n100.r06.s099.Main.out_file, n100.r06.s100.Main.out_file
2021/07/08 17:12:21 result: [val<.=1d6b0235 35.7MiB>, val<.=9f43255e 35.8MiB>, val<.=84e29f2b 35.7MiB>, val<.=492c7fbc 35.8MiB>, val<.=9bbb3517 35.7MiB>, val<.=97938ac0 35.7MiB>, val<.=f3815b6b 35.7MiB>, val<.=6d87f1fe 35.7MiB>, val<.=39cd1a90 35.7MiB>, val<.=63375218 35.7MiB>, val<.=4ec6c11b 35.7MiB>, val<.=12c319df 35.8MiB>, val<.=66672e1d 35.7MiB>, val<.=8de85ec6 35.7MiB>, val<.=5f9f0c10 35.7MiB>, val<.=d07a045c 35.8MiB>, val<.=9d69a757 35.7MiB>, val<.=eedfbe36 35.7MiB>, val<.=0ab76569 35.7MiB>, val<.=20a927e6 35.7MiB>, val<.=59d72217 35.7MiB>, val<.=539e81e9 35.7MiB>, val<.=da2109f2 35.7MiB>, val<.=d6fb04ed 35.7MiB>, val<.=d9327563 35.7MiB>, val<.=aad0e428 35.7MiB>, val<.=c2e0d733 35.7MiB>, val<.=679f8c09 35.7MiB>, val<.=18a2649d 35.8MiB>, val<.=fd07da1f 35.8MiB>, val<.=1aeb2117 35.7MiB>, val<.=ff5e8d23 35.7MiB>, val<.=85b8de16 35.8MiB>, val<.=bdd9d9bb 35.8MiB>, val<.=a9ca9162 35.7MiB>, val<.=2bdbfcd1 35.7MiB>, val<.=d59d15a7 35.7MiB>, val<.=b453df64 35.7MiB>, val<.=88416f63 35.8MiB>, val<.=142c42ca 35.7MiB>, val<.=f1eb7424 35.7MiB>, val<.=8c5e66d5 35.8MiB>, val<.=fcb4d4c7 35.7MiB>, val<.=0c216b2f 35.8MiB>, val<.=d77ba7fe 35.7MiB>, val<.=2fce53f7 35.7MiB>, val<.=00dc9f2f 35.7MiB>, val<.=a96fa130 35.7MiB>, val<.=e2b0e572 35.7MiB>, val<.=631d550f 35.7MiB>, val<.=6e2ceee9 35.7MiB>, val<.=50ad57c7 35.7MiB>, val<.=f100b6dd 35.7MiB>, val<.=ffd2476d 35.8MiB>, val<.=87b23703 35.7MiB>, val<.=67b0d7ef 35.8MiB>, val<.=60703764 35.7MiB>, val<.=bf77e906 35.7MiB>, val<.=064e9e55 35.8MiB>, val<.=71ee7203 35.7MiB>, val<.=f9cfaf0e 35.7MiB>, val<.=a214db06 35.7MiB>, val<.=7d0e33ba 35.7MiB>, val<.=52dddb79 35.7MiB>, val<.=39a6611b 35.7MiB>, val<.=46948960 35.7MiB>, val<.=1fa6d240 35.7MiB>, val<.=0c2a4eda 35.7MiB>, val<.=95b5d405 35.7MiB>, val<.=1a561b74 35.7MiB>, val<.=2dbe45c2 35.8MiB>, val<.=9347c4e9 35.7MiB>, val<.=68306eb2 35.7MiB>, val<.=d407d1a2 35.8MiB>, val<.=d53791b7 35.7MiB>, val<.=182ff3ae 35.7MiB>, val<.=c3164818 35.7MiB>, val<.=158e09f5 35.7MiB>, val<.=a59ecd45 35.7MiB>, val<.=11028281 35.7MiB>, val<.=c7f18318 35.7MiB>, val<.=7f1ac774 35.7MiB>, val<.=dc1a80f8 35.8MiB>, val<.=72732f57 35.7MiB>, val<.=9693923f 35.8MiB>, val<.=baa4f48c 35.8MiB>, val<.=4d60d8dd 35.7MiB>, val<.=a641f18c 35.7MiB>, val<.=3701d7cf 35.8MiB>, val<.=1da819c3 35.7MiB>, val<.=6f601bb9 35.8MiB>, val<.=f8f1bb86 35.7MiB>, val<.=edbf5daa 35.7MiB>, val<.=117938ba 35.7MiB>, val<.=0e8e46c1 35.7MiB>, val<.=561c8a5f 35.8MiB>, val<.=bb1eae16 35.7MiB>, val<.=68cf90d0 35.7MiB>, val<.=dcf1ad1b 35.7MiB>, val<.=3cb64af9 35.8MiB>]
2021/07/08 17:12:21 waiting for 1 background tasks to complete
