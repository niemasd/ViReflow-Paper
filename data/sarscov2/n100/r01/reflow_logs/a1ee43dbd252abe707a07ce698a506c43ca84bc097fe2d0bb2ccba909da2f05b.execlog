2021/07/08 13:52:11 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 13:52:11 run ID: a1ee43db
2021/07/08 13:52:11 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r01.rf
	(no params)
	(no arguments)
2021/07/08 13:52:11 Trace: /home/niema/.reflow/runs/a1ee43dbd252abe707a07ce698a506c43ca84bc097fe2d0bb2ccba909da2f05b.trace
2021/07/08 13:52:11 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 13:52:12 scheduler task 7cbb434c (flow 8d902717): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s073_output\"\n        wget -O \"n100.r01.s073_output/n100.r01.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s073_output/n100.r01.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s073_output/n100.r01.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s073_output/n100.r01.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s073_output/n100.r01.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s073_output/n100.r01.s073.reference.fas\" \"n100.r01.s073_output/n100.r01.s073.fq1.fastq\" \"n100.r01.s073_output/n100.r01.s073.fq2.fastq\" | samtools view -bS - > \"n100.r01.s073_output/n100.r01.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s073_output/n100.r01.s073.untrimmed.sorted.bam\" \"n100.r01.s073_output/n100.r01.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s073_output/n100.r01.s073.untrimmed.sorted.bam\" -b \"n100.r01.s073_output/n100.r01.s073.primers.bed\" -p \"n100.r01.s073_output/n100.r01.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam\" \"n100.r01.s073_output/n100.r01.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s073_output/n100.r01.s073.reference.fas\" \"n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam\" > \"n100.r01.s073_output/n100.r01.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s073_output/n100.r01.s073.reference.fas\" --call-indels \"n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam\" > \"n100.r01.s073_output/n100.r01.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam\" > \"n100.r01.s073_output/n100.r01.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s073_output/n100.r01.s073.depth.txt\" \"n100.r01.s073_output/n100.r01.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s073_output/n100.r01.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s073_output/n100.r01.s073.reference.fas\" | bcftools consensus -m \"n100.r01.s073_output/n100.r01.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s073_output/n100.r01.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task ab91edce (flow bff0a93a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s077_output\"\n        wget -O \"n100.r01.s077_output/n100.r01.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s077_output/n100.r01.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s077_output/n100.r01.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s077_output/n100.r01.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s077_output/n100.r01.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s077_output/n100.r01.s077.reference.fas\" \"n100.r01.s077_output/n100.r01.s077.fq1.fastq\" \"n100.r01.s077_output/n100.r01.s077.fq2.fastq\" | samtools view -bS - > \"n100.r01.s077_output/n100.r01.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s077_output/n100.r01.s077.untrimmed.sorted.bam\" \"n100.r01.s077_output/n100.r01.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s077_output/n100.r01.s077.untrimmed.sorted.bam\" -b \"n100.r01.s077_output/n100.r01.s077.primers.bed\" -p \"n100.r01.s077_output/n100.r01.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam\" \"n100.r01.s077_output/n100.r01.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s077_output/n100.r01.s077.reference.fas\" \"n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam\" > \"n100.r01.s077_output/n100.r01.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s077_output/n100.r01.s077.reference.fas\" --call-indels \"n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam\" > \"n100.r01.s077_output/n100.r01.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam\" > \"n100.r01.s077_output/n100.r01.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s077_output/n100.r01.s077.depth.txt\" \"n100.r01.s077_output/n100.r01.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s077_output/n100.r01.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s077_output/n100.r01.s077.reference.fas\" | bcftools consensus -m \"n100.r01.s077_output/n100.r01.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s077_output/n100.r01.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task f5c4ee3f (flow a80b5a2d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s078_output\"\n        wget -O \"n100.r01.s078_output/n100.r01.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s078_output/n100.r01.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s078_output/n100.r01.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s078_output/n100.r01.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s078_output/n100.r01.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s078_output/n100.r01.s078.reference.fas\" \"n100.r01.s078_output/n100.r01.s078.fq1.fastq\" \"n100.r01.s078_output/n100.r01.s078.fq2.fastq\" | samtools view -bS - > \"n100.r01.s078_output/n100.r01.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s078_output/n100.r01.s078.untrimmed.sorted.bam\" \"n100.r01.s078_output/n100.r01.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s078_output/n100.r01.s078.untrimmed.sorted.bam\" -b \"n100.r01.s078_output/n100.r01.s078.primers.bed\" -p \"n100.r01.s078_output/n100.r01.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam\" \"n100.r01.s078_output/n100.r01.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s078_output/n100.r01.s078.reference.fas\" \"n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam\" > \"n100.r01.s078_output/n100.r01.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s078_output/n100.r01.s078.reference.fas\" --call-indels \"n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam\" > \"n100.r01.s078_output/n100.r01.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam\" > \"n100.r01.s078_output/n100.r01.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s078_output/n100.r01.s078.depth.txt\" \"n100.r01.s078_output/n100.r01.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s078_output/n100.r01.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s078_output/n100.r01.s078.reference.fas\" | bcftools consensus -m \"n100.r01.s078_output/n100.r01.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s078_output/n100.r01.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 489636ff (flow 301cc57e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s015_output\"\n        wget -O \"n100.r01.s015_output/n100.r01.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s015_output/n100.r01.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s015_output/n100.r01.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s015_output/n100.r01.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s015_output/n100.r01.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s015_output/n100.r01.s015.reference.fas\" \"n100.r01.s015_output/n100.r01.s015.fq1.fastq\" \"n100.r01.s015_output/n100.r01.s015.fq2.fastq\" | samtools view -bS - > \"n100.r01.s015_output/n100.r01.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s015_output/n100.r01.s015.untrimmed.sorted.bam\" \"n100.r01.s015_output/n100.r01.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s015_output/n100.r01.s015.untrimmed.sorted.bam\" -b \"n100.r01.s015_output/n100.r01.s015.primers.bed\" -p \"n100.r01.s015_output/n100.r01.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam\" \"n100.r01.s015_output/n100.r01.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s015_output/n100.r01.s015.reference.fas\" \"n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam\" > \"n100.r01.s015_output/n100.r01.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s015_output/n100.r01.s015.reference.fas\" --call-indels \"n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam\" > \"n100.r01.s015_output/n100.r01.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam\" > \"n100.r01.s015_output/n100.r01.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s015_output/n100.r01.s015.depth.txt\" \"n100.r01.s015_output/n100.r01.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s015_output/n100.r01.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s015_output/n100.r01.s015.reference.fas\" | bcftools consensus -m \"n100.r01.s015_output/n100.r01.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s015_output/n100.r01.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 0f1079d5 (flow 0bcaa813): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s013_output\"\n        wget -O \"n100.r01.s013_output/n100.r01.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s013_output/n100.r01.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s013_output/n100.r01.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s013_output/n100.r01.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s013_output/n100.r01.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s013_output/n100.r01.s013.reference.fas\" \"n100.r01.s013_output/n100.r01.s013.fq1.fastq\" \"n100.r01.s013_output/n100.r01.s013.fq2.fastq\" | samtools view -bS - > \"n100.r01.s013_output/n100.r01.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s013_output/n100.r01.s013.untrimmed.sorted.bam\" \"n100.r01.s013_output/n100.r01.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s013_output/n100.r01.s013.untrimmed.sorted.bam\" -b \"n100.r01.s013_output/n100.r01.s013.primers.bed\" -p \"n100.r01.s013_output/n100.r01.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam\" \"n100.r01.s013_output/n100.r01.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s013_output/n100.r01.s013.reference.fas\" \"n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam\" > \"n100.r01.s013_output/n100.r01.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s013_output/n100.r01.s013.reference.fas\" --call-indels \"n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam\" > \"n100.r01.s013_output/n100.r01.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam\" > \"n100.r01.s013_output/n100.r01.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s013_output/n100.r01.s013.depth.txt\" \"n100.r01.s013_output/n100.r01.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s013_output/n100.r01.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s013_output/n100.r01.s013.reference.fas\" | bcftools consensus -m \"n100.r01.s013_output/n100.r01.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s013_output/n100.r01.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 4d45e98c (flow 3fec048b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s092_output\"\n        wget -O \"n100.r01.s092_output/n100.r01.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s092_output/n100.r01.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s092_output/n100.r01.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s092_output/n100.r01.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s092_output/n100.r01.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s092_output/n100.r01.s092.reference.fas\" \"n100.r01.s092_output/n100.r01.s092.fq1.fastq\" \"n100.r01.s092_output/n100.r01.s092.fq2.fastq\" | samtools view -bS - > \"n100.r01.s092_output/n100.r01.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s092_output/n100.r01.s092.untrimmed.sorted.bam\" \"n100.r01.s092_output/n100.r01.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s092_output/n100.r01.s092.untrimmed.sorted.bam\" -b \"n100.r01.s092_output/n100.r01.s092.primers.bed\" -p \"n100.r01.s092_output/n100.r01.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam\" \"n100.r01.s092_output/n100.r01.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s092_output/n100.r01.s092.reference.fas\" \"n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam\" > \"n100.r01.s092_output/n100.r01.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s092_output/n100.r01.s092.reference.fas\" --call-indels \"n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam\" > \"n100.r01.s092_output/n100.r01.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam\" > \"n100.r01.s092_output/n100.r01.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s092_output/n100.r01.s092.depth.txt\" \"n100.r01.s092_output/n100.r01.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s092_output/n100.r01.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s092_output/n100.r01.s092.reference.fas\" | bcftools consensus -m \"n100.r01.s092_output/n100.r01.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s092_output/n100.r01.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task aa7885b4 (flow 963957c7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s011_output\"\n        wget -O \"n100.r01.s011_output/n100.r01.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s011_output/n100.r01.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s011_output/n100.r01.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s011_output/n100.r01.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s011_output/n100.r01.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s011_output/n100.r01.s011.reference.fas\" \"n100.r01.s011_output/n100.r01.s011.fq1.fastq\" \"n100.r01.s011_output/n100.r01.s011.fq2.fastq\" | samtools view -bS - > \"n100.r01.s011_output/n100.r01.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s011_output/n100.r01.s011.untrimmed.sorted.bam\" \"n100.r01.s011_output/n100.r01.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s011_output/n100.r01.s011.untrimmed.sorted.bam\" -b \"n100.r01.s011_output/n100.r01.s011.primers.bed\" -p \"n100.r01.s011_output/n100.r01.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam\" \"n100.r01.s011_output/n100.r01.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s011_output/n100.r01.s011.reference.fas\" \"n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam\" > \"n100.r01.s011_output/n100.r01.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s011_output/n100.r01.s011.reference.fas\" --call-indels \"n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam\" > \"n100.r01.s011_output/n100.r01.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam\" > \"n100.r01.s011_output/n100.r01.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s011_output/n100.r01.s011.depth.txt\" \"n100.r01.s011_output/n100.r01.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s011_output/n100.r01.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s011_output/n100.r01.s011.reference.fas\" | bcftools consensus -m \"n100.r01.s011_output/n100.r01.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s011_output/n100.r01.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 378eabfc (flow 5ba5cdc9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s014_output\"\n        wget -O \"n100.r01.s014_output/n100.r01.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s014_output/n100.r01.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s014_output/n100.r01.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s014_output/n100.r01.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s014_output/n100.r01.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s014_output/n100.r01.s014.reference.fas\" \"n100.r01.s014_output/n100.r01.s014.fq1.fastq\" \"n100.r01.s014_output/n100.r01.s014.fq2.fastq\" | samtools view -bS - > \"n100.r01.s014_output/n100.r01.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s014_output/n100.r01.s014.untrimmed.sorted.bam\" \"n100.r01.s014_output/n100.r01.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s014_output/n100.r01.s014.untrimmed.sorted.bam\" -b \"n100.r01.s014_output/n100.r01.s014.primers.bed\" -p \"n100.r01.s014_output/n100.r01.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam\" \"n100.r01.s014_output/n100.r01.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s014_output/n100.r01.s014.reference.fas\" \"n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam\" > \"n100.r01.s014_output/n100.r01.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s014_output/n100.r01.s014.reference.fas\" --call-indels \"n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam\" > \"n100.r01.s014_output/n100.r01.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam\" > \"n100.r01.s014_output/n100.r01.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s014_output/n100.r01.s014.depth.txt\" \"n100.r01.s014_output/n100.r01.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s014_output/n100.r01.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s014_output/n100.r01.s014.reference.fas\" | bcftools consensus -m \"n100.r01.s014_output/n100.r01.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s014_output/n100.r01.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task aae3d819 (flow cb63bac2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s002_output\"\n        wget -O \"n100.r01.s002_output/n100.r01.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s002_output/n100.r01.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s002_output/n100.r01.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s002_output/n100.r01.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s002_output/n100.r01.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s002_output/n100.r01.s002.reference.fas\" \"n100.r01.s002_output/n100.r01.s002.fq1.fastq\" \"n100.r01.s002_output/n100.r01.s002.fq2.fastq\" | samtools view -bS - > \"n100.r01.s002_output/n100.r01.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s002_output/n100.r01.s002.untrimmed.sorted.bam\" \"n100.r01.s002_output/n100.r01.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s002_output/n100.r01.s002.untrimmed.sorted.bam\" -b \"n100.r01.s002_output/n100.r01.s002.primers.bed\" -p \"n100.r01.s002_output/n100.r01.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam\" \"n100.r01.s002_output/n100.r01.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s002_output/n100.r01.s002.reference.fas\" \"n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam\" > \"n100.r01.s002_output/n100.r01.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s002_output/n100.r01.s002.reference.fas\" --call-indels \"n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam\" > \"n100.r01.s002_output/n100.r01.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam\" > \"n100.r01.s002_output/n100.r01.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s002_output/n100.r01.s002.depth.txt\" \"n100.r01.s002_output/n100.r01.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s002_output/n100.r01.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s002_output/n100.r01.s002.reference.fas\" | bcftools consensus -m \"n100.r01.s002_output/n100.r01.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s002_output/n100.r01.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task eff5e8ec (flow 01b3e50d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s060_output\"\n        wget -O \"n100.r01.s060_output/n100.r01.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s060_output/n100.r01.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s060_output/n100.r01.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s060_output/n100.r01.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s060_output/n100.r01.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s060_output/n100.r01.s060.reference.fas\" \"n100.r01.s060_output/n100.r01.s060.fq1.fastq\" \"n100.r01.s060_output/n100.r01.s060.fq2.fastq\" | samtools view -bS - > \"n100.r01.s060_output/n100.r01.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s060_output/n100.r01.s060.untrimmed.sorted.bam\" \"n100.r01.s060_output/n100.r01.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s060_output/n100.r01.s060.untrimmed.sorted.bam\" -b \"n100.r01.s060_output/n100.r01.s060.primers.bed\" -p \"n100.r01.s060_output/n100.r01.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam\" \"n100.r01.s060_output/n100.r01.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s060_output/n100.r01.s060.reference.fas\" \"n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam\" > \"n100.r01.s060_output/n100.r01.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s060_output/n100.r01.s060.reference.fas\" --call-indels \"n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam\" > \"n100.r01.s060_output/n100.r01.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam\" > \"n100.r01.s060_output/n100.r01.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s060_output/n100.r01.s060.depth.txt\" \"n100.r01.s060_output/n100.r01.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s060_output/n100.r01.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s060_output/n100.r01.s060.reference.fas\" | bcftools consensus -m \"n100.r01.s060_output/n100.r01.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s060_output/n100.r01.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task bef5a6aa (flow 50884d6c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s041_output\"\n        wget -O \"n100.r01.s041_output/n100.r01.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s041_output/n100.r01.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s041_output/n100.r01.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s041_output/n100.r01.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s041_output/n100.r01.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s041_output/n100.r01.s041.reference.fas\" \"n100.r01.s041_output/n100.r01.s041.fq1.fastq\" \"n100.r01.s041_output/n100.r01.s041.fq2.fastq\" | samtools view -bS - > \"n100.r01.s041_output/n100.r01.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s041_output/n100.r01.s041.untrimmed.sorted.bam\" \"n100.r01.s041_output/n100.r01.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s041_output/n100.r01.s041.untrimmed.sorted.bam\" -b \"n100.r01.s041_output/n100.r01.s041.primers.bed\" -p \"n100.r01.s041_output/n100.r01.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam\" \"n100.r01.s041_output/n100.r01.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s041_output/n100.r01.s041.reference.fas\" \"n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam\" > \"n100.r01.s041_output/n100.r01.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s041_output/n100.r01.s041.reference.fas\" --call-indels \"n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam\" > \"n100.r01.s041_output/n100.r01.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam\" > \"n100.r01.s041_output/n100.r01.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s041_output/n100.r01.s041.depth.txt\" \"n100.r01.s041_output/n100.r01.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s041_output/n100.r01.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s041_output/n100.r01.s041.reference.fas\" | bcftools consensus -m \"n100.r01.s041_output/n100.r01.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s041_output/n100.r01.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 238ca419 (flow 8082561f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s026_output\"\n        wget -O \"n100.r01.s026_output/n100.r01.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s026_output/n100.r01.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s026_output/n100.r01.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s026_output/n100.r01.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s026_output/n100.r01.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s026_output/n100.r01.s026.reference.fas\" \"n100.r01.s026_output/n100.r01.s026.fq1.fastq\" \"n100.r01.s026_output/n100.r01.s026.fq2.fastq\" | samtools view -bS - > \"n100.r01.s026_output/n100.r01.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s026_output/n100.r01.s026.untrimmed.sorted.bam\" \"n100.r01.s026_output/n100.r01.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s026_output/n100.r01.s026.untrimmed.sorted.bam\" -b \"n100.r01.s026_output/n100.r01.s026.primers.bed\" -p \"n100.r01.s026_output/n100.r01.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam\" \"n100.r01.s026_output/n100.r01.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s026_output/n100.r01.s026.reference.fas\" \"n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam\" > \"n100.r01.s026_output/n100.r01.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s026_output/n100.r01.s026.reference.fas\" --call-indels \"n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam\" > \"n100.r01.s026_output/n100.r01.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam\" > \"n100.r01.s026_output/n100.r01.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s026_output/n100.r01.s026.depth.txt\" \"n100.r01.s026_output/n100.r01.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s026_output/n100.r01.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s026_output/n100.r01.s026.reference.fas\" | bcftools consensus -m \"n100.r01.s026_output/n100.r01.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s026_output/n100.r01.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 08e2a9ed (flow 1d467a73): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s035_output\"\n        wget -O \"n100.r01.s035_output/n100.r01.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s035_output/n100.r01.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s035_output/n100.r01.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s035_output/n100.r01.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s035_output/n100.r01.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s035_output/n100.r01.s035.reference.fas\" \"n100.r01.s035_output/n100.r01.s035.fq1.fastq\" \"n100.r01.s035_output/n100.r01.s035.fq2.fastq\" | samtools view -bS - > \"n100.r01.s035_output/n100.r01.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s035_output/n100.r01.s035.untrimmed.sorted.bam\" \"n100.r01.s035_output/n100.r01.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s035_output/n100.r01.s035.untrimmed.sorted.bam\" -b \"n100.r01.s035_output/n100.r01.s035.primers.bed\" -p \"n100.r01.s035_output/n100.r01.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam\" \"n100.r01.s035_output/n100.r01.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s035_output/n100.r01.s035.reference.fas\" \"n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam\" > \"n100.r01.s035_output/n100.r01.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s035_output/n100.r01.s035.reference.fas\" --call-indels \"n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam\" > \"n100.r01.s035_output/n100.r01.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam\" > \"n100.r01.s035_output/n100.r01.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s035_output/n100.r01.s035.depth.txt\" \"n100.r01.s035_output/n100.r01.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s035_output/n100.r01.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s035_output/n100.r01.s035.reference.fas\" | bcftools consensus -m \"n100.r01.s035_output/n100.r01.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s035_output/n100.r01.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 9ad01cec (flow 6dee772b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s033_output\"\n        wget -O \"n100.r01.s033_output/n100.r01.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s033_output/n100.r01.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s033_output/n100.r01.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s033_output/n100.r01.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s033_output/n100.r01.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s033_output/n100.r01.s033.reference.fas\" \"n100.r01.s033_output/n100.r01.s033.fq1.fastq\" \"n100.r01.s033_output/n100.r01.s033.fq2.fastq\" | samtools view -bS - > \"n100.r01.s033_output/n100.r01.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s033_output/n100.r01.s033.untrimmed.sorted.bam\" \"n100.r01.s033_output/n100.r01.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s033_output/n100.r01.s033.untrimmed.sorted.bam\" -b \"n100.r01.s033_output/n100.r01.s033.primers.bed\" -p \"n100.r01.s033_output/n100.r01.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam\" \"n100.r01.s033_output/n100.r01.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s033_output/n100.r01.s033.reference.fas\" \"n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam\" > \"n100.r01.s033_output/n100.r01.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s033_output/n100.r01.s033.reference.fas\" --call-indels \"n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam\" > \"n100.r01.s033_output/n100.r01.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam\" > \"n100.r01.s033_output/n100.r01.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s033_output/n100.r01.s033.depth.txt\" \"n100.r01.s033_output/n100.r01.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s033_output/n100.r01.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s033_output/n100.r01.s033.reference.fas\" | bcftools consensus -m \"n100.r01.s033_output/n100.r01.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s033_output/n100.r01.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 0a01661c (flow b52f6d52): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s037_output\"\n        wget -O \"n100.r01.s037_output/n100.r01.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s037_output/n100.r01.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s037_output/n100.r01.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s037_output/n100.r01.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s037_output/n100.r01.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s037_output/n100.r01.s037.reference.fas\" \"n100.r01.s037_output/n100.r01.s037.fq1.fastq\" \"n100.r01.s037_output/n100.r01.s037.fq2.fastq\" | samtools view -bS - > \"n100.r01.s037_output/n100.r01.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s037_output/n100.r01.s037.untrimmed.sorted.bam\" \"n100.r01.s037_output/n100.r01.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s037_output/n100.r01.s037.untrimmed.sorted.bam\" -b \"n100.r01.s037_output/n100.r01.s037.primers.bed\" -p \"n100.r01.s037_output/n100.r01.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam\" \"n100.r01.s037_output/n100.r01.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s037_output/n100.r01.s037.reference.fas\" \"n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam\" > \"n100.r01.s037_output/n100.r01.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s037_output/n100.r01.s037.reference.fas\" --call-indels \"n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam\" > \"n100.r01.s037_output/n100.r01.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam\" > \"n100.r01.s037_output/n100.r01.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s037_output/n100.r01.s037.depth.txt\" \"n100.r01.s037_output/n100.r01.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s037_output/n100.r01.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s037_output/n100.r01.s037.reference.fas\" | bcftools consensus -m \"n100.r01.s037_output/n100.r01.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s037_output/n100.r01.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 128087c4 (flow 6dc80144): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s061_output\"\n        wget -O \"n100.r01.s061_output/n100.r01.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s061_output/n100.r01.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s061_output/n100.r01.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s061_output/n100.r01.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s061_output/n100.r01.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s061_output/n100.r01.s061.reference.fas\" \"n100.r01.s061_output/n100.r01.s061.fq1.fastq\" \"n100.r01.s061_output/n100.r01.s061.fq2.fastq\" | samtools view -bS - > \"n100.r01.s061_output/n100.r01.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s061_output/n100.r01.s061.untrimmed.sorted.bam\" \"n100.r01.s061_output/n100.r01.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s061_output/n100.r01.s061.untrimmed.sorted.bam\" -b \"n100.r01.s061_output/n100.r01.s061.primers.bed\" -p \"n100.r01.s061_output/n100.r01.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam\" \"n100.r01.s061_output/n100.r01.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s061_output/n100.r01.s061.reference.fas\" \"n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam\" > \"n100.r01.s061_output/n100.r01.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s061_output/n100.r01.s061.reference.fas\" --call-indels \"n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam\" > \"n100.r01.s061_output/n100.r01.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam\" > \"n100.r01.s061_output/n100.r01.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s061_output/n100.r01.s061.depth.txt\" \"n100.r01.s061_output/n100.r01.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s061_output/n100.r01.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s061_output/n100.r01.s061.reference.fas\" | bcftools consensus -m \"n100.r01.s061_output/n100.r01.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s061_output/n100.r01.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task cd8b0435 (flow 831ed94c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s093_output\"\n        wget -O \"n100.r01.s093_output/n100.r01.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s093_output/n100.r01.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s093_output/n100.r01.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s093_output/n100.r01.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s093_output/n100.r01.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s093_output/n100.r01.s093.reference.fas\" \"n100.r01.s093_output/n100.r01.s093.fq1.fastq\" \"n100.r01.s093_output/n100.r01.s093.fq2.fastq\" | samtools view -bS - > \"n100.r01.s093_output/n100.r01.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s093_output/n100.r01.s093.untrimmed.sorted.bam\" \"n100.r01.s093_output/n100.r01.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s093_output/n100.r01.s093.untrimmed.sorted.bam\" -b \"n100.r01.s093_output/n100.r01.s093.primers.bed\" -p \"n100.r01.s093_output/n100.r01.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam\" \"n100.r01.s093_output/n100.r01.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s093_output/n100.r01.s093.reference.fas\" \"n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam\" > \"n100.r01.s093_output/n100.r01.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s093_output/n100.r01.s093.reference.fas\" --call-indels \"n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam\" > \"n100.r01.s093_output/n100.r01.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam\" > \"n100.r01.s093_output/n100.r01.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s093_output/n100.r01.s093.depth.txt\" \"n100.r01.s093_output/n100.r01.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s093_output/n100.r01.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s093_output/n100.r01.s093.reference.fas\" | bcftools consensus -m \"n100.r01.s093_output/n100.r01.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s093_output/n100.r01.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 8f179a44 (flow f3e1b152): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s001_output\"\n        wget -O \"n100.r01.s001_output/n100.r01.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s001_output/n100.r01.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s001_output/n100.r01.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s001_output/n100.r01.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s001_output/n100.r01.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s001_output/n100.r01.s001.reference.fas\" \"n100.r01.s001_output/n100.r01.s001.fq1.fastq\" \"n100.r01.s001_output/n100.r01.s001.fq2.fastq\" | samtools view -bS - > \"n100.r01.s001_output/n100.r01.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s001_output/n100.r01.s001.untrimmed.sorted.bam\" \"n100.r01.s001_output/n100.r01.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s001_output/n100.r01.s001.untrimmed.sorted.bam\" -b \"n100.r01.s001_output/n100.r01.s001.primers.bed\" -p \"n100.r01.s001_output/n100.r01.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam\" \"n100.r01.s001_output/n100.r01.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s001_output/n100.r01.s001.reference.fas\" \"n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam\" > \"n100.r01.s001_output/n100.r01.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s001_output/n100.r01.s001.reference.fas\" --call-indels \"n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam\" > \"n100.r01.s001_output/n100.r01.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam\" > \"n100.r01.s001_output/n100.r01.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s001_output/n100.r01.s001.depth.txt\" \"n100.r01.s001_output/n100.r01.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s001_output/n100.r01.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s001_output/n100.r01.s001.reference.fas\" | bcftools consensus -m \"n100.r01.s001_output/n100.r01.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s001_output/n100.r01.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task ce295c92 (flow 4cdb8625): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s004_output\"\n        wget -O \"n100.r01.s004_output/n100.r01.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s004_output/n100.r01.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s004_output/n100.r01.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s004_output/n100.r01.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s004_output/n100.r01.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s004_output/n100.r01.s004.reference.fas\" \"n100.r01.s004_output/n100.r01.s004.fq1.fastq\" \"n100.r01.s004_output/n100.r01.s004.fq2.fastq\" | samtools view -bS - > \"n100.r01.s004_output/n100.r01.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s004_output/n100.r01.s004.untrimmed.sorted.bam\" \"n100.r01.s004_output/n100.r01.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s004_output/n100.r01.s004.untrimmed.sorted.bam\" -b \"n100.r01.s004_output/n100.r01.s004.primers.bed\" -p \"n100.r01.s004_output/n100.r01.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam\" \"n100.r01.s004_output/n100.r01.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s004_output/n100.r01.s004.reference.fas\" \"n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam\" > \"n100.r01.s004_output/n100.r01.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s004_output/n100.r01.s004.reference.fas\" --call-indels \"n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam\" > \"n100.r01.s004_output/n100.r01.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam\" > \"n100.r01.s004_output/n100.r01.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s004_output/n100.r01.s004.depth.txt\" \"n100.r01.s004_output/n100.r01.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s004_output/n100.r01.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s004_output/n100.r01.s004.reference.fas\" | bcftools consensus -m \"n100.r01.s004_output/n100.r01.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s004_output/n100.r01.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task e1e24653 (flow 9d6059f7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s086_output\"\n        wget -O \"n100.r01.s086_output/n100.r01.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s086_output/n100.r01.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s086_output/n100.r01.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s086_output/n100.r01.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s086_output/n100.r01.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s086_output/n100.r01.s086.reference.fas\" \"n100.r01.s086_output/n100.r01.s086.fq1.fastq\" \"n100.r01.s086_output/n100.r01.s086.fq2.fastq\" | samtools view -bS - > \"n100.r01.s086_output/n100.r01.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s086_output/n100.r01.s086.untrimmed.sorted.bam\" \"n100.r01.s086_output/n100.r01.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s086_output/n100.r01.s086.untrimmed.sorted.bam\" -b \"n100.r01.s086_output/n100.r01.s086.primers.bed\" -p \"n100.r01.s086_output/n100.r01.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam\" \"n100.r01.s086_output/n100.r01.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s086_output/n100.r01.s086.reference.fas\" \"n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam\" > \"n100.r01.s086_output/n100.r01.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s086_output/n100.r01.s086.reference.fas\" --call-indels \"n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam\" > \"n100.r01.s086_output/n100.r01.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam\" > \"n100.r01.s086_output/n100.r01.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s086_output/n100.r01.s086.depth.txt\" \"n100.r01.s086_output/n100.r01.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s086_output/n100.r01.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s086_output/n100.r01.s086.reference.fas\" | bcftools consensus -m \"n100.r01.s086_output/n100.r01.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s086_output/n100.r01.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 2cd9def4 (flow fea6d9e1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s038_output\"\n        wget -O \"n100.r01.s038_output/n100.r01.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s038_output/n100.r01.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s038_output/n100.r01.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s038_output/n100.r01.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s038_output/n100.r01.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s038_output/n100.r01.s038.reference.fas\" \"n100.r01.s038_output/n100.r01.s038.fq1.fastq\" \"n100.r01.s038_output/n100.r01.s038.fq2.fastq\" | samtools view -bS - > \"n100.r01.s038_output/n100.r01.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s038_output/n100.r01.s038.untrimmed.sorted.bam\" \"n100.r01.s038_output/n100.r01.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s038_output/n100.r01.s038.untrimmed.sorted.bam\" -b \"n100.r01.s038_output/n100.r01.s038.primers.bed\" -p \"n100.r01.s038_output/n100.r01.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam\" \"n100.r01.s038_output/n100.r01.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s038_output/n100.r01.s038.reference.fas\" \"n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam\" > \"n100.r01.s038_output/n100.r01.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s038_output/n100.r01.s038.reference.fas\" --call-indels \"n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam\" > \"n100.r01.s038_output/n100.r01.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam\" > \"n100.r01.s038_output/n100.r01.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s038_output/n100.r01.s038.depth.txt\" \"n100.r01.s038_output/n100.r01.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s038_output/n100.r01.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s038_output/n100.r01.s038.reference.fas\" | bcftools consensus -m \"n100.r01.s038_output/n100.r01.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s038_output/n100.r01.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 468f0ab1 (flow acea3fd9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s018_output\"\n        wget -O \"n100.r01.s018_output/n100.r01.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s018_output/n100.r01.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s018_output/n100.r01.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s018_output/n100.r01.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s018_output/n100.r01.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s018_output/n100.r01.s018.reference.fas\" \"n100.r01.s018_output/n100.r01.s018.fq1.fastq\" \"n100.r01.s018_output/n100.r01.s018.fq2.fastq\" | samtools view -bS - > \"n100.r01.s018_output/n100.r01.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s018_output/n100.r01.s018.untrimmed.sorted.bam\" \"n100.r01.s018_output/n100.r01.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s018_output/n100.r01.s018.untrimmed.sorted.bam\" -b \"n100.r01.s018_output/n100.r01.s018.primers.bed\" -p \"n100.r01.s018_output/n100.r01.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam\" \"n100.r01.s018_output/n100.r01.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s018_output/n100.r01.s018.reference.fas\" \"n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam\" > \"n100.r01.s018_output/n100.r01.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s018_output/n100.r01.s018.reference.fas\" --call-indels \"n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam\" > \"n100.r01.s018_output/n100.r01.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam\" > \"n100.r01.s018_output/n100.r01.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s018_output/n100.r01.s018.depth.txt\" \"n100.r01.s018_output/n100.r01.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s018_output/n100.r01.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s018_output/n100.r01.s018.reference.fas\" | bcftools consensus -m \"n100.r01.s018_output/n100.r01.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s018_output/n100.r01.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task c5917b88 (flow 1a8edfa6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s098_output\"\n        wget -O \"n100.r01.s098_output/n100.r01.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s098_output/n100.r01.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s098_output/n100.r01.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s098_output/n100.r01.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s098_output/n100.r01.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s098_output/n100.r01.s098.reference.fas\" \"n100.r01.s098_output/n100.r01.s098.fq1.fastq\" \"n100.r01.s098_output/n100.r01.s098.fq2.fastq\" | samtools view -bS - > \"n100.r01.s098_output/n100.r01.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s098_output/n100.r01.s098.untrimmed.sorted.bam\" \"n100.r01.s098_output/n100.r01.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s098_output/n100.r01.s098.untrimmed.sorted.bam\" -b \"n100.r01.s098_output/n100.r01.s098.primers.bed\" -p \"n100.r01.s098_output/n100.r01.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam\" \"n100.r01.s098_output/n100.r01.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s098_output/n100.r01.s098.reference.fas\" \"n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam\" > \"n100.r01.s098_output/n100.r01.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s098_output/n100.r01.s098.reference.fas\" --call-indels \"n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam\" > \"n100.r01.s098_output/n100.r01.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam\" > \"n100.r01.s098_output/n100.r01.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s098_output/n100.r01.s098.depth.txt\" \"n100.r01.s098_output/n100.r01.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s098_output/n100.r01.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s098_output/n100.r01.s098.reference.fas\" | bcftools consensus -m \"n100.r01.s098_output/n100.r01.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s098_output/n100.r01.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task dc6ab090 (flow a6c01e21): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s052_output\"\n        wget -O \"n100.r01.s052_output/n100.r01.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s052_output/n100.r01.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s052_output/n100.r01.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s052_output/n100.r01.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s052_output/n100.r01.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s052_output/n100.r01.s052.reference.fas\" \"n100.r01.s052_output/n100.r01.s052.fq1.fastq\" \"n100.r01.s052_output/n100.r01.s052.fq2.fastq\" | samtools view -bS - > \"n100.r01.s052_output/n100.r01.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s052_output/n100.r01.s052.untrimmed.sorted.bam\" \"n100.r01.s052_output/n100.r01.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s052_output/n100.r01.s052.untrimmed.sorted.bam\" -b \"n100.r01.s052_output/n100.r01.s052.primers.bed\" -p \"n100.r01.s052_output/n100.r01.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam\" \"n100.r01.s052_output/n100.r01.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s052_output/n100.r01.s052.reference.fas\" \"n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam\" > \"n100.r01.s052_output/n100.r01.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s052_output/n100.r01.s052.reference.fas\" --call-indels \"n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam\" > \"n100.r01.s052_output/n100.r01.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam\" > \"n100.r01.s052_output/n100.r01.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s052_output/n100.r01.s052.depth.txt\" \"n100.r01.s052_output/n100.r01.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s052_output/n100.r01.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s052_output/n100.r01.s052.reference.fas\" | bcftools consensus -m \"n100.r01.s052_output/n100.r01.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s052_output/n100.r01.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 89fa88da (flow 6636d54a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s066_output\"\n        wget -O \"n100.r01.s066_output/n100.r01.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s066_output/n100.r01.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s066_output/n100.r01.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s066_output/n100.r01.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s066_output/n100.r01.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s066_output/n100.r01.s066.reference.fas\" \"n100.r01.s066_output/n100.r01.s066.fq1.fastq\" \"n100.r01.s066_output/n100.r01.s066.fq2.fastq\" | samtools view -bS - > \"n100.r01.s066_output/n100.r01.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s066_output/n100.r01.s066.untrimmed.sorted.bam\" \"n100.r01.s066_output/n100.r01.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s066_output/n100.r01.s066.untrimmed.sorted.bam\" -b \"n100.r01.s066_output/n100.r01.s066.primers.bed\" -p \"n100.r01.s066_output/n100.r01.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam\" \"n100.r01.s066_output/n100.r01.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s066_output/n100.r01.s066.reference.fas\" \"n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam\" > \"n100.r01.s066_output/n100.r01.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s066_output/n100.r01.s066.reference.fas\" --call-indels \"n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam\" > \"n100.r01.s066_output/n100.r01.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam\" > \"n100.r01.s066_output/n100.r01.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s066_output/n100.r01.s066.depth.txt\" \"n100.r01.s066_output/n100.r01.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s066_output/n100.r01.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s066_output/n100.r01.s066.reference.fas\" | bcftools consensus -m \"n100.r01.s066_output/n100.r01.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s066_output/n100.r01.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task d58dd643 (flow 6d1f26d4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s003_output\"\n        wget -O \"n100.r01.s003_output/n100.r01.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s003_output/n100.r01.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s003_output/n100.r01.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s003_output/n100.r01.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s003_output/n100.r01.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s003_output/n100.r01.s003.reference.fas\" \"n100.r01.s003_output/n100.r01.s003.fq1.fastq\" \"n100.r01.s003_output/n100.r01.s003.fq2.fastq\" | samtools view -bS - > \"n100.r01.s003_output/n100.r01.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s003_output/n100.r01.s003.untrimmed.sorted.bam\" \"n100.r01.s003_output/n100.r01.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s003_output/n100.r01.s003.untrimmed.sorted.bam\" -b \"n100.r01.s003_output/n100.r01.s003.primers.bed\" -p \"n100.r01.s003_output/n100.r01.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam\" \"n100.r01.s003_output/n100.r01.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s003_output/n100.r01.s003.reference.fas\" \"n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam\" > \"n100.r01.s003_output/n100.r01.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s003_output/n100.r01.s003.reference.fas\" --call-indels \"n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam\" > \"n100.r01.s003_output/n100.r01.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam\" > \"n100.r01.s003_output/n100.r01.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s003_output/n100.r01.s003.depth.txt\" \"n100.r01.s003_output/n100.r01.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s003_output/n100.r01.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s003_output/n100.r01.s003.reference.fas\" | bcftools consensus -m \"n100.r01.s003_output/n100.r01.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s003_output/n100.r01.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task bf4e2cad (flow 39634eeb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s062_output\"\n        wget -O \"n100.r01.s062_output/n100.r01.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s062_output/n100.r01.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s062_output/n100.r01.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s062_output/n100.r01.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s062_output/n100.r01.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s062_output/n100.r01.s062.reference.fas\" \"n100.r01.s062_output/n100.r01.s062.fq1.fastq\" \"n100.r01.s062_output/n100.r01.s062.fq2.fastq\" | samtools view -bS - > \"n100.r01.s062_output/n100.r01.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s062_output/n100.r01.s062.untrimmed.sorted.bam\" \"n100.r01.s062_output/n100.r01.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s062_output/n100.r01.s062.untrimmed.sorted.bam\" -b \"n100.r01.s062_output/n100.r01.s062.primers.bed\" -p \"n100.r01.s062_output/n100.r01.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam\" \"n100.r01.s062_output/n100.r01.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s062_output/n100.r01.s062.reference.fas\" \"n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam\" > \"n100.r01.s062_output/n100.r01.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s062_output/n100.r01.s062.reference.fas\" --call-indels \"n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam\" > \"n100.r01.s062_output/n100.r01.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam\" > \"n100.r01.s062_output/n100.r01.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s062_output/n100.r01.s062.depth.txt\" \"n100.r01.s062_output/n100.r01.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s062_output/n100.r01.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s062_output/n100.r01.s062.reference.fas\" | bcftools consensus -m \"n100.r01.s062_output/n100.r01.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s062_output/n100.r01.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task cc686dc9 (flow 9eb55c09): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s050_output\"\n        wget -O \"n100.r01.s050_output/n100.r01.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s050_output/n100.r01.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s050_output/n100.r01.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s050_output/n100.r01.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s050_output/n100.r01.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s050_output/n100.r01.s050.reference.fas\" \"n100.r01.s050_output/n100.r01.s050.fq1.fastq\" \"n100.r01.s050_output/n100.r01.s050.fq2.fastq\" | samtools view -bS - > \"n100.r01.s050_output/n100.r01.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s050_output/n100.r01.s050.untrimmed.sorted.bam\" \"n100.r01.s050_output/n100.r01.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s050_output/n100.r01.s050.untrimmed.sorted.bam\" -b \"n100.r01.s050_output/n100.r01.s050.primers.bed\" -p \"n100.r01.s050_output/n100.r01.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam\" \"n100.r01.s050_output/n100.r01.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s050_output/n100.r01.s050.reference.fas\" \"n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam\" > \"n100.r01.s050_output/n100.r01.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s050_output/n100.r01.s050.reference.fas\" --call-indels \"n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam\" > \"n100.r01.s050_output/n100.r01.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam\" > \"n100.r01.s050_output/n100.r01.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s050_output/n100.r01.s050.depth.txt\" \"n100.r01.s050_output/n100.r01.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s050_output/n100.r01.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s050_output/n100.r01.s050.reference.fas\" | bcftools consensus -m \"n100.r01.s050_output/n100.r01.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s050_output/n100.r01.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 35fa303c (flow 0b006c5d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s025_output\"\n        wget -O \"n100.r01.s025_output/n100.r01.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s025_output/n100.r01.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s025_output/n100.r01.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s025_output/n100.r01.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s025_output/n100.r01.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s025_output/n100.r01.s025.reference.fas\" \"n100.r01.s025_output/n100.r01.s025.fq1.fastq\" \"n100.r01.s025_output/n100.r01.s025.fq2.fastq\" | samtools view -bS - > \"n100.r01.s025_output/n100.r01.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s025_output/n100.r01.s025.untrimmed.sorted.bam\" \"n100.r01.s025_output/n100.r01.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s025_output/n100.r01.s025.untrimmed.sorted.bam\" -b \"n100.r01.s025_output/n100.r01.s025.primers.bed\" -p \"n100.r01.s025_output/n100.r01.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam\" \"n100.r01.s025_output/n100.r01.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s025_output/n100.r01.s025.reference.fas\" \"n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam\" > \"n100.r01.s025_output/n100.r01.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s025_output/n100.r01.s025.reference.fas\" --call-indels \"n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam\" > \"n100.r01.s025_output/n100.r01.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam\" > \"n100.r01.s025_output/n100.r01.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s025_output/n100.r01.s025.depth.txt\" \"n100.r01.s025_output/n100.r01.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s025_output/n100.r01.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s025_output/n100.r01.s025.reference.fas\" | bcftools consensus -m \"n100.r01.s025_output/n100.r01.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s025_output/n100.r01.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 0fea5d54 (flow 44ac81a2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s048_output\"\n        wget -O \"n100.r01.s048_output/n100.r01.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s048_output/n100.r01.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s048_output/n100.r01.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s048_output/n100.r01.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s048_output/n100.r01.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s048_output/n100.r01.s048.reference.fas\" \"n100.r01.s048_output/n100.r01.s048.fq1.fastq\" \"n100.r01.s048_output/n100.r01.s048.fq2.fastq\" | samtools view -bS - > \"n100.r01.s048_output/n100.r01.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s048_output/n100.r01.s048.untrimmed.sorted.bam\" \"n100.r01.s048_output/n100.r01.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s048_output/n100.r01.s048.untrimmed.sorted.bam\" -b \"n100.r01.s048_output/n100.r01.s048.primers.bed\" -p \"n100.r01.s048_output/n100.r01.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam\" \"n100.r01.s048_output/n100.r01.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s048_output/n100.r01.s048.reference.fas\" \"n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam\" > \"n100.r01.s048_output/n100.r01.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s048_output/n100.r01.s048.reference.fas\" --call-indels \"n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam\" > \"n100.r01.s048_output/n100.r01.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam\" > \"n100.r01.s048_output/n100.r01.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s048_output/n100.r01.s048.depth.txt\" \"n100.r01.s048_output/n100.r01.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s048_output/n100.r01.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s048_output/n100.r01.s048.reference.fas\" | bcftools consensus -m \"n100.r01.s048_output/n100.r01.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s048_output/n100.r01.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 4a2be2fe (flow a35830e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s067_output\"\n        wget -O \"n100.r01.s067_output/n100.r01.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s067_output/n100.r01.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s067_output/n100.r01.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s067_output/n100.r01.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s067_output/n100.r01.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s067_output/n100.r01.s067.reference.fas\" \"n100.r01.s067_output/n100.r01.s067.fq1.fastq\" \"n100.r01.s067_output/n100.r01.s067.fq2.fastq\" | samtools view -bS - > \"n100.r01.s067_output/n100.r01.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s067_output/n100.r01.s067.untrimmed.sorted.bam\" \"n100.r01.s067_output/n100.r01.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s067_output/n100.r01.s067.untrimmed.sorted.bam\" -b \"n100.r01.s067_output/n100.r01.s067.primers.bed\" -p \"n100.r01.s067_output/n100.r01.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam\" \"n100.r01.s067_output/n100.r01.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s067_output/n100.r01.s067.reference.fas\" \"n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam\" > \"n100.r01.s067_output/n100.r01.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s067_output/n100.r01.s067.reference.fas\" --call-indels \"n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam\" > \"n100.r01.s067_output/n100.r01.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam\" > \"n100.r01.s067_output/n100.r01.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s067_output/n100.r01.s067.depth.txt\" \"n100.r01.s067_output/n100.r01.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s067_output/n100.r01.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s067_output/n100.r01.s067.reference.fas\" | bcftools consensus -m \"n100.r01.s067_output/n100.r01.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s067_output/n100.r01.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 71597e7d (flow 3470f7ea): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s058_output\"\n        wget -O \"n100.r01.s058_output/n100.r01.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s058_output/n100.r01.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s058_output/n100.r01.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s058_output/n100.r01.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s058_output/n100.r01.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s058_output/n100.r01.s058.reference.fas\" \"n100.r01.s058_output/n100.r01.s058.fq1.fastq\" \"n100.r01.s058_output/n100.r01.s058.fq2.fastq\" | samtools view -bS - > \"n100.r01.s058_output/n100.r01.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s058_output/n100.r01.s058.untrimmed.sorted.bam\" \"n100.r01.s058_output/n100.r01.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s058_output/n100.r01.s058.untrimmed.sorted.bam\" -b \"n100.r01.s058_output/n100.r01.s058.primers.bed\" -p \"n100.r01.s058_output/n100.r01.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam\" \"n100.r01.s058_output/n100.r01.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s058_output/n100.r01.s058.reference.fas\" \"n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam\" > \"n100.r01.s058_output/n100.r01.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s058_output/n100.r01.s058.reference.fas\" --call-indels \"n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam\" > \"n100.r01.s058_output/n100.r01.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam\" > \"n100.r01.s058_output/n100.r01.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s058_output/n100.r01.s058.depth.txt\" \"n100.r01.s058_output/n100.r01.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s058_output/n100.r01.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s058_output/n100.r01.s058.reference.fas\" | bcftools consensus -m \"n100.r01.s058_output/n100.r01.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s058_output/n100.r01.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 642e6110 (flow 18df7aad): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s070_output\"\n        wget -O \"n100.r01.s070_output/n100.r01.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s070_output/n100.r01.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s070_output/n100.r01.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s070_output/n100.r01.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s070_output/n100.r01.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s070_output/n100.r01.s070.reference.fas\" \"n100.r01.s070_output/n100.r01.s070.fq1.fastq\" \"n100.r01.s070_output/n100.r01.s070.fq2.fastq\" | samtools view -bS - > \"n100.r01.s070_output/n100.r01.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s070_output/n100.r01.s070.untrimmed.sorted.bam\" \"n100.r01.s070_output/n100.r01.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s070_output/n100.r01.s070.untrimmed.sorted.bam\" -b \"n100.r01.s070_output/n100.r01.s070.primers.bed\" -p \"n100.r01.s070_output/n100.r01.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam\" \"n100.r01.s070_output/n100.r01.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s070_output/n100.r01.s070.reference.fas\" \"n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam\" > \"n100.r01.s070_output/n100.r01.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s070_output/n100.r01.s070.reference.fas\" --call-indels \"n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam\" > \"n100.r01.s070_output/n100.r01.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam\" > \"n100.r01.s070_output/n100.r01.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s070_output/n100.r01.s070.depth.txt\" \"n100.r01.s070_output/n100.r01.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s070_output/n100.r01.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s070_output/n100.r01.s070.reference.fas\" | bcftools consensus -m \"n100.r01.s070_output/n100.r01.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s070_output/n100.r01.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 8b2fb039 (flow d0853815): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s020_output\"\n        wget -O \"n100.r01.s020_output/n100.r01.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s020_output/n100.r01.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s020_output/n100.r01.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s020_output/n100.r01.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s020_output/n100.r01.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s020_output/n100.r01.s020.reference.fas\" \"n100.r01.s020_output/n100.r01.s020.fq1.fastq\" \"n100.r01.s020_output/n100.r01.s020.fq2.fastq\" | samtools view -bS - > \"n100.r01.s020_output/n100.r01.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s020_output/n100.r01.s020.untrimmed.sorted.bam\" \"n100.r01.s020_output/n100.r01.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s020_output/n100.r01.s020.untrimmed.sorted.bam\" -b \"n100.r01.s020_output/n100.r01.s020.primers.bed\" -p \"n100.r01.s020_output/n100.r01.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam\" \"n100.r01.s020_output/n100.r01.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s020_output/n100.r01.s020.reference.fas\" \"n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam\" > \"n100.r01.s020_output/n100.r01.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s020_output/n100.r01.s020.reference.fas\" --call-indels \"n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam\" > \"n100.r01.s020_output/n100.r01.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam\" > \"n100.r01.s020_output/n100.r01.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s020_output/n100.r01.s020.depth.txt\" \"n100.r01.s020_output/n100.r01.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s020_output/n100.r01.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s020_output/n100.r01.s020.reference.fas\" | bcftools consensus -m \"n100.r01.s020_output/n100.r01.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s020_output/n100.r01.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 9ca279ac (flow 8a6b6586): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s063_output\"\n        wget -O \"n100.r01.s063_output/n100.r01.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s063_output/n100.r01.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s063_output/n100.r01.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s063_output/n100.r01.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s063_output/n100.r01.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s063_output/n100.r01.s063.reference.fas\" \"n100.r01.s063_output/n100.r01.s063.fq1.fastq\" \"n100.r01.s063_output/n100.r01.s063.fq2.fastq\" | samtools view -bS - > \"n100.r01.s063_output/n100.r01.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s063_output/n100.r01.s063.untrimmed.sorted.bam\" \"n100.r01.s063_output/n100.r01.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s063_output/n100.r01.s063.untrimmed.sorted.bam\" -b \"n100.r01.s063_output/n100.r01.s063.primers.bed\" -p \"n100.r01.s063_output/n100.r01.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam\" \"n100.r01.s063_output/n100.r01.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s063_output/n100.r01.s063.reference.fas\" \"n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam\" > \"n100.r01.s063_output/n100.r01.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s063_output/n100.r01.s063.reference.fas\" --call-indels \"n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam\" > \"n100.r01.s063_output/n100.r01.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam\" > \"n100.r01.s063_output/n100.r01.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s063_output/n100.r01.s063.depth.txt\" \"n100.r01.s063_output/n100.r01.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s063_output/n100.r01.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s063_output/n100.r01.s063.reference.fas\" | bcftools consensus -m \"n100.r01.s063_output/n100.r01.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s063_output/n100.r01.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 8f377fd7 (flow 1f9bdd3e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s051_output\"\n        wget -O \"n100.r01.s051_output/n100.r01.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s051_output/n100.r01.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s051_output/n100.r01.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s051_output/n100.r01.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s051_output/n100.r01.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s051_output/n100.r01.s051.reference.fas\" \"n100.r01.s051_output/n100.r01.s051.fq1.fastq\" \"n100.r01.s051_output/n100.r01.s051.fq2.fastq\" | samtools view -bS - > \"n100.r01.s051_output/n100.r01.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s051_output/n100.r01.s051.untrimmed.sorted.bam\" \"n100.r01.s051_output/n100.r01.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s051_output/n100.r01.s051.untrimmed.sorted.bam\" -b \"n100.r01.s051_output/n100.r01.s051.primers.bed\" -p \"n100.r01.s051_output/n100.r01.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam\" \"n100.r01.s051_output/n100.r01.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s051_output/n100.r01.s051.reference.fas\" \"n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam\" > \"n100.r01.s051_output/n100.r01.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s051_output/n100.r01.s051.reference.fas\" --call-indels \"n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam\" > \"n100.r01.s051_output/n100.r01.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam\" > \"n100.r01.s051_output/n100.r01.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s051_output/n100.r01.s051.depth.txt\" \"n100.r01.s051_output/n100.r01.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s051_output/n100.r01.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s051_output/n100.r01.s051.reference.fas\" | bcftools consensus -m \"n100.r01.s051_output/n100.r01.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s051_output/n100.r01.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task f0d0ce5d (flow 15203b14): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s034_output\"\n        wget -O \"n100.r01.s034_output/n100.r01.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s034_output/n100.r01.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s034_output/n100.r01.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s034_output/n100.r01.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s034_output/n100.r01.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s034_output/n100.r01.s034.reference.fas\" \"n100.r01.s034_output/n100.r01.s034.fq1.fastq\" \"n100.r01.s034_output/n100.r01.s034.fq2.fastq\" | samtools view -bS - > \"n100.r01.s034_output/n100.r01.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s034_output/n100.r01.s034.untrimmed.sorted.bam\" \"n100.r01.s034_output/n100.r01.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s034_output/n100.r01.s034.untrimmed.sorted.bam\" -b \"n100.r01.s034_output/n100.r01.s034.primers.bed\" -p \"n100.r01.s034_output/n100.r01.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam\" \"n100.r01.s034_output/n100.r01.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s034_output/n100.r01.s034.reference.fas\" \"n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam\" > \"n100.r01.s034_output/n100.r01.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s034_output/n100.r01.s034.reference.fas\" --call-indels \"n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam\" > \"n100.r01.s034_output/n100.r01.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam\" > \"n100.r01.s034_output/n100.r01.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s034_output/n100.r01.s034.depth.txt\" \"n100.r01.s034_output/n100.r01.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s034_output/n100.r01.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s034_output/n100.r01.s034.reference.fas\" | bcftools consensus -m \"n100.r01.s034_output/n100.r01.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s034_output/n100.r01.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 9bf76c45 (flow 493067ab): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s071_output\"\n        wget -O \"n100.r01.s071_output/n100.r01.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s071_output/n100.r01.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s071_output/n100.r01.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s071_output/n100.r01.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s071_output/n100.r01.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s071_output/n100.r01.s071.reference.fas\" \"n100.r01.s071_output/n100.r01.s071.fq1.fastq\" \"n100.r01.s071_output/n100.r01.s071.fq2.fastq\" | samtools view -bS - > \"n100.r01.s071_output/n100.r01.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s071_output/n100.r01.s071.untrimmed.sorted.bam\" \"n100.r01.s071_output/n100.r01.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s071_output/n100.r01.s071.untrimmed.sorted.bam\" -b \"n100.r01.s071_output/n100.r01.s071.primers.bed\" -p \"n100.r01.s071_output/n100.r01.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam\" \"n100.r01.s071_output/n100.r01.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s071_output/n100.r01.s071.reference.fas\" \"n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam\" > \"n100.r01.s071_output/n100.r01.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s071_output/n100.r01.s071.reference.fas\" --call-indels \"n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam\" > \"n100.r01.s071_output/n100.r01.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam\" > \"n100.r01.s071_output/n100.r01.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s071_output/n100.r01.s071.depth.txt\" \"n100.r01.s071_output/n100.r01.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s071_output/n100.r01.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s071_output/n100.r01.s071.reference.fas\" | bcftools consensus -m \"n100.r01.s071_output/n100.r01.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s071_output/n100.r01.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 3cbe7084 (flow f4094bfe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s059_output\"\n        wget -O \"n100.r01.s059_output/n100.r01.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s059_output/n100.r01.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s059_output/n100.r01.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s059_output/n100.r01.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s059_output/n100.r01.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s059_output/n100.r01.s059.reference.fas\" \"n100.r01.s059_output/n100.r01.s059.fq1.fastq\" \"n100.r01.s059_output/n100.r01.s059.fq2.fastq\" | samtools view -bS - > \"n100.r01.s059_output/n100.r01.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s059_output/n100.r01.s059.untrimmed.sorted.bam\" \"n100.r01.s059_output/n100.r01.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s059_output/n100.r01.s059.untrimmed.sorted.bam\" -b \"n100.r01.s059_output/n100.r01.s059.primers.bed\" -p \"n100.r01.s059_output/n100.r01.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam\" \"n100.r01.s059_output/n100.r01.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s059_output/n100.r01.s059.reference.fas\" \"n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam\" > \"n100.r01.s059_output/n100.r01.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s059_output/n100.r01.s059.reference.fas\" --call-indels \"n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam\" > \"n100.r01.s059_output/n100.r01.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam\" > \"n100.r01.s059_output/n100.r01.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s059_output/n100.r01.s059.depth.txt\" \"n100.r01.s059_output/n100.r01.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s059_output/n100.r01.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s059_output/n100.r01.s059.reference.fas\" | bcftools consensus -m \"n100.r01.s059_output/n100.r01.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s059_output/n100.r01.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task df7b7632 (flow cb85a725): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s055_output\"\n        wget -O \"n100.r01.s055_output/n100.r01.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s055_output/n100.r01.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s055_output/n100.r01.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s055_output/n100.r01.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s055_output/n100.r01.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s055_output/n100.r01.s055.reference.fas\" \"n100.r01.s055_output/n100.r01.s055.fq1.fastq\" \"n100.r01.s055_output/n100.r01.s055.fq2.fastq\" | samtools view -bS - > \"n100.r01.s055_output/n100.r01.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s055_output/n100.r01.s055.untrimmed.sorted.bam\" \"n100.r01.s055_output/n100.r01.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s055_output/n100.r01.s055.untrimmed.sorted.bam\" -b \"n100.r01.s055_output/n100.r01.s055.primers.bed\" -p \"n100.r01.s055_output/n100.r01.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam\" \"n100.r01.s055_output/n100.r01.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s055_output/n100.r01.s055.reference.fas\" \"n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam\" > \"n100.r01.s055_output/n100.r01.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s055_output/n100.r01.s055.reference.fas\" --call-indels \"n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam\" > \"n100.r01.s055_output/n100.r01.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam\" > \"n100.r01.s055_output/n100.r01.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s055_output/n100.r01.s055.depth.txt\" \"n100.r01.s055_output/n100.r01.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s055_output/n100.r01.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s055_output/n100.r01.s055.reference.fas\" | bcftools consensus -m \"n100.r01.s055_output/n100.r01.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s055_output/n100.r01.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 97660e05 (flow c1a6fe3a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s031_output\"\n        wget -O \"n100.r01.s031_output/n100.r01.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s031_output/n100.r01.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s031_output/n100.r01.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s031_output/n100.r01.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s031_output/n100.r01.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s031_output/n100.r01.s031.reference.fas\" \"n100.r01.s031_output/n100.r01.s031.fq1.fastq\" \"n100.r01.s031_output/n100.r01.s031.fq2.fastq\" | samtools view -bS - > \"n100.r01.s031_output/n100.r01.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s031_output/n100.r01.s031.untrimmed.sorted.bam\" \"n100.r01.s031_output/n100.r01.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s031_output/n100.r01.s031.untrimmed.sorted.bam\" -b \"n100.r01.s031_output/n100.r01.s031.primers.bed\" -p \"n100.r01.s031_output/n100.r01.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam\" \"n100.r01.s031_output/n100.r01.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s031_output/n100.r01.s031.reference.fas\" \"n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam\" > \"n100.r01.s031_output/n100.r01.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s031_output/n100.r01.s031.reference.fas\" --call-indels \"n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam\" > \"n100.r01.s031_output/n100.r01.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam\" > \"n100.r01.s031_output/n100.r01.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s031_output/n100.r01.s031.depth.txt\" \"n100.r01.s031_output/n100.r01.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s031_output/n100.r01.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s031_output/n100.r01.s031.reference.fas\" | bcftools consensus -m \"n100.r01.s031_output/n100.r01.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s031_output/n100.r01.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 523904ca (flow 9b5d68c9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s022_output\"\n        wget -O \"n100.r01.s022_output/n100.r01.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s022_output/n100.r01.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s022_output/n100.r01.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s022_output/n100.r01.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s022_output/n100.r01.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s022_output/n100.r01.s022.reference.fas\" \"n100.r01.s022_output/n100.r01.s022.fq1.fastq\" \"n100.r01.s022_output/n100.r01.s022.fq2.fastq\" | samtools view -bS - > \"n100.r01.s022_output/n100.r01.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s022_output/n100.r01.s022.untrimmed.sorted.bam\" \"n100.r01.s022_output/n100.r01.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s022_output/n100.r01.s022.untrimmed.sorted.bam\" -b \"n100.r01.s022_output/n100.r01.s022.primers.bed\" -p \"n100.r01.s022_output/n100.r01.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam\" \"n100.r01.s022_output/n100.r01.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s022_output/n100.r01.s022.reference.fas\" \"n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam\" > \"n100.r01.s022_output/n100.r01.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s022_output/n100.r01.s022.reference.fas\" --call-indels \"n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam\" > \"n100.r01.s022_output/n100.r01.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam\" > \"n100.r01.s022_output/n100.r01.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s022_output/n100.r01.s022.depth.txt\" \"n100.r01.s022_output/n100.r01.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s022_output/n100.r01.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s022_output/n100.r01.s022.reference.fas\" | bcftools consensus -m \"n100.r01.s022_output/n100.r01.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s022_output/n100.r01.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 3e0df658 (flow da15cf49): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s021_output\"\n        wget -O \"n100.r01.s021_output/n100.r01.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s021_output/n100.r01.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s021_output/n100.r01.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s021_output/n100.r01.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s021_output/n100.r01.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s021_output/n100.r01.s021.reference.fas\" \"n100.r01.s021_output/n100.r01.s021.fq1.fastq\" \"n100.r01.s021_output/n100.r01.s021.fq2.fastq\" | samtools view -bS - > \"n100.r01.s021_output/n100.r01.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s021_output/n100.r01.s021.untrimmed.sorted.bam\" \"n100.r01.s021_output/n100.r01.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s021_output/n100.r01.s021.untrimmed.sorted.bam\" -b \"n100.r01.s021_output/n100.r01.s021.primers.bed\" -p \"n100.r01.s021_output/n100.r01.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam\" \"n100.r01.s021_output/n100.r01.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s021_output/n100.r01.s021.reference.fas\" \"n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam\" > \"n100.r01.s021_output/n100.r01.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s021_output/n100.r01.s021.reference.fas\" --call-indels \"n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam\" > \"n100.r01.s021_output/n100.r01.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam\" > \"n100.r01.s021_output/n100.r01.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s021_output/n100.r01.s021.depth.txt\" \"n100.r01.s021_output/n100.r01.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s021_output/n100.r01.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s021_output/n100.r01.s021.reference.fas\" | bcftools consensus -m \"n100.r01.s021_output/n100.r01.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s021_output/n100.r01.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 1276c917 (flow 8986bd36): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s074_output\"\n        wget -O \"n100.r01.s074_output/n100.r01.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s074_output/n100.r01.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s074_output/n100.r01.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s074_output/n100.r01.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s074_output/n100.r01.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s074_output/n100.r01.s074.reference.fas\" \"n100.r01.s074_output/n100.r01.s074.fq1.fastq\" \"n100.r01.s074_output/n100.r01.s074.fq2.fastq\" | samtools view -bS - > \"n100.r01.s074_output/n100.r01.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s074_output/n100.r01.s074.untrimmed.sorted.bam\" \"n100.r01.s074_output/n100.r01.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s074_output/n100.r01.s074.untrimmed.sorted.bam\" -b \"n100.r01.s074_output/n100.r01.s074.primers.bed\" -p \"n100.r01.s074_output/n100.r01.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam\" \"n100.r01.s074_output/n100.r01.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s074_output/n100.r01.s074.reference.fas\" \"n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam\" > \"n100.r01.s074_output/n100.r01.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s074_output/n100.r01.s074.reference.fas\" --call-indels \"n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam\" > \"n100.r01.s074_output/n100.r01.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam\" > \"n100.r01.s074_output/n100.r01.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s074_output/n100.r01.s074.depth.txt\" \"n100.r01.s074_output/n100.r01.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s074_output/n100.r01.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s074_output/n100.r01.s074.reference.fas\" | bcftools consensus -m \"n100.r01.s074_output/n100.r01.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s074_output/n100.r01.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 5d1b3fa7 (flow 5ac278bc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s040_output\"\n        wget -O \"n100.r01.s040_output/n100.r01.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s040_output/n100.r01.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s040_output/n100.r01.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s040_output/n100.r01.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s040_output/n100.r01.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s040_output/n100.r01.s040.reference.fas\" \"n100.r01.s040_output/n100.r01.s040.fq1.fastq\" \"n100.r01.s040_output/n100.r01.s040.fq2.fastq\" | samtools view -bS - > \"n100.r01.s040_output/n100.r01.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s040_output/n100.r01.s040.untrimmed.sorted.bam\" \"n100.r01.s040_output/n100.r01.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s040_output/n100.r01.s040.untrimmed.sorted.bam\" -b \"n100.r01.s040_output/n100.r01.s040.primers.bed\" -p \"n100.r01.s040_output/n100.r01.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam\" \"n100.r01.s040_output/n100.r01.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s040_output/n100.r01.s040.reference.fas\" \"n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam\" > \"n100.r01.s040_output/n100.r01.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s040_output/n100.r01.s040.reference.fas\" --call-indels \"n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam\" > \"n100.r01.s040_output/n100.r01.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam\" > \"n100.r01.s040_output/n100.r01.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s040_output/n100.r01.s040.depth.txt\" \"n100.r01.s040_output/n100.r01.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s040_output/n100.r01.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s040_output/n100.r01.s040.reference.fas\" | bcftools consensus -m \"n100.r01.s040_output/n100.r01.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s040_output/n100.r01.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task b25ce208 (flow f21eee98): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s036_output\"\n        wget -O \"n100.r01.s036_output/n100.r01.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s036_output/n100.r01.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s036_output/n100.r01.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s036_output/n100.r01.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s036_output/n100.r01.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s036_output/n100.r01.s036.reference.fas\" \"n100.r01.s036_output/n100.r01.s036.fq1.fastq\" \"n100.r01.s036_output/n100.r01.s036.fq2.fastq\" | samtools view -bS - > \"n100.r01.s036_output/n100.r01.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s036_output/n100.r01.s036.untrimmed.sorted.bam\" \"n100.r01.s036_output/n100.r01.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s036_output/n100.r01.s036.untrimmed.sorted.bam\" -b \"n100.r01.s036_output/n100.r01.s036.primers.bed\" -p \"n100.r01.s036_output/n100.r01.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam\" \"n100.r01.s036_output/n100.r01.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s036_output/n100.r01.s036.reference.fas\" \"n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam\" > \"n100.r01.s036_output/n100.r01.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s036_output/n100.r01.s036.reference.fas\" --call-indels \"n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam\" > \"n100.r01.s036_output/n100.r01.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam\" > \"n100.r01.s036_output/n100.r01.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s036_output/n100.r01.s036.depth.txt\" \"n100.r01.s036_output/n100.r01.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s036_output/n100.r01.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s036_output/n100.r01.s036.reference.fas\" | bcftools consensus -m \"n100.r01.s036_output/n100.r01.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s036_output/n100.r01.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 6a8b9655 (flow 09a7347a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s042_output\"\n        wget -O \"n100.r01.s042_output/n100.r01.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s042_output/n100.r01.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s042_output/n100.r01.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s042_output/n100.r01.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s042_output/n100.r01.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s042_output/n100.r01.s042.reference.fas\" \"n100.r01.s042_output/n100.r01.s042.fq1.fastq\" \"n100.r01.s042_output/n100.r01.s042.fq2.fastq\" | samtools view -bS - > \"n100.r01.s042_output/n100.r01.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s042_output/n100.r01.s042.untrimmed.sorted.bam\" \"n100.r01.s042_output/n100.r01.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s042_output/n100.r01.s042.untrimmed.sorted.bam\" -b \"n100.r01.s042_output/n100.r01.s042.primers.bed\" -p \"n100.r01.s042_output/n100.r01.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam\" \"n100.r01.s042_output/n100.r01.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s042_output/n100.r01.s042.reference.fas\" \"n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam\" > \"n100.r01.s042_output/n100.r01.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s042_output/n100.r01.s042.reference.fas\" --call-indels \"n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam\" > \"n100.r01.s042_output/n100.r01.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam\" > \"n100.r01.s042_output/n100.r01.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s042_output/n100.r01.s042.depth.txt\" \"n100.r01.s042_output/n100.r01.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s042_output/n100.r01.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s042_output/n100.r01.s042.reference.fas\" | bcftools consensus -m \"n100.r01.s042_output/n100.r01.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s042_output/n100.r01.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task a5b4a8c4 (flow 64ed8f81): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s010_output\"\n        wget -O \"n100.r01.s010_output/n100.r01.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s010_output/n100.r01.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s010_output/n100.r01.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s010_output/n100.r01.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s010_output/n100.r01.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s010_output/n100.r01.s010.reference.fas\" \"n100.r01.s010_output/n100.r01.s010.fq1.fastq\" \"n100.r01.s010_output/n100.r01.s010.fq2.fastq\" | samtools view -bS - > \"n100.r01.s010_output/n100.r01.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s010_output/n100.r01.s010.untrimmed.sorted.bam\" \"n100.r01.s010_output/n100.r01.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s010_output/n100.r01.s010.untrimmed.sorted.bam\" -b \"n100.r01.s010_output/n100.r01.s010.primers.bed\" -p \"n100.r01.s010_output/n100.r01.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam\" \"n100.r01.s010_output/n100.r01.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s010_output/n100.r01.s010.reference.fas\" \"n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam\" > \"n100.r01.s010_output/n100.r01.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s010_output/n100.r01.s010.reference.fas\" --call-indels \"n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam\" > \"n100.r01.s010_output/n100.r01.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam\" > \"n100.r01.s010_output/n100.r01.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s010_output/n100.r01.s010.depth.txt\" \"n100.r01.s010_output/n100.r01.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s010_output/n100.r01.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s010_output/n100.r01.s010.reference.fas\" | bcftools consensus -m \"n100.r01.s010_output/n100.r01.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s010_output/n100.r01.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 557c581c (flow ec5fcaaf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s069_output\"\n        wget -O \"n100.r01.s069_output/n100.r01.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s069_output/n100.r01.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s069_output/n100.r01.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s069_output/n100.r01.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s069_output/n100.r01.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s069_output/n100.r01.s069.reference.fas\" \"n100.r01.s069_output/n100.r01.s069.fq1.fastq\" \"n100.r01.s069_output/n100.r01.s069.fq2.fastq\" | samtools view -bS - > \"n100.r01.s069_output/n100.r01.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s069_output/n100.r01.s069.untrimmed.sorted.bam\" \"n100.r01.s069_output/n100.r01.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s069_output/n100.r01.s069.untrimmed.sorted.bam\" -b \"n100.r01.s069_output/n100.r01.s069.primers.bed\" -p \"n100.r01.s069_output/n100.r01.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam\" \"n100.r01.s069_output/n100.r01.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s069_output/n100.r01.s069.reference.fas\" \"n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam\" > \"n100.r01.s069_output/n100.r01.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s069_output/n100.r01.s069.reference.fas\" --call-indels \"n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam\" > \"n100.r01.s069_output/n100.r01.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam\" > \"n100.r01.s069_output/n100.r01.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s069_output/n100.r01.s069.depth.txt\" \"n100.r01.s069_output/n100.r01.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s069_output/n100.r01.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s069_output/n100.r01.s069.reference.fas\" | bcftools consensus -m \"n100.r01.s069_output/n100.r01.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s069_output/n100.r01.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task de4e06de (flow 337713ba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s012_output\"\n        wget -O \"n100.r01.s012_output/n100.r01.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s012_output/n100.r01.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s012_output/n100.r01.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s012_output/n100.r01.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s012_output/n100.r01.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s012_output/n100.r01.s012.reference.fas\" \"n100.r01.s012_output/n100.r01.s012.fq1.fastq\" \"n100.r01.s012_output/n100.r01.s012.fq2.fastq\" | samtools view -bS - > \"n100.r01.s012_output/n100.r01.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s012_output/n100.r01.s012.untrimmed.sorted.bam\" \"n100.r01.s012_output/n100.r01.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s012_output/n100.r01.s012.untrimmed.sorted.bam\" -b \"n100.r01.s012_output/n100.r01.s012.primers.bed\" -p \"n100.r01.s012_output/n100.r01.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam\" \"n100.r01.s012_output/n100.r01.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s012_output/n100.r01.s012.reference.fas\" \"n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam\" > \"n100.r01.s012_output/n100.r01.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s012_output/n100.r01.s012.reference.fas\" --call-indels \"n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam\" > \"n100.r01.s012_output/n100.r01.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam\" > \"n100.r01.s012_output/n100.r01.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s012_output/n100.r01.s012.depth.txt\" \"n100.r01.s012_output/n100.r01.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s012_output/n100.r01.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s012_output/n100.r01.s012.reference.fas\" | bcftools consensus -m \"n100.r01.s012_output/n100.r01.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s012_output/n100.r01.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task e480ee50 (flow 7d31354e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s091_output\"\n        wget -O \"n100.r01.s091_output/n100.r01.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s091_output/n100.r01.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s091_output/n100.r01.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s091_output/n100.r01.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s091_output/n100.r01.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s091_output/n100.r01.s091.reference.fas\" \"n100.r01.s091_output/n100.r01.s091.fq1.fastq\" \"n100.r01.s091_output/n100.r01.s091.fq2.fastq\" | samtools view -bS - > \"n100.r01.s091_output/n100.r01.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s091_output/n100.r01.s091.untrimmed.sorted.bam\" \"n100.r01.s091_output/n100.r01.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s091_output/n100.r01.s091.untrimmed.sorted.bam\" -b \"n100.r01.s091_output/n100.r01.s091.primers.bed\" -p \"n100.r01.s091_output/n100.r01.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam\" \"n100.r01.s091_output/n100.r01.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s091_output/n100.r01.s091.reference.fas\" \"n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam\" > \"n100.r01.s091_output/n100.r01.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s091_output/n100.r01.s091.reference.fas\" --call-indels \"n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam\" > \"n100.r01.s091_output/n100.r01.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam\" > \"n100.r01.s091_output/n100.r01.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s091_output/n100.r01.s091.depth.txt\" \"n100.r01.s091_output/n100.r01.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s091_output/n100.r01.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s091_output/n100.r01.s091.reference.fas\" | bcftools consensus -m \"n100.r01.s091_output/n100.r01.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s091_output/n100.r01.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 6e4fdc45 (flow fcf02ceb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s094_output\"\n        wget -O \"n100.r01.s094_output/n100.r01.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s094_output/n100.r01.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s094_output/n100.r01.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s094_output/n100.r01.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s094_output/n100.r01.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s094_output/n100.r01.s094.reference.fas\" \"n100.r01.s094_output/n100.r01.s094.fq1.fastq\" \"n100.r01.s094_output/n100.r01.s094.fq2.fastq\" | samtools view -bS - > \"n100.r01.s094_output/n100.r01.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s094_output/n100.r01.s094.untrimmed.sorted.bam\" \"n100.r01.s094_output/n100.r01.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s094_output/n100.r01.s094.untrimmed.sorted.bam\" -b \"n100.r01.s094_output/n100.r01.s094.primers.bed\" -p \"n100.r01.s094_output/n100.r01.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam\" \"n100.r01.s094_output/n100.r01.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s094_output/n100.r01.s094.reference.fas\" \"n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam\" > \"n100.r01.s094_output/n100.r01.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s094_output/n100.r01.s094.reference.fas\" --call-indels \"n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam\" > \"n100.r01.s094_output/n100.r01.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam\" > \"n100.r01.s094_output/n100.r01.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s094_output/n100.r01.s094.depth.txt\" \"n100.r01.s094_output/n100.r01.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s094_output/n100.r01.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s094_output/n100.r01.s094.reference.fas\" | bcftools consensus -m \"n100.r01.s094_output/n100.r01.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s094_output/n100.r01.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 7c7b163b (flow 441ccf77): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s049_output\"\n        wget -O \"n100.r01.s049_output/n100.r01.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s049_output/n100.r01.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s049_output/n100.r01.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s049_output/n100.r01.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s049_output/n100.r01.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s049_output/n100.r01.s049.reference.fas\" \"n100.r01.s049_output/n100.r01.s049.fq1.fastq\" \"n100.r01.s049_output/n100.r01.s049.fq2.fastq\" | samtools view -bS - > \"n100.r01.s049_output/n100.r01.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s049_output/n100.r01.s049.untrimmed.sorted.bam\" \"n100.r01.s049_output/n100.r01.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s049_output/n100.r01.s049.untrimmed.sorted.bam\" -b \"n100.r01.s049_output/n100.r01.s049.primers.bed\" -p \"n100.r01.s049_output/n100.r01.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam\" \"n100.r01.s049_output/n100.r01.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s049_output/n100.r01.s049.reference.fas\" \"n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam\" > \"n100.r01.s049_output/n100.r01.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s049_output/n100.r01.s049.reference.fas\" --call-indels \"n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam\" > \"n100.r01.s049_output/n100.r01.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam\" > \"n100.r01.s049_output/n100.r01.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s049_output/n100.r01.s049.depth.txt\" \"n100.r01.s049_output/n100.r01.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s049_output/n100.r01.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s049_output/n100.r01.s049.reference.fas\" | bcftools consensus -m \"n100.r01.s049_output/n100.r01.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s049_output/n100.r01.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 91a49b70 (flow dc0a8500): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s029_output\"\n        wget -O \"n100.r01.s029_output/n100.r01.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s029_output/n100.r01.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s029_output/n100.r01.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s029_output/n100.r01.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s029_output/n100.r01.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s029_output/n100.r01.s029.reference.fas\" \"n100.r01.s029_output/n100.r01.s029.fq1.fastq\" \"n100.r01.s029_output/n100.r01.s029.fq2.fastq\" | samtools view -bS - > \"n100.r01.s029_output/n100.r01.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s029_output/n100.r01.s029.untrimmed.sorted.bam\" \"n100.r01.s029_output/n100.r01.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s029_output/n100.r01.s029.untrimmed.sorted.bam\" -b \"n100.r01.s029_output/n100.r01.s029.primers.bed\" -p \"n100.r01.s029_output/n100.r01.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam\" \"n100.r01.s029_output/n100.r01.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s029_output/n100.r01.s029.reference.fas\" \"n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam\" > \"n100.r01.s029_output/n100.r01.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s029_output/n100.r01.s029.reference.fas\" --call-indels \"n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam\" > \"n100.r01.s029_output/n100.r01.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam\" > \"n100.r01.s029_output/n100.r01.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s029_output/n100.r01.s029.depth.txt\" \"n100.r01.s029_output/n100.r01.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s029_output/n100.r01.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s029_output/n100.r01.s029.reference.fas\" | bcftools consensus -m \"n100.r01.s029_output/n100.r01.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s029_output/n100.r01.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 6ec2dcb3 (flow e856bd44): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s043_output\"\n        wget -O \"n100.r01.s043_output/n100.r01.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s043_output/n100.r01.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s043_output/n100.r01.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s043_output/n100.r01.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s043_output/n100.r01.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s043_output/n100.r01.s043.reference.fas\" \"n100.r01.s043_output/n100.r01.s043.fq1.fastq\" \"n100.r01.s043_output/n100.r01.s043.fq2.fastq\" | samtools view -bS - > \"n100.r01.s043_output/n100.r01.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s043_output/n100.r01.s043.untrimmed.sorted.bam\" \"n100.r01.s043_output/n100.r01.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s043_output/n100.r01.s043.untrimmed.sorted.bam\" -b \"n100.r01.s043_output/n100.r01.s043.primers.bed\" -p \"n100.r01.s043_output/n100.r01.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam\" \"n100.r01.s043_output/n100.r01.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s043_output/n100.r01.s043.reference.fas\" \"n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam\" > \"n100.r01.s043_output/n100.r01.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s043_output/n100.r01.s043.reference.fas\" --call-indels \"n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam\" > \"n100.r01.s043_output/n100.r01.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam\" > \"n100.r01.s043_output/n100.r01.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s043_output/n100.r01.s043.depth.txt\" \"n100.r01.s043_output/n100.r01.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s043_output/n100.r01.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s043_output/n100.r01.s043.reference.fas\" | bcftools consensus -m \"n100.r01.s043_output/n100.r01.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s043_output/n100.r01.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task ee96b8c7 (flow 028284df): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s076_output\"\n        wget -O \"n100.r01.s076_output/n100.r01.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s076_output/n100.r01.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s076_output/n100.r01.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s076_output/n100.r01.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s076_output/n100.r01.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s076_output/n100.r01.s076.reference.fas\" \"n100.r01.s076_output/n100.r01.s076.fq1.fastq\" \"n100.r01.s076_output/n100.r01.s076.fq2.fastq\" | samtools view -bS - > \"n100.r01.s076_output/n100.r01.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s076_output/n100.r01.s076.untrimmed.sorted.bam\" \"n100.r01.s076_output/n100.r01.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s076_output/n100.r01.s076.untrimmed.sorted.bam\" -b \"n100.r01.s076_output/n100.r01.s076.primers.bed\" -p \"n100.r01.s076_output/n100.r01.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam\" \"n100.r01.s076_output/n100.r01.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s076_output/n100.r01.s076.reference.fas\" \"n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam\" > \"n100.r01.s076_output/n100.r01.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s076_output/n100.r01.s076.reference.fas\" --call-indels \"n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam\" > \"n100.r01.s076_output/n100.r01.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam\" > \"n100.r01.s076_output/n100.r01.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s076_output/n100.r01.s076.depth.txt\" \"n100.r01.s076_output/n100.r01.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s076_output/n100.r01.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s076_output/n100.r01.s076.reference.fas\" | bcftools consensus -m \"n100.r01.s076_output/n100.r01.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s076_output/n100.r01.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 16911b07 (flow 1b870f15): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s085_output\"\n        wget -O \"n100.r01.s085_output/n100.r01.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s085_output/n100.r01.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s085_output/n100.r01.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s085_output/n100.r01.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s085_output/n100.r01.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s085_output/n100.r01.s085.reference.fas\" \"n100.r01.s085_output/n100.r01.s085.fq1.fastq\" \"n100.r01.s085_output/n100.r01.s085.fq2.fastq\" | samtools view -bS - > \"n100.r01.s085_output/n100.r01.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s085_output/n100.r01.s085.untrimmed.sorted.bam\" \"n100.r01.s085_output/n100.r01.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s085_output/n100.r01.s085.untrimmed.sorted.bam\" -b \"n100.r01.s085_output/n100.r01.s085.primers.bed\" -p \"n100.r01.s085_output/n100.r01.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam\" \"n100.r01.s085_output/n100.r01.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s085_output/n100.r01.s085.reference.fas\" \"n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam\" > \"n100.r01.s085_output/n100.r01.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s085_output/n100.r01.s085.reference.fas\" --call-indels \"n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam\" > \"n100.r01.s085_output/n100.r01.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam\" > \"n100.r01.s085_output/n100.r01.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s085_output/n100.r01.s085.depth.txt\" \"n100.r01.s085_output/n100.r01.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s085_output/n100.r01.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s085_output/n100.r01.s085.reference.fas\" | bcftools consensus -m \"n100.r01.s085_output/n100.r01.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s085_output/n100.r01.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task bc719b94 (flow 1fcc6ec2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s100_output\"\n        wget -O \"n100.r01.s100_output/n100.r01.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s100_output/n100.r01.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s100_output/n100.r01.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s100_output/n100.r01.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s100_output/n100.r01.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s100_output/n100.r01.s100.reference.fas\" \"n100.r01.s100_output/n100.r01.s100.fq1.fastq\" \"n100.r01.s100_output/n100.r01.s100.fq2.fastq\" | samtools view -bS - > \"n100.r01.s100_output/n100.r01.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s100_output/n100.r01.s100.untrimmed.sorted.bam\" \"n100.r01.s100_output/n100.r01.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s100_output/n100.r01.s100.untrimmed.sorted.bam\" -b \"n100.r01.s100_output/n100.r01.s100.primers.bed\" -p \"n100.r01.s100_output/n100.r01.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam\" \"n100.r01.s100_output/n100.r01.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s100_output/n100.r01.s100.reference.fas\" \"n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam\" > \"n100.r01.s100_output/n100.r01.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s100_output/n100.r01.s100.reference.fas\" --call-indels \"n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam\" > \"n100.r01.s100_output/n100.r01.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam\" > \"n100.r01.s100_output/n100.r01.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s100_output/n100.r01.s100.depth.txt\" \"n100.r01.s100_output/n100.r01.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s100_output/n100.r01.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s100_output/n100.r01.s100.reference.fas\" | bcftools consensus -m \"n100.r01.s100_output/n100.r01.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s100_output/n100.r01.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task c5194497 (flow bb46d7da): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s028_output\"\n        wget -O \"n100.r01.s028_output/n100.r01.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s028_output/n100.r01.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s028_output/n100.r01.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s028_output/n100.r01.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s028_output/n100.r01.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s028_output/n100.r01.s028.reference.fas\" \"n100.r01.s028_output/n100.r01.s028.fq1.fastq\" \"n100.r01.s028_output/n100.r01.s028.fq2.fastq\" | samtools view -bS - > \"n100.r01.s028_output/n100.r01.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s028_output/n100.r01.s028.untrimmed.sorted.bam\" \"n100.r01.s028_output/n100.r01.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s028_output/n100.r01.s028.untrimmed.sorted.bam\" -b \"n100.r01.s028_output/n100.r01.s028.primers.bed\" -p \"n100.r01.s028_output/n100.r01.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam\" \"n100.r01.s028_output/n100.r01.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s028_output/n100.r01.s028.reference.fas\" \"n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam\" > \"n100.r01.s028_output/n100.r01.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s028_output/n100.r01.s028.reference.fas\" --call-indels \"n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam\" > \"n100.r01.s028_output/n100.r01.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam\" > \"n100.r01.s028_output/n100.r01.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s028_output/n100.r01.s028.depth.txt\" \"n100.r01.s028_output/n100.r01.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s028_output/n100.r01.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s028_output/n100.r01.s028.reference.fas\" | bcftools consensus -m \"n100.r01.s028_output/n100.r01.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s028_output/n100.r01.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 00418e33 (flow 580d88f9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s005_output\"\n        wget -O \"n100.r01.s005_output/n100.r01.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s005_output/n100.r01.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s005_output/n100.r01.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s005_output/n100.r01.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s005_output/n100.r01.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s005_output/n100.r01.s005.reference.fas\" \"n100.r01.s005_output/n100.r01.s005.fq1.fastq\" \"n100.r01.s005_output/n100.r01.s005.fq2.fastq\" | samtools view -bS - > \"n100.r01.s005_output/n100.r01.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s005_output/n100.r01.s005.untrimmed.sorted.bam\" \"n100.r01.s005_output/n100.r01.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s005_output/n100.r01.s005.untrimmed.sorted.bam\" -b \"n100.r01.s005_output/n100.r01.s005.primers.bed\" -p \"n100.r01.s005_output/n100.r01.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam\" \"n100.r01.s005_output/n100.r01.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s005_output/n100.r01.s005.reference.fas\" \"n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam\" > \"n100.r01.s005_output/n100.r01.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s005_output/n100.r01.s005.reference.fas\" --call-indels \"n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam\" > \"n100.r01.s005_output/n100.r01.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam\" > \"n100.r01.s005_output/n100.r01.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s005_output/n100.r01.s005.depth.txt\" \"n100.r01.s005_output/n100.r01.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s005_output/n100.r01.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s005_output/n100.r01.s005.reference.fas\" | bcftools consensus -m \"n100.r01.s005_output/n100.r01.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s005_output/n100.r01.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 0c141a13 (flow 9df7cd9b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s027_output\"\n        wget -O \"n100.r01.s027_output/n100.r01.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s027_output/n100.r01.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s027_output/n100.r01.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s027_output/n100.r01.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s027_output/n100.r01.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s027_output/n100.r01.s027.reference.fas\" \"n100.r01.s027_output/n100.r01.s027.fq1.fastq\" \"n100.r01.s027_output/n100.r01.s027.fq2.fastq\" | samtools view -bS - > \"n100.r01.s027_output/n100.r01.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s027_output/n100.r01.s027.untrimmed.sorted.bam\" \"n100.r01.s027_output/n100.r01.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s027_output/n100.r01.s027.untrimmed.sorted.bam\" -b \"n100.r01.s027_output/n100.r01.s027.primers.bed\" -p \"n100.r01.s027_output/n100.r01.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam\" \"n100.r01.s027_output/n100.r01.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s027_output/n100.r01.s027.reference.fas\" \"n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam\" > \"n100.r01.s027_output/n100.r01.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s027_output/n100.r01.s027.reference.fas\" --call-indels \"n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam\" > \"n100.r01.s027_output/n100.r01.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam\" > \"n100.r01.s027_output/n100.r01.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s027_output/n100.r01.s027.depth.txt\" \"n100.r01.s027_output/n100.r01.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s027_output/n100.r01.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s027_output/n100.r01.s027.reference.fas\" | bcftools consensus -m \"n100.r01.s027_output/n100.r01.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s027_output/n100.r01.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 788f7878 (flow eb24a0c4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s075_output\"\n        wget -O \"n100.r01.s075_output/n100.r01.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s075_output/n100.r01.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s075_output/n100.r01.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s075_output/n100.r01.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s075_output/n100.r01.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s075_output/n100.r01.s075.reference.fas\" \"n100.r01.s075_output/n100.r01.s075.fq1.fastq\" \"n100.r01.s075_output/n100.r01.s075.fq2.fastq\" | samtools view -bS - > \"n100.r01.s075_output/n100.r01.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s075_output/n100.r01.s075.untrimmed.sorted.bam\" \"n100.r01.s075_output/n100.r01.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s075_output/n100.r01.s075.untrimmed.sorted.bam\" -b \"n100.r01.s075_output/n100.r01.s075.primers.bed\" -p \"n100.r01.s075_output/n100.r01.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam\" \"n100.r01.s075_output/n100.r01.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s075_output/n100.r01.s075.reference.fas\" \"n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam\" > \"n100.r01.s075_output/n100.r01.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s075_output/n100.r01.s075.reference.fas\" --call-indels \"n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam\" > \"n100.r01.s075_output/n100.r01.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam\" > \"n100.r01.s075_output/n100.r01.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s075_output/n100.r01.s075.depth.txt\" \"n100.r01.s075_output/n100.r01.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s075_output/n100.r01.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s075_output/n100.r01.s075.reference.fas\" | bcftools consensus -m \"n100.r01.s075_output/n100.r01.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s075_output/n100.r01.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 814eb11a (flow e490893d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s046_output\"\n        wget -O \"n100.r01.s046_output/n100.r01.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s046_output/n100.r01.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s046_output/n100.r01.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s046_output/n100.r01.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s046_output/n100.r01.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s046_output/n100.r01.s046.reference.fas\" \"n100.r01.s046_output/n100.r01.s046.fq1.fastq\" \"n100.r01.s046_output/n100.r01.s046.fq2.fastq\" | samtools view -bS - > \"n100.r01.s046_output/n100.r01.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s046_output/n100.r01.s046.untrimmed.sorted.bam\" \"n100.r01.s046_output/n100.r01.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s046_output/n100.r01.s046.untrimmed.sorted.bam\" -b \"n100.r01.s046_output/n100.r01.s046.primers.bed\" -p \"n100.r01.s046_output/n100.r01.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam\" \"n100.r01.s046_output/n100.r01.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s046_output/n100.r01.s046.reference.fas\" \"n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam\" > \"n100.r01.s046_output/n100.r01.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s046_output/n100.r01.s046.reference.fas\" --call-indels \"n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam\" > \"n100.r01.s046_output/n100.r01.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam\" > \"n100.r01.s046_output/n100.r01.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s046_output/n100.r01.s046.depth.txt\" \"n100.r01.s046_output/n100.r01.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s046_output/n100.r01.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s046_output/n100.r01.s046.reference.fas\" | bcftools consensus -m \"n100.r01.s046_output/n100.r01.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s046_output/n100.r01.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 7eaca4b3 (flow e0aa7377): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s006_output\"\n        wget -O \"n100.r01.s006_output/n100.r01.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s006_output/n100.r01.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s006_output/n100.r01.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s006_output/n100.r01.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s006_output/n100.r01.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s006_output/n100.r01.s006.reference.fas\" \"n100.r01.s006_output/n100.r01.s006.fq1.fastq\" \"n100.r01.s006_output/n100.r01.s006.fq2.fastq\" | samtools view -bS - > \"n100.r01.s006_output/n100.r01.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s006_output/n100.r01.s006.untrimmed.sorted.bam\" \"n100.r01.s006_output/n100.r01.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s006_output/n100.r01.s006.untrimmed.sorted.bam\" -b \"n100.r01.s006_output/n100.r01.s006.primers.bed\" -p \"n100.r01.s006_output/n100.r01.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam\" \"n100.r01.s006_output/n100.r01.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s006_output/n100.r01.s006.reference.fas\" \"n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam\" > \"n100.r01.s006_output/n100.r01.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s006_output/n100.r01.s006.reference.fas\" --call-indels \"n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam\" > \"n100.r01.s006_output/n100.r01.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam\" > \"n100.r01.s006_output/n100.r01.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s006_output/n100.r01.s006.depth.txt\" \"n100.r01.s006_output/n100.r01.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s006_output/n100.r01.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s006_output/n100.r01.s006.reference.fas\" | bcftools consensus -m \"n100.r01.s006_output/n100.r01.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s006_output/n100.r01.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 251c61ad (flow b62d3501): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s088_output\"\n        wget -O \"n100.r01.s088_output/n100.r01.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s088_output/n100.r01.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s088_output/n100.r01.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s088_output/n100.r01.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s088_output/n100.r01.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s088_output/n100.r01.s088.reference.fas\" \"n100.r01.s088_output/n100.r01.s088.fq1.fastq\" \"n100.r01.s088_output/n100.r01.s088.fq2.fastq\" | samtools view -bS - > \"n100.r01.s088_output/n100.r01.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s088_output/n100.r01.s088.untrimmed.sorted.bam\" \"n100.r01.s088_output/n100.r01.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s088_output/n100.r01.s088.untrimmed.sorted.bam\" -b \"n100.r01.s088_output/n100.r01.s088.primers.bed\" -p \"n100.r01.s088_output/n100.r01.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam\" \"n100.r01.s088_output/n100.r01.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s088_output/n100.r01.s088.reference.fas\" \"n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam\" > \"n100.r01.s088_output/n100.r01.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s088_output/n100.r01.s088.reference.fas\" --call-indels \"n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam\" > \"n100.r01.s088_output/n100.r01.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam\" > \"n100.r01.s088_output/n100.r01.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s088_output/n100.r01.s088.depth.txt\" \"n100.r01.s088_output/n100.r01.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s088_output/n100.r01.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s088_output/n100.r01.s088.reference.fas\" | bcftools consensus -m \"n100.r01.s088_output/n100.r01.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s088_output/n100.r01.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 97818aad (flow 3ce93691): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s023_output\"\n        wget -O \"n100.r01.s023_output/n100.r01.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s023_output/n100.r01.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s023_output/n100.r01.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s023_output/n100.r01.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s023_output/n100.r01.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s023_output/n100.r01.s023.reference.fas\" \"n100.r01.s023_output/n100.r01.s023.fq1.fastq\" \"n100.r01.s023_output/n100.r01.s023.fq2.fastq\" | samtools view -bS - > \"n100.r01.s023_output/n100.r01.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s023_output/n100.r01.s023.untrimmed.sorted.bam\" \"n100.r01.s023_output/n100.r01.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s023_output/n100.r01.s023.untrimmed.sorted.bam\" -b \"n100.r01.s023_output/n100.r01.s023.primers.bed\" -p \"n100.r01.s023_output/n100.r01.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam\" \"n100.r01.s023_output/n100.r01.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s023_output/n100.r01.s023.reference.fas\" \"n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam\" > \"n100.r01.s023_output/n100.r01.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s023_output/n100.r01.s023.reference.fas\" --call-indels \"n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam\" > \"n100.r01.s023_output/n100.r01.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam\" > \"n100.r01.s023_output/n100.r01.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s023_output/n100.r01.s023.depth.txt\" \"n100.r01.s023_output/n100.r01.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s023_output/n100.r01.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s023_output/n100.r01.s023.reference.fas\" | bcftools consensus -m \"n100.r01.s023_output/n100.r01.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s023_output/n100.r01.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 90a6b802 (flow 4c471319): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s019_output\"\n        wget -O \"n100.r01.s019_output/n100.r01.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s019_output/n100.r01.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s019_output/n100.r01.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s019_output/n100.r01.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s019_output/n100.r01.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s019_output/n100.r01.s019.reference.fas\" \"n100.r01.s019_output/n100.r01.s019.fq1.fastq\" \"n100.r01.s019_output/n100.r01.s019.fq2.fastq\" | samtools view -bS - > \"n100.r01.s019_output/n100.r01.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s019_output/n100.r01.s019.untrimmed.sorted.bam\" \"n100.r01.s019_output/n100.r01.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s019_output/n100.r01.s019.untrimmed.sorted.bam\" -b \"n100.r01.s019_output/n100.r01.s019.primers.bed\" -p \"n100.r01.s019_output/n100.r01.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam\" \"n100.r01.s019_output/n100.r01.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s019_output/n100.r01.s019.reference.fas\" \"n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam\" > \"n100.r01.s019_output/n100.r01.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s019_output/n100.r01.s019.reference.fas\" --call-indels \"n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam\" > \"n100.r01.s019_output/n100.r01.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam\" > \"n100.r01.s019_output/n100.r01.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s019_output/n100.r01.s019.depth.txt\" \"n100.r01.s019_output/n100.r01.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s019_output/n100.r01.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s019_output/n100.r01.s019.reference.fas\" | bcftools consensus -m \"n100.r01.s019_output/n100.r01.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s019_output/n100.r01.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 8b1f0155 (flow 99489b6e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s056_output\"\n        wget -O \"n100.r01.s056_output/n100.r01.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s056_output/n100.r01.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s056_output/n100.r01.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s056_output/n100.r01.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s056_output/n100.r01.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s056_output/n100.r01.s056.reference.fas\" \"n100.r01.s056_output/n100.r01.s056.fq1.fastq\" \"n100.r01.s056_output/n100.r01.s056.fq2.fastq\" | samtools view -bS - > \"n100.r01.s056_output/n100.r01.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s056_output/n100.r01.s056.untrimmed.sorted.bam\" \"n100.r01.s056_output/n100.r01.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s056_output/n100.r01.s056.untrimmed.sorted.bam\" -b \"n100.r01.s056_output/n100.r01.s056.primers.bed\" -p \"n100.r01.s056_output/n100.r01.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam\" \"n100.r01.s056_output/n100.r01.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s056_output/n100.r01.s056.reference.fas\" \"n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam\" > \"n100.r01.s056_output/n100.r01.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s056_output/n100.r01.s056.reference.fas\" --call-indels \"n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam\" > \"n100.r01.s056_output/n100.r01.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam\" > \"n100.r01.s056_output/n100.r01.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s056_output/n100.r01.s056.depth.txt\" \"n100.r01.s056_output/n100.r01.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s056_output/n100.r01.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s056_output/n100.r01.s056.reference.fas\" | bcftools consensus -m \"n100.r01.s056_output/n100.r01.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s056_output/n100.r01.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task e89bffd7 (flow 5f65da5f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s064_output\"\n        wget -O \"n100.r01.s064_output/n100.r01.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s064_output/n100.r01.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s064_output/n100.r01.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s064_output/n100.r01.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s064_output/n100.r01.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s064_output/n100.r01.s064.reference.fas\" \"n100.r01.s064_output/n100.r01.s064.fq1.fastq\" \"n100.r01.s064_output/n100.r01.s064.fq2.fastq\" | samtools view -bS - > \"n100.r01.s064_output/n100.r01.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s064_output/n100.r01.s064.untrimmed.sorted.bam\" \"n100.r01.s064_output/n100.r01.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s064_output/n100.r01.s064.untrimmed.sorted.bam\" -b \"n100.r01.s064_output/n100.r01.s064.primers.bed\" -p \"n100.r01.s064_output/n100.r01.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam\" \"n100.r01.s064_output/n100.r01.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s064_output/n100.r01.s064.reference.fas\" \"n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam\" > \"n100.r01.s064_output/n100.r01.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s064_output/n100.r01.s064.reference.fas\" --call-indels \"n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam\" > \"n100.r01.s064_output/n100.r01.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam\" > \"n100.r01.s064_output/n100.r01.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s064_output/n100.r01.s064.depth.txt\" \"n100.r01.s064_output/n100.r01.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s064_output/n100.r01.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s064_output/n100.r01.s064.reference.fas\" | bcftools consensus -m \"n100.r01.s064_output/n100.r01.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s064_output/n100.r01.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task a7bf4b87 (flow 6ea478fe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s057_output\"\n        wget -O \"n100.r01.s057_output/n100.r01.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s057_output/n100.r01.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s057_output/n100.r01.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s057_output/n100.r01.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s057_output/n100.r01.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s057_output/n100.r01.s057.reference.fas\" \"n100.r01.s057_output/n100.r01.s057.fq1.fastq\" \"n100.r01.s057_output/n100.r01.s057.fq2.fastq\" | samtools view -bS - > \"n100.r01.s057_output/n100.r01.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s057_output/n100.r01.s057.untrimmed.sorted.bam\" \"n100.r01.s057_output/n100.r01.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s057_output/n100.r01.s057.untrimmed.sorted.bam\" -b \"n100.r01.s057_output/n100.r01.s057.primers.bed\" -p \"n100.r01.s057_output/n100.r01.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam\" \"n100.r01.s057_output/n100.r01.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s057_output/n100.r01.s057.reference.fas\" \"n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam\" > \"n100.r01.s057_output/n100.r01.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s057_output/n100.r01.s057.reference.fas\" --call-indels \"n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam\" > \"n100.r01.s057_output/n100.r01.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam\" > \"n100.r01.s057_output/n100.r01.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s057_output/n100.r01.s057.depth.txt\" \"n100.r01.s057_output/n100.r01.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s057_output/n100.r01.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s057_output/n100.r01.s057.reference.fas\" | bcftools consensus -m \"n100.r01.s057_output/n100.r01.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s057_output/n100.r01.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task c982ccb7 (flow 0d88193c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s096_output\"\n        wget -O \"n100.r01.s096_output/n100.r01.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s096_output/n100.r01.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s096_output/n100.r01.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s096_output/n100.r01.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s096_output/n100.r01.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s096_output/n100.r01.s096.reference.fas\" \"n100.r01.s096_output/n100.r01.s096.fq1.fastq\" \"n100.r01.s096_output/n100.r01.s096.fq2.fastq\" | samtools view -bS - > \"n100.r01.s096_output/n100.r01.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s096_output/n100.r01.s096.untrimmed.sorted.bam\" \"n100.r01.s096_output/n100.r01.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s096_output/n100.r01.s096.untrimmed.sorted.bam\" -b \"n100.r01.s096_output/n100.r01.s096.primers.bed\" -p \"n100.r01.s096_output/n100.r01.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam\" \"n100.r01.s096_output/n100.r01.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s096_output/n100.r01.s096.reference.fas\" \"n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam\" > \"n100.r01.s096_output/n100.r01.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s096_output/n100.r01.s096.reference.fas\" --call-indels \"n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam\" > \"n100.r01.s096_output/n100.r01.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam\" > \"n100.r01.s096_output/n100.r01.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s096_output/n100.r01.s096.depth.txt\" \"n100.r01.s096_output/n100.r01.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s096_output/n100.r01.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s096_output/n100.r01.s096.reference.fas\" | bcftools consensus -m \"n100.r01.s096_output/n100.r01.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s096_output/n100.r01.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task ea47d9ff (flow a882905c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s047_output\"\n        wget -O \"n100.r01.s047_output/n100.r01.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s047_output/n100.r01.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s047_output/n100.r01.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s047_output/n100.r01.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s047_output/n100.r01.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s047_output/n100.r01.s047.reference.fas\" \"n100.r01.s047_output/n100.r01.s047.fq1.fastq\" \"n100.r01.s047_output/n100.r01.s047.fq2.fastq\" | samtools view -bS - > \"n100.r01.s047_output/n100.r01.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s047_output/n100.r01.s047.untrimmed.sorted.bam\" \"n100.r01.s047_output/n100.r01.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s047_output/n100.r01.s047.untrimmed.sorted.bam\" -b \"n100.r01.s047_output/n100.r01.s047.primers.bed\" -p \"n100.r01.s047_output/n100.r01.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam\" \"n100.r01.s047_output/n100.r01.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s047_output/n100.r01.s047.reference.fas\" \"n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam\" > \"n100.r01.s047_output/n100.r01.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s047_output/n100.r01.s047.reference.fas\" --call-indels \"n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam\" > \"n100.r01.s047_output/n100.r01.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam\" > \"n100.r01.s047_output/n100.r01.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s047_output/n100.r01.s047.depth.txt\" \"n100.r01.s047_output/n100.r01.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s047_output/n100.r01.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s047_output/n100.r01.s047.reference.fas\" | bcftools consensus -m \"n100.r01.s047_output/n100.r01.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s047_output/n100.r01.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 1c7f103e (flow 066587e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s084_output\"\n        wget -O \"n100.r01.s084_output/n100.r01.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s084_output/n100.r01.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s084_output/n100.r01.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s084_output/n100.r01.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s084_output/n100.r01.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s084_output/n100.r01.s084.reference.fas\" \"n100.r01.s084_output/n100.r01.s084.fq1.fastq\" \"n100.r01.s084_output/n100.r01.s084.fq2.fastq\" | samtools view -bS - > \"n100.r01.s084_output/n100.r01.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s084_output/n100.r01.s084.untrimmed.sorted.bam\" \"n100.r01.s084_output/n100.r01.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s084_output/n100.r01.s084.untrimmed.sorted.bam\" -b \"n100.r01.s084_output/n100.r01.s084.primers.bed\" -p \"n100.r01.s084_output/n100.r01.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam\" \"n100.r01.s084_output/n100.r01.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s084_output/n100.r01.s084.reference.fas\" \"n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam\" > \"n100.r01.s084_output/n100.r01.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s084_output/n100.r01.s084.reference.fas\" --call-indels \"n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam\" > \"n100.r01.s084_output/n100.r01.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam\" > \"n100.r01.s084_output/n100.r01.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s084_output/n100.r01.s084.depth.txt\" \"n100.r01.s084_output/n100.r01.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s084_output/n100.r01.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s084_output/n100.r01.s084.reference.fas\" | bcftools consensus -m \"n100.r01.s084_output/n100.r01.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s084_output/n100.r01.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task bfa03bd4 (flow 75e88589): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s081_output\"\n        wget -O \"n100.r01.s081_output/n100.r01.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s081_output/n100.r01.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s081_output/n100.r01.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s081_output/n100.r01.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s081_output/n100.r01.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s081_output/n100.r01.s081.reference.fas\" \"n100.r01.s081_output/n100.r01.s081.fq1.fastq\" \"n100.r01.s081_output/n100.r01.s081.fq2.fastq\" | samtools view -bS - > \"n100.r01.s081_output/n100.r01.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s081_output/n100.r01.s081.untrimmed.sorted.bam\" \"n100.r01.s081_output/n100.r01.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s081_output/n100.r01.s081.untrimmed.sorted.bam\" -b \"n100.r01.s081_output/n100.r01.s081.primers.bed\" -p \"n100.r01.s081_output/n100.r01.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam\" \"n100.r01.s081_output/n100.r01.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s081_output/n100.r01.s081.reference.fas\" \"n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam\" > \"n100.r01.s081_output/n100.r01.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s081_output/n100.r01.s081.reference.fas\" --call-indels \"n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam\" > \"n100.r01.s081_output/n100.r01.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam\" > \"n100.r01.s081_output/n100.r01.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s081_output/n100.r01.s081.depth.txt\" \"n100.r01.s081_output/n100.r01.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s081_output/n100.r01.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s081_output/n100.r01.s081.reference.fas\" | bcftools consensus -m \"n100.r01.s081_output/n100.r01.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s081_output/n100.r01.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 4ad47abd (flow 264f4a9d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s045_output\"\n        wget -O \"n100.r01.s045_output/n100.r01.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s045_output/n100.r01.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s045_output/n100.r01.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s045_output/n100.r01.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s045_output/n100.r01.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s045_output/n100.r01.s045.reference.fas\" \"n100.r01.s045_output/n100.r01.s045.fq1.fastq\" \"n100.r01.s045_output/n100.r01.s045.fq2.fastq\" | samtools view -bS - > \"n100.r01.s045_output/n100.r01.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s045_output/n100.r01.s045.untrimmed.sorted.bam\" \"n100.r01.s045_output/n100.r01.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s045_output/n100.r01.s045.untrimmed.sorted.bam\" -b \"n100.r01.s045_output/n100.r01.s045.primers.bed\" -p \"n100.r01.s045_output/n100.r01.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam\" \"n100.r01.s045_output/n100.r01.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s045_output/n100.r01.s045.reference.fas\" \"n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam\" > \"n100.r01.s045_output/n100.r01.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s045_output/n100.r01.s045.reference.fas\" --call-indels \"n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam\" > \"n100.r01.s045_output/n100.r01.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam\" > \"n100.r01.s045_output/n100.r01.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s045_output/n100.r01.s045.depth.txt\" \"n100.r01.s045_output/n100.r01.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s045_output/n100.r01.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s045_output/n100.r01.s045.reference.fas\" | bcftools consensus -m \"n100.r01.s045_output/n100.r01.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s045_output/n100.r01.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 0d9fcc7c (flow a4ee45a6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s044_output\"\n        wget -O \"n100.r01.s044_output/n100.r01.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s044_output/n100.r01.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s044_output/n100.r01.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s044_output/n100.r01.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s044_output/n100.r01.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s044_output/n100.r01.s044.reference.fas\" \"n100.r01.s044_output/n100.r01.s044.fq1.fastq\" \"n100.r01.s044_output/n100.r01.s044.fq2.fastq\" | samtools view -bS - > \"n100.r01.s044_output/n100.r01.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s044_output/n100.r01.s044.untrimmed.sorted.bam\" \"n100.r01.s044_output/n100.r01.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s044_output/n100.r01.s044.untrimmed.sorted.bam\" -b \"n100.r01.s044_output/n100.r01.s044.primers.bed\" -p \"n100.r01.s044_output/n100.r01.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam\" \"n100.r01.s044_output/n100.r01.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s044_output/n100.r01.s044.reference.fas\" \"n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam\" > \"n100.r01.s044_output/n100.r01.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s044_output/n100.r01.s044.reference.fas\" --call-indels \"n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam\" > \"n100.r01.s044_output/n100.r01.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam\" > \"n100.r01.s044_output/n100.r01.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s044_output/n100.r01.s044.depth.txt\" \"n100.r01.s044_output/n100.r01.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s044_output/n100.r01.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s044_output/n100.r01.s044.reference.fas\" | bcftools consensus -m \"n100.r01.s044_output/n100.r01.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s044_output/n100.r01.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task d6c86c87 (flow 6138a66a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s090_output\"\n        wget -O \"n100.r01.s090_output/n100.r01.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s090_output/n100.r01.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s090_output/n100.r01.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s090_output/n100.r01.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s090_output/n100.r01.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s090_output/n100.r01.s090.reference.fas\" \"n100.r01.s090_output/n100.r01.s090.fq1.fastq\" \"n100.r01.s090_output/n100.r01.s090.fq2.fastq\" | samtools view -bS - > \"n100.r01.s090_output/n100.r01.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s090_output/n100.r01.s090.untrimmed.sorted.bam\" \"n100.r01.s090_output/n100.r01.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s090_output/n100.r01.s090.untrimmed.sorted.bam\" -b \"n100.r01.s090_output/n100.r01.s090.primers.bed\" -p \"n100.r01.s090_output/n100.r01.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam\" \"n100.r01.s090_output/n100.r01.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s090_output/n100.r01.s090.reference.fas\" \"n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam\" > \"n100.r01.s090_output/n100.r01.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s090_output/n100.r01.s090.reference.fas\" --call-indels \"n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam\" > \"n100.r01.s090_output/n100.r01.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam\" > \"n100.r01.s090_output/n100.r01.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s090_output/n100.r01.s090.depth.txt\" \"n100.r01.s090_output/n100.r01.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s090_output/n100.r01.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s090_output/n100.r01.s090.reference.fas\" | bcftools consensus -m \"n100.r01.s090_output/n100.r01.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s090_output/n100.r01.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 5ba3ce8d (flow e1b32ab1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s016_output\"\n        wget -O \"n100.r01.s016_output/n100.r01.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s016_output/n100.r01.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s016_output/n100.r01.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s016_output/n100.r01.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s016_output/n100.r01.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s016_output/n100.r01.s016.reference.fas\" \"n100.r01.s016_output/n100.r01.s016.fq1.fastq\" \"n100.r01.s016_output/n100.r01.s016.fq2.fastq\" | samtools view -bS - > \"n100.r01.s016_output/n100.r01.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s016_output/n100.r01.s016.untrimmed.sorted.bam\" \"n100.r01.s016_output/n100.r01.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s016_output/n100.r01.s016.untrimmed.sorted.bam\" -b \"n100.r01.s016_output/n100.r01.s016.primers.bed\" -p \"n100.r01.s016_output/n100.r01.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam\" \"n100.r01.s016_output/n100.r01.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s016_output/n100.r01.s016.reference.fas\" \"n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam\" > \"n100.r01.s016_output/n100.r01.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s016_output/n100.r01.s016.reference.fas\" --call-indels \"n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam\" > \"n100.r01.s016_output/n100.r01.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam\" > \"n100.r01.s016_output/n100.r01.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s016_output/n100.r01.s016.depth.txt\" \"n100.r01.s016_output/n100.r01.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s016_output/n100.r01.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s016_output/n100.r01.s016.reference.fas\" | bcftools consensus -m \"n100.r01.s016_output/n100.r01.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s016_output/n100.r01.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task dd684b46 (flow 9d1a9286): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s030_output\"\n        wget -O \"n100.r01.s030_output/n100.r01.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s030_output/n100.r01.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s030_output/n100.r01.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s030_output/n100.r01.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s030_output/n100.r01.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s030_output/n100.r01.s030.reference.fas\" \"n100.r01.s030_output/n100.r01.s030.fq1.fastq\" \"n100.r01.s030_output/n100.r01.s030.fq2.fastq\" | samtools view -bS - > \"n100.r01.s030_output/n100.r01.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s030_output/n100.r01.s030.untrimmed.sorted.bam\" \"n100.r01.s030_output/n100.r01.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s030_output/n100.r01.s030.untrimmed.sorted.bam\" -b \"n100.r01.s030_output/n100.r01.s030.primers.bed\" -p \"n100.r01.s030_output/n100.r01.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam\" \"n100.r01.s030_output/n100.r01.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s030_output/n100.r01.s030.reference.fas\" \"n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam\" > \"n100.r01.s030_output/n100.r01.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s030_output/n100.r01.s030.reference.fas\" --call-indels \"n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam\" > \"n100.r01.s030_output/n100.r01.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam\" > \"n100.r01.s030_output/n100.r01.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s030_output/n100.r01.s030.depth.txt\" \"n100.r01.s030_output/n100.r01.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s030_output/n100.r01.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s030_output/n100.r01.s030.reference.fas\" | bcftools consensus -m \"n100.r01.s030_output/n100.r01.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s030_output/n100.r01.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 6a9006af (flow 15a25f65): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s068_output\"\n        wget -O \"n100.r01.s068_output/n100.r01.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s068_output/n100.r01.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s068_output/n100.r01.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s068_output/n100.r01.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s068_output/n100.r01.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s068_output/n100.r01.s068.reference.fas\" \"n100.r01.s068_output/n100.r01.s068.fq1.fastq\" \"n100.r01.s068_output/n100.r01.s068.fq2.fastq\" | samtools view -bS - > \"n100.r01.s068_output/n100.r01.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s068_output/n100.r01.s068.untrimmed.sorted.bam\" \"n100.r01.s068_output/n100.r01.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s068_output/n100.r01.s068.untrimmed.sorted.bam\" -b \"n100.r01.s068_output/n100.r01.s068.primers.bed\" -p \"n100.r01.s068_output/n100.r01.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam\" \"n100.r01.s068_output/n100.r01.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s068_output/n100.r01.s068.reference.fas\" \"n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam\" > \"n100.r01.s068_output/n100.r01.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s068_output/n100.r01.s068.reference.fas\" --call-indels \"n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam\" > \"n100.r01.s068_output/n100.r01.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam\" > \"n100.r01.s068_output/n100.r01.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s068_output/n100.r01.s068.depth.txt\" \"n100.r01.s068_output/n100.r01.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s068_output/n100.r01.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s068_output/n100.r01.s068.reference.fas\" | bcftools consensus -m \"n100.r01.s068_output/n100.r01.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s068_output/n100.r01.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 782b9981 (flow 466997bd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s080_output\"\n        wget -O \"n100.r01.s080_output/n100.r01.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s080_output/n100.r01.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s080_output/n100.r01.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s080_output/n100.r01.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s080_output/n100.r01.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s080_output/n100.r01.s080.reference.fas\" \"n100.r01.s080_output/n100.r01.s080.fq1.fastq\" \"n100.r01.s080_output/n100.r01.s080.fq2.fastq\" | samtools view -bS - > \"n100.r01.s080_output/n100.r01.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s080_output/n100.r01.s080.untrimmed.sorted.bam\" \"n100.r01.s080_output/n100.r01.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s080_output/n100.r01.s080.untrimmed.sorted.bam\" -b \"n100.r01.s080_output/n100.r01.s080.primers.bed\" -p \"n100.r01.s080_output/n100.r01.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam\" \"n100.r01.s080_output/n100.r01.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s080_output/n100.r01.s080.reference.fas\" \"n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam\" > \"n100.r01.s080_output/n100.r01.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s080_output/n100.r01.s080.reference.fas\" --call-indels \"n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam\" > \"n100.r01.s080_output/n100.r01.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam\" > \"n100.r01.s080_output/n100.r01.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s080_output/n100.r01.s080.depth.txt\" \"n100.r01.s080_output/n100.r01.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s080_output/n100.r01.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s080_output/n100.r01.s080.reference.fas\" | bcftools consensus -m \"n100.r01.s080_output/n100.r01.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s080_output/n100.r01.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 7d0761ce (flow 62d09709): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s017_output\"\n        wget -O \"n100.r01.s017_output/n100.r01.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s017_output/n100.r01.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s017_output/n100.r01.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s017_output/n100.r01.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s017_output/n100.r01.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s017_output/n100.r01.s017.reference.fas\" \"n100.r01.s017_output/n100.r01.s017.fq1.fastq\" \"n100.r01.s017_output/n100.r01.s017.fq2.fastq\" | samtools view -bS - > \"n100.r01.s017_output/n100.r01.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s017_output/n100.r01.s017.untrimmed.sorted.bam\" \"n100.r01.s017_output/n100.r01.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s017_output/n100.r01.s017.untrimmed.sorted.bam\" -b \"n100.r01.s017_output/n100.r01.s017.primers.bed\" -p \"n100.r01.s017_output/n100.r01.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam\" \"n100.r01.s017_output/n100.r01.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s017_output/n100.r01.s017.reference.fas\" \"n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam\" > \"n100.r01.s017_output/n100.r01.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s017_output/n100.r01.s017.reference.fas\" --call-indels \"n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam\" > \"n100.r01.s017_output/n100.r01.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam\" > \"n100.r01.s017_output/n100.r01.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s017_output/n100.r01.s017.depth.txt\" \"n100.r01.s017_output/n100.r01.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s017_output/n100.r01.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s017_output/n100.r01.s017.reference.fas\" | bcftools consensus -m \"n100.r01.s017_output/n100.r01.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s017_output/n100.r01.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 7ec3898d (flow 236f7412): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s024_output\"\n        wget -O \"n100.r01.s024_output/n100.r01.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s024_output/n100.r01.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s024_output/n100.r01.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s024_output/n100.r01.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s024_output/n100.r01.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s024_output/n100.r01.s024.reference.fas\" \"n100.r01.s024_output/n100.r01.s024.fq1.fastq\" \"n100.r01.s024_output/n100.r01.s024.fq2.fastq\" | samtools view -bS - > \"n100.r01.s024_output/n100.r01.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s024_output/n100.r01.s024.untrimmed.sorted.bam\" \"n100.r01.s024_output/n100.r01.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s024_output/n100.r01.s024.untrimmed.sorted.bam\" -b \"n100.r01.s024_output/n100.r01.s024.primers.bed\" -p \"n100.r01.s024_output/n100.r01.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam\" \"n100.r01.s024_output/n100.r01.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s024_output/n100.r01.s024.reference.fas\" \"n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam\" > \"n100.r01.s024_output/n100.r01.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s024_output/n100.r01.s024.reference.fas\" --call-indels \"n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam\" > \"n100.r01.s024_output/n100.r01.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam\" > \"n100.r01.s024_output/n100.r01.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s024_output/n100.r01.s024.depth.txt\" \"n100.r01.s024_output/n100.r01.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s024_output/n100.r01.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s024_output/n100.r01.s024.reference.fas\" | bcftools consensus -m \"n100.r01.s024_output/n100.r01.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s024_output/n100.r01.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task b7843960 (flow 4a121bc6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s072_output\"\n        wget -O \"n100.r01.s072_output/n100.r01.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s072_output/n100.r01.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s072_output/n100.r01.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s072_output/n100.r01.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s072_output/n100.r01.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s072_output/n100.r01.s072.reference.fas\" \"n100.r01.s072_output/n100.r01.s072.fq1.fastq\" \"n100.r01.s072_output/n100.r01.s072.fq2.fastq\" | samtools view -bS - > \"n100.r01.s072_output/n100.r01.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s072_output/n100.r01.s072.untrimmed.sorted.bam\" \"n100.r01.s072_output/n100.r01.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s072_output/n100.r01.s072.untrimmed.sorted.bam\" -b \"n100.r01.s072_output/n100.r01.s072.primers.bed\" -p \"n100.r01.s072_output/n100.r01.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam\" \"n100.r01.s072_output/n100.r01.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s072_output/n100.r01.s072.reference.fas\" \"n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam\" > \"n100.r01.s072_output/n100.r01.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s072_output/n100.r01.s072.reference.fas\" --call-indels \"n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam\" > \"n100.r01.s072_output/n100.r01.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam\" > \"n100.r01.s072_output/n100.r01.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s072_output/n100.r01.s072.depth.txt\" \"n100.r01.s072_output/n100.r01.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s072_output/n100.r01.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s072_output/n100.r01.s072.reference.fas\" | bcftools consensus -m \"n100.r01.s072_output/n100.r01.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s072_output/n100.r01.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 63e80a14 (flow 2afbc5be): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s007_output\"\n        wget -O \"n100.r01.s007_output/n100.r01.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s007_output/n100.r01.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s007_output/n100.r01.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s007_output/n100.r01.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s007_output/n100.r01.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s007_output/n100.r01.s007.reference.fas\" \"n100.r01.s007_output/n100.r01.s007.fq1.fastq\" \"n100.r01.s007_output/n100.r01.s007.fq2.fastq\" | samtools view -bS - > \"n100.r01.s007_output/n100.r01.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s007_output/n100.r01.s007.untrimmed.sorted.bam\" \"n100.r01.s007_output/n100.r01.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s007_output/n100.r01.s007.untrimmed.sorted.bam\" -b \"n100.r01.s007_output/n100.r01.s007.primers.bed\" -p \"n100.r01.s007_output/n100.r01.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam\" \"n100.r01.s007_output/n100.r01.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s007_output/n100.r01.s007.reference.fas\" \"n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam\" > \"n100.r01.s007_output/n100.r01.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s007_output/n100.r01.s007.reference.fas\" --call-indels \"n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam\" > \"n100.r01.s007_output/n100.r01.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam\" > \"n100.r01.s007_output/n100.r01.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s007_output/n100.r01.s007.depth.txt\" \"n100.r01.s007_output/n100.r01.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s007_output/n100.r01.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s007_output/n100.r01.s007.reference.fas\" | bcftools consensus -m \"n100.r01.s007_output/n100.r01.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s007_output/n100.r01.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 6537941d (flow 686ec8c9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s065_output\"\n        wget -O \"n100.r01.s065_output/n100.r01.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s065_output/n100.r01.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s065_output/n100.r01.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s065_output/n100.r01.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s065_output/n100.r01.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s065_output/n100.r01.s065.reference.fas\" \"n100.r01.s065_output/n100.r01.s065.fq1.fastq\" \"n100.r01.s065_output/n100.r01.s065.fq2.fastq\" | samtools view -bS - > \"n100.r01.s065_output/n100.r01.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s065_output/n100.r01.s065.untrimmed.sorted.bam\" \"n100.r01.s065_output/n100.r01.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s065_output/n100.r01.s065.untrimmed.sorted.bam\" -b \"n100.r01.s065_output/n100.r01.s065.primers.bed\" -p \"n100.r01.s065_output/n100.r01.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam\" \"n100.r01.s065_output/n100.r01.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s065_output/n100.r01.s065.reference.fas\" \"n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam\" > \"n100.r01.s065_output/n100.r01.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s065_output/n100.r01.s065.reference.fas\" --call-indels \"n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam\" > \"n100.r01.s065_output/n100.r01.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam\" > \"n100.r01.s065_output/n100.r01.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s065_output/n100.r01.s065.depth.txt\" \"n100.r01.s065_output/n100.r01.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s065_output/n100.r01.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s065_output/n100.r01.s065.reference.fas\" | bcftools consensus -m \"n100.r01.s065_output/n100.r01.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s065_output/n100.r01.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 92de7a43 (flow 0b5af3a9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s083_output\"\n        wget -O \"n100.r01.s083_output/n100.r01.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s083_output/n100.r01.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s083_output/n100.r01.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s083_output/n100.r01.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s083_output/n100.r01.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s083_output/n100.r01.s083.reference.fas\" \"n100.r01.s083_output/n100.r01.s083.fq1.fastq\" \"n100.r01.s083_output/n100.r01.s083.fq2.fastq\" | samtools view -bS - > \"n100.r01.s083_output/n100.r01.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s083_output/n100.r01.s083.untrimmed.sorted.bam\" \"n100.r01.s083_output/n100.r01.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s083_output/n100.r01.s083.untrimmed.sorted.bam\" -b \"n100.r01.s083_output/n100.r01.s083.primers.bed\" -p \"n100.r01.s083_output/n100.r01.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam\" \"n100.r01.s083_output/n100.r01.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s083_output/n100.r01.s083.reference.fas\" \"n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam\" > \"n100.r01.s083_output/n100.r01.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s083_output/n100.r01.s083.reference.fas\" --call-indels \"n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam\" > \"n100.r01.s083_output/n100.r01.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam\" > \"n100.r01.s083_output/n100.r01.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s083_output/n100.r01.s083.depth.txt\" \"n100.r01.s083_output/n100.r01.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s083_output/n100.r01.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s083_output/n100.r01.s083.reference.fas\" | bcftools consensus -m \"n100.r01.s083_output/n100.r01.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s083_output/n100.r01.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task d3849377 (flow a3c64438): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s008_output\"\n        wget -O \"n100.r01.s008_output/n100.r01.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s008_output/n100.r01.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s008_output/n100.r01.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s008_output/n100.r01.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s008_output/n100.r01.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s008_output/n100.r01.s008.reference.fas\" \"n100.r01.s008_output/n100.r01.s008.fq1.fastq\" \"n100.r01.s008_output/n100.r01.s008.fq2.fastq\" | samtools view -bS - > \"n100.r01.s008_output/n100.r01.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s008_output/n100.r01.s008.untrimmed.sorted.bam\" \"n100.r01.s008_output/n100.r01.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s008_output/n100.r01.s008.untrimmed.sorted.bam\" -b \"n100.r01.s008_output/n100.r01.s008.primers.bed\" -p \"n100.r01.s008_output/n100.r01.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam\" \"n100.r01.s008_output/n100.r01.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s008_output/n100.r01.s008.reference.fas\" \"n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam\" > \"n100.r01.s008_output/n100.r01.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s008_output/n100.r01.s008.reference.fas\" --call-indels \"n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam\" > \"n100.r01.s008_output/n100.r01.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam\" > \"n100.r01.s008_output/n100.r01.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s008_output/n100.r01.s008.depth.txt\" \"n100.r01.s008_output/n100.r01.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s008_output/n100.r01.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s008_output/n100.r01.s008.reference.fas\" | bcftools consensus -m \"n100.r01.s008_output/n100.r01.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s008_output/n100.r01.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 5ea5dcef (flow b6aba721): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s053_output\"\n        wget -O \"n100.r01.s053_output/n100.r01.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s053_output/n100.r01.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s053_output/n100.r01.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s053_output/n100.r01.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s053_output/n100.r01.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s053_output/n100.r01.s053.reference.fas\" \"n100.r01.s053_output/n100.r01.s053.fq1.fastq\" \"n100.r01.s053_output/n100.r01.s053.fq2.fastq\" | samtools view -bS - > \"n100.r01.s053_output/n100.r01.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s053_output/n100.r01.s053.untrimmed.sorted.bam\" \"n100.r01.s053_output/n100.r01.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s053_output/n100.r01.s053.untrimmed.sorted.bam\" -b \"n100.r01.s053_output/n100.r01.s053.primers.bed\" -p \"n100.r01.s053_output/n100.r01.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam\" \"n100.r01.s053_output/n100.r01.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s053_output/n100.r01.s053.reference.fas\" \"n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam\" > \"n100.r01.s053_output/n100.r01.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s053_output/n100.r01.s053.reference.fas\" --call-indels \"n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam\" > \"n100.r01.s053_output/n100.r01.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam\" > \"n100.r01.s053_output/n100.r01.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s053_output/n100.r01.s053.depth.txt\" \"n100.r01.s053_output/n100.r01.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s053_output/n100.r01.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s053_output/n100.r01.s053.reference.fas\" | bcftools consensus -m \"n100.r01.s053_output/n100.r01.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s053_output/n100.r01.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 8280a85f (flow c90d12cc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s032_output\"\n        wget -O \"n100.r01.s032_output/n100.r01.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s032_output/n100.r01.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s032_output/n100.r01.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s032_output/n100.r01.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s032_output/n100.r01.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s032_output/n100.r01.s032.reference.fas\" \"n100.r01.s032_output/n100.r01.s032.fq1.fastq\" \"n100.r01.s032_output/n100.r01.s032.fq2.fastq\" | samtools view -bS - > \"n100.r01.s032_output/n100.r01.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s032_output/n100.r01.s032.untrimmed.sorted.bam\" \"n100.r01.s032_output/n100.r01.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s032_output/n100.r01.s032.untrimmed.sorted.bam\" -b \"n100.r01.s032_output/n100.r01.s032.primers.bed\" -p \"n100.r01.s032_output/n100.r01.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam\" \"n100.r01.s032_output/n100.r01.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s032_output/n100.r01.s032.reference.fas\" \"n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam\" > \"n100.r01.s032_output/n100.r01.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s032_output/n100.r01.s032.reference.fas\" --call-indels \"n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam\" > \"n100.r01.s032_output/n100.r01.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam\" > \"n100.r01.s032_output/n100.r01.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s032_output/n100.r01.s032.depth.txt\" \"n100.r01.s032_output/n100.r01.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s032_output/n100.r01.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s032_output/n100.r01.s032.reference.fas\" | bcftools consensus -m \"n100.r01.s032_output/n100.r01.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s032_output/n100.r01.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 47b72df9 (flow ada3a42a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s089_output\"\n        wget -O \"n100.r01.s089_output/n100.r01.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s089_output/n100.r01.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s089_output/n100.r01.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s089_output/n100.r01.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s089_output/n100.r01.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s089_output/n100.r01.s089.reference.fas\" \"n100.r01.s089_output/n100.r01.s089.fq1.fastq\" \"n100.r01.s089_output/n100.r01.s089.fq2.fastq\" | samtools view -bS - > \"n100.r01.s089_output/n100.r01.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s089_output/n100.r01.s089.untrimmed.sorted.bam\" \"n100.r01.s089_output/n100.r01.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s089_output/n100.r01.s089.untrimmed.sorted.bam\" -b \"n100.r01.s089_output/n100.r01.s089.primers.bed\" -p \"n100.r01.s089_output/n100.r01.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam\" \"n100.r01.s089_output/n100.r01.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s089_output/n100.r01.s089.reference.fas\" \"n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam\" > \"n100.r01.s089_output/n100.r01.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s089_output/n100.r01.s089.reference.fas\" --call-indels \"n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam\" > \"n100.r01.s089_output/n100.r01.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam\" > \"n100.r01.s089_output/n100.r01.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s089_output/n100.r01.s089.depth.txt\" \"n100.r01.s089_output/n100.r01.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s089_output/n100.r01.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s089_output/n100.r01.s089.reference.fas\" | bcftools consensus -m \"n100.r01.s089_output/n100.r01.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s089_output/n100.r01.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 26fea548 (flow af45f049): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s079_output\"\n        wget -O \"n100.r01.s079_output/n100.r01.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s079_output/n100.r01.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s079_output/n100.r01.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s079_output/n100.r01.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s079_output/n100.r01.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s079_output/n100.r01.s079.reference.fas\" \"n100.r01.s079_output/n100.r01.s079.fq1.fastq\" \"n100.r01.s079_output/n100.r01.s079.fq2.fastq\" | samtools view -bS - > \"n100.r01.s079_output/n100.r01.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s079_output/n100.r01.s079.untrimmed.sorted.bam\" \"n100.r01.s079_output/n100.r01.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s079_output/n100.r01.s079.untrimmed.sorted.bam\" -b \"n100.r01.s079_output/n100.r01.s079.primers.bed\" -p \"n100.r01.s079_output/n100.r01.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam\" \"n100.r01.s079_output/n100.r01.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s079_output/n100.r01.s079.reference.fas\" \"n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam\" > \"n100.r01.s079_output/n100.r01.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s079_output/n100.r01.s079.reference.fas\" --call-indels \"n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam\" > \"n100.r01.s079_output/n100.r01.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam\" > \"n100.r01.s079_output/n100.r01.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s079_output/n100.r01.s079.depth.txt\" \"n100.r01.s079_output/n100.r01.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s079_output/n100.r01.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s079_output/n100.r01.s079.reference.fas\" | bcftools consensus -m \"n100.r01.s079_output/n100.r01.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s079_output/n100.r01.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task e3778923 (flow 574fe4ef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s082_output\"\n        wget -O \"n100.r01.s082_output/n100.r01.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s082_output/n100.r01.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s082_output/n100.r01.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s082_output/n100.r01.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s082_output/n100.r01.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s082_output/n100.r01.s082.reference.fas\" \"n100.r01.s082_output/n100.r01.s082.fq1.fastq\" \"n100.r01.s082_output/n100.r01.s082.fq2.fastq\" | samtools view -bS - > \"n100.r01.s082_output/n100.r01.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s082_output/n100.r01.s082.untrimmed.sorted.bam\" \"n100.r01.s082_output/n100.r01.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s082_output/n100.r01.s082.untrimmed.sorted.bam\" -b \"n100.r01.s082_output/n100.r01.s082.primers.bed\" -p \"n100.r01.s082_output/n100.r01.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam\" \"n100.r01.s082_output/n100.r01.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s082_output/n100.r01.s082.reference.fas\" \"n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam\" > \"n100.r01.s082_output/n100.r01.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s082_output/n100.r01.s082.reference.fas\" --call-indels \"n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam\" > \"n100.r01.s082_output/n100.r01.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam\" > \"n100.r01.s082_output/n100.r01.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s082_output/n100.r01.s082.depth.txt\" \"n100.r01.s082_output/n100.r01.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s082_output/n100.r01.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s082_output/n100.r01.s082.reference.fas\" | bcftools consensus -m \"n100.r01.s082_output/n100.r01.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s082_output/n100.r01.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 5eba3638 (flow a1920ceb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s095_output\"\n        wget -O \"n100.r01.s095_output/n100.r01.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s095_output/n100.r01.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s095_output/n100.r01.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s095_output/n100.r01.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s095_output/n100.r01.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s095_output/n100.r01.s095.reference.fas\" \"n100.r01.s095_output/n100.r01.s095.fq1.fastq\" \"n100.r01.s095_output/n100.r01.s095.fq2.fastq\" | samtools view -bS - > \"n100.r01.s095_output/n100.r01.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s095_output/n100.r01.s095.untrimmed.sorted.bam\" \"n100.r01.s095_output/n100.r01.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s095_output/n100.r01.s095.untrimmed.sorted.bam\" -b \"n100.r01.s095_output/n100.r01.s095.primers.bed\" -p \"n100.r01.s095_output/n100.r01.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam\" \"n100.r01.s095_output/n100.r01.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s095_output/n100.r01.s095.reference.fas\" \"n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam\" > \"n100.r01.s095_output/n100.r01.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s095_output/n100.r01.s095.reference.fas\" --call-indels \"n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam\" > \"n100.r01.s095_output/n100.r01.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam\" > \"n100.r01.s095_output/n100.r01.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s095_output/n100.r01.s095.depth.txt\" \"n100.r01.s095_output/n100.r01.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s095_output/n100.r01.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s095_output/n100.r01.s095.reference.fas\" | bcftools consensus -m \"n100.r01.s095_output/n100.r01.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s095_output/n100.r01.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task fa62b07a (flow 12d83baf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s087_output\"\n        wget -O \"n100.r01.s087_output/n100.r01.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s087_output/n100.r01.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s087_output/n100.r01.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s087_output/n100.r01.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s087_output/n100.r01.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s087_output/n100.r01.s087.reference.fas\" \"n100.r01.s087_output/n100.r01.s087.fq1.fastq\" \"n100.r01.s087_output/n100.r01.s087.fq2.fastq\" | samtools view -bS - > \"n100.r01.s087_output/n100.r01.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s087_output/n100.r01.s087.untrimmed.sorted.bam\" \"n100.r01.s087_output/n100.r01.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s087_output/n100.r01.s087.untrimmed.sorted.bam\" -b \"n100.r01.s087_output/n100.r01.s087.primers.bed\" -p \"n100.r01.s087_output/n100.r01.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam\" \"n100.r01.s087_output/n100.r01.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s087_output/n100.r01.s087.reference.fas\" \"n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam\" > \"n100.r01.s087_output/n100.r01.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s087_output/n100.r01.s087.reference.fas\" --call-indels \"n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam\" > \"n100.r01.s087_output/n100.r01.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam\" > \"n100.r01.s087_output/n100.r01.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s087_output/n100.r01.s087.depth.txt\" \"n100.r01.s087_output/n100.r01.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s087_output/n100.r01.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s087_output/n100.r01.s087.reference.fas\" | bcftools consensus -m \"n100.r01.s087_output/n100.r01.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s087_output/n100.r01.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task ffd18420 (flow 1fe8d91f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s099_output\"\n        wget -O \"n100.r01.s099_output/n100.r01.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s099_output/n100.r01.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s099_output/n100.r01.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s099_output/n100.r01.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s099_output/n100.r01.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s099_output/n100.r01.s099.reference.fas\" \"n100.r01.s099_output/n100.r01.s099.fq1.fastq\" \"n100.r01.s099_output/n100.r01.s099.fq2.fastq\" | samtools view -bS - > \"n100.r01.s099_output/n100.r01.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s099_output/n100.r01.s099.untrimmed.sorted.bam\" \"n100.r01.s099_output/n100.r01.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s099_output/n100.r01.s099.untrimmed.sorted.bam\" -b \"n100.r01.s099_output/n100.r01.s099.primers.bed\" -p \"n100.r01.s099_output/n100.r01.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam\" \"n100.r01.s099_output/n100.r01.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s099_output/n100.r01.s099.reference.fas\" \"n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam\" > \"n100.r01.s099_output/n100.r01.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s099_output/n100.r01.s099.reference.fas\" --call-indels \"n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam\" > \"n100.r01.s099_output/n100.r01.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam\" > \"n100.r01.s099_output/n100.r01.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s099_output/n100.r01.s099.depth.txt\" \"n100.r01.s099_output/n100.r01.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s099_output/n100.r01.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s099_output/n100.r01.s099.reference.fas\" | bcftools consensus -m \"n100.r01.s099_output/n100.r01.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s099_output/n100.r01.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 13a3982a (flow c9646626): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s097_output\"\n        wget -O \"n100.r01.s097_output/n100.r01.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s097_output/n100.r01.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s097_output/n100.r01.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s097_output/n100.r01.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s097_output/n100.r01.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s097_output/n100.r01.s097.reference.fas\" \"n100.r01.s097_output/n100.r01.s097.fq1.fastq\" \"n100.r01.s097_output/n100.r01.s097.fq2.fastq\" | samtools view -bS - > \"n100.r01.s097_output/n100.r01.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s097_output/n100.r01.s097.untrimmed.sorted.bam\" \"n100.r01.s097_output/n100.r01.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s097_output/n100.r01.s097.untrimmed.sorted.bam\" -b \"n100.r01.s097_output/n100.r01.s097.primers.bed\" -p \"n100.r01.s097_output/n100.r01.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam\" \"n100.r01.s097_output/n100.r01.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s097_output/n100.r01.s097.reference.fas\" \"n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam\" > \"n100.r01.s097_output/n100.r01.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s097_output/n100.r01.s097.reference.fas\" --call-indels \"n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam\" > \"n100.r01.s097_output/n100.r01.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam\" > \"n100.r01.s097_output/n100.r01.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s097_output/n100.r01.s097.depth.txt\" \"n100.r01.s097_output/n100.r01.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s097_output/n100.r01.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s097_output/n100.r01.s097.reference.fas\" | bcftools consensus -m \"n100.r01.s097_output/n100.r01.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s097_output/n100.r01.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 2c0a979f (flow fa875239): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s009_output\"\n        wget -O \"n100.r01.s009_output/n100.r01.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s009_output/n100.r01.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s009_output/n100.r01.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s009_output/n100.r01.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s009_output/n100.r01.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s009_output/n100.r01.s009.reference.fas\" \"n100.r01.s009_output/n100.r01.s009.fq1.fastq\" \"n100.r01.s009_output/n100.r01.s009.fq2.fastq\" | samtools view -bS - > \"n100.r01.s009_output/n100.r01.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s009_output/n100.r01.s009.untrimmed.sorted.bam\" \"n100.r01.s009_output/n100.r01.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s009_output/n100.r01.s009.untrimmed.sorted.bam\" -b \"n100.r01.s009_output/n100.r01.s009.primers.bed\" -p \"n100.r01.s009_output/n100.r01.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam\" \"n100.r01.s009_output/n100.r01.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s009_output/n100.r01.s009.reference.fas\" \"n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam\" > \"n100.r01.s009_output/n100.r01.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s009_output/n100.r01.s009.reference.fas\" --call-indels \"n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam\" > \"n100.r01.s009_output/n100.r01.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam\" > \"n100.r01.s009_output/n100.r01.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s009_output/n100.r01.s009.depth.txt\" \"n100.r01.s009_output/n100.r01.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s009_output/n100.r01.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s009_output/n100.r01.s009.reference.fas\" | bcftools consensus -m \"n100.r01.s009_output/n100.r01.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s009_output/n100.r01.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task 47ccd70f (flow 04b2f4d8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s054_output\"\n        wget -O \"n100.r01.s054_output/n100.r01.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s054_output/n100.r01.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s054_output/n100.r01.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s054_output/n100.r01.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s054_output/n100.r01.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s054_output/n100.r01.s054.reference.fas\" \"n100.r01.s054_output/n100.r01.s054.fq1.fastq\" \"n100.r01.s054_output/n100.r01.s054.fq2.fastq\" | samtools view -bS - > \"n100.r01.s054_output/n100.r01.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s054_output/n100.r01.s054.untrimmed.sorted.bam\" \"n100.r01.s054_output/n100.r01.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s054_output/n100.r01.s054.untrimmed.sorted.bam\" -b \"n100.r01.s054_output/n100.r01.s054.primers.bed\" -p \"n100.r01.s054_output/n100.r01.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam\" \"n100.r01.s054_output/n100.r01.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s054_output/n100.r01.s054.reference.fas\" \"n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam\" > \"n100.r01.s054_output/n100.r01.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s054_output/n100.r01.s054.reference.fas\" --call-indels \"n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam\" > \"n100.r01.s054_output/n100.r01.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam\" > \"n100.r01.s054_output/n100.r01.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s054_output/n100.r01.s054.depth.txt\" \"n100.r01.s054_output/n100.r01.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s054_output/n100.r01.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s054_output/n100.r01.s054.reference.fas\" | bcftools consensus -m \"n100.r01.s054_output/n100.r01.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s054_output/n100.r01.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:52:12 scheduler task df89e983 (flow 97443e88): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r01.s039_output\"\n        wget -O \"n100.r01.s039_output/n100.r01.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r01.s039_output/n100.r01.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r01.s039_output/n100.r01.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r01.s039_output/n100.r01.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r01.s039_output/n100.r01.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r01.s039_output/n100.r01.s039.reference.fas\" \"n100.r01.s039_output/n100.r01.s039.fq1.fastq\" \"n100.r01.s039_output/n100.r01.s039.fq2.fastq\" | samtools view -bS - > \"n100.r01.s039_output/n100.r01.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s039_output/n100.r01.s039.untrimmed.sorted.bam\" \"n100.r01.s039_output/n100.r01.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r01.s039_output/n100.r01.s039.untrimmed.sorted.bam\" -b \"n100.r01.s039_output/n100.r01.s039.primers.bed\" -p \"n100.r01.s039_output/n100.r01.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam\" \"n100.r01.s039_output/n100.r01.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r01.s039_output/n100.r01.s039.reference.fas\" \"n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam\" > \"n100.r01.s039_output/n100.r01.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r01.s039_output/n100.r01.s039.reference.fas\" --call-indels \"n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam\" > \"n100.r01.s039_output/n100.r01.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam\" > \"n100.r01.s039_output/n100.r01.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r01.s039_output/n100.r01.s039.depth.txt\" \"n100.r01.s039_output/n100.r01.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r01.s039_output/n100.r01.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r01.s039_output/n100.r01.s039.reference.fas\" | bcftools consensus -m \"n100.r01.s039_output/n100.r01.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r01.s039_output/n100.r01.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r01.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r01/n100.r01.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r01/n100.r01.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 13:53:29 scheduler task 7cbb434c (flow 8d902717): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task df89e983 (flow 97443e88): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 47ccd70f (flow 04b2f4d8): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 2c0a979f (flow fa875239): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 13a3982a (flow c9646626): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task ffd18420 (flow 1fe8d91f): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task fa62b07a (flow 12d83baf): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 5eba3638 (flow a1920ceb): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 2c0a979f (flow fa875239): loading (try 0): started
2021/07/08 13:53:29 scheduler task ffd18420 (flow 1fe8d91f): loading (try 0): started
2021/07/08 13:53:29 scheduler task e3778923 (flow 574fe4ef): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task ffd18420 (flow 1fe8d91f): loading val<.=s3://niema-test/n100/r01/n100.r01.s099_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 2c0a979f (flow fa875239): loading val<.=s3://niema-test/n100/r01/n100.r01.s009_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 26fea548 (flow af45f049): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 5eba3638 (flow a1920ceb): loading (try 0): started
2021/07/08 13:53:29 scheduler task 26fea548 (flow af45f049): loading (try 0): started
2021/07/08 13:53:29 scheduler task 5eba3638 (flow a1920ceb): loading val<.=s3://niema-test/n100/r01/n100.r01.s095_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 26fea548 (flow af45f049): loading val<.=s3://niema-test/n100/r01/n100.r01.s079_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5eba3638 (flow a1920ceb): loading val<.=s3://niema-test/n100/r01/n100.r01.s095_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task e3778923 (flow 574fe4ef): loading (try 0): started
2021/07/08 13:53:29 scheduler task 26fea548 (flow af45f049): loading val<.=s3://niema-test/n100/r01/n100.r01.s079_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task df89e983 (flow 97443e88): loading (try 0): started
2021/07/08 13:53:29 scheduler task e3778923 (flow 574fe4ef): loading val<.=s3://niema-test/n100/r01/n100.r01.s082_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task df89e983 (flow 97443e88): loading val<.=s3://niema-test/n100/r01/n100.r01.s039_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 13a3982a (flow c9646626): loading (try 0): started
2021/07/08 13:53:29 scheduler task e3778923 (flow 574fe4ef): loading val<.=s3://niema-test/n100/r01/n100.r01.s082_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 13a3982a (flow c9646626): loading val<.=s3://niema-test/n100/r01/n100.r01.s097_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task df89e983 (flow 97443e88): loading val<.=s3://niema-test/n100/r01/n100.r01.s039_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task fa62b07a (flow 12d83baf): loading (try 0): started
2021/07/08 13:53:29 scheduler task ffd18420 (flow 1fe8d91f): loading val<.=s3://niema-test/n100/r01/n100.r01.s099_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task fa62b07a (flow 12d83baf): loading val<.=s3://niema-test/n100/r01/n100.r01.s087_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 2c0a979f (flow fa875239): loading val<.=s3://niema-test/n100/r01/n100.r01.s009_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 47b72df9 (flow ada3a42a): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 8280a85f (flow c90d12cc): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 7cbb434c (flow 8d902717): loading (try 0): started
2021/07/08 13:53:29 scheduler task 47ccd70f (flow 04b2f4d8): loading (try 0): started
2021/07/08 13:53:29 scheduler task 13a3982a (flow c9646626): loading val<.=s3://niema-test/n100/r01/n100.r01.s097_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 47ccd70f (flow 04b2f4d8): loading val<.=s3://niema-test/n100/r01/n100.r01.s054_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task fa62b07a (flow 12d83baf): loading val<.=s3://niema-test/n100/r01/n100.r01.s087_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5ea5dcef (flow b6aba721): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task d3849377 (flow a3c64438): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 92de7a43 (flow 0b5af3a9): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 6537941d (flow 686ec8c9): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 63e80a14 (flow 2afbc5be): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task b7843960 (flow 4a121bc6): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 7ec3898d (flow 236f7412): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 7d0761ce (flow 62d09709): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 782b9981 (flow 466997bd): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 6a9006af (flow 15a25f65): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task dd684b46 (flow 9d1a9286): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task b7843960 (flow 4a121bc6): loading (try 0): started
2021/07/08 13:53:29 scheduler task 92de7a43 (flow 0b5af3a9): loading (try 0): started
2021/07/08 13:53:29 scheduler task 7d0761ce (flow 62d09709): loading (try 0): started
2021/07/08 13:53:29 scheduler task 63e80a14 (flow 2afbc5be): loading (try 0): started
2021/07/08 13:53:29 scheduler task 7d0761ce (flow 62d09709): loading val<.=s3://niema-test/n100/r01/n100.r01.s017_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 92de7a43 (flow 0b5af3a9): loading val<.=s3://niema-test/n100/r01/n100.r01.s083_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task b7843960 (flow 4a121bc6): loading val<.=s3://niema-test/n100/r01/n100.r01.s072_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 782b9981 (flow 466997bd): loading (try 0): started
2021/07/08 13:53:29 scheduler task dd684b46 (flow 9d1a9286): loading (try 0): started
2021/07/08 13:53:29 scheduler task 782b9981 (flow 466997bd): loading val<.=s3://niema-test/n100/r01/n100.r01.s080_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7d0761ce (flow 62d09709): loading val<.=s3://niema-test/n100/r01/n100.r01.s017_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6537941d (flow 686ec8c9): loading (try 0): started
2021/07/08 13:53:29 scheduler task dd684b46 (flow 9d1a9286): loading val<.=s3://niema-test/n100/r01/n100.r01.s030_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task dd684b46 (flow 9d1a9286): loading val<.=s3://niema-test/n100/r01/n100.r01.s030_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6537941d (flow 686ec8c9): loading val<.=s3://niema-test/n100/r01/n100.r01.s065_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task b7843960 (flow 4a121bc6): loading val<.=s3://niema-test/n100/r01/n100.r01.s072_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task d3849377 (flow a3c64438): loading (try 0): started
2021/07/08 13:53:29 scheduler task 63e80a14 (flow 2afbc5be): loading val<.=s3://niema-test/n100/r01/n100.r01.s007_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task d3849377 (flow a3c64438): loading val<.=s3://niema-test/n100/r01/n100.r01.s008_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 92de7a43 (flow 0b5af3a9): loading val<.=s3://niema-test/n100/r01/n100.r01.s083_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task d3849377 (flow a3c64438): loading val<.=s3://niema-test/n100/r01/n100.r01.s008_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 47b72df9 (flow ada3a42a): loading (try 0): started
2021/07/08 13:53:29 scheduler task 7cbb434c (flow 8d902717): loading val<.=s3://niema-test/n100/r01/n100.r01.s073_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 47b72df9 (flow ada3a42a): loading val<.=s3://niema-test/n100/r01/n100.r01.s089_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7cbb434c (flow 8d902717): loading val<.=s3://niema-test/n100/r01/n100.r01.s073_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 47ccd70f (flow 04b2f4d8): loading val<.=s3://niema-test/n100/r01/n100.r01.s054_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8280a85f (flow c90d12cc): loading (try 0): started
2021/07/08 13:53:29 scheduler task 8280a85f (flow c90d12cc): loading val<.=s3://niema-test/n100/r01/n100.r01.s032_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7ec3898d (flow 236f7412): loading (try 0): started
2021/07/08 13:53:29 scheduler task 7ec3898d (flow 236f7412): loading val<.=s3://niema-test/n100/r01/n100.r01.s024_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8280a85f (flow c90d12cc): loading val<.=s3://niema-test/n100/r01/n100.r01.s032_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5ba3ce8d (flow e1b32ab1): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task d6c86c87 (flow 6138a66a): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 0d9fcc7c (flow a4ee45a6): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 4ad47abd (flow 264f4a9d): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task bfa03bd4 (flow 75e88589): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 1c7f103e (flow 066587e3): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task ea47d9ff (flow a882905c): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task c982ccb7 (flow 0d88193c): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task a7bf4b87 (flow 6ea478fe): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task e89bffd7 (flow 5f65da5f): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 8b1f0155 (flow 99489b6e): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 7ec3898d (flow 236f7412): loading val<.=s3://niema-test/n100/r01/n100.r01.s024_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8b1f0155 (flow 99489b6e): loading (try 0): started
2021/07/08 13:53:29 scheduler task 8b1f0155 (flow 99489b6e): loading val<.=s3://niema-test/n100/r01/n100.r01.s056_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5ba3ce8d (flow e1b32ab1): loading (try 0): started
2021/07/08 13:53:29 scheduler task 1c7f103e (flow 066587e3): loading (try 0): started
2021/07/08 13:53:29 scheduler task 5ba3ce8d (flow e1b32ab1): loading val<.=s3://niema-test/n100/r01/n100.r01.s016_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 1c7f103e (flow 066587e3): loading val<.=s3://niema-test/n100/r01/n100.r01.s084_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task d6c86c87 (flow 6138a66a): loading (try 0): started
2021/07/08 13:53:29 scheduler task ea47d9ff (flow a882905c): loading (try 0): started
2021/07/08 13:53:29 scheduler task d6c86c87 (flow 6138a66a): loading val<.=s3://niema-test/n100/r01/n100.r01.s090_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task ea47d9ff (flow a882905c): loading val<.=s3://niema-test/n100/r01/n100.r01.s047_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0d9fcc7c (flow a4ee45a6): loading (try 0): started
2021/07/08 13:53:29 scheduler task c982ccb7 (flow 0d88193c): loading (try 0): started
2021/07/08 13:53:29 scheduler task 0d9fcc7c (flow a4ee45a6): loading val<.=s3://niema-test/n100/r01/n100.r01.s044_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task c982ccb7 (flow 0d88193c): loading val<.=s3://niema-test/n100/r01/n100.r01.s096_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4ad47abd (flow 264f4a9d): loading (try 0): started
2021/07/08 13:53:29 scheduler task a7bf4b87 (flow 6ea478fe): loading (try 0): started
2021/07/08 13:53:29 scheduler task 4ad47abd (flow 264f4a9d): loading val<.=s3://niema-test/n100/r01/n100.r01.s045_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task a7bf4b87 (flow 6ea478fe): loading val<.=s3://niema-test/n100/r01/n100.r01.s057_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bfa03bd4 (flow 75e88589): loading (try 0): started
2021/07/08 13:53:29 scheduler task e89bffd7 (flow 5f65da5f): loading (try 0): started
2021/07/08 13:53:29 scheduler task bfa03bd4 (flow 75e88589): loading val<.=s3://niema-test/n100/r01/n100.r01.s081_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task e89bffd7 (flow 5f65da5f): loading val<.=s3://niema-test/n100/r01/n100.r01.s064_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 63e80a14 (flow 2afbc5be): loading val<.=s3://niema-test/n100/r01/n100.r01.s007_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6537941d (flow 686ec8c9): loading val<.=s3://niema-test/n100/r01/n100.r01.s065_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 782b9981 (flow 466997bd): loading val<.=s3://niema-test/n100/r01/n100.r01.s080_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 90a6b802 (flow 4c471319): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task c982ccb7 (flow 0d88193c): loading val<.=s3://niema-test/n100/r01/n100.r01.s096_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 90a6b802 (flow 4c471319): loading (try 0): started
2021/07/08 13:53:29 scheduler task 97818aad (flow 3ce93691): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 90a6b802 (flow 4c471319): loading val<.=s3://niema-test/n100/r01/n100.r01.s019_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 251c61ad (flow b62d3501): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 7eaca4b3 (flow e0aa7377): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 814eb11a (flow e490893d): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 90a6b802 (flow 4c471319): loading val<.=s3://niema-test/n100/r01/n100.r01.s019_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 814eb11a (flow e490893d): loading (try 0): started
2021/07/08 13:53:29 scheduler task 788f7878 (flow eb24a0c4): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 814eb11a (flow e490893d): loading val<.=s3://niema-test/n100/r01/n100.r01.s046_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 788f7878 (flow eb24a0c4): loading (try 0): started
2021/07/08 13:53:29 scheduler task 0c141a13 (flow 9df7cd9b): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 788f7878 (flow eb24a0c4): loading val<.=s3://niema-test/n100/r01/n100.r01.s075_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 00418e33 (flow 580d88f9): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task c5194497 (flow bb46d7da): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 788f7878 (flow eb24a0c4): loading val<.=s3://niema-test/n100/r01/n100.r01.s075_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7eaca4b3 (flow e0aa7377): loading (try 0): started
2021/07/08 13:53:29 scheduler task 0c141a13 (flow 9df7cd9b): loading (try 0): started
2021/07/08 13:53:29 scheduler task 7eaca4b3 (flow e0aa7377): loading val<.=s3://niema-test/n100/r01/n100.r01.s006_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 814eb11a (flow e490893d): loading val<.=s3://niema-test/n100/r01/n100.r01.s046_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 97818aad (flow 3ce93691): loading (try 0): started
2021/07/08 13:53:29 scheduler task bc719b94 (flow 1fcc6ec2): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 7eaca4b3 (flow e0aa7377): loading val<.=s3://niema-test/n100/r01/n100.r01.s006_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 16911b07 (flow 1b870f15): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 97818aad (flow 3ce93691): loading val<.=s3://niema-test/n100/r01/n100.r01.s023_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 251c61ad (flow b62d3501): loading (try 0): started
2021/07/08 13:53:29 scheduler task a7bf4b87 (flow 6ea478fe): loading val<.=s3://niema-test/n100/r01/n100.r01.s057_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bc719b94 (flow 1fcc6ec2): loading (try 0): started
2021/07/08 13:53:29 scheduler task 97818aad (flow 3ce93691): loading val<.=s3://niema-test/n100/r01/n100.r01.s023_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 251c61ad (flow b62d3501): loading val<.=s3://niema-test/n100/r01/n100.r01.s088_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bc719b94 (flow 1fcc6ec2): loading val<.=s3://niema-test/n100/r01/n100.r01.s100_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task ee96b8c7 (flow 028284df): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task bc719b94 (flow 1fcc6ec2): loading val<.=s3://niema-test/n100/r01/n100.r01.s100_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6ec2dcb3 (flow e856bd44): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 251c61ad (flow b62d3501): loading val<.=s3://niema-test/n100/r01/n100.r01.s088_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6ec2dcb3 (flow e856bd44): loading (try 0): started
2021/07/08 13:53:29 scheduler task 6ec2dcb3 (flow e856bd44): loading val<.=s3://niema-test/n100/r01/n100.r01.s043_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6ec2dcb3 (flow e856bd44): loading val<.=s3://niema-test/n100/r01/n100.r01.s043_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5ba3ce8d (flow e1b32ab1): loading val<.=s3://niema-test/n100/r01/n100.r01.s016_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0c141a13 (flow 9df7cd9b): loading val<.=s3://niema-test/n100/r01/n100.r01.s027_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 00418e33 (flow 580d88f9): loading (try 0): started
2021/07/08 13:53:29 scheduler task 00418e33 (flow 580d88f9): loading val<.=s3://niema-test/n100/r01/n100.r01.s005_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task e89bffd7 (flow 5f65da5f): loading val<.=s3://niema-test/n100/r01/n100.r01.s064_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task c5194497 (flow bb46d7da): loading (try 0): started
2021/07/08 13:53:29 scheduler task c5194497 (flow bb46d7da): loading val<.=s3://niema-test/n100/r01/n100.r01.s028_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 00418e33 (flow 580d88f9): loading val<.=s3://niema-test/n100/r01/n100.r01.s005_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0d9fcc7c (flow a4ee45a6): loading val<.=s3://niema-test/n100/r01/n100.r01.s044_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4ad47abd (flow 264f4a9d): loading val<.=s3://niema-test/n100/r01/n100.r01.s045_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bfa03bd4 (flow 75e88589): loading val<.=s3://niema-test/n100/r01/n100.r01.s081_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8b1f0155 (flow 99489b6e): loading val<.=s3://niema-test/n100/r01/n100.r01.s056_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task c5194497 (flow bb46d7da): loading val<.=s3://niema-test/n100/r01/n100.r01.s028_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6a9006af (flow 15a25f65): loading (try 0): started
2021/07/08 13:53:29 scheduler task 6a9006af (flow 15a25f65): loading val<.=s3://niema-test/n100/r01/n100.r01.s068_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6a9006af (flow 15a25f65): loading val<.=s3://niema-test/n100/r01/n100.r01.s068_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 1c7f103e (flow 066587e3): loading val<.=s3://niema-test/n100/r01/n100.r01.s084_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task ea47d9ff (flow a882905c): loading val<.=s3://niema-test/n100/r01/n100.r01.s047_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 47b72df9 (flow ada3a42a): loading val<.=s3://niema-test/n100/r01/n100.r01.s089_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task d6c86c87 (flow 6138a66a): loading val<.=s3://niema-test/n100/r01/n100.r01.s090_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5ea5dcef (flow b6aba721): loading (try 0): started
2021/07/08 13:53:29 scheduler task 5ea5dcef (flow b6aba721): loading val<.=s3://niema-test/n100/r01/n100.r01.s053_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0c141a13 (flow 9df7cd9b): loading val<.=s3://niema-test/n100/r01/n100.r01.s027_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5ea5dcef (flow b6aba721): loading val<.=s3://niema-test/n100/r01/n100.r01.s053_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 16911b07 (flow 1b870f15): loading (try 0): started
2021/07/08 13:53:29 scheduler task 91a49b70 (flow dc0a8500): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 16911b07 (flow 1b870f15): loading val<.=s3://niema-test/n100/r01/n100.r01.s085_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 91a49b70 (flow dc0a8500): loading (try 0): started
2021/07/08 13:53:29 scheduler task ee96b8c7 (flow 028284df): loading (try 0): started
2021/07/08 13:53:29 scheduler task 91a49b70 (flow dc0a8500): loading val<.=s3://niema-test/n100/r01/n100.r01.s029_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7c7b163b (flow 441ccf77): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task ee96b8c7 (flow 028284df): loading val<.=s3://niema-test/n100/r01/n100.r01.s076_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7c7b163b (flow 441ccf77): loading (try 0): started
2021/07/08 13:53:29 scheduler task 7c7b163b (flow 441ccf77): loading val<.=s3://niema-test/n100/r01/n100.r01.s049_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 16911b07 (flow 1b870f15): loading val<.=s3://niema-test/n100/r01/n100.r01.s085_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 7c7b163b (flow 441ccf77): loading val<.=s3://niema-test/n100/r01/n100.r01.s049_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 91a49b70 (flow dc0a8500): loading val<.=s3://niema-test/n100/r01/n100.r01.s029_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task ee96b8c7 (flow 028284df): loading val<.=s3://niema-test/n100/r01/n100.r01.s076_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6e4fdc45 (flow fcf02ceb): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task e480ee50 (flow 7d31354e): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task de4e06de (flow 337713ba): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 557c581c (flow ec5fcaaf): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task a5b4a8c4 (flow 64ed8f81): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 6a8b9655 (flow 09a7347a): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task b25ce208 (flow f21eee98): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 5d1b3fa7 (flow 5ac278bc): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 1276c917 (flow 8986bd36): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 3e0df658 (flow da15cf49): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 523904ca (flow 9b5d68c9): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 97660e05 (flow c1a6fe3a): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task df7b7632 (flow cb85a725): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 3cbe7084 (flow f4094bfe): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 9bf76c45 (flow 493067ab): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task f0d0ce5d (flow 15203b14): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 8f377fd7 (flow 1f9bdd3e): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 9ca279ac (flow 8a6b6586): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 8b2fb039 (flow d0853815): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 642e6110 (flow 18df7aad): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 71597e7d (flow 3470f7ea): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 4a2be2fe (flow a35830e3): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 0fea5d54 (flow 44ac81a2): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 35fa303c (flow 0b006c5d): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task cc686dc9 (flow 9eb55c09): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task bf4e2cad (flow 39634eeb): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task d58dd643 (flow 6d1f26d4): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 89fa88da (flow 6636d54a): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task dc6ab090 (flow a6c01e21): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task c5917b88 (flow 1a8edfa6): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 468f0ab1 (flow acea3fd9): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 2cd9def4 (flow fea6d9e1): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task e1e24653 (flow 9d6059f7): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task ce295c92 (flow 4cdb8625): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 8f179a44 (flow f3e1b152): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task cd8b0435 (flow 831ed94c): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 128087c4 (flow 6dc80144): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 0a01661c (flow b52f6d52): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 9ad01cec (flow 6dee772b): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 08e2a9ed (flow 1d467a73): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 238ca419 (flow 8082561f): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task bef5a6aa (flow 50884d6c): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task eff5e8ec (flow 01b3e50d): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task aae3d819 (flow cb63bac2): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 378eabfc (flow 5ba5cdc9): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task aa7885b4 (flow 963957c7): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 4d45e98c (flow 3fec048b): assigning to alloc ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 13:53:29 scheduler task 6e4fdc45 (flow fcf02ceb): loading (try 0): started
2021/07/08 13:53:29 scheduler task 6e4fdc45 (flow fcf02ceb): loading val<.=s3://niema-test/n100/r01/n100.r01.s094_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task e480ee50 (flow 7d31354e): loading (try 0): started
2021/07/08 13:53:29 scheduler task e480ee50 (flow 7d31354e): loading val<.=s3://niema-test/n100/r01/n100.r01.s091_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 238ca419 (flow 8082561f): loading (try 0): started
2021/07/08 13:53:29 scheduler task 9ca279ac (flow 8a6b6586): loading (try 0): started
2021/07/08 13:53:29 scheduler task 238ca419 (flow 8082561f): loading val<.=s3://niema-test/n100/r01/n100.r01.s026_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task e480ee50 (flow 7d31354e): loading val<.=s3://niema-test/n100/r01/n100.r01.s091_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 9ca279ac (flow 8a6b6586): loading val<.=s3://niema-test/n100/r01/n100.r01.s063_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 97660e05 (flow c1a6fe3a): loading (try 0): started
2021/07/08 13:53:29 scheduler task aae3d819 (flow cb63bac2): loading (try 0): started
2021/07/08 13:53:29 scheduler task 3e0df658 (flow da15cf49): loading (try 0): started
2021/07/08 13:53:29 scheduler task df7b7632 (flow cb85a725): loading (try 0): started
2021/07/08 13:53:29 scheduler task aae3d819 (flow cb63bac2): loading val<.=s3://niema-test/n100/r01/n100.r01.s002_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0a01661c (flow b52f6d52): loading (try 0): started
2021/07/08 13:53:29 scheduler task 3cbe7084 (flow f4094bfe): loading (try 0): started
2021/07/08 13:53:29 scheduler task d58dd643 (flow 6d1f26d4): loading (try 0): started
2021/07/08 13:53:29 scheduler task 9ca279ac (flow 8a6b6586): loading val<.=s3://niema-test/n100/r01/n100.r01.s063_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task eff5e8ec (flow 01b3e50d): loading (try 0): started
2021/07/08 13:53:29 scheduler task aa7885b4 (flow 963957c7): loading (try 0): started
2021/07/08 13:53:29 scheduler task d58dd643 (flow 6d1f26d4): loading val<.=s3://niema-test/n100/r01/n100.r01.s003_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0a01661c (flow b52f6d52): loading val<.=s3://niema-test/n100/r01/n100.r01.s037_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8f179a44 (flow f3e1b152): loading (try 0): started
2021/07/08 13:53:29 scheduler task 3cbe7084 (flow f4094bfe): loading val<.=s3://niema-test/n100/r01/n100.r01.s059_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task aa7885b4 (flow 963957c7): loading val<.=s3://niema-test/n100/r01/n100.r01.s011_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8f179a44 (flow f3e1b152): loading val<.=s3://niema-test/n100/r01/n100.r01.s001_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8f179a44 (flow f3e1b152): loading val<.=s3://niema-test/n100/r01/n100.r01.s001_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 468f0ab1 (flow acea3fd9): loading (try 0): started
2021/07/08 13:53:29 scheduler task e1e24653 (flow 9d6059f7): loading (try 0): started
2021/07/08 13:53:29 scheduler task 468f0ab1 (flow acea3fd9): loading val<.=s3://niema-test/n100/r01/n100.r01.s018_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 468f0ab1 (flow acea3fd9): loading val<.=s3://niema-test/n100/r01/n100.r01.s018_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task e1e24653 (flow 9d6059f7): loading val<.=s3://niema-test/n100/r01/n100.r01.s086_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4d45e98c (flow 3fec048b): loading (try 0): started
2021/07/08 13:53:29 scheduler task e1e24653 (flow 9d6059f7): loading val<.=s3://niema-test/n100/r01/n100.r01.s086_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4d45e98c (flow 3fec048b): loading val<.=s3://niema-test/n100/r01/n100.r01.s092_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 642e6110 (flow 18df7aad): loading (try 0): started
2021/07/08 13:53:29 scheduler task 642e6110 (flow 18df7aad): loading val<.=s3://niema-test/n100/r01/n100.r01.s070_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task df7b7632 (flow cb85a725): loading val<.=s3://niema-test/n100/r01/n100.r01.s055_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 642e6110 (flow 18df7aad): loading val<.=s3://niema-test/n100/r01/n100.r01.s070_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6e4fdc45 (flow fcf02ceb): loading val<.=s3://niema-test/n100/r01/n100.r01.s094_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task b25ce208 (flow f21eee98): loading (try 0): started
2021/07/08 13:53:29 scheduler task b25ce208 (flow f21eee98): loading val<.=s3://niema-test/n100/r01/n100.r01.s036_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 238ca419 (flow 8082561f): loading val<.=s3://niema-test/n100/r01/n100.r01.s026_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bef5a6aa (flow 50884d6c): loading (try 0): started
2021/07/08 13:53:29 scheduler task bef5a6aa (flow 50884d6c): loading val<.=s3://niema-test/n100/r01/n100.r01.s041_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task b25ce208 (flow f21eee98): loading val<.=s3://niema-test/n100/r01/n100.r01.s036_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 97660e05 (flow c1a6fe3a): loading val<.=s3://niema-test/n100/r01/n100.r01.s031_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 3e0df658 (flow da15cf49): loading val<.=s3://niema-test/n100/r01/n100.r01.s021_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task dc6ab090 (flow a6c01e21): loading (try 0): started
2021/07/08 13:53:29 scheduler task 6a8b9655 (flow 09a7347a): loading (try 0): started
2021/07/08 13:53:29 scheduler task dc6ab090 (flow a6c01e21): loading val<.=s3://niema-test/n100/r01/n100.r01.s052_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 6a8b9655 (flow 09a7347a): loading val<.=s3://niema-test/n100/r01/n100.r01.s042_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task de4e06de (flow 337713ba): loading (try 0): started
2021/07/08 13:53:29 scheduler task 6a8b9655 (flow 09a7347a): loading val<.=s3://niema-test/n100/r01/n100.r01.s042_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task de4e06de (flow 337713ba): loading val<.=s3://niema-test/n100/r01/n100.r01.s012_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task de4e06de (flow 337713ba): loading val<.=s3://niema-test/n100/r01/n100.r01.s012_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 557c581c (flow ec5fcaaf): loading (try 0): started
2021/07/08 13:53:29 scheduler task 557c581c (flow ec5fcaaf): loading val<.=s3://niema-test/n100/r01/n100.r01.s069_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8f377fd7 (flow 1f9bdd3e): loading (try 0): started
2021/07/08 13:53:29 scheduler task 8f377fd7 (flow 1f9bdd3e): loading val<.=s3://niema-test/n100/r01/n100.r01.s051_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 557c581c (flow ec5fcaaf): loading val<.=s3://niema-test/n100/r01/n100.r01.s069_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task a5b4a8c4 (flow 64ed8f81): loading (try 0): started
2021/07/08 13:53:29 scheduler task a5b4a8c4 (flow 64ed8f81): loading val<.=s3://niema-test/n100/r01/n100.r01.s010_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8f377fd7 (flow 1f9bdd3e): loading val<.=s3://niema-test/n100/r01/n100.r01.s051_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 523904ca (flow 9b5d68c9): loading (try 0): started
2021/07/08 13:53:29 scheduler task 523904ca (flow 9b5d68c9): loading val<.=s3://niema-test/n100/r01/n100.r01.s022_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task a5b4a8c4 (flow 64ed8f81): loading val<.=s3://niema-test/n100/r01/n100.r01.s010_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5d1b3fa7 (flow 5ac278bc): loading (try 0): started
2021/07/08 13:53:29 scheduler task 5d1b3fa7 (flow 5ac278bc): loading val<.=s3://niema-test/n100/r01/n100.r01.s040_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 523904ca (flow 9b5d68c9): loading val<.=s3://niema-test/n100/r01/n100.r01.s022_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 1276c917 (flow 8986bd36): loading (try 0): started
2021/07/08 13:53:29 scheduler task 1276c917 (flow 8986bd36): loading val<.=s3://niema-test/n100/r01/n100.r01.s074_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 35fa303c (flow 0b006c5d): loading (try 0): started
2021/07/08 13:53:29 scheduler task 35fa303c (flow 0b006c5d): loading val<.=s3://niema-test/n100/r01/n100.r01.s025_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task c5917b88 (flow 1a8edfa6): loading (try 0): started
2021/07/08 13:53:29 scheduler task c5917b88 (flow 1a8edfa6): loading val<.=s3://niema-test/n100/r01/n100.r01.s098_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 35fa303c (flow 0b006c5d): loading val<.=s3://niema-test/n100/r01/n100.r01.s025_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8b2fb039 (flow d0853815): loading (try 0): started
2021/07/08 13:53:29 scheduler task 8b2fb039 (flow d0853815): loading val<.=s3://niema-test/n100/r01/n100.r01.s020_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task c5917b88 (flow 1a8edfa6): loading val<.=s3://niema-test/n100/r01/n100.r01.s098_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task cc686dc9 (flow 9eb55c09): loading (try 0): started
2021/07/08 13:53:29 scheduler task cc686dc9 (flow 9eb55c09): loading val<.=s3://niema-test/n100/r01/n100.r01.s050_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 8b2fb039 (flow d0853815): loading val<.=s3://niema-test/n100/r01/n100.r01.s020_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 2cd9def4 (flow fea6d9e1): loading (try 0): started
2021/07/08 13:53:29 scheduler task 2cd9def4 (flow fea6d9e1): loading val<.=s3://niema-test/n100/r01/n100.r01.s038_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task cc686dc9 (flow 9eb55c09): loading val<.=s3://niema-test/n100/r01/n100.r01.s050_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 71597e7d (flow 3470f7ea): loading (try 0): started
2021/07/08 13:53:29 scheduler task 71597e7d (flow 3470f7ea): loading val<.=s3://niema-test/n100/r01/n100.r01.s058_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 2cd9def4 (flow fea6d9e1): loading val<.=s3://niema-test/n100/r01/n100.r01.s038_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task df7b7632 (flow cb85a725): loading val<.=s3://niema-test/n100/r01/n100.r01.s055_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bf4e2cad (flow 39634eeb): loading (try 0): started
2021/07/08 13:53:29 scheduler task 4a2be2fe (flow a35830e3): loading (try 0): started
2021/07/08 13:53:29 scheduler task bf4e2cad (flow 39634eeb): loading val<.=s3://niema-test/n100/r01/n100.r01.s062_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4a2be2fe (flow a35830e3): loading val<.=s3://niema-test/n100/r01/n100.r01.s067_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4a2be2fe (flow a35830e3): loading val<.=s3://niema-test/n100/r01/n100.r01.s067_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 9bf76c45 (flow 493067ab): loading (try 0): started
2021/07/08 13:53:29 scheduler task 9bf76c45 (flow 493067ab): loading val<.=s3://niema-test/n100/r01/n100.r01.s071_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 89fa88da (flow 6636d54a): loading (try 0): started
2021/07/08 13:53:29 scheduler task 0fea5d54 (flow 44ac81a2): loading (try 0): started
2021/07/08 13:53:29 scheduler task 3e0df658 (flow da15cf49): loading val<.=s3://niema-test/n100/r01/n100.r01.s021_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task cd8b0435 (flow 831ed94c): loading (try 0): started
2021/07/08 13:53:29 scheduler task 0a01661c (flow b52f6d52): loading val<.=s3://niema-test/n100/r01/n100.r01.s037_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 3cbe7084 (flow f4094bfe): loading val<.=s3://niema-test/n100/r01/n100.r01.s059_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 378eabfc (flow 5ba5cdc9): loading (try 0): started
2021/07/08 13:53:29 scheduler task d58dd643 (flow 6d1f26d4): loading val<.=s3://niema-test/n100/r01/n100.r01.s003_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task eff5e8ec (flow 01b3e50d): loading val<.=s3://niema-test/n100/r01/n100.r01.s060_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task aae3d819 (flow cb63bac2): loading val<.=s3://niema-test/n100/r01/n100.r01.s002_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 9ad01cec (flow 6dee772b): loading (try 0): started
2021/07/08 13:53:29 scheduler task ce295c92 (flow 4cdb8625): loading (try 0): started
2021/07/08 13:53:29 scheduler task 97660e05 (flow c1a6fe3a): loading val<.=s3://niema-test/n100/r01/n100.r01.s031_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task aa7885b4 (flow 963957c7): loading val<.=s3://niema-test/n100/r01/n100.r01.s011_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 128087c4 (flow 6dc80144): loading (try 0): started
2021/07/08 13:53:29 scheduler task eff5e8ec (flow 01b3e50d): loading val<.=s3://niema-test/n100/r01/n100.r01.s060_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 4d45e98c (flow 3fec048b): loading val<.=s3://niema-test/n100/r01/n100.r01.s092_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bef5a6aa (flow 50884d6c): loading val<.=s3://niema-test/n100/r01/n100.r01.s041_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task dc6ab090 (flow a6c01e21): loading val<.=s3://niema-test/n100/r01/n100.r01.s052_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task f0d0ce5d (flow 15203b14): loading (try 0): started
2021/07/08 13:53:29 scheduler task 1276c917 (flow 8986bd36): loading val<.=s3://niema-test/n100/r01/n100.r01.s074_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5d1b3fa7 (flow 5ac278bc): loading val<.=s3://niema-test/n100/r01/n100.r01.s040_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 71597e7d (flow 3470f7ea): loading val<.=s3://niema-test/n100/r01/n100.r01.s058_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task bf4e2cad (flow 39634eeb): loading val<.=s3://niema-test/n100/r01/n100.r01.s062_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 08e2a9ed (flow 1d467a73): loading (try 0): started
2021/07/08 13:53:29 scheduler task 08e2a9ed (flow 1d467a73): loading val<.=s3://niema-test/n100/r01/n100.r01.s035_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 9bf76c45 (flow 493067ab): loading val<.=s3://niema-test/n100/r01/n100.r01.s071_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 08e2a9ed (flow 1d467a73): loading val<.=s3://niema-test/n100/r01/n100.r01.s035_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 89fa88da (flow 6636d54a): loading val<.=s3://niema-test/n100/r01/n100.r01.s066_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0fea5d54 (flow 44ac81a2): loading val<.=s3://niema-test/n100/r01/n100.r01.s048_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 89fa88da (flow 6636d54a): loading val<.=s3://niema-test/n100/r01/n100.r01.s066_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task cd8b0435 (flow 831ed94c): loading val<.=s3://niema-test/n100/r01/n100.r01.s093_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0fea5d54 (flow 44ac81a2): loading val<.=s3://niema-test/n100/r01/n100.r01.s048_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task cd8b0435 (flow 831ed94c): loading val<.=s3://niema-test/n100/r01/n100.r01.s093_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 378eabfc (flow 5ba5cdc9): loading val<.=s3://niema-test/n100/r01/n100.r01.s014_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 378eabfc (flow 5ba5cdc9): loading val<.=s3://niema-test/n100/r01/n100.r01.s014_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 9ad01cec (flow 6dee772b): loading val<.=s3://niema-test/n100/r01/n100.r01.s033_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task ce295c92 (flow 4cdb8625): loading val<.=s3://niema-test/n100/r01/n100.r01.s004_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 9ad01cec (flow 6dee772b): loading val<.=s3://niema-test/n100/r01/n100.r01.s033_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task ce295c92 (flow 4cdb8625): loading val<.=s3://niema-test/n100/r01/n100.r01.s004_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 128087c4 (flow 6dc80144): loading val<.=s3://niema-test/n100/r01/n100.r01.s061_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 128087c4 (flow 6dc80144): loading val<.=s3://niema-test/n100/r01/n100.r01.s061_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task f0d0ce5d (flow 15203b14): loading val<.=s3://niema-test/n100/r01/n100.r01.s034_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task f0d0ce5d (flow 15203b14): loading val<.=s3://niema-test/n100/r01/n100.r01.s034_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0f1079d5 (flow 0bcaa813): assigning to alloc ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 13:53:29 scheduler task 489636ff (flow 301cc57e): assigning to alloc ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 13:53:29 scheduler task f5c4ee3f (flow a80b5a2d): assigning to alloc ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 13:53:29 scheduler task ab91edce (flow bff0a93a): assigning to alloc ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 13:53:29 scheduler task ab91edce (flow bff0a93a): loading (try 0): started
2021/07/08 13:53:29 scheduler task ab91edce (flow bff0a93a): loading val<.=s3://niema-test/n100/r01/n100.r01.s077_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0f1079d5 (flow 0bcaa813): loading (try 0): started
2021/07/08 13:53:29 scheduler task 0f1079d5 (flow 0bcaa813): loading val<.=s3://niema-test/n100/r01/n100.r01.s013_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 489636ff (flow 301cc57e): loading (try 0): started
2021/07/08 13:53:29 scheduler task ab91edce (flow bff0a93a): loading val<.=s3://niema-test/n100/r01/n100.r01.s077_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task f5c4ee3f (flow a80b5a2d): loading (try 0): started
2021/07/08 13:53:29 scheduler task 489636ff (flow 301cc57e): loading val<.=s3://niema-test/n100/r01/n100.r01.s015_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 0f1079d5 (flow 0bcaa813): loading val<.=s3://niema-test/n100/r01/n100.r01.s013_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task f5c4ee3f (flow a80b5a2d): loading val<.=s3://niema-test/n100/r01/n100.r01.s078_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task f5c4ee3f (flow a80b5a2d): loading val<.=s3://niema-test/n100/r01/n100.r01.s078_R2.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 489636ff (flow 301cc57e): loading val<.=s3://niema-test/n100/r01/n100.r01.s015_R1.fastq 35.4MiB>
2021/07/08 13:53:29 scheduler task 5eba3638 (flow a1920ceb): loaded val<.=b63dbf2b 35.4MiB>
2021/07/08 13:53:29 scheduler task 47b72df9 (flow ada3a42a): loaded val<.=9d712f44 35.4MiB>
2021/07/08 13:53:29 scheduler task d3849377 (flow a3c64438): loaded val<.=0bb954fb 35.4MiB>
2021/07/08 13:53:30 scheduler task e3778923 (flow 574fe4ef): loaded val<.=69c65ae8 35.4MiB>
2021/07/08 13:53:30 scheduler task 7ec3898d (flow 236f7412): loaded val<.=3dd4459f 35.4MiB>
2021/07/08 13:53:30 scheduler task 7cbb434c (flow 8d902717): loaded val<.=10d7b3f4 35.4MiB>
2021/07/08 13:53:30 scheduler task 7d0761ce (flow 62d09709): loaded val<.=c0815c5b 35.4MiB>
2021/07/08 13:53:30 scheduler task 489636ff (flow 301cc57e): loaded val<.=fa60deaf 35.4MiB>
2021/07/08 13:53:30 scheduler task b7843960 (flow 4a121bc6): loaded val<.=1f210340 35.4MiB>
2021/07/08 13:53:30 scheduler task a7bf4b87 (flow 6ea478fe): loaded val<.=763525c2 35.4MiB>
2021/07/08 13:53:30 scheduler task 6537941d (flow 686ec8c9): loaded val<.=c5725dd0 35.4MiB>
2021/07/08 13:53:30 scheduler task 5eba3638 (flow a1920ceb): loaded val<.=525fd86f 35.4MiB>
2021/07/08 13:53:30 scheduler task 5eba3638 (flow a1920ceb): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 5eba3638 (flow a1920ceb): submitting (try 0): started
2021/07/08 13:53:30 scheduler task dd684b46 (flow 9d1a9286): loaded val<.=aa2c840d 35.4MiB>
2021/07/08 13:53:30 scheduler task ab91edce (flow bff0a93a): loaded val<.=11e544b0 35.4MiB>
2021/07/08 13:53:30 scheduler task 4ad47abd (flow 264f4a9d): loaded val<.=a69f1797 35.4MiB>
2021/07/08 13:53:30 scheduler task 8280a85f (flow c90d12cc): loaded val<.=ae438f32 35.4MiB>
2021/07/08 13:53:30 scheduler task 489636ff (flow 301cc57e): loaded val<.=5b433014 35.4MiB>
2021/07/08 13:53:30 scheduler task 489636ff (flow 301cc57e): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 92de7a43 (flow 0b5af3a9): loaded val<.=fe777c80 35.4MiB>
2021/07/08 13:53:30 scheduler task 7d0761ce (flow 62d09709): loaded val<.=2cc5aa89 35.4MiB>
2021/07/08 13:53:30 scheduler task 47ccd70f (flow 04b2f4d8): loaded val<.=82de593d 35.4MiB>
2021/07/08 13:53:30 scheduler task 7d0761ce (flow 62d09709): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 489636ff (flow 301cc57e): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 2c0a979f (flow fa875239): loaded val<.=13120a70 35.4MiB>
2021/07/08 13:53:30 scheduler task 7d0761ce (flow 62d09709): submitting (try 0): started
2021/07/08 13:53:30 scheduler task b7843960 (flow 4a121bc6): loaded val<.=2a671f96 35.4MiB>
2021/07/08 13:53:30 scheduler task b7843960 (flow 4a121bc6): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task ea47d9ff (flow a882905c): loaded val<.=4f5db8ca 35.4MiB>
2021/07/08 13:53:30 scheduler task b7843960 (flow 4a121bc6): submitting (try 0): started
2021/07/08 13:53:30 scheduler task d6c86c87 (flow 6138a66a): loaded val<.=2b2024ef 35.4MiB>
2021/07/08 13:53:30 scheduler task 92de7a43 (flow 0b5af3a9): loaded val<.=a7aed714 35.4MiB>
2021/07/08 13:53:30 scheduler task 92de7a43 (flow 0b5af3a9): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 92de7a43 (flow 0b5af3a9): submitting (try 0): started
2021/07/08 13:53:30 scheduler task e3778923 (flow 574fe4ef): loaded val<.=c0d9c213 35.4MiB>
2021/07/08 13:53:30 scheduler task df89e983 (flow 97443e88): loaded val<.=e4dca5c0 35.4MiB>
2021/07/08 13:53:30 scheduler task 26fea548 (flow af45f049): loaded val<.=6f1da7a0 35.4MiB>
2021/07/08 13:53:30 scheduler task e3778923 (flow 574fe4ef): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task dd684b46 (flow 9d1a9286): loaded val<.=cd958405 35.4MiB>
2021/07/08 13:53:30 scheduler task dd684b46 (flow 9d1a9286): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 7ec3898d (flow 236f7412): loaded val<.=0b688cf3 35.4MiB>
2021/07/08 13:53:30 scheduler task 7ec3898d (flow 236f7412): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 5ba3ce8d (flow e1b32ab1): loaded val<.=13e59db7 35.4MiB>
2021/07/08 13:53:30 scheduler task 13a3982a (flow c9646626): loaded val<.=d975ca80 35.4MiB>
2021/07/08 13:53:30 scheduler task e3778923 (flow 574fe4ef): submitting (try 0): started
2021/07/08 13:53:30 scheduler task fa62b07a (flow 12d83baf): loaded val<.=1532fd33 35.4MiB>
2021/07/08 13:53:30 scheduler task df89e983 (flow 97443e88): loaded val<.=7a3864cc 35.4MiB>
2021/07/08 13:53:30 scheduler task df89e983 (flow 97443e88): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 788f7878 (flow eb24a0c4): loaded val<.=fa05ab7d 35.4MiB>
2021/07/08 13:53:30 scheduler task dd684b46 (flow 9d1a9286): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 90a6b802 (flow 4c471319): loaded val<.=8983e876 35.4MiB>
2021/07/08 13:53:30 scheduler task 782b9981 (flow 466997bd): loaded val<.=508b6426 35.4MiB>
2021/07/08 13:53:30 scheduler task 7ec3898d (flow 236f7412): submitting (try 0): started
2021/07/08 13:53:30 scheduler task fa62b07a (flow 12d83baf): loaded val<.=8f9234f5 35.4MiB>
2021/07/08 13:53:30 scheduler task ffd18420 (flow 1fe8d91f): loaded val<.=dafc8199 35.4MiB>
2021/07/08 13:53:30 scheduler task fa62b07a (flow 12d83baf): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task c982ccb7 (flow 0d88193c): loaded val<.=89ebfcbc 35.4MiB>
2021/07/08 13:53:30 scheduler task 8280a85f (flow c90d12cc): loaded val<.=cddc8ffd 35.4MiB>
2021/07/08 13:53:30 scheduler task 8280a85f (flow c90d12cc): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task df89e983 (flow 97443e88): submitting (try 0): started
2021/07/08 13:53:30 scheduler task f5c4ee3f (flow a80b5a2d): loaded val<.=00932201 35.4MiB>
2021/07/08 13:53:30 scheduler task fa62b07a (flow 12d83baf): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 8280a85f (flow c90d12cc): submitting (try 0): started
2021/07/08 13:53:30 scheduler task ffd18420 (flow 1fe8d91f): loaded val<.=c70b0ac1 35.4MiB>
2021/07/08 13:53:30 scheduler task ffd18420 (flow 1fe8d91f): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task ffd18420 (flow 1fe8d91f): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 7cbb434c (flow 8d902717): loaded val<.=2163c61e 35.4MiB>
2021/07/08 13:53:30 scheduler task 7cbb434c (flow 8d902717): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 47ccd70f (flow 04b2f4d8): loaded val<.=bba3c135 35.4MiB>
2021/07/08 13:53:30 scheduler task 47ccd70f (flow 04b2f4d8): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 0d9fcc7c (flow a4ee45a6): loaded val<.=179ba021 35.4MiB>
2021/07/08 13:53:30 scheduler task 7cbb434c (flow 8d902717): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 47ccd70f (flow 04b2f4d8): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 788f7878 (flow eb24a0c4): loaded val<.=49d72b69 35.4MiB>
2021/07/08 13:53:30 scheduler task 788f7878 (flow eb24a0c4): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 788f7878 (flow eb24a0c4): submitting (try 0): started
2021/07/08 13:53:30 scheduler task f5c4ee3f (flow a80b5a2d): loaded val<.=47590b2d 35.4MiB>
2021/07/08 13:53:30 scheduler task f5c4ee3f (flow a80b5a2d): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task e89bffd7 (flow 5f65da5f): loaded val<.=c90eeeef 35.4MiB>
2021/07/08 13:53:30 scheduler task f5c4ee3f (flow a80b5a2d): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 90a6b802 (flow 4c471319): loaded val<.=0c84034a 35.4MiB>
2021/07/08 13:53:30 scheduler task 90a6b802 (flow 4c471319): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 0f1079d5 (flow 0bcaa813): loaded val<.=279c7245 35.4MiB>
2021/07/08 13:53:30 scheduler task 814eb11a (flow e490893d): loaded val<.=23c50f4f 35.4MiB>
2021/07/08 13:53:30 scheduler task 7eaca4b3 (flow e0aa7377): loaded val<.=498167a0 35.4MiB>
2021/07/08 13:53:30 scheduler task bfa03bd4 (flow 75e88589): loaded val<.=b392c8c0 35.4MiB>
2021/07/08 13:53:30 scheduler task 90a6b802 (flow 4c471319): submitting (try 0): started
2021/07/08 13:53:30 scheduler task ab91edce (flow bff0a93a): loaded val<.=d49b0dd0 35.4MiB>
2021/07/08 13:53:30 scheduler task ab91edce (flow bff0a93a): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task ab91edce (flow bff0a93a): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 2c0a979f (flow fa875239): loaded val<.=8e3c4df1 35.4MiB>
2021/07/08 13:53:30 scheduler task 2c0a979f (flow fa875239): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 2c0a979f (flow fa875239): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 6537941d (flow 686ec8c9): loaded val<.=c1a638c8 35.4MiB>
2021/07/08 13:53:30 scheduler task 6537941d (flow 686ec8c9): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 6537941d (flow 686ec8c9): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 782b9981 (flow 466997bd): loaded val<.=b9acd0d3 35.4MiB>
2021/07/08 13:53:30 scheduler task 782b9981 (flow 466997bd): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 782b9981 (flow 466997bd): submitting (try 0): started
2021/07/08 13:53:30 scheduler task d3849377 (flow a3c64438): loaded val<.=14b5cd6f 35.4MiB>
2021/07/08 13:53:30 scheduler task d3849377 (flow a3c64438): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 26fea548 (flow af45f049): loaded val<.=01d3280a 35.4MiB>
2021/07/08 13:53:30 scheduler task 26fea548 (flow af45f049): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task d3849377 (flow a3c64438): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 26fea548 (flow af45f049): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 8b1f0155 (flow 99489b6e): loaded val<.=d4b6b58a 35.4MiB>
2021/07/08 13:53:30 scheduler task 7eaca4b3 (flow e0aa7377): loaded val<.=f9e5a079 35.4MiB>
2021/07/08 13:53:30 scheduler task 7eaca4b3 (flow e0aa7377): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 97818aad (flow 3ce93691): loaded val<.=d24491bd 35.4MiB>
2021/07/08 13:53:30 scheduler task 7eaca4b3 (flow e0aa7377): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 63e80a14 (flow 2afbc5be): loaded val<.=f549d496 35.4MiB>
2021/07/08 13:53:30 scheduler task 0f1079d5 (flow 0bcaa813): loaded val<.=739f80e5 35.4MiB>
2021/07/08 13:53:30 scheduler task 0f1079d5 (flow 0bcaa813): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 0f1079d5 (flow 0bcaa813): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 63e80a14 (flow 2afbc5be): loaded val<.=82efa4d7 35.4MiB>
2021/07/08 13:53:30 scheduler task 63e80a14 (flow 2afbc5be): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 63e80a14 (flow 2afbc5be): submitting (try 0): started
2021/07/08 13:53:30 scheduler task c982ccb7 (flow 0d88193c): loaded val<.=1ddd731d 35.4MiB>
2021/07/08 13:53:30 scheduler task c982ccb7 (flow 0d88193c): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task c982ccb7 (flow 0d88193c): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 814eb11a (flow e490893d): loaded val<.=5de42a14 35.4MiB>
2021/07/08 13:53:30 scheduler task 814eb11a (flow e490893d): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 814eb11a (flow e490893d): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 1c7f103e (flow 066587e3): loaded val<.=3c0f24ed 35.4MiB>
2021/07/08 13:53:30 scheduler task 5eba3638 (flow a1920ceb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 13a3982a (flow c9646626): loaded val<.=b73bb725 35.4MiB>
2021/07/08 13:53:30 scheduler task 13a3982a (flow c9646626): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 5eba3638 (flow a1920ceb): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s095.Main.out_file a1920ceb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s095.Main.out_file a1920ceb n100/r01/n100.r01.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bfa8302dbad3713c8884d415e5a967974dfa16c67c2f6dadcd1f801a460683f1
	sha256:a1920ceb3399851cc24e7ac6b64bd7d836c34ee126c7a9f6115a70902eac2293
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5eba3638edbdfb8520a1ace5a7682a5f3f074107d943a0469d7a8a09d6492db8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s095_output"
	    wget -O "n100.r01.s095_output/n100.r01.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s095_output/n100.r01.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s095_output/n100.r01.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s095_output/n100.r01.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s095_output/n100.r01.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s095_output/n100.r01.s095.reference.fas" "n100.r01.s095_output/n100.r01.s095.fq1.fastq" "n100.r01.s095_output/n100.r01.s095.fq2.fastq" | samtools view -bS - > "n100.r01.s095_output/n100.r01.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s095_output/n100.r01.s095.untrimmed.sorted.bam" "n100.r01.s095_output/n100.r01.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s095_output/n100.r01.s095.untrimmed.sorted.bam" -b "n100.r01.s095_output/n100.r01.s095.primers.bed" -p "n100.r01.s095_output/n100.r01.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" "n100.r01.s095_output/n100.r01.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s095_output/n100.r01.s095.reference.fas" "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" > "n100.r01.s095_output/n100.r01.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s095_output/n100.r01.s095.reference.fas" --call-indels "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" > "n100.r01.s095_output/n100.r01.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" > "n100.r01.s095_output/n100.r01.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s095_output/n100.r01.s095.depth.txt" "n100.r01.s095_output/n100.r01.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s095_output/n100.r01.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s095_output/n100.r01.s095.reference.fas" | bcftools consensus -m "n100.r01.s095_output/n100.r01.s095.low_depth.tsv" tmp.vcf.gz > "n100.r01.s095_output/n100.r01.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task 13a3982a (flow c9646626): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 489636ff (flow 301cc57e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 489636ff (flow 301cc57e): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s015.Main.out_file 301cc57e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s015.Main.out_file 301cc57e n100/r01/n100.r01.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9335732633957059ea9493190fe0b91f6b2caca5aac950b6bc0a2f2e502702cd
	sha256:301cc57e26fce9e8b78754d18a5d3c801d7844daacd6d78db246b0e057bd14fe
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/489636ff1d2719f606a546510d5a1d0b25499cb33f14d7f89b443b06a25a8705
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s015_output"
	    wget -O "n100.r01.s015_output/n100.r01.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s015_output/n100.r01.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s015_output/n100.r01.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s015_output/n100.r01.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s015_output/n100.r01.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s015_output/n100.r01.s015.reference.fas" "n100.r01.s015_output/n100.r01.s015.fq1.fastq" "n100.r01.s015_output/n100.r01.s015.fq2.fastq" | samtools view -bS - > "n100.r01.s015_output/n100.r01.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s015_output/n100.r01.s015.untrimmed.sorted.bam" "n100.r01.s015_output/n100.r01.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s015_output/n100.r01.s015.untrimmed.sorted.bam" -b "n100.r01.s015_output/n100.r01.s015.primers.bed" -p "n100.r01.s015_output/n100.r01.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" "n100.r01.s015_output/n100.r01.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s015_output/n100.r01.s015.reference.fas" "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" > "n100.r01.s015_output/n100.r01.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s015_output/n100.r01.s015.reference.fas" --call-indels "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" > "n100.r01.s015_output/n100.r01.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" > "n100.r01.s015_output/n100.r01.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s015_output/n100.r01.s015.depth.txt" "n100.r01.s015_output/n100.r01.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s015_output/n100.r01.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s015_output/n100.r01.s015.reference.fas" | bcftools consensus -m "n100.r01.s015_output/n100.r01.s015.low_depth.tsv" tmp.vcf.gz > "n100.r01.s015_output/n100.r01.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task c5194497 (flow bb46d7da): loaded val<.=589b40db 35.4MiB>
2021/07/08 13:53:30 scheduler task 7d0761ce (flow 62d09709): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 7d0761ce (flow 62d09709): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s017.Main.out_file 62d09709 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s017.Main.out_file 62d09709 n100/r01/n100.r01.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:539d31abc14d3eccf57d4a5da5b1f7f2e6edea498cc5bf33f707bd507ec28700
	sha256:62d097097ed5636e98a43cceaebda75428b01e2f6cee3419c94b504a8a85c76a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7d0761ce6b3638a701c5883aab7acd5cb59d4ba4b19e99d82c793603b977fef1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s017_output"
	    wget -O "n100.r01.s017_output/n100.r01.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s017_output/n100.r01.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s017_output/n100.r01.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s017_output/n100.r01.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s017_output/n100.r01.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s017_output/n100.r01.s017.reference.fas" "n100.r01.s017_output/n100.r01.s017.fq1.fastq" "n100.r01.s017_output/n100.r01.s017.fq2.fastq" | samtools view -bS - > "n100.r01.s017_output/n100.r01.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s017_output/n100.r01.s017.untrimmed.sorted.bam" "n100.r01.s017_output/n100.r01.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s017_output/n100.r01.s017.untrimmed.sorted.bam" -b "n100.r01.s017_output/n100.r01.s017.primers.bed" -p "n100.r01.s017_output/n100.r01.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" "n100.r01.s017_output/n100.r01.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s017_output/n100.r01.s017.reference.fas" "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" > "n100.r01.s017_output/n100.r01.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s017_output/n100.r01.s017.reference.fas" --call-indels "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" > "n100.r01.s017_output/n100.r01.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" > "n100.r01.s017_output/n100.r01.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s017_output/n100.r01.s017.depth.txt" "n100.r01.s017_output/n100.r01.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s017_output/n100.r01.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s017_output/n100.r01.s017.reference.fas" | bcftools consensus -m "n100.r01.s017_output/n100.r01.s017.low_depth.tsv" tmp.vcf.gz > "n100.r01.s017_output/n100.r01.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task f5c4ee3f (flow a80b5a2d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task f5c4ee3f (flow a80b5a2d): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s078.Main.out_file a80b5a2d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s078.Main.out_file a80b5a2d n100/r01/n100.r01.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:20601fc3eca121a4d0d6cb2e499e393131e770a96b921fcace3b909bd5b6b7fa
	sha256:a80b5a2d54fdc38dd3a5995bfd04161b359a45c793a409531fbfdf11eb409ef9
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f5c4ee3f365b4a34f53c2ee77dbda3f1deec524f903d4a98939ce89f882b6aa4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s078_output"
	    wget -O "n100.r01.s078_output/n100.r01.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s078_output/n100.r01.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s078_output/n100.r01.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s078_output/n100.r01.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s078_output/n100.r01.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s078_output/n100.r01.s078.reference.fas" "n100.r01.s078_output/n100.r01.s078.fq1.fastq" "n100.r01.s078_output/n100.r01.s078.fq2.fastq" | samtools view -bS - > "n100.r01.s078_output/n100.r01.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s078_output/n100.r01.s078.untrimmed.sorted.bam" "n100.r01.s078_output/n100.r01.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s078_output/n100.r01.s078.untrimmed.sorted.bam" -b "n100.r01.s078_output/n100.r01.s078.primers.bed" -p "n100.r01.s078_output/n100.r01.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" "n100.r01.s078_output/n100.r01.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s078_output/n100.r01.s078.reference.fas" "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" > "n100.r01.s078_output/n100.r01.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s078_output/n100.r01.s078.reference.fas" --call-indels "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" > "n100.r01.s078_output/n100.r01.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" > "n100.r01.s078_output/n100.r01.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s078_output/n100.r01.s078.depth.txt" "n100.r01.s078_output/n100.r01.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s078_output/n100.r01.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s078_output/n100.r01.s078.reference.fas" | bcftools consensus -m "n100.r01.s078_output/n100.r01.s078.low_depth.tsv" tmp.vcf.gz > "n100.r01.s078_output/n100.r01.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task 6e4fdc45 (flow fcf02ceb): loaded val<.=511cfbf2 35.4MiB>
2021/07/08 13:53:30 scheduler task 71597e7d (flow 3470f7ea): loaded val<.=dd27bca0 35.4MiB>
2021/07/08 13:53:30 scheduler task 557c581c (flow ec5fcaaf): loaded val<.=4e766a55 35.4MiB>
2021/07/08 13:53:30 scheduler task 468f0ab1 (flow acea3fd9): loaded val<.=e7fca208 35.4MiB>
2021/07/08 13:53:30 scheduler task 4a2be2fe (flow a35830e3): loaded val<.=0077b668 35.4MiB>
2021/07/08 13:53:30 scheduler task a5b4a8c4 (flow 64ed8f81): loaded val<.=6badf129 35.4MiB>
2021/07/08 13:53:30 scheduler task b7843960 (flow 4a121bc6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 523904ca (flow 9b5d68c9): loaded val<.=d207ae89 35.4MiB>
2021/07/08 13:53:30 scheduler task cc686dc9 (flow 9eb55c09): loaded val<.=4d742e29 35.4MiB>
2021/07/08 13:53:30 scheduler task ab91edce (flow bff0a93a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 238ca419 (flow 8082561f): loaded val<.=37b242e6 35.4MiB>
2021/07/08 13:53:30 scheduler task b7843960 (flow 4a121bc6): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s072.Main.out_file 4a121bc6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s072.Main.out_file 4a121bc6 n100/r01/n100.r01.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:656bebadd6fceaf1afef542b87772de41ed26be46216acac9d4393d25cb1f465
	sha256:4a121bc66a553ed13cf8e1d23212a52736e4b3f67a4921d1f2136505afe99f4e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b7843960bdd6c6b2d22e051c9b0bf12a42f75624c32641a0fadb9f3b67768b21
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s072_output"
	    wget -O "n100.r01.s072_output/n100.r01.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s072_output/n100.r01.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s072_output/n100.r01.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s072_output/n100.r01.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s072_output/n100.r01.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s072_output/n100.r01.s072.reference.fas" "n100.r01.s072_output/n100.r01.s072.fq1.fastq" "n100.r01.s072_output/n100.r01.s072.fq2.fastq" | samtools view -bS - > "n100.r01.s072_output/n100.r01.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s072_output/n100.r01.s072.untrimmed.sorted.bam" "n100.r01.s072_output/n100.r01.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s072_output/n100.r01.s072.untrimmed.sorted.bam" -b "n100.r01.s072_output/n100.r01.s072.primers.bed" -p "n100.r01.s072_output/n100.r01.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" "n100.r01.s072_output/n100.r01.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s072_output/n100.r01.s072.reference.fas" "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" > "n100.r01.s072_output/n100.r01.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s072_output/n100.r01.s072.reference.fas" --call-indels "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" > "n100.r01.s072_output/n100.r01.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" > "n100.r01.s072_output/n100.r01.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s072_output/n100.r01.s072.depth.txt" "n100.r01.s072_output/n100.r01.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s072_output/n100.r01.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s072_output/n100.r01.s072.reference.fas" | bcftools consensus -m "n100.r01.s072_output/n100.r01.s072.low_depth.tsv" tmp.vcf.gz > "n100.r01.s072_output/n100.r01.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task ab91edce (flow bff0a93a): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s077.Main.out_file bff0a93a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s077.Main.out_file bff0a93a n100/r01/n100.r01.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a9fbd4f733f51ffba5f774c3e68753fa526aa69dc4cf6d44e07bda32a4198371
	sha256:bff0a93ae400b193cc1c5b7786003c0b4c6298da1cc2460c8863aebda8952e51
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ab91edce0c45b78dad4df561e3915cae275368c0ecb2ea20ea189356f2fcf3c1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s077_output"
	    wget -O "n100.r01.s077_output/n100.r01.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s077_output/n100.r01.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s077_output/n100.r01.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s077_output/n100.r01.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s077_output/n100.r01.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s077_output/n100.r01.s077.reference.fas" "n100.r01.s077_output/n100.r01.s077.fq1.fastq" "n100.r01.s077_output/n100.r01.s077.fq2.fastq" | samtools view -bS - > "n100.r01.s077_output/n100.r01.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s077_output/n100.r01.s077.untrimmed.sorted.bam" "n100.r01.s077_output/n100.r01.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s077_output/n100.r01.s077.untrimmed.sorted.bam" -b "n100.r01.s077_output/n100.r01.s077.primers.bed" -p "n100.r01.s077_output/n100.r01.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" "n100.r01.s077_output/n100.r01.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s077_output/n100.r01.s077.reference.fas" "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" > "n100.r01.s077_output/n100.r01.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s077_output/n100.r01.s077.reference.fas" --call-indels "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" > "n100.r01.s077_output/n100.r01.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" > "n100.r01.s077_output/n100.r01.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s077_output/n100.r01.s077.depth.txt" "n100.r01.s077_output/n100.r01.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s077_output/n100.r01.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s077_output/n100.r01.s077.reference.fas" | bcftools consensus -m "n100.r01.s077_output/n100.r01.s077.low_depth.tsv" tmp.vcf.gz > "n100.r01.s077_output/n100.r01.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task 8b2fb039 (flow d0853815): loaded val<.=be911f6e 35.4MiB>
2021/07/08 13:53:30 scheduler task ea47d9ff (flow a882905c): loaded val<.=84171e24 35.4MiB>
2021/07/08 13:53:30 scheduler task ea47d9ff (flow a882905c): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 3e0df658 (flow da15cf49): loaded val<.=d4fcc08b 35.4MiB>
2021/07/08 13:53:30 scheduler task ea47d9ff (flow a882905c): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 5d1b3fa7 (flow 5ac278bc): loaded val<.=015189ef 35.4MiB>
2021/07/08 13:53:30 scheduler task 523904ca (flow 9b5d68c9): loaded val<.=622ac5e1 35.4MiB>
2021/07/08 13:53:30 scheduler task 523904ca (flow 9b5d68c9): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 0d9fcc7c (flow a4ee45a6): loaded val<.=f7700869 35.4MiB>
2021/07/08 13:53:30 scheduler task 0d9fcc7c (flow a4ee45a6): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 523904ca (flow 9b5d68c9): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 47b72df9 (flow ada3a42a): loaded val<.=a18a0f53 35.4MiB>
2021/07/08 13:53:30 scheduler task 47b72df9 (flow ada3a42a): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 0d9fcc7c (flow a4ee45a6): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 9ca279ac (flow 8a6b6586): loaded val<.=8adc010e 35.4MiB>
2021/07/08 13:53:30 scheduler task 47b72df9 (flow ada3a42a): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 16911b07 (flow 1b870f15): loaded val<.=04157c4a 35.4MiB>
2021/07/08 13:53:30 scheduler task 3cbe7084 (flow f4094bfe): loaded val<.=dfa2321a 35.4MiB>
2021/07/08 13:53:30 scheduler task 6a8b9655 (flow 09a7347a): loaded val<.=b606c7ce 35.4MiB>
2021/07/08 13:53:30 scheduler task a5b4a8c4 (flow 64ed8f81): loaded val<.=e9c4ba3c 35.4MiB>
2021/07/08 13:53:30 scheduler task a5b4a8c4 (flow 64ed8f81): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task a5b4a8c4 (flow 64ed8f81): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 8b2fb039 (flow d0853815): loaded val<.=4b7b800a 35.4MiB>
2021/07/08 13:53:30 scheduler task 8b2fb039 (flow d0853815): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task cc686dc9 (flow 9eb55c09): loaded val<.=7f37cdfc 35.4MiB>
2021/07/08 13:53:30 scheduler task cc686dc9 (flow 9eb55c09): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task d58dd643 (flow 6d1f26d4): loaded val<.=8b60bb97 35.4MiB>
2021/07/08 13:53:30 scheduler task 8b2fb039 (flow d0853815): submitting (try 0): started
2021/07/08 13:53:30 scheduler task d58dd643 (flow 6d1f26d4): loaded val<.=7f56bdbd 35.4MiB>
2021/07/08 13:53:30 scheduler task d58dd643 (flow 6d1f26d4): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task cc686dc9 (flow 9eb55c09): submitting (try 0): started
2021/07/08 13:53:30 scheduler task bfa03bd4 (flow 75e88589): loaded val<.=02128290 35.4MiB>
2021/07/08 13:53:30 scheduler task bfa03bd4 (flow 75e88589): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 8f179a44 (flow f3e1b152): loaded val<.=47f5ed47 35.4MiB>
2021/07/08 13:53:30 scheduler task d58dd643 (flow 6d1f26d4): submitting (try 0): started
2021/07/08 13:53:30 scheduler task bfa03bd4 (flow 75e88589): submitting (try 0): started
2021/07/08 13:53:30 scheduler task 92de7a43 (flow 0b5af3a9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 92de7a43 (flow 0b5af3a9): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s083.Main.out_file 0b5af3a9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s083.Main.out_file 0b5af3a9 n100/r01/n100.r01.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac2978e25c8122a007b7916336d46c5682384511cb5614af60e23b738deeca4e
	sha256:0b5af3a9c72676124f0852d0d0eb06395120ac667dc9bb39342ac4a95f73f02d
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/92de7a43a28ba560b5fba735b4b9aa229b27c61d38cca36fdba97b6f743775b1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s083_output"
	    wget -O "n100.r01.s083_output/n100.r01.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s083_output/n100.r01.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s083_output/n100.r01.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s083_output/n100.r01.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s083_output/n100.r01.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s083_output/n100.r01.s083.reference.fas" "n100.r01.s083_output/n100.r01.s083.fq1.fastq" "n100.r01.s083_output/n100.r01.s083.fq2.fastq" | samtools view -bS - > "n100.r01.s083_output/n100.r01.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s083_output/n100.r01.s083.untrimmed.sorted.bam" "n100.r01.s083_output/n100.r01.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s083_output/n100.r01.s083.untrimmed.sorted.bam" -b "n100.r01.s083_output/n100.r01.s083.primers.bed" -p "n100.r01.s083_output/n100.r01.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" "n100.r01.s083_output/n100.r01.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s083_output/n100.r01.s083.reference.fas" "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" > "n100.r01.s083_output/n100.r01.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s083_output/n100.r01.s083.reference.fas" --call-indels "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" > "n100.r01.s083_output/n100.r01.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" > "n100.r01.s083_output/n100.r01.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s083_output/n100.r01.s083.depth.txt" "n100.r01.s083_output/n100.r01.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s083_output/n100.r01.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s083_output/n100.r01.s083.reference.fas" | bcftools consensus -m "n100.r01.s083_output/n100.r01.s083.low_depth.tsv" tmp.vcf.gz > "n100.r01.s083_output/n100.r01.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task 0f1079d5 (flow 0bcaa813): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:30 scheduler task 0f1079d5 (flow 0bcaa813): waiting for completion (try 0): started
2021/07/08 13:53:30  ->  n100.r01.s013.Main.out_file 0bcaa813 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:30 n100.r01.s013.Main.out_file 0bcaa813 n100/r01/n100.r01.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dd7a211d61eeb6c70d42caf4f444a29cf3c21959709fbb8ce2d10086ec925894
	sha256:0bcaa813dd02d4a1665438091a4e7c39327bb444b8532c61cb177687b5e1790d
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0f1079d5912989ccb3de8ed8ac0ffc2bd152a87563d42d0b8a4166126fe46044
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s013_output"
	    wget -O "n100.r01.s013_output/n100.r01.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s013_output/n100.r01.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s013_output/n100.r01.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s013_output/n100.r01.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s013_output/n100.r01.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s013_output/n100.r01.s013.reference.fas" "n100.r01.s013_output/n100.r01.s013.fq1.fastq" "n100.r01.s013_output/n100.r01.s013.fq2.fastq" | samtools view -bS - > "n100.r01.s013_output/n100.r01.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s013_output/n100.r01.s013.untrimmed.sorted.bam" "n100.r01.s013_output/n100.r01.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s013_output/n100.r01.s013.untrimmed.sorted.bam" -b "n100.r01.s013_output/n100.r01.s013.primers.bed" -p "n100.r01.s013_output/n100.r01.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" "n100.r01.s013_output/n100.r01.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s013_output/n100.r01.s013.reference.fas" "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" > "n100.r01.s013_output/n100.r01.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s013_output/n100.r01.s013.reference.fas" --call-indels "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" > "n100.r01.s013_output/n100.r01.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" > "n100.r01.s013_output/n100.r01.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s013_output/n100.r01.s013.depth.txt" "n100.r01.s013_output/n100.r01.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s013_output/n100.r01.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s013_output/n100.r01.s013.reference.fas" | bcftools consensus -m "n100.r01.s013_output/n100.r01.s013.low_depth.tsv" tmp.vcf.gz > "n100.r01.s013_output/n100.r01.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:30 scheduler task 8f377fd7 (flow 1f9bdd3e): loaded val<.=3c92d609 35.4MiB>
2021/07/08 13:53:30 scheduler task 9ca279ac (flow 8a6b6586): loaded val<.=0f9fcfdc 35.4MiB>
2021/07/08 13:53:30 scheduler task 9ca279ac (flow 8a6b6586): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 9ca279ac (flow 8a6b6586): submitting (try 0): started
2021/07/08 13:53:30 scheduler task c5917b88 (flow 1a8edfa6): loaded val<.=4cf0f06d 35.4MiB>
2021/07/08 13:53:30 scheduler task 16911b07 (flow 1b870f15): loaded val<.=ac281127 35.4MiB>
2021/07/08 13:53:30 scheduler task 16911b07 (flow 1b870f15): loading (try 0): successful, next state: submitting
2021/07/08 13:53:30 scheduler task 16911b07 (flow 1b870f15): submitting (try 0): started
2021/07/08 13:53:30 scheduler task aae3d819 (flow cb63bac2): loaded val<.=d870bdf1 35.4MiB>
2021/07/08 13:53:30 scheduler task 91a49b70 (flow dc0a8500): loaded val<.=c134d61e 35.4MiB>
2021/07/08 13:53:30 scheduler task df7b7632 (flow cb85a725): loaded val<.=4733c8b6 35.4MiB>
2021/07/08 13:53:30 scheduler task bef5a6aa (flow 50884d6c): loaded val<.=fce026f4 35.4MiB>
2021/07/08 13:53:31 scheduler task 3e0df658 (flow da15cf49): loaded val<.=97cf9dbe 35.4MiB>
2021/07/08 13:53:31 scheduler task 3e0df658 (flow da15cf49): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 3e0df658 (flow da15cf49): submitting (try 0): started
2021/07/08 13:53:31 scheduler task aa7885b4 (flow 963957c7): loaded val<.=7ef97a55 35.4MiB>
2021/07/08 13:53:31 scheduler task bc719b94 (flow 1fcc6ec2): loaded val<.=9fff0238 35.4MiB>
2021/07/08 13:53:31 scheduler task 97660e05 (flow c1a6fe3a): loaded val<.=06ed5c2b 35.4MiB>
2021/07/08 13:53:31 scheduler task eff5e8ec (flow 01b3e50d): loaded val<.=2c619f1b 35.4MiB>
2021/07/08 13:53:31 scheduler task e480ee50 (flow 7d31354e): loaded val<.=b37218f2 35.4MiB>
2021/07/08 13:53:31 scheduler task e3778923 (flow 574fe4ef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task 5ea5dcef (flow b6aba721): loaded val<.=8810ef48 35.4MiB>
2021/07/08 13:53:31 scheduler task e3778923 (flow 574fe4ef): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s082.Main.out_file 574fe4ef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s082.Main.out_file 574fe4ef n100/r01/n100.r01.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:11e0ff224e2a2eb102506869dedc7af9a016a756a5c016f530af7cc518cec845
	sha256:574fe4ef3c367c027d15e4504887e69e55b1a0496a179a438335d7f470b71019
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e3778923adb338cdba00ae7d94ed5f77c2822bad6ec7665c78ae6838cf815a07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s082_output"
	    wget -O "n100.r01.s082_output/n100.r01.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s082_output/n100.r01.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s082_output/n100.r01.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s082_output/n100.r01.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s082_output/n100.r01.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s082_output/n100.r01.s082.reference.fas" "n100.r01.s082_output/n100.r01.s082.fq1.fastq" "n100.r01.s082_output/n100.r01.s082.fq2.fastq" | samtools view -bS - > "n100.r01.s082_output/n100.r01.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s082_output/n100.r01.s082.untrimmed.sorted.bam" "n100.r01.s082_output/n100.r01.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s082_output/n100.r01.s082.untrimmed.sorted.bam" -b "n100.r01.s082_output/n100.r01.s082.primers.bed" -p "n100.r01.s082_output/n100.r01.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" "n100.r01.s082_output/n100.r01.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s082_output/n100.r01.s082.reference.fas" "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" > "n100.r01.s082_output/n100.r01.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s082_output/n100.r01.s082.reference.fas" --call-indels "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" > "n100.r01.s082_output/n100.r01.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" > "n100.r01.s082_output/n100.r01.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s082_output/n100.r01.s082.depth.txt" "n100.r01.s082_output/n100.r01.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s082_output/n100.r01.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s082_output/n100.r01.s082.reference.fas" | bcftools consensus -m "n100.r01.s082_output/n100.r01.s082.low_depth.tsv" tmp.vcf.gz > "n100.r01.s082_output/n100.r01.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task f0d0ce5d (flow 15203b14): loaded val<.=9cc960e1 35.4MiB>
2021/07/08 13:53:31 scheduler task 4d45e98c (flow 3fec048b): loaded val<.=1c1fed7b 35.4MiB>
2021/07/08 13:53:31 scheduler task 4d45e98c (flow 3fec048b): loaded val<.=11ff7b2a 35.4MiB>
2021/07/08 13:53:31 scheduler task 4d45e98c (flow 3fec048b): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 4d45e98c (flow 3fec048b): submitting (try 0): started
2021/07/08 13:53:31 scheduler task e480ee50 (flow 7d31354e): loaded val<.=73ce4364 35.4MiB>
2021/07/08 13:53:31 scheduler task e480ee50 (flow 7d31354e): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task e480ee50 (flow 7d31354e): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 4a2be2fe (flow a35830e3): loaded val<.=064182f8 35.4MiB>
2021/07/08 13:53:31 scheduler task 6ec2dcb3 (flow e856bd44): loaded val<.=16ad7fbc 35.4MiB>
2021/07/08 13:53:31 scheduler task 4a2be2fe (flow a35830e3): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 35fa303c (flow 0b006c5d): loaded val<.=495a4c8b 35.4MiB>
2021/07/08 13:53:31 scheduler task 08e2a9ed (flow 1d467a73): loaded val<.=57dbfcd8 35.4MiB>
2021/07/08 13:53:31 scheduler task 4a2be2fe (flow a35830e3): submitting (try 0): started
2021/07/08 13:53:31 scheduler task dd684b46 (flow 9d1a9286): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task dd684b46 (flow 9d1a9286): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s030.Main.out_file 9d1a9286 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s030.Main.out_file 9d1a9286 n100/r01/n100.r01.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:774fbb8aaea51785e4628bf58d968bd67b58e56d01df1ae1b31b36deed02e6d2
	sha256:9d1a9286df2361ef2d5d30029d4466053f7804c1b28416f794d086ed7298fca5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dd684b466cecd4d253f2f99a3ae36d21c9a9f816dbee2f7134f2b108a6e04de8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s030_output"
	    wget -O "n100.r01.s030_output/n100.r01.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s030_output/n100.r01.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s030_output/n100.r01.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s030_output/n100.r01.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s030_output/n100.r01.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s030_output/n100.r01.s030.reference.fas" "n100.r01.s030_output/n100.r01.s030.fq1.fastq" "n100.r01.s030_output/n100.r01.s030.fq2.fastq" | samtools view -bS - > "n100.r01.s030_output/n100.r01.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s030_output/n100.r01.s030.untrimmed.sorted.bam" "n100.r01.s030_output/n100.r01.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s030_output/n100.r01.s030.untrimmed.sorted.bam" -b "n100.r01.s030_output/n100.r01.s030.primers.bed" -p "n100.r01.s030_output/n100.r01.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" "n100.r01.s030_output/n100.r01.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s030_output/n100.r01.s030.reference.fas" "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" > "n100.r01.s030_output/n100.r01.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s030_output/n100.r01.s030.reference.fas" --call-indels "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" > "n100.r01.s030_output/n100.r01.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" > "n100.r01.s030_output/n100.r01.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s030_output/n100.r01.s030.depth.txt" "n100.r01.s030_output/n100.r01.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s030_output/n100.r01.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s030_output/n100.r01.s030.reference.fas" | bcftools consensus -m "n100.r01.s030_output/n100.r01.s030.low_depth.tsv" tmp.vcf.gz > "n100.r01.s030_output/n100.r01.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task 8b1f0155 (flow 99489b6e): loaded val<.=0b0afa8b 35.4MiB>
2021/07/08 13:53:31 scheduler task 8b1f0155 (flow 99489b6e): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 0fea5d54 (flow 44ac81a2): loaded val<.=d9aba825 35.4MiB>
2021/07/08 13:53:31 scheduler task 8b1f0155 (flow 99489b6e): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 0fea5d54 (flow 44ac81a2): loaded val<.=6f661ed4 35.4MiB>
2021/07/08 13:53:31 scheduler task 0fea5d54 (flow 44ac81a2): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 0fea5d54 (flow 44ac81a2): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 97818aad (flow 3ce93691): loaded val<.=0cd6ebeb 35.4MiB>
2021/07/08 13:53:31 scheduler task 97818aad (flow 3ce93691): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 97818aad (flow 3ce93691): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 7ec3898d (flow 236f7412): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task bc719b94 (flow 1fcc6ec2): loaded val<.=3a32cb42 35.4MiB>
2021/07/08 13:53:31 scheduler task bc719b94 (flow 1fcc6ec2): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 5ea5dcef (flow b6aba721): loaded val<.=b465f9ac 35.4MiB>
2021/07/08 13:53:31 scheduler task 5ea5dcef (flow b6aba721): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task bc719b94 (flow 1fcc6ec2): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 7ec3898d (flow 236f7412): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s024.Main.out_file 236f7412 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s024.Main.out_file 236f7412 n100/r01/n100.r01.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:157415717faf2df78dc42af84dc1c58014163af55429ba04cf62baa44b4ade4d
	sha256:236f74125cceae1240e5ad7283d90e488351c7908ae4f05becd684b21e127042
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ec3898dcb8c8ff877818a85f776dff2af805acf9bb74474268e9e33b0e9a385
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s024_output"
	    wget -O "n100.r01.s024_output/n100.r01.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s024_output/n100.r01.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s024_output/n100.r01.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s024_output/n100.r01.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s024_output/n100.r01.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s024_output/n100.r01.s024.reference.fas" "n100.r01.s024_output/n100.r01.s024.fq1.fastq" "n100.r01.s024_output/n100.r01.s024.fq2.fastq" | samtools view -bS - > "n100.r01.s024_output/n100.r01.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s024_output/n100.r01.s024.untrimmed.sorted.bam" "n100.r01.s024_output/n100.r01.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s024_output/n100.r01.s024.untrimmed.sorted.bam" -b "n100.r01.s024_output/n100.r01.s024.primers.bed" -p "n100.r01.s024_output/n100.r01.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" "n100.r01.s024_output/n100.r01.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s024_output/n100.r01.s024.reference.fas" "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" > "n100.r01.s024_output/n100.r01.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s024_output/n100.r01.s024.reference.fas" --call-indels "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" > "n100.r01.s024_output/n100.r01.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" > "n100.r01.s024_output/n100.r01.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s024_output/n100.r01.s024.depth.txt" "n100.r01.s024_output/n100.r01.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s024_output/n100.r01.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s024_output/n100.r01.s024.reference.fas" | bcftools consensus -m "n100.r01.s024_output/n100.r01.s024.low_depth.tsv" tmp.vcf.gz > "n100.r01.s024_output/n100.r01.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task 5ea5dcef (flow b6aba721): submitting (try 0): started
2021/07/08 13:53:31 scheduler task f0d0ce5d (flow 15203b14): loaded val<.=826c2e81 35.4MiB>
2021/07/08 13:53:31 scheduler task f0d0ce5d (flow 15203b14): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task f0d0ce5d (flow 15203b14): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 1276c917 (flow 8986bd36): loaded val<.=c7fa729f 35.4MiB>
2021/07/08 13:53:31 scheduler task 6a9006af (flow 15a25f65): loaded val<.=9ea39716 35.4MiB>
2021/07/08 13:53:31 scheduler task df89e983 (flow 97443e88): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task df89e983 (flow 97443e88): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s039.Main.out_file 97443e88 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s039.Main.out_file 97443e88 n100/r01/n100.r01.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:65a147476b269a7fb7ce3d94b5a0364f0793c2b4a7a3659363046aa82819080f
	sha256:97443e88f37723dce03ad4b936efc14980ae7aa9425c6bd3f97e701d31117cb4
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df89e98328a9537f8af4539d06b4c5cbd49c47a2505c69f80972b2375e319d23
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s039_output"
	    wget -O "n100.r01.s039_output/n100.r01.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s039_output/n100.r01.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s039_output/n100.r01.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s039_output/n100.r01.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s039_output/n100.r01.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s039_output/n100.r01.s039.reference.fas" "n100.r01.s039_output/n100.r01.s039.fq1.fastq" "n100.r01.s039_output/n100.r01.s039.fq2.fastq" | samtools view -bS - > "n100.r01.s039_output/n100.r01.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s039_output/n100.r01.s039.untrimmed.sorted.bam" "n100.r01.s039_output/n100.r01.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s039_output/n100.r01.s039.untrimmed.sorted.bam" -b "n100.r01.s039_output/n100.r01.s039.primers.bed" -p "n100.r01.s039_output/n100.r01.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" "n100.r01.s039_output/n100.r01.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s039_output/n100.r01.s039.reference.fas" "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" > "n100.r01.s039_output/n100.r01.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s039_output/n100.r01.s039.reference.fas" --call-indels "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" > "n100.r01.s039_output/n100.r01.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" > "n100.r01.s039_output/n100.r01.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s039_output/n100.r01.s039.depth.txt" "n100.r01.s039_output/n100.r01.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s039_output/n100.r01.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s039_output/n100.r01.s039.reference.fas" | bcftools consensus -m "n100.r01.s039_output/n100.r01.s039.low_depth.tsv" tmp.vcf.gz > "n100.r01.s039_output/n100.r01.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task b25ce208 (flow f21eee98): loaded val<.=2839ba3b 35.4MiB>
2021/07/08 13:53:31 scheduler task bf4e2cad (flow 39634eeb): loaded val<.=dcba6b7f 35.4MiB>
2021/07/08 13:53:31 scheduler task 8f377fd7 (flow 1f9bdd3e): loaded val<.=be388494 35.4MiB>
2021/07/08 13:53:31 scheduler task 8f377fd7 (flow 1f9bdd3e): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 8f377fd7 (flow 1f9bdd3e): submitting (try 0): started
2021/07/08 13:53:31 scheduler task bf4e2cad (flow 39634eeb): loaded val<.=a607068f 35.4MiB>
2021/07/08 13:53:31 scheduler task bf4e2cad (flow 39634eeb): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task fa62b07a (flow 12d83baf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task 128087c4 (flow 6dc80144): loaded val<.=77703d34 35.4MiB>
2021/07/08 13:53:31 scheduler task bf4e2cad (flow 39634eeb): submitting (try 0): started
2021/07/08 13:53:31 scheduler task fa62b07a (flow 12d83baf): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s087.Main.out_file 12d83baf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s087.Main.out_file 12d83baf n100/r01/n100.r01.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d92a583fa92e5aa589092bbbd7622ff30adaa6e5d8cb97e71d945d60508d700
	sha256:12d83baf59d4450d29101fd23e252edc36c345909ce3c8591f869d48de7d4cb0
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fa62b07ae4e2462d3de09afe35f161e9084e1e14cf75e77a9713ce3c1b8ce6a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s087_output"
	    wget -O "n100.r01.s087_output/n100.r01.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s087_output/n100.r01.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s087_output/n100.r01.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s087_output/n100.r01.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s087_output/n100.r01.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s087_output/n100.r01.s087.reference.fas" "n100.r01.s087_output/n100.r01.s087.fq1.fastq" "n100.r01.s087_output/n100.r01.s087.fq2.fastq" | samtools view -bS - > "n100.r01.s087_output/n100.r01.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s087_output/n100.r01.s087.untrimmed.sorted.bam" "n100.r01.s087_output/n100.r01.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s087_output/n100.r01.s087.untrimmed.sorted.bam" -b "n100.r01.s087_output/n100.r01.s087.primers.bed" -p "n100.r01.s087_output/n100.r01.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" "n100.r01.s087_output/n100.r01.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s087_output/n100.r01.s087.reference.fas" "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" > "n100.r01.s087_output/n100.r01.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s087_output/n100.r01.s087.reference.fas" --call-indels "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" > "n100.r01.s087_output/n100.r01.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" > "n100.r01.s087_output/n100.r01.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s087_output/n100.r01.s087.depth.txt" "n100.r01.s087_output/n100.r01.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s087_output/n100.r01.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s087_output/n100.r01.s087.reference.fas" | bcftools consensus -m "n100.r01.s087_output/n100.r01.s087.low_depth.tsv" tmp.vcf.gz > "n100.r01.s087_output/n100.r01.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task 378eabfc (flow 5ba5cdc9): loaded val<.=27340a73 35.4MiB>
2021/07/08 13:53:31 scheduler task 91a49b70 (flow dc0a8500): loaded val<.=87166d25 35.4MiB>
2021/07/08 13:53:31 scheduler task ee96b8c7 (flow 028284df): loaded val<.=d1b8e383 35.4MiB>
2021/07/08 13:53:31 scheduler task 6e4fdc45 (flow fcf02ceb): loaded val<.=2c3046e0 35.4MiB>
2021/07/08 13:53:31 scheduler task 6e4fdc45 (flow fcf02ceb): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 97660e05 (flow c1a6fe3a): loaded val<.=ecbc05ee 35.4MiB>
2021/07/08 13:53:31 scheduler task 97660e05 (flow c1a6fe3a): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 91a49b70 (flow dc0a8500): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 6e4fdc45 (flow fcf02ceb): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 128087c4 (flow 6dc80144): loaded val<.=2409eca4 35.4MiB>
2021/07/08 13:53:31 scheduler task 128087c4 (flow 6dc80144): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task bef5a6aa (flow 50884d6c): loaded val<.=75929da2 35.4MiB>
2021/07/08 13:53:31 scheduler task bef5a6aa (flow 50884d6c): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 97660e05 (flow c1a6fe3a): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 91a49b70 (flow dc0a8500): submitting (try 0): started
2021/07/08 13:53:31 scheduler task a7bf4b87 (flow 6ea478fe): loaded val<.=2148072c 35.4MiB>
2021/07/08 13:53:31 scheduler task a7bf4b87 (flow 6ea478fe): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 0a01661c (flow b52f6d52): loaded val<.=8501a03a 35.4MiB>
2021/07/08 13:53:31 scheduler task 128087c4 (flow 6dc80144): submitting (try 0): started
2021/07/08 13:53:31 scheduler task bef5a6aa (flow 50884d6c): submitting (try 0): started
2021/07/08 13:53:31 scheduler task aa7885b4 (flow 963957c7): loaded val<.=d6c57969 35.4MiB>
2021/07/08 13:53:31 scheduler task aa7885b4 (flow 963957c7): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 7c7b163b (flow 441ccf77): loaded val<.=efd390ec 35.4MiB>
2021/07/08 13:53:31 scheduler task a7bf4b87 (flow 6ea478fe): submitting (try 0): started
2021/07/08 13:53:31 scheduler task aa7885b4 (flow 963957c7): submitting (try 0): started
2021/07/08 13:53:31 scheduler task ce295c92 (flow 4cdb8625): loaded val<.=ee4956a9 35.4MiB>
2021/07/08 13:53:31 scheduler task eff5e8ec (flow 01b3e50d): loaded val<.=37d72c83 35.4MiB>
2021/07/08 13:53:31 scheduler task eff5e8ec (flow 01b3e50d): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 35fa303c (flow 0b006c5d): loaded val<.=ca35bcff 35.4MiB>
2021/07/08 13:53:31 scheduler task 35fa303c (flow 0b006c5d): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task eff5e8ec (flow 01b3e50d): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 2cd9def4 (flow fea6d9e1): loaded val<.=6e6e35c3 35.4MiB>
2021/07/08 13:53:31 scheduler task 35fa303c (flow 0b006c5d): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 89fa88da (flow 6636d54a): loaded val<.=feecab12 35.4MiB>
2021/07/08 13:53:31 scheduler task 238ca419 (flow 8082561f): loaded val<.=7e489594 35.4MiB>
2021/07/08 13:53:31 scheduler task 238ca419 (flow 8082561f): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task e1e24653 (flow 9d6059f7): loaded val<.=63e45ebd 35.4MiB>
2021/07/08 13:53:31 scheduler task c5917b88 (flow 1a8edfa6): loaded val<.=647a6102 35.4MiB>
2021/07/08 13:53:31 scheduler task c5917b88 (flow 1a8edfa6): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 238ca419 (flow 8082561f): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 8280a85f (flow c90d12cc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task 00418e33 (flow 580d88f9): loaded val<.=0adaca2c 35.4MiB>
2021/07/08 13:53:31 scheduler task 8280a85f (flow c90d12cc): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s032.Main.out_file c90d12cc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s032.Main.out_file c90d12cc n100/r01/n100.r01.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e62223db087b334a0c6dd67dbb0ff834901eded0e386f4637ce0f71ac1abcaf
	sha256:c90d12ccfeeeb85144ce28aba5fa5bc4fbc0cacca9410966d91084a8d0842fbd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8280a85f1159da186a0e1806e6b6668b6843e6607e3cd5984e2ed7c00c854263
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s032_output"
	    wget -O "n100.r01.s032_output/n100.r01.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s032_output/n100.r01.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s032_output/n100.r01.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s032_output/n100.r01.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s032_output/n100.r01.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s032_output/n100.r01.s032.reference.fas" "n100.r01.s032_output/n100.r01.s032.fq1.fastq" "n100.r01.s032_output/n100.r01.s032.fq2.fastq" | samtools view -bS - > "n100.r01.s032_output/n100.r01.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s032_output/n100.r01.s032.untrimmed.sorted.bam" "n100.r01.s032_output/n100.r01.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s032_output/n100.r01.s032.untrimmed.sorted.bam" -b "n100.r01.s032_output/n100.r01.s032.primers.bed" -p "n100.r01.s032_output/n100.r01.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" "n100.r01.s032_output/n100.r01.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s032_output/n100.r01.s032.reference.fas" "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" > "n100.r01.s032_output/n100.r01.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s032_output/n100.r01.s032.reference.fas" --call-indels "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" > "n100.r01.s032_output/n100.r01.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" > "n100.r01.s032_output/n100.r01.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s032_output/n100.r01.s032.depth.txt" "n100.r01.s032_output/n100.r01.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s032_output/n100.r01.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s032_output/n100.r01.s032.reference.fas" | bcftools consensus -m "n100.r01.s032_output/n100.r01.s032.low_depth.tsv" tmp.vcf.gz > "n100.r01.s032_output/n100.r01.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task c5917b88 (flow 1a8edfa6): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 0a01661c (flow b52f6d52): loaded val<.=018327d5 35.4MiB>
2021/07/08 13:53:31 scheduler task 0a01661c (flow b52f6d52): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task ce295c92 (flow 4cdb8625): loaded val<.=be6f03d7 35.4MiB>
2021/07/08 13:53:31 scheduler task ce295c92 (flow 4cdb8625): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 1276c917 (flow 8986bd36): loaded val<.=d352f0ac 35.4MiB>
2021/07/08 13:53:31 scheduler task 1276c917 (flow 8986bd36): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 0a01661c (flow b52f6d52): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 9bf76c45 (flow 493067ab): loaded val<.=fd04acec 35.4MiB>
2021/07/08 13:53:31 scheduler task 6a9006af (flow 15a25f65): loaded val<.=1798c582 35.4MiB>
2021/07/08 13:53:31 scheduler task 6a9006af (flow 15a25f65): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 8f179a44 (flow f3e1b152): loaded val<.=c236b0e8 35.4MiB>
2021/07/08 13:53:31 scheduler task 8f179a44 (flow f3e1b152): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task ce295c92 (flow 4cdb8625): submitting (try 0): started
2021/07/08 13:53:31 scheduler task dc6ab090 (flow a6c01e21): loaded val<.=afaf88dd 35.4MiB>
2021/07/08 13:53:31 scheduler task 1276c917 (flow 8986bd36): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 6a9006af (flow 15a25f65): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 8f179a44 (flow f3e1b152): submitting (try 0): started
2021/07/08 13:53:31 scheduler task df7b7632 (flow cb85a725): loaded val<.=ab8772d2 35.4MiB>
2021/07/08 13:53:31 scheduler task df7b7632 (flow cb85a725): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 5d1b3fa7 (flow 5ac278bc): loaded val<.=15053d43 35.4MiB>
2021/07/08 13:53:31 scheduler task 5d1b3fa7 (flow 5ac278bc): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task df7b7632 (flow cb85a725): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 5d1b3fa7 (flow 5ac278bc): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 0c141a13 (flow 9df7cd9b): loaded val<.=c64765e9 35.4MiB>
2021/07/08 13:53:31 scheduler task 89fa88da (flow 6636d54a): loaded val<.=f28d994f 35.4MiB>
2021/07/08 13:53:31 scheduler task 89fa88da (flow 6636d54a): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 89fa88da (flow 6636d54a): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 08e2a9ed (flow 1d467a73): loaded val<.=6d63a58a 35.4MiB>
2021/07/08 13:53:31 scheduler task 08e2a9ed (flow 1d467a73): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 08e2a9ed (flow 1d467a73): submitting (try 0): started
2021/07/08 13:53:31 scheduler task ffd18420 (flow 1fe8d91f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task ffd18420 (flow 1fe8d91f): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s099.Main.out_file 1fe8d91f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 scheduler task 642e6110 (flow 18df7aad): loaded val<.=18bd4243 35.4MiB>
2021/07/08 13:53:31 n100.r01.s099.Main.out_file 1fe8d91f n100/r01/n100.r01.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:292895583a5f36cc8e5aa714b1a1bd9db6e8699f242a20158eb5e29c7aa78456
	sha256:1fe8d91fa11659ab7dd45fc3eec867a3c2209d8181d353b1a1d3bb92aafdeb51
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ffd18420bf5d7b954420df00becf5d83e248ad334632f59c7bb7b079de2b08bd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s099_output"
	    wget -O "n100.r01.s099_output/n100.r01.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s099_output/n100.r01.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s099_output/n100.r01.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s099_output/n100.r01.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s099_output/n100.r01.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s099_output/n100.r01.s099.reference.fas" "n100.r01.s099_output/n100.r01.s099.fq1.fastq" "n100.r01.s099_output/n100.r01.s099.fq2.fastq" | samtools view -bS - > "n100.r01.s099_output/n100.r01.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s099_output/n100.r01.s099.untrimmed.sorted.bam" "n100.r01.s099_output/n100.r01.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s099_output/n100.r01.s099.untrimmed.sorted.bam" -b "n100.r01.s099_output/n100.r01.s099.primers.bed" -p "n100.r01.s099_output/n100.r01.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" "n100.r01.s099_output/n100.r01.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s099_output/n100.r01.s099.reference.fas" "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" > "n100.r01.s099_output/n100.r01.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s099_output/n100.r01.s099.reference.fas" --call-indels "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" > "n100.r01.s099_output/n100.r01.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" > "n100.r01.s099_output/n100.r01.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s099_output/n100.r01.s099.depth.txt" "n100.r01.s099_output/n100.r01.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s099_output/n100.r01.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s099_output/n100.r01.s099.reference.fas" | bcftools consensus -m "n100.r01.s099_output/n100.r01.s099.low_depth.tsv" tmp.vcf.gz > "n100.r01.s099_output/n100.r01.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task de4e06de (flow 337713ba): loaded val<.=1673e42f 35.4MiB>
2021/07/08 13:53:31 scheduler task 7c7b163b (flow 441ccf77): loaded val<.=9d1a1741 35.4MiB>
2021/07/08 13:53:31 scheduler task 7c7b163b (flow 441ccf77): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 7c7b163b (flow 441ccf77): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 6a8b9655 (flow 09a7347a): loaded val<.=27340a73 35.4MiB>
2021/07/08 13:53:31 scheduler task 6a8b9655 (flow 09a7347a): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 4ad47abd (flow 264f4a9d): loaded val<.=14dcf97b 35.4MiB>
2021/07/08 13:53:31 scheduler task 4ad47abd (flow 264f4a9d): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 5ba3ce8d (flow e1b32ab1): loaded val<.=96f693e3 35.4MiB>
2021/07/08 13:53:31 scheduler task 5ba3ce8d (flow e1b32ab1): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 6a8b9655 (flow 09a7347a): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 251c61ad (flow b62d3501): loaded val<.=064cafa2 35.4MiB>
2021/07/08 13:53:31 scheduler task 4ad47abd (flow 264f4a9d): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 5ba3ce8d (flow e1b32ab1): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 468f0ab1 (flow acea3fd9): loaded val<.=870e5ccc 35.4MiB>
2021/07/08 13:53:31 scheduler task 468f0ab1 (flow acea3fd9): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 468f0ab1 (flow acea3fd9): submitting (try 0): started
2021/07/08 13:53:31 scheduler task dc6ab090 (flow a6c01e21): loaded val<.=7117496b 35.4MiB>
2021/07/08 13:53:31 scheduler task dc6ab090 (flow a6c01e21): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task dc6ab090 (flow a6c01e21): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 557c581c (flow ec5fcaaf): loaded val<.=30f4f0a1 35.4MiB>
2021/07/08 13:53:31 scheduler task 557c581c (flow ec5fcaaf): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 557c581c (flow ec5fcaaf): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 9ad01cec (flow 6dee772b): loaded val<.=7fb76c16 35.4MiB>
2021/07/08 13:53:31 scheduler task de4e06de (flow 337713ba): loaded val<.=d8338249 35.4MiB>
2021/07/08 13:53:31 scheduler task de4e06de (flow 337713ba): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task aae3d819 (flow cb63bac2): loaded val<.=bae4bde8 35.4MiB>
2021/07/08 13:53:31 scheduler task aae3d819 (flow cb63bac2): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task cd8b0435 (flow 831ed94c): loaded val<.=17aa2391 35.4MiB>
2021/07/08 13:53:31 scheduler task 7cbb434c (flow 8d902717): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:31 scheduler task de4e06de (flow 337713ba): submitting (try 0): started
2021/07/08 13:53:31 scheduler task aae3d819 (flow cb63bac2): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 7cbb434c (flow 8d902717): waiting for completion (try 0): started
2021/07/08 13:53:31  ->  n100.r01.s073.Main.out_file 8d902717 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:31 n100.r01.s073.Main.out_file 8d902717 n100/r01/n100.r01.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8273f7000e6956dd37f1daca77cf24a27bddf234248d5123aa4400bff19b8842
	sha256:8d9027174d521e8d9f4edec854098117356b5477d67e4ca041b73bc1499b97ec
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7cbb434c0927874be566b31cd8a6b6b77e48e718abea0aa959bad6dc6d20e59f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s073_output"
	    wget -O "n100.r01.s073_output/n100.r01.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s073_output/n100.r01.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s073_output/n100.r01.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s073_output/n100.r01.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s073_output/n100.r01.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s073_output/n100.r01.s073.reference.fas" "n100.r01.s073_output/n100.r01.s073.fq1.fastq" "n100.r01.s073_output/n100.r01.s073.fq2.fastq" | samtools view -bS - > "n100.r01.s073_output/n100.r01.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s073_output/n100.r01.s073.untrimmed.sorted.bam" "n100.r01.s073_output/n100.r01.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s073_output/n100.r01.s073.untrimmed.sorted.bam" -b "n100.r01.s073_output/n100.r01.s073.primers.bed" -p "n100.r01.s073_output/n100.r01.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" "n100.r01.s073_output/n100.r01.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s073_output/n100.r01.s073.reference.fas" "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" > "n100.r01.s073_output/n100.r01.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s073_output/n100.r01.s073.reference.fas" --call-indels "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" > "n100.r01.s073_output/n100.r01.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" > "n100.r01.s073_output/n100.r01.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s073_output/n100.r01.s073.depth.txt" "n100.r01.s073_output/n100.r01.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s073_output/n100.r01.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s073_output/n100.r01.s073.reference.fas" | bcftools consensus -m "n100.r01.s073_output/n100.r01.s073.low_depth.tsv" tmp.vcf.gz > "n100.r01.s073_output/n100.r01.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:31 scheduler task 251c61ad (flow b62d3501): loaded val<.=161998d7 35.4MiB>
2021/07/08 13:53:31 scheduler task 251c61ad (flow b62d3501): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task c5194497 (flow bb46d7da): loaded val<.=7cb9e158 35.4MiB>
2021/07/08 13:53:31 scheduler task c5194497 (flow bb46d7da): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 251c61ad (flow b62d3501): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 2cd9def4 (flow fea6d9e1): loaded val<.=0c5d5bfa 35.4MiB>
2021/07/08 13:53:31 scheduler task 2cd9def4 (flow fea6d9e1): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task c5194497 (flow bb46d7da): submitting (try 0): started
2021/07/08 13:53:31 scheduler task e1e24653 (flow 9d6059f7): loaded val<.=0ff739c2 35.4MiB>
2021/07/08 13:53:31 scheduler task e1e24653 (flow 9d6059f7): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task e89bffd7 (flow 5f65da5f): loaded val<.=57341dd7 35.4MiB>
2021/07/08 13:53:31 scheduler task e89bffd7 (flow 5f65da5f): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task e1e24653 (flow 9d6059f7): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 2cd9def4 (flow fea6d9e1): submitting (try 0): started
2021/07/08 13:53:31 scheduler task e89bffd7 (flow 5f65da5f): submitting (try 0): started
2021/07/08 13:53:31 scheduler task 0c141a13 (flow 9df7cd9b): loaded val<.=bf18a799 35.4MiB>
2021/07/08 13:53:31 scheduler task 0c141a13 (flow 9df7cd9b): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task cd8b0435 (flow 831ed94c): loaded val<.=0d75a8b5 35.4MiB>
2021/07/08 13:53:31 scheduler task cd8b0435 (flow 831ed94c): loading (try 0): successful, next state: submitting
2021/07/08 13:53:31 scheduler task 0c141a13 (flow 9df7cd9b): submitting (try 0): started
2021/07/08 13:53:32 scheduler task cd8b0435 (flow 831ed94c): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 00418e33 (flow 580d88f9): loaded val<.=cc59fc97 35.4MiB>
2021/07/08 13:53:32 scheduler task 00418e33 (flow 580d88f9): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 3cbe7084 (flow f4094bfe): loaded val<.=7f0207b2 35.4MiB>
2021/07/08 13:53:32 scheduler task 3cbe7084 (flow f4094bfe): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 71597e7d (flow 3470f7ea): loaded val<.=b657651b 35.4MiB>
2021/07/08 13:53:32 scheduler task 71597e7d (flow 3470f7ea): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 00418e33 (flow 580d88f9): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 3cbe7084 (flow f4094bfe): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 378eabfc (flow 5ba5cdc9): loaded val<.=b606c7ce 35.4MiB>
2021/07/08 13:53:32 scheduler task 378eabfc (flow 5ba5cdc9): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 71597e7d (flow 3470f7ea): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 378eabfc (flow 5ba5cdc9): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 9ad01cec (flow 6dee772b): loaded val<.=d3bbfd73 35.4MiB>
2021/07/08 13:53:32 scheduler task 9ad01cec (flow 6dee772b): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 6ec2dcb3 (flow e856bd44): loaded val<.=244cda16 35.4MiB>
2021/07/08 13:53:32 scheduler task 6ec2dcb3 (flow e856bd44): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 9ad01cec (flow 6dee772b): submitting (try 0): started
2021/07/08 13:53:32 scheduler task b25ce208 (flow f21eee98): loaded val<.=3fa9c090 35.4MiB>
2021/07/08 13:53:32 scheduler task b25ce208 (flow f21eee98): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 6ec2dcb3 (flow e856bd44): submitting (try 0): started
2021/07/08 13:53:32 scheduler task b25ce208 (flow f21eee98): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 47ccd70f (flow 04b2f4d8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 47ccd70f (flow 04b2f4d8): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s054.Main.out_file 04b2f4d8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s054.Main.out_file 04b2f4d8 n100/r01/n100.r01.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca723a52f05c0e2f9f8a21f3b7fb013a99d99c94743aac4418ca1d44b5ff9b9e
	sha256:04b2f4d8aa959bb21338c07584e72704f98f9f22e56025aef56131fb4d5479bc
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/47ccd70fe4c0a342d79ce5cf8bd784214aece41212a3874d6fe32c2f3a8377a5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s054_output"
	    wget -O "n100.r01.s054_output/n100.r01.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s054_output/n100.r01.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s054_output/n100.r01.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s054_output/n100.r01.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s054_output/n100.r01.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s054_output/n100.r01.s054.reference.fas" "n100.r01.s054_output/n100.r01.s054.fq1.fastq" "n100.r01.s054_output/n100.r01.s054.fq2.fastq" | samtools view -bS - > "n100.r01.s054_output/n100.r01.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s054_output/n100.r01.s054.untrimmed.sorted.bam" "n100.r01.s054_output/n100.r01.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s054_output/n100.r01.s054.untrimmed.sorted.bam" -b "n100.r01.s054_output/n100.r01.s054.primers.bed" -p "n100.r01.s054_output/n100.r01.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" "n100.r01.s054_output/n100.r01.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s054_output/n100.r01.s054.reference.fas" "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" > "n100.r01.s054_output/n100.r01.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s054_output/n100.r01.s054.reference.fas" --call-indels "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" > "n100.r01.s054_output/n100.r01.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" > "n100.r01.s054_output/n100.r01.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s054_output/n100.r01.s054.depth.txt" "n100.r01.s054_output/n100.r01.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s054_output/n100.r01.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s054_output/n100.r01.s054.reference.fas" | bcftools consensus -m "n100.r01.s054_output/n100.r01.s054.low_depth.tsv" tmp.vcf.gz > "n100.r01.s054_output/n100.r01.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task 9bf76c45 (flow 493067ab): loaded val<.=b0c7cfd4 35.4MiB>
2021/07/08 13:53:32 scheduler task 9bf76c45 (flow 493067ab): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 9bf76c45 (flow 493067ab): submitting (try 0): started
2021/07/08 13:53:32 scheduler task d6c86c87 (flow 6138a66a): loaded val<.=cf55d0cf 35.4MiB>
2021/07/08 13:53:32 scheduler task d6c86c87 (flow 6138a66a): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task d6c86c87 (flow 6138a66a): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 1c7f103e (flow 066587e3): loaded val<.=99ac779b 35.4MiB>
2021/07/08 13:53:32 scheduler task 1c7f103e (flow 066587e3): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task ee96b8c7 (flow 028284df): loaded val<.=3f4a954a 35.4MiB>
2021/07/08 13:53:32 scheduler task ee96b8c7 (flow 028284df): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 1c7f103e (flow 066587e3): submitting (try 0): started
2021/07/08 13:53:32 scheduler task ee96b8c7 (flow 028284df): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 2cd9def4 (flow fea6d9e1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 2cd9def4 (flow fea6d9e1): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s038.Main.out_file fea6d9e1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s038.Main.out_file fea6d9e1 n100/r01/n100.r01.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b6cd94ba171c898925f4d6cde8a7a0ccfad017a8df2d5511c67c36e9f15cdc3f
	sha256:fea6d9e1c59f83c1f159bafde7d7dee4b1b6046f7125d66c7f0e754330f22719
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cd9def439ec6e33fd91397368e51fedd1630ce469c837f76db0c8e1ef494164
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s038_output"
	    wget -O "n100.r01.s038_output/n100.r01.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s038_output/n100.r01.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s038_output/n100.r01.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s038_output/n100.r01.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s038_output/n100.r01.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s038_output/n100.r01.s038.reference.fas" "n100.r01.s038_output/n100.r01.s038.fq1.fastq" "n100.r01.s038_output/n100.r01.s038.fq2.fastq" | samtools view -bS - > "n100.r01.s038_output/n100.r01.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s038_output/n100.r01.s038.untrimmed.sorted.bam" "n100.r01.s038_output/n100.r01.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s038_output/n100.r01.s038.untrimmed.sorted.bam" -b "n100.r01.s038_output/n100.r01.s038.primers.bed" -p "n100.r01.s038_output/n100.r01.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" "n100.r01.s038_output/n100.r01.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s038_output/n100.r01.s038.reference.fas" "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" > "n100.r01.s038_output/n100.r01.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s038_output/n100.r01.s038.reference.fas" --call-indels "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" > "n100.r01.s038_output/n100.r01.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" > "n100.r01.s038_output/n100.r01.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s038_output/n100.r01.s038.depth.txt" "n100.r01.s038_output/n100.r01.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s038_output/n100.r01.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s038_output/n100.r01.s038.reference.fas" | bcftools consensus -m "n100.r01.s038_output/n100.r01.s038.low_depth.tsv" tmp.vcf.gz > "n100.r01.s038_output/n100.r01.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task 642e6110 (flow 18df7aad): loaded val<.=7978ec40 35.4MiB>
2021/07/08 13:53:32 scheduler task 642e6110 (flow 18df7aad): loading (try 0): successful, next state: submitting
2021/07/08 13:53:32 scheduler task 642e6110 (flow 18df7aad): submitting (try 0): started
2021/07/08 13:53:32 scheduler task 788f7878 (flow eb24a0c4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 788f7878 (flow eb24a0c4): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s075.Main.out_file eb24a0c4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s075.Main.out_file eb24a0c4 n100/r01/n100.r01.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5e90749171f27c6c7e8fa9572a7198aa60e24150feaf1a7bfe0bdafa3324f4f6
	sha256:eb24a0c46c0b717e1998faa7a37700aca668106927a3a973e09e652eeaad5a8f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/788f7878317089e7bbdad8b8c9f7f5b606043de179f14eb2cbda9e15daa221cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s075_output"
	    wget -O "n100.r01.s075_output/n100.r01.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s075_output/n100.r01.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s075_output/n100.r01.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s075_output/n100.r01.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s075_output/n100.r01.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s075_output/n100.r01.s075.reference.fas" "n100.r01.s075_output/n100.r01.s075.fq1.fastq" "n100.r01.s075_output/n100.r01.s075.fq2.fastq" | samtools view -bS - > "n100.r01.s075_output/n100.r01.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s075_output/n100.r01.s075.untrimmed.sorted.bam" "n100.r01.s075_output/n100.r01.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s075_output/n100.r01.s075.untrimmed.sorted.bam" -b "n100.r01.s075_output/n100.r01.s075.primers.bed" -p "n100.r01.s075_output/n100.r01.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" "n100.r01.s075_output/n100.r01.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s075_output/n100.r01.s075.reference.fas" "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" > "n100.r01.s075_output/n100.r01.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s075_output/n100.r01.s075.reference.fas" --call-indels "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" > "n100.r01.s075_output/n100.r01.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" > "n100.r01.s075_output/n100.r01.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s075_output/n100.r01.s075.depth.txt" "n100.r01.s075_output/n100.r01.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s075_output/n100.r01.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s075_output/n100.r01.s075.reference.fas" | bcftools consensus -m "n100.r01.s075_output/n100.r01.s075.low_depth.tsv" tmp.vcf.gz > "n100.r01.s075_output/n100.r01.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task 90a6b802 (flow 4c471319): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 90a6b802 (flow 4c471319): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s019.Main.out_file 4c471319 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s019.Main.out_file 4c471319 n100/r01/n100.r01.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:59dfaf919bd9e6df1fdd34b0e0f16acc1d30ecb94c0a54fc268f2748e193a578
	sha256:4c47131921d5e7cd6ab69d6b2b3d61d5d2dc2ac9971183e8add2427c7feae24b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/90a6b8024a3ee93f07a20e24a64935310f39bad06fd901d943e8d7d5a486303d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s019_output"
	    wget -O "n100.r01.s019_output/n100.r01.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s019_output/n100.r01.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s019_output/n100.r01.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s019_output/n100.r01.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s019_output/n100.r01.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s019_output/n100.r01.s019.reference.fas" "n100.r01.s019_output/n100.r01.s019.fq1.fastq" "n100.r01.s019_output/n100.r01.s019.fq2.fastq" | samtools view -bS - > "n100.r01.s019_output/n100.r01.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s019_output/n100.r01.s019.untrimmed.sorted.bam" "n100.r01.s019_output/n100.r01.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s019_output/n100.r01.s019.untrimmed.sorted.bam" -b "n100.r01.s019_output/n100.r01.s019.primers.bed" -p "n100.r01.s019_output/n100.r01.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" "n100.r01.s019_output/n100.r01.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s019_output/n100.r01.s019.reference.fas" "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" > "n100.r01.s019_output/n100.r01.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s019_output/n100.r01.s019.reference.fas" --call-indels "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" > "n100.r01.s019_output/n100.r01.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" > "n100.r01.s019_output/n100.r01.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s019_output/n100.r01.s019.depth.txt" "n100.r01.s019_output/n100.r01.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s019_output/n100.r01.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s019_output/n100.r01.s019.reference.fas" | bcftools consensus -m "n100.r01.s019_output/n100.r01.s019.low_depth.tsv" tmp.vcf.gz > "n100.r01.s019_output/n100.r01.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task 2c0a979f (flow fa875239): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 2c0a979f (flow fa875239): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s009.Main.out_file fa875239 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s009.Main.out_file fa875239 n100/r01/n100.r01.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1dda40f9306f5bdb750dfae7731277b20e6b29220f4790e3afd06e24e3594c43
	sha256:fa875239759f4b46afc18431ff611e95db5208048af98af4b10d1aea65d6431e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c0a979fe146f0bd46bf7111382b155ea9791337e65abc2b1e54eb082e544c28
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s009_output"
	    wget -O "n100.r01.s009_output/n100.r01.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s009_output/n100.r01.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s009_output/n100.r01.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s009_output/n100.r01.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s009_output/n100.r01.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s009_output/n100.r01.s009.reference.fas" "n100.r01.s009_output/n100.r01.s009.fq1.fastq" "n100.r01.s009_output/n100.r01.s009.fq2.fastq" | samtools view -bS - > "n100.r01.s009_output/n100.r01.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s009_output/n100.r01.s009.untrimmed.sorted.bam" "n100.r01.s009_output/n100.r01.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s009_output/n100.r01.s009.untrimmed.sorted.bam" -b "n100.r01.s009_output/n100.r01.s009.primers.bed" -p "n100.r01.s009_output/n100.r01.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" "n100.r01.s009_output/n100.r01.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s009_output/n100.r01.s009.reference.fas" "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" > "n100.r01.s009_output/n100.r01.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s009_output/n100.r01.s009.reference.fas" --call-indels "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" > "n100.r01.s009_output/n100.r01.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" > "n100.r01.s009_output/n100.r01.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s009_output/n100.r01.s009.depth.txt" "n100.r01.s009_output/n100.r01.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s009_output/n100.r01.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s009_output/n100.r01.s009.reference.fas" | bcftools consensus -m "n100.r01.s009_output/n100.r01.s009.low_depth.tsv" tmp.vcf.gz > "n100.r01.s009_output/n100.r01.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task 6537941d (flow 686ec8c9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 6537941d (flow 686ec8c9): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s065.Main.out_file 686ec8c9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s065.Main.out_file 686ec8c9 n100/r01/n100.r01.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:061aa9676c1f14b1e7c00b5acc095b9a13b62927320c48b56ab013cfe9445b88
	sha256:686ec8c9154929f1b1ef1ae8a7a664e89db2e5b4cc3ce1542f97300a61637042
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6537941d16339b74c4d07bdeb22192e90c83cb3bea14fa25dcb5920968e3da7f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s065_output"
	    wget -O "n100.r01.s065_output/n100.r01.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s065_output/n100.r01.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s065_output/n100.r01.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s065_output/n100.r01.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s065_output/n100.r01.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s065_output/n100.r01.s065.reference.fas" "n100.r01.s065_output/n100.r01.s065.fq1.fastq" "n100.r01.s065_output/n100.r01.s065.fq2.fastq" | samtools view -bS - > "n100.r01.s065_output/n100.r01.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s065_output/n100.r01.s065.untrimmed.sorted.bam" "n100.r01.s065_output/n100.r01.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s065_output/n100.r01.s065.untrimmed.sorted.bam" -b "n100.r01.s065_output/n100.r01.s065.primers.bed" -p "n100.r01.s065_output/n100.r01.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" "n100.r01.s065_output/n100.r01.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s065_output/n100.r01.s065.reference.fas" "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" > "n100.r01.s065_output/n100.r01.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s065_output/n100.r01.s065.reference.fas" --call-indels "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" > "n100.r01.s065_output/n100.r01.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" > "n100.r01.s065_output/n100.r01.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s065_output/n100.r01.s065.depth.txt" "n100.r01.s065_output/n100.r01.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s065_output/n100.r01.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s065_output/n100.r01.s065.reference.fas" | bcftools consensus -m "n100.r01.s065_output/n100.r01.s065.low_depth.tsv" tmp.vcf.gz > "n100.r01.s065_output/n100.r01.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task 782b9981 (flow 466997bd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task 782b9981 (flow 466997bd): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s080.Main.out_file 466997bd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s080.Main.out_file 466997bd n100/r01/n100.r01.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0d2587484933856e0d10139c696097952128cc349b1bb5bd889c369757bfcce4
	sha256:466997bdce5766dacf9440792f7bdd81bb8d7fbbc4e810c85a75e83ca871c031
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/782b9981f075a6b33bf223b0b3f0218f4421d0368b6e5d8ac64958c663d4d08d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s080_output"
	    wget -O "n100.r01.s080_output/n100.r01.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s080_output/n100.r01.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s080_output/n100.r01.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s080_output/n100.r01.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s080_output/n100.r01.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s080_output/n100.r01.s080.reference.fas" "n100.r01.s080_output/n100.r01.s080.fq1.fastq" "n100.r01.s080_output/n100.r01.s080.fq2.fastq" | samtools view -bS - > "n100.r01.s080_output/n100.r01.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s080_output/n100.r01.s080.untrimmed.sorted.bam" "n100.r01.s080_output/n100.r01.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s080_output/n100.r01.s080.untrimmed.sorted.bam" -b "n100.r01.s080_output/n100.r01.s080.primers.bed" -p "n100.r01.s080_output/n100.r01.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" "n100.r01.s080_output/n100.r01.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s080_output/n100.r01.s080.reference.fas" "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" > "n100.r01.s080_output/n100.r01.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s080_output/n100.r01.s080.reference.fas" --call-indels "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" > "n100.r01.s080_output/n100.r01.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" > "n100.r01.s080_output/n100.r01.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s080_output/n100.r01.s080.depth.txt" "n100.r01.s080_output/n100.r01.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s080_output/n100.r01.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s080_output/n100.r01.s080.reference.fas" | bcftools consensus -m "n100.r01.s080_output/n100.r01.s080.low_depth.tsv" tmp.vcf.gz > "n100.r01.s080_output/n100.r01.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:32 scheduler task d3849377 (flow a3c64438): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:32 scheduler task d3849377 (flow a3c64438): waiting for completion (try 0): started
2021/07/08 13:53:32  ->  n100.r01.s008.Main.out_file a3c64438 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:32 n100.r01.s008.Main.out_file a3c64438 n100/r01/n100.r01.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:709a3f5d7fe85e25fcf47eb8be2ea734453080d67c0e92d700f3810b3c57944d
	sha256:a3c64438b8c8adb9971739453ce52b3d529e5a211f3a069e950f2c8b02ba0159
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d38493775395e741db7a0088777d14c581ce20bc75998805d3d71e5e67fd6380
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s008_output"
	    wget -O "n100.r01.s008_output/n100.r01.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s008_output/n100.r01.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s008_output/n100.r01.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s008_output/n100.r01.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s008_output/n100.r01.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s008_output/n100.r01.s008.reference.fas" "n100.r01.s008_output/n100.r01.s008.fq1.fastq" "n100.r01.s008_output/n100.r01.s008.fq2.fastq" | samtools view -bS - > "n100.r01.s008_output/n100.r01.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s008_output/n100.r01.s008.untrimmed.sorted.bam" "n100.r01.s008_output/n100.r01.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s008_output/n100.r01.s008.untrimmed.sorted.bam" -b "n100.r01.s008_output/n100.r01.s008.primers.bed" -p "n100.r01.s008_output/n100.r01.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" "n100.r01.s008_output/n100.r01.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s008_output/n100.r01.s008.reference.fas" "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" > "n100.r01.s008_output/n100.r01.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s008_output/n100.r01.s008.reference.fas" --call-indels "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" > "n100.r01.s008_output/n100.r01.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" > "n100.r01.s008_output/n100.r01.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s008_output/n100.r01.s008.depth.txt" "n100.r01.s008_output/n100.r01.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s008_output/n100.r01.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s008_output/n100.r01.s008.reference.fas" | bcftools consensus -m "n100.r01.s008_output/n100.r01.s008.low_depth.tsv" tmp.vcf.gz > "n100.r01.s008_output/n100.r01.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:33 scheduler task 26fea548 (flow af45f049): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:33 scheduler task 26fea548 (flow af45f049): waiting for completion (try 0): started
2021/07/08 13:53:33  ->  n100.r01.s079.Main.out_file af45f049 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:33 n100.r01.s079.Main.out_file af45f049 n100/r01/n100.r01.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6579f8cfe3a0fcbc688355e9623b24f53b8a554bd7c4d58062b73da89fc7c5da
	sha256:af45f04974d77588558c0e33d6240915e051b7fe1063a6b1812a7ab216bd00fe
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26fea5489aabf13e45ff7b7616309e920a49695c7b7c68c97811155969f1ff16
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s079_output"
	    wget -O "n100.r01.s079_output/n100.r01.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s079_output/n100.r01.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s079_output/n100.r01.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s079_output/n100.r01.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s079_output/n100.r01.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s079_output/n100.r01.s079.reference.fas" "n100.r01.s079_output/n100.r01.s079.fq1.fastq" "n100.r01.s079_output/n100.r01.s079.fq2.fastq" | samtools view -bS - > "n100.r01.s079_output/n100.r01.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s079_output/n100.r01.s079.untrimmed.sorted.bam" "n100.r01.s079_output/n100.r01.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s079_output/n100.r01.s079.untrimmed.sorted.bam" -b "n100.r01.s079_output/n100.r01.s079.primers.bed" -p "n100.r01.s079_output/n100.r01.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" "n100.r01.s079_output/n100.r01.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s079_output/n100.r01.s079.reference.fas" "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" > "n100.r01.s079_output/n100.r01.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s079_output/n100.r01.s079.reference.fas" --call-indels "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" > "n100.r01.s079_output/n100.r01.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" > "n100.r01.s079_output/n100.r01.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s079_output/n100.r01.s079.depth.txt" "n100.r01.s079_output/n100.r01.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s079_output/n100.r01.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s079_output/n100.r01.s079.reference.fas" | bcftools consensus -m "n100.r01.s079_output/n100.r01.s079.low_depth.tsv" tmp.vcf.gz > "n100.r01.s079_output/n100.r01.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:33 scheduler task 7eaca4b3 (flow e0aa7377): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:33 scheduler task 7eaca4b3 (flow e0aa7377): waiting for completion (try 0): started
2021/07/08 13:53:33  ->  n100.r01.s006.Main.out_file e0aa7377 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:33 n100.r01.s006.Main.out_file e0aa7377 n100/r01/n100.r01.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4659bf0b262a871312ab87beef60fe6b48ab94a8788240244bc1d43d64b16dfe
	sha256:e0aa7377def19b0da714a535a6961d0776f5687db57324668606fe45f1cc8520
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7eaca4b30315e92ce44c87911939504ac0659150398a2de8a3abc4d021df583b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s006_output"
	    wget -O "n100.r01.s006_output/n100.r01.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s006_output/n100.r01.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s006_output/n100.r01.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s006_output/n100.r01.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s006_output/n100.r01.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s006_output/n100.r01.s006.reference.fas" "n100.r01.s006_output/n100.r01.s006.fq1.fastq" "n100.r01.s006_output/n100.r01.s006.fq2.fastq" | samtools view -bS - > "n100.r01.s006_output/n100.r01.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s006_output/n100.r01.s006.untrimmed.sorted.bam" "n100.r01.s006_output/n100.r01.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s006_output/n100.r01.s006.untrimmed.sorted.bam" -b "n100.r01.s006_output/n100.r01.s006.primers.bed" -p "n100.r01.s006_output/n100.r01.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" "n100.r01.s006_output/n100.r01.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s006_output/n100.r01.s006.reference.fas" "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" > "n100.r01.s006_output/n100.r01.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s006_output/n100.r01.s006.reference.fas" --call-indels "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" > "n100.r01.s006_output/n100.r01.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" > "n100.r01.s006_output/n100.r01.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s006_output/n100.r01.s006.depth.txt" "n100.r01.s006_output/n100.r01.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s006_output/n100.r01.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s006_output/n100.r01.s006.reference.fas" | bcftools consensus -m "n100.r01.s006_output/n100.r01.s006.low_depth.tsv" tmp.vcf.gz > "n100.r01.s006_output/n100.r01.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:33 scheduler task 63e80a14 (flow 2afbc5be): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:33 scheduler task 63e80a14 (flow 2afbc5be): waiting for completion (try 0): started
2021/07/08 13:53:33  ->  n100.r01.s007.Main.out_file 2afbc5be exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:33 n100.r01.s007.Main.out_file 2afbc5be n100/r01/n100.r01.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:46a7b17cd381646639d668fe952e71fe36f8c04ee7603d04fbc5287f5aa27739
	sha256:2afbc5bee142737bf123d30d370eb77c1c1f4bd1ece939e7273efb11ce4e7022
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/63e80a14b642c50ce3ca16601f4b366e435ae1742c053c10ba72f9a5676fdd03
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s007_output"
	    wget -O "n100.r01.s007_output/n100.r01.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s007_output/n100.r01.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s007_output/n100.r01.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s007_output/n100.r01.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s007_output/n100.r01.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s007_output/n100.r01.s007.reference.fas" "n100.r01.s007_output/n100.r01.s007.fq1.fastq" "n100.r01.s007_output/n100.r01.s007.fq2.fastq" | samtools view -bS - > "n100.r01.s007_output/n100.r01.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s007_output/n100.r01.s007.untrimmed.sorted.bam" "n100.r01.s007_output/n100.r01.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s007_output/n100.r01.s007.untrimmed.sorted.bam" -b "n100.r01.s007_output/n100.r01.s007.primers.bed" -p "n100.r01.s007_output/n100.r01.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" "n100.r01.s007_output/n100.r01.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s007_output/n100.r01.s007.reference.fas" "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" > "n100.r01.s007_output/n100.r01.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s007_output/n100.r01.s007.reference.fas" --call-indels "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" > "n100.r01.s007_output/n100.r01.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" > "n100.r01.s007_output/n100.r01.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s007_output/n100.r01.s007.depth.txt" "n100.r01.s007_output/n100.r01.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s007_output/n100.r01.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s007_output/n100.r01.s007.reference.fas" | bcftools consensus -m "n100.r01.s007_output/n100.r01.s007.low_depth.tsv" tmp.vcf.gz > "n100.r01.s007_output/n100.r01.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:33 scheduler task c982ccb7 (flow 0d88193c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:33 scheduler task c982ccb7 (flow 0d88193c): waiting for completion (try 0): started
2021/07/08 13:53:33  ->  n100.r01.s096.Main.out_file 0d88193c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:33 n100.r01.s096.Main.out_file 0d88193c n100/r01/n100.r01.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7579da3178563dab2f032ff5f5bfbca4dd308e489e21ebfeb4821784b8ff46fa
	sha256:0d88193cc6daa51a0c7a9fa20d3e3b4460ee5c237b8c1d2b8084d8217734cae1
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c982ccb7d7ccdb471e1a04dea796a8874dbae9dac5eb2dd82479eea5e09a8ea4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s096_output"
	    wget -O "n100.r01.s096_output/n100.r01.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s096_output/n100.r01.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s096_output/n100.r01.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s096_output/n100.r01.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s096_output/n100.r01.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s096_output/n100.r01.s096.reference.fas" "n100.r01.s096_output/n100.r01.s096.fq1.fastq" "n100.r01.s096_output/n100.r01.s096.fq2.fastq" | samtools view -bS - > "n100.r01.s096_output/n100.r01.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s096_output/n100.r01.s096.untrimmed.sorted.bam" "n100.r01.s096_output/n100.r01.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s096_output/n100.r01.s096.untrimmed.sorted.bam" -b "n100.r01.s096_output/n100.r01.s096.primers.bed" -p "n100.r01.s096_output/n100.r01.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" "n100.r01.s096_output/n100.r01.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s096_output/n100.r01.s096.reference.fas" "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" > "n100.r01.s096_output/n100.r01.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s096_output/n100.r01.s096.reference.fas" --call-indels "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" > "n100.r01.s096_output/n100.r01.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" > "n100.r01.s096_output/n100.r01.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s096_output/n100.r01.s096.depth.txt" "n100.r01.s096_output/n100.r01.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s096_output/n100.r01.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s096_output/n100.r01.s096.reference.fas" | bcftools consensus -m "n100.r01.s096_output/n100.r01.s096.low_depth.tsv" tmp.vcf.gz > "n100.r01.s096_output/n100.r01.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:33 scheduler task 814eb11a (flow e490893d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:33 scheduler task 814eb11a (flow e490893d): waiting for completion (try 0): started
2021/07/08 13:53:33  ->  n100.r01.s046.Main.out_file e490893d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:33 n100.r01.s046.Main.out_file e490893d n100/r01/n100.r01.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61e34e14d98e4973affa70c211fd285ce588cbc256a3ce768c7a39b71cf8d871
	sha256:e490893d3caf5795d3c984b0e04e33bebad5b8519e900bcd8d4fafa343737b0b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/814eb11a69eedcb6e9bdd3115b2d0a6835d2da2e2d620d67441b5901c4a6309d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s046_output"
	    wget -O "n100.r01.s046_output/n100.r01.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s046_output/n100.r01.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s046_output/n100.r01.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s046_output/n100.r01.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s046_output/n100.r01.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s046_output/n100.r01.s046.reference.fas" "n100.r01.s046_output/n100.r01.s046.fq1.fastq" "n100.r01.s046_output/n100.r01.s046.fq2.fastq" | samtools view -bS - > "n100.r01.s046_output/n100.r01.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s046_output/n100.r01.s046.untrimmed.sorted.bam" "n100.r01.s046_output/n100.r01.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s046_output/n100.r01.s046.untrimmed.sorted.bam" -b "n100.r01.s046_output/n100.r01.s046.primers.bed" -p "n100.r01.s046_output/n100.r01.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" "n100.r01.s046_output/n100.r01.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s046_output/n100.r01.s046.reference.fas" "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" > "n100.r01.s046_output/n100.r01.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s046_output/n100.r01.s046.reference.fas" --call-indels "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" > "n100.r01.s046_output/n100.r01.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" > "n100.r01.s046_output/n100.r01.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s046_output/n100.r01.s046.depth.txt" "n100.r01.s046_output/n100.r01.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s046_output/n100.r01.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s046_output/n100.r01.s046.reference.fas" | bcftools consensus -m "n100.r01.s046_output/n100.r01.s046.low_depth.tsv" tmp.vcf.gz > "n100.r01.s046_output/n100.r01.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:33 scheduler task 13a3982a (flow c9646626): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:33 scheduler task 13a3982a (flow c9646626): waiting for completion (try 0): started
2021/07/08 13:53:33  ->  n100.r01.s097.Main.out_file c9646626 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:33 n100.r01.s097.Main.out_file c9646626 n100/r01/n100.r01.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aded02f86abc40396dcab38ac5f0d29da8b72c000c2f3acfa145ee25751f33e0
	sha256:c96466262da811de9907b263a8e65e42dcd374877847d0b3a1aa87941f0c1bf6
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13a3982aff591f775ffe40da92e813476aedee83282e3a268a29bdb8eb78ef1b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s097_output"
	    wget -O "n100.r01.s097_output/n100.r01.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s097_output/n100.r01.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s097_output/n100.r01.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s097_output/n100.r01.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s097_output/n100.r01.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s097_output/n100.r01.s097.reference.fas" "n100.r01.s097_output/n100.r01.s097.fq1.fastq" "n100.r01.s097_output/n100.r01.s097.fq2.fastq" | samtools view -bS - > "n100.r01.s097_output/n100.r01.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s097_output/n100.r01.s097.untrimmed.sorted.bam" "n100.r01.s097_output/n100.r01.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s097_output/n100.r01.s097.untrimmed.sorted.bam" -b "n100.r01.s097_output/n100.r01.s097.primers.bed" -p "n100.r01.s097_output/n100.r01.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" "n100.r01.s097_output/n100.r01.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s097_output/n100.r01.s097.reference.fas" "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" > "n100.r01.s097_output/n100.r01.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s097_output/n100.r01.s097.reference.fas" --call-indels "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" > "n100.r01.s097_output/n100.r01.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" > "n100.r01.s097_output/n100.r01.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s097_output/n100.r01.s097.depth.txt" "n100.r01.s097_output/n100.r01.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s097_output/n100.r01.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s097_output/n100.r01.s097.reference.fas" | bcftools consensus -m "n100.r01.s097_output/n100.r01.s097.low_depth.tsv" tmp.vcf.gz > "n100.r01.s097_output/n100.r01.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task ea47d9ff (flow a882905c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task ea47d9ff (flow a882905c): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s047.Main.out_file a882905c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s047.Main.out_file a882905c n100/r01/n100.r01.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad7847a342248e89fbcf43a98fd2289ee3685942a39d8fb89320d754c4f325cf
	sha256:a882905ce53dcf0fef66c2a70c67fabac671743b0340b9e88f531992729862a0
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ea47d9ff210b3fe178a34e84879d2c6ff0470b5428755e30afadeb3dc62993e7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s047_output"
	    wget -O "n100.r01.s047_output/n100.r01.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s047_output/n100.r01.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s047_output/n100.r01.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s047_output/n100.r01.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s047_output/n100.r01.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s047_output/n100.r01.s047.reference.fas" "n100.r01.s047_output/n100.r01.s047.fq1.fastq" "n100.r01.s047_output/n100.r01.s047.fq2.fastq" | samtools view -bS - > "n100.r01.s047_output/n100.r01.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s047_output/n100.r01.s047.untrimmed.sorted.bam" "n100.r01.s047_output/n100.r01.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s047_output/n100.r01.s047.untrimmed.sorted.bam" -b "n100.r01.s047_output/n100.r01.s047.primers.bed" -p "n100.r01.s047_output/n100.r01.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" "n100.r01.s047_output/n100.r01.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s047_output/n100.r01.s047.reference.fas" "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" > "n100.r01.s047_output/n100.r01.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s047_output/n100.r01.s047.reference.fas" --call-indels "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" > "n100.r01.s047_output/n100.r01.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" > "n100.r01.s047_output/n100.r01.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s047_output/n100.r01.s047.depth.txt" "n100.r01.s047_output/n100.r01.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s047_output/n100.r01.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s047_output/n100.r01.s047.reference.fas" | bcftools consensus -m "n100.r01.s047_output/n100.r01.s047.low_depth.tsv" tmp.vcf.gz > "n100.r01.s047_output/n100.r01.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task 523904ca (flow 9b5d68c9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task 523904ca (flow 9b5d68c9): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s022.Main.out_file 9b5d68c9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s022.Main.out_file 9b5d68c9 n100/r01/n100.r01.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27ed55ec7f5a53f60870788d672d87d70e72aed46d15b0681f08b3bdb6950aef
	sha256:9b5d68c984c57ae9ce9bb676a11091b2f286a862b9555a828e1d236356c6b6cb
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/523904ca7d18e1ba002fe5f7dce47b85ac155cc7fa25eddd57c2d6af26450e97
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s022_output"
	    wget -O "n100.r01.s022_output/n100.r01.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s022_output/n100.r01.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s022_output/n100.r01.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s022_output/n100.r01.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s022_output/n100.r01.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s022_output/n100.r01.s022.reference.fas" "n100.r01.s022_output/n100.r01.s022.fq1.fastq" "n100.r01.s022_output/n100.r01.s022.fq2.fastq" | samtools view -bS - > "n100.r01.s022_output/n100.r01.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s022_output/n100.r01.s022.untrimmed.sorted.bam" "n100.r01.s022_output/n100.r01.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s022_output/n100.r01.s022.untrimmed.sorted.bam" -b "n100.r01.s022_output/n100.r01.s022.primers.bed" -p "n100.r01.s022_output/n100.r01.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" "n100.r01.s022_output/n100.r01.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s022_output/n100.r01.s022.reference.fas" "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" > "n100.r01.s022_output/n100.r01.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s022_output/n100.r01.s022.reference.fas" --call-indels "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" > "n100.r01.s022_output/n100.r01.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" > "n100.r01.s022_output/n100.r01.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s022_output/n100.r01.s022.depth.txt" "n100.r01.s022_output/n100.r01.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s022_output/n100.r01.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s022_output/n100.r01.s022.reference.fas" | bcftools consensus -m "n100.r01.s022_output/n100.r01.s022.low_depth.tsv" tmp.vcf.gz > "n100.r01.s022_output/n100.r01.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task 0d9fcc7c (flow a4ee45a6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task 0d9fcc7c (flow a4ee45a6): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s044.Main.out_file a4ee45a6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s044.Main.out_file a4ee45a6 n100/r01/n100.r01.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d33b19f4fa5091e0587cac81bcb881c3573d6fc7f715a5ed3e72ef314d2bbaea
	sha256:a4ee45a6f34f2eaa8df5fb95dec32794ea5c0022b57b3037c5a3d0ee1843e3fd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d9fcc7c5a8c791fdd68dc6876dd6d78b9e89724cfd5774916f3304da6251986
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s044_output"
	    wget -O "n100.r01.s044_output/n100.r01.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s044_output/n100.r01.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s044_output/n100.r01.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s044_output/n100.r01.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s044_output/n100.r01.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s044_output/n100.r01.s044.reference.fas" "n100.r01.s044_output/n100.r01.s044.fq1.fastq" "n100.r01.s044_output/n100.r01.s044.fq2.fastq" | samtools view -bS - > "n100.r01.s044_output/n100.r01.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s044_output/n100.r01.s044.untrimmed.sorted.bam" "n100.r01.s044_output/n100.r01.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s044_output/n100.r01.s044.untrimmed.sorted.bam" -b "n100.r01.s044_output/n100.r01.s044.primers.bed" -p "n100.r01.s044_output/n100.r01.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" "n100.r01.s044_output/n100.r01.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s044_output/n100.r01.s044.reference.fas" "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" > "n100.r01.s044_output/n100.r01.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s044_output/n100.r01.s044.reference.fas" --call-indels "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" > "n100.r01.s044_output/n100.r01.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" > "n100.r01.s044_output/n100.r01.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s044_output/n100.r01.s044.depth.txt" "n100.r01.s044_output/n100.r01.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s044_output/n100.r01.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s044_output/n100.r01.s044.reference.fas" | bcftools consensus -m "n100.r01.s044_output/n100.r01.s044.low_depth.tsv" tmp.vcf.gz > "n100.r01.s044_output/n100.r01.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task 47b72df9 (flow ada3a42a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task 47b72df9 (flow ada3a42a): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s089.Main.out_file ada3a42a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s089.Main.out_file ada3a42a n100/r01/n100.r01.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8265a0bf96fa613032d3eea711dec96007c25773bd9abeb2da9c417b04c39929
	sha256:ada3a42a8f8975102dfdd2eecbd3c8acf0b7995a5170cc04acd6388324f34a0b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/47b72df997aea04d0aab8e80c6741aacc802a787e6540298b363382d9c4ae52c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s089_output"
	    wget -O "n100.r01.s089_output/n100.r01.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s089_output/n100.r01.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s089_output/n100.r01.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s089_output/n100.r01.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s089_output/n100.r01.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s089_output/n100.r01.s089.reference.fas" "n100.r01.s089_output/n100.r01.s089.fq1.fastq" "n100.r01.s089_output/n100.r01.s089.fq2.fastq" | samtools view -bS - > "n100.r01.s089_output/n100.r01.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s089_output/n100.r01.s089.untrimmed.sorted.bam" "n100.r01.s089_output/n100.r01.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s089_output/n100.r01.s089.untrimmed.sorted.bam" -b "n100.r01.s089_output/n100.r01.s089.primers.bed" -p "n100.r01.s089_output/n100.r01.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" "n100.r01.s089_output/n100.r01.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s089_output/n100.r01.s089.reference.fas" "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" > "n100.r01.s089_output/n100.r01.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s089_output/n100.r01.s089.reference.fas" --call-indels "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" > "n100.r01.s089_output/n100.r01.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" > "n100.r01.s089_output/n100.r01.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s089_output/n100.r01.s089.depth.txt" "n100.r01.s089_output/n100.r01.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s089_output/n100.r01.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s089_output/n100.r01.s089.reference.fas" | bcftools consensus -m "n100.r01.s089_output/n100.r01.s089.low_depth.tsv" tmp.vcf.gz > "n100.r01.s089_output/n100.r01.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task a5b4a8c4 (flow 64ed8f81): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task a5b4a8c4 (flow 64ed8f81): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s010.Main.out_file 64ed8f81 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s010.Main.out_file 64ed8f81 n100/r01/n100.r01.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df983b5ecfe0300e9c0674f3906134cb39d194923803929912040ce50bcf63c0
	sha256:64ed8f8119e61092b03cf31e15e66b30df362c24c2eff5cec9d499736c7da700
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a5b4a8c49a022a43b205f4a9e3a0202202f079f5611a3413e4d41e42c025719f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s010_output"
	    wget -O "n100.r01.s010_output/n100.r01.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s010_output/n100.r01.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s010_output/n100.r01.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s010_output/n100.r01.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s010_output/n100.r01.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s010_output/n100.r01.s010.reference.fas" "n100.r01.s010_output/n100.r01.s010.fq1.fastq" "n100.r01.s010_output/n100.r01.s010.fq2.fastq" | samtools view -bS - > "n100.r01.s010_output/n100.r01.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s010_output/n100.r01.s010.untrimmed.sorted.bam" "n100.r01.s010_output/n100.r01.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s010_output/n100.r01.s010.untrimmed.sorted.bam" -b "n100.r01.s010_output/n100.r01.s010.primers.bed" -p "n100.r01.s010_output/n100.r01.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" "n100.r01.s010_output/n100.r01.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s010_output/n100.r01.s010.reference.fas" "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" > "n100.r01.s010_output/n100.r01.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s010_output/n100.r01.s010.reference.fas" --call-indels "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" > "n100.r01.s010_output/n100.r01.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" > "n100.r01.s010_output/n100.r01.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s010_output/n100.r01.s010.depth.txt" "n100.r01.s010_output/n100.r01.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s010_output/n100.r01.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s010_output/n100.r01.s010.reference.fas" | bcftools consensus -m "n100.r01.s010_output/n100.r01.s010.low_depth.tsv" tmp.vcf.gz > "n100.r01.s010_output/n100.r01.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task 8b2fb039 (flow d0853815): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task 8b2fb039 (flow d0853815): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s020.Main.out_file d0853815 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s020.Main.out_file d0853815 n100/r01/n100.r01.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:913984424e0bbcb880e088617fbec9847675daa0e8bf878b6afce428e2c98577
	sha256:d085381504d2e9c4d2543b70c428760eddcad28133b98aa7ce9edee959d99952
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b2fb03995e867e36acc6b71aa009cdca25e636c4fecb868f86aaf0f50c7919d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s020_output"
	    wget -O "n100.r01.s020_output/n100.r01.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s020_output/n100.r01.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s020_output/n100.r01.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s020_output/n100.r01.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s020_output/n100.r01.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s020_output/n100.r01.s020.reference.fas" "n100.r01.s020_output/n100.r01.s020.fq1.fastq" "n100.r01.s020_output/n100.r01.s020.fq2.fastq" | samtools view -bS - > "n100.r01.s020_output/n100.r01.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s020_output/n100.r01.s020.untrimmed.sorted.bam" "n100.r01.s020_output/n100.r01.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s020_output/n100.r01.s020.untrimmed.sorted.bam" -b "n100.r01.s020_output/n100.r01.s020.primers.bed" -p "n100.r01.s020_output/n100.r01.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" "n100.r01.s020_output/n100.r01.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s020_output/n100.r01.s020.reference.fas" "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" > "n100.r01.s020_output/n100.r01.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s020_output/n100.r01.s020.reference.fas" --call-indels "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" > "n100.r01.s020_output/n100.r01.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" > "n100.r01.s020_output/n100.r01.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s020_output/n100.r01.s020.depth.txt" "n100.r01.s020_output/n100.r01.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s020_output/n100.r01.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s020_output/n100.r01.s020.reference.fas" | bcftools consensus -m "n100.r01.s020_output/n100.r01.s020.low_depth.tsv" tmp.vcf.gz > "n100.r01.s020_output/n100.r01.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:34 scheduler task cc686dc9 (flow 9eb55c09): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:34 scheduler task cc686dc9 (flow 9eb55c09): waiting for completion (try 0): started
2021/07/08 13:53:34  ->  n100.r01.s050.Main.out_file 9eb55c09 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:34 n100.r01.s050.Main.out_file 9eb55c09 n100/r01/n100.r01.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b64640ac315bf45758361f6269e9185fc811cb8d651624356d4653d35204c13c
	sha256:9eb55c09924badb699c1527296e3ef93c437ac78b2a6026e916fecf34b2ec672
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc686dc9f07f2c8f7ae615e74893e9a9c9618e65eaa07fc340fd547d93c44c8b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s050_output"
	    wget -O "n100.r01.s050_output/n100.r01.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s050_output/n100.r01.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s050_output/n100.r01.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s050_output/n100.r01.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s050_output/n100.r01.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s050_output/n100.r01.s050.reference.fas" "n100.r01.s050_output/n100.r01.s050.fq1.fastq" "n100.r01.s050_output/n100.r01.s050.fq2.fastq" | samtools view -bS - > "n100.r01.s050_output/n100.r01.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s050_output/n100.r01.s050.untrimmed.sorted.bam" "n100.r01.s050_output/n100.r01.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s050_output/n100.r01.s050.untrimmed.sorted.bam" -b "n100.r01.s050_output/n100.r01.s050.primers.bed" -p "n100.r01.s050_output/n100.r01.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" "n100.r01.s050_output/n100.r01.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s050_output/n100.r01.s050.reference.fas" "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" > "n100.r01.s050_output/n100.r01.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s050_output/n100.r01.s050.reference.fas" --call-indels "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" > "n100.r01.s050_output/n100.r01.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" > "n100.r01.s050_output/n100.r01.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s050_output/n100.r01.s050.depth.txt" "n100.r01.s050_output/n100.r01.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s050_output/n100.r01.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s050_output/n100.r01.s050.reference.fas" | bcftools consensus -m "n100.r01.s050_output/n100.r01.s050.low_depth.tsv" tmp.vcf.gz > "n100.r01.s050_output/n100.r01.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task d58dd643 (flow 6d1f26d4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task d58dd643 (flow 6d1f26d4): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s003.Main.out_file 6d1f26d4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s003.Main.out_file 6d1f26d4 n100/r01/n100.r01.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd039f51b6b34dd203b0d99c58576750d64f912378e5bc360ce47dc45af25a00
	sha256:6d1f26d4b9d3bfbba3c3a16d41321aaa7049e14135c230f4b25a78ad0c48f763
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d58dd643a52b457746717bc9ebafb9115faa404634f49466b319a05710e04198
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s003_output"
	    wget -O "n100.r01.s003_output/n100.r01.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s003_output/n100.r01.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s003_output/n100.r01.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s003_output/n100.r01.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s003_output/n100.r01.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s003_output/n100.r01.s003.reference.fas" "n100.r01.s003_output/n100.r01.s003.fq1.fastq" "n100.r01.s003_output/n100.r01.s003.fq2.fastq" | samtools view -bS - > "n100.r01.s003_output/n100.r01.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s003_output/n100.r01.s003.untrimmed.sorted.bam" "n100.r01.s003_output/n100.r01.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s003_output/n100.r01.s003.untrimmed.sorted.bam" -b "n100.r01.s003_output/n100.r01.s003.primers.bed" -p "n100.r01.s003_output/n100.r01.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" "n100.r01.s003_output/n100.r01.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s003_output/n100.r01.s003.reference.fas" "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" > "n100.r01.s003_output/n100.r01.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s003_output/n100.r01.s003.reference.fas" --call-indels "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" > "n100.r01.s003_output/n100.r01.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" > "n100.r01.s003_output/n100.r01.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s003_output/n100.r01.s003.depth.txt" "n100.r01.s003_output/n100.r01.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s003_output/n100.r01.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s003_output/n100.r01.s003.reference.fas" | bcftools consensus -m "n100.r01.s003_output/n100.r01.s003.low_depth.tsv" tmp.vcf.gz > "n100.r01.s003_output/n100.r01.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task bfa03bd4 (flow 75e88589): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task bfa03bd4 (flow 75e88589): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s081.Main.out_file 75e88589 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s081.Main.out_file 75e88589 n100/r01/n100.r01.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d5a5ff8844d31530346f51811fd3686b930cd035c5e3727c5c7f459e10fc5967
	sha256:75e88589dec2d078cbb5a109a3d60d28fcac6799c7c79be8095ad86b16fb2899
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bfa03bd42c17c2f25ccd39f0db81b2fc3716689b418e6112b0583e04303eda60
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s081_output"
	    wget -O "n100.r01.s081_output/n100.r01.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s081_output/n100.r01.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s081_output/n100.r01.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s081_output/n100.r01.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s081_output/n100.r01.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s081_output/n100.r01.s081.reference.fas" "n100.r01.s081_output/n100.r01.s081.fq1.fastq" "n100.r01.s081_output/n100.r01.s081.fq2.fastq" | samtools view -bS - > "n100.r01.s081_output/n100.r01.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s081_output/n100.r01.s081.untrimmed.sorted.bam" "n100.r01.s081_output/n100.r01.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s081_output/n100.r01.s081.untrimmed.sorted.bam" -b "n100.r01.s081_output/n100.r01.s081.primers.bed" -p "n100.r01.s081_output/n100.r01.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" "n100.r01.s081_output/n100.r01.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s081_output/n100.r01.s081.reference.fas" "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" > "n100.r01.s081_output/n100.r01.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s081_output/n100.r01.s081.reference.fas" --call-indels "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" > "n100.r01.s081_output/n100.r01.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" > "n100.r01.s081_output/n100.r01.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s081_output/n100.r01.s081.depth.txt" "n100.r01.s081_output/n100.r01.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s081_output/n100.r01.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s081_output/n100.r01.s081.reference.fas" | bcftools consensus -m "n100.r01.s081_output/n100.r01.s081.low_depth.tsv" tmp.vcf.gz > "n100.r01.s081_output/n100.r01.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task 9ca279ac (flow 8a6b6586): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task 9ca279ac (flow 8a6b6586): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s063.Main.out_file 8a6b6586 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s063.Main.out_file 8a6b6586 n100/r01/n100.r01.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:352de1cd46b0a4d301dcdca58d4c418d49b87697c8721eea5586faf89ae4330c
	sha256:8a6b658669ad98ea334e7116e8015a92234e942b06652cfd7117df6e6db72d83
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9ca279ac8ac4af8c3581671e1f16d313b9087f042f13161d0e660ca566262a2f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s063_output"
	    wget -O "n100.r01.s063_output/n100.r01.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s063_output/n100.r01.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s063_output/n100.r01.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s063_output/n100.r01.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s063_output/n100.r01.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s063_output/n100.r01.s063.reference.fas" "n100.r01.s063_output/n100.r01.s063.fq1.fastq" "n100.r01.s063_output/n100.r01.s063.fq2.fastq" | samtools view -bS - > "n100.r01.s063_output/n100.r01.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s063_output/n100.r01.s063.untrimmed.sorted.bam" "n100.r01.s063_output/n100.r01.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s063_output/n100.r01.s063.untrimmed.sorted.bam" -b "n100.r01.s063_output/n100.r01.s063.primers.bed" -p "n100.r01.s063_output/n100.r01.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" "n100.r01.s063_output/n100.r01.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s063_output/n100.r01.s063.reference.fas" "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" > "n100.r01.s063_output/n100.r01.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s063_output/n100.r01.s063.reference.fas" --call-indels "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" > "n100.r01.s063_output/n100.r01.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" > "n100.r01.s063_output/n100.r01.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s063_output/n100.r01.s063.depth.txt" "n100.r01.s063_output/n100.r01.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s063_output/n100.r01.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s063_output/n100.r01.s063.reference.fas" | bcftools consensus -m "n100.r01.s063_output/n100.r01.s063.low_depth.tsv" tmp.vcf.gz > "n100.r01.s063_output/n100.r01.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task 16911b07 (flow 1b870f15): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task 16911b07 (flow 1b870f15): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s085.Main.out_file 1b870f15 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s085.Main.out_file 1b870f15 n100/r01/n100.r01.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e86b88e915f072128c3b7403fcf7bbaa2eaa3c752b56145739c130bee3b3897c
	sha256:1b870f15f753999c7a3d1ffe2deb8e30a6a7804ea68b12d9ef0114182f10c31a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/16911b0765a630b720887d7eaeae4a67677e39270a7067e5b26016d1f60caa35
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s085_output"
	    wget -O "n100.r01.s085_output/n100.r01.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s085_output/n100.r01.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s085_output/n100.r01.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s085_output/n100.r01.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s085_output/n100.r01.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s085_output/n100.r01.s085.reference.fas" "n100.r01.s085_output/n100.r01.s085.fq1.fastq" "n100.r01.s085_output/n100.r01.s085.fq2.fastq" | samtools view -bS - > "n100.r01.s085_output/n100.r01.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s085_output/n100.r01.s085.untrimmed.sorted.bam" "n100.r01.s085_output/n100.r01.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s085_output/n100.r01.s085.untrimmed.sorted.bam" -b "n100.r01.s085_output/n100.r01.s085.primers.bed" -p "n100.r01.s085_output/n100.r01.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" "n100.r01.s085_output/n100.r01.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s085_output/n100.r01.s085.reference.fas" "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" > "n100.r01.s085_output/n100.r01.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s085_output/n100.r01.s085.reference.fas" --call-indels "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" > "n100.r01.s085_output/n100.r01.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" > "n100.r01.s085_output/n100.r01.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s085_output/n100.r01.s085.depth.txt" "n100.r01.s085_output/n100.r01.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s085_output/n100.r01.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s085_output/n100.r01.s085.reference.fas" | bcftools consensus -m "n100.r01.s085_output/n100.r01.s085.low_depth.tsv" tmp.vcf.gz > "n100.r01.s085_output/n100.r01.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task 3e0df658 (flow da15cf49): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task 3e0df658 (flow da15cf49): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s021.Main.out_file da15cf49 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s021.Main.out_file da15cf49 n100/r01/n100.r01.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d7578da8aaa3716d711d62221011f5fbc187f1a761bbeab10daa1dcd39128b26
	sha256:da15cf492ec64c0d5d4b1a6c33dbc52706a3332dd275172f3a168789facfd865
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3e0df658b7f466a5fe0ff341bad140487f9445784ad3fbe44b54258c86fa0c1d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s021_output"
	    wget -O "n100.r01.s021_output/n100.r01.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s021_output/n100.r01.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s021_output/n100.r01.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s021_output/n100.r01.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s021_output/n100.r01.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s021_output/n100.r01.s021.reference.fas" "n100.r01.s021_output/n100.r01.s021.fq1.fastq" "n100.r01.s021_output/n100.r01.s021.fq2.fastq" | samtools view -bS - > "n100.r01.s021_output/n100.r01.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s021_output/n100.r01.s021.untrimmed.sorted.bam" "n100.r01.s021_output/n100.r01.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s021_output/n100.r01.s021.untrimmed.sorted.bam" -b "n100.r01.s021_output/n100.r01.s021.primers.bed" -p "n100.r01.s021_output/n100.r01.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" "n100.r01.s021_output/n100.r01.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s021_output/n100.r01.s021.reference.fas" "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" > "n100.r01.s021_output/n100.r01.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s021_output/n100.r01.s021.reference.fas" --call-indels "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" > "n100.r01.s021_output/n100.r01.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" > "n100.r01.s021_output/n100.r01.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s021_output/n100.r01.s021.depth.txt" "n100.r01.s021_output/n100.r01.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s021_output/n100.r01.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s021_output/n100.r01.s021.reference.fas" | bcftools consensus -m "n100.r01.s021_output/n100.r01.s021.low_depth.tsv" tmp.vcf.gz > "n100.r01.s021_output/n100.r01.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task 4d45e98c (flow 3fec048b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task 4d45e98c (flow 3fec048b): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s092.Main.out_file 3fec048b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s092.Main.out_file 3fec048b n100/r01/n100.r01.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aed0e4582c37d5b035b96eca90baf5064f1d78170d254453c77a146c0f04e53d
	sha256:3fec048b604e8fab0c29fad89f0694673a2be9f3e41802c4c4699e9aa619f9fc
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4d45e98c5f59b6b09cbaaae4fb02dbcdb323d663bc1162de1c6ff756693cf7ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s092_output"
	    wget -O "n100.r01.s092_output/n100.r01.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s092_output/n100.r01.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s092_output/n100.r01.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s092_output/n100.r01.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s092_output/n100.r01.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s092_output/n100.r01.s092.reference.fas" "n100.r01.s092_output/n100.r01.s092.fq1.fastq" "n100.r01.s092_output/n100.r01.s092.fq2.fastq" | samtools view -bS - > "n100.r01.s092_output/n100.r01.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s092_output/n100.r01.s092.untrimmed.sorted.bam" "n100.r01.s092_output/n100.r01.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s092_output/n100.r01.s092.untrimmed.sorted.bam" -b "n100.r01.s092_output/n100.r01.s092.primers.bed" -p "n100.r01.s092_output/n100.r01.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" "n100.r01.s092_output/n100.r01.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s092_output/n100.r01.s092.reference.fas" "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" > "n100.r01.s092_output/n100.r01.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s092_output/n100.r01.s092.reference.fas" --call-indels "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" > "n100.r01.s092_output/n100.r01.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" > "n100.r01.s092_output/n100.r01.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s092_output/n100.r01.s092.depth.txt" "n100.r01.s092_output/n100.r01.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s092_output/n100.r01.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s092_output/n100.r01.s092.reference.fas" | bcftools consensus -m "n100.r01.s092_output/n100.r01.s092.low_depth.tsv" tmp.vcf.gz > "n100.r01.s092_output/n100.r01.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task e480ee50 (flow 7d31354e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task e480ee50 (flow 7d31354e): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s091.Main.out_file 7d31354e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s091.Main.out_file 7d31354e n100/r01/n100.r01.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:29582faedfa2d1889947920ae562a90bd2feb833c4b6a132c18adc524b36a248
	sha256:7d31354e979c72eddf1089ea121c9c51e641da6425f9581c265cd61e8e1801de
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e480ee506513f58159785d0e5dbf12402a2365b7964a8e3ef0d8f10d5f9673e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s091_output"
	    wget -O "n100.r01.s091_output/n100.r01.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s091_output/n100.r01.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s091_output/n100.r01.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s091_output/n100.r01.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s091_output/n100.r01.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s091_output/n100.r01.s091.reference.fas" "n100.r01.s091_output/n100.r01.s091.fq1.fastq" "n100.r01.s091_output/n100.r01.s091.fq2.fastq" | samtools view -bS - > "n100.r01.s091_output/n100.r01.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s091_output/n100.r01.s091.untrimmed.sorted.bam" "n100.r01.s091_output/n100.r01.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s091_output/n100.r01.s091.untrimmed.sorted.bam" -b "n100.r01.s091_output/n100.r01.s091.primers.bed" -p "n100.r01.s091_output/n100.r01.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" "n100.r01.s091_output/n100.r01.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s091_output/n100.r01.s091.reference.fas" "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" > "n100.r01.s091_output/n100.r01.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s091_output/n100.r01.s091.reference.fas" --call-indels "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" > "n100.r01.s091_output/n100.r01.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" > "n100.r01.s091_output/n100.r01.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s091_output/n100.r01.s091.depth.txt" "n100.r01.s091_output/n100.r01.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s091_output/n100.r01.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s091_output/n100.r01.s091.reference.fas" | bcftools consensus -m "n100.r01.s091_output/n100.r01.s091.low_depth.tsv" tmp.vcf.gz > "n100.r01.s091_output/n100.r01.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:35 scheduler task 4a2be2fe (flow a35830e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:35 scheduler task 4a2be2fe (flow a35830e3): waiting for completion (try 0): started
2021/07/08 13:53:35  ->  n100.r01.s067.Main.out_file a35830e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:35 n100.r01.s067.Main.out_file a35830e3 n100/r01/n100.r01.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d31b14b76ec76b4c7fb17927d1dcf21e7002383166555d9cde4822ebf1708016
	sha256:a35830e3dc0696fec9c3c875840adee118d1dd830fd9049125e5c4c334390143
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4a2be2fed247b9a4bbc8bb84171a8c7e643b15af987974652c71815cb0d5313d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s067_output"
	    wget -O "n100.r01.s067_output/n100.r01.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s067_output/n100.r01.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s067_output/n100.r01.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s067_output/n100.r01.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s067_output/n100.r01.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s067_output/n100.r01.s067.reference.fas" "n100.r01.s067_output/n100.r01.s067.fq1.fastq" "n100.r01.s067_output/n100.r01.s067.fq2.fastq" | samtools view -bS - > "n100.r01.s067_output/n100.r01.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s067_output/n100.r01.s067.untrimmed.sorted.bam" "n100.r01.s067_output/n100.r01.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s067_output/n100.r01.s067.untrimmed.sorted.bam" -b "n100.r01.s067_output/n100.r01.s067.primers.bed" -p "n100.r01.s067_output/n100.r01.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" "n100.r01.s067_output/n100.r01.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s067_output/n100.r01.s067.reference.fas" "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" > "n100.r01.s067_output/n100.r01.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s067_output/n100.r01.s067.reference.fas" --call-indels "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" > "n100.r01.s067_output/n100.r01.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" > "n100.r01.s067_output/n100.r01.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s067_output/n100.r01.s067.depth.txt" "n100.r01.s067_output/n100.r01.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s067_output/n100.r01.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s067_output/n100.r01.s067.reference.fas" | bcftools consensus -m "n100.r01.s067_output/n100.r01.s067.low_depth.tsv" tmp.vcf.gz > "n100.r01.s067_output/n100.r01.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task 8b1f0155 (flow 99489b6e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task 8b1f0155 (flow 99489b6e): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s056.Main.out_file 99489b6e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s056.Main.out_file 99489b6e n100/r01/n100.r01.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:91416d80807ac182c91c669614819a1dbd49a185295df96e6a11eb4f8b06c02b
	sha256:99489b6ef482b167906c2b168a53be0914e69de0142ba5c4cb9fa493ff9e5fbb
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b1f0155a29b077608185fd804a48b57acfc133c5b0040ee11093ab6c8aeb6c0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s056_output"
	    wget -O "n100.r01.s056_output/n100.r01.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s056_output/n100.r01.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s056_output/n100.r01.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s056_output/n100.r01.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s056_output/n100.r01.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s056_output/n100.r01.s056.reference.fas" "n100.r01.s056_output/n100.r01.s056.fq1.fastq" "n100.r01.s056_output/n100.r01.s056.fq2.fastq" | samtools view -bS - > "n100.r01.s056_output/n100.r01.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s056_output/n100.r01.s056.untrimmed.sorted.bam" "n100.r01.s056_output/n100.r01.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s056_output/n100.r01.s056.untrimmed.sorted.bam" -b "n100.r01.s056_output/n100.r01.s056.primers.bed" -p "n100.r01.s056_output/n100.r01.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" "n100.r01.s056_output/n100.r01.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s056_output/n100.r01.s056.reference.fas" "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" > "n100.r01.s056_output/n100.r01.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s056_output/n100.r01.s056.reference.fas" --call-indels "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" > "n100.r01.s056_output/n100.r01.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" > "n100.r01.s056_output/n100.r01.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s056_output/n100.r01.s056.depth.txt" "n100.r01.s056_output/n100.r01.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s056_output/n100.r01.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s056_output/n100.r01.s056.reference.fas" | bcftools consensus -m "n100.r01.s056_output/n100.r01.s056.low_depth.tsv" tmp.vcf.gz > "n100.r01.s056_output/n100.r01.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task 0fea5d54 (flow 44ac81a2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task 0fea5d54 (flow 44ac81a2): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s048.Main.out_file 44ac81a2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s048.Main.out_file 44ac81a2 n100/r01/n100.r01.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb801bdd18ccd7fa19e9bf187e77e7cca95c7790c78c4fbb8a1ac755b5d79d58
	sha256:44ac81a2da38631620586466c560ef181a480523516d1a767909bb48d87a909e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0fea5d547e5a594ee4c47cba27ade612de9563b35544dde4ea7a7042ed02b06b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s048_output"
	    wget -O "n100.r01.s048_output/n100.r01.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s048_output/n100.r01.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s048_output/n100.r01.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s048_output/n100.r01.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s048_output/n100.r01.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s048_output/n100.r01.s048.reference.fas" "n100.r01.s048_output/n100.r01.s048.fq1.fastq" "n100.r01.s048_output/n100.r01.s048.fq2.fastq" | samtools view -bS - > "n100.r01.s048_output/n100.r01.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s048_output/n100.r01.s048.untrimmed.sorted.bam" "n100.r01.s048_output/n100.r01.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s048_output/n100.r01.s048.untrimmed.sorted.bam" -b "n100.r01.s048_output/n100.r01.s048.primers.bed" -p "n100.r01.s048_output/n100.r01.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" "n100.r01.s048_output/n100.r01.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s048_output/n100.r01.s048.reference.fas" "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" > "n100.r01.s048_output/n100.r01.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s048_output/n100.r01.s048.reference.fas" --call-indels "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" > "n100.r01.s048_output/n100.r01.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" > "n100.r01.s048_output/n100.r01.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s048_output/n100.r01.s048.depth.txt" "n100.r01.s048_output/n100.r01.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s048_output/n100.r01.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s048_output/n100.r01.s048.reference.fas" | bcftools consensus -m "n100.r01.s048_output/n100.r01.s048.low_depth.tsv" tmp.vcf.gz > "n100.r01.s048_output/n100.r01.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task 97818aad (flow 3ce93691): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task 97818aad (flow 3ce93691): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s023.Main.out_file 3ce93691 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s023.Main.out_file 3ce93691 n100/r01/n100.r01.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:15d9c03d568268cbf2726f5815a194c5f30db4d464e7296e67a7ef8bf9fbc570
	sha256:3ce93691c528e5e17f5001b4b60d62e778408d31acb58a4326cece4982694e81
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97818aad53ba1d3d3561e156c7a876523d125f609d21448f57039d5fd829033c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s023_output"
	    wget -O "n100.r01.s023_output/n100.r01.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s023_output/n100.r01.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s023_output/n100.r01.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s023_output/n100.r01.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s023_output/n100.r01.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s023_output/n100.r01.s023.reference.fas" "n100.r01.s023_output/n100.r01.s023.fq1.fastq" "n100.r01.s023_output/n100.r01.s023.fq2.fastq" | samtools view -bS - > "n100.r01.s023_output/n100.r01.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s023_output/n100.r01.s023.untrimmed.sorted.bam" "n100.r01.s023_output/n100.r01.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s023_output/n100.r01.s023.untrimmed.sorted.bam" -b "n100.r01.s023_output/n100.r01.s023.primers.bed" -p "n100.r01.s023_output/n100.r01.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" "n100.r01.s023_output/n100.r01.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s023_output/n100.r01.s023.reference.fas" "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" > "n100.r01.s023_output/n100.r01.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s023_output/n100.r01.s023.reference.fas" --call-indels "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" > "n100.r01.s023_output/n100.r01.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" > "n100.r01.s023_output/n100.r01.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s023_output/n100.r01.s023.depth.txt" "n100.r01.s023_output/n100.r01.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s023_output/n100.r01.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s023_output/n100.r01.s023.reference.fas" | bcftools consensus -m "n100.r01.s023_output/n100.r01.s023.low_depth.tsv" tmp.vcf.gz > "n100.r01.s023_output/n100.r01.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task bc719b94 (flow 1fcc6ec2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task bc719b94 (flow 1fcc6ec2): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s100.Main.out_file 1fcc6ec2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s100.Main.out_file 1fcc6ec2 n100/r01/n100.r01.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3c8bde4e7845fd0f8f717ce2d9fe6042426d75f781815eac30e9b0c79185563b
	sha256:1fcc6ec2a935043e4e6d1ef6fc1ba2b888d658b145fe88b96200f908ff4505f2
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc719b945c20304f1e8b9dbb5f6f09692d480b9a9442bf4f06ef95407a21a350
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s100_output"
	    wget -O "n100.r01.s100_output/n100.r01.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s100_output/n100.r01.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s100_output/n100.r01.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s100_output/n100.r01.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s100_output/n100.r01.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s100_output/n100.r01.s100.reference.fas" "n100.r01.s100_output/n100.r01.s100.fq1.fastq" "n100.r01.s100_output/n100.r01.s100.fq2.fastq" | samtools view -bS - > "n100.r01.s100_output/n100.r01.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s100_output/n100.r01.s100.untrimmed.sorted.bam" "n100.r01.s100_output/n100.r01.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s100_output/n100.r01.s100.untrimmed.sorted.bam" -b "n100.r01.s100_output/n100.r01.s100.primers.bed" -p "n100.r01.s100_output/n100.r01.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" "n100.r01.s100_output/n100.r01.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s100_output/n100.r01.s100.reference.fas" "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" > "n100.r01.s100_output/n100.r01.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s100_output/n100.r01.s100.reference.fas" --call-indels "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" > "n100.r01.s100_output/n100.r01.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" > "n100.r01.s100_output/n100.r01.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s100_output/n100.r01.s100.depth.txt" "n100.r01.s100_output/n100.r01.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s100_output/n100.r01.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s100_output/n100.r01.s100.reference.fas" | bcftools consensus -m "n100.r01.s100_output/n100.r01.s100.low_depth.tsv" tmp.vcf.gz > "n100.r01.s100_output/n100.r01.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task 5ea5dcef (flow b6aba721): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task 5ea5dcef (flow b6aba721): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s053.Main.out_file b6aba721 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s053.Main.out_file b6aba721 n100/r01/n100.r01.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:efe5decefcfd84c560930450cf0f3799cf3bd57cd06521a7da21c23c1c4e5881
	sha256:b6aba7212c4cee96acf4c26e1107f9762f5ae2c6dad260cc5bfe73ded2a72fae
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ea5dcefa10f7aa27a337825be034837e504ac19c5cd7549a4a2d55de1143925
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s053_output"
	    wget -O "n100.r01.s053_output/n100.r01.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s053_output/n100.r01.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s053_output/n100.r01.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s053_output/n100.r01.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s053_output/n100.r01.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s053_output/n100.r01.s053.reference.fas" "n100.r01.s053_output/n100.r01.s053.fq1.fastq" "n100.r01.s053_output/n100.r01.s053.fq2.fastq" | samtools view -bS - > "n100.r01.s053_output/n100.r01.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s053_output/n100.r01.s053.untrimmed.sorted.bam" "n100.r01.s053_output/n100.r01.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s053_output/n100.r01.s053.untrimmed.sorted.bam" -b "n100.r01.s053_output/n100.r01.s053.primers.bed" -p "n100.r01.s053_output/n100.r01.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" "n100.r01.s053_output/n100.r01.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s053_output/n100.r01.s053.reference.fas" "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" > "n100.r01.s053_output/n100.r01.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s053_output/n100.r01.s053.reference.fas" --call-indels "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" > "n100.r01.s053_output/n100.r01.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" > "n100.r01.s053_output/n100.r01.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s053_output/n100.r01.s053.depth.txt" "n100.r01.s053_output/n100.r01.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s053_output/n100.r01.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s053_output/n100.r01.s053.reference.fas" | bcftools consensus -m "n100.r01.s053_output/n100.r01.s053.low_depth.tsv" tmp.vcf.gz > "n100.r01.s053_output/n100.r01.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task f0d0ce5d (flow 15203b14): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task f0d0ce5d (flow 15203b14): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s034.Main.out_file 15203b14 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s034.Main.out_file 15203b14 n100/r01/n100.r01.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fced2da0e060231814b8d5655b96769853e72aa665cb6de61b6316a99bafd4d
	sha256:15203b14aba4338992bd0b900024884e572339d1f1aa6ec3301b19de0782a8cd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0d0ce5d6208413dbc89bb26573be3ea3ef28e8eeb384e351b196504a5ac698e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s034_output"
	    wget -O "n100.r01.s034_output/n100.r01.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s034_output/n100.r01.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s034_output/n100.r01.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s034_output/n100.r01.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s034_output/n100.r01.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s034_output/n100.r01.s034.reference.fas" "n100.r01.s034_output/n100.r01.s034.fq1.fastq" "n100.r01.s034_output/n100.r01.s034.fq2.fastq" | samtools view -bS - > "n100.r01.s034_output/n100.r01.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s034_output/n100.r01.s034.untrimmed.sorted.bam" "n100.r01.s034_output/n100.r01.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s034_output/n100.r01.s034.untrimmed.sorted.bam" -b "n100.r01.s034_output/n100.r01.s034.primers.bed" -p "n100.r01.s034_output/n100.r01.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" "n100.r01.s034_output/n100.r01.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s034_output/n100.r01.s034.reference.fas" "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" > "n100.r01.s034_output/n100.r01.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s034_output/n100.r01.s034.reference.fas" --call-indels "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" > "n100.r01.s034_output/n100.r01.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" > "n100.r01.s034_output/n100.r01.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s034_output/n100.r01.s034.depth.txt" "n100.r01.s034_output/n100.r01.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s034_output/n100.r01.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s034_output/n100.r01.s034.reference.fas" | bcftools consensus -m "n100.r01.s034_output/n100.r01.s034.low_depth.tsv" tmp.vcf.gz > "n100.r01.s034_output/n100.r01.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task 8f377fd7 (flow 1f9bdd3e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task 8f377fd7 (flow 1f9bdd3e): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s051.Main.out_file 1f9bdd3e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s051.Main.out_file 1f9bdd3e n100/r01/n100.r01.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:28f04fd4c4affd72f51aa5141fa5895a5671a689b4b87f1441133e42d8eb5b53
	sha256:1f9bdd3e7e772d551177cf1e39b35b65978a1947bc5e01587caebcffe64e7cbd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f377fd77f1d251d510df7d4608557d3f8c8f47f47cd0219d879a9bc42d41b4c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s051_output"
	    wget -O "n100.r01.s051_output/n100.r01.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s051_output/n100.r01.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s051_output/n100.r01.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s051_output/n100.r01.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s051_output/n100.r01.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s051_output/n100.r01.s051.reference.fas" "n100.r01.s051_output/n100.r01.s051.fq1.fastq" "n100.r01.s051_output/n100.r01.s051.fq2.fastq" | samtools view -bS - > "n100.r01.s051_output/n100.r01.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s051_output/n100.r01.s051.untrimmed.sorted.bam" "n100.r01.s051_output/n100.r01.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s051_output/n100.r01.s051.untrimmed.sorted.bam" -b "n100.r01.s051_output/n100.r01.s051.primers.bed" -p "n100.r01.s051_output/n100.r01.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" "n100.r01.s051_output/n100.r01.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s051_output/n100.r01.s051.reference.fas" "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" > "n100.r01.s051_output/n100.r01.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s051_output/n100.r01.s051.reference.fas" --call-indels "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" > "n100.r01.s051_output/n100.r01.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" > "n100.r01.s051_output/n100.r01.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s051_output/n100.r01.s051.depth.txt" "n100.r01.s051_output/n100.r01.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s051_output/n100.r01.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s051_output/n100.r01.s051.reference.fas" | bcftools consensus -m "n100.r01.s051_output/n100.r01.s051.low_depth.tsv" tmp.vcf.gz > "n100.r01.s051_output/n100.r01.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:36 scheduler task bf4e2cad (flow 39634eeb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:36 scheduler task bf4e2cad (flow 39634eeb): waiting for completion (try 0): started
2021/07/08 13:53:36  ->  n100.r01.s062.Main.out_file 39634eeb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:36 n100.r01.s062.Main.out_file 39634eeb n100/r01/n100.r01.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f87988a5e66a8fbb69bc303506f4a5cb01b7a388b9f9960e1738dac2fd3d1e6b
	sha256:39634eeb44741c735f73874588c3a96d1286c9e684944dedf542fe13f1684bc5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bf4e2cad71a79a229514589e0d38329f3824f049a2e76891723798f040ca6e07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s062_output"
	    wget -O "n100.r01.s062_output/n100.r01.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s062_output/n100.r01.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s062_output/n100.r01.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s062_output/n100.r01.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s062_output/n100.r01.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s062_output/n100.r01.s062.reference.fas" "n100.r01.s062_output/n100.r01.s062.fq1.fastq" "n100.r01.s062_output/n100.r01.s062.fq2.fastq" | samtools view -bS - > "n100.r01.s062_output/n100.r01.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s062_output/n100.r01.s062.untrimmed.sorted.bam" "n100.r01.s062_output/n100.r01.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s062_output/n100.r01.s062.untrimmed.sorted.bam" -b "n100.r01.s062_output/n100.r01.s062.primers.bed" -p "n100.r01.s062_output/n100.r01.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" "n100.r01.s062_output/n100.r01.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s062_output/n100.r01.s062.reference.fas" "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" > "n100.r01.s062_output/n100.r01.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s062_output/n100.r01.s062.reference.fas" --call-indels "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" > "n100.r01.s062_output/n100.r01.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" > "n100.r01.s062_output/n100.r01.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s062_output/n100.r01.s062.depth.txt" "n100.r01.s062_output/n100.r01.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s062_output/n100.r01.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s062_output/n100.r01.s062.reference.fas" | bcftools consensus -m "n100.r01.s062_output/n100.r01.s062.low_depth.tsv" tmp.vcf.gz > "n100.r01.s062_output/n100.r01.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task 6e4fdc45 (flow fcf02ceb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task 6e4fdc45 (flow fcf02ceb): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s094.Main.out_file fcf02ceb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s094.Main.out_file fcf02ceb n100/r01/n100.r01.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e590f9ad21579c3e37f7882e20bbba439d38bf2fe60aa8cb83fd848fbb652f01
	sha256:fcf02cebde522cc80b648933a7c59d2485196ca798974ce8561e891bb463a8f3
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6e4fdc45dece42f9ecc212d2bf04d5f7f1303017b324b90078b24946646c434c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s094_output"
	    wget -O "n100.r01.s094_output/n100.r01.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s094_output/n100.r01.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s094_output/n100.r01.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s094_output/n100.r01.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s094_output/n100.r01.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s094_output/n100.r01.s094.reference.fas" "n100.r01.s094_output/n100.r01.s094.fq1.fastq" "n100.r01.s094_output/n100.r01.s094.fq2.fastq" | samtools view -bS - > "n100.r01.s094_output/n100.r01.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s094_output/n100.r01.s094.untrimmed.sorted.bam" "n100.r01.s094_output/n100.r01.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s094_output/n100.r01.s094.untrimmed.sorted.bam" -b "n100.r01.s094_output/n100.r01.s094.primers.bed" -p "n100.r01.s094_output/n100.r01.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" "n100.r01.s094_output/n100.r01.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s094_output/n100.r01.s094.reference.fas" "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" > "n100.r01.s094_output/n100.r01.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s094_output/n100.r01.s094.reference.fas" --call-indels "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" > "n100.r01.s094_output/n100.r01.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" > "n100.r01.s094_output/n100.r01.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s094_output/n100.r01.s094.depth.txt" "n100.r01.s094_output/n100.r01.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s094_output/n100.r01.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s094_output/n100.r01.s094.reference.fas" | bcftools consensus -m "n100.r01.s094_output/n100.r01.s094.low_depth.tsv" tmp.vcf.gz > "n100.r01.s094_output/n100.r01.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task 97660e05 (flow c1a6fe3a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task 97660e05 (flow c1a6fe3a): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s031.Main.out_file c1a6fe3a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s031.Main.out_file c1a6fe3a n100/r01/n100.r01.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5696d3ff8771b55f81beb18485dde98d60886f9552afcfd00f945fadf18930e
	sha256:c1a6fe3a5dbc06bfb0c09d1f738f071edfc562d0d7ac44d25fa5928985632b9e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97660e051de589b2f744e9bd9ab27e8ebf0607cd6127f19ee87f1e32bf60d5b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s031_output"
	    wget -O "n100.r01.s031_output/n100.r01.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s031_output/n100.r01.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s031_output/n100.r01.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s031_output/n100.r01.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s031_output/n100.r01.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s031_output/n100.r01.s031.reference.fas" "n100.r01.s031_output/n100.r01.s031.fq1.fastq" "n100.r01.s031_output/n100.r01.s031.fq2.fastq" | samtools view -bS - > "n100.r01.s031_output/n100.r01.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s031_output/n100.r01.s031.untrimmed.sorted.bam" "n100.r01.s031_output/n100.r01.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s031_output/n100.r01.s031.untrimmed.sorted.bam" -b "n100.r01.s031_output/n100.r01.s031.primers.bed" -p "n100.r01.s031_output/n100.r01.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" "n100.r01.s031_output/n100.r01.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s031_output/n100.r01.s031.reference.fas" "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" > "n100.r01.s031_output/n100.r01.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s031_output/n100.r01.s031.reference.fas" --call-indels "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" > "n100.r01.s031_output/n100.r01.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" > "n100.r01.s031_output/n100.r01.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s031_output/n100.r01.s031.depth.txt" "n100.r01.s031_output/n100.r01.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s031_output/n100.r01.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s031_output/n100.r01.s031.reference.fas" | bcftools consensus -m "n100.r01.s031_output/n100.r01.s031.low_depth.tsv" tmp.vcf.gz > "n100.r01.s031_output/n100.r01.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task 91a49b70 (flow dc0a8500): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task 91a49b70 (flow dc0a8500): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s029.Main.out_file dc0a8500 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s029.Main.out_file dc0a8500 n100/r01/n100.r01.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:19576d6e2365baea17c4b894ccc53f29a7151622c8702d77715a5fa61d15e558
	sha256:dc0a8500d53d8a6fa86beb6321a5a19bdc3dc179b5c3d8a7a0a5bd837608517b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/91a49b702c1f5ce76e85ef7027daf9ec58d32fca251bf8761fc1fc35cc1435e2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s029_output"
	    wget -O "n100.r01.s029_output/n100.r01.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s029_output/n100.r01.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s029_output/n100.r01.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s029_output/n100.r01.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s029_output/n100.r01.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s029_output/n100.r01.s029.reference.fas" "n100.r01.s029_output/n100.r01.s029.fq1.fastq" "n100.r01.s029_output/n100.r01.s029.fq2.fastq" | samtools view -bS - > "n100.r01.s029_output/n100.r01.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s029_output/n100.r01.s029.untrimmed.sorted.bam" "n100.r01.s029_output/n100.r01.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s029_output/n100.r01.s029.untrimmed.sorted.bam" -b "n100.r01.s029_output/n100.r01.s029.primers.bed" -p "n100.r01.s029_output/n100.r01.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" "n100.r01.s029_output/n100.r01.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s029_output/n100.r01.s029.reference.fas" "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" > "n100.r01.s029_output/n100.r01.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s029_output/n100.r01.s029.reference.fas" --call-indels "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" > "n100.r01.s029_output/n100.r01.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" > "n100.r01.s029_output/n100.r01.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s029_output/n100.r01.s029.depth.txt" "n100.r01.s029_output/n100.r01.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s029_output/n100.r01.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s029_output/n100.r01.s029.reference.fas" | bcftools consensus -m "n100.r01.s029_output/n100.r01.s029.low_depth.tsv" tmp.vcf.gz > "n100.r01.s029_output/n100.r01.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task 128087c4 (flow 6dc80144): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task 128087c4 (flow 6dc80144): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s061.Main.out_file 6dc80144 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s061.Main.out_file 6dc80144 n100/r01/n100.r01.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d4d1cd4e62f4434d81ceac57f0723ac1d769d29f0c5935d28d84a623adeeee6
	sha256:6dc80144a104acdd981571bc94ca3724a405ac02752d889c13280cfca6bdff00
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/128087c48c98184210a41db0e8f6205866b288c11ca2b8b9bf1b5b4b7bcd4644
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s061_output"
	    wget -O "n100.r01.s061_output/n100.r01.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s061_output/n100.r01.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s061_output/n100.r01.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s061_output/n100.r01.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s061_output/n100.r01.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s061_output/n100.r01.s061.reference.fas" "n100.r01.s061_output/n100.r01.s061.fq1.fastq" "n100.r01.s061_output/n100.r01.s061.fq2.fastq" | samtools view -bS - > "n100.r01.s061_output/n100.r01.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s061_output/n100.r01.s061.untrimmed.sorted.bam" "n100.r01.s061_output/n100.r01.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s061_output/n100.r01.s061.untrimmed.sorted.bam" -b "n100.r01.s061_output/n100.r01.s061.primers.bed" -p "n100.r01.s061_output/n100.r01.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" "n100.r01.s061_output/n100.r01.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s061_output/n100.r01.s061.reference.fas" "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" > "n100.r01.s061_output/n100.r01.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s061_output/n100.r01.s061.reference.fas" --call-indels "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" > "n100.r01.s061_output/n100.r01.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" > "n100.r01.s061_output/n100.r01.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s061_output/n100.r01.s061.depth.txt" "n100.r01.s061_output/n100.r01.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s061_output/n100.r01.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s061_output/n100.r01.s061.reference.fas" | bcftools consensus -m "n100.r01.s061_output/n100.r01.s061.low_depth.tsv" tmp.vcf.gz > "n100.r01.s061_output/n100.r01.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task bef5a6aa (flow 50884d6c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task bef5a6aa (flow 50884d6c): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s041.Main.out_file 50884d6c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s041.Main.out_file 50884d6c n100/r01/n100.r01.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5b6f5cba3902b71420a4feac9b452b69d2e8d44c1b0f4d280c2f0574fdf5ebbe
	sha256:50884d6c87553c2d49b48c72fda616fe3ec42722625d6d8dba6e77ccbe08ee83
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bef5a6aa79c5685e62da1c200d2f40e4d64f6f8737a56962ef514f527cd762ae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s041_output"
	    wget -O "n100.r01.s041_output/n100.r01.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s041_output/n100.r01.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s041_output/n100.r01.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s041_output/n100.r01.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s041_output/n100.r01.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s041_output/n100.r01.s041.reference.fas" "n100.r01.s041_output/n100.r01.s041.fq1.fastq" "n100.r01.s041_output/n100.r01.s041.fq2.fastq" | samtools view -bS - > "n100.r01.s041_output/n100.r01.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s041_output/n100.r01.s041.untrimmed.sorted.bam" "n100.r01.s041_output/n100.r01.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s041_output/n100.r01.s041.untrimmed.sorted.bam" -b "n100.r01.s041_output/n100.r01.s041.primers.bed" -p "n100.r01.s041_output/n100.r01.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" "n100.r01.s041_output/n100.r01.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s041_output/n100.r01.s041.reference.fas" "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" > "n100.r01.s041_output/n100.r01.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s041_output/n100.r01.s041.reference.fas" --call-indels "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" > "n100.r01.s041_output/n100.r01.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" > "n100.r01.s041_output/n100.r01.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s041_output/n100.r01.s041.depth.txt" "n100.r01.s041_output/n100.r01.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s041_output/n100.r01.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s041_output/n100.r01.s041.reference.fas" | bcftools consensus -m "n100.r01.s041_output/n100.r01.s041.low_depth.tsv" tmp.vcf.gz > "n100.r01.s041_output/n100.r01.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task a7bf4b87 (flow 6ea478fe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task a7bf4b87 (flow 6ea478fe): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s057.Main.out_file 6ea478fe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s057.Main.out_file 6ea478fe n100/r01/n100.r01.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:15d70f783a1660173115facadae64c4e87b9d4d206f1a1b40c3f6831094697be
	sha256:6ea478fe219c5f659f3cb1cb8fa897e52068d9870e206445d789b6943d553fce
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a7bf4b87047712e9d5e51305a1396d055090673516cb44f1a811ed1d17b6904c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s057_output"
	    wget -O "n100.r01.s057_output/n100.r01.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s057_output/n100.r01.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s057_output/n100.r01.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s057_output/n100.r01.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s057_output/n100.r01.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s057_output/n100.r01.s057.reference.fas" "n100.r01.s057_output/n100.r01.s057.fq1.fastq" "n100.r01.s057_output/n100.r01.s057.fq2.fastq" | samtools view -bS - > "n100.r01.s057_output/n100.r01.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s057_output/n100.r01.s057.untrimmed.sorted.bam" "n100.r01.s057_output/n100.r01.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s057_output/n100.r01.s057.untrimmed.sorted.bam" -b "n100.r01.s057_output/n100.r01.s057.primers.bed" -p "n100.r01.s057_output/n100.r01.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" "n100.r01.s057_output/n100.r01.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s057_output/n100.r01.s057.reference.fas" "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" > "n100.r01.s057_output/n100.r01.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s057_output/n100.r01.s057.reference.fas" --call-indels "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" > "n100.r01.s057_output/n100.r01.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" > "n100.r01.s057_output/n100.r01.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s057_output/n100.r01.s057.depth.txt" "n100.r01.s057_output/n100.r01.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s057_output/n100.r01.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s057_output/n100.r01.s057.reference.fas" | bcftools consensus -m "n100.r01.s057_output/n100.r01.s057.low_depth.tsv" tmp.vcf.gz > "n100.r01.s057_output/n100.r01.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:37 scheduler task aa7885b4 (flow 963957c7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:37 scheduler task aa7885b4 (flow 963957c7): waiting for completion (try 0): started
2021/07/08 13:53:37  ->  n100.r01.s011.Main.out_file 963957c7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:37 n100.r01.s011.Main.out_file 963957c7 n100/r01/n100.r01.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:056b3e17f3a182b7cf257f4f2c49f268c48843dd8b2bce3ad59f6f844a2e8d6a
	sha256:963957c78735ebafca305fd66f48ffca8dd4b6f08f12e37f46845374667d19e8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aa7885b477ab7df1a039ec097fdf7d2c198fc4a34e4bd02176e45243cdf7fc03
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s011_output"
	    wget -O "n100.r01.s011_output/n100.r01.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s011_output/n100.r01.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s011_output/n100.r01.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s011_output/n100.r01.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s011_output/n100.r01.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s011_output/n100.r01.s011.reference.fas" "n100.r01.s011_output/n100.r01.s011.fq1.fastq" "n100.r01.s011_output/n100.r01.s011.fq2.fastq" | samtools view -bS - > "n100.r01.s011_output/n100.r01.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s011_output/n100.r01.s011.untrimmed.sorted.bam" "n100.r01.s011_output/n100.r01.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s011_output/n100.r01.s011.untrimmed.sorted.bam" -b "n100.r01.s011_output/n100.r01.s011.primers.bed" -p "n100.r01.s011_output/n100.r01.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" "n100.r01.s011_output/n100.r01.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s011_output/n100.r01.s011.reference.fas" "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" > "n100.r01.s011_output/n100.r01.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s011_output/n100.r01.s011.reference.fas" --call-indels "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" > "n100.r01.s011_output/n100.r01.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" > "n100.r01.s011_output/n100.r01.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s011_output/n100.r01.s011.depth.txt" "n100.r01.s011_output/n100.r01.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s011_output/n100.r01.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s011_output/n100.r01.s011.reference.fas" | bcftools consensus -m "n100.r01.s011_output/n100.r01.s011.low_depth.tsv" tmp.vcf.gz > "n100.r01.s011_output/n100.r01.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task eff5e8ec (flow 01b3e50d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task eff5e8ec (flow 01b3e50d): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s060.Main.out_file 01b3e50d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s060.Main.out_file 01b3e50d n100/r01/n100.r01.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aa2242ebe03a255d2d1e177df80f0a46a5dd4afc9b3f762691395ebffc527bdb
	sha256:01b3e50ddf0f22d47508e23a24550aab9f845f5d5a79e769b23d2cc127b761db
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eff5e8ecc25407727a7f58c12d7f28f4961552c38691fd3e5426dd01e9f97564
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s060_output"
	    wget -O "n100.r01.s060_output/n100.r01.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s060_output/n100.r01.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s060_output/n100.r01.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s060_output/n100.r01.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s060_output/n100.r01.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s060_output/n100.r01.s060.reference.fas" "n100.r01.s060_output/n100.r01.s060.fq1.fastq" "n100.r01.s060_output/n100.r01.s060.fq2.fastq" | samtools view -bS - > "n100.r01.s060_output/n100.r01.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s060_output/n100.r01.s060.untrimmed.sorted.bam" "n100.r01.s060_output/n100.r01.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s060_output/n100.r01.s060.untrimmed.sorted.bam" -b "n100.r01.s060_output/n100.r01.s060.primers.bed" -p "n100.r01.s060_output/n100.r01.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" "n100.r01.s060_output/n100.r01.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s060_output/n100.r01.s060.reference.fas" "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" > "n100.r01.s060_output/n100.r01.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s060_output/n100.r01.s060.reference.fas" --call-indels "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" > "n100.r01.s060_output/n100.r01.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" > "n100.r01.s060_output/n100.r01.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s060_output/n100.r01.s060.depth.txt" "n100.r01.s060_output/n100.r01.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s060_output/n100.r01.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s060_output/n100.r01.s060.reference.fas" | bcftools consensus -m "n100.r01.s060_output/n100.r01.s060.low_depth.tsv" tmp.vcf.gz > "n100.r01.s060_output/n100.r01.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task 35fa303c (flow 0b006c5d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task 35fa303c (flow 0b006c5d): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s025.Main.out_file 0b006c5d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s025.Main.out_file 0b006c5d n100/r01/n100.r01.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aa559d3d8b6e33f62c1bacf9a0f67b4a7ed974eed8c92c3f7021533d8d641ffa
	sha256:0b006c5da8713e0468d96c0cdf2500b3620d69699d321ab9aba01dd14157d2d5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/35fa303c5bc5205ab56fbab8dae89ffdaaea8d89d7785d5973f6fa0157595fdc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s025_output"
	    wget -O "n100.r01.s025_output/n100.r01.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s025_output/n100.r01.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s025_output/n100.r01.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s025_output/n100.r01.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s025_output/n100.r01.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s025_output/n100.r01.s025.reference.fas" "n100.r01.s025_output/n100.r01.s025.fq1.fastq" "n100.r01.s025_output/n100.r01.s025.fq2.fastq" | samtools view -bS - > "n100.r01.s025_output/n100.r01.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s025_output/n100.r01.s025.untrimmed.sorted.bam" "n100.r01.s025_output/n100.r01.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s025_output/n100.r01.s025.untrimmed.sorted.bam" -b "n100.r01.s025_output/n100.r01.s025.primers.bed" -p "n100.r01.s025_output/n100.r01.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" "n100.r01.s025_output/n100.r01.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s025_output/n100.r01.s025.reference.fas" "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" > "n100.r01.s025_output/n100.r01.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s025_output/n100.r01.s025.reference.fas" --call-indels "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" > "n100.r01.s025_output/n100.r01.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" > "n100.r01.s025_output/n100.r01.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s025_output/n100.r01.s025.depth.txt" "n100.r01.s025_output/n100.r01.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s025_output/n100.r01.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s025_output/n100.r01.s025.reference.fas" | bcftools consensus -m "n100.r01.s025_output/n100.r01.s025.low_depth.tsv" tmp.vcf.gz > "n100.r01.s025_output/n100.r01.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task 238ca419 (flow 8082561f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task 238ca419 (flow 8082561f): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s026.Main.out_file 8082561f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s026.Main.out_file 8082561f n100/r01/n100.r01.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:367f539675d9bbd628600e9324b87b1dc761bd5f8b1bdeb82bc218f310dbeaae
	sha256:8082561f2789026fb93f2065f7e015ff9359496f3fe8c007e7087f2c5d8d9ea2
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/238ca419b7899077f648ab133cd3a861ed9b37ea5103ac0234e7c9321bfd3829
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s026_output"
	    wget -O "n100.r01.s026_output/n100.r01.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s026_output/n100.r01.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s026_output/n100.r01.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s026_output/n100.r01.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s026_output/n100.r01.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s026_output/n100.r01.s026.reference.fas" "n100.r01.s026_output/n100.r01.s026.fq1.fastq" "n100.r01.s026_output/n100.r01.s026.fq2.fastq" | samtools view -bS - > "n100.r01.s026_output/n100.r01.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s026_output/n100.r01.s026.untrimmed.sorted.bam" "n100.r01.s026_output/n100.r01.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s026_output/n100.r01.s026.untrimmed.sorted.bam" -b "n100.r01.s026_output/n100.r01.s026.primers.bed" -p "n100.r01.s026_output/n100.r01.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" "n100.r01.s026_output/n100.r01.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s026_output/n100.r01.s026.reference.fas" "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" > "n100.r01.s026_output/n100.r01.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s026_output/n100.r01.s026.reference.fas" --call-indels "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" > "n100.r01.s026_output/n100.r01.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" > "n100.r01.s026_output/n100.r01.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s026_output/n100.r01.s026.depth.txt" "n100.r01.s026_output/n100.r01.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s026_output/n100.r01.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s026_output/n100.r01.s026.reference.fas" | bcftools consensus -m "n100.r01.s026_output/n100.r01.s026.low_depth.tsv" tmp.vcf.gz > "n100.r01.s026_output/n100.r01.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task c5917b88 (flow 1a8edfa6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task c5917b88 (flow 1a8edfa6): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s098.Main.out_file 1a8edfa6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s098.Main.out_file 1a8edfa6 n100/r01/n100.r01.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bc9205c2e359160b8fc3e676b708cfe21b673172a2113ab1961f5b70a478ccb2
	sha256:1a8edfa6af0a8548ff792b31495b227e56ea69eed10e36899361dd3c86a15a91
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5917b884acfc74864d40259f2e61779c695e638c23d509050669552ac4aadb5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s098_output"
	    wget -O "n100.r01.s098_output/n100.r01.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s098_output/n100.r01.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s098_output/n100.r01.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s098_output/n100.r01.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s098_output/n100.r01.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s098_output/n100.r01.s098.reference.fas" "n100.r01.s098_output/n100.r01.s098.fq1.fastq" "n100.r01.s098_output/n100.r01.s098.fq2.fastq" | samtools view -bS - > "n100.r01.s098_output/n100.r01.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s098_output/n100.r01.s098.untrimmed.sorted.bam" "n100.r01.s098_output/n100.r01.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s098_output/n100.r01.s098.untrimmed.sorted.bam" -b "n100.r01.s098_output/n100.r01.s098.primers.bed" -p "n100.r01.s098_output/n100.r01.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" "n100.r01.s098_output/n100.r01.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s098_output/n100.r01.s098.reference.fas" "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" > "n100.r01.s098_output/n100.r01.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s098_output/n100.r01.s098.reference.fas" --call-indels "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" > "n100.r01.s098_output/n100.r01.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" > "n100.r01.s098_output/n100.r01.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s098_output/n100.r01.s098.depth.txt" "n100.r01.s098_output/n100.r01.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s098_output/n100.r01.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s098_output/n100.r01.s098.reference.fas" | bcftools consensus -m "n100.r01.s098_output/n100.r01.s098.low_depth.tsv" tmp.vcf.gz > "n100.r01.s098_output/n100.r01.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task 0a01661c (flow b52f6d52): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task 0a01661c (flow b52f6d52): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s037.Main.out_file b52f6d52 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s037.Main.out_file b52f6d52 n100/r01/n100.r01.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d58bbf7218ab8fb1323861194cb05dc121893c2735da0a3c1b6ec7f5e93e41b
	sha256:b52f6d52c89668ebfec6c6fb6b893a8332ff27304b50b7f05e20140ebcbf7dd5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a01661cace5bededfcc0224803264e3e60d1cdda346a6268252a04e6b232a9b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s037_output"
	    wget -O "n100.r01.s037_output/n100.r01.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s037_output/n100.r01.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s037_output/n100.r01.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s037_output/n100.r01.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s037_output/n100.r01.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s037_output/n100.r01.s037.reference.fas" "n100.r01.s037_output/n100.r01.s037.fq1.fastq" "n100.r01.s037_output/n100.r01.s037.fq2.fastq" | samtools view -bS - > "n100.r01.s037_output/n100.r01.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s037_output/n100.r01.s037.untrimmed.sorted.bam" "n100.r01.s037_output/n100.r01.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s037_output/n100.r01.s037.untrimmed.sorted.bam" -b "n100.r01.s037_output/n100.r01.s037.primers.bed" -p "n100.r01.s037_output/n100.r01.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" "n100.r01.s037_output/n100.r01.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s037_output/n100.r01.s037.reference.fas" "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" > "n100.r01.s037_output/n100.r01.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s037_output/n100.r01.s037.reference.fas" --call-indels "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" > "n100.r01.s037_output/n100.r01.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" > "n100.r01.s037_output/n100.r01.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s037_output/n100.r01.s037.depth.txt" "n100.r01.s037_output/n100.r01.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s037_output/n100.r01.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s037_output/n100.r01.s037.reference.fas" | bcftools consensus -m "n100.r01.s037_output/n100.r01.s037.low_depth.tsv" tmp.vcf.gz > "n100.r01.s037_output/n100.r01.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task ce295c92 (flow 4cdb8625): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task ce295c92 (flow 4cdb8625): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s004.Main.out_file 4cdb8625 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s004.Main.out_file 4cdb8625 n100/r01/n100.r01.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:074c6f2a1b3cce585c89702179f7a5d54ce87f4126fb07c6a1257cea59350cc9
	sha256:4cdb86258ea57d69cafdb113ccdbe4d01be909b0e0d03e9a75b5576b5a7a4863
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ce295c9235cc8517e7eb76b2af68aea2096db03a565f02d2db16709f229b2360
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s004_output"
	    wget -O "n100.r01.s004_output/n100.r01.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s004_output/n100.r01.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s004_output/n100.r01.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s004_output/n100.r01.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s004_output/n100.r01.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s004_output/n100.r01.s004.reference.fas" "n100.r01.s004_output/n100.r01.s004.fq1.fastq" "n100.r01.s004_output/n100.r01.s004.fq2.fastq" | samtools view -bS - > "n100.r01.s004_output/n100.r01.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s004_output/n100.r01.s004.untrimmed.sorted.bam" "n100.r01.s004_output/n100.r01.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s004_output/n100.r01.s004.untrimmed.sorted.bam" -b "n100.r01.s004_output/n100.r01.s004.primers.bed" -p "n100.r01.s004_output/n100.r01.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" "n100.r01.s004_output/n100.r01.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s004_output/n100.r01.s004.reference.fas" "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" > "n100.r01.s004_output/n100.r01.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s004_output/n100.r01.s004.reference.fas" --call-indels "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" > "n100.r01.s004_output/n100.r01.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" > "n100.r01.s004_output/n100.r01.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s004_output/n100.r01.s004.depth.txt" "n100.r01.s004_output/n100.r01.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s004_output/n100.r01.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s004_output/n100.r01.s004.reference.fas" | bcftools consensus -m "n100.r01.s004_output/n100.r01.s004.low_depth.tsv" tmp.vcf.gz > "n100.r01.s004_output/n100.r01.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task 1276c917 (flow 8986bd36): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task 1276c917 (flow 8986bd36): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s074.Main.out_file 8986bd36 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s074.Main.out_file 8986bd36 n100/r01/n100.r01.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ba417960799a9e653d6be8739b7aab7b745fbc66e8852780823db65d023d9a91
	sha256:8986bd36200b7d4825cad91f015166d616b24ce3c338b0f94a5e53e2587a2dd0
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1276c917df054857c5c980e141b18daea382780e9cbc87aa87daa41627038f64
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s074_output"
	    wget -O "n100.r01.s074_output/n100.r01.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s074_output/n100.r01.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s074_output/n100.r01.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s074_output/n100.r01.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s074_output/n100.r01.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s074_output/n100.r01.s074.reference.fas" "n100.r01.s074_output/n100.r01.s074.fq1.fastq" "n100.r01.s074_output/n100.r01.s074.fq2.fastq" | samtools view -bS - > "n100.r01.s074_output/n100.r01.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s074_output/n100.r01.s074.untrimmed.sorted.bam" "n100.r01.s074_output/n100.r01.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s074_output/n100.r01.s074.untrimmed.sorted.bam" -b "n100.r01.s074_output/n100.r01.s074.primers.bed" -p "n100.r01.s074_output/n100.r01.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" "n100.r01.s074_output/n100.r01.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s074_output/n100.r01.s074.reference.fas" "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" > "n100.r01.s074_output/n100.r01.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s074_output/n100.r01.s074.reference.fas" --call-indels "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" > "n100.r01.s074_output/n100.r01.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" > "n100.r01.s074_output/n100.r01.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s074_output/n100.r01.s074.depth.txt" "n100.r01.s074_output/n100.r01.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s074_output/n100.r01.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s074_output/n100.r01.s074.reference.fas" | bcftools consensus -m "n100.r01.s074_output/n100.r01.s074.low_depth.tsv" tmp.vcf.gz > "n100.r01.s074_output/n100.r01.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:38 scheduler task 6a9006af (flow 15a25f65): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:38 scheduler task 6a9006af (flow 15a25f65): waiting for completion (try 0): started
2021/07/08 13:53:38  ->  n100.r01.s068.Main.out_file 15a25f65 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:38 n100.r01.s068.Main.out_file 15a25f65 n100/r01/n100.r01.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b58e62e6b66d430822aa41e94a49d82b30da756028f4bddfa1595502c1ba9000
	sha256:15a25f6543f835a04cdf99ade278a26ff67dda70054d689f5fbd1b2cc4b55e94
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a9006afbace5bb55b6d9864ad26a5eb08b775f6ebc005574f0ff5262118a4f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s068_output"
	    wget -O "n100.r01.s068_output/n100.r01.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s068_output/n100.r01.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s068_output/n100.r01.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s068_output/n100.r01.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s068_output/n100.r01.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s068_output/n100.r01.s068.reference.fas" "n100.r01.s068_output/n100.r01.s068.fq1.fastq" "n100.r01.s068_output/n100.r01.s068.fq2.fastq" | samtools view -bS - > "n100.r01.s068_output/n100.r01.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s068_output/n100.r01.s068.untrimmed.sorted.bam" "n100.r01.s068_output/n100.r01.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s068_output/n100.r01.s068.untrimmed.sorted.bam" -b "n100.r01.s068_output/n100.r01.s068.primers.bed" -p "n100.r01.s068_output/n100.r01.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" "n100.r01.s068_output/n100.r01.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s068_output/n100.r01.s068.reference.fas" "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" > "n100.r01.s068_output/n100.r01.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s068_output/n100.r01.s068.reference.fas" --call-indels "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" > "n100.r01.s068_output/n100.r01.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" > "n100.r01.s068_output/n100.r01.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s068_output/n100.r01.s068.depth.txt" "n100.r01.s068_output/n100.r01.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s068_output/n100.r01.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s068_output/n100.r01.s068.reference.fas" | bcftools consensus -m "n100.r01.s068_output/n100.r01.s068.low_depth.tsv" tmp.vcf.gz > "n100.r01.s068_output/n100.r01.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 8f179a44 (flow f3e1b152): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 8f179a44 (flow f3e1b152): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s001.Main.out_file f3e1b152 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s001.Main.out_file f3e1b152 n100/r01/n100.r01.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd284d5ada101ad1fa7257be50c997750f5f72905be0a4d9ee353d3c0b02547c
	sha256:f3e1b15210ee06de82fd9940f108973cad8dcd64c0fb6f026e7264450d5eda80
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f179a448d0a33ff2caf4dc33dbdac746be46f87935ea4693bba68f7a53625b9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s001_output"
	    wget -O "n100.r01.s001_output/n100.r01.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s001_output/n100.r01.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s001_output/n100.r01.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s001_output/n100.r01.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s001_output/n100.r01.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s001_output/n100.r01.s001.reference.fas" "n100.r01.s001_output/n100.r01.s001.fq1.fastq" "n100.r01.s001_output/n100.r01.s001.fq2.fastq" | samtools view -bS - > "n100.r01.s001_output/n100.r01.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s001_output/n100.r01.s001.untrimmed.sorted.bam" "n100.r01.s001_output/n100.r01.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s001_output/n100.r01.s001.untrimmed.sorted.bam" -b "n100.r01.s001_output/n100.r01.s001.primers.bed" -p "n100.r01.s001_output/n100.r01.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" "n100.r01.s001_output/n100.r01.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s001_output/n100.r01.s001.reference.fas" "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" > "n100.r01.s001_output/n100.r01.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s001_output/n100.r01.s001.reference.fas" --call-indels "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" > "n100.r01.s001_output/n100.r01.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" > "n100.r01.s001_output/n100.r01.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s001_output/n100.r01.s001.depth.txt" "n100.r01.s001_output/n100.r01.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s001_output/n100.r01.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s001_output/n100.r01.s001.reference.fas" | bcftools consensus -m "n100.r01.s001_output/n100.r01.s001.low_depth.tsv" tmp.vcf.gz > "n100.r01.s001_output/n100.r01.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task df7b7632 (flow cb85a725): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task df7b7632 (flow cb85a725): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s055.Main.out_file cb85a725 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s055.Main.out_file cb85a725 n100/r01/n100.r01.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:22f510a611a732a44d333b967ee1a52caf5b60ae4237120b6c83f01169a6376f
	sha256:cb85a725ddac36d1028d9fe75abe68b96f08b9302b1000e9ee9dfa943b48ea18
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df7b763238769dc2b79f8f1f40dde6c2cec9e97abe8ac6268fc9b9d6b0d4e6d1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s055_output"
	    wget -O "n100.r01.s055_output/n100.r01.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s055_output/n100.r01.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s055_output/n100.r01.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s055_output/n100.r01.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s055_output/n100.r01.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s055_output/n100.r01.s055.reference.fas" "n100.r01.s055_output/n100.r01.s055.fq1.fastq" "n100.r01.s055_output/n100.r01.s055.fq2.fastq" | samtools view -bS - > "n100.r01.s055_output/n100.r01.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s055_output/n100.r01.s055.untrimmed.sorted.bam" "n100.r01.s055_output/n100.r01.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s055_output/n100.r01.s055.untrimmed.sorted.bam" -b "n100.r01.s055_output/n100.r01.s055.primers.bed" -p "n100.r01.s055_output/n100.r01.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" "n100.r01.s055_output/n100.r01.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s055_output/n100.r01.s055.reference.fas" "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" > "n100.r01.s055_output/n100.r01.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s055_output/n100.r01.s055.reference.fas" --call-indels "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" > "n100.r01.s055_output/n100.r01.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" > "n100.r01.s055_output/n100.r01.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s055_output/n100.r01.s055.depth.txt" "n100.r01.s055_output/n100.r01.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s055_output/n100.r01.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s055_output/n100.r01.s055.reference.fas" | bcftools consensus -m "n100.r01.s055_output/n100.r01.s055.low_depth.tsv" tmp.vcf.gz > "n100.r01.s055_output/n100.r01.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 5d1b3fa7 (flow 5ac278bc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 5d1b3fa7 (flow 5ac278bc): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s040.Main.out_file 5ac278bc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s040.Main.out_file 5ac278bc n100/r01/n100.r01.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55bf8d1404c206e7b95cf9f9772bcd12a3fdddd27ca1d70e43a02f430d94d8b7
	sha256:5ac278bcc09e227efa412d31c050cec5a91c121dcbba07ff63194173cc946162
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5d1b3fa7aa529008106e4389c98daded2006a13b6f4c285075f7190344ec4824
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s040_output"
	    wget -O "n100.r01.s040_output/n100.r01.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s040_output/n100.r01.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s040_output/n100.r01.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s040_output/n100.r01.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s040_output/n100.r01.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s040_output/n100.r01.s040.reference.fas" "n100.r01.s040_output/n100.r01.s040.fq1.fastq" "n100.r01.s040_output/n100.r01.s040.fq2.fastq" | samtools view -bS - > "n100.r01.s040_output/n100.r01.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s040_output/n100.r01.s040.untrimmed.sorted.bam" "n100.r01.s040_output/n100.r01.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s040_output/n100.r01.s040.untrimmed.sorted.bam" -b "n100.r01.s040_output/n100.r01.s040.primers.bed" -p "n100.r01.s040_output/n100.r01.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" "n100.r01.s040_output/n100.r01.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s040_output/n100.r01.s040.reference.fas" "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" > "n100.r01.s040_output/n100.r01.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s040_output/n100.r01.s040.reference.fas" --call-indels "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" > "n100.r01.s040_output/n100.r01.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" > "n100.r01.s040_output/n100.r01.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s040_output/n100.r01.s040.depth.txt" "n100.r01.s040_output/n100.r01.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s040_output/n100.r01.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s040_output/n100.r01.s040.reference.fas" | bcftools consensus -m "n100.r01.s040_output/n100.r01.s040.low_depth.tsv" tmp.vcf.gz > "n100.r01.s040_output/n100.r01.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 89fa88da (flow 6636d54a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 89fa88da (flow 6636d54a): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s066.Main.out_file 6636d54a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s066.Main.out_file 6636d54a n100/r01/n100.r01.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d45ed42a7733454a176f283a98821310f16f3602fb6af7fea780163021a38fec
	sha256:6636d54a96aa7648e4ace196be3b23441e9c706caf2e29c034f36ce65e70c70c
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/89fa88da8dca41ef5fe31a01d1275fa62e494423b27c2600553395727f6d1899
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s066_output"
	    wget -O "n100.r01.s066_output/n100.r01.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s066_output/n100.r01.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s066_output/n100.r01.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s066_output/n100.r01.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s066_output/n100.r01.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s066_output/n100.r01.s066.reference.fas" "n100.r01.s066_output/n100.r01.s066.fq1.fastq" "n100.r01.s066_output/n100.r01.s066.fq2.fastq" | samtools view -bS - > "n100.r01.s066_output/n100.r01.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s066_output/n100.r01.s066.untrimmed.sorted.bam" "n100.r01.s066_output/n100.r01.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s066_output/n100.r01.s066.untrimmed.sorted.bam" -b "n100.r01.s066_output/n100.r01.s066.primers.bed" -p "n100.r01.s066_output/n100.r01.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" "n100.r01.s066_output/n100.r01.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s066_output/n100.r01.s066.reference.fas" "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" > "n100.r01.s066_output/n100.r01.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s066_output/n100.r01.s066.reference.fas" --call-indels "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" > "n100.r01.s066_output/n100.r01.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" > "n100.r01.s066_output/n100.r01.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s066_output/n100.r01.s066.depth.txt" "n100.r01.s066_output/n100.r01.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s066_output/n100.r01.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s066_output/n100.r01.s066.reference.fas" | bcftools consensus -m "n100.r01.s066_output/n100.r01.s066.low_depth.tsv" tmp.vcf.gz > "n100.r01.s066_output/n100.r01.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 08e2a9ed (flow 1d467a73): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 08e2a9ed (flow 1d467a73): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s035.Main.out_file 1d467a73 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s035.Main.out_file 1d467a73 n100/r01/n100.r01.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:604b562224342b7c83fe3e9f2989d54dabbf864530196adae322360045897f0c
	sha256:1d467a73b9cf5c8eb147c70ab2e96e1cb8d95007304adeb2ecc1f80505667632
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/08e2a9edca69ddae770468fbd78241c8d71327eb1af05a10e56d4bbe12d77180
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s035_output"
	    wget -O "n100.r01.s035_output/n100.r01.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s035_output/n100.r01.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s035_output/n100.r01.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s035_output/n100.r01.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s035_output/n100.r01.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s035_output/n100.r01.s035.reference.fas" "n100.r01.s035_output/n100.r01.s035.fq1.fastq" "n100.r01.s035_output/n100.r01.s035.fq2.fastq" | samtools view -bS - > "n100.r01.s035_output/n100.r01.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s035_output/n100.r01.s035.untrimmed.sorted.bam" "n100.r01.s035_output/n100.r01.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s035_output/n100.r01.s035.untrimmed.sorted.bam" -b "n100.r01.s035_output/n100.r01.s035.primers.bed" -p "n100.r01.s035_output/n100.r01.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" "n100.r01.s035_output/n100.r01.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s035_output/n100.r01.s035.reference.fas" "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" > "n100.r01.s035_output/n100.r01.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s035_output/n100.r01.s035.reference.fas" --call-indels "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" > "n100.r01.s035_output/n100.r01.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" > "n100.r01.s035_output/n100.r01.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s035_output/n100.r01.s035.depth.txt" "n100.r01.s035_output/n100.r01.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s035_output/n100.r01.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s035_output/n100.r01.s035.reference.fas" | bcftools consensus -m "n100.r01.s035_output/n100.r01.s035.low_depth.tsv" tmp.vcf.gz > "n100.r01.s035_output/n100.r01.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 7c7b163b (flow 441ccf77): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 7c7b163b (flow 441ccf77): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s049.Main.out_file 441ccf77 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s049.Main.out_file 441ccf77 n100/r01/n100.r01.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b8dae941c83c2a74c2415aa7c199927de307731bb32d2142d71874f2f0fdfe7
	sha256:441ccf772b221c416abaac58c648091e110e353e9b40683bf7bcbc9dfcf8c8c5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7c7b163b35ba96c0840a626264bea18b659de4979c5c4f2f8bda407bd966e2b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s049_output"
	    wget -O "n100.r01.s049_output/n100.r01.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s049_output/n100.r01.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s049_output/n100.r01.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s049_output/n100.r01.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s049_output/n100.r01.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s049_output/n100.r01.s049.reference.fas" "n100.r01.s049_output/n100.r01.s049.fq1.fastq" "n100.r01.s049_output/n100.r01.s049.fq2.fastq" | samtools view -bS - > "n100.r01.s049_output/n100.r01.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s049_output/n100.r01.s049.untrimmed.sorted.bam" "n100.r01.s049_output/n100.r01.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s049_output/n100.r01.s049.untrimmed.sorted.bam" -b "n100.r01.s049_output/n100.r01.s049.primers.bed" -p "n100.r01.s049_output/n100.r01.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" "n100.r01.s049_output/n100.r01.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s049_output/n100.r01.s049.reference.fas" "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" > "n100.r01.s049_output/n100.r01.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s049_output/n100.r01.s049.reference.fas" --call-indels "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" > "n100.r01.s049_output/n100.r01.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" > "n100.r01.s049_output/n100.r01.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s049_output/n100.r01.s049.depth.txt" "n100.r01.s049_output/n100.r01.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s049_output/n100.r01.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s049_output/n100.r01.s049.reference.fas" | bcftools consensus -m "n100.r01.s049_output/n100.r01.s049.low_depth.tsv" tmp.vcf.gz > "n100.r01.s049_output/n100.r01.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 6a8b9655 (flow 09a7347a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 6a8b9655 (flow 09a7347a): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s042.Main.out_file 09a7347a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s042.Main.out_file 09a7347a n100/r01/n100.r01.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:477d3a0611e366ca36ab2011a5d1651ff1469a8d296835f3bb7f946cf09c5dd0
	sha256:09a7347acbbddb799849b71bc002f1ef640e05d8dadeb7be84af967a63d50e3f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a8b9655c3b375f5fcdfff0cc38c535a3374ef8de50734fe2380ff6ad28ca5f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s042_output"
	    wget -O "n100.r01.s042_output/n100.r01.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s042_output/n100.r01.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s042_output/n100.r01.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s042_output/n100.r01.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s042_output/n100.r01.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s042_output/n100.r01.s042.reference.fas" "n100.r01.s042_output/n100.r01.s042.fq1.fastq" "n100.r01.s042_output/n100.r01.s042.fq2.fastq" | samtools view -bS - > "n100.r01.s042_output/n100.r01.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s042_output/n100.r01.s042.untrimmed.sorted.bam" "n100.r01.s042_output/n100.r01.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s042_output/n100.r01.s042.untrimmed.sorted.bam" -b "n100.r01.s042_output/n100.r01.s042.primers.bed" -p "n100.r01.s042_output/n100.r01.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" "n100.r01.s042_output/n100.r01.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s042_output/n100.r01.s042.reference.fas" "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" > "n100.r01.s042_output/n100.r01.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s042_output/n100.r01.s042.reference.fas" --call-indels "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" > "n100.r01.s042_output/n100.r01.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" > "n100.r01.s042_output/n100.r01.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s042_output/n100.r01.s042.depth.txt" "n100.r01.s042_output/n100.r01.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s042_output/n100.r01.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s042_output/n100.r01.s042.reference.fas" | bcftools consensus -m "n100.r01.s042_output/n100.r01.s042.low_depth.tsv" tmp.vcf.gz > "n100.r01.s042_output/n100.r01.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:39 scheduler task 4ad47abd (flow 264f4a9d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:39 scheduler task 4ad47abd (flow 264f4a9d): waiting for completion (try 0): started
2021/07/08 13:53:39  ->  n100.r01.s045.Main.out_file 264f4a9d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:39 n100.r01.s045.Main.out_file 264f4a9d n100/r01/n100.r01.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:849c71747f81ce9ca8080bee02b69fb39aa35aaaba29b07c3f5c10870f39714b
	sha256:264f4a9d0f6a5c460e652630fffa1f71a9d8b47ceda359c7a9cf1690b638413e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ad47abd775611debf664ed5964b531991b779559b4190466a662915c7362090
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s045_output"
	    wget -O "n100.r01.s045_output/n100.r01.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s045_output/n100.r01.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s045_output/n100.r01.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s045_output/n100.r01.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s045_output/n100.r01.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s045_output/n100.r01.s045.reference.fas" "n100.r01.s045_output/n100.r01.s045.fq1.fastq" "n100.r01.s045_output/n100.r01.s045.fq2.fastq" | samtools view -bS - > "n100.r01.s045_output/n100.r01.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s045_output/n100.r01.s045.untrimmed.sorted.bam" "n100.r01.s045_output/n100.r01.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s045_output/n100.r01.s045.untrimmed.sorted.bam" -b "n100.r01.s045_output/n100.r01.s045.primers.bed" -p "n100.r01.s045_output/n100.r01.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" "n100.r01.s045_output/n100.r01.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s045_output/n100.r01.s045.reference.fas" "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" > "n100.r01.s045_output/n100.r01.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s045_output/n100.r01.s045.reference.fas" --call-indels "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" > "n100.r01.s045_output/n100.r01.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" > "n100.r01.s045_output/n100.r01.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s045_output/n100.r01.s045.depth.txt" "n100.r01.s045_output/n100.r01.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s045_output/n100.r01.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s045_output/n100.r01.s045.reference.fas" | bcftools consensus -m "n100.r01.s045_output/n100.r01.s045.low_depth.tsv" tmp.vcf.gz > "n100.r01.s045_output/n100.r01.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:40 scheduler task 5ba3ce8d (flow e1b32ab1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:40 scheduler task 5ba3ce8d (flow e1b32ab1): waiting for completion (try 0): started
2021/07/08 13:53:40  ->  n100.r01.s016.Main.out_file e1b32ab1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:40 n100.r01.s016.Main.out_file e1b32ab1 n100/r01/n100.r01.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9ce42d19886c626d57c7e522b6f8ee985d59798a02e52d149fcf54642d0562e9
	sha256:e1b32ab1edbe7e71ca326150f2cf4760b6d2c9cb0a60e412d9ec40feeb7b088d
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ba3ce8d46b1662307070328ba7257fa0834871c611645e5b42aa2145c378226
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s016_output"
	    wget -O "n100.r01.s016_output/n100.r01.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s016_output/n100.r01.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s016_output/n100.r01.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s016_output/n100.r01.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s016_output/n100.r01.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s016_output/n100.r01.s016.reference.fas" "n100.r01.s016_output/n100.r01.s016.fq1.fastq" "n100.r01.s016_output/n100.r01.s016.fq2.fastq" | samtools view -bS - > "n100.r01.s016_output/n100.r01.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s016_output/n100.r01.s016.untrimmed.sorted.bam" "n100.r01.s016_output/n100.r01.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s016_output/n100.r01.s016.untrimmed.sorted.bam" -b "n100.r01.s016_output/n100.r01.s016.primers.bed" -p "n100.r01.s016_output/n100.r01.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" "n100.r01.s016_output/n100.r01.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s016_output/n100.r01.s016.reference.fas" "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" > "n100.r01.s016_output/n100.r01.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s016_output/n100.r01.s016.reference.fas" --call-indels "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" > "n100.r01.s016_output/n100.r01.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" > "n100.r01.s016_output/n100.r01.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s016_output/n100.r01.s016.depth.txt" "n100.r01.s016_output/n100.r01.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s016_output/n100.r01.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s016_output/n100.r01.s016.reference.fas" | bcftools consensus -m "n100.r01.s016_output/n100.r01.s016.low_depth.tsv" tmp.vcf.gz > "n100.r01.s016_output/n100.r01.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:40 scheduler task 468f0ab1 (flow acea3fd9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:40 scheduler task 468f0ab1 (flow acea3fd9): waiting for completion (try 0): started
2021/07/08 13:53:40  ->  n100.r01.s018.Main.out_file acea3fd9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:40 n100.r01.s018.Main.out_file acea3fd9 n100/r01/n100.r01.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:807e27812ae98f205a726567adfe0b9807973d83324c52addce381b4881611d4
	sha256:acea3fd9adc816664da9b9034485a9d1e0c8b05e4c536cba20aa1d28e403d10f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/468f0ab16d0709694c433697593e5d70e4496f5d15c0b2e02336ccc0fe516191
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s018_output"
	    wget -O "n100.r01.s018_output/n100.r01.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s018_output/n100.r01.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s018_output/n100.r01.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s018_output/n100.r01.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s018_output/n100.r01.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s018_output/n100.r01.s018.reference.fas" "n100.r01.s018_output/n100.r01.s018.fq1.fastq" "n100.r01.s018_output/n100.r01.s018.fq2.fastq" | samtools view -bS - > "n100.r01.s018_output/n100.r01.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s018_output/n100.r01.s018.untrimmed.sorted.bam" "n100.r01.s018_output/n100.r01.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s018_output/n100.r01.s018.untrimmed.sorted.bam" -b "n100.r01.s018_output/n100.r01.s018.primers.bed" -p "n100.r01.s018_output/n100.r01.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" "n100.r01.s018_output/n100.r01.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s018_output/n100.r01.s018.reference.fas" "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" > "n100.r01.s018_output/n100.r01.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s018_output/n100.r01.s018.reference.fas" --call-indels "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" > "n100.r01.s018_output/n100.r01.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" > "n100.r01.s018_output/n100.r01.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s018_output/n100.r01.s018.depth.txt" "n100.r01.s018_output/n100.r01.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s018_output/n100.r01.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s018_output/n100.r01.s018.reference.fas" | bcftools consensus -m "n100.r01.s018_output/n100.r01.s018.low_depth.tsv" tmp.vcf.gz > "n100.r01.s018_output/n100.r01.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:40 scheduler task dc6ab090 (flow a6c01e21): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:40 scheduler task dc6ab090 (flow a6c01e21): waiting for completion (try 0): started
2021/07/08 13:53:40  ->  n100.r01.s052.Main.out_file a6c01e21 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:40 n100.r01.s052.Main.out_file a6c01e21 n100/r01/n100.r01.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1f0a888d22559fea07ea0d7f68f1ddacced326289019e21df38b76f09619f88
	sha256:a6c01e21fb7476fb9cfa35b651eea9f6c5f86d473fe2e05af1132210548db6f7
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dc6ab09046238c9445219efb5b99506b992918a97c2ec0c1945b2d84c77a4440
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s052_output"
	    wget -O "n100.r01.s052_output/n100.r01.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s052_output/n100.r01.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s052_output/n100.r01.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s052_output/n100.r01.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s052_output/n100.r01.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s052_output/n100.r01.s052.reference.fas" "n100.r01.s052_output/n100.r01.s052.fq1.fastq" "n100.r01.s052_output/n100.r01.s052.fq2.fastq" | samtools view -bS - > "n100.r01.s052_output/n100.r01.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s052_output/n100.r01.s052.untrimmed.sorted.bam" "n100.r01.s052_output/n100.r01.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s052_output/n100.r01.s052.untrimmed.sorted.bam" -b "n100.r01.s052_output/n100.r01.s052.primers.bed" -p "n100.r01.s052_output/n100.r01.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" "n100.r01.s052_output/n100.r01.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s052_output/n100.r01.s052.reference.fas" "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" > "n100.r01.s052_output/n100.r01.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s052_output/n100.r01.s052.reference.fas" --call-indels "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" > "n100.r01.s052_output/n100.r01.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" > "n100.r01.s052_output/n100.r01.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s052_output/n100.r01.s052.depth.txt" "n100.r01.s052_output/n100.r01.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s052_output/n100.r01.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s052_output/n100.r01.s052.reference.fas" | bcftools consensus -m "n100.r01.s052_output/n100.r01.s052.low_depth.tsv" tmp.vcf.gz > "n100.r01.s052_output/n100.r01.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:40 scheduler task 557c581c (flow ec5fcaaf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:40 scheduler task 557c581c (flow ec5fcaaf): waiting for completion (try 0): started
2021/07/08 13:53:40  ->  n100.r01.s069.Main.out_file ec5fcaaf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:40 n100.r01.s069.Main.out_file ec5fcaaf n100/r01/n100.r01.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebf8d9783e26b97a11eb1b08e0d35099c1909760778854d23bdeb0b7f000c743
	sha256:ec5fcaafdba330ae0533d88eeb407289f67731f88dbf933f88bc3fd65a9e5638
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/557c581cd839bf44cdfa15918e18999a6b1dc2b92a2e32c1707f5a9c3e6e59f1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s069_output"
	    wget -O "n100.r01.s069_output/n100.r01.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s069_output/n100.r01.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s069_output/n100.r01.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s069_output/n100.r01.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s069_output/n100.r01.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s069_output/n100.r01.s069.reference.fas" "n100.r01.s069_output/n100.r01.s069.fq1.fastq" "n100.r01.s069_output/n100.r01.s069.fq2.fastq" | samtools view -bS - > "n100.r01.s069_output/n100.r01.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s069_output/n100.r01.s069.untrimmed.sorted.bam" "n100.r01.s069_output/n100.r01.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s069_output/n100.r01.s069.untrimmed.sorted.bam" -b "n100.r01.s069_output/n100.r01.s069.primers.bed" -p "n100.r01.s069_output/n100.r01.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" "n100.r01.s069_output/n100.r01.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s069_output/n100.r01.s069.reference.fas" "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" > "n100.r01.s069_output/n100.r01.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s069_output/n100.r01.s069.reference.fas" --call-indels "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" > "n100.r01.s069_output/n100.r01.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" > "n100.r01.s069_output/n100.r01.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s069_output/n100.r01.s069.depth.txt" "n100.r01.s069_output/n100.r01.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s069_output/n100.r01.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s069_output/n100.r01.s069.reference.fas" | bcftools consensus -m "n100.r01.s069_output/n100.r01.s069.low_depth.tsv" tmp.vcf.gz > "n100.r01.s069_output/n100.r01.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:40 scheduler task de4e06de (flow 337713ba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:40 scheduler task de4e06de (flow 337713ba): waiting for completion (try 0): started
2021/07/08 13:53:40  ->  n100.r01.s012.Main.out_file 337713ba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:40 n100.r01.s012.Main.out_file 337713ba n100/r01/n100.r01.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d05d2878ca988975d3342f4fde8bf679859329d7e1d7b2305dbb3cef422dae79
	sha256:337713baed0b8f66c5fcf87957150b9ab6d00f782fb39c6a943d49fd53327b2a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/de4e06dea2e00627e2391b56f02c8f3bb816cc8f5aa8e8f2ab19613134ef4f42
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s012_output"
	    wget -O "n100.r01.s012_output/n100.r01.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s012_output/n100.r01.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s012_output/n100.r01.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s012_output/n100.r01.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s012_output/n100.r01.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s012_output/n100.r01.s012.reference.fas" "n100.r01.s012_output/n100.r01.s012.fq1.fastq" "n100.r01.s012_output/n100.r01.s012.fq2.fastq" | samtools view -bS - > "n100.r01.s012_output/n100.r01.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s012_output/n100.r01.s012.untrimmed.sorted.bam" "n100.r01.s012_output/n100.r01.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s012_output/n100.r01.s012.untrimmed.sorted.bam" -b "n100.r01.s012_output/n100.r01.s012.primers.bed" -p "n100.r01.s012_output/n100.r01.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" "n100.r01.s012_output/n100.r01.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s012_output/n100.r01.s012.reference.fas" "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" > "n100.r01.s012_output/n100.r01.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s012_output/n100.r01.s012.reference.fas" --call-indels "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" > "n100.r01.s012_output/n100.r01.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" > "n100.r01.s012_output/n100.r01.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s012_output/n100.r01.s012.depth.txt" "n100.r01.s012_output/n100.r01.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s012_output/n100.r01.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s012_output/n100.r01.s012.reference.fas" | bcftools consensus -m "n100.r01.s012_output/n100.r01.s012.low_depth.tsv" tmp.vcf.gz > "n100.r01.s012_output/n100.r01.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:40 scheduler task aae3d819 (flow cb63bac2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:40 scheduler task aae3d819 (flow cb63bac2): waiting for completion (try 0): started
2021/07/08 13:53:40  ->  n100.r01.s002.Main.out_file cb63bac2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:40 n100.r01.s002.Main.out_file cb63bac2 n100/r01/n100.r01.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0bd02835a703b4e081c1be6d509023e864574a17f49456708c4fdec76ea8272
	sha256:cb63bac28fa2ac9f9ea655c45b43d55279b1da5ea114d807d626ece27a327a90
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aae3d819de35651711637f2827ed4054abfae89f99f38707f6ba0093ef5b5fee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s002_output"
	    wget -O "n100.r01.s002_output/n100.r01.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s002_output/n100.r01.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s002_output/n100.r01.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s002_output/n100.r01.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s002_output/n100.r01.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s002_output/n100.r01.s002.reference.fas" "n100.r01.s002_output/n100.r01.s002.fq1.fastq" "n100.r01.s002_output/n100.r01.s002.fq2.fastq" | samtools view -bS - > "n100.r01.s002_output/n100.r01.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s002_output/n100.r01.s002.untrimmed.sorted.bam" "n100.r01.s002_output/n100.r01.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s002_output/n100.r01.s002.untrimmed.sorted.bam" -b "n100.r01.s002_output/n100.r01.s002.primers.bed" -p "n100.r01.s002_output/n100.r01.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" "n100.r01.s002_output/n100.r01.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s002_output/n100.r01.s002.reference.fas" "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" > "n100.r01.s002_output/n100.r01.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s002_output/n100.r01.s002.reference.fas" --call-indels "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" > "n100.r01.s002_output/n100.r01.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" > "n100.r01.s002_output/n100.r01.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s002_output/n100.r01.s002.depth.txt" "n100.r01.s002_output/n100.r01.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s002_output/n100.r01.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s002_output/n100.r01.s002.reference.fas" | bcftools consensus -m "n100.r01.s002_output/n100.r01.s002.low_depth.tsv" tmp.vcf.gz > "n100.r01.s002_output/n100.r01.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task 251c61ad (flow b62d3501): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task 251c61ad (flow b62d3501): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s088.Main.out_file b62d3501 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s088.Main.out_file b62d3501 n100/r01/n100.r01.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9a584008d564c96b4a3ab698a1c27b586658782840f8ddb47cca465f48e081c0
	sha256:b62d3501e77e8bfa4ad81f7a603e7274b938dd329b504bdc869567c7f65a9241
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/251c61ad87f04ad93397c061fed7100aeb3bef1477648a12ccdc43fa26ecf20e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s088_output"
	    wget -O "n100.r01.s088_output/n100.r01.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s088_output/n100.r01.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s088_output/n100.r01.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s088_output/n100.r01.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s088_output/n100.r01.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s088_output/n100.r01.s088.reference.fas" "n100.r01.s088_output/n100.r01.s088.fq1.fastq" "n100.r01.s088_output/n100.r01.s088.fq2.fastq" | samtools view -bS - > "n100.r01.s088_output/n100.r01.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s088_output/n100.r01.s088.untrimmed.sorted.bam" "n100.r01.s088_output/n100.r01.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s088_output/n100.r01.s088.untrimmed.sorted.bam" -b "n100.r01.s088_output/n100.r01.s088.primers.bed" -p "n100.r01.s088_output/n100.r01.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" "n100.r01.s088_output/n100.r01.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s088_output/n100.r01.s088.reference.fas" "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" > "n100.r01.s088_output/n100.r01.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s088_output/n100.r01.s088.reference.fas" --call-indels "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" > "n100.r01.s088_output/n100.r01.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" > "n100.r01.s088_output/n100.r01.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s088_output/n100.r01.s088.depth.txt" "n100.r01.s088_output/n100.r01.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s088_output/n100.r01.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s088_output/n100.r01.s088.reference.fas" | bcftools consensus -m "n100.r01.s088_output/n100.r01.s088.low_depth.tsv" tmp.vcf.gz > "n100.r01.s088_output/n100.r01.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task c5194497 (flow bb46d7da): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task c5194497 (flow bb46d7da): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s028.Main.out_file bb46d7da exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s028.Main.out_file bb46d7da n100/r01/n100.r01.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b92c846ee4b1eab6ce150e9f5ae3a8c1319dee7fdb05e4d2126a35d2d79af0ee
	sha256:bb46d7da12347fd88311c823e0cc6469d6f0cfad697e21ecd099823ab17cd6a8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c519449794cfdae964dd2345413ecd3df9e3883131295d30f8c80a969713eaa8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s028_output"
	    wget -O "n100.r01.s028_output/n100.r01.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s028_output/n100.r01.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s028_output/n100.r01.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s028_output/n100.r01.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s028_output/n100.r01.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s028_output/n100.r01.s028.reference.fas" "n100.r01.s028_output/n100.r01.s028.fq1.fastq" "n100.r01.s028_output/n100.r01.s028.fq2.fastq" | samtools view -bS - > "n100.r01.s028_output/n100.r01.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s028_output/n100.r01.s028.untrimmed.sorted.bam" "n100.r01.s028_output/n100.r01.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s028_output/n100.r01.s028.untrimmed.sorted.bam" -b "n100.r01.s028_output/n100.r01.s028.primers.bed" -p "n100.r01.s028_output/n100.r01.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" "n100.r01.s028_output/n100.r01.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s028_output/n100.r01.s028.reference.fas" "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" > "n100.r01.s028_output/n100.r01.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s028_output/n100.r01.s028.reference.fas" --call-indels "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" > "n100.r01.s028_output/n100.r01.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" > "n100.r01.s028_output/n100.r01.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s028_output/n100.r01.s028.depth.txt" "n100.r01.s028_output/n100.r01.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s028_output/n100.r01.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s028_output/n100.r01.s028.reference.fas" | bcftools consensus -m "n100.r01.s028_output/n100.r01.s028.low_depth.tsv" tmp.vcf.gz > "n100.r01.s028_output/n100.r01.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task e1e24653 (flow 9d6059f7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task e1e24653 (flow 9d6059f7): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s086.Main.out_file 9d6059f7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s086.Main.out_file 9d6059f7 n100/r01/n100.r01.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae4bb5de49e539781e9672c3a75470611610ee2fee1a02d1d8ea151b7541edc1
	sha256:9d6059f7837fc7ab3fa2c34feeb2de42d4aad3c73c5fb2dd56e5149f1d6ce93a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e1e246536cec9bade410062616ae7fcd2085e3b6f974e39cf90a1b9c08f898a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s086_output"
	    wget -O "n100.r01.s086_output/n100.r01.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s086_output/n100.r01.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s086_output/n100.r01.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s086_output/n100.r01.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s086_output/n100.r01.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s086_output/n100.r01.s086.reference.fas" "n100.r01.s086_output/n100.r01.s086.fq1.fastq" "n100.r01.s086_output/n100.r01.s086.fq2.fastq" | samtools view -bS - > "n100.r01.s086_output/n100.r01.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s086_output/n100.r01.s086.untrimmed.sorted.bam" "n100.r01.s086_output/n100.r01.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s086_output/n100.r01.s086.untrimmed.sorted.bam" -b "n100.r01.s086_output/n100.r01.s086.primers.bed" -p "n100.r01.s086_output/n100.r01.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" "n100.r01.s086_output/n100.r01.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s086_output/n100.r01.s086.reference.fas" "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" > "n100.r01.s086_output/n100.r01.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s086_output/n100.r01.s086.reference.fas" --call-indels "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" > "n100.r01.s086_output/n100.r01.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" > "n100.r01.s086_output/n100.r01.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s086_output/n100.r01.s086.depth.txt" "n100.r01.s086_output/n100.r01.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s086_output/n100.r01.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s086_output/n100.r01.s086.reference.fas" | bcftools consensus -m "n100.r01.s086_output/n100.r01.s086.low_depth.tsv" tmp.vcf.gz > "n100.r01.s086_output/n100.r01.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task e89bffd7 (flow 5f65da5f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task e89bffd7 (flow 5f65da5f): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s064.Main.out_file 5f65da5f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s064.Main.out_file 5f65da5f n100/r01/n100.r01.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ead516d54d8f55e6db652e82800075e83ecf065c48bb39b45f55e3826137fdc
	sha256:5f65da5f51dfe99b5237ebe1f2abb6ac1e064720d5c998f1fa80ab9772d6f9b8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e89bffd70b7c8b0ef01499664fd3ea2fd6e20b86beb313c3d9554a47b325319e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s064_output"
	    wget -O "n100.r01.s064_output/n100.r01.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s064_output/n100.r01.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s064_output/n100.r01.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s064_output/n100.r01.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s064_output/n100.r01.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s064_output/n100.r01.s064.reference.fas" "n100.r01.s064_output/n100.r01.s064.fq1.fastq" "n100.r01.s064_output/n100.r01.s064.fq2.fastq" | samtools view -bS - > "n100.r01.s064_output/n100.r01.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s064_output/n100.r01.s064.untrimmed.sorted.bam" "n100.r01.s064_output/n100.r01.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s064_output/n100.r01.s064.untrimmed.sorted.bam" -b "n100.r01.s064_output/n100.r01.s064.primers.bed" -p "n100.r01.s064_output/n100.r01.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" "n100.r01.s064_output/n100.r01.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s064_output/n100.r01.s064.reference.fas" "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" > "n100.r01.s064_output/n100.r01.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s064_output/n100.r01.s064.reference.fas" --call-indels "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" > "n100.r01.s064_output/n100.r01.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" > "n100.r01.s064_output/n100.r01.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s064_output/n100.r01.s064.depth.txt" "n100.r01.s064_output/n100.r01.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s064_output/n100.r01.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s064_output/n100.r01.s064.reference.fas" | bcftools consensus -m "n100.r01.s064_output/n100.r01.s064.low_depth.tsv" tmp.vcf.gz > "n100.r01.s064_output/n100.r01.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task 0c141a13 (flow 9df7cd9b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task 0c141a13 (flow 9df7cd9b): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s027.Main.out_file 9df7cd9b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s027.Main.out_file 9df7cd9b n100/r01/n100.r01.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:995ec0663ff050104d70744aef606d0858ed21b422853f4fa1626924bb4e88fc
	sha256:9df7cd9bf1dda987e7860f6da1ae315a45747f563d8cbff2e6e935681c2fe39a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0c141a131d77d1e5b5265ca05e4282ef1fff1981663de2361df9b6ab4a26039a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s027_output"
	    wget -O "n100.r01.s027_output/n100.r01.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s027_output/n100.r01.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s027_output/n100.r01.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s027_output/n100.r01.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s027_output/n100.r01.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s027_output/n100.r01.s027.reference.fas" "n100.r01.s027_output/n100.r01.s027.fq1.fastq" "n100.r01.s027_output/n100.r01.s027.fq2.fastq" | samtools view -bS - > "n100.r01.s027_output/n100.r01.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s027_output/n100.r01.s027.untrimmed.sorted.bam" "n100.r01.s027_output/n100.r01.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s027_output/n100.r01.s027.untrimmed.sorted.bam" -b "n100.r01.s027_output/n100.r01.s027.primers.bed" -p "n100.r01.s027_output/n100.r01.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" "n100.r01.s027_output/n100.r01.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s027_output/n100.r01.s027.reference.fas" "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" > "n100.r01.s027_output/n100.r01.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s027_output/n100.r01.s027.reference.fas" --call-indels "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" > "n100.r01.s027_output/n100.r01.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" > "n100.r01.s027_output/n100.r01.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s027_output/n100.r01.s027.depth.txt" "n100.r01.s027_output/n100.r01.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s027_output/n100.r01.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s027_output/n100.r01.s027.reference.fas" | bcftools consensus -m "n100.r01.s027_output/n100.r01.s027.low_depth.tsv" tmp.vcf.gz > "n100.r01.s027_output/n100.r01.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task cd8b0435 (flow 831ed94c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task cd8b0435 (flow 831ed94c): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s093.Main.out_file 831ed94c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s093.Main.out_file 831ed94c n100/r01/n100.r01.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dd4958faf7f678de67940f813a153f9c5d16470ad6bd6fd1f26e3229654ae683
	sha256:831ed94cb4fdaf97ce67c399e5c2600684eec95781f2ba47d3ca6b6dc3c1048f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cd8b0435364d8445e20e922074b6f27eb1809e47a3776c89e5266314410f63a1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s093_output"
	    wget -O "n100.r01.s093_output/n100.r01.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s093_output/n100.r01.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s093_output/n100.r01.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s093_output/n100.r01.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s093_output/n100.r01.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s093_output/n100.r01.s093.reference.fas" "n100.r01.s093_output/n100.r01.s093.fq1.fastq" "n100.r01.s093_output/n100.r01.s093.fq2.fastq" | samtools view -bS - > "n100.r01.s093_output/n100.r01.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s093_output/n100.r01.s093.untrimmed.sorted.bam" "n100.r01.s093_output/n100.r01.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s093_output/n100.r01.s093.untrimmed.sorted.bam" -b "n100.r01.s093_output/n100.r01.s093.primers.bed" -p "n100.r01.s093_output/n100.r01.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" "n100.r01.s093_output/n100.r01.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s093_output/n100.r01.s093.reference.fas" "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" > "n100.r01.s093_output/n100.r01.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s093_output/n100.r01.s093.reference.fas" --call-indels "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" > "n100.r01.s093_output/n100.r01.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" > "n100.r01.s093_output/n100.r01.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s093_output/n100.r01.s093.depth.txt" "n100.r01.s093_output/n100.r01.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s093_output/n100.r01.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s093_output/n100.r01.s093.reference.fas" | bcftools consensus -m "n100.r01.s093_output/n100.r01.s093.low_depth.tsv" tmp.vcf.gz > "n100.r01.s093_output/n100.r01.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task 00418e33 (flow 580d88f9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task 00418e33 (flow 580d88f9): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s005.Main.out_file 580d88f9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s005.Main.out_file 580d88f9 n100/r01/n100.r01.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5bcab7fa1fe83bd6ecc484d51571a61736b6b3759d713fe765011da0691e8650
	sha256:580d88f9fedf00a2ba5b765d3d8c5c2ddee8817e303833c2e4431f2dde4ea827
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/00418e33c58bf4ea0bde8bf3542cd040b4e84355ae6bebbbd101f8ddad42e6bb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s005_output"
	    wget -O "n100.r01.s005_output/n100.r01.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s005_output/n100.r01.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s005_output/n100.r01.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s005_output/n100.r01.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s005_output/n100.r01.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s005_output/n100.r01.s005.reference.fas" "n100.r01.s005_output/n100.r01.s005.fq1.fastq" "n100.r01.s005_output/n100.r01.s005.fq2.fastq" | samtools view -bS - > "n100.r01.s005_output/n100.r01.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s005_output/n100.r01.s005.untrimmed.sorted.bam" "n100.r01.s005_output/n100.r01.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s005_output/n100.r01.s005.untrimmed.sorted.bam" -b "n100.r01.s005_output/n100.r01.s005.primers.bed" -p "n100.r01.s005_output/n100.r01.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" "n100.r01.s005_output/n100.r01.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s005_output/n100.r01.s005.reference.fas" "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" > "n100.r01.s005_output/n100.r01.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s005_output/n100.r01.s005.reference.fas" --call-indels "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" > "n100.r01.s005_output/n100.r01.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" > "n100.r01.s005_output/n100.r01.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s005_output/n100.r01.s005.depth.txt" "n100.r01.s005_output/n100.r01.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s005_output/n100.r01.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s005_output/n100.r01.s005.reference.fas" | bcftools consensus -m "n100.r01.s005_output/n100.r01.s005.low_depth.tsv" tmp.vcf.gz > "n100.r01.s005_output/n100.r01.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:41 scheduler task 3cbe7084 (flow f4094bfe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:41 scheduler task 3cbe7084 (flow f4094bfe): waiting for completion (try 0): started
2021/07/08 13:53:41  ->  n100.r01.s059.Main.out_file f4094bfe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:41 n100.r01.s059.Main.out_file f4094bfe n100/r01/n100.r01.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4ada77f0eb3584f20f2bfe72e2c26faa90624e7a57456a5415e9dc80fd6dae2b
	sha256:f4094bfe7ff3e2c830fd4fa42f11e9efda1986e88ee37fcdfdaeccd679d61552
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3cbe70845896f8f3951c2556fb2b9065facbdc8c53b7264977a6d358c2ec7de5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s059_output"
	    wget -O "n100.r01.s059_output/n100.r01.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s059_output/n100.r01.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s059_output/n100.r01.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s059_output/n100.r01.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s059_output/n100.r01.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s059_output/n100.r01.s059.reference.fas" "n100.r01.s059_output/n100.r01.s059.fq1.fastq" "n100.r01.s059_output/n100.r01.s059.fq2.fastq" | samtools view -bS - > "n100.r01.s059_output/n100.r01.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s059_output/n100.r01.s059.untrimmed.sorted.bam" "n100.r01.s059_output/n100.r01.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s059_output/n100.r01.s059.untrimmed.sorted.bam" -b "n100.r01.s059_output/n100.r01.s059.primers.bed" -p "n100.r01.s059_output/n100.r01.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" "n100.r01.s059_output/n100.r01.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s059_output/n100.r01.s059.reference.fas" "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" > "n100.r01.s059_output/n100.r01.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s059_output/n100.r01.s059.reference.fas" --call-indels "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" > "n100.r01.s059_output/n100.r01.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" > "n100.r01.s059_output/n100.r01.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s059_output/n100.r01.s059.depth.txt" "n100.r01.s059_output/n100.r01.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s059_output/n100.r01.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s059_output/n100.r01.s059.reference.fas" | bcftools consensus -m "n100.r01.s059_output/n100.r01.s059.low_depth.tsv" tmp.vcf.gz > "n100.r01.s059_output/n100.r01.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task 71597e7d (flow 3470f7ea): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task 71597e7d (flow 3470f7ea): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s058.Main.out_file 3470f7ea exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s058.Main.out_file 3470f7ea n100/r01/n100.r01.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:271b5cad2a621e14082c3f6dd718d7bde281154f507b2a6312d60a5d62128032
	sha256:3470f7eafc45c18e77309715bbebbc38c3df5afb16e9c25c61d34720724c7287
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/71597e7da37bf2cdc5851e561c721a23e76fb54c531fc028ff197f96bd74a1c1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s058_output"
	    wget -O "n100.r01.s058_output/n100.r01.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s058_output/n100.r01.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s058_output/n100.r01.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s058_output/n100.r01.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s058_output/n100.r01.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s058_output/n100.r01.s058.reference.fas" "n100.r01.s058_output/n100.r01.s058.fq1.fastq" "n100.r01.s058_output/n100.r01.s058.fq2.fastq" | samtools view -bS - > "n100.r01.s058_output/n100.r01.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s058_output/n100.r01.s058.untrimmed.sorted.bam" "n100.r01.s058_output/n100.r01.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s058_output/n100.r01.s058.untrimmed.sorted.bam" -b "n100.r01.s058_output/n100.r01.s058.primers.bed" -p "n100.r01.s058_output/n100.r01.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" "n100.r01.s058_output/n100.r01.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s058_output/n100.r01.s058.reference.fas" "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" > "n100.r01.s058_output/n100.r01.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s058_output/n100.r01.s058.reference.fas" --call-indels "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" > "n100.r01.s058_output/n100.r01.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" > "n100.r01.s058_output/n100.r01.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s058_output/n100.r01.s058.depth.txt" "n100.r01.s058_output/n100.r01.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s058_output/n100.r01.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s058_output/n100.r01.s058.reference.fas" | bcftools consensus -m "n100.r01.s058_output/n100.r01.s058.low_depth.tsv" tmp.vcf.gz > "n100.r01.s058_output/n100.r01.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task 378eabfc (flow 5ba5cdc9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task 378eabfc (flow 5ba5cdc9): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s014.Main.out_file 5ba5cdc9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s014.Main.out_file 5ba5cdc9 n100/r01/n100.r01.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:44d9e8d6e468b3b32dabb1c29001179a3d22f7287cb5cf016a17f7acceab1cac
	sha256:5ba5cdc975715b494bfb756c96b5bcd1d54ea2ee5f4ec5c7b677f74ef9d2ef0a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/378eabfc733bd3d81a451fca113657d833b9bf1a3b1057d6ba822d48bea0e86f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s014_output"
	    wget -O "n100.r01.s014_output/n100.r01.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s014_output/n100.r01.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s014_output/n100.r01.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s014_output/n100.r01.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s014_output/n100.r01.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s014_output/n100.r01.s014.reference.fas" "n100.r01.s014_output/n100.r01.s014.fq1.fastq" "n100.r01.s014_output/n100.r01.s014.fq2.fastq" | samtools view -bS - > "n100.r01.s014_output/n100.r01.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s014_output/n100.r01.s014.untrimmed.sorted.bam" "n100.r01.s014_output/n100.r01.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s014_output/n100.r01.s014.untrimmed.sorted.bam" -b "n100.r01.s014_output/n100.r01.s014.primers.bed" -p "n100.r01.s014_output/n100.r01.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" "n100.r01.s014_output/n100.r01.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s014_output/n100.r01.s014.reference.fas" "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" > "n100.r01.s014_output/n100.r01.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s014_output/n100.r01.s014.reference.fas" --call-indels "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" > "n100.r01.s014_output/n100.r01.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" > "n100.r01.s014_output/n100.r01.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s014_output/n100.r01.s014.depth.txt" "n100.r01.s014_output/n100.r01.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s014_output/n100.r01.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s014_output/n100.r01.s014.reference.fas" | bcftools consensus -m "n100.r01.s014_output/n100.r01.s014.low_depth.tsv" tmp.vcf.gz > "n100.r01.s014_output/n100.r01.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task 9ad01cec (flow 6dee772b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task 9ad01cec (flow 6dee772b): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s033.Main.out_file 6dee772b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s033.Main.out_file 6dee772b n100/r01/n100.r01.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bbaa8b4d3d895a61f2325486bc08a059e32ffcc543b0437576f87c909881c67b
	sha256:6dee772b1dd7a591cfc828fca5021748efd48b0d73bc30ea6822a2d5ab598dbb
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9ad01cec3a5f785457bfc396dd9aa0bbab7435765ac1a462d585bfb3ae7bcadb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s033_output"
	    wget -O "n100.r01.s033_output/n100.r01.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s033_output/n100.r01.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s033_output/n100.r01.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s033_output/n100.r01.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s033_output/n100.r01.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s033_output/n100.r01.s033.reference.fas" "n100.r01.s033_output/n100.r01.s033.fq1.fastq" "n100.r01.s033_output/n100.r01.s033.fq2.fastq" | samtools view -bS - > "n100.r01.s033_output/n100.r01.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s033_output/n100.r01.s033.untrimmed.sorted.bam" "n100.r01.s033_output/n100.r01.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s033_output/n100.r01.s033.untrimmed.sorted.bam" -b "n100.r01.s033_output/n100.r01.s033.primers.bed" -p "n100.r01.s033_output/n100.r01.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" "n100.r01.s033_output/n100.r01.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s033_output/n100.r01.s033.reference.fas" "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" > "n100.r01.s033_output/n100.r01.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s033_output/n100.r01.s033.reference.fas" --call-indels "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" > "n100.r01.s033_output/n100.r01.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" > "n100.r01.s033_output/n100.r01.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s033_output/n100.r01.s033.depth.txt" "n100.r01.s033_output/n100.r01.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s033_output/n100.r01.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s033_output/n100.r01.s033.reference.fas" | bcftools consensus -m "n100.r01.s033_output/n100.r01.s033.low_depth.tsv" tmp.vcf.gz > "n100.r01.s033_output/n100.r01.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task 6ec2dcb3 (flow e856bd44): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task 6ec2dcb3 (flow e856bd44): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s043.Main.out_file e856bd44 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s043.Main.out_file e856bd44 n100/r01/n100.r01.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a393cd2df4fc625b6a7b73819a45c54a1b8b36477e9cf7f9c8b36fe2f188fa0a
	sha256:e856bd44ec27391eab13af0e7d727fd248c39c9edd5e83edde9e847f2b86d760
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ec2dcb3852da82a2fa7dd716135a919a9093ce021ad7a4c29834d3f6aa3532b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s043_output"
	    wget -O "n100.r01.s043_output/n100.r01.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s043_output/n100.r01.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s043_output/n100.r01.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s043_output/n100.r01.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s043_output/n100.r01.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s043_output/n100.r01.s043.reference.fas" "n100.r01.s043_output/n100.r01.s043.fq1.fastq" "n100.r01.s043_output/n100.r01.s043.fq2.fastq" | samtools view -bS - > "n100.r01.s043_output/n100.r01.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s043_output/n100.r01.s043.untrimmed.sorted.bam" "n100.r01.s043_output/n100.r01.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s043_output/n100.r01.s043.untrimmed.sorted.bam" -b "n100.r01.s043_output/n100.r01.s043.primers.bed" -p "n100.r01.s043_output/n100.r01.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" "n100.r01.s043_output/n100.r01.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s043_output/n100.r01.s043.reference.fas" "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" > "n100.r01.s043_output/n100.r01.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s043_output/n100.r01.s043.reference.fas" --call-indels "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" > "n100.r01.s043_output/n100.r01.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" > "n100.r01.s043_output/n100.r01.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s043_output/n100.r01.s043.depth.txt" "n100.r01.s043_output/n100.r01.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s043_output/n100.r01.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s043_output/n100.r01.s043.reference.fas" | bcftools consensus -m "n100.r01.s043_output/n100.r01.s043.low_depth.tsv" tmp.vcf.gz > "n100.r01.s043_output/n100.r01.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task b25ce208 (flow f21eee98): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task b25ce208 (flow f21eee98): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s036.Main.out_file f21eee98 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s036.Main.out_file f21eee98 n100/r01/n100.r01.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8474f9a79dd894343dd164f9b2fb5419744c55f9bb0e40daa949916d0aca59b3
	sha256:f21eee98bf4eddbd47d8eed1a1aae67c6170fd84fce7ab8b5c9c6d4f5ca4aa44
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b25ce208338275b663cca6ea8e42535b8c7d754a20e70342f1a605eccb216042
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s036_output"
	    wget -O "n100.r01.s036_output/n100.r01.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s036_output/n100.r01.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s036_output/n100.r01.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s036_output/n100.r01.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s036_output/n100.r01.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s036_output/n100.r01.s036.reference.fas" "n100.r01.s036_output/n100.r01.s036.fq1.fastq" "n100.r01.s036_output/n100.r01.s036.fq2.fastq" | samtools view -bS - > "n100.r01.s036_output/n100.r01.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s036_output/n100.r01.s036.untrimmed.sorted.bam" "n100.r01.s036_output/n100.r01.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s036_output/n100.r01.s036.untrimmed.sorted.bam" -b "n100.r01.s036_output/n100.r01.s036.primers.bed" -p "n100.r01.s036_output/n100.r01.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" "n100.r01.s036_output/n100.r01.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s036_output/n100.r01.s036.reference.fas" "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" > "n100.r01.s036_output/n100.r01.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s036_output/n100.r01.s036.reference.fas" --call-indels "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" > "n100.r01.s036_output/n100.r01.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" > "n100.r01.s036_output/n100.r01.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s036_output/n100.r01.s036.depth.txt" "n100.r01.s036_output/n100.r01.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s036_output/n100.r01.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s036_output/n100.r01.s036.reference.fas" | bcftools consensus -m "n100.r01.s036_output/n100.r01.s036.low_depth.tsv" tmp.vcf.gz > "n100.r01.s036_output/n100.r01.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task 9bf76c45 (flow 493067ab): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task 9bf76c45 (flow 493067ab): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s071.Main.out_file 493067ab exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s071.Main.out_file 493067ab n100/r01/n100.r01.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:803052ef451b5f1a0213fe96d4c6b4e30973e0690fbb98162a18026659a24486
	sha256:493067abd5c56e694f2d80cd47880ec64cb948e52cc027824e758096362182c8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9bf76c451793411e97791208e8f8c4b225a3da4e548cf00cde99413ec9d618cc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s071_output"
	    wget -O "n100.r01.s071_output/n100.r01.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s071_output/n100.r01.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s071_output/n100.r01.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s071_output/n100.r01.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s071_output/n100.r01.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s071_output/n100.r01.s071.reference.fas" "n100.r01.s071_output/n100.r01.s071.fq1.fastq" "n100.r01.s071_output/n100.r01.s071.fq2.fastq" | samtools view -bS - > "n100.r01.s071_output/n100.r01.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s071_output/n100.r01.s071.untrimmed.sorted.bam" "n100.r01.s071_output/n100.r01.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s071_output/n100.r01.s071.untrimmed.sorted.bam" -b "n100.r01.s071_output/n100.r01.s071.primers.bed" -p "n100.r01.s071_output/n100.r01.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" "n100.r01.s071_output/n100.r01.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s071_output/n100.r01.s071.reference.fas" "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" > "n100.r01.s071_output/n100.r01.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s071_output/n100.r01.s071.reference.fas" --call-indels "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" > "n100.r01.s071_output/n100.r01.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" > "n100.r01.s071_output/n100.r01.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s071_output/n100.r01.s071.depth.txt" "n100.r01.s071_output/n100.r01.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s071_output/n100.r01.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s071_output/n100.r01.s071.reference.fas" | bcftools consensus -m "n100.r01.s071_output/n100.r01.s071.low_depth.tsv" tmp.vcf.gz > "n100.r01.s071_output/n100.r01.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task d6c86c87 (flow 6138a66a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task d6c86c87 (flow 6138a66a): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s090.Main.out_file 6138a66a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s090.Main.out_file 6138a66a n100/r01/n100.r01.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cddb73c1a810fcb310c584321e0cce0153c58d865360d7330fdfd7c953cbf8df
	sha256:6138a66a5e78c4e23a85b7e26345d0e0f43d5765be3c2124e924294aff8284f5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d6c86c875ce091b8a13bae921e9e1f6a3130321a0069925c22b46d3f1ab2c346
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s090_output"
	    wget -O "n100.r01.s090_output/n100.r01.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s090_output/n100.r01.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s090_output/n100.r01.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s090_output/n100.r01.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s090_output/n100.r01.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s090_output/n100.r01.s090.reference.fas" "n100.r01.s090_output/n100.r01.s090.fq1.fastq" "n100.r01.s090_output/n100.r01.s090.fq2.fastq" | samtools view -bS - > "n100.r01.s090_output/n100.r01.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s090_output/n100.r01.s090.untrimmed.sorted.bam" "n100.r01.s090_output/n100.r01.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s090_output/n100.r01.s090.untrimmed.sorted.bam" -b "n100.r01.s090_output/n100.r01.s090.primers.bed" -p "n100.r01.s090_output/n100.r01.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" "n100.r01.s090_output/n100.r01.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s090_output/n100.r01.s090.reference.fas" "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" > "n100.r01.s090_output/n100.r01.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s090_output/n100.r01.s090.reference.fas" --call-indels "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" > "n100.r01.s090_output/n100.r01.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" > "n100.r01.s090_output/n100.r01.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s090_output/n100.r01.s090.depth.txt" "n100.r01.s090_output/n100.r01.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s090_output/n100.r01.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s090_output/n100.r01.s090.reference.fas" | bcftools consensus -m "n100.r01.s090_output/n100.r01.s090.low_depth.tsv" tmp.vcf.gz > "n100.r01.s090_output/n100.r01.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:42 scheduler task 1c7f103e (flow 066587e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:42 scheduler task 1c7f103e (flow 066587e3): waiting for completion (try 0): started
2021/07/08 13:53:42  ->  n100.r01.s084.Main.out_file 066587e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:42 n100.r01.s084.Main.out_file 066587e3 n100/r01/n100.r01.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6046250dc9b2f9ca09c98464be264cb0d9e016ca59931e56a3621749af1498b0
	sha256:066587e3a55e7979850e01c248781f54d8abb39acfbbcf74041dcb40a8fee229
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1c7f103ef560dfab2d6ba6a10163555ba5c2fd363b13d7449d418d10dec47434
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s084_output"
	    wget -O "n100.r01.s084_output/n100.r01.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s084_output/n100.r01.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s084_output/n100.r01.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s084_output/n100.r01.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s084_output/n100.r01.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s084_output/n100.r01.s084.reference.fas" "n100.r01.s084_output/n100.r01.s084.fq1.fastq" "n100.r01.s084_output/n100.r01.s084.fq2.fastq" | samtools view -bS - > "n100.r01.s084_output/n100.r01.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s084_output/n100.r01.s084.untrimmed.sorted.bam" "n100.r01.s084_output/n100.r01.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s084_output/n100.r01.s084.untrimmed.sorted.bam" -b "n100.r01.s084_output/n100.r01.s084.primers.bed" -p "n100.r01.s084_output/n100.r01.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" "n100.r01.s084_output/n100.r01.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s084_output/n100.r01.s084.reference.fas" "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" > "n100.r01.s084_output/n100.r01.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s084_output/n100.r01.s084.reference.fas" --call-indels "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" > "n100.r01.s084_output/n100.r01.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" > "n100.r01.s084_output/n100.r01.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s084_output/n100.r01.s084.depth.txt" "n100.r01.s084_output/n100.r01.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s084_output/n100.r01.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s084_output/n100.r01.s084.reference.fas" | bcftools consensus -m "n100.r01.s084_output/n100.r01.s084.low_depth.tsv" tmp.vcf.gz > "n100.r01.s084_output/n100.r01.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:43 scheduler task ee96b8c7 (flow 028284df): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:43 scheduler task ee96b8c7 (flow 028284df): waiting for completion (try 0): started
2021/07/08 13:53:43  ->  n100.r01.s076.Main.out_file 028284df exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:43 n100.r01.s076.Main.out_file 028284df n100/r01/n100.r01.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a38827b2b93bf58548259e2406de8716895597920aca1fb0412d12754a24698a
	sha256:028284df61fd561607502426a86f815e90c3c31ab819803cff277e83e082a4cc
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee96b8c74d012407cea7e3ced80b9ed9ac81eddd2e2e95fe34a7a0fb55cada67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s076_output"
	    wget -O "n100.r01.s076_output/n100.r01.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s076_output/n100.r01.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s076_output/n100.r01.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s076_output/n100.r01.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s076_output/n100.r01.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s076_output/n100.r01.s076.reference.fas" "n100.r01.s076_output/n100.r01.s076.fq1.fastq" "n100.r01.s076_output/n100.r01.s076.fq2.fastq" | samtools view -bS - > "n100.r01.s076_output/n100.r01.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s076_output/n100.r01.s076.untrimmed.sorted.bam" "n100.r01.s076_output/n100.r01.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s076_output/n100.r01.s076.untrimmed.sorted.bam" -b "n100.r01.s076_output/n100.r01.s076.primers.bed" -p "n100.r01.s076_output/n100.r01.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" "n100.r01.s076_output/n100.r01.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s076_output/n100.r01.s076.reference.fas" "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" > "n100.r01.s076_output/n100.r01.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s076_output/n100.r01.s076.reference.fas" --call-indels "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" > "n100.r01.s076_output/n100.r01.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" > "n100.r01.s076_output/n100.r01.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s076_output/n100.r01.s076.depth.txt" "n100.r01.s076_output/n100.r01.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s076_output/n100.r01.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s076_output/n100.r01.s076.reference.fas" | bcftools consensus -m "n100.r01.s076_output/n100.r01.s076.low_depth.tsv" tmp.vcf.gz > "n100.r01.s076_output/n100.r01.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:53:43 scheduler task 642e6110 (flow 18df7aad): submitting (try 0): successful, next state: waiting for completion
2021/07/08 13:53:43 scheduler task 642e6110 (flow 18df7aad): waiting for completion (try 0): started
2021/07/08 13:53:43  ->  n100.r01.s070.Main.out_file 18df7aad exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 13:53:43 n100.r01.s070.Main.out_file 18df7aad n100/r01/n100.r01.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ecf60cf2a8852f3183cf1bc27d362207e71fb6cd3e793c862030fcbcf340f48f
	sha256:18df7aad430c184ed77d6d332c4f84a61c7e448511eeb7c987b16e5f55b37d8f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/642e6110aecffdb444ede609dbcf47d4a14480377036d453c6016723b4254b5c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s070_output"
	    wget -O "n100.r01.s070_output/n100.r01.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s070_output/n100.r01.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s070_output/n100.r01.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s070_output/n100.r01.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s070_output/n100.r01.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s070_output/n100.r01.s070.reference.fas" "n100.r01.s070_output/n100.r01.s070.fq1.fastq" "n100.r01.s070_output/n100.r01.s070.fq2.fastq" | samtools view -bS - > "n100.r01.s070_output/n100.r01.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s070_output/n100.r01.s070.untrimmed.sorted.bam" "n100.r01.s070_output/n100.r01.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s070_output/n100.r01.s070.untrimmed.sorted.bam" -b "n100.r01.s070_output/n100.r01.s070.primers.bed" -p "n100.r01.s070_output/n100.r01.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" "n100.r01.s070_output/n100.r01.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s070_output/n100.r01.s070.reference.fas" "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" > "n100.r01.s070_output/n100.r01.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s070_output/n100.r01.s070.reference.fas" --call-indels "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" > "n100.r01.s070_output/n100.r01.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" > "n100.r01.s070_output/n100.r01.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s070_output/n100.r01.s070.depth.txt" "n100.r01.s070_output/n100.r01.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s070_output/n100.r01.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s070_output/n100.r01.s070.reference.fas" | bcftools consensus -m "n100.r01.s070_output/n100.r01.s070.low_depth.tsv" tmp.vcf.gz > "n100.r01.s070_output/n100.r01.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): promoting objects (try 0): started
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): promoting objects (try 0): started
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): retrieving diagnostic output (try 0): started
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): retrieving diagnostic output (try 0): started
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:57:58 scheduler task 0f1079d5 (flow 0bcaa813): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): retrieving result (try 0): started
2021/07/08 13:57:58 scheduler task 0f1079d5 (flow 0bcaa813): promoting objects (try 0): started
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): retrieving result (try 0): started
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:57:58 scheduler task 0f1079d5 (flow 0bcaa813): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:57:58 scheduler task f5c4ee3f (flow a80b5a2d): transferring output (try 0): started
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:57:58 scheduler task ab91edce (flow bff0a93a): transferring output (try 0): started
2021/07/08 13:57:58 scheduler task 0f1079d5 (flow 0bcaa813): retrieving diagnostic output (try 0): started
2021/07/08 13:57:58 scheduler task 0f1079d5 (flow 0bcaa813): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:57:58 scheduler task 0f1079d5 (flow 0bcaa813): retrieving result (try 0): started
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): transferring output (try 0): started
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): transferring output (try 0): successful, next state: unloading
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloading (try 0): started
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloading list<val<.=48fb972e 35.8MiB> 35.8MiB>
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloading val<.=d49b0dd0 35.4MiB>
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloading val<.=11e544b0 35.4MiB>
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): transferring output (try 0): successful, next state: unloading
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): transferring output (try 0): successful, next state: unloading
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloading (try 0): started
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloading list<val<.=109b98c8 35.7MiB> 35.7MiB>
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloading val<.=47590b2d 35.4MiB>
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloading val<.=00932201 35.4MiB>
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): unloading (try 0): started
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): unloading list<val<.=12ceadfa 35.8MiB> 35.8MiB>
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): unloading val<.=739f80e5 35.4MiB>
2021/07/08 13:57:59 scheduler task 0f1079d5 (flow 0bcaa813): unloading val<.=279c7245 35.4MiB>
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloaded val<.=11e544b0 35.4MiB>
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloaded list<val<.=48fb972e 35.8MiB> 35.8MiB>
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloaded val<.=d49b0dd0 35.4MiB>
2021/07/08 13:57:59 scheduler task ab91edce (flow bff0a93a): unloading (try 0): successful, next state: complete
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloaded val<.=00932201 35.4MiB>
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloaded list<val<.=109b98c8 35.7MiB> 35.7MiB>
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloaded val<.=47590b2d 35.4MiB>
2021/07/08 13:57:59 scheduler task f5c4ee3f (flow a80b5a2d): unloading (try 0): successful, next state: complete
2021/07/08 13:57:59  <-  n100.r01.s077.Main.out_file bff0a93a ok     exec 4m0s 35.8MiB
2021/07/08 13:57:59 n100.r01.s077.Main.out_file bff0a93a n100/r01/n100.r01.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a9fbd4f733f51ffba5f774c3e68753fa526aa69dc4cf6d44e07bda32a4198371
	sha256:bff0a93ae400b193cc1c5b7786003c0b4c6298da1cc2460c8863aebda8952e51
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ab91edce0c45b78dad4df561e3915cae275368c0ecb2ea20ea189356f2fcf3c1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s077_output"
	    wget -O "n100.r01.s077_output/n100.r01.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s077_output/n100.r01.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s077_output/n100.r01.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s077_output/n100.r01.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s077_output/n100.r01.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s077_output/n100.r01.s077.reference.fas" "n100.r01.s077_output/n100.r01.s077.fq1.fastq" "n100.r01.s077_output/n100.r01.s077.fq2.fastq" | samtools view -bS - > "n100.r01.s077_output/n100.r01.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s077_output/n100.r01.s077.untrimmed.sorted.bam" "n100.r01.s077_output/n100.r01.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s077_output/n100.r01.s077.untrimmed.sorted.bam" -b "n100.r01.s077_output/n100.r01.s077.primers.bed" -p "n100.r01.s077_output/n100.r01.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" "n100.r01.s077_output/n100.r01.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s077_output/n100.r01.s077.reference.fas" "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" > "n100.r01.s077_output/n100.r01.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s077_output/n100.r01.s077.reference.fas" --call-indels "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" > "n100.r01.s077_output/n100.r01.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s077_output/n100.r01.s077.trimmed.sorted.bam" > "n100.r01.s077_output/n100.r01.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s077_output/n100.r01.s077.depth.txt" "n100.r01.s077_output/n100.r01.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s077_output/n100.r01.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s077_output/n100.r01.s077.reference.fas" | bcftools consensus -m "n100.r01.s077_output/n100.r01.s077.low_depth.tsv" tmp.vcf.gz > "n100.r01.s077_output/n100.r01.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:48fb972e8fa33471c0407a8b5defc43d0550cebab6a3e45aeeecf2a75e9e29f7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=16.5MiB max=125.0MiB
	    disk mean=13.8MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:57:59 scheduler task d167a05f (flow dcfdc430): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s077.tar.gz resources {}
2021/07/08 13:57:59  ->  n100.r01.s077.Main.cp_out_file dcfdc430 exec extern s3://niema-test/n100/r01/n100.r01.s077.tar.gz 35.8MiB
2021/07/08 13:57:59  <-  n100.r01.s078.Main.out_file a80b5a2d ok     exec 4m0s 35.7MiB
2021/07/08 13:57:59 n100.r01.s078.Main.out_file a80b5a2d n100/r01/n100.r01.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:20601fc3eca121a4d0d6cb2e499e393131e770a96b921fcace3b909bd5b6b7fa
	sha256:a80b5a2d54fdc38dd3a5995bfd04161b359a45c793a409531fbfdf11eb409ef9
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f5c4ee3f365b4a34f53c2ee77dbda3f1deec524f903d4a98939ce89f882b6aa4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s078_output"
	    wget -O "n100.r01.s078_output/n100.r01.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s078_output/n100.r01.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s078_output/n100.r01.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s078_output/n100.r01.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s078_output/n100.r01.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s078_output/n100.r01.s078.reference.fas" "n100.r01.s078_output/n100.r01.s078.fq1.fastq" "n100.r01.s078_output/n100.r01.s078.fq2.fastq" | samtools view -bS - > "n100.r01.s078_output/n100.r01.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s078_output/n100.r01.s078.untrimmed.sorted.bam" "n100.r01.s078_output/n100.r01.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s078_output/n100.r01.s078.untrimmed.sorted.bam" -b "n100.r01.s078_output/n100.r01.s078.primers.bed" -p "n100.r01.s078_output/n100.r01.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" "n100.r01.s078_output/n100.r01.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s078_output/n100.r01.s078.reference.fas" "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" > "n100.r01.s078_output/n100.r01.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s078_output/n100.r01.s078.reference.fas" --call-indels "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" > "n100.r01.s078_output/n100.r01.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s078_output/n100.r01.s078.trimmed.sorted.bam" > "n100.r01.s078_output/n100.r01.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s078_output/n100.r01.s078.depth.txt" "n100.r01.s078_output/n100.r01.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s078_output/n100.r01.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s078_output/n100.r01.s078.reference.fas" | bcftools consensus -m "n100.r01.s078_output/n100.r01.s078.low_depth.tsv" tmp.vcf.gz > "n100.r01.s078_output/n100.r01.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:109b98c88f1c363dbd9d5922bc9c158213faa45c620d55e567f7282ce0a2ca2a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.7MiB max=124.0MiB
	    disk mean=14.0MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 13:57:59 scheduler task 94ee6a2b (flow 2b720ec8): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s078.tar.gz resources {}
2021/07/08 13:57:59  ->  n100.r01.s078.Main.cp_out_file 2b720ec8 exec extern s3://niema-test/n100/r01/n100.r01.s078.tar.gz 35.7MiB
2021/07/08 13:58:00 scheduler task 0f1079d5 (flow 0bcaa813): unloaded val<.=739f80e5 35.4MiB>
2021/07/08 13:58:00 scheduler task 0f1079d5 (flow 0bcaa813): unloaded list<val<.=12ceadfa 35.8MiB> 35.8MiB>
2021/07/08 13:58:00 scheduler task 0f1079d5 (flow 0bcaa813): unloaded val<.=279c7245 35.4MiB>
2021/07/08 13:58:00 scheduler task 0f1079d5 (flow 0bcaa813): unloading (try 0): successful, next state: complete
2021/07/08 13:58:00  <-  n100.r01.s013.Main.out_file 0bcaa813 ok     exec 4m0s 35.8MiB
2021/07/08 13:58:00 n100.r01.s013.Main.out_file 0bcaa813 n100/r01/n100.r01.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dd7a211d61eeb6c70d42caf4f444a29cf3c21959709fbb8ce2d10086ec925894
	sha256:0bcaa813dd02d4a1665438091a4e7c39327bb444b8532c61cb177687b5e1790d
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0f1079d5912989ccb3de8ed8ac0ffc2bd152a87563d42d0b8a4166126fe46044
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s013_output"
	    wget -O "n100.r01.s013_output/n100.r01.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s013_output/n100.r01.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s013_output/n100.r01.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s013_output/n100.r01.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s013_output/n100.r01.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s013_output/n100.r01.s013.reference.fas" "n100.r01.s013_output/n100.r01.s013.fq1.fastq" "n100.r01.s013_output/n100.r01.s013.fq2.fastq" | samtools view -bS - > "n100.r01.s013_output/n100.r01.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s013_output/n100.r01.s013.untrimmed.sorted.bam" "n100.r01.s013_output/n100.r01.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s013_output/n100.r01.s013.untrimmed.sorted.bam" -b "n100.r01.s013_output/n100.r01.s013.primers.bed" -p "n100.r01.s013_output/n100.r01.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" "n100.r01.s013_output/n100.r01.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s013_output/n100.r01.s013.reference.fas" "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" > "n100.r01.s013_output/n100.r01.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s013_output/n100.r01.s013.reference.fas" --call-indels "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" > "n100.r01.s013_output/n100.r01.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s013_output/n100.r01.s013.trimmed.sorted.bam" > "n100.r01.s013_output/n100.r01.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s013_output/n100.r01.s013.depth.txt" "n100.r01.s013_output/n100.r01.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s013_output/n100.r01.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s013_output/n100.r01.s013.reference.fas" | bcftools consensus -m "n100.r01.s013_output/n100.r01.s013.low_depth.tsv" tmp.vcf.gz > "n100.r01.s013_output/n100.r01.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:12ceadfabe81cd2bbe3bca1e0632d3ce01d5571676e894c29249060a692e38dc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.6MiB max=124.6MiB
	    disk mean=13.3MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:58:00 scheduler task 3626a0c5 (flow 17363432): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s013.tar.gz resources {}
2021/07/08 13:58:00  ->  n100.r01.s013.Main.cp_out_file 17363432 exec extern s3://niema-test/n100/r01/n100.r01.s013.tar.gz 35.8MiB
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): promoting objects (try 0): started
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): retrieving diagnostic output (try 0): started
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): retrieving result (try 0): started
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:00 scheduler task 489636ff (flow 301cc57e): transferring output (try 0): started
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloading (try 0): started
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloading list<val<.=e8e95296 35.7MiB> 35.7MiB>
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloading val<.=fa60deaf 35.4MiB>
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloading val<.=5b433014 35.4MiB>
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloaded list<val<.=e8e95296 35.7MiB> 35.7MiB>
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloaded val<.=5b433014 35.4MiB>
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloaded val<.=fa60deaf 35.4MiB>
2021/07/08 13:58:01 scheduler task 489636ff (flow 301cc57e): unloading (try 0): successful, next state: complete
2021/07/08 13:58:01  <-  n100.r01.s015.Main.out_file 301cc57e ok     exec 4m2s 35.7MiB
2021/07/08 13:58:01 n100.r01.s015.Main.out_file 301cc57e n100/r01/n100.r01.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9335732633957059ea9493190fe0b91f6b2caca5aac950b6bc0a2f2e502702cd
	sha256:301cc57e26fce9e8b78754d18a5d3c801d7844daacd6d78db246b0e057bd14fe
	ec2-3-17-165-45.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/489636ff1d2719f606a546510d5a1d0b25499cb33f14d7f89b443b06a25a8705
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s015_output"
	    wget -O "n100.r01.s015_output/n100.r01.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s015_output/n100.r01.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s015_output/n100.r01.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s015_output/n100.r01.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s015_output/n100.r01.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s015_output/n100.r01.s015.reference.fas" "n100.r01.s015_output/n100.r01.s015.fq1.fastq" "n100.r01.s015_output/n100.r01.s015.fq2.fastq" | samtools view -bS - > "n100.r01.s015_output/n100.r01.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s015_output/n100.r01.s015.untrimmed.sorted.bam" "n100.r01.s015_output/n100.r01.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s015_output/n100.r01.s015.untrimmed.sorted.bam" -b "n100.r01.s015_output/n100.r01.s015.primers.bed" -p "n100.r01.s015_output/n100.r01.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" "n100.r01.s015_output/n100.r01.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s015_output/n100.r01.s015.reference.fas" "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" > "n100.r01.s015_output/n100.r01.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s015_output/n100.r01.s015.reference.fas" --call-indels "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" > "n100.r01.s015_output/n100.r01.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s015_output/n100.r01.s015.trimmed.sorted.bam" > "n100.r01.s015_output/n100.r01.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s015_output/n100.r01.s015.depth.txt" "n100.r01.s015_output/n100.r01.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s015_output/n100.r01.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s015_output/n100.r01.s015.reference.fas" | bcftools consensus -m "n100.r01.s015_output/n100.r01.s015.low_depth.tsv" tmp.vcf.gz > "n100.r01.s015_output/n100.r01.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e8e95296583c47d29acb1017f3e7faa737351d54b1fab5a58a15175a0842defa 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.6MiB max=125.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 13:58:01 scheduler task dedeabd3 (flow cbf61cdb): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s015.tar.gz resources {}
2021/07/08 13:58:01  ->  n100.r01.s015.Main.cp_out_file cbf61cdb exec extern s3://niema-test/n100/r01/n100.r01.s015.tar.gz 35.7MiB
2021/07/08 13:58:01 scheduler task d167a05f (flow dcfdc430): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:48fb972e8fa33471c0407a8b5defc43d0550cebab6a3e45aeeecf2a75e9e29f7 -> s3://niema-test/n100/r01/n100.r01.s077.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:58:01  <-  n100.r01.s077.Main.cp_out_file dcfdc430 ok   extern 0s 35.8MiB
2021/07/08 13:58:01 scheduler task 3626a0c5 (flow 17363432): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:12ceadfabe81cd2bbe3bca1e0632d3ce01d5571676e894c29249060a692e38dc -> s3://niema-test/n100/r01/n100.r01.s013.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:58:01  <-  n100.r01.s013.Main.cp_out_file 17363432 ok   extern 0s 35.8MiB
2021/07/08 13:58:02 scheduler task dedeabd3 (flow cbf61cdb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e8e95296583c47d29acb1017f3e7faa737351d54b1fab5a58a15175a0842defa -> s3://niema-test/n100/r01/n100.r01.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:02  <-  n100.r01.s015.Main.cp_out_file cbf61cdb ok   extern 0s 35.7MiB
2021/07/08 13:58:02 scheduler task 94ee6a2b (flow 2b720ec8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:109b98c88f1c363dbd9d5922bc9c158213faa45c620d55e567f7282ce0a2ca2a -> s3://niema-test/n100/r01/n100.r01.s078.tar.gz (35.7MiB) in 2s (17.8MiB/s) 
2021/07/08 13:58:02  <-  n100.r01.s078.Main.cp_out_file 2b720ec8 ok   extern 0s 35.7MiB
2021/07/08 13:58:33 scheduler task 8b1f0155 (flow 99489b6e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:33 scheduler task 8b1f0155 (flow 99489b6e): promoting objects (try 0): started
2021/07/08 13:58:33 scheduler task 8b1f0155 (flow 99489b6e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:33 scheduler task 8b1f0155 (flow 99489b6e): retrieving diagnostic output (try 0): started
2021/07/08 13:58:33 scheduler task 8b1f0155 (flow 99489b6e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:33 scheduler task 8b1f0155 (flow 99489b6e): retrieving result (try 0): started
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): transferring output (try 0): started
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): unloading (try 0): started
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): unloading val<.=0b0afa8b 35.4MiB>
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): unloading list<val<.=5c18bc81 35.7MiB> 35.7MiB>
2021/07/08 13:58:34 scheduler task 8b1f0155 (flow 99489b6e): unloading val<.=d4b6b58a 35.4MiB>
2021/07/08 13:58:35 scheduler task 8b1f0155 (flow 99489b6e): unloaded list<val<.=5c18bc81 35.7MiB> 35.7MiB>
2021/07/08 13:58:35 scheduler task 8b1f0155 (flow 99489b6e): unloaded val<.=d4b6b58a 35.4MiB>
2021/07/08 13:58:35 scheduler task 8b1f0155 (flow 99489b6e): unloaded val<.=0b0afa8b 35.4MiB>
2021/07/08 13:58:35 scheduler task 8b1f0155 (flow 99489b6e): unloading (try 0): successful, next state: complete
2021/07/08 13:58:35  <-  n100.r01.s056.Main.out_file 99489b6e ok     exec 4m37s 35.7MiB
2021/07/08 13:58:35 n100.r01.s056.Main.out_file 99489b6e n100/r01/n100.r01.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:91416d80807ac182c91c669614819a1dbd49a185295df96e6a11eb4f8b06c02b
	sha256:99489b6ef482b167906c2b168a53be0914e69de0142ba5c4cb9fa493ff9e5fbb
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b1f0155a29b077608185fd804a48b57acfc133c5b0040ee11093ab6c8aeb6c0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s056_output"
	    wget -O "n100.r01.s056_output/n100.r01.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s056_output/n100.r01.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s056_output/n100.r01.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s056_output/n100.r01.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s056_output/n100.r01.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s056_output/n100.r01.s056.reference.fas" "n100.r01.s056_output/n100.r01.s056.fq1.fastq" "n100.r01.s056_output/n100.r01.s056.fq2.fastq" | samtools view -bS - > "n100.r01.s056_output/n100.r01.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s056_output/n100.r01.s056.untrimmed.sorted.bam" "n100.r01.s056_output/n100.r01.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s056_output/n100.r01.s056.untrimmed.sorted.bam" -b "n100.r01.s056_output/n100.r01.s056.primers.bed" -p "n100.r01.s056_output/n100.r01.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" "n100.r01.s056_output/n100.r01.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s056_output/n100.r01.s056.reference.fas" "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" > "n100.r01.s056_output/n100.r01.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s056_output/n100.r01.s056.reference.fas" --call-indels "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" > "n100.r01.s056_output/n100.r01.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s056_output/n100.r01.s056.trimmed.sorted.bam" > "n100.r01.s056_output/n100.r01.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s056_output/n100.r01.s056.depth.txt" "n100.r01.s056_output/n100.r01.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s056_output/n100.r01.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s056_output/n100.r01.s056.reference.fas" | bcftools consensus -m "n100.r01.s056_output/n100.r01.s056.low_depth.tsv" tmp.vcf.gz > "n100.r01.s056_output/n100.r01.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5c18bc819ea3b3ddb244f218dbc822ae26d2b2df848ea9fa3e618de8475e46c5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.2MiB max=127.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 13:58:35 scheduler task 3c3a73a4 (flow 6ad28359): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s056.tar.gz resources {}
2021/07/08 13:58:35  ->  n100.r01.s056.Main.cp_out_file 6ad28359 exec extern s3://niema-test/n100/r01/n100.r01.s056.tar.gz 35.7MiB
2021/07/08 13:58:36 scheduler task 3c3a73a4 (flow 6ad28359): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5c18bc819ea3b3ddb244f218dbc822ae26d2b2df848ea9fa3e618de8475e46c5 -> s3://niema-test/n100/r01/n100.r01.s056.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:36  <-  n100.r01.s056.Main.cp_out_file 6ad28359 ok   extern 0s 35.7MiB
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): promoting objects (try 0): started
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): retrieving diagnostic output (try 0): started
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): retrieving result (try 0): started
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): transferring output (try 0): started
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): unloading (try 0): started
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): unloading list<val<.=ee0dcff9 35.7MiB> 35.7MiB>
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): unloading val<.=c236b0e8 35.4MiB>
2021/07/08 13:58:40 scheduler task 8f179a44 (flow f3e1b152): unloading val<.=47f5ed47 35.4MiB>
2021/07/08 13:58:41 scheduler task 8f179a44 (flow f3e1b152): unloaded val<.=c236b0e8 35.4MiB>
2021/07/08 13:58:41 scheduler task 8f179a44 (flow f3e1b152): unloaded val<.=47f5ed47 35.4MiB>
2021/07/08 13:58:41 scheduler task 8f179a44 (flow f3e1b152): unloaded list<val<.=ee0dcff9 35.7MiB> 35.7MiB>
2021/07/08 13:58:41 scheduler task 8f179a44 (flow f3e1b152): unloading (try 0): successful, next state: complete
2021/07/08 13:58:41  <-  n100.r01.s001.Main.out_file f3e1b152 ok     exec 4m43s 35.7MiB
2021/07/08 13:58:41 n100.r01.s001.Main.out_file f3e1b152 n100/r01/n100.r01.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd284d5ada101ad1fa7257be50c997750f5f72905be0a4d9ee353d3c0b02547c
	sha256:f3e1b15210ee06de82fd9940f108973cad8dcd64c0fb6f026e7264450d5eda80
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f179a448d0a33ff2caf4dc33dbdac746be46f87935ea4693bba68f7a53625b9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s001_output"
	    wget -O "n100.r01.s001_output/n100.r01.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s001_output/n100.r01.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s001_output/n100.r01.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s001_output/n100.r01.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s001_output/n100.r01.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s001_output/n100.r01.s001.reference.fas" "n100.r01.s001_output/n100.r01.s001.fq1.fastq" "n100.r01.s001_output/n100.r01.s001.fq2.fastq" | samtools view -bS - > "n100.r01.s001_output/n100.r01.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s001_output/n100.r01.s001.untrimmed.sorted.bam" "n100.r01.s001_output/n100.r01.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s001_output/n100.r01.s001.untrimmed.sorted.bam" -b "n100.r01.s001_output/n100.r01.s001.primers.bed" -p "n100.r01.s001_output/n100.r01.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" "n100.r01.s001_output/n100.r01.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s001_output/n100.r01.s001.reference.fas" "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" > "n100.r01.s001_output/n100.r01.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s001_output/n100.r01.s001.reference.fas" --call-indels "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" > "n100.r01.s001_output/n100.r01.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s001_output/n100.r01.s001.trimmed.sorted.bam" > "n100.r01.s001_output/n100.r01.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s001_output/n100.r01.s001.depth.txt" "n100.r01.s001_output/n100.r01.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s001_output/n100.r01.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s001_output/n100.r01.s001.reference.fas" | bcftools consensus -m "n100.r01.s001_output/n100.r01.s001.low_depth.tsv" tmp.vcf.gz > "n100.r01.s001_output/n100.r01.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ee0dcff9feb1accd70cca9d151cbafab3aab5b88cacc93ece2bcbc175341956d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.7MiB max=125.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 13:58:41 scheduler task 92518701 (flow aa5b2f22): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s001.tar.gz resources {}
2021/07/08 13:58:41  ->  n100.r01.s001.Main.cp_out_file aa5b2f22 exec extern s3://niema-test/n100/r01/n100.r01.s001.tar.gz 35.7MiB
2021/07/08 13:58:41 scheduler task 92518701 (flow aa5b2f22): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ee0dcff9feb1accd70cca9d151cbafab3aab5b88cacc93ece2bcbc175341956d -> s3://niema-test/n100/r01/n100.r01.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:41  <-  n100.r01.s001.Main.cp_out_file aa5b2f22 ok   extern 0s 35.7MiB
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): promoting objects (try 0): started
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): retrieving diagnostic output (try 0): started
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): retrieving result (try 0): started
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:42 scheduler task 5eba3638 (flow a1920ceb): transferring output (try 0): started
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloading (try 0): started
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloading list<val<.=8907e66a 35.7MiB> 35.7MiB>
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloading val<.=525fd86f 35.4MiB>
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloading val<.=b63dbf2b 35.4MiB>
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloaded list<val<.=8907e66a 35.7MiB> 35.7MiB>
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloaded val<.=525fd86f 35.4MiB>
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloaded val<.=b63dbf2b 35.4MiB>
2021/07/08 13:58:43 scheduler task 5eba3638 (flow a1920ceb): unloading (try 0): successful, next state: complete
2021/07/08 13:58:43  <-  n100.r01.s095.Main.out_file a1920ceb ok     exec 4m46s 35.7MiB
2021/07/08 13:58:43 n100.r01.s095.Main.out_file a1920ceb n100/r01/n100.r01.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bfa8302dbad3713c8884d415e5a967974dfa16c67c2f6dadcd1f801a460683f1
	sha256:a1920ceb3399851cc24e7ac6b64bd7d836c34ee126c7a9f6115a70902eac2293
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5eba3638edbdfb8520a1ace5a7682a5f3f074107d943a0469d7a8a09d6492db8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s095_output"
	    wget -O "n100.r01.s095_output/n100.r01.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s095_output/n100.r01.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s095_output/n100.r01.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s095_output/n100.r01.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s095_output/n100.r01.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s095_output/n100.r01.s095.reference.fas" "n100.r01.s095_output/n100.r01.s095.fq1.fastq" "n100.r01.s095_output/n100.r01.s095.fq2.fastq" | samtools view -bS - > "n100.r01.s095_output/n100.r01.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s095_output/n100.r01.s095.untrimmed.sorted.bam" "n100.r01.s095_output/n100.r01.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s095_output/n100.r01.s095.untrimmed.sorted.bam" -b "n100.r01.s095_output/n100.r01.s095.primers.bed" -p "n100.r01.s095_output/n100.r01.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" "n100.r01.s095_output/n100.r01.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s095_output/n100.r01.s095.reference.fas" "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" > "n100.r01.s095_output/n100.r01.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s095_output/n100.r01.s095.reference.fas" --call-indels "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" > "n100.r01.s095_output/n100.r01.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s095_output/n100.r01.s095.trimmed.sorted.bam" > "n100.r01.s095_output/n100.r01.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s095_output/n100.r01.s095.depth.txt" "n100.r01.s095_output/n100.r01.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s095_output/n100.r01.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s095_output/n100.r01.s095.reference.fas" | bcftools consensus -m "n100.r01.s095_output/n100.r01.s095.low_depth.tsv" tmp.vcf.gz > "n100.r01.s095_output/n100.r01.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8907e66ab059aa4a818860a5a3295b9717caaa5792cdc036689b37a60e4221ce 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=130.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 13:58:43 scheduler task 836831a2 (flow 62e5187f): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s095.tar.gz resources {}
2021/07/08 13:58:43  ->  n100.r01.s095.Main.cp_out_file 62e5187f exec extern s3://niema-test/n100/r01/n100.r01.s095.tar.gz 35.7MiB
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): promoting objects (try 0): started
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): retrieving diagnostic output (try 0): started
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): retrieving result (try 0): started
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:43 scheduler task 8f377fd7 (flow 1f9bdd3e): transferring output (try 0): started
2021/07/08 13:58:44 scheduler task 836831a2 (flow 62e5187f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8907e66ab059aa4a818860a5a3295b9717caaa5792cdc036689b37a60e4221ce -> s3://niema-test/n100/r01/n100.r01.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:44  <-  n100.r01.s095.Main.cp_out_file 62e5187f ok   extern 0s 35.7MiB
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloading (try 0): started
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloading list<val<.=b4b3449c 35.7MiB> 35.7MiB>
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloading val<.=3c92d609 35.4MiB>
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloading val<.=be388494 35.4MiB>
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloaded val<.=be388494 35.4MiB>
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloaded list<val<.=b4b3449c 35.7MiB> 35.7MiB>
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloaded val<.=3c92d609 35.4MiB>
2021/07/08 13:58:44 scheduler task 8f377fd7 (flow 1f9bdd3e): unloading (try 0): successful, next state: complete
2021/07/08 13:58:44  <-  n100.r01.s051.Main.out_file 1f9bdd3e ok     exec 4m47s 35.7MiB
2021/07/08 13:58:44 n100.r01.s051.Main.out_file 1f9bdd3e n100/r01/n100.r01.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:28f04fd4c4affd72f51aa5141fa5895a5671a689b4b87f1441133e42d8eb5b53
	sha256:1f9bdd3e7e772d551177cf1e39b35b65978a1947bc5e01587caebcffe64e7cbd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f377fd77f1d251d510df7d4608557d3f8c8f47f47cd0219d879a9bc42d41b4c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s051_output"
	    wget -O "n100.r01.s051_output/n100.r01.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s051_output/n100.r01.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s051_output/n100.r01.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s051_output/n100.r01.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s051_output/n100.r01.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s051_output/n100.r01.s051.reference.fas" "n100.r01.s051_output/n100.r01.s051.fq1.fastq" "n100.r01.s051_output/n100.r01.s051.fq2.fastq" | samtools view -bS - > "n100.r01.s051_output/n100.r01.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s051_output/n100.r01.s051.untrimmed.sorted.bam" "n100.r01.s051_output/n100.r01.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s051_output/n100.r01.s051.untrimmed.sorted.bam" -b "n100.r01.s051_output/n100.r01.s051.primers.bed" -p "n100.r01.s051_output/n100.r01.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" "n100.r01.s051_output/n100.r01.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s051_output/n100.r01.s051.reference.fas" "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" > "n100.r01.s051_output/n100.r01.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s051_output/n100.r01.s051.reference.fas" --call-indels "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" > "n100.r01.s051_output/n100.r01.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s051_output/n100.r01.s051.trimmed.sorted.bam" > "n100.r01.s051_output/n100.r01.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s051_output/n100.r01.s051.depth.txt" "n100.r01.s051_output/n100.r01.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s051_output/n100.r01.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s051_output/n100.r01.s051.reference.fas" | bcftools consensus -m "n100.r01.s051_output/n100.r01.s051.low_depth.tsv" tmp.vcf.gz > "n100.r01.s051_output/n100.r01.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b4b3449c485701bf20f3ffad6c45543ede198aac2eb03c880e1b87dcce60a699 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=129.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 13:58:44 scheduler task 1e2d52a5 (flow 6cb7bde4): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s051.tar.gz resources {}
2021/07/08 13:58:44  ->  n100.r01.s051.Main.cp_out_file 6cb7bde4 exec extern s3://niema-test/n100/r01/n100.r01.s051.tar.gz 35.7MiB
2021/07/08 13:58:44 scheduler task 2c0a979f (flow fa875239): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): promoting objects (try 0): started
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): retrieving diagnostic output (try 0): started
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): retrieving result (try 0): started
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): transferring output (try 0): started
2021/07/08 13:58:45 scheduler task 1e2d52a5 (flow 6cb7bde4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b4b3449c485701bf20f3ffad6c45543ede198aac2eb03c880e1b87dcce60a699 -> s3://niema-test/n100/r01/n100.r01.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:45  <-  n100.r01.s051.Main.cp_out_file 6cb7bde4 ok   extern 0s 35.7MiB
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloading (try 0): started
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloading list<val<.=380b8260 35.8MiB> 35.8MiB>
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloading val<.=8e3c4df1 35.4MiB>
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloading val<.=13120a70 35.4MiB>
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloaded list<val<.=380b8260 35.8MiB> 35.8MiB>
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloaded val<.=13120a70 35.4MiB>
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloaded val<.=8e3c4df1 35.4MiB>
2021/07/08 13:58:45 scheduler task 2c0a979f (flow fa875239): unloading (try 0): successful, next state: complete
2021/07/08 13:58:45  <-  n100.r01.s009.Main.out_file fa875239 ok     exec 4m49s 35.8MiB
2021/07/08 13:58:45 n100.r01.s009.Main.out_file fa875239 n100/r01/n100.r01.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1dda40f9306f5bdb750dfae7731277b20e6b29220f4790e3afd06e24e3594c43
	sha256:fa875239759f4b46afc18431ff611e95db5208048af98af4b10d1aea65d6431e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c0a979fe146f0bd46bf7111382b155ea9791337e65abc2b1e54eb082e544c28
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s009_output"
	    wget -O "n100.r01.s009_output/n100.r01.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s009_output/n100.r01.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s009_output/n100.r01.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s009_output/n100.r01.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s009_output/n100.r01.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s009_output/n100.r01.s009.reference.fas" "n100.r01.s009_output/n100.r01.s009.fq1.fastq" "n100.r01.s009_output/n100.r01.s009.fq2.fastq" | samtools view -bS - > "n100.r01.s009_output/n100.r01.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s009_output/n100.r01.s009.untrimmed.sorted.bam" "n100.r01.s009_output/n100.r01.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s009_output/n100.r01.s009.untrimmed.sorted.bam" -b "n100.r01.s009_output/n100.r01.s009.primers.bed" -p "n100.r01.s009_output/n100.r01.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" "n100.r01.s009_output/n100.r01.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s009_output/n100.r01.s009.reference.fas" "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" > "n100.r01.s009_output/n100.r01.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s009_output/n100.r01.s009.reference.fas" --call-indels "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" > "n100.r01.s009_output/n100.r01.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s009_output/n100.r01.s009.trimmed.sorted.bam" > "n100.r01.s009_output/n100.r01.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s009_output/n100.r01.s009.depth.txt" "n100.r01.s009_output/n100.r01.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s009_output/n100.r01.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s009_output/n100.r01.s009.reference.fas" | bcftools consensus -m "n100.r01.s009_output/n100.r01.s009.low_depth.tsv" tmp.vcf.gz > "n100.r01.s009_output/n100.r01.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:380b826029e484b35ecd5e7adc780e02580faa2505ac880723ec81d63d2f8833 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=130.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 13:58:45 scheduler task 79ac34be (flow 14fa1f9d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s009.tar.gz resources {}
2021/07/08 13:58:45  ->  n100.r01.s009.Main.cp_out_file 14fa1f9d exec extern s3://niema-test/n100/r01/n100.r01.s009.tar.gz 35.8MiB
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): promoting objects (try 0): started
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): retrieving diagnostic output (try 0): started
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): retrieving result (try 0): started
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): transferring output (try 0): started
2021/07/08 13:58:46 scheduler task 79ac34be (flow 14fa1f9d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:380b826029e484b35ecd5e7adc780e02580faa2505ac880723ec81d63d2f8833 -> s3://niema-test/n100/r01/n100.r01.s009.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:58:46  <-  n100.r01.s009.Main.cp_out_file 14fa1f9d ok   extern 0s 35.8MiB
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloading (try 0): started
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloading list<val<.=d3f270a7 35.7MiB> 35.7MiB>
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloading val<.=37d72c83 35.4MiB>
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloading val<.=2c619f1b 35.4MiB>
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloaded val<.=2c619f1b 35.4MiB>
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloaded list<val<.=d3f270a7 35.7MiB> 35.7MiB>
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloaded val<.=37d72c83 35.4MiB>
2021/07/08 13:58:46 scheduler task eff5e8ec (flow 01b3e50d): unloading (try 0): successful, next state: complete
2021/07/08 13:58:46  <-  n100.r01.s060.Main.out_file 01b3e50d ok     exec 4m50s 35.7MiB
2021/07/08 13:58:46 n100.r01.s060.Main.out_file 01b3e50d n100/r01/n100.r01.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aa2242ebe03a255d2d1e177df80f0a46a5dd4afc9b3f762691395ebffc527bdb
	sha256:01b3e50ddf0f22d47508e23a24550aab9f845f5d5a79e769b23d2cc127b761db
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eff5e8ecc25407727a7f58c12d7f28f4961552c38691fd3e5426dd01e9f97564
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s060_output"
	    wget -O "n100.r01.s060_output/n100.r01.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s060_output/n100.r01.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s060_output/n100.r01.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s060_output/n100.r01.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s060_output/n100.r01.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s060_output/n100.r01.s060.reference.fas" "n100.r01.s060_output/n100.r01.s060.fq1.fastq" "n100.r01.s060_output/n100.r01.s060.fq2.fastq" | samtools view -bS - > "n100.r01.s060_output/n100.r01.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s060_output/n100.r01.s060.untrimmed.sorted.bam" "n100.r01.s060_output/n100.r01.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s060_output/n100.r01.s060.untrimmed.sorted.bam" -b "n100.r01.s060_output/n100.r01.s060.primers.bed" -p "n100.r01.s060_output/n100.r01.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" "n100.r01.s060_output/n100.r01.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s060_output/n100.r01.s060.reference.fas" "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" > "n100.r01.s060_output/n100.r01.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s060_output/n100.r01.s060.reference.fas" --call-indels "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" > "n100.r01.s060_output/n100.r01.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s060_output/n100.r01.s060.trimmed.sorted.bam" > "n100.r01.s060_output/n100.r01.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s060_output/n100.r01.s060.depth.txt" "n100.r01.s060_output/n100.r01.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s060_output/n100.r01.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s060_output/n100.r01.s060.reference.fas" | bcftools consensus -m "n100.r01.s060_output/n100.r01.s060.low_depth.tsv" tmp.vcf.gz > "n100.r01.s060_output/n100.r01.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d3f270a759beb0caa68be07c4bd501aae7555e6cf34df3936ba58266b3e03523 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=129.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 13:58:46 scheduler task a353f2be (flow d156275d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s060.tar.gz resources {}
2021/07/08 13:58:46  ->  n100.r01.s060.Main.cp_out_file d156275d exec extern s3://niema-test/n100/r01/n100.r01.s060.tar.gz 35.7MiB
2021/07/08 13:58:47 scheduler task a353f2be (flow d156275d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d3f270a759beb0caa68be07c4bd501aae7555e6cf34df3936ba58266b3e03523 -> s3://niema-test/n100/r01/n100.r01.s060.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:47  <-  n100.r01.s060.Main.cp_out_file d156275d ok   extern 0s 35.7MiB
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): promoting objects (try 0): started
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): retrieving diagnostic output (try 0): started
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): promoting objects (try 0): started
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): retrieving diagnostic output (try 0): started
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): retrieving result (try 0): started
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:50 scheduler task c982ccb7 (flow 0d88193c): transferring output (try 0): started
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): retrieving result (try 0): started
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:50 scheduler task 6537941d (flow 686ec8c9): transferring output (try 0): started
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloading (try 0): started
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloading list<val<.=3e693809 35.8MiB> 35.8MiB>
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloading val<.=c5725dd0 35.4MiB>
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloading val<.=c1a638c8 35.4MiB>
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): promoting objects (try 0): started
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloaded list<val<.=3e693809 35.8MiB> 35.8MiB>
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloaded val<.=c5725dd0 35.4MiB>
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloaded val<.=c1a638c8 35.4MiB>
2021/07/08 13:58:51 scheduler task 6537941d (flow 686ec8c9): unloading (try 0): successful, next state: complete
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloading (try 0): started
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloading list<val<.=f6c79fc0 35.7MiB> 35.7MiB>
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloading val<.=1ddd731d 35.4MiB>
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloading val<.=89ebfcbc 35.4MiB>
2021/07/08 13:58:51  <-  n100.r01.s065.Main.out_file 686ec8c9 ok     exec 4m53s 35.8MiB
2021/07/08 13:58:51 n100.r01.s065.Main.out_file 686ec8c9 n100/r01/n100.r01.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:061aa9676c1f14b1e7c00b5acc095b9a13b62927320c48b56ab013cfe9445b88
	sha256:686ec8c9154929f1b1ef1ae8a7a664e89db2e5b4cc3ce1542f97300a61637042
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6537941d16339b74c4d07bdeb22192e90c83cb3bea14fa25dcb5920968e3da7f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s065_output"
	    wget -O "n100.r01.s065_output/n100.r01.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s065_output/n100.r01.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s065_output/n100.r01.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s065_output/n100.r01.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s065_output/n100.r01.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s065_output/n100.r01.s065.reference.fas" "n100.r01.s065_output/n100.r01.s065.fq1.fastq" "n100.r01.s065_output/n100.r01.s065.fq2.fastq" | samtools view -bS - > "n100.r01.s065_output/n100.r01.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s065_output/n100.r01.s065.untrimmed.sorted.bam" "n100.r01.s065_output/n100.r01.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s065_output/n100.r01.s065.untrimmed.sorted.bam" -b "n100.r01.s065_output/n100.r01.s065.primers.bed" -p "n100.r01.s065_output/n100.r01.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" "n100.r01.s065_output/n100.r01.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s065_output/n100.r01.s065.reference.fas" "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" > "n100.r01.s065_output/n100.r01.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s065_output/n100.r01.s065.reference.fas" --call-indels "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" > "n100.r01.s065_output/n100.r01.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s065_output/n100.r01.s065.trimmed.sorted.bam" > "n100.r01.s065_output/n100.r01.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s065_output/n100.r01.s065.depth.txt" "n100.r01.s065_output/n100.r01.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s065_output/n100.r01.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s065_output/n100.r01.s065.reference.fas" | bcftools consensus -m "n100.r01.s065_output/n100.r01.s065.low_depth.tsv" tmp.vcf.gz > "n100.r01.s065_output/n100.r01.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3e693809c480189df81fd3624863677663c69360237fb1ce0c44a61ab97b67cd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.6MiB max=127.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 13:58:51 scheduler task e65499df (flow d34f8bf5): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s065.tar.gz resources {}
2021/07/08 13:58:51  ->  n100.r01.s065.Main.cp_out_file d34f8bf5 exec extern s3://niema-test/n100/r01/n100.r01.s065.tar.gz 35.8MiB
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): retrieving diagnostic output (try 0): started
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloaded val<.=1ddd731d 35.4MiB>
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloaded list<val<.=f6c79fc0 35.7MiB> 35.7MiB>
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloaded val<.=89ebfcbc 35.4MiB>
2021/07/08 13:58:51 scheduler task c982ccb7 (flow 0d88193c): unloading (try 0): successful, next state: complete
2021/07/08 13:58:51  <-  n100.r01.s096.Main.out_file 0d88193c ok     exec 4m53s 35.7MiB
2021/07/08 13:58:51 n100.r01.s096.Main.out_file 0d88193c n100/r01/n100.r01.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7579da3178563dab2f032ff5f5bfbca4dd308e489e21ebfeb4821784b8ff46fa
	sha256:0d88193cc6daa51a0c7a9fa20d3e3b4460ee5c237b8c1d2b8084d8217734cae1
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c982ccb7d7ccdb471e1a04dea796a8874dbae9dac5eb2dd82479eea5e09a8ea4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s096_output"
	    wget -O "n100.r01.s096_output/n100.r01.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s096_output/n100.r01.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s096_output/n100.r01.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s096_output/n100.r01.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s096_output/n100.r01.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s096_output/n100.r01.s096.reference.fas" "n100.r01.s096_output/n100.r01.s096.fq1.fastq" "n100.r01.s096_output/n100.r01.s096.fq2.fastq" | samtools view -bS - > "n100.r01.s096_output/n100.r01.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s096_output/n100.r01.s096.untrimmed.sorted.bam" "n100.r01.s096_output/n100.r01.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s096_output/n100.r01.s096.untrimmed.sorted.bam" -b "n100.r01.s096_output/n100.r01.s096.primers.bed" -p "n100.r01.s096_output/n100.r01.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" "n100.r01.s096_output/n100.r01.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s096_output/n100.r01.s096.reference.fas" "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" > "n100.r01.s096_output/n100.r01.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s096_output/n100.r01.s096.reference.fas" --call-indels "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" > "n100.r01.s096_output/n100.r01.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s096_output/n100.r01.s096.trimmed.sorted.bam" > "n100.r01.s096_output/n100.r01.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s096_output/n100.r01.s096.depth.txt" "n100.r01.s096_output/n100.r01.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s096_output/n100.r01.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s096_output/n100.r01.s096.reference.fas" | bcftools consensus -m "n100.r01.s096_output/n100.r01.s096.low_depth.tsv" tmp.vcf.gz > "n100.r01.s096_output/n100.r01.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f6c79fc06d1be8b43dbf2bd4d4c45d20e8ef6b5a6e4785bff5e475b8798f4908 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.9MiB max=127.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 13:58:51 scheduler task 721e32aa (flow 06901ae6): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s096.tar.gz resources {}
2021/07/08 13:58:51  ->  n100.r01.s096.Main.cp_out_file 06901ae6 exec extern s3://niema-test/n100/r01/n100.r01.s096.tar.gz 35.7MiB
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): retrieving result (try 0): started
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:51 scheduler task 0a01661c (flow b52f6d52): transferring output (try 0): started
2021/07/08 13:58:52 scheduler task e65499df (flow d34f8bf5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3e693809c480189df81fd3624863677663c69360237fb1ce0c44a61ab97b67cd -> s3://niema-test/n100/r01/n100.r01.s065.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:58:52  <-  n100.r01.s065.Main.cp_out_file d34f8bf5 ok   extern 0s 35.8MiB
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloading (try 0): started
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloading list<val<.=dcc5bc10 35.8MiB> 35.8MiB>
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloading val<.=018327d5 35.4MiB>
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloading val<.=8501a03a 35.4MiB>
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloaded val<.=8501a03a 35.4MiB>
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloaded val<.=018327d5 35.4MiB>
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloaded list<val<.=dcc5bc10 35.8MiB> 35.8MiB>
2021/07/08 13:58:52 scheduler task 0a01661c (flow b52f6d52): unloading (try 0): successful, next state: complete
2021/07/08 13:58:52  <-  n100.r01.s037.Main.out_file b52f6d52 ok     exec 4m53s 35.8MiB
2021/07/08 13:58:52 n100.r01.s037.Main.out_file b52f6d52 n100/r01/n100.r01.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d58bbf7218ab8fb1323861194cb05dc121893c2735da0a3c1b6ec7f5e93e41b
	sha256:b52f6d52c89668ebfec6c6fb6b893a8332ff27304b50b7f05e20140ebcbf7dd5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a01661cace5bededfcc0224803264e3e60d1cdda346a6268252a04e6b232a9b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s037_output"
	    wget -O "n100.r01.s037_output/n100.r01.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s037_output/n100.r01.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s037_output/n100.r01.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s037_output/n100.r01.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s037_output/n100.r01.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s037_output/n100.r01.s037.reference.fas" "n100.r01.s037_output/n100.r01.s037.fq1.fastq" "n100.r01.s037_output/n100.r01.s037.fq2.fastq" | samtools view -bS - > "n100.r01.s037_output/n100.r01.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s037_output/n100.r01.s037.untrimmed.sorted.bam" "n100.r01.s037_output/n100.r01.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s037_output/n100.r01.s037.untrimmed.sorted.bam" -b "n100.r01.s037_output/n100.r01.s037.primers.bed" -p "n100.r01.s037_output/n100.r01.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" "n100.r01.s037_output/n100.r01.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s037_output/n100.r01.s037.reference.fas" "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" > "n100.r01.s037_output/n100.r01.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s037_output/n100.r01.s037.reference.fas" --call-indels "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" > "n100.r01.s037_output/n100.r01.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s037_output/n100.r01.s037.trimmed.sorted.bam" > "n100.r01.s037_output/n100.r01.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s037_output/n100.r01.s037.depth.txt" "n100.r01.s037_output/n100.r01.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s037_output/n100.r01.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s037_output/n100.r01.s037.reference.fas" | bcftools consensus -m "n100.r01.s037_output/n100.r01.s037.low_depth.tsv" tmp.vcf.gz > "n100.r01.s037_output/n100.r01.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:dcc5bc10ac520697d2d8bcbdeca1f2ca0155b98734e959c0cef4bba193e4de27 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.6MiB max=124.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 13:58:52 scheduler task 552865fb (flow 10ab155a): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s037.tar.gz resources {}
2021/07/08 13:58:52  ->  n100.r01.s037.Main.cp_out_file 10ab155a exec extern s3://niema-test/n100/r01/n100.r01.s037.tar.gz 35.8MiB
2021/07/08 13:58:52 scheduler task 721e32aa (flow 06901ae6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f6c79fc06d1be8b43dbf2bd4d4c45d20e8ef6b5a6e4785bff5e475b8798f4908 -> s3://niema-test/n100/r01/n100.r01.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:52  <-  n100.r01.s096.Main.cp_out_file 06901ae6 ok   extern 0s 35.7MiB
2021/07/08 13:58:52 scheduler task e3778923 (flow 574fe4ef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:52 scheduler task e3778923 (flow 574fe4ef): promoting objects (try 0): started
2021/07/08 13:58:52 scheduler task e3778923 (flow 574fe4ef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:52 scheduler task e3778923 (flow 574fe4ef): retrieving diagnostic output (try 0): started
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): retrieving result (try 0): started
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): promoting objects (try 0): started
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): transferring output (try 0): started
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): retrieving diagnostic output (try 0): started
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): retrieving result (try 0): started
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): transferring output (try 0): started
2021/07/08 13:58:53 scheduler task 552865fb (flow 10ab155a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:dcc5bc10ac520697d2d8bcbdeca1f2ca0155b98734e959c0cef4bba193e4de27 -> s3://niema-test/n100/r01/n100.r01.s037.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:58:53  <-  n100.r01.s037.Main.cp_out_file 10ab155a ok   extern 0s 35.8MiB
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloading (try 0): started
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloading list<val<.=c7b2db0d 35.7MiB> 35.7MiB>
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloading val<.=69c65ae8 35.4MiB>
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloading val<.=c0d9c213 35.4MiB>
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloaded val<.=c0d9c213 35.4MiB>
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloaded val<.=69c65ae8 35.4MiB>
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloaded list<val<.=c7b2db0d 35.7MiB> 35.7MiB>
2021/07/08 13:58:53 scheduler task e3778923 (flow 574fe4ef): unloading (try 0): successful, next state: complete
2021/07/08 13:58:53  <-  n100.r01.s082.Main.out_file 574fe4ef ok     exec 4m54s 35.7MiB
2021/07/08 13:58:53 n100.r01.s082.Main.out_file 574fe4ef n100/r01/n100.r01.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:11e0ff224e2a2eb102506869dedc7af9a016a756a5c016f530af7cc518cec845
	sha256:574fe4ef3c367c027d15e4504887e69e55b1a0496a179a438335d7f470b71019
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e3778923adb338cdba00ae7d94ed5f77c2822bad6ec7665c78ae6838cf815a07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s082_output"
	    wget -O "n100.r01.s082_output/n100.r01.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s082_output/n100.r01.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s082_output/n100.r01.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s082_output/n100.r01.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s082_output/n100.r01.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s082_output/n100.r01.s082.reference.fas" "n100.r01.s082_output/n100.r01.s082.fq1.fastq" "n100.r01.s082_output/n100.r01.s082.fq2.fastq" | samtools view -bS - > "n100.r01.s082_output/n100.r01.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s082_output/n100.r01.s082.untrimmed.sorted.bam" "n100.r01.s082_output/n100.r01.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s082_output/n100.r01.s082.untrimmed.sorted.bam" -b "n100.r01.s082_output/n100.r01.s082.primers.bed" -p "n100.r01.s082_output/n100.r01.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" "n100.r01.s082_output/n100.r01.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s082_output/n100.r01.s082.reference.fas" "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" > "n100.r01.s082_output/n100.r01.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s082_output/n100.r01.s082.reference.fas" --call-indels "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" > "n100.r01.s082_output/n100.r01.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s082_output/n100.r01.s082.trimmed.sorted.bam" > "n100.r01.s082_output/n100.r01.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s082_output/n100.r01.s082.depth.txt" "n100.r01.s082_output/n100.r01.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s082_output/n100.r01.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s082_output/n100.r01.s082.reference.fas" | bcftools consensus -m "n100.r01.s082_output/n100.r01.s082.low_depth.tsv" tmp.vcf.gz > "n100.r01.s082_output/n100.r01.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c7b2db0d668a67b60e53ce31ea2d4ae79e90f50ef5f1cc3581be9bcb854f7116 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=123.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 13:58:53 scheduler task 5130c6b8 (flow 51b0849f): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s082.tar.gz resources {}
2021/07/08 13:58:53  ->  n100.r01.s082.Main.cp_out_file 51b0849f exec extern s3://niema-test/n100/r01/n100.r01.s082.tar.gz 35.7MiB
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloading (try 0): started
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloading list<val<.=6b4bc3b7 35.7MiB> 35.7MiB>
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloading val<.=14dcf97b 35.4MiB>
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloading val<.=a69f1797 35.4MiB>
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloaded val<.=14dcf97b 35.4MiB>
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloaded list<val<.=6b4bc3b7 35.7MiB> 35.7MiB>
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloaded val<.=a69f1797 35.4MiB>
2021/07/08 13:58:53 scheduler task 4ad47abd (flow 264f4a9d): unloading (try 0): successful, next state: complete
2021/07/08 13:58:53  <-  n100.r01.s045.Main.out_file 264f4a9d ok     exec 4m57s 35.7MiB
2021/07/08 13:58:53 n100.r01.s045.Main.out_file 264f4a9d n100/r01/n100.r01.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:849c71747f81ce9ca8080bee02b69fb39aa35aaaba29b07c3f5c10870f39714b
	sha256:264f4a9d0f6a5c460e652630fffa1f71a9d8b47ceda359c7a9cf1690b638413e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ad47abd775611debf664ed5964b531991b779559b4190466a662915c7362090
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s045_output"
	    wget -O "n100.r01.s045_output/n100.r01.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s045_output/n100.r01.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s045_output/n100.r01.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s045_output/n100.r01.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s045_output/n100.r01.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s045_output/n100.r01.s045.reference.fas" "n100.r01.s045_output/n100.r01.s045.fq1.fastq" "n100.r01.s045_output/n100.r01.s045.fq2.fastq" | samtools view -bS - > "n100.r01.s045_output/n100.r01.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s045_output/n100.r01.s045.untrimmed.sorted.bam" "n100.r01.s045_output/n100.r01.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s045_output/n100.r01.s045.untrimmed.sorted.bam" -b "n100.r01.s045_output/n100.r01.s045.primers.bed" -p "n100.r01.s045_output/n100.r01.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" "n100.r01.s045_output/n100.r01.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s045_output/n100.r01.s045.reference.fas" "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" > "n100.r01.s045_output/n100.r01.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s045_output/n100.r01.s045.reference.fas" --call-indels "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" > "n100.r01.s045_output/n100.r01.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s045_output/n100.r01.s045.trimmed.sorted.bam" > "n100.r01.s045_output/n100.r01.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s045_output/n100.r01.s045.depth.txt" "n100.r01.s045_output/n100.r01.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s045_output/n100.r01.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s045_output/n100.r01.s045.reference.fas" | bcftools consensus -m "n100.r01.s045_output/n100.r01.s045.low_depth.tsv" tmp.vcf.gz > "n100.r01.s045_output/n100.r01.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6b4bc3b72efa52f81c4d52d4d97e7c0b9913463ed9c74ec171c4866fd3b9120a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=131.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 13:58:53 scheduler task 13920c6d (flow c48acba0): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s045.tar.gz resources {}
2021/07/08 13:58:53  ->  n100.r01.s045.Main.cp_out_file c48acba0 exec extern s3://niema-test/n100/r01/n100.r01.s045.tar.gz 35.7MiB
2021/07/08 13:58:54 scheduler task 13920c6d (flow c48acba0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6b4bc3b72efa52f81c4d52d4d97e7c0b9913463ed9c74ec171c4866fd3b9120a -> s3://niema-test/n100/r01/n100.r01.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:54  <-  n100.r01.s045.Main.cp_out_file c48acba0 ok   extern 0s 35.7MiB
2021/07/08 13:58:54 scheduler task 5130c6b8 (flow 51b0849f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c7b2db0d668a67b60e53ce31ea2d4ae79e90f50ef5f1cc3581be9bcb854f7116 -> s3://niema-test/n100/r01/n100.r01.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:54  <-  n100.r01.s082.Main.cp_out_file 51b0849f ok   extern 0s 35.7MiB
2021/07/08 13:58:57 scheduler task 16911b07 (flow 1b870f15): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:58:57 scheduler task 16911b07 (flow 1b870f15): promoting objects (try 0): started
2021/07/08 13:58:57 scheduler task 16911b07 (flow 1b870f15): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:58:57 scheduler task 16911b07 (flow 1b870f15): retrieving diagnostic output (try 0): started
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): retrieving result (try 0): started
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): transferring output (try 0): started
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): transferring output (try 0): successful, next state: unloading
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloading (try 0): started
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloading list<val<.=59c082d6 35.7MiB> 35.7MiB>
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloading val<.=04157c4a 35.4MiB>
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloading val<.=ac281127 35.4MiB>
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloaded list<val<.=59c082d6 35.7MiB> 35.7MiB>
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloaded val<.=ac281127 35.4MiB>
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloaded val<.=04157c4a 35.4MiB>
2021/07/08 13:58:58 scheduler task 16911b07 (flow 1b870f15): unloading (try 0): successful, next state: complete
2021/07/08 13:58:58  <-  n100.r01.s085.Main.out_file 1b870f15 ok     exec 5m1s 35.7MiB
2021/07/08 13:58:58 n100.r01.s085.Main.out_file 1b870f15 n100/r01/n100.r01.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e86b88e915f072128c3b7403fcf7bbaa2eaa3c752b56145739c130bee3b3897c
	sha256:1b870f15f753999c7a3d1ffe2deb8e30a6a7804ea68b12d9ef0114182f10c31a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/16911b0765a630b720887d7eaeae4a67677e39270a7067e5b26016d1f60caa35
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s085_output"
	    wget -O "n100.r01.s085_output/n100.r01.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s085_output/n100.r01.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s085_output/n100.r01.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s085_output/n100.r01.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s085_output/n100.r01.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s085_output/n100.r01.s085.reference.fas" "n100.r01.s085_output/n100.r01.s085.fq1.fastq" "n100.r01.s085_output/n100.r01.s085.fq2.fastq" | samtools view -bS - > "n100.r01.s085_output/n100.r01.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s085_output/n100.r01.s085.untrimmed.sorted.bam" "n100.r01.s085_output/n100.r01.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s085_output/n100.r01.s085.untrimmed.sorted.bam" -b "n100.r01.s085_output/n100.r01.s085.primers.bed" -p "n100.r01.s085_output/n100.r01.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" "n100.r01.s085_output/n100.r01.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s085_output/n100.r01.s085.reference.fas" "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" > "n100.r01.s085_output/n100.r01.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s085_output/n100.r01.s085.reference.fas" --call-indels "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" > "n100.r01.s085_output/n100.r01.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s085_output/n100.r01.s085.trimmed.sorted.bam" > "n100.r01.s085_output/n100.r01.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s085_output/n100.r01.s085.depth.txt" "n100.r01.s085_output/n100.r01.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s085_output/n100.r01.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s085_output/n100.r01.s085.reference.fas" | bcftools consensus -m "n100.r01.s085_output/n100.r01.s085.low_depth.tsv" tmp.vcf.gz > "n100.r01.s085_output/n100.r01.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:59c082d6d98505599da676e7fc21808c5eabe238cd6c47138a4bb63c088f2ba6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=128.5MiB
	    disk mean=6.8MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 13:58:58 scheduler task abae488f (flow 10d1b888): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s085.tar.gz resources {}
2021/07/08 13:58:58  ->  n100.r01.s085.Main.cp_out_file 10d1b888 exec extern s3://niema-test/n100/r01/n100.r01.s085.tar.gz 35.7MiB
2021/07/08 13:58:59 scheduler task abae488f (flow 10d1b888): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:59c082d6d98505599da676e7fc21808c5eabe238cd6c47138a4bb63c088f2ba6 -> s3://niema-test/n100/r01/n100.r01.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:58:59  <-  n100.r01.s085.Main.cp_out_file 10d1b888 ok   extern 0s 35.7MiB
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): promoting objects (try 0): started
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): retrieving diagnostic output (try 0): started
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): retrieving result (try 0): started
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): transferring output (try 0): started
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): unloading (try 0): started
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): unloading list<val<.=b6e89877 35.7MiB> 35.7MiB>
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): unloading val<.=2409eca4 35.4MiB>
2021/07/08 13:59:04 scheduler task 128087c4 (flow 6dc80144): unloading val<.=77703d34 35.4MiB>
2021/07/08 13:59:05 scheduler task 128087c4 (flow 6dc80144): unloaded list<val<.=b6e89877 35.7MiB> 35.7MiB>
2021/07/08 13:59:05 scheduler task 128087c4 (flow 6dc80144): unloaded val<.=77703d34 35.4MiB>
2021/07/08 13:59:05 scheduler task 128087c4 (flow 6dc80144): unloaded val<.=2409eca4 35.4MiB>
2021/07/08 13:59:05 scheduler task 128087c4 (flow 6dc80144): unloading (try 0): successful, next state: complete
2021/07/08 13:59:05  <-  n100.r01.s061.Main.out_file 6dc80144 ok     exec 4m53s 35.7MiB
2021/07/08 13:59:05 n100.r01.s061.Main.out_file 6dc80144 n100/r01/n100.r01.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d4d1cd4e62f4434d81ceac57f0723ac1d769d29f0c5935d28d84a623adeeee6
	sha256:6dc80144a104acdd981571bc94ca3724a405ac02752d889c13280cfca6bdff00
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/128087c48c98184210a41db0e8f6205866b288c11ca2b8b9bf1b5b4b7bcd4644
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s061_output"
	    wget -O "n100.r01.s061_output/n100.r01.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s061_output/n100.r01.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s061_output/n100.r01.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s061_output/n100.r01.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s061_output/n100.r01.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s061_output/n100.r01.s061.reference.fas" "n100.r01.s061_output/n100.r01.s061.fq1.fastq" "n100.r01.s061_output/n100.r01.s061.fq2.fastq" | samtools view -bS - > "n100.r01.s061_output/n100.r01.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s061_output/n100.r01.s061.untrimmed.sorted.bam" "n100.r01.s061_output/n100.r01.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s061_output/n100.r01.s061.untrimmed.sorted.bam" -b "n100.r01.s061_output/n100.r01.s061.primers.bed" -p "n100.r01.s061_output/n100.r01.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" "n100.r01.s061_output/n100.r01.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s061_output/n100.r01.s061.reference.fas" "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" > "n100.r01.s061_output/n100.r01.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s061_output/n100.r01.s061.reference.fas" --call-indels "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" > "n100.r01.s061_output/n100.r01.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s061_output/n100.r01.s061.trimmed.sorted.bam" > "n100.r01.s061_output/n100.r01.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s061_output/n100.r01.s061.depth.txt" "n100.r01.s061_output/n100.r01.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s061_output/n100.r01.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s061_output/n100.r01.s061.reference.fas" | bcftools consensus -m "n100.r01.s061_output/n100.r01.s061.low_depth.tsv" tmp.vcf.gz > "n100.r01.s061_output/n100.r01.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b6e89877d5efe1676a5ed59763bdd06cd65e1ec621dcd3e0ff40725e4297fdec 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.0MiB max=127.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 13:59:05 scheduler task b1367e01 (flow fa699705): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s061.tar.gz resources {}
2021/07/08 13:59:05  ->  n100.r01.s061.Main.cp_out_file fa699705 exec extern s3://niema-test/n100/r01/n100.r01.s061.tar.gz 35.7MiB
2021/07/08 13:59:05 scheduler task b1367e01 (flow fa699705): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b6e89877d5efe1676a5ed59763bdd06cd65e1ec621dcd3e0ff40725e4297fdec -> s3://niema-test/n100/r01/n100.r01.s061.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:05  <-  n100.r01.s061.Main.cp_out_file fa699705 ok   extern 0s 35.7MiB
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): promoting objects (try 0): started
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): retrieving diagnostic output (try 0): started
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): retrieving result (try 0): started
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:07 scheduler task 251c61ad (flow b62d3501): transferring output (try 0): started
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloading (try 0): started
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloading list<val<.=86d9c4e4 35.7MiB> 35.7MiB>
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloading val<.=064cafa2 35.4MiB>
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloading val<.=161998d7 35.4MiB>
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloaded list<val<.=86d9c4e4 35.7MiB> 35.7MiB>
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloaded val<.=161998d7 35.4MiB>
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloaded val<.=064cafa2 35.4MiB>
2021/07/08 13:59:08 scheduler task 251c61ad (flow b62d3501): unloading (try 0): successful, next state: complete
2021/07/08 13:59:08  <-  n100.r01.s088.Main.out_file b62d3501 ok     exec 4m57s 35.7MiB
2021/07/08 13:59:08 n100.r01.s088.Main.out_file b62d3501 n100/r01/n100.r01.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9a584008d564c96b4a3ab698a1c27b586658782840f8ddb47cca465f48e081c0
	sha256:b62d3501e77e8bfa4ad81f7a603e7274b938dd329b504bdc869567c7f65a9241
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/251c61ad87f04ad93397c061fed7100aeb3bef1477648a12ccdc43fa26ecf20e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s088_output"
	    wget -O "n100.r01.s088_output/n100.r01.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s088_output/n100.r01.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s088_output/n100.r01.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s088_output/n100.r01.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s088_output/n100.r01.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s088_output/n100.r01.s088.reference.fas" "n100.r01.s088_output/n100.r01.s088.fq1.fastq" "n100.r01.s088_output/n100.r01.s088.fq2.fastq" | samtools view -bS - > "n100.r01.s088_output/n100.r01.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s088_output/n100.r01.s088.untrimmed.sorted.bam" "n100.r01.s088_output/n100.r01.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s088_output/n100.r01.s088.untrimmed.sorted.bam" -b "n100.r01.s088_output/n100.r01.s088.primers.bed" -p "n100.r01.s088_output/n100.r01.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" "n100.r01.s088_output/n100.r01.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s088_output/n100.r01.s088.reference.fas" "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" > "n100.r01.s088_output/n100.r01.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s088_output/n100.r01.s088.reference.fas" --call-indels "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" > "n100.r01.s088_output/n100.r01.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s088_output/n100.r01.s088.trimmed.sorted.bam" > "n100.r01.s088_output/n100.r01.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s088_output/n100.r01.s088.depth.txt" "n100.r01.s088_output/n100.r01.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s088_output/n100.r01.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s088_output/n100.r01.s088.reference.fas" | bcftools consensus -m "n100.r01.s088_output/n100.r01.s088.low_depth.tsv" tmp.vcf.gz > "n100.r01.s088_output/n100.r01.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:86d9c4e44019bd28c757d60f047433573ce3bdb22fdd8a76a24a7ef1b535615b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=125.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 13:59:08 scheduler task 7a41fb3c (flow 6ed34dfb): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s088.tar.gz resources {}
2021/07/08 13:59:08  ->  n100.r01.s088.Main.cp_out_file 6ed34dfb exec extern s3://niema-test/n100/r01/n100.r01.s088.tar.gz 35.7MiB
2021/07/08 13:59:08 scheduler task 7a41fb3c (flow 6ed34dfb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:86d9c4e44019bd28c757d60f047433573ce3bdb22fdd8a76a24a7ef1b535615b -> s3://niema-test/n100/r01/n100.r01.s088.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:08  <-  n100.r01.s088.Main.cp_out_file 6ed34dfb ok   extern 0s 35.7MiB
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): promoting objects (try 0): started
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): retrieving diagnostic output (try 0): started
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): retrieving result (try 0): started
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:11 scheduler task 1c7f103e (flow 066587e3): transferring output (try 0): started
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloading (try 0): started
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloading list<val<.=17b2c168 35.7MiB> 35.7MiB>
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloading val<.=99ac779b 35.4MiB>
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloading val<.=3c0f24ed 35.4MiB>
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloaded list<val<.=17b2c168 35.7MiB> 35.7MiB>
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloaded val<.=3c0f24ed 35.4MiB>
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloaded val<.=99ac779b 35.4MiB>
2021/07/08 13:59:12 scheduler task 1c7f103e (flow 066587e3): unloading (try 0): successful, next state: complete
2021/07/08 13:59:12  <-  n100.r01.s084.Main.out_file 066587e3 ok     exec 5m1s 35.7MiB
2021/07/08 13:59:12 n100.r01.s084.Main.out_file 066587e3 n100/r01/n100.r01.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6046250dc9b2f9ca09c98464be264cb0d9e016ca59931e56a3621749af1498b0
	sha256:066587e3a55e7979850e01c248781f54d8abb39acfbbcf74041dcb40a8fee229
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1c7f103ef560dfab2d6ba6a10163555ba5c2fd363b13d7449d418d10dec47434
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s084_output"
	    wget -O "n100.r01.s084_output/n100.r01.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s084_output/n100.r01.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s084_output/n100.r01.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s084_output/n100.r01.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s084_output/n100.r01.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s084_output/n100.r01.s084.reference.fas" "n100.r01.s084_output/n100.r01.s084.fq1.fastq" "n100.r01.s084_output/n100.r01.s084.fq2.fastq" | samtools view -bS - > "n100.r01.s084_output/n100.r01.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s084_output/n100.r01.s084.untrimmed.sorted.bam" "n100.r01.s084_output/n100.r01.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s084_output/n100.r01.s084.untrimmed.sorted.bam" -b "n100.r01.s084_output/n100.r01.s084.primers.bed" -p "n100.r01.s084_output/n100.r01.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" "n100.r01.s084_output/n100.r01.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s084_output/n100.r01.s084.reference.fas" "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" > "n100.r01.s084_output/n100.r01.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s084_output/n100.r01.s084.reference.fas" --call-indels "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" > "n100.r01.s084_output/n100.r01.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s084_output/n100.r01.s084.trimmed.sorted.bam" > "n100.r01.s084_output/n100.r01.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s084_output/n100.r01.s084.depth.txt" "n100.r01.s084_output/n100.r01.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s084_output/n100.r01.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s084_output/n100.r01.s084.reference.fas" | bcftools consensus -m "n100.r01.s084_output/n100.r01.s084.low_depth.tsv" tmp.vcf.gz > "n100.r01.s084_output/n100.r01.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:17b2c168bb02094e53ded9bd32f1f36e958c9b11814b8047ebf6ab8ea9d5673b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.7MiB max=131.4MiB
	    disk mean=9.7MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 13:59:12 scheduler task 9c0f436e (flow 2e0f6336): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s084.tar.gz resources {}
2021/07/08 13:59:12  ->  n100.r01.s084.Main.cp_out_file 2e0f6336 exec extern s3://niema-test/n100/r01/n100.r01.s084.tar.gz 35.7MiB
2021/07/08 13:59:13 scheduler task 9c0f436e (flow 2e0f6336): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:17b2c168bb02094e53ded9bd32f1f36e958c9b11814b8047ebf6ab8ea9d5673b -> s3://niema-test/n100/r01/n100.r01.s084.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:13  <-  n100.r01.s084.Main.cp_out_file 2e0f6336 ok   extern 0s 35.7MiB
2021/07/08 13:59:14 scheduler task 97660e05 (flow c1a6fe3a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:14 scheduler task 97660e05 (flow c1a6fe3a): promoting objects (try 0): started
2021/07/08 13:59:14 scheduler task 97660e05 (flow c1a6fe3a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:14 scheduler task 97660e05 (flow c1a6fe3a): retrieving diagnostic output (try 0): started
2021/07/08 13:59:14 scheduler task a5b4a8c4 (flow 64ed8f81): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:14 scheduler task 35fa303c (flow 0b006c5d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:14 scheduler task 91a49b70 (flow dc0a8500): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:14 scheduler task 97660e05 (flow c1a6fe3a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:14 scheduler task a5b4a8c4 (flow 64ed8f81): promoting objects (try 0): started
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): promoting objects (try 0): started
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): promoting objects (try 0): started
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): retrieving result (try 0): started
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): retrieving diagnostic output (try 0): started
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): retrieving diagnostic output (try 0): started
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): retrieving diagnostic output (try 0): started
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): transferring output (try 0): started
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): retrieving result (try 0): started
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): retrieving result (try 0): started
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): transferring output (try 0): started
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): retrieving result (try 0): started
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): transferring output (try 0): started
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:15 scheduler task 91a49b70 (flow dc0a8500): transferring output (try 0): started
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloading (try 0): started
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloading list<val<.=df4be475 35.8MiB> 35.8MiB>
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloading val<.=06ed5c2b 35.4MiB>
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloading val<.=ecbc05ee 35.4MiB>
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloaded list<val<.=df4be475 35.8MiB> 35.8MiB>
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloaded val<.=ecbc05ee 35.4MiB>
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloaded val<.=06ed5c2b 35.4MiB>
2021/07/08 13:59:15 scheduler task 97660e05 (flow c1a6fe3a): unloading (try 0): successful, next state: complete
2021/07/08 13:59:15  <-  n100.r01.s031.Main.out_file c1a6fe3a ok     exec 4m58s 35.8MiB
2021/07/08 13:59:15 n100.r01.s031.Main.out_file c1a6fe3a n100/r01/n100.r01.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5696d3ff8771b55f81beb18485dde98d60886f9552afcfd00f945fadf18930e
	sha256:c1a6fe3a5dbc06bfb0c09d1f738f071edfc562d0d7ac44d25fa5928985632b9e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97660e051de589b2f744e9bd9ab27e8ebf0607cd6127f19ee87f1e32bf60d5b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s031_output"
	    wget -O "n100.r01.s031_output/n100.r01.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s031_output/n100.r01.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s031_output/n100.r01.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s031_output/n100.r01.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s031_output/n100.r01.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s031_output/n100.r01.s031.reference.fas" "n100.r01.s031_output/n100.r01.s031.fq1.fastq" "n100.r01.s031_output/n100.r01.s031.fq2.fastq" | samtools view -bS - > "n100.r01.s031_output/n100.r01.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s031_output/n100.r01.s031.untrimmed.sorted.bam" "n100.r01.s031_output/n100.r01.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s031_output/n100.r01.s031.untrimmed.sorted.bam" -b "n100.r01.s031_output/n100.r01.s031.primers.bed" -p "n100.r01.s031_output/n100.r01.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" "n100.r01.s031_output/n100.r01.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s031_output/n100.r01.s031.reference.fas" "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" > "n100.r01.s031_output/n100.r01.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s031_output/n100.r01.s031.reference.fas" --call-indels "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" > "n100.r01.s031_output/n100.r01.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s031_output/n100.r01.s031.trimmed.sorted.bam" > "n100.r01.s031_output/n100.r01.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s031_output/n100.r01.s031.depth.txt" "n100.r01.s031_output/n100.r01.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s031_output/n100.r01.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s031_output/n100.r01.s031.reference.fas" | bcftools consensus -m "n100.r01.s031_output/n100.r01.s031.low_depth.tsv" tmp.vcf.gz > "n100.r01.s031_output/n100.r01.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:df4be475273ee05935ef10d112667564a94f2356e78900a986dcbad122273da9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.0MiB max=127.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 13:59:15 scheduler task ad71f973 (flow 30ac162b): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s031.tar.gz resources {}
2021/07/08 13:59:15  ->  n100.r01.s031.Main.cp_out_file 30ac162b exec extern s3://niema-test/n100/r01/n100.r01.s031.tar.gz 35.8MiB
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): unloading (try 0): started
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): unloading list<val<.=c086284f 35.7MiB> 35.7MiB>
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): unloading val<.=e9c4ba3c 35.4MiB>
2021/07/08 13:59:15 scheduler task a5b4a8c4 (flow 64ed8f81): unloading val<.=6badf129 35.4MiB>
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): unloading (try 0): started
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): unloading list<val<.=3025fd04 35.7MiB> 35.7MiB>
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): unloading val<.=495a4c8b 35.4MiB>
2021/07/08 13:59:15 scheduler task 35fa303c (flow 0b006c5d): unloading val<.=ca35bcff 35.4MiB>
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloading (try 0): started
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloading list<val<.=73a19b36 35.7MiB> 35.7MiB>
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloading val<.=c134d61e 35.4MiB>
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloading val<.=87166d25 35.4MiB>
2021/07/08 13:59:16 scheduler task a5b4a8c4 (flow 64ed8f81): unloaded list<val<.=c086284f 35.7MiB> 35.7MiB>
2021/07/08 13:59:16 scheduler task 35fa303c (flow 0b006c5d): unloaded val<.=495a4c8b 35.4MiB>
2021/07/08 13:59:16 scheduler task a5b4a8c4 (flow 64ed8f81): unloaded val<.=6badf129 35.4MiB>
2021/07/08 13:59:16 scheduler task a5b4a8c4 (flow 64ed8f81): unloaded val<.=e9c4ba3c 35.4MiB>
2021/07/08 13:59:16 scheduler task a5b4a8c4 (flow 64ed8f81): unloading (try 0): successful, next state: complete
2021/07/08 13:59:16 scheduler task 35fa303c (flow 0b006c5d): unloaded list<val<.=3025fd04 35.7MiB> 35.7MiB>
2021/07/08 13:59:16 scheduler task 35fa303c (flow 0b006c5d): unloaded val<.=ca35bcff 35.4MiB>
2021/07/08 13:59:16 scheduler task 35fa303c (flow 0b006c5d): unloading (try 0): successful, next state: complete
2021/07/08 13:59:16  <-  n100.r01.s010.Main.out_file 64ed8f81 ok     exec 5m2s 35.7MiB
2021/07/08 13:59:16 n100.r01.s010.Main.out_file 64ed8f81 n100/r01/n100.r01.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df983b5ecfe0300e9c0674f3906134cb39d194923803929912040ce50bcf63c0
	sha256:64ed8f8119e61092b03cf31e15e66b30df362c24c2eff5cec9d499736c7da700
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a5b4a8c49a022a43b205f4a9e3a0202202f079f5611a3413e4d41e42c025719f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s010_output"
	    wget -O "n100.r01.s010_output/n100.r01.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s010_output/n100.r01.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s010_output/n100.r01.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s010_output/n100.r01.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s010_output/n100.r01.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s010_output/n100.r01.s010.reference.fas" "n100.r01.s010_output/n100.r01.s010.fq1.fastq" "n100.r01.s010_output/n100.r01.s010.fq2.fastq" | samtools view -bS - > "n100.r01.s010_output/n100.r01.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s010_output/n100.r01.s010.untrimmed.sorted.bam" "n100.r01.s010_output/n100.r01.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s010_output/n100.r01.s010.untrimmed.sorted.bam" -b "n100.r01.s010_output/n100.r01.s010.primers.bed" -p "n100.r01.s010_output/n100.r01.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" "n100.r01.s010_output/n100.r01.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s010_output/n100.r01.s010.reference.fas" "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" > "n100.r01.s010_output/n100.r01.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s010_output/n100.r01.s010.reference.fas" --call-indels "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" > "n100.r01.s010_output/n100.r01.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s010_output/n100.r01.s010.trimmed.sorted.bam" > "n100.r01.s010_output/n100.r01.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s010_output/n100.r01.s010.depth.txt" "n100.r01.s010_output/n100.r01.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s010_output/n100.r01.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s010_output/n100.r01.s010.reference.fas" | bcftools consensus -m "n100.r01.s010_output/n100.r01.s010.low_depth.tsv" tmp.vcf.gz > "n100.r01.s010_output/n100.r01.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c086284fc9d1e69dc045c5855423e9cbfa52522c4c9b474073d58ef9279f81f2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.6MiB max=129.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 13:59:16 scheduler task 273d78b5 (flow 6759220e): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s010.tar.gz resources {}
2021/07/08 13:59:16  ->  n100.r01.s010.Main.cp_out_file 6759220e exec extern s3://niema-test/n100/r01/n100.r01.s010.tar.gz 35.7MiB
2021/07/08 13:59:16  <-  n100.r01.s025.Main.out_file 0b006c5d ok     exec 5m4s 35.7MiB
2021/07/08 13:59:16 n100.r01.s025.Main.out_file 0b006c5d n100/r01/n100.r01.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aa559d3d8b6e33f62c1bacf9a0f67b4a7ed974eed8c92c3f7021533d8d641ffa
	sha256:0b006c5da8713e0468d96c0cdf2500b3620d69699d321ab9aba01dd14157d2d5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/35fa303c5bc5205ab56fbab8dae89ffdaaea8d89d7785d5973f6fa0157595fdc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s025_output"
	    wget -O "n100.r01.s025_output/n100.r01.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s025_output/n100.r01.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s025_output/n100.r01.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s025_output/n100.r01.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s025_output/n100.r01.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s025_output/n100.r01.s025.reference.fas" "n100.r01.s025_output/n100.r01.s025.fq1.fastq" "n100.r01.s025_output/n100.r01.s025.fq2.fastq" | samtools view -bS - > "n100.r01.s025_output/n100.r01.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s025_output/n100.r01.s025.untrimmed.sorted.bam" "n100.r01.s025_output/n100.r01.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s025_output/n100.r01.s025.untrimmed.sorted.bam" -b "n100.r01.s025_output/n100.r01.s025.primers.bed" -p "n100.r01.s025_output/n100.r01.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" "n100.r01.s025_output/n100.r01.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s025_output/n100.r01.s025.reference.fas" "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" > "n100.r01.s025_output/n100.r01.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s025_output/n100.r01.s025.reference.fas" --call-indels "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" > "n100.r01.s025_output/n100.r01.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s025_output/n100.r01.s025.trimmed.sorted.bam" > "n100.r01.s025_output/n100.r01.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s025_output/n100.r01.s025.depth.txt" "n100.r01.s025_output/n100.r01.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s025_output/n100.r01.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s025_output/n100.r01.s025.reference.fas" | bcftools consensus -m "n100.r01.s025_output/n100.r01.s025.low_depth.tsv" tmp.vcf.gz > "n100.r01.s025_output/n100.r01.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3025fd044aa85dd262968fd00159da85c27c864254a05c95cff589ae9fa48f4a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.7MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:16 scheduler task 5399e270 (flow a08ce8e4): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s025.tar.gz resources {}
2021/07/08 13:59:16  ->  n100.r01.s025.Main.cp_out_file a08ce8e4 exec extern s3://niema-test/n100/r01/n100.r01.s025.tar.gz 35.7MiB
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloaded list<val<.=73a19b36 35.7MiB> 35.7MiB>
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloaded val<.=c134d61e 35.4MiB>
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloaded val<.=87166d25 35.4MiB>
2021/07/08 13:59:16 scheduler task 91a49b70 (flow dc0a8500): unloading (try 0): successful, next state: complete
2021/07/08 13:59:16  <-  n100.r01.s029.Main.out_file dc0a8500 ok     exec 5m4s 35.7MiB
2021/07/08 13:59:16 n100.r01.s029.Main.out_file dc0a8500 n100/r01/n100.r01.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:19576d6e2365baea17c4b894ccc53f29a7151622c8702d77715a5fa61d15e558
	sha256:dc0a8500d53d8a6fa86beb6321a5a19bdc3dc179b5c3d8a7a0a5bd837608517b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/91a49b702c1f5ce76e85ef7027daf9ec58d32fca251bf8761fc1fc35cc1435e2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s029_output"
	    wget -O "n100.r01.s029_output/n100.r01.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s029_output/n100.r01.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s029_output/n100.r01.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s029_output/n100.r01.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s029_output/n100.r01.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s029_output/n100.r01.s029.reference.fas" "n100.r01.s029_output/n100.r01.s029.fq1.fastq" "n100.r01.s029_output/n100.r01.s029.fq2.fastq" | samtools view -bS - > "n100.r01.s029_output/n100.r01.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s029_output/n100.r01.s029.untrimmed.sorted.bam" "n100.r01.s029_output/n100.r01.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s029_output/n100.r01.s029.untrimmed.sorted.bam" -b "n100.r01.s029_output/n100.r01.s029.primers.bed" -p "n100.r01.s029_output/n100.r01.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" "n100.r01.s029_output/n100.r01.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s029_output/n100.r01.s029.reference.fas" "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" > "n100.r01.s029_output/n100.r01.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s029_output/n100.r01.s029.reference.fas" --call-indels "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" > "n100.r01.s029_output/n100.r01.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s029_output/n100.r01.s029.trimmed.sorted.bam" > "n100.r01.s029_output/n100.r01.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s029_output/n100.r01.s029.depth.txt" "n100.r01.s029_output/n100.r01.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s029_output/n100.r01.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s029_output/n100.r01.s029.reference.fas" | bcftools consensus -m "n100.r01.s029_output/n100.r01.s029.low_depth.tsv" tmp.vcf.gz > "n100.r01.s029_output/n100.r01.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:73a19b363baac87ea22f14b4127979afeb6fb6ae5a714a168f865c2e16359faf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.5MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 13:59:16 scheduler task 0342cabb (flow c3c31873): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s029.tar.gz resources {}
2021/07/08 13:59:16  ->  n100.r01.s029.Main.cp_out_file c3c31873 exec extern s3://niema-test/n100/r01/n100.r01.s029.tar.gz 35.7MiB
2021/07/08 13:59:16 scheduler task ad71f973 (flow 30ac162b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:df4be475273ee05935ef10d112667564a94f2356e78900a986dcbad122273da9 -> s3://niema-test/n100/r01/n100.r01.s031.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:16  <-  n100.r01.s031.Main.cp_out_file 30ac162b ok   extern 0s 35.8MiB
2021/07/08 13:59:16 scheduler task 5399e270 (flow a08ce8e4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3025fd044aa85dd262968fd00159da85c27c864254a05c95cff589ae9fa48f4a -> s3://niema-test/n100/r01/n100.r01.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:16  <-  n100.r01.s025.Main.cp_out_file a08ce8e4 ok   extern 0s 35.7MiB
2021/07/08 13:59:16 scheduler task e89bffd7 (flow 5f65da5f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:16 scheduler task 273d78b5 (flow 6759220e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c086284fc9d1e69dc045c5855423e9cbfa52522c4c9b474073d58ef9279f81f2 -> s3://niema-test/n100/r01/n100.r01.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:16  <-  n100.r01.s010.Main.cp_out_file 6759220e ok   extern 0s 35.7MiB
2021/07/08 13:59:16 scheduler task e89bffd7 (flow 5f65da5f): promoting objects (try 0): started
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): retrieving diagnostic output (try 0): started
2021/07/08 13:59:17 scheduler task 0342cabb (flow c3c31873): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:73a19b363baac87ea22f14b4127979afeb6fb6ae5a714a168f865c2e16359faf -> s3://niema-test/n100/r01/n100.r01.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:17  <-  n100.r01.s029.Main.cp_out_file c3c31873 ok   extern 0s 35.7MiB
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): retrieving result (try 0): started
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): promoting objects (try 0): started
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): transferring output (try 0): started
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): retrieving diagnostic output (try 0): started
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): retrieving result (try 0): started
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:17 scheduler task df89e983 (flow 97443e88): transferring output (try 0): started
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloading (try 0): started
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloading list<val<.=42e12a19 35.8MiB> 35.8MiB>
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloading val<.=57341dd7 35.4MiB>
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloading val<.=c90eeeef 35.4MiB>
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloaded list<val<.=42e12a19 35.8MiB> 35.8MiB>
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloaded val<.=57341dd7 35.4MiB>
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloaded val<.=c90eeeef 35.4MiB>
2021/07/08 13:59:17 scheduler task e89bffd7 (flow 5f65da5f): unloading (try 0): successful, next state: complete
2021/07/08 13:59:17  <-  n100.r01.s064.Main.out_file 5f65da5f ok     exec 5m7s 35.8MiB
2021/07/08 13:59:17 n100.r01.s064.Main.out_file 5f65da5f n100/r01/n100.r01.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ead516d54d8f55e6db652e82800075e83ecf065c48bb39b45f55e3826137fdc
	sha256:5f65da5f51dfe99b5237ebe1f2abb6ac1e064720d5c998f1fa80ab9772d6f9b8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e89bffd70b7c8b0ef01499664fd3ea2fd6e20b86beb313c3d9554a47b325319e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s064_output"
	    wget -O "n100.r01.s064_output/n100.r01.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s064_output/n100.r01.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s064_output/n100.r01.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s064_output/n100.r01.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s064_output/n100.r01.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s064_output/n100.r01.s064.reference.fas" "n100.r01.s064_output/n100.r01.s064.fq1.fastq" "n100.r01.s064_output/n100.r01.s064.fq2.fastq" | samtools view -bS - > "n100.r01.s064_output/n100.r01.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s064_output/n100.r01.s064.untrimmed.sorted.bam" "n100.r01.s064_output/n100.r01.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s064_output/n100.r01.s064.untrimmed.sorted.bam" -b "n100.r01.s064_output/n100.r01.s064.primers.bed" -p "n100.r01.s064_output/n100.r01.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" "n100.r01.s064_output/n100.r01.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s064_output/n100.r01.s064.reference.fas" "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" > "n100.r01.s064_output/n100.r01.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s064_output/n100.r01.s064.reference.fas" --call-indels "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" > "n100.r01.s064_output/n100.r01.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s064_output/n100.r01.s064.trimmed.sorted.bam" > "n100.r01.s064_output/n100.r01.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s064_output/n100.r01.s064.depth.txt" "n100.r01.s064_output/n100.r01.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s064_output/n100.r01.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s064_output/n100.r01.s064.reference.fas" | bcftools consensus -m "n100.r01.s064_output/n100.r01.s064.low_depth.tsv" tmp.vcf.gz > "n100.r01.s064_output/n100.r01.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:42e12a19ac31492806220a38d9903f7cb1a8e90351ad47cda35582a0bfc16a12 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.3MiB max=126.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:17 scheduler task 1d174bfe (flow 843750a4): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s064.tar.gz resources {}
2021/07/08 13:59:17  ->  n100.r01.s064.Main.cp_out_file 843750a4 exec extern s3://niema-test/n100/r01/n100.r01.s064.tar.gz 35.8MiB
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloading (try 0): started
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloading list<val<.=d8c454c8 35.7MiB> 35.7MiB>
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloading val<.=7a3864cc 35.4MiB>
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloading val<.=e4dca5c0 35.4MiB>
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloaded val<.=e4dca5c0 35.4MiB>
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloaded list<val<.=d8c454c8 35.7MiB> 35.7MiB>
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloaded val<.=7a3864cc 35.4MiB>
2021/07/08 13:59:18 scheduler task df89e983 (flow 97443e88): unloading (try 0): successful, next state: complete
2021/07/08 13:59:18  <-  n100.r01.s039.Main.out_file 97443e88 ok     exec 4m57s 35.7MiB
2021/07/08 13:59:18 n100.r01.s039.Main.out_file 97443e88 n100/r01/n100.r01.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:65a147476b269a7fb7ce3d94b5a0364f0793c2b4a7a3659363046aa82819080f
	sha256:97443e88f37723dce03ad4b936efc14980ae7aa9425c6bd3f97e701d31117cb4
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df89e98328a9537f8af4539d06b4c5cbd49c47a2505c69f80972b2375e319d23
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s039_output"
	    wget -O "n100.r01.s039_output/n100.r01.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s039_output/n100.r01.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s039_output/n100.r01.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s039_output/n100.r01.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s039_output/n100.r01.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s039_output/n100.r01.s039.reference.fas" "n100.r01.s039_output/n100.r01.s039.fq1.fastq" "n100.r01.s039_output/n100.r01.s039.fq2.fastq" | samtools view -bS - > "n100.r01.s039_output/n100.r01.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s039_output/n100.r01.s039.untrimmed.sorted.bam" "n100.r01.s039_output/n100.r01.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s039_output/n100.r01.s039.untrimmed.sorted.bam" -b "n100.r01.s039_output/n100.r01.s039.primers.bed" -p "n100.r01.s039_output/n100.r01.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" "n100.r01.s039_output/n100.r01.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s039_output/n100.r01.s039.reference.fas" "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" > "n100.r01.s039_output/n100.r01.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s039_output/n100.r01.s039.reference.fas" --call-indels "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" > "n100.r01.s039_output/n100.r01.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s039_output/n100.r01.s039.trimmed.sorted.bam" > "n100.r01.s039_output/n100.r01.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s039_output/n100.r01.s039.depth.txt" "n100.r01.s039_output/n100.r01.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s039_output/n100.r01.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s039_output/n100.r01.s039.reference.fas" | bcftools consensus -m "n100.r01.s039_output/n100.r01.s039.low_depth.tsv" tmp.vcf.gz > "n100.r01.s039_output/n100.r01.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d8c454c8a29b2b01a2336bb25b0c2a28f10a1810befdb73a8a8ecbeed64d19d7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=124.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=414B max=1.0KiB
2021/07/08 13:59:18 scheduler task 2031f1ee (flow 224545f5): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s039.tar.gz resources {}
2021/07/08 13:59:18  ->  n100.r01.s039.Main.cp_out_file 224545f5 exec extern s3://niema-test/n100/r01/n100.r01.s039.tar.gz 35.7MiB
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): promoting objects (try 0): started
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): retrieving diagnostic output (try 0): started
2021/07/08 13:59:18 scheduler task 1d174bfe (flow 843750a4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:42e12a19ac31492806220a38d9903f7cb1a8e90351ad47cda35582a0bfc16a12 -> s3://niema-test/n100/r01/n100.r01.s064.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:18  <-  n100.r01.s064.Main.cp_out_file 843750a4 ok   extern 0s 35.8MiB
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:18 scheduler task 557c581c (flow ec5fcaaf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): retrieving result (try 0): started
2021/07/08 13:59:18 scheduler task 557c581c (flow ec5fcaaf): promoting objects (try 0): started
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:18 scheduler task 557c581c (flow ec5fcaaf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:18 scheduler task d3849377 (flow a3c64438): transferring output (try 0): started
2021/07/08 13:59:18 scheduler task 557c581c (flow ec5fcaaf): retrieving diagnostic output (try 0): started
2021/07/08 13:59:18 scheduler task 2031f1ee (flow 224545f5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d8c454c8a29b2b01a2336bb25b0c2a28f10a1810befdb73a8a8ecbeed64d19d7 -> s3://niema-test/n100/r01/n100.r01.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:18  <-  n100.r01.s039.Main.cp_out_file 224545f5 ok   extern 0s 35.7MiB
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): retrieving result (try 0): started
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): transferring output (try 0): started
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): promoting objects (try 0): started
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloading (try 0): started
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloading list<val<.=fd3762f6 35.7MiB> 35.7MiB>
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloading val<.=0bb954fb 35.4MiB>
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloading val<.=14b5cd6f 35.4MiB>
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): retrieving diagnostic output (try 0): started
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloaded val<.=0bb954fb 35.4MiB>
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloaded val<.=14b5cd6f 35.4MiB>
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloaded list<val<.=fd3762f6 35.7MiB> 35.7MiB>
2021/07/08 13:59:19 scheduler task d3849377 (flow a3c64438): unloading (try 0): successful, next state: complete
2021/07/08 13:59:19  <-  n100.r01.s008.Main.out_file a3c64438 ok     exec 5m2s 35.7MiB
2021/07/08 13:59:19 n100.r01.s008.Main.out_file a3c64438 n100/r01/n100.r01.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:709a3f5d7fe85e25fcf47eb8be2ea734453080d67c0e92d700f3810b3c57944d
	sha256:a3c64438b8c8adb9971739453ce52b3d529e5a211f3a069e950f2c8b02ba0159
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d38493775395e741db7a0088777d14c581ce20bc75998805d3d71e5e67fd6380
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s008_output"
	    wget -O "n100.r01.s008_output/n100.r01.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s008_output/n100.r01.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s008_output/n100.r01.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s008_output/n100.r01.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s008_output/n100.r01.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s008_output/n100.r01.s008.reference.fas" "n100.r01.s008_output/n100.r01.s008.fq1.fastq" "n100.r01.s008_output/n100.r01.s008.fq2.fastq" | samtools view -bS - > "n100.r01.s008_output/n100.r01.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s008_output/n100.r01.s008.untrimmed.sorted.bam" "n100.r01.s008_output/n100.r01.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s008_output/n100.r01.s008.untrimmed.sorted.bam" -b "n100.r01.s008_output/n100.r01.s008.primers.bed" -p "n100.r01.s008_output/n100.r01.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" "n100.r01.s008_output/n100.r01.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s008_output/n100.r01.s008.reference.fas" "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" > "n100.r01.s008_output/n100.r01.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s008_output/n100.r01.s008.reference.fas" --call-indels "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" > "n100.r01.s008_output/n100.r01.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s008_output/n100.r01.s008.trimmed.sorted.bam" > "n100.r01.s008_output/n100.r01.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s008_output/n100.r01.s008.depth.txt" "n100.r01.s008_output/n100.r01.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s008_output/n100.r01.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s008_output/n100.r01.s008.reference.fas" | bcftools consensus -m "n100.r01.s008_output/n100.r01.s008.low_depth.tsv" tmp.vcf.gz > "n100.r01.s008_output/n100.r01.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fd3762f6fb0c6aa8e1a00f50992c0e8f9443be5b21ea1a9d1fda56ee2f0ff26f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=125.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 13:59:19 scheduler task 90466cd1 (flow f11105b0): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s008.tar.gz resources {}
2021/07/08 13:59:19  ->  n100.r01.s008.Main.cp_out_file f11105b0 exec extern s3://niema-test/n100/r01/n100.r01.s008.tar.gz 35.7MiB
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): promoting objects (try 0): started
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): retrieving result (try 0): started
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): retrieving diagnostic output (try 0): started
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:19 scheduler task ee96b8c7 (flow 028284df): transferring output (try 0): started
2021/07/08 13:59:19 scheduler task 9bf76c45 (flow 493067ab): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:19 scheduler task 9bf76c45 (flow 493067ab): promoting objects (try 0): started
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): retrieving result (try 0): started
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:19 scheduler task 9bf76c45 (flow 493067ab): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloading (try 0): started
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloading list<val<.=68bc475d 35.7MiB> 35.7MiB>
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloading val<.=4e766a55 35.4MiB>
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloading val<.=30f4f0a1 35.4MiB>
2021/07/08 13:59:19 scheduler task 9bf76c45 (flow 493067ab): retrieving diagnostic output (try 0): started
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:19 scheduler task aae3d819 (flow cb63bac2): transferring output (try 0): started
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloaded val<.=30f4f0a1 35.4MiB>
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloaded val<.=4e766a55 35.4MiB>
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloaded list<val<.=68bc475d 35.7MiB> 35.7MiB>
2021/07/08 13:59:19 scheduler task 557c581c (flow ec5fcaaf): unloading (try 0): successful, next state: complete
2021/07/08 13:59:19  <-  n100.r01.s069.Main.out_file ec5fcaaf ok     exec 5m3s 35.7MiB
2021/07/08 13:59:19 n100.r01.s069.Main.out_file ec5fcaaf n100/r01/n100.r01.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebf8d9783e26b97a11eb1b08e0d35099c1909760778854d23bdeb0b7f000c743
	sha256:ec5fcaafdba330ae0533d88eeb407289f67731f88dbf933f88bc3fd65a9e5638
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/557c581cd839bf44cdfa15918e18999a6b1dc2b92a2e32c1707f5a9c3e6e59f1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s069_output"
	    wget -O "n100.r01.s069_output/n100.r01.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s069_output/n100.r01.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s069_output/n100.r01.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s069_output/n100.r01.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s069_output/n100.r01.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s069_output/n100.r01.s069.reference.fas" "n100.r01.s069_output/n100.r01.s069.fq1.fastq" "n100.r01.s069_output/n100.r01.s069.fq2.fastq" | samtools view -bS - > "n100.r01.s069_output/n100.r01.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s069_output/n100.r01.s069.untrimmed.sorted.bam" "n100.r01.s069_output/n100.r01.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s069_output/n100.r01.s069.untrimmed.sorted.bam" -b "n100.r01.s069_output/n100.r01.s069.primers.bed" -p "n100.r01.s069_output/n100.r01.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" "n100.r01.s069_output/n100.r01.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s069_output/n100.r01.s069.reference.fas" "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" > "n100.r01.s069_output/n100.r01.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s069_output/n100.r01.s069.reference.fas" --call-indels "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" > "n100.r01.s069_output/n100.r01.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s069_output/n100.r01.s069.trimmed.sorted.bam" > "n100.r01.s069_output/n100.r01.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s069_output/n100.r01.s069.depth.txt" "n100.r01.s069_output/n100.r01.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s069_output/n100.r01.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s069_output/n100.r01.s069.reference.fas" | bcftools consensus -m "n100.r01.s069_output/n100.r01.s069.low_depth.tsv" tmp.vcf.gz > "n100.r01.s069_output/n100.r01.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:68bc475dfe3fa96db8813a3c99b016f616d7ba85a4e668f70d0bb717a6b0f783 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.3MiB max=127.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:19 scheduler task a101d64a (flow dad543c8): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s069.tar.gz resources {}
2021/07/08 13:59:19  ->  n100.r01.s069.Main.cp_out_file dad543c8 exec extern s3://niema-test/n100/r01/n100.r01.s069.tar.gz 35.7MiB
2021/07/08 13:59:19 scheduler task 814eb11a (flow e490893d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:19 scheduler task 9bf76c45 (flow 493067ab): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:19 scheduler task 814eb11a (flow e490893d): promoting objects (try 0): started
2021/07/08 13:59:19 scheduler task 9bf76c45 (flow 493067ab): retrieving result (try 0): started
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): retrieving diagnostic output (try 0): started
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): transferring output (try 0): started
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): retrieving result (try 0): started
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): transferring output (try 0): started
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): promoting objects (try 0): started
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloading (try 0): started
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloading list<val<.=5c70de8f 35.7MiB> 35.7MiB>
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloading val<.=d1b8e383 35.4MiB>
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloading val<.=3f4a954a 35.4MiB>
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): retrieving diagnostic output (try 0): started
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloaded list<val<.=5c70de8f 35.7MiB> 35.7MiB>
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloaded val<.=d1b8e383 35.4MiB>
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloaded val<.=3f4a954a 35.4MiB>
2021/07/08 13:59:20 scheduler task ee96b8c7 (flow 028284df): unloading (try 0): successful, next state: complete
2021/07/08 13:59:20  <-  n100.r01.s076.Main.out_file 028284df ok     exec 5m1s 35.7MiB
2021/07/08 13:59:20 n100.r01.s076.Main.out_file 028284df n100/r01/n100.r01.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a38827b2b93bf58548259e2406de8716895597920aca1fb0412d12754a24698a
	sha256:028284df61fd561607502426a86f815e90c3c31ab819803cff277e83e082a4cc
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee96b8c74d012407cea7e3ced80b9ed9ac81eddd2e2e95fe34a7a0fb55cada67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s076_output"
	    wget -O "n100.r01.s076_output/n100.r01.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s076_output/n100.r01.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s076_output/n100.r01.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s076_output/n100.r01.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s076_output/n100.r01.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s076_output/n100.r01.s076.reference.fas" "n100.r01.s076_output/n100.r01.s076.fq1.fastq" "n100.r01.s076_output/n100.r01.s076.fq2.fastq" | samtools view -bS - > "n100.r01.s076_output/n100.r01.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s076_output/n100.r01.s076.untrimmed.sorted.bam" "n100.r01.s076_output/n100.r01.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s076_output/n100.r01.s076.untrimmed.sorted.bam" -b "n100.r01.s076_output/n100.r01.s076.primers.bed" -p "n100.r01.s076_output/n100.r01.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" "n100.r01.s076_output/n100.r01.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s076_output/n100.r01.s076.reference.fas" "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" > "n100.r01.s076_output/n100.r01.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s076_output/n100.r01.s076.reference.fas" --call-indels "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" > "n100.r01.s076_output/n100.r01.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s076_output/n100.r01.s076.trimmed.sorted.bam" > "n100.r01.s076_output/n100.r01.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s076_output/n100.r01.s076.depth.txt" "n100.r01.s076_output/n100.r01.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s076_output/n100.r01.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s076_output/n100.r01.s076.reference.fas" | bcftools consensus -m "n100.r01.s076_output/n100.r01.s076.low_depth.tsv" tmp.vcf.gz > "n100.r01.s076_output/n100.r01.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5c70de8ff2512c3f16aff9b3cd3468a37ea274157b04bf6278e42f3e0a71eb96 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.9MiB max=126.4MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 13:59:20 scheduler task 6b75c097 (flow 9d296ead): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s076.tar.gz resources {}
2021/07/08 13:59:20  ->  n100.r01.s076.Main.cp_out_file 9d296ead exec extern s3://niema-test/n100/r01/n100.r01.s076.tar.gz 35.7MiB
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloading (try 0): started
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloading list<val<.=d680cd42 35.6MiB> 35.6MiB>
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloading val<.=d870bdf1 35.4MiB>
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloading val<.=bae4bde8 35.4MiB>
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): retrieving result (try 0): started
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloaded val<.=bae4bde8 35.4MiB>
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloaded list<val<.=d680cd42 35.6MiB> 35.6MiB>
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloaded val<.=d870bdf1 35.4MiB>
2021/07/08 13:59:20 scheduler task aae3d819 (flow cb63bac2): unloading (try 0): successful, next state: complete
2021/07/08 13:59:20  <-  n100.r01.s002.Main.out_file cb63bac2 ok     exec 5m3s 35.6MiB
2021/07/08 13:59:20 n100.r01.s002.Main.out_file cb63bac2 n100/r01/n100.r01.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0bd02835a703b4e081c1be6d509023e864574a17f49456708c4fdec76ea8272
	sha256:cb63bac28fa2ac9f9ea655c45b43d55279b1da5ea114d807d626ece27a327a90
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aae3d819de35651711637f2827ed4054abfae89f99f38707f6ba0093ef5b5fee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s002_output"
	    wget -O "n100.r01.s002_output/n100.r01.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s002_output/n100.r01.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s002_output/n100.r01.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s002_output/n100.r01.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s002_output/n100.r01.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s002_output/n100.r01.s002.reference.fas" "n100.r01.s002_output/n100.r01.s002.fq1.fastq" "n100.r01.s002_output/n100.r01.s002.fq2.fastq" | samtools view -bS - > "n100.r01.s002_output/n100.r01.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s002_output/n100.r01.s002.untrimmed.sorted.bam" "n100.r01.s002_output/n100.r01.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s002_output/n100.r01.s002.untrimmed.sorted.bam" -b "n100.r01.s002_output/n100.r01.s002.primers.bed" -p "n100.r01.s002_output/n100.r01.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" "n100.r01.s002_output/n100.r01.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s002_output/n100.r01.s002.reference.fas" "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" > "n100.r01.s002_output/n100.r01.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s002_output/n100.r01.s002.reference.fas" --call-indels "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" > "n100.r01.s002_output/n100.r01.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s002_output/n100.r01.s002.trimmed.sorted.bam" > "n100.r01.s002_output/n100.r01.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s002_output/n100.r01.s002.depth.txt" "n100.r01.s002_output/n100.r01.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s002_output/n100.r01.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s002_output/n100.r01.s002.reference.fas" | bcftools consensus -m "n100.r01.s002_output/n100.r01.s002.low_depth.tsv" tmp.vcf.gz > "n100.r01.s002_output/n100.r01.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d680cd42b54f54b1eecb81e66e522e2d0615af2663d3931912e687b087283cc5 35.6MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=126.7MiB
	    disk mean=5.9MiB max=35.6MiB
	    tmp mean=694B max=2.0KiB
2021/07/08 13:59:20 scheduler task 0dee069b (flow a8c27891): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s002.tar.gz resources {}
2021/07/08 13:59:20  ->  n100.r01.s002.Main.cp_out_file a8c27891 exec extern s3://niema-test/n100/r01/n100.r01.s002.tar.gz 35.6MiB
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:20 scheduler task aa7885b4 (flow 963957c7): transferring output (try 0): started
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloading (try 0): started
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloading list<val<.=2f44008f 35.8MiB> 35.8MiB>
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloading val<.=fd04acec 35.4MiB>
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloading val<.=b0c7cfd4 35.4MiB>
2021/07/08 13:59:20 scheduler task a101d64a (flow dad543c8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:68bc475dfe3fa96db8813a3c99b016f616d7ba85a4e668f70d0bb717a6b0f783 -> s3://niema-test/n100/r01/n100.r01.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:20  <-  n100.r01.s069.Main.cp_out_file dad543c8 ok   extern 0s 35.7MiB
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloaded list<val<.=2f44008f 35.8MiB> 35.8MiB>
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloaded val<.=fd04acec 35.4MiB>
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloading (try 0): started
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloading list<val<.=035eef0c 35.8MiB> 35.8MiB>
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloading val<.=23c50f4f 35.4MiB>
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloading val<.=5de42a14 35.4MiB>
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloaded val<.=b0c7cfd4 35.4MiB>
2021/07/08 13:59:20 scheduler task 9bf76c45 (flow 493067ab): unloading (try 0): successful, next state: complete
2021/07/08 13:59:20  <-  n100.r01.s071.Main.out_file 493067ab ok     exec 5m7s 35.8MiB
2021/07/08 13:59:20 n100.r01.s071.Main.out_file 493067ab n100/r01/n100.r01.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:803052ef451b5f1a0213fe96d4c6b4e30973e0690fbb98162a18026659a24486
	sha256:493067abd5c56e694f2d80cd47880ec64cb948e52cc027824e758096362182c8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9bf76c451793411e97791208e8f8c4b225a3da4e548cf00cde99413ec9d618cc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s071_output"
	    wget -O "n100.r01.s071_output/n100.r01.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s071_output/n100.r01.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s071_output/n100.r01.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s071_output/n100.r01.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s071_output/n100.r01.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s071_output/n100.r01.s071.reference.fas" "n100.r01.s071_output/n100.r01.s071.fq1.fastq" "n100.r01.s071_output/n100.r01.s071.fq2.fastq" | samtools view -bS - > "n100.r01.s071_output/n100.r01.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s071_output/n100.r01.s071.untrimmed.sorted.bam" "n100.r01.s071_output/n100.r01.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s071_output/n100.r01.s071.untrimmed.sorted.bam" -b "n100.r01.s071_output/n100.r01.s071.primers.bed" -p "n100.r01.s071_output/n100.r01.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" "n100.r01.s071_output/n100.r01.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s071_output/n100.r01.s071.reference.fas" "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" > "n100.r01.s071_output/n100.r01.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s071_output/n100.r01.s071.reference.fas" --call-indels "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" > "n100.r01.s071_output/n100.r01.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s071_output/n100.r01.s071.trimmed.sorted.bam" > "n100.r01.s071_output/n100.r01.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s071_output/n100.r01.s071.depth.txt" "n100.r01.s071_output/n100.r01.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s071_output/n100.r01.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s071_output/n100.r01.s071.reference.fas" | bcftools consensus -m "n100.r01.s071_output/n100.r01.s071.low_depth.tsv" tmp.vcf.gz > "n100.r01.s071_output/n100.r01.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2f44008f65298ccf168486f7a7c8caf01ae4341ab3569c13ec07c4f881c3f0eb 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.7MiB max=129.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 13:59:20 scheduler task b7fbd5b3 (flow 8a5998a7): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s071.tar.gz resources {}
2021/07/08 13:59:20  ->  n100.r01.s071.Main.cp_out_file 8a5998a7 exec extern s3://niema-test/n100/r01/n100.r01.s071.tar.gz 35.8MiB
2021/07/08 13:59:20 scheduler task 7ec3898d (flow 236f7412): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:20 scheduler task 7ec3898d (flow 236f7412): promoting objects (try 0): started
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloaded val<.=23c50f4f 35.4MiB>
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloaded list<val<.=035eef0c 35.8MiB> 35.8MiB>
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloaded val<.=5de42a14 35.4MiB>
2021/07/08 13:59:20 scheduler task 814eb11a (flow e490893d): unloading (try 0): successful, next state: complete
2021/07/08 13:59:20  <-  n100.r01.s046.Main.out_file e490893d ok     exec 5m6s 35.8MiB
2021/07/08 13:59:20 n100.r01.s046.Main.out_file e490893d n100/r01/n100.r01.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61e34e14d98e4973affa70c211fd285ce588cbc256a3ce768c7a39b71cf8d871
	sha256:e490893d3caf5795d3c984b0e04e33bebad5b8519e900bcd8d4fafa343737b0b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/814eb11a69eedcb6e9bdd3115b2d0a6835d2da2e2d620d67441b5901c4a6309d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s046_output"
	    wget -O "n100.r01.s046_output/n100.r01.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s046_output/n100.r01.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s046_output/n100.r01.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s046_output/n100.r01.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s046_output/n100.r01.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s046_output/n100.r01.s046.reference.fas" "n100.r01.s046_output/n100.r01.s046.fq1.fastq" "n100.r01.s046_output/n100.r01.s046.fq2.fastq" | samtools view -bS - > "n100.r01.s046_output/n100.r01.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s046_output/n100.r01.s046.untrimmed.sorted.bam" "n100.r01.s046_output/n100.r01.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s046_output/n100.r01.s046.untrimmed.sorted.bam" -b "n100.r01.s046_output/n100.r01.s046.primers.bed" -p "n100.r01.s046_output/n100.r01.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" "n100.r01.s046_output/n100.r01.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s046_output/n100.r01.s046.reference.fas" "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" > "n100.r01.s046_output/n100.r01.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s046_output/n100.r01.s046.reference.fas" --call-indels "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" > "n100.r01.s046_output/n100.r01.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s046_output/n100.r01.s046.trimmed.sorted.bam" > "n100.r01.s046_output/n100.r01.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s046_output/n100.r01.s046.depth.txt" "n100.r01.s046_output/n100.r01.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s046_output/n100.r01.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s046_output/n100.r01.s046.reference.fas" | bcftools consensus -m "n100.r01.s046_output/n100.r01.s046.low_depth.tsv" tmp.vcf.gz > "n100.r01.s046_output/n100.r01.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:035eef0c6b990876757a75d4063e092a481a9b745e53d3d2f8705fdeb06568bc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.0MiB max=125.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:20 scheduler task 6078e9e5 (flow 9b085e7e): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s046.tar.gz resources {}
2021/07/08 13:59:20  ->  n100.r01.s046.Main.cp_out_file 9b085e7e exec extern s3://niema-test/n100/r01/n100.r01.s046.tar.gz 35.8MiB
2021/07/08 13:59:20 scheduler task 7ec3898d (flow 236f7412): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:20 scheduler task 7ec3898d (flow 236f7412): retrieving diagnostic output (try 0): started
2021/07/08 13:59:20 scheduler task 7ec3898d (flow 236f7412): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:20 scheduler task 7ec3898d (flow 236f7412): retrieving result (try 0): started
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): transferring output (try 0): started
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloading (try 0): started
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloading list<val<.=7e4821de 35.7MiB> 35.7MiB>
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloading val<.=7ef97a55 35.4MiB>
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloading val<.=d6c57969 35.4MiB>
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloaded list<val<.=7e4821de 35.7MiB> 35.7MiB>
2021/07/08 13:59:21 scheduler task 6b75c097 (flow 9d296ead): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5c70de8ff2512c3f16aff9b3cd3468a37ea274157b04bf6278e42f3e0a71eb96 -> s3://niema-test/n100/r01/n100.r01.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloaded val<.=7ef97a55 35.4MiB>
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloaded val<.=d6c57969 35.4MiB>
2021/07/08 13:59:21 scheduler task aa7885b4 (flow 963957c7): unloading (try 0): successful, next state: complete
2021/07/08 13:59:21  <-  n100.r01.s076.Main.cp_out_file 9d296ead ok   extern 0s 35.7MiB
2021/07/08 13:59:21  <-  n100.r01.s011.Main.out_file 963957c7 ok     exec 5m7s 35.7MiB
2021/07/08 13:59:21 n100.r01.s011.Main.out_file 963957c7 n100/r01/n100.r01.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:056b3e17f3a182b7cf257f4f2c49f268c48843dd8b2bce3ad59f6f844a2e8d6a
	sha256:963957c78735ebafca305fd66f48ffca8dd4b6f08f12e37f46845374667d19e8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aa7885b477ab7df1a039ec097fdf7d2c198fc4a34e4bd02176e45243cdf7fc03
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s011_output"
	    wget -O "n100.r01.s011_output/n100.r01.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s011_output/n100.r01.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s011_output/n100.r01.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s011_output/n100.r01.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s011_output/n100.r01.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s011_output/n100.r01.s011.reference.fas" "n100.r01.s011_output/n100.r01.s011.fq1.fastq" "n100.r01.s011_output/n100.r01.s011.fq2.fastq" | samtools view -bS - > "n100.r01.s011_output/n100.r01.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s011_output/n100.r01.s011.untrimmed.sorted.bam" "n100.r01.s011_output/n100.r01.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s011_output/n100.r01.s011.untrimmed.sorted.bam" -b "n100.r01.s011_output/n100.r01.s011.primers.bed" -p "n100.r01.s011_output/n100.r01.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" "n100.r01.s011_output/n100.r01.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s011_output/n100.r01.s011.reference.fas" "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" > "n100.r01.s011_output/n100.r01.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s011_output/n100.r01.s011.reference.fas" --call-indels "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" > "n100.r01.s011_output/n100.r01.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s011_output/n100.r01.s011.trimmed.sorted.bam" > "n100.r01.s011_output/n100.r01.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s011_output/n100.r01.s011.depth.txt" "n100.r01.s011_output/n100.r01.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s011_output/n100.r01.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s011_output/n100.r01.s011.reference.fas" | bcftools consensus -m "n100.r01.s011_output/n100.r01.s011.low_depth.tsv" tmp.vcf.gz > "n100.r01.s011_output/n100.r01.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7e4821de359c6f0f4291ff644cd14d134bcaf39e3edd6c91ec82a5addf6a7db3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.1MiB max=127.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:21 scheduler task ba018cf8 (flow 2657826e): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s011.tar.gz resources {}
2021/07/08 13:59:21  ->  n100.r01.s011.Main.cp_out_file 2657826e exec extern s3://niema-test/n100/r01/n100.r01.s011.tar.gz 35.7MiB
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): promoting objects (try 0): started
2021/07/08 13:59:21 scheduler task b7fbd5b3 (flow 8a5998a7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2f44008f65298ccf168486f7a7c8caf01ae4341ab3569c13ec07c4f881c3f0eb -> s3://niema-test/n100/r01/n100.r01.s071.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:21  <-  n100.r01.s071.Main.cp_out_file 8a5998a7 ok   extern 0s 35.8MiB
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): retrieving diagnostic output (try 0): started
2021/07/08 13:59:21 scheduler task 0dee069b (flow a8c27891): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d680cd42b54f54b1eecb81e66e522e2d0615af2663d3931912e687b087283cc5 -> s3://niema-test/n100/r01/n100.r01.s002.tar.gz (35.6MiB) in 1s (35.6MiB/s) 
2021/07/08 13:59:21  <-  n100.r01.s002.Main.cp_out_file a8c27891 ok   extern 0s 35.6MiB
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): retrieving result (try 0): started
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:21 scheduler task fa62b07a (flow 12d83baf): transferring output (try 0): started
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloading (try 0): started
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloading list<val<.=98643561 35.7MiB> 35.7MiB>
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloading val<.=3dd4459f 35.4MiB>
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloading val<.=0b688cf3 35.4MiB>
2021/07/08 13:59:21 scheduler task 6078e9e5 (flow 9b085e7e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:035eef0c6b990876757a75d4063e092a481a9b745e53d3d2f8705fdeb06568bc -> s3://niema-test/n100/r01/n100.r01.s046.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:21  <-  n100.r01.s046.Main.cp_out_file 9b085e7e ok   extern 0s 35.8MiB
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloaded val<.=0b688cf3 35.4MiB>
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloaded list<val<.=98643561 35.7MiB> 35.7MiB>
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloaded val<.=3dd4459f 35.4MiB>
2021/07/08 13:59:21 scheduler task 7ec3898d (flow 236f7412): unloading (try 0): successful, next state: complete
2021/07/08 13:59:21  <-  n100.r01.s024.Main.out_file 236f7412 ok     exec 5m11s 35.7MiB
2021/07/08 13:59:21 n100.r01.s024.Main.out_file 236f7412 n100/r01/n100.r01.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:157415717faf2df78dc42af84dc1c58014163af55429ba04cf62baa44b4ade4d
	sha256:236f74125cceae1240e5ad7283d90e488351c7908ae4f05becd684b21e127042
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ec3898dcb8c8ff877818a85f776dff2af805acf9bb74474268e9e33b0e9a385
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s024_output"
	    wget -O "n100.r01.s024_output/n100.r01.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s024_output/n100.r01.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s024_output/n100.r01.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s024_output/n100.r01.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s024_output/n100.r01.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s024_output/n100.r01.s024.reference.fas" "n100.r01.s024_output/n100.r01.s024.fq1.fastq" "n100.r01.s024_output/n100.r01.s024.fq2.fastq" | samtools view -bS - > "n100.r01.s024_output/n100.r01.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s024_output/n100.r01.s024.untrimmed.sorted.bam" "n100.r01.s024_output/n100.r01.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s024_output/n100.r01.s024.untrimmed.sorted.bam" -b "n100.r01.s024_output/n100.r01.s024.primers.bed" -p "n100.r01.s024_output/n100.r01.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" "n100.r01.s024_output/n100.r01.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s024_output/n100.r01.s024.reference.fas" "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" > "n100.r01.s024_output/n100.r01.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s024_output/n100.r01.s024.reference.fas" --call-indels "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" > "n100.r01.s024_output/n100.r01.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s024_output/n100.r01.s024.trimmed.sorted.bam" > "n100.r01.s024_output/n100.r01.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s024_output/n100.r01.s024.depth.txt" "n100.r01.s024_output/n100.r01.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s024_output/n100.r01.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s024_output/n100.r01.s024.reference.fas" | bcftools consensus -m "n100.r01.s024_output/n100.r01.s024.low_depth.tsv" tmp.vcf.gz > "n100.r01.s024_output/n100.r01.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:986435617d7cba497f74250dc9c28547c05efe0cde770d4f64594dacf39072d7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.7MiB max=124.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=869B max=2.0KiB
2021/07/08 13:59:21 scheduler task c4447cfc (flow ca123c69): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s024.tar.gz resources {}
2021/07/08 13:59:21  ->  n100.r01.s024.Main.cp_out_file ca123c69 exec extern s3://niema-test/n100/r01/n100.r01.s024.tar.gz 35.7MiB
2021/07/08 13:59:21 scheduler task bfa03bd4 (flow 75e88589): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:21 scheduler task bfa03bd4 (flow 75e88589): promoting objects (try 0): started
2021/07/08 13:59:21 scheduler task bfa03bd4 (flow 75e88589): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:21 scheduler task bfa03bd4 (flow 75e88589): retrieving diagnostic output (try 0): started
2021/07/08 13:59:21 scheduler task bfa03bd4 (flow 75e88589): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:21 scheduler task bfa03bd4 (flow 75e88589): retrieving result (try 0): started
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): transferring output (try 0): started
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloading (try 0): started
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloading list<val<.=c1ce616a 35.7MiB> 35.7MiB>
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloading val<.=1532fd33 35.4MiB>
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloading val<.=8f9234f5 35.4MiB>
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloaded val<.=8f9234f5 35.4MiB>
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloaded val<.=1532fd33 35.4MiB>
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloaded list<val<.=c1ce616a 35.7MiB> 35.7MiB>
2021/07/08 13:59:22 scheduler task fa62b07a (flow 12d83baf): unloading (try 0): successful, next state: complete
2021/07/08 13:59:22  <-  n100.r01.s087.Main.out_file 12d83baf ok     exec 5m6s 35.7MiB
2021/07/08 13:59:22 n100.r01.s087.Main.out_file 12d83baf n100/r01/n100.r01.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d92a583fa92e5aa589092bbbd7622ff30adaa6e5d8cb97e71d945d60508d700
	sha256:12d83baf59d4450d29101fd23e252edc36c345909ce3c8591f869d48de7d4cb0
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fa62b07ae4e2462d3de09afe35f161e9084e1e14cf75e77a9713ce3c1b8ce6a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s087_output"
	    wget -O "n100.r01.s087_output/n100.r01.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s087_output/n100.r01.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s087_output/n100.r01.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s087_output/n100.r01.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s087_output/n100.r01.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s087_output/n100.r01.s087.reference.fas" "n100.r01.s087_output/n100.r01.s087.fq1.fastq" "n100.r01.s087_output/n100.r01.s087.fq2.fastq" | samtools view -bS - > "n100.r01.s087_output/n100.r01.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s087_output/n100.r01.s087.untrimmed.sorted.bam" "n100.r01.s087_output/n100.r01.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s087_output/n100.r01.s087.untrimmed.sorted.bam" -b "n100.r01.s087_output/n100.r01.s087.primers.bed" -p "n100.r01.s087_output/n100.r01.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" "n100.r01.s087_output/n100.r01.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s087_output/n100.r01.s087.reference.fas" "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" > "n100.r01.s087_output/n100.r01.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s087_output/n100.r01.s087.reference.fas" --call-indels "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" > "n100.r01.s087_output/n100.r01.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s087_output/n100.r01.s087.trimmed.sorted.bam" > "n100.r01.s087_output/n100.r01.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s087_output/n100.r01.s087.depth.txt" "n100.r01.s087_output/n100.r01.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s087_output/n100.r01.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s087_output/n100.r01.s087.reference.fas" | bcftools consensus -m "n100.r01.s087_output/n100.r01.s087.low_depth.tsv" tmp.vcf.gz > "n100.r01.s087_output/n100.r01.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c1ce616ae26c1449076c45c44fdbf6842c17d099272377b39af0054656cd4165 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.6MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=869B max=3.0KiB
2021/07/08 13:59:22 scheduler task 6b1d9e40 (flow 708c41df): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s087.tar.gz resources {}
2021/07/08 13:59:22  ->  n100.r01.s087.Main.cp_out_file 708c41df exec extern s3://niema-test/n100/r01/n100.r01.s087.tar.gz 35.7MiB
2021/07/08 13:59:22 scheduler task ba018cf8 (flow 2657826e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7e4821de359c6f0f4291ff644cd14d134bcaf39e3edd6c91ec82a5addf6a7db3 -> s3://niema-test/n100/r01/n100.r01.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:22  <-  n100.r01.s011.Main.cp_out_file 2657826e ok   extern 0s 35.7MiB
2021/07/08 13:59:22 scheduler task c4447cfc (flow ca123c69): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:986435617d7cba497f74250dc9c28547c05efe0cde770d4f64594dacf39072d7 -> s3://niema-test/n100/r01/n100.r01.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:22  <-  n100.r01.s024.Main.cp_out_file ca123c69 ok   extern 0s 35.7MiB
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloading (try 0): started
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloading list<val<.=3308eb88 35.7MiB> 35.7MiB>
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloading val<.=b392c8c0 35.4MiB>
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloading val<.=02128290 35.4MiB>
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloaded val<.=02128290 35.4MiB>
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloaded val<.=b392c8c0 35.4MiB>
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloaded list<val<.=3308eb88 35.7MiB> 35.7MiB>
2021/07/08 13:59:22 scheduler task bfa03bd4 (flow 75e88589): unloading (try 0): successful, next state: complete
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:22  <-  n100.r01.s081.Main.out_file 75e88589 ok     exec 5m11s 35.7MiB
2021/07/08 13:59:22 n100.r01.s081.Main.out_file 75e88589 n100/r01/n100.r01.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d5a5ff8844d31530346f51811fd3686b930cd035c5e3727c5c7f459e10fc5967
	sha256:75e88589dec2d078cbb5a109a3d60d28fcac6799c7c79be8095ad86b16fb2899
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bfa03bd42c17c2f25ccd39f0db81b2fc3716689b418e6112b0583e04303eda60
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s081_output"
	    wget -O "n100.r01.s081_output/n100.r01.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s081_output/n100.r01.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s081_output/n100.r01.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s081_output/n100.r01.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s081_output/n100.r01.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s081_output/n100.r01.s081.reference.fas" "n100.r01.s081_output/n100.r01.s081.fq1.fastq" "n100.r01.s081_output/n100.r01.s081.fq2.fastq" | samtools view -bS - > "n100.r01.s081_output/n100.r01.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s081_output/n100.r01.s081.untrimmed.sorted.bam" "n100.r01.s081_output/n100.r01.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s081_output/n100.r01.s081.untrimmed.sorted.bam" -b "n100.r01.s081_output/n100.r01.s081.primers.bed" -p "n100.r01.s081_output/n100.r01.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" "n100.r01.s081_output/n100.r01.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s081_output/n100.r01.s081.reference.fas" "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" > "n100.r01.s081_output/n100.r01.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s081_output/n100.r01.s081.reference.fas" --call-indels "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" > "n100.r01.s081_output/n100.r01.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s081_output/n100.r01.s081.trimmed.sorted.bam" > "n100.r01.s081_output/n100.r01.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s081_output/n100.r01.s081.depth.txt" "n100.r01.s081_output/n100.r01.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s081_output/n100.r01.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s081_output/n100.r01.s081.reference.fas" | bcftools consensus -m "n100.r01.s081_output/n100.r01.s081.low_depth.tsv" tmp.vcf.gz > "n100.r01.s081_output/n100.r01.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3308eb889bf7c060b9d028d7d3badeabeef28e720388deb2431a70da3f88f271 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 13:59:22 scheduler task 1b506aa2 (flow b1a4cd61): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s081.tar.gz resources {}
2021/07/08 13:59:22  ->  n100.r01.s081.Main.cp_out_file b1a4cd61 exec extern s3://niema-test/n100/r01/n100.r01.s081.tar.gz 35.7MiB
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): promoting objects (try 0): started
2021/07/08 13:59:22 scheduler task 6b1d9e40 (flow 708c41df): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c1ce616ae26c1449076c45c44fdbf6842c17d099272377b39af0054656cd4165 -> s3://niema-test/n100/r01/n100.r01.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:22  <-  n100.r01.s087.Main.cp_out_file 708c41df ok   extern 0s 35.7MiB
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): retrieving diagnostic output (try 0): started
2021/07/08 13:59:22 scheduler task 90466cd1 (flow f11105b0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fd3762f6fb0c6aa8e1a00f50992c0e8f9443be5b21ea1a9d1fda56ee2f0ff26f -> s3://niema-test/n100/r01/n100.r01.s008.tar.gz (35.7MiB) in 3s (11.9MiB/s) 
2021/07/08 13:59:22  <-  n100.r01.s008.Main.cp_out_file f11105b0 ok   extern 0s 35.7MiB
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): retrieving result (try 0): started
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:22 scheduler task ffd18420 (flow 1fe8d91f): transferring output (try 0): started
2021/07/08 13:59:23 scheduler task 1b506aa2 (flow b1a4cd61): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3308eb889bf7c060b9d028d7d3badeabeef28e720388deb2431a70da3f88f271 -> s3://niema-test/n100/r01/n100.r01.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:23  <-  n100.r01.s081.Main.cp_out_file b1a4cd61 ok   extern 0s 35.7MiB
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): promoting objects (try 0): started
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): promoting objects (try 0): started
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloading (try 0): started
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloading list<val<.=d5f39ed6 35.7MiB> 35.7MiB>
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloading val<.=dafc8199 35.4MiB>
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloading val<.=c70b0ac1 35.4MiB>
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): retrieving diagnostic output (try 0): started
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): retrieving diagnostic output (try 0): started
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloaded list<val<.=d5f39ed6 35.7MiB> 35.7MiB>
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloaded val<.=c70b0ac1 35.4MiB>
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloaded val<.=dafc8199 35.4MiB>
2021/07/08 13:59:23 scheduler task ffd18420 (flow 1fe8d91f): unloading (try 0): successful, next state: complete
2021/07/08 13:59:23  <-  n100.r01.s099.Main.out_file 1fe8d91f ok     exec 5m9s 35.7MiB
2021/07/08 13:59:23 n100.r01.s099.Main.out_file 1fe8d91f n100/r01/n100.r01.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:292895583a5f36cc8e5aa714b1a1bd9db6e8699f242a20158eb5e29c7aa78456
	sha256:1fe8d91fa11659ab7dd45fc3eec867a3c2209d8181d353b1a1d3bb92aafdeb51
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ffd18420bf5d7b954420df00becf5d83e248ad334632f59c7bb7b079de2b08bd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s099_output"
	    wget -O "n100.r01.s099_output/n100.r01.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s099_output/n100.r01.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s099_output/n100.r01.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s099_output/n100.r01.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s099_output/n100.r01.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s099_output/n100.r01.s099.reference.fas" "n100.r01.s099_output/n100.r01.s099.fq1.fastq" "n100.r01.s099_output/n100.r01.s099.fq2.fastq" | samtools view -bS - > "n100.r01.s099_output/n100.r01.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s099_output/n100.r01.s099.untrimmed.sorted.bam" "n100.r01.s099_output/n100.r01.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s099_output/n100.r01.s099.untrimmed.sorted.bam" -b "n100.r01.s099_output/n100.r01.s099.primers.bed" -p "n100.r01.s099_output/n100.r01.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" "n100.r01.s099_output/n100.r01.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s099_output/n100.r01.s099.reference.fas" "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" > "n100.r01.s099_output/n100.r01.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s099_output/n100.r01.s099.reference.fas" --call-indels "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" > "n100.r01.s099_output/n100.r01.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s099_output/n100.r01.s099.trimmed.sorted.bam" > "n100.r01.s099_output/n100.r01.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s099_output/n100.r01.s099.depth.txt" "n100.r01.s099_output/n100.r01.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s099_output/n100.r01.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s099_output/n100.r01.s099.reference.fas" | bcftools consensus -m "n100.r01.s099_output/n100.r01.s099.low_depth.tsv" tmp.vcf.gz > "n100.r01.s099_output/n100.r01.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d5f39ed638805bf361ebc7d6ccc384b56af07c78041a772e01a80705a9a6d00c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.6MiB max=126.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.1KiB
2021/07/08 13:59:23 scheduler task 81470119 (flow b5472ecc): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s099.tar.gz resources {}
2021/07/08 13:59:23  ->  n100.r01.s099.Main.cp_out_file b5472ecc exec extern s3://niema-test/n100/r01/n100.r01.s099.tar.gz 35.7MiB
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): retrieving result (try 0): started
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): retrieving result (try 0): started
2021/07/08 13:59:23 scheduler task bef5a6aa (flow 50884d6c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:23 scheduler task bef5a6aa (flow 50884d6c): promoting objects (try 0): started
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:23 scheduler task 92de7a43 (flow 0b5af3a9): transferring output (try 0): started
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:23 scheduler task 468f0ab1 (flow acea3fd9): transferring output (try 0): started
2021/07/08 13:59:23 scheduler task bef5a6aa (flow 50884d6c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:23 scheduler task bef5a6aa (flow 50884d6c): retrieving diagnostic output (try 0): started
2021/07/08 13:59:23 scheduler task bef5a6aa (flow 50884d6c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:23 scheduler task bef5a6aa (flow 50884d6c): retrieving result (try 0): started
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): transferring output (try 0): started
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): promoting objects (try 0): started
2021/07/08 13:59:24 scheduler task 81470119 (flow b5472ecc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d5f39ed638805bf361ebc7d6ccc384b56af07c78041a772e01a80705a9a6d00c -> s3://niema-test/n100/r01/n100.r01.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:24  <-  n100.r01.s099.Main.cp_out_file b5472ecc ok   extern 0s 35.7MiB
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): retrieving diagnostic output (try 0): started
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloading (try 0): started
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloading list<val<.=a271c270 35.7MiB> 35.7MiB>
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloading val<.=fe777c80 35.4MiB>
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloading val<.=a7aed714 35.4MiB>
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloading (try 0): started
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloading list<val<.=ccc63056 35.7MiB> 35.7MiB>
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloading val<.=870e5ccc 35.4MiB>
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloading val<.=e7fca208 35.4MiB>
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): retrieving result (try 0): started
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloaded val<.=a7aed714 35.4MiB>
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloaded val<.=fe777c80 35.4MiB>
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloaded list<val<.=a271c270 35.7MiB> 35.7MiB>
2021/07/08 13:59:24 scheduler task 92de7a43 (flow 0b5af3a9): unloading (try 0): successful, next state: complete
2021/07/08 13:59:24  <-  n100.r01.s083.Main.out_file 0b5af3a9 ok     exec 5m8s 35.7MiB
2021/07/08 13:59:24 n100.r01.s083.Main.out_file 0b5af3a9 n100/r01/n100.r01.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac2978e25c8122a007b7916336d46c5682384511cb5614af60e23b738deeca4e
	sha256:0b5af3a9c72676124f0852d0d0eb06395120ac667dc9bb39342ac4a95f73f02d
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/92de7a43a28ba560b5fba735b4b9aa229b27c61d38cca36fdba97b6f743775b1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s083_output"
	    wget -O "n100.r01.s083_output/n100.r01.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s083_output/n100.r01.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s083_output/n100.r01.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s083_output/n100.r01.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s083_output/n100.r01.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s083_output/n100.r01.s083.reference.fas" "n100.r01.s083_output/n100.r01.s083.fq1.fastq" "n100.r01.s083_output/n100.r01.s083.fq2.fastq" | samtools view -bS - > "n100.r01.s083_output/n100.r01.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s083_output/n100.r01.s083.untrimmed.sorted.bam" "n100.r01.s083_output/n100.r01.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s083_output/n100.r01.s083.untrimmed.sorted.bam" -b "n100.r01.s083_output/n100.r01.s083.primers.bed" -p "n100.r01.s083_output/n100.r01.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" "n100.r01.s083_output/n100.r01.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s083_output/n100.r01.s083.reference.fas" "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" > "n100.r01.s083_output/n100.r01.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s083_output/n100.r01.s083.reference.fas" --call-indels "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" > "n100.r01.s083_output/n100.r01.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s083_output/n100.r01.s083.trimmed.sorted.bam" > "n100.r01.s083_output/n100.r01.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s083_output/n100.r01.s083.depth.txt" "n100.r01.s083_output/n100.r01.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s083_output/n100.r01.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s083_output/n100.r01.s083.reference.fas" | bcftools consensus -m "n100.r01.s083_output/n100.r01.s083.low_depth.tsv" tmp.vcf.gz > "n100.r01.s083_output/n100.r01.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a271c270a6eacbd34e371c9ebe43e538175ac679f3fe852636cac6f55fc78e5a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=123.9MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 13:59:24 scheduler task a9b8acab (flow e2da478a): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s083.tar.gz resources {}
2021/07/08 13:59:24  ->  n100.r01.s083.Main.cp_out_file e2da478a exec extern s3://niema-test/n100/r01/n100.r01.s083.tar.gz 35.7MiB
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloaded list<val<.=ccc63056 35.7MiB> 35.7MiB>
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloaded val<.=870e5ccc 35.4MiB>
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloaded val<.=e7fca208 35.4MiB>
2021/07/08 13:59:24 scheduler task 468f0ab1 (flow acea3fd9): unloading (try 0): successful, next state: complete
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): promoting objects (try 0): started
2021/07/08 13:59:24  <-  n100.r01.s018.Main.out_file acea3fd9 ok     exec 5m4s 35.7MiB
2021/07/08 13:59:24 n100.r01.s018.Main.out_file acea3fd9 n100/r01/n100.r01.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:807e27812ae98f205a726567adfe0b9807973d83324c52addce381b4881611d4
	sha256:acea3fd9adc816664da9b9034485a9d1e0c8b05e4c536cba20aa1d28e403d10f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/468f0ab16d0709694c433697593e5d70e4496f5d15c0b2e02336ccc0fe516191
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s018_output"
	    wget -O "n100.r01.s018_output/n100.r01.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s018_output/n100.r01.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s018_output/n100.r01.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s018_output/n100.r01.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s018_output/n100.r01.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s018_output/n100.r01.s018.reference.fas" "n100.r01.s018_output/n100.r01.s018.fq1.fastq" "n100.r01.s018_output/n100.r01.s018.fq2.fastq" | samtools view -bS - > "n100.r01.s018_output/n100.r01.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s018_output/n100.r01.s018.untrimmed.sorted.bam" "n100.r01.s018_output/n100.r01.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s018_output/n100.r01.s018.untrimmed.sorted.bam" -b "n100.r01.s018_output/n100.r01.s018.primers.bed" -p "n100.r01.s018_output/n100.r01.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" "n100.r01.s018_output/n100.r01.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s018_output/n100.r01.s018.reference.fas" "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" > "n100.r01.s018_output/n100.r01.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s018_output/n100.r01.s018.reference.fas" --call-indels "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" > "n100.r01.s018_output/n100.r01.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s018_output/n100.r01.s018.trimmed.sorted.bam" > "n100.r01.s018_output/n100.r01.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s018_output/n100.r01.s018.depth.txt" "n100.r01.s018_output/n100.r01.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s018_output/n100.r01.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s018_output/n100.r01.s018.reference.fas" | bcftools consensus -m "n100.r01.s018_output/n100.r01.s018.low_depth.tsv" tmp.vcf.gz > "n100.r01.s018_output/n100.r01.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ccc63056665902de4f62eb26e510d9add4b1c8ec10e5ca68c812f1bd7f77c237 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.8MiB max=125.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 13:59:24 scheduler task 6345ba2f (flow e7397a61): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s018.tar.gz resources {}
2021/07/08 13:59:24  ->  n100.r01.s018.Main.cp_out_file e7397a61 exec extern s3://niema-test/n100/r01/n100.r01.s018.tar.gz 35.7MiB
2021/07/08 13:59:24 scheduler task 13a3982a (flow c9646626): transferring output (try 0): started
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloading (try 0): started
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloading list<val<.=e60f0679 35.7MiB> 35.7MiB>
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloading val<.=75929da2 35.4MiB>
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloading val<.=fce026f4 35.4MiB>
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): promoting objects (try 0): started
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): retrieving diagnostic output (try 0): started
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloaded val<.=75929da2 35.4MiB>
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloaded list<val<.=e60f0679 35.7MiB> 35.7MiB>
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloaded val<.=fce026f4 35.4MiB>
2021/07/08 13:59:24 scheduler task bef5a6aa (flow 50884d6c): unloading (try 0): successful, next state: complete
2021/07/08 13:59:24  <-  n100.r01.s041.Main.out_file 50884d6c ok     exec 5m8s 35.7MiB
2021/07/08 13:59:24 n100.r01.s041.Main.out_file 50884d6c n100/r01/n100.r01.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5b6f5cba3902b71420a4feac9b452b69d2e8d44c1b0f4d280c2f0574fdf5ebbe
	sha256:50884d6c87553c2d49b48c72fda616fe3ec42722625d6d8dba6e77ccbe08ee83
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bef5a6aa79c5685e62da1c200d2f40e4d64f6f8737a56962ef514f527cd762ae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s041_output"
	    wget -O "n100.r01.s041_output/n100.r01.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s041_output/n100.r01.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s041_output/n100.r01.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s041_output/n100.r01.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s041_output/n100.r01.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s041_output/n100.r01.s041.reference.fas" "n100.r01.s041_output/n100.r01.s041.fq1.fastq" "n100.r01.s041_output/n100.r01.s041.fq2.fastq" | samtools view -bS - > "n100.r01.s041_output/n100.r01.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s041_output/n100.r01.s041.untrimmed.sorted.bam" "n100.r01.s041_output/n100.r01.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s041_output/n100.r01.s041.untrimmed.sorted.bam" -b "n100.r01.s041_output/n100.r01.s041.primers.bed" -p "n100.r01.s041_output/n100.r01.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" "n100.r01.s041_output/n100.r01.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s041_output/n100.r01.s041.reference.fas" "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" > "n100.r01.s041_output/n100.r01.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s041_output/n100.r01.s041.reference.fas" --call-indels "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" > "n100.r01.s041_output/n100.r01.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s041_output/n100.r01.s041.trimmed.sorted.bam" > "n100.r01.s041_output/n100.r01.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s041_output/n100.r01.s041.depth.txt" "n100.r01.s041_output/n100.r01.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s041_output/n100.r01.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s041_output/n100.r01.s041.reference.fas" | bcftools consensus -m "n100.r01.s041_output/n100.r01.s041.low_depth.tsv" tmp.vcf.gz > "n100.r01.s041_output/n100.r01.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e60f0679e61e29da6527ea7b1f2e26559f257eb0da986a7fc38fe18ab6690d28 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.7MiB max=128.3MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 13:59:24 scheduler task f9d21ec5 (flow 568813ff): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s041.tar.gz resources {}
2021/07/08 13:59:24  ->  n100.r01.s041.Main.cp_out_file 568813ff exec extern s3://niema-test/n100/r01/n100.r01.s041.tar.gz 35.7MiB
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): retrieving diagnostic output (try 0): started
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): retrieving result (try 0): started
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): retrieving result (try 0): started
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:24 scheduler task cc686dc9 (flow 9eb55c09): transferring output (try 0): started
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:24 scheduler task ea47d9ff (flow a882905c): transferring output (try 0): started
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloading (try 0): started
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloading list<val<.=8ab5bc37 35.7MiB> 35.7MiB>
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloading val<.=b73bb725 35.4MiB>
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloading val<.=d975ca80 35.4MiB>
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloaded list<val<.=8ab5bc37 35.7MiB> 35.7MiB>
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloaded val<.=b73bb725 35.4MiB>
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloaded val<.=d975ca80 35.4MiB>
2021/07/08 13:59:25 scheduler task 13a3982a (flow c9646626): unloading (try 0): successful, next state: complete
2021/07/08 13:59:25  <-  n100.r01.s097.Main.out_file c9646626 ok     exec 5m0s 35.7MiB
2021/07/08 13:59:25 n100.r01.s097.Main.out_file c9646626 n100/r01/n100.r01.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aded02f86abc40396dcab38ac5f0d29da8b72c000c2f3acfa145ee25751f33e0
	sha256:c96466262da811de9907b263a8e65e42dcd374877847d0b3a1aa87941f0c1bf6
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13a3982aff591f775ffe40da92e813476aedee83282e3a268a29bdb8eb78ef1b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s097_output"
	    wget -O "n100.r01.s097_output/n100.r01.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s097_output/n100.r01.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s097_output/n100.r01.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s097_output/n100.r01.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s097_output/n100.r01.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s097_output/n100.r01.s097.reference.fas" "n100.r01.s097_output/n100.r01.s097.fq1.fastq" "n100.r01.s097_output/n100.r01.s097.fq2.fastq" | samtools view -bS - > "n100.r01.s097_output/n100.r01.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s097_output/n100.r01.s097.untrimmed.sorted.bam" "n100.r01.s097_output/n100.r01.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s097_output/n100.r01.s097.untrimmed.sorted.bam" -b "n100.r01.s097_output/n100.r01.s097.primers.bed" -p "n100.r01.s097_output/n100.r01.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" "n100.r01.s097_output/n100.r01.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s097_output/n100.r01.s097.reference.fas" "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" > "n100.r01.s097_output/n100.r01.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s097_output/n100.r01.s097.reference.fas" --call-indels "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" > "n100.r01.s097_output/n100.r01.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s097_output/n100.r01.s097.trimmed.sorted.bam" > "n100.r01.s097_output/n100.r01.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s097_output/n100.r01.s097.depth.txt" "n100.r01.s097_output/n100.r01.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s097_output/n100.r01.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s097_output/n100.r01.s097.reference.fas" | bcftools consensus -m "n100.r01.s097_output/n100.r01.s097.low_depth.tsv" tmp.vcf.gz > "n100.r01.s097_output/n100.r01.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8ab5bc37bec1246e857f1376cf0de4fe874864e7dd92cda349c13f12401367ed 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.7MiB max=127.2MiB
	    disk mean=9.0MiB max=35.7MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 13:59:25 scheduler task 6d170da3 (flow df67db79): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s097.tar.gz resources {}
2021/07/08 13:59:25  ->  n100.r01.s097.Main.cp_out_file df67db79 exec extern s3://niema-test/n100/r01/n100.r01.s097.tar.gz 35.7MiB
2021/07/08 13:59:25 scheduler task a9b8acab (flow e2da478a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a271c270a6eacbd34e371c9ebe43e538175ac679f3fe852636cac6f55fc78e5a -> s3://niema-test/n100/r01/n100.r01.s083.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:25  <-  n100.r01.s083.Main.cp_out_file e2da478a ok   extern 0s 35.7MiB
2021/07/08 13:59:25 scheduler task 6345ba2f (flow e7397a61): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ccc63056665902de4f62eb26e510d9add4b1c8ec10e5ca68c812f1bd7f77c237 -> s3://niema-test/n100/r01/n100.r01.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:25  <-  n100.r01.s018.Main.cp_out_file e7397a61 ok   extern 0s 35.7MiB
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloading (try 0): started
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloading list<val<.=e7413bcc 35.7MiB> 35.7MiB>
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloading val<.=4f5db8ca 35.4MiB>
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloading val<.=84171e24 35.4MiB>
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloading (try 0): started
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloading list<val<.=fe4a2638 35.7MiB> 35.7MiB>
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloading val<.=4d742e29 35.4MiB>
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloading val<.=7f37cdfc 35.4MiB>
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): promoting objects (try 0): started
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloaded val<.=7f37cdfc 35.4MiB>
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloaded list<val<.=fe4a2638 35.7MiB> 35.7MiB>
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloaded val<.=4d742e29 35.4MiB>
2021/07/08 13:59:25 scheduler task cc686dc9 (flow 9eb55c09): unloading (try 0): successful, next state: complete
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloaded val<.=84171e24 35.4MiB>
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloaded list<val<.=e7413bcc 35.7MiB> 35.7MiB>
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloaded val<.=4f5db8ca 35.4MiB>
2021/07/08 13:59:25 scheduler task ea47d9ff (flow a882905c): unloading (try 0): successful, next state: complete
2021/07/08 13:59:25  <-  n100.r01.s050.Main.out_file 9eb55c09 ok     exec 5m11s 35.7MiB
2021/07/08 13:59:25 n100.r01.s050.Main.out_file 9eb55c09 n100/r01/n100.r01.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b64640ac315bf45758361f6269e9185fc811cb8d651624356d4653d35204c13c
	sha256:9eb55c09924badb699c1527296e3ef93c437ac78b2a6026e916fecf34b2ec672
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc686dc9f07f2c8f7ae615e74893e9a9c9618e65eaa07fc340fd547d93c44c8b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s050_output"
	    wget -O "n100.r01.s050_output/n100.r01.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s050_output/n100.r01.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s050_output/n100.r01.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s050_output/n100.r01.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s050_output/n100.r01.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s050_output/n100.r01.s050.reference.fas" "n100.r01.s050_output/n100.r01.s050.fq1.fastq" "n100.r01.s050_output/n100.r01.s050.fq2.fastq" | samtools view -bS - > "n100.r01.s050_output/n100.r01.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s050_output/n100.r01.s050.untrimmed.sorted.bam" "n100.r01.s050_output/n100.r01.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s050_output/n100.r01.s050.untrimmed.sorted.bam" -b "n100.r01.s050_output/n100.r01.s050.primers.bed" -p "n100.r01.s050_output/n100.r01.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" "n100.r01.s050_output/n100.r01.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s050_output/n100.r01.s050.reference.fas" "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" > "n100.r01.s050_output/n100.r01.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s050_output/n100.r01.s050.reference.fas" --call-indels "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" > "n100.r01.s050_output/n100.r01.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s050_output/n100.r01.s050.trimmed.sorted.bam" > "n100.r01.s050_output/n100.r01.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s050_output/n100.r01.s050.depth.txt" "n100.r01.s050_output/n100.r01.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s050_output/n100.r01.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s050_output/n100.r01.s050.reference.fas" | bcftools consensus -m "n100.r01.s050_output/n100.r01.s050.low_depth.tsv" tmp.vcf.gz > "n100.r01.s050_output/n100.r01.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fe4a263845c25d1abb88460d2bc77704b523661e51a4015874cd5374b9674d5a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=18.8MiB max=125.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 13:59:25 scheduler task cefd5222 (flow aeb46c37): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s050.tar.gz resources {}
2021/07/08 13:59:25  ->  n100.r01.s050.Main.cp_out_file aeb46c37 exec extern s3://niema-test/n100/r01/n100.r01.s050.tar.gz 35.7MiB
2021/07/08 13:59:25  <-  n100.r01.s047.Main.out_file a882905c ok     exec 5m1s 35.7MiB
2021/07/08 13:59:25 n100.r01.s047.Main.out_file a882905c n100/r01/n100.r01.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad7847a342248e89fbcf43a98fd2289ee3685942a39d8fb89320d754c4f325cf
	sha256:a882905ce53dcf0fef66c2a70c67fabac671743b0340b9e88f531992729862a0
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ea47d9ff210b3fe178a34e84879d2c6ff0470b5428755e30afadeb3dc62993e7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s047_output"
	    wget -O "n100.r01.s047_output/n100.r01.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s047_output/n100.r01.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s047_output/n100.r01.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s047_output/n100.r01.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s047_output/n100.r01.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s047_output/n100.r01.s047.reference.fas" "n100.r01.s047_output/n100.r01.s047.fq1.fastq" "n100.r01.s047_output/n100.r01.s047.fq2.fastq" | samtools view -bS - > "n100.r01.s047_output/n100.r01.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s047_output/n100.r01.s047.untrimmed.sorted.bam" "n100.r01.s047_output/n100.r01.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s047_output/n100.r01.s047.untrimmed.sorted.bam" -b "n100.r01.s047_output/n100.r01.s047.primers.bed" -p "n100.r01.s047_output/n100.r01.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" "n100.r01.s047_output/n100.r01.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s047_output/n100.r01.s047.reference.fas" "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" > "n100.r01.s047_output/n100.r01.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s047_output/n100.r01.s047.reference.fas" --call-indels "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" > "n100.r01.s047_output/n100.r01.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s047_output/n100.r01.s047.trimmed.sorted.bam" > "n100.r01.s047_output/n100.r01.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s047_output/n100.r01.s047.depth.txt" "n100.r01.s047_output/n100.r01.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s047_output/n100.r01.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s047_output/n100.r01.s047.reference.fas" | bcftools consensus -m "n100.r01.s047_output/n100.r01.s047.low_depth.tsv" tmp.vcf.gz > "n100.r01.s047_output/n100.r01.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e7413bcc48bee123e4dbcfb4fad7d4e2d0c0c86a270481856a7c451ab2f5544d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.5MiB max=127.5MiB
	    disk mean=8.8MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 13:59:25 scheduler task 7856907b (flow a8abcd53): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s047.tar.gz resources {}
2021/07/08 13:59:25  ->  n100.r01.s047.Main.cp_out_file a8abcd53 exec extern s3://niema-test/n100/r01/n100.r01.s047.tar.gz 35.7MiB
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): retrieving diagnostic output (try 0): started
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): retrieving result (try 0): started
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): promoting objects (try 0): started
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:25 scheduler task f9d21ec5 (flow 568813ff): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e60f0679e61e29da6527ea7b1f2e26559f257eb0da986a7fc38fe18ab6690d28 -> s3://niema-test/n100/r01/n100.r01.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:25  <-  n100.r01.s041.Main.cp_out_file 568813ff ok   extern 0s 35.7MiB
2021/07/08 13:59:25 scheduler task 6a8b9655 (flow 09a7347a): transferring output (try 0): started
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): retrieving diagnostic output (try 0): started
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:25 scheduler task dc6ab090 (flow a6c01e21): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): retrieving result (try 0): started
2021/07/08 13:59:25 scheduler task dc6ab090 (flow a6c01e21): promoting objects (try 0): started
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:25 scheduler task dc6ab090 (flow a6c01e21): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:25 scheduler task 0c141a13 (flow 9df7cd9b): transferring output (try 0): started
2021/07/08 13:59:25 scheduler task dc6ab090 (flow a6c01e21): retrieving diagnostic output (try 0): started
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:26 scheduler task cefd5222 (flow aeb46c37): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fe4a263845c25d1abb88460d2bc77704b523661e51a4015874cd5374b9674d5a -> s3://niema-test/n100/r01/n100.r01.s050.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:26  <-  n100.r01.s050.Main.cp_out_file aeb46c37 ok   extern 0s 35.7MiB
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): retrieving result (try 0): started
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): promoting objects (try 0): started
2021/07/08 13:59:26 scheduler task 6d170da3 (flow df67db79): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8ab5bc37bec1246e857f1376cf0de4fe874864e7dd92cda349c13f12401367ed -> s3://niema-test/n100/r01/n100.r01.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:26  <-  n100.r01.s097.Main.cp_out_file df67db79 ok   extern 0s 35.7MiB
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): promoting objects (try 0): started
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): retrieving diagnostic output (try 0): started
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): transferring output (try 0): started
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): retrieving diagnostic output (try 0): started
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): retrieving result (try 0): started
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloading (try 0): started
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloading list<val<.=d4f7d309 35.8MiB> 35.8MiB>
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloading val<.=b606c7ce 35.4MiB>
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloading val<.=27340a73 35.4MiB>
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): promoting objects (try 0): started
2021/07/08 13:59:26 scheduler task 7856907b (flow a8abcd53): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e7413bcc48bee123e4dbcfb4fad7d4e2d0c0c86a270481856a7c451ab2f5544d -> s3://niema-test/n100/r01/n100.r01.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:26  <-  n100.r01.s047.Main.cp_out_file a8abcd53 ok   extern 0s 35.7MiB
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloaded val<.=27340a73 35.4MiB>
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloaded val<.=b606c7ce 35.4MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloaded list<val<.=d4f7d309 35.8MiB> 35.8MiB>
2021/07/08 13:59:26 scheduler task 6a8b9655 (flow 09a7347a): unloading (try 0): successful, next state: complete
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): retrieving diagnostic output (try 0): started
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): retrieving result (try 0): started
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): transferring output (try 0): started
2021/07/08 13:59:26  <-  n100.r01.s042.Main.out_file 09a7347a ok     exec 5m2s 35.8MiB
2021/07/08 13:59:26 n100.r01.s042.Main.out_file 09a7347a n100/r01/n100.r01.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:477d3a0611e366ca36ab2011a5d1651ff1469a8d296835f3bb7f946cf09c5dd0
	sha256:09a7347acbbddb799849b71bc002f1ef640e05d8dadeb7be84af967a63d50e3f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a8b9655c3b375f5fcdfff0cc38c535a3374ef8de50734fe2380ff6ad28ca5f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s042_output"
	    wget -O "n100.r01.s042_output/n100.r01.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s042_output/n100.r01.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s042_output/n100.r01.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s042_output/n100.r01.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s042_output/n100.r01.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s042_output/n100.r01.s042.reference.fas" "n100.r01.s042_output/n100.r01.s042.fq1.fastq" "n100.r01.s042_output/n100.r01.s042.fq2.fastq" | samtools view -bS - > "n100.r01.s042_output/n100.r01.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s042_output/n100.r01.s042.untrimmed.sorted.bam" "n100.r01.s042_output/n100.r01.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s042_output/n100.r01.s042.untrimmed.sorted.bam" -b "n100.r01.s042_output/n100.r01.s042.primers.bed" -p "n100.r01.s042_output/n100.r01.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" "n100.r01.s042_output/n100.r01.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s042_output/n100.r01.s042.reference.fas" "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" > "n100.r01.s042_output/n100.r01.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s042_output/n100.r01.s042.reference.fas" --call-indels "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" > "n100.r01.s042_output/n100.r01.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s042_output/n100.r01.s042.trimmed.sorted.bam" > "n100.r01.s042_output/n100.r01.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s042_output/n100.r01.s042.depth.txt" "n100.r01.s042_output/n100.r01.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s042_output/n100.r01.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s042_output/n100.r01.s042.reference.fas" | bcftools consensus -m "n100.r01.s042_output/n100.r01.s042.low_depth.tsv" tmp.vcf.gz > "n100.r01.s042_output/n100.r01.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d4f7d3091f284f12d4ae7b97ca9d495fc4e7485f16280a74074ba3c935bc9d8a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=129.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 13:59:26 scheduler task 79ad0591 (flow ada32322): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s042.tar.gz resources {}
2021/07/08 13:59:26  ->  n100.r01.s042.Main.cp_out_file ada32322 exec extern s3://niema-test/n100/r01/n100.r01.s042.tar.gz 35.8MiB
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): transferring output (try 0): started
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): retrieving result (try 0): started
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloading (try 0): started
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloading list<val<.=94c30421 35.7MiB> 35.7MiB>
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloading val<.=bf18a799 35.4MiB>
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloading val<.=c64765e9 35.4MiB>
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloaded val<.=c64765e9 35.4MiB>
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloaded list<val<.=94c30421 35.7MiB> 35.7MiB>
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloaded val<.=bf18a799 35.4MiB>
2021/07/08 13:59:26 scheduler task 0c141a13 (flow 9df7cd9b): unloading (try 0): successful, next state: complete
2021/07/08 13:59:26 scheduler task c5917b88 (flow 1a8edfa6): transferring output (try 0): started
2021/07/08 13:59:26  <-  n100.r01.s027.Main.out_file 9df7cd9b ok     exec 5m10s 35.7MiB
2021/07/08 13:59:26 n100.r01.s027.Main.out_file 9df7cd9b n100/r01/n100.r01.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:995ec0663ff050104d70744aef606d0858ed21b422853f4fa1626924bb4e88fc
	sha256:9df7cd9bf1dda987e7860f6da1ae315a45747f563d8cbff2e6e935681c2fe39a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0c141a131d77d1e5b5265ca05e4282ef1fff1981663de2361df9b6ab4a26039a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s027_output"
	    wget -O "n100.r01.s027_output/n100.r01.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s027_output/n100.r01.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s027_output/n100.r01.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s027_output/n100.r01.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s027_output/n100.r01.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s027_output/n100.r01.s027.reference.fas" "n100.r01.s027_output/n100.r01.s027.fq1.fastq" "n100.r01.s027_output/n100.r01.s027.fq2.fastq" | samtools view -bS - > "n100.r01.s027_output/n100.r01.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s027_output/n100.r01.s027.untrimmed.sorted.bam" "n100.r01.s027_output/n100.r01.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s027_output/n100.r01.s027.untrimmed.sorted.bam" -b "n100.r01.s027_output/n100.r01.s027.primers.bed" -p "n100.r01.s027_output/n100.r01.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" "n100.r01.s027_output/n100.r01.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s027_output/n100.r01.s027.reference.fas" "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" > "n100.r01.s027_output/n100.r01.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s027_output/n100.r01.s027.reference.fas" --call-indels "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" > "n100.r01.s027_output/n100.r01.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s027_output/n100.r01.s027.trimmed.sorted.bam" > "n100.r01.s027_output/n100.r01.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s027_output/n100.r01.s027.depth.txt" "n100.r01.s027_output/n100.r01.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s027_output/n100.r01.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s027_output/n100.r01.s027.reference.fas" | bcftools consensus -m "n100.r01.s027_output/n100.r01.s027.low_depth.tsv" tmp.vcf.gz > "n100.r01.s027_output/n100.r01.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:94c30421b9d5c31c4ae977aec80fc347cc467778775fe415dd2ddd0793f51987 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=868B max=2.0KiB
2021/07/08 13:59:26 scheduler task ebdb3359 (flow 1805661f): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s027.tar.gz resources {}
2021/07/08 13:59:26  ->  n100.r01.s027.Main.cp_out_file 1805661f exec extern s3://niema-test/n100/r01/n100.r01.s027.tar.gz 35.7MiB
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloading (try 0): started
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloading list<val<.=71eec149 35.8MiB> 35.8MiB>
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloading val<.=afaf88dd 35.4MiB>
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloading val<.=7117496b 35.4MiB>
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloaded list<val<.=71eec149 35.8MiB> 35.8MiB>
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloaded val<.=afaf88dd 35.4MiB>
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloaded val<.=7117496b 35.4MiB>
2021/07/08 13:59:26 scheduler task dc6ab090 (flow a6c01e21): unloading (try 0): successful, next state: complete
2021/07/08 13:59:26  <-  n100.r01.s052.Main.out_file a6c01e21 ok     exec 5m5s 35.8MiB
2021/07/08 13:59:26 n100.r01.s052.Main.out_file a6c01e21 n100/r01/n100.r01.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1f0a888d22559fea07ea0d7f68f1ddacced326289019e21df38b76f09619f88
	sha256:a6c01e21fb7476fb9cfa35b651eea9f6c5f86d473fe2e05af1132210548db6f7
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dc6ab09046238c9445219efb5b99506b992918a97c2ec0c1945b2d84c77a4440
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s052_output"
	    wget -O "n100.r01.s052_output/n100.r01.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s052_output/n100.r01.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s052_output/n100.r01.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s052_output/n100.r01.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s052_output/n100.r01.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s052_output/n100.r01.s052.reference.fas" "n100.r01.s052_output/n100.r01.s052.fq1.fastq" "n100.r01.s052_output/n100.r01.s052.fq2.fastq" | samtools view -bS - > "n100.r01.s052_output/n100.r01.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s052_output/n100.r01.s052.untrimmed.sorted.bam" "n100.r01.s052_output/n100.r01.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s052_output/n100.r01.s052.untrimmed.sorted.bam" -b "n100.r01.s052_output/n100.r01.s052.primers.bed" -p "n100.r01.s052_output/n100.r01.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" "n100.r01.s052_output/n100.r01.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s052_output/n100.r01.s052.reference.fas" "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" > "n100.r01.s052_output/n100.r01.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s052_output/n100.r01.s052.reference.fas" --call-indels "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" > "n100.r01.s052_output/n100.r01.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s052_output/n100.r01.s052.trimmed.sorted.bam" > "n100.r01.s052_output/n100.r01.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s052_output/n100.r01.s052.depth.txt" "n100.r01.s052_output/n100.r01.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s052_output/n100.r01.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s052_output/n100.r01.s052.reference.fas" | bcftools consensus -m "n100.r01.s052_output/n100.r01.s052.low_depth.tsv" tmp.vcf.gz > "n100.r01.s052_output/n100.r01.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:71eec149a5d550caa177f8eb50acd861199cdf2cb2f361e1773fb955cc7703f0 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.4MiB max=131.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=871B max=3.1KiB
2021/07/08 13:59:26 scheduler task 7c4bde1a (flow 0f1fb33f): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s052.tar.gz resources {}
2021/07/08 13:59:26  ->  n100.r01.s052.Main.cp_out_file 0f1fb33f exec extern s3://niema-test/n100/r01/n100.r01.s052.tar.gz 35.8MiB
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloading (try 0): started
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloading list<val<.=010fc88d 35.7MiB> 35.7MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloading val<.=15053d43 35.4MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloading val<.=015189ef 35.4MiB>
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): unloading (try 0): started
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): unloading list<val<.=9ca118a4 35.8MiB> 35.8MiB>
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): unloading val<.=cd958405 35.4MiB>
2021/07/08 13:59:26 scheduler task dd684b46 (flow 9d1a9286): unloading val<.=aa2c840d 35.4MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloaded val<.=15053d43 35.4MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloaded list<val<.=010fc88d 35.7MiB> 35.7MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloaded val<.=015189ef 35.4MiB>
2021/07/08 13:59:26 scheduler task 5d1b3fa7 (flow 5ac278bc): unloading (try 0): successful, next state: complete
2021/07/08 13:59:26  <-  n100.r01.s040.Main.out_file 5ac278bc ok     exec 5m6s 35.7MiB
2021/07/08 13:59:26 n100.r01.s040.Main.out_file 5ac278bc n100/r01/n100.r01.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55bf8d1404c206e7b95cf9f9772bcd12a3fdddd27ca1d70e43a02f430d94d8b7
	sha256:5ac278bcc09e227efa412d31c050cec5a91c121dcbba07ff63194173cc946162
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5d1b3fa7aa529008106e4389c98daded2006a13b6f4c285075f7190344ec4824
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s040_output"
	    wget -O "n100.r01.s040_output/n100.r01.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s040_output/n100.r01.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s040_output/n100.r01.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s040_output/n100.r01.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s040_output/n100.r01.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s040_output/n100.r01.s040.reference.fas" "n100.r01.s040_output/n100.r01.s040.fq1.fastq" "n100.r01.s040_output/n100.r01.s040.fq2.fastq" | samtools view -bS - > "n100.r01.s040_output/n100.r01.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s040_output/n100.r01.s040.untrimmed.sorted.bam" "n100.r01.s040_output/n100.r01.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s040_output/n100.r01.s040.untrimmed.sorted.bam" -b "n100.r01.s040_output/n100.r01.s040.primers.bed" -p "n100.r01.s040_output/n100.r01.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" "n100.r01.s040_output/n100.r01.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s040_output/n100.r01.s040.reference.fas" "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" > "n100.r01.s040_output/n100.r01.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s040_output/n100.r01.s040.reference.fas" --call-indels "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" > "n100.r01.s040_output/n100.r01.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s040_output/n100.r01.s040.trimmed.sorted.bam" > "n100.r01.s040_output/n100.r01.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s040_output/n100.r01.s040.depth.txt" "n100.r01.s040_output/n100.r01.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s040_output/n100.r01.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s040_output/n100.r01.s040.reference.fas" | bcftools consensus -m "n100.r01.s040_output/n100.r01.s040.low_depth.tsv" tmp.vcf.gz > "n100.r01.s040_output/n100.r01.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:010fc88d0b3b16c95f0da0d5531ec2af32f4309a8bc9bb9129078501daeaf098 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.0MiB max=127.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:26 scheduler task 6c0a0ab0 (flow a0190382): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s040.tar.gz resources {}
2021/07/08 13:59:26  ->  n100.r01.s040.Main.cp_out_file a0190382 exec extern s3://niema-test/n100/r01/n100.r01.s040.tar.gz 35.7MiB
2021/07/08 13:59:27 scheduler task dd684b46 (flow 9d1a9286): unloaded val<.=cd958405 35.4MiB>
2021/07/08 13:59:27 scheduler task dd684b46 (flow 9d1a9286): unloaded list<val<.=9ca118a4 35.8MiB> 35.8MiB>
2021/07/08 13:59:27 scheduler task dd684b46 (flow 9d1a9286): unloaded val<.=aa2c840d 35.4MiB>
2021/07/08 13:59:27 scheduler task dd684b46 (flow 9d1a9286): unloading (try 0): successful, next state: complete
2021/07/08 13:59:27 scheduler task 79ad0591 (flow ada32322): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d4f7d3091f284f12d4ae7b97ca9d495fc4e7485f16280a74074ba3c935bc9d8a -> s3://niema-test/n100/r01/n100.r01.s042.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:27  <-  n100.r01.s042.Main.cp_out_file ada32322 ok   extern 0s 35.8MiB
2021/07/08 13:59:27  <-  n100.r01.s030.Main.out_file 9d1a9286 ok     exec 5m13s 35.8MiB
2021/07/08 13:59:27 n100.r01.s030.Main.out_file 9d1a9286 n100/r01/n100.r01.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:774fbb8aaea51785e4628bf58d968bd67b58e56d01df1ae1b31b36deed02e6d2
	sha256:9d1a9286df2361ef2d5d30029d4466053f7804c1b28416f794d086ed7298fca5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dd684b466cecd4d253f2f99a3ae36d21c9a9f816dbee2f7134f2b108a6e04de8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s030_output"
	    wget -O "n100.r01.s030_output/n100.r01.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s030_output/n100.r01.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s030_output/n100.r01.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s030_output/n100.r01.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s030_output/n100.r01.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s030_output/n100.r01.s030.reference.fas" "n100.r01.s030_output/n100.r01.s030.fq1.fastq" "n100.r01.s030_output/n100.r01.s030.fq2.fastq" | samtools view -bS - > "n100.r01.s030_output/n100.r01.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s030_output/n100.r01.s030.untrimmed.sorted.bam" "n100.r01.s030_output/n100.r01.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s030_output/n100.r01.s030.untrimmed.sorted.bam" -b "n100.r01.s030_output/n100.r01.s030.primers.bed" -p "n100.r01.s030_output/n100.r01.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" "n100.r01.s030_output/n100.r01.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s030_output/n100.r01.s030.reference.fas" "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" > "n100.r01.s030_output/n100.r01.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s030_output/n100.r01.s030.reference.fas" --call-indels "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" > "n100.r01.s030_output/n100.r01.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s030_output/n100.r01.s030.trimmed.sorted.bam" > "n100.r01.s030_output/n100.r01.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s030_output/n100.r01.s030.depth.txt" "n100.r01.s030_output/n100.r01.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s030_output/n100.r01.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s030_output/n100.r01.s030.reference.fas" | bcftools consensus -m "n100.r01.s030_output/n100.r01.s030.low_depth.tsv" tmp.vcf.gz > "n100.r01.s030_output/n100.r01.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9ca118a40b24ddd9503bed5c6c7947cb8341067d711d164f4bb620923cb967fd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=130.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=689B max=2.0KiB
2021/07/08 13:59:27 scheduler task dc2195a5 (flow 56aa0c92): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s030.tar.gz resources {}
2021/07/08 13:59:27  ->  n100.r01.s030.Main.cp_out_file 56aa0c92 exec extern s3://niema-test/n100/r01/n100.r01.s030.tar.gz 35.8MiB
2021/07/08 13:59:27 scheduler task ebdb3359 (flow 1805661f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:94c30421b9d5c31c4ae977aec80fc347cc467778775fe415dd2ddd0793f51987 -> s3://niema-test/n100/r01/n100.r01.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:27  <-  n100.r01.s027.Main.cp_out_file 1805661f ok   extern 0s 35.7MiB
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloading (try 0): started
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloading list<val<.=123a743a 35.8MiB> 35.8MiB>
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloading val<.=4cf0f06d 35.4MiB>
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloading val<.=647a6102 35.4MiB>
2021/07/08 13:59:27 scheduler task 7c4bde1a (flow 0f1fb33f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:71eec149a5d550caa177f8eb50acd861199cdf2cb2f361e1773fb955cc7703f0 -> s3://niema-test/n100/r01/n100.r01.s052.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:27  <-  n100.r01.s052.Main.cp_out_file 0f1fb33f ok   extern 0s 35.8MiB
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloaded val<.=647a6102 35.4MiB>
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloaded list<val<.=123a743a 35.8MiB> 35.8MiB>
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloaded val<.=4cf0f06d 35.4MiB>
2021/07/08 13:59:27 scheduler task c5917b88 (flow 1a8edfa6): unloading (try 0): successful, next state: complete
2021/07/08 13:59:27  <-  n100.r01.s098.Main.out_file 1a8edfa6 ok     exec 5m10s 35.8MiB
2021/07/08 13:59:27 n100.r01.s098.Main.out_file 1a8edfa6 n100/r01/n100.r01.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bc9205c2e359160b8fc3e676b708cfe21b673172a2113ab1961f5b70a478ccb2
	sha256:1a8edfa6af0a8548ff792b31495b227e56ea69eed10e36899361dd3c86a15a91
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5917b884acfc74864d40259f2e61779c695e638c23d509050669552ac4aadb5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s098_output"
	    wget -O "n100.r01.s098_output/n100.r01.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s098_output/n100.r01.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s098_output/n100.r01.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s098_output/n100.r01.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s098_output/n100.r01.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s098_output/n100.r01.s098.reference.fas" "n100.r01.s098_output/n100.r01.s098.fq1.fastq" "n100.r01.s098_output/n100.r01.s098.fq2.fastq" | samtools view -bS - > "n100.r01.s098_output/n100.r01.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s098_output/n100.r01.s098.untrimmed.sorted.bam" "n100.r01.s098_output/n100.r01.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s098_output/n100.r01.s098.untrimmed.sorted.bam" -b "n100.r01.s098_output/n100.r01.s098.primers.bed" -p "n100.r01.s098_output/n100.r01.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" "n100.r01.s098_output/n100.r01.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s098_output/n100.r01.s098.reference.fas" "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" > "n100.r01.s098_output/n100.r01.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s098_output/n100.r01.s098.reference.fas" --call-indels "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" > "n100.r01.s098_output/n100.r01.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s098_output/n100.r01.s098.trimmed.sorted.bam" > "n100.r01.s098_output/n100.r01.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s098_output/n100.r01.s098.depth.txt" "n100.r01.s098_output/n100.r01.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s098_output/n100.r01.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s098_output/n100.r01.s098.reference.fas" | bcftools consensus -m "n100.r01.s098_output/n100.r01.s098.low_depth.tsv" tmp.vcf.gz > "n100.r01.s098_output/n100.r01.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:123a743a0025880063a0d13577d3ca5377f5a336f11255bb9bf73a87ae3c2813 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.4MiB max=125.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=701B max=3.1KiB
2021/07/08 13:59:27 scheduler task f602b63c (flow 37ba5d5f): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s098.tar.gz resources {}
2021/07/08 13:59:27  ->  n100.r01.s098.Main.cp_out_file 37ba5d5f exec extern s3://niema-test/n100/r01/n100.r01.s098.tar.gz 35.8MiB
2021/07/08 13:59:27 scheduler task 5ea5dcef (flow b6aba721): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:27 scheduler task 5ea5dcef (flow b6aba721): promoting objects (try 0): started
2021/07/08 13:59:27 scheduler task 5ea5dcef (flow b6aba721): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:27 scheduler task 5ea5dcef (flow b6aba721): retrieving diagnostic output (try 0): started
2021/07/08 13:59:27 scheduler task dc2195a5 (flow 56aa0c92): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9ca118a40b24ddd9503bed5c6c7947cb8341067d711d164f4bb620923cb967fd -> s3://niema-test/n100/r01/n100.r01.s030.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:27  <-  n100.r01.s030.Main.cp_out_file 56aa0c92 ok   extern 0s 35.8MiB
2021/07/08 13:59:27 scheduler task 71597e7d (flow 3470f7ea): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:27 scheduler task 71597e7d (flow 3470f7ea): promoting objects (try 0): started
2021/07/08 13:59:27 scheduler task 5ea5dcef (flow b6aba721): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:27 scheduler task 71597e7d (flow 3470f7ea): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:27 scheduler task 5ea5dcef (flow b6aba721): retrieving result (try 0): started
2021/07/08 13:59:27 scheduler task 71597e7d (flow 3470f7ea): retrieving diagnostic output (try 0): started
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): transferring output (try 0): started
2021/07/08 13:59:28 scheduler task f602b63c (flow 37ba5d5f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:123a743a0025880063a0d13577d3ca5377f5a336f11255bb9bf73a87ae3c2813 -> s3://niema-test/n100/r01/n100.r01.s098.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:28  <-  n100.r01.s098.Main.cp_out_file 37ba5d5f ok   extern 0s 35.8MiB
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): retrieving result (try 0): started
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): promoting objects (try 0): started
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): transferring output (try 0): started
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): retrieving diagnostic output (try 0): started
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:28 scheduler task 6c0a0ab0 (flow a0190382): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:010fc88d0b3b16c95f0da0d5531ec2af32f4309a8bc9bb9129078501daeaf098 -> s3://niema-test/n100/r01/n100.r01.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:28  <-  n100.r01.s040.Main.cp_out_file a0190382 ok   extern 0s 35.7MiB
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): retrieving result (try 0): started
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): transferring output (try 0): started
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): promoting objects (try 0): started
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): retrieving diagnostic output (try 0): started
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): promoting objects (try 0): started
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloading (try 0): started
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloading list<val<.=39d854f2 35.7MiB> 35.7MiB>
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloading val<.=b465f9ac 35.4MiB>
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloading val<.=8810ef48 35.4MiB>
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): retrieving result (try 0): started
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): retrieving diagnostic output (try 0): started
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloaded val<.=b465f9ac 35.4MiB>
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloaded val<.=8810ef48 35.4MiB>
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloaded list<val<.=39d854f2 35.7MiB> 35.7MiB>
2021/07/08 13:59:28 scheduler task 5ea5dcef (flow b6aba721): unloading (try 0): successful, next state: complete
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloading (try 0): started
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloading list<val<.=5d6a8cf2 35.7MiB> 35.7MiB>
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloading val<.=dd27bca0 35.4MiB>
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloading val<.=b657651b 35.4MiB>
2021/07/08 13:59:28  <-  n100.r01.s053.Main.out_file b6aba721 ok     exec 5m8s 35.7MiB
2021/07/08 13:59:28 n100.r01.s053.Main.out_file b6aba721 n100/r01/n100.r01.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:efe5decefcfd84c560930450cf0f3799cf3bd57cd06521a7da21c23c1c4e5881
	sha256:b6aba7212c4cee96acf4c26e1107f9762f5ae2c6dad260cc5bfe73ded2a72fae
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ea5dcefa10f7aa27a337825be034837e504ac19c5cd7549a4a2d55de1143925
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s053_output"
	    wget -O "n100.r01.s053_output/n100.r01.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s053_output/n100.r01.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s053_output/n100.r01.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s053_output/n100.r01.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s053_output/n100.r01.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s053_output/n100.r01.s053.reference.fas" "n100.r01.s053_output/n100.r01.s053.fq1.fastq" "n100.r01.s053_output/n100.r01.s053.fq2.fastq" | samtools view -bS - > "n100.r01.s053_output/n100.r01.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s053_output/n100.r01.s053.untrimmed.sorted.bam" "n100.r01.s053_output/n100.r01.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s053_output/n100.r01.s053.untrimmed.sorted.bam" -b "n100.r01.s053_output/n100.r01.s053.primers.bed" -p "n100.r01.s053_output/n100.r01.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" "n100.r01.s053_output/n100.r01.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s053_output/n100.r01.s053.reference.fas" "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" > "n100.r01.s053_output/n100.r01.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s053_output/n100.r01.s053.reference.fas" --call-indels "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" > "n100.r01.s053_output/n100.r01.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s053_output/n100.r01.s053.trimmed.sorted.bam" > "n100.r01.s053_output/n100.r01.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s053_output/n100.r01.s053.depth.txt" "n100.r01.s053_output/n100.r01.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s053_output/n100.r01.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s053_output/n100.r01.s053.reference.fas" | bcftools consensus -m "n100.r01.s053_output/n100.r01.s053.low_depth.tsv" tmp.vcf.gz > "n100.r01.s053_output/n100.r01.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:39d854f2bd9630da8c767f604e34fa80aa0d3cb574fc9a44624032c16f68622a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.4MiB max=128.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 13:59:28 scheduler task 56ddad9a (flow 06e9911b): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s053.tar.gz resources {}
2021/07/08 13:59:28  ->  n100.r01.s053.Main.cp_out_file 06e9911b exec extern s3://niema-test/n100/r01/n100.r01.s053.tar.gz 35.7MiB
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:28 scheduler task 97818aad (flow 3ce93691): transferring output (try 0): started
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloaded list<val<.=5d6a8cf2 35.7MiB> 35.7MiB>
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloaded val<.=dd27bca0 35.4MiB>
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloaded val<.=b657651b 35.4MiB>
2021/07/08 13:59:28 scheduler task 71597e7d (flow 3470f7ea): unloading (try 0): successful, next state: complete
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): retrieving result (try 0): started
2021/07/08 13:59:28  <-  n100.r01.s058.Main.out_file 3470f7ea ok     exec 5m8s 35.7MiB
2021/07/08 13:59:28 n100.r01.s058.Main.out_file 3470f7ea n100/r01/n100.r01.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:271b5cad2a621e14082c3f6dd718d7bde281154f507b2a6312d60a5d62128032
	sha256:3470f7eafc45c18e77309715bbebbc38c3df5afb16e9c25c61d34720724c7287
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/71597e7da37bf2cdc5851e561c721a23e76fb54c531fc028ff197f96bd74a1c1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s058_output"
	    wget -O "n100.r01.s058_output/n100.r01.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s058_output/n100.r01.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s058_output/n100.r01.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s058_output/n100.r01.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s058_output/n100.r01.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s058_output/n100.r01.s058.reference.fas" "n100.r01.s058_output/n100.r01.s058.fq1.fastq" "n100.r01.s058_output/n100.r01.s058.fq2.fastq" | samtools view -bS - > "n100.r01.s058_output/n100.r01.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s058_output/n100.r01.s058.untrimmed.sorted.bam" "n100.r01.s058_output/n100.r01.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s058_output/n100.r01.s058.untrimmed.sorted.bam" -b "n100.r01.s058_output/n100.r01.s058.primers.bed" -p "n100.r01.s058_output/n100.r01.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" "n100.r01.s058_output/n100.r01.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s058_output/n100.r01.s058.reference.fas" "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" > "n100.r01.s058_output/n100.r01.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s058_output/n100.r01.s058.reference.fas" --call-indels "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" > "n100.r01.s058_output/n100.r01.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s058_output/n100.r01.s058.trimmed.sorted.bam" > "n100.r01.s058_output/n100.r01.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s058_output/n100.r01.s058.depth.txt" "n100.r01.s058_output/n100.r01.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s058_output/n100.r01.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s058_output/n100.r01.s058.reference.fas" | bcftools consensus -m "n100.r01.s058_output/n100.r01.s058.low_depth.tsv" tmp.vcf.gz > "n100.r01.s058_output/n100.r01.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5d6a8cf21083bcbff9fe910adcf73f60d37bd63c216dbf9c9f24f8f2d3fc07f4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=125.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 13:59:28 scheduler task f0f69e84 (flow 3eb30d51): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s058.tar.gz resources {}
2021/07/08 13:59:28  ->  n100.r01.s058.Main.cp_out_file 3eb30d51 exec extern s3://niema-test/n100/r01/n100.r01.s058.tar.gz 35.7MiB
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): unloading (try 0): started
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): unloading list<val<.=291a8c9b 35.7MiB> 35.7MiB>
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): unloading val<.=9fff0238 35.4MiB>
2021/07/08 13:59:28 scheduler task bc719b94 (flow 1fcc6ec2): unloading val<.=3a32cb42 35.4MiB>
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:28 scheduler task 7eaca4b3 (flow e0aa7377): transferring output (try 0): started
2021/07/08 13:59:29 scheduler task bc719b94 (flow 1fcc6ec2): unloaded val<.=9fff0238 35.4MiB>
2021/07/08 13:59:29 scheduler task bc719b94 (flow 1fcc6ec2): unloaded val<.=3a32cb42 35.4MiB>
2021/07/08 13:59:29 scheduler task bc719b94 (flow 1fcc6ec2): unloaded list<val<.=291a8c9b 35.7MiB> 35.7MiB>
2021/07/08 13:59:29 scheduler task bc719b94 (flow 1fcc6ec2): unloading (try 0): successful, next state: complete
2021/07/08 13:59:29  <-  n100.r01.s100.Main.out_file 1fcc6ec2 ok     exec 5m8s 35.7MiB
2021/07/08 13:59:29 n100.r01.s100.Main.out_file 1fcc6ec2 n100/r01/n100.r01.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3c8bde4e7845fd0f8f717ce2d9fe6042426d75f781815eac30e9b0c79185563b
	sha256:1fcc6ec2a935043e4e6d1ef6fc1ba2b888d658b145fe88b96200f908ff4505f2
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc719b945c20304f1e8b9dbb5f6f09692d480b9a9442bf4f06ef95407a21a350
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s100_output"
	    wget -O "n100.r01.s100_output/n100.r01.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s100_output/n100.r01.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s100_output/n100.r01.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s100_output/n100.r01.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s100_output/n100.r01.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s100_output/n100.r01.s100.reference.fas" "n100.r01.s100_output/n100.r01.s100.fq1.fastq" "n100.r01.s100_output/n100.r01.s100.fq2.fastq" | samtools view -bS - > "n100.r01.s100_output/n100.r01.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s100_output/n100.r01.s100.untrimmed.sorted.bam" "n100.r01.s100_output/n100.r01.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s100_output/n100.r01.s100.untrimmed.sorted.bam" -b "n100.r01.s100_output/n100.r01.s100.primers.bed" -p "n100.r01.s100_output/n100.r01.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" "n100.r01.s100_output/n100.r01.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s100_output/n100.r01.s100.reference.fas" "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" > "n100.r01.s100_output/n100.r01.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s100_output/n100.r01.s100.reference.fas" --call-indels "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" > "n100.r01.s100_output/n100.r01.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s100_output/n100.r01.s100.trimmed.sorted.bam" > "n100.r01.s100_output/n100.r01.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s100_output/n100.r01.s100.depth.txt" "n100.r01.s100_output/n100.r01.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s100_output/n100.r01.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s100_output/n100.r01.s100.reference.fas" | bcftools consensus -m "n100.r01.s100_output/n100.r01.s100.low_depth.tsv" tmp.vcf.gz > "n100.r01.s100_output/n100.r01.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:291a8c9b6c17c236da3c9ad6ba96c22406b66f00127833a446d11cea9da874a6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=124.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 13:59:29 scheduler task 75f41dab (flow c1265fb6): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s100.tar.gz resources {}
2021/07/08 13:59:29  ->  n100.r01.s100.Main.cp_out_file c1265fb6 exec extern s3://niema-test/n100/r01/n100.r01.s100.tar.gz 35.7MiB
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): promoting objects (try 0): started
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): promoting objects (try 0): started
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): retrieving diagnostic output (try 0): started
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): retrieving diagnostic output (try 0): started
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): retrieving result (try 0): started
2021/07/08 13:59:29 scheduler task 56ddad9a (flow 06e9911b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:39d854f2bd9630da8c767f604e34fa80aa0d3cb574fc9a44624032c16f68622a -> s3://niema-test/n100/r01/n100.r01.s053.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:29  <-  n100.r01.s053.Main.cp_out_file 06e9911b ok   extern 0s 35.7MiB
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): promoting objects (try 0): started
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): retrieving result (try 0): started
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloading (try 0): started
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloading list<val<.=26d0c64f 35.8MiB> 35.8MiB>
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloading val<.=d24491bd 35.4MiB>
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloading val<.=0cd6ebeb 35.4MiB>
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): transferring output (try 0): started
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): retrieving diagnostic output (try 0): started
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloaded list<val<.=26d0c64f 35.8MiB> 35.8MiB>
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloading (try 0): started
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloading list<val<.=10c8715f 35.7MiB> 35.7MiB>
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloading val<.=f9e5a079 35.4MiB>
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloading val<.=498167a0 35.4MiB>
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloaded val<.=0cd6ebeb 35.4MiB>
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloaded val<.=d24491bd 35.4MiB>
2021/07/08 13:59:29 scheduler task 97818aad (flow 3ce93691): unloading (try 0): successful, next state: complete
2021/07/08 13:59:29 scheduler task e1e24653 (flow 9d6059f7): transferring output (try 0): started
2021/07/08 13:59:29  <-  n100.r01.s023.Main.out_file 3ce93691 ok     exec 5m5s 35.8MiB
2021/07/08 13:59:29 n100.r01.s023.Main.out_file 3ce93691 n100/r01/n100.r01.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:15d9c03d568268cbf2726f5815a194c5f30db4d464e7296e67a7ef8bf9fbc570
	sha256:3ce93691c528e5e17f5001b4b60d62e778408d31acb58a4326cece4982694e81
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97818aad53ba1d3d3561e156c7a876523d125f609d21448f57039d5fd829033c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s023_output"
	    wget -O "n100.r01.s023_output/n100.r01.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s023_output/n100.r01.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s023_output/n100.r01.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s023_output/n100.r01.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s023_output/n100.r01.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s023_output/n100.r01.s023.reference.fas" "n100.r01.s023_output/n100.r01.s023.fq1.fastq" "n100.r01.s023_output/n100.r01.s023.fq2.fastq" | samtools view -bS - > "n100.r01.s023_output/n100.r01.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s023_output/n100.r01.s023.untrimmed.sorted.bam" "n100.r01.s023_output/n100.r01.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s023_output/n100.r01.s023.untrimmed.sorted.bam" -b "n100.r01.s023_output/n100.r01.s023.primers.bed" -p "n100.r01.s023_output/n100.r01.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" "n100.r01.s023_output/n100.r01.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s023_output/n100.r01.s023.reference.fas" "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" > "n100.r01.s023_output/n100.r01.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s023_output/n100.r01.s023.reference.fas" --call-indels "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" > "n100.r01.s023_output/n100.r01.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s023_output/n100.r01.s023.trimmed.sorted.bam" > "n100.r01.s023_output/n100.r01.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s023_output/n100.r01.s023.depth.txt" "n100.r01.s023_output/n100.r01.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s023_output/n100.r01.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s023_output/n100.r01.s023.reference.fas" | bcftools consensus -m "n100.r01.s023_output/n100.r01.s023.low_depth.tsv" tmp.vcf.gz > "n100.r01.s023_output/n100.r01.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:26d0c64f924cc251babb5063d3b98245711e085556705d58fc36bb8bfc459f93 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.6MiB max=126.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=868B max=3.0KiB
2021/07/08 13:59:29 scheduler task f92d9207 (flow 0421f67d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s023.tar.gz resources {}
2021/07/08 13:59:29  ->  n100.r01.s023.Main.cp_out_file 0421f67d exec extern s3://niema-test/n100/r01/n100.r01.s023.tar.gz 35.8MiB
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloaded val<.=498167a0 35.4MiB>
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloaded list<val<.=10c8715f 35.7MiB> 35.7MiB>
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloaded val<.=f9e5a079 35.4MiB>
2021/07/08 13:59:29 scheduler task 7eaca4b3 (flow e0aa7377): unloading (try 0): successful, next state: complete
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): retrieving result (try 0): started
2021/07/08 13:59:29  <-  n100.r01.s006.Main.out_file e0aa7377 ok     exec 5m5s 35.7MiB
2021/07/08 13:59:29 n100.r01.s006.Main.out_file e0aa7377 n100/r01/n100.r01.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4659bf0b262a871312ab87beef60fe6b48ab94a8788240244bc1d43d64b16dfe
	sha256:e0aa7377def19b0da714a535a6961d0776f5687db57324668606fe45f1cc8520
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7eaca4b30315e92ce44c87911939504ac0659150398a2de8a3abc4d021df583b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s006_output"
	    wget -O "n100.r01.s006_output/n100.r01.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s006_output/n100.r01.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s006_output/n100.r01.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s006_output/n100.r01.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s006_output/n100.r01.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s006_output/n100.r01.s006.reference.fas" "n100.r01.s006_output/n100.r01.s006.fq1.fastq" "n100.r01.s006_output/n100.r01.s006.fq2.fastq" | samtools view -bS - > "n100.r01.s006_output/n100.r01.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s006_output/n100.r01.s006.untrimmed.sorted.bam" "n100.r01.s006_output/n100.r01.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s006_output/n100.r01.s006.untrimmed.sorted.bam" -b "n100.r01.s006_output/n100.r01.s006.primers.bed" -p "n100.r01.s006_output/n100.r01.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" "n100.r01.s006_output/n100.r01.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s006_output/n100.r01.s006.reference.fas" "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" > "n100.r01.s006_output/n100.r01.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s006_output/n100.r01.s006.reference.fas" --call-indels "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" > "n100.r01.s006_output/n100.r01.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s006_output/n100.r01.s006.trimmed.sorted.bam" > "n100.r01.s006_output/n100.r01.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s006_output/n100.r01.s006.depth.txt" "n100.r01.s006_output/n100.r01.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s006_output/n100.r01.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s006_output/n100.r01.s006.reference.fas" | bcftools consensus -m "n100.r01.s006_output/n100.r01.s006.low_depth.tsv" tmp.vcf.gz > "n100.r01.s006_output/n100.r01.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:10c8715fa253af6fbe738ce63a00573f6c36293df313aa1cc320d8f90cda18ad 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.5MiB max=129.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=702B max=2.1KiB
2021/07/08 13:59:29 scheduler task 9eb78638 (flow 08679500): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s006.tar.gz resources {}
2021/07/08 13:59:29  ->  n100.r01.s006.Main.cp_out_file 08679500 exec extern s3://niema-test/n100/r01/n100.r01.s006.tar.gz 35.7MiB
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): promoting objects (try 0): started
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:29 scheduler task 378eabfc (flow 5ba5cdc9): transferring output (try 0): started
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:29 scheduler task 4a2be2fe (flow a35830e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): retrieving diagnostic output (try 0): started
2021/07/08 13:59:29 scheduler task 4a2be2fe (flow a35830e3): promoting objects (try 0): started
2021/07/08 13:59:29 scheduler task 90a6b802 (flow 4c471319): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:29 scheduler task 90a6b802 (flow 4c471319): promoting objects (try 0): started
2021/07/08 13:59:29 scheduler task 75f41dab (flow c1265fb6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:291a8c9b6c17c236da3c9ad6ba96c22406b66f00127833a446d11cea9da874a6 -> s3://niema-test/n100/r01/n100.r01.s100.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:29  <-  n100.r01.s100.Main.cp_out_file c1265fb6 ok   extern 0s 35.7MiB
2021/07/08 13:59:29 scheduler task f0f69e84 (flow 3eb30d51): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5d6a8cf21083bcbff9fe910adcf73f60d37bd63c216dbf9c9f24f8f2d3fc07f4 -> s3://niema-test/n100/r01/n100.r01.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:29  <-  n100.r01.s058.Main.cp_out_file 3eb30d51 ok   extern 0s 35.7MiB
2021/07/08 13:59:29 scheduler task 4a2be2fe (flow a35830e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:29 scheduler task 4a2be2fe (flow a35830e3): retrieving diagnostic output (try 0): started
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): retrieving result (try 0): started
2021/07/08 13:59:29 scheduler task 90a6b802 (flow 4c471319): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:29 scheduler task 90a6b802 (flow 4c471319): retrieving diagnostic output (try 0): started
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:29 scheduler task 4a2be2fe (flow a35830e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): unloading (try 0): started
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): unloading list<val<.=705226e3 35.8MiB> 35.8MiB>
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): unloading val<.=82efa4d7 35.4MiB>
2021/07/08 13:59:29 scheduler task 63e80a14 (flow 2afbc5be): unloading val<.=f549d496 35.4MiB>
2021/07/08 13:59:29 scheduler task 4a2be2fe (flow a35830e3): retrieving result (try 0): started
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:29 scheduler task e480ee50 (flow 7d31354e): transferring output (try 0): started
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:30 scheduler task 63e80a14 (flow 2afbc5be): unloaded list<val<.=705226e3 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): promoting objects (try 0): started
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): retrieving result (try 0): started
2021/07/08 13:59:30 scheduler task 63e80a14 (flow 2afbc5be): unloaded val<.=f549d496 35.4MiB>
2021/07/08 13:59:30 scheduler task 63e80a14 (flow 2afbc5be): unloaded val<.=82efa4d7 35.4MiB>
2021/07/08 13:59:30 scheduler task 63e80a14 (flow 2afbc5be): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30  <-  n100.r01.s007.Main.out_file 2afbc5be ok     exec 5m5s 35.8MiB
2021/07/08 13:59:30 n100.r01.s007.Main.out_file 2afbc5be n100/r01/n100.r01.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:46a7b17cd381646639d668fe952e71fe36f8c04ee7603d04fbc5287f5aa27739
	sha256:2afbc5bee142737bf123d30d370eb77c1c1f4bd1ece939e7273efb11ce4e7022
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/63e80a14b642c50ce3ca16601f4b366e435ae1742c053c10ba72f9a5676fdd03
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s007_output"
	    wget -O "n100.r01.s007_output/n100.r01.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s007_output/n100.r01.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s007_output/n100.r01.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s007_output/n100.r01.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s007_output/n100.r01.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s007_output/n100.r01.s007.reference.fas" "n100.r01.s007_output/n100.r01.s007.fq1.fastq" "n100.r01.s007_output/n100.r01.s007.fq2.fastq" | samtools view -bS - > "n100.r01.s007_output/n100.r01.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s007_output/n100.r01.s007.untrimmed.sorted.bam" "n100.r01.s007_output/n100.r01.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s007_output/n100.r01.s007.untrimmed.sorted.bam" -b "n100.r01.s007_output/n100.r01.s007.primers.bed" -p "n100.r01.s007_output/n100.r01.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" "n100.r01.s007_output/n100.r01.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s007_output/n100.r01.s007.reference.fas" "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" > "n100.r01.s007_output/n100.r01.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s007_output/n100.r01.s007.reference.fas" --call-indels "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" > "n100.r01.s007_output/n100.r01.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s007_output/n100.r01.s007.trimmed.sorted.bam" > "n100.r01.s007_output/n100.r01.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s007_output/n100.r01.s007.depth.txt" "n100.r01.s007_output/n100.r01.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s007_output/n100.r01.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s007_output/n100.r01.s007.reference.fas" | bcftools consensus -m "n100.r01.s007_output/n100.r01.s007.low_depth.tsv" tmp.vcf.gz > "n100.r01.s007_output/n100.r01.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:705226e33632752a02b406bbcec15110db6ae9d5d92bfeb37d3e7372cbb4cc18 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.8MiB max=129.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=697B max=3.1KiB
2021/07/08 13:59:30 scheduler task 0cd68466 (flow faaa68c2): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s007.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s007.Main.cp_out_file faaa68c2 exec extern s3://niema-test/n100/r01/n100.r01.s007.tar.gz 35.8MiB
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloading (try 0): started
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloading list<val<.=de893d28 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloading val<.=0ff739c2 35.4MiB>
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloading val<.=63e45ebd 35.4MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): transferring output (try 0): started
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): retrieving diagnostic output (try 0): started
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): promoting objects (try 0): started
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): transferring output (try 0): started
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloaded val<.=63e45ebd 35.4MiB>
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloaded list<val<.=de893d28 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloaded val<.=0ff739c2 35.4MiB>
2021/07/08 13:59:30 scheduler task e1e24653 (flow 9d6059f7): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30  <-  n100.r01.s086.Main.out_file 9d6059f7 ok     exec 5m5s 35.8MiB
2021/07/08 13:59:30 n100.r01.s086.Main.out_file 9d6059f7 n100/r01/n100.r01.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae4bb5de49e539781e9672c3a75470611610ee2fee1a02d1d8ea151b7541edc1
	sha256:9d6059f7837fc7ab3fa2c34feeb2de42d4aad3c73c5fb2dd56e5149f1d6ce93a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e1e246536cec9bade410062616ae7fcd2085e3b6f974e39cf90a1b9c08f898a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s086_output"
	    wget -O "n100.r01.s086_output/n100.r01.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s086_output/n100.r01.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s086_output/n100.r01.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s086_output/n100.r01.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s086_output/n100.r01.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s086_output/n100.r01.s086.reference.fas" "n100.r01.s086_output/n100.r01.s086.fq1.fastq" "n100.r01.s086_output/n100.r01.s086.fq2.fastq" | samtools view -bS - > "n100.r01.s086_output/n100.r01.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s086_output/n100.r01.s086.untrimmed.sorted.bam" "n100.r01.s086_output/n100.r01.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s086_output/n100.r01.s086.untrimmed.sorted.bam" -b "n100.r01.s086_output/n100.r01.s086.primers.bed" -p "n100.r01.s086_output/n100.r01.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" "n100.r01.s086_output/n100.r01.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s086_output/n100.r01.s086.reference.fas" "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" > "n100.r01.s086_output/n100.r01.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s086_output/n100.r01.s086.reference.fas" --call-indels "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" > "n100.r01.s086_output/n100.r01.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s086_output/n100.r01.s086.trimmed.sorted.bam" > "n100.r01.s086_output/n100.r01.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s086_output/n100.r01.s086.depth.txt" "n100.r01.s086_output/n100.r01.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s086_output/n100.r01.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s086_output/n100.r01.s086.reference.fas" | bcftools consensus -m "n100.r01.s086_output/n100.r01.s086.low_depth.tsv" tmp.vcf.gz > "n100.r01.s086_output/n100.r01.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:de893d284650630b2501cc6c2fd63b794e3012b70a17a358a886455e619730d7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.4MiB max=126.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=869B max=3.0KiB
2021/07/08 13:59:30 scheduler task ab7006e8 (flow 5785b5d3): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s086.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s086.Main.cp_out_file 5785b5d3 exec extern s3://niema-test/n100/r01/n100.r01.s086.tar.gz 35.8MiB
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): retrieving diagnostic output (try 0): started
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): retrieving result (try 0): started
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloading (try 0): started
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloading list<val<.=5678b0e8 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloading val<.=b606c7ce 35.4MiB>
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloading val<.=27340a73 35.4MiB>
2021/07/08 13:59:30 scheduler task f92d9207 (flow 0421f67d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:26d0c64f924cc251babb5063d3b98245711e085556705d58fc36bb8bfc459f93 -> s3://niema-test/n100/r01/n100.r01.s023.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:30  <-  n100.r01.s023.Main.cp_out_file 0421f67d ok   extern 0s 35.8MiB
2021/07/08 13:59:30 scheduler task 9eb78638 (flow 08679500): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:10c8715fa253af6fbe738ce63a00573f6c36293df313aa1cc320d8f90cda18ad -> s3://niema-test/n100/r01/n100.r01.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:30  <-  n100.r01.s006.Main.cp_out_file 08679500 ok   extern 0s 35.7MiB
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): retrieving result (try 0): started
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): transferring output (try 0): started
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloaded list<val<.=5678b0e8 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloaded val<.=b606c7ce 35.4MiB>
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloaded val<.=27340a73 35.4MiB>
2021/07/08 13:59:30 scheduler task 378eabfc (flow 5ba5cdc9): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:30  <-  n100.r01.s014.Main.out_file 5ba5cdc9 ok     exec 4m59s 35.8MiB
2021/07/08 13:59:30 n100.r01.s014.Main.out_file 5ba5cdc9 n100/r01/n100.r01.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:44d9e8d6e468b3b32dabb1c29001179a3d22f7287cb5cf016a17f7acceab1cac
	sha256:5ba5cdc975715b494bfb756c96b5bcd1d54ea2ee5f4ec5c7b677f74ef9d2ef0a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/378eabfc733bd3d81a451fca113657d833b9bf1a3b1057d6ba822d48bea0e86f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s014_output"
	    wget -O "n100.r01.s014_output/n100.r01.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s014_output/n100.r01.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s014_output/n100.r01.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s014_output/n100.r01.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s014_output/n100.r01.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s014_output/n100.r01.s014.reference.fas" "n100.r01.s014_output/n100.r01.s014.fq1.fastq" "n100.r01.s014_output/n100.r01.s014.fq2.fastq" | samtools view -bS - > "n100.r01.s014_output/n100.r01.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s014_output/n100.r01.s014.untrimmed.sorted.bam" "n100.r01.s014_output/n100.r01.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s014_output/n100.r01.s014.untrimmed.sorted.bam" -b "n100.r01.s014_output/n100.r01.s014.primers.bed" -p "n100.r01.s014_output/n100.r01.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" "n100.r01.s014_output/n100.r01.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s014_output/n100.r01.s014.reference.fas" "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" > "n100.r01.s014_output/n100.r01.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s014_output/n100.r01.s014.reference.fas" --call-indels "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" > "n100.r01.s014_output/n100.r01.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s014_output/n100.r01.s014.trimmed.sorted.bam" > "n100.r01.s014_output/n100.r01.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s014_output/n100.r01.s014.depth.txt" "n100.r01.s014_output/n100.r01.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s014_output/n100.r01.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s014_output/n100.r01.s014.reference.fas" | bcftools consensus -m "n100.r01.s014_output/n100.r01.s014.low_depth.tsv" tmp.vcf.gz > "n100.r01.s014_output/n100.r01.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5678b0e8c2059f6d82c2c6ab0a71bebf1e0c7608e32474c36a8abbf21c484e91 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.4MiB max=125.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 13:59:30 scheduler task 332245ec (flow 5e699761): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s014.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s014.Main.cp_out_file 5e699761 exec extern s3://niema-test/n100/r01/n100.r01.s014.tar.gz 35.8MiB
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): transferring output (try 0): started
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloading (try 0): started
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloading list<val<.=cc6b3c47 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloading val<.=b37218f2 35.4MiB>
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloading val<.=73ce4364 35.4MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloading (try 0): started
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloading list<val<.=d53bc5d3 35.7MiB> 35.7MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloading val<.=064182f8 35.4MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloading val<.=0077b668 35.4MiB>
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloaded list<val<.=cc6b3c47 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloaded val<.=b37218f2 35.4MiB>
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloaded val<.=73ce4364 35.4MiB>
2021/07/08 13:59:30 scheduler task e480ee50 (flow 7d31354e): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30  <-  n100.r01.s091.Main.out_file 7d31354e ok     exec 5m6s 35.8MiB
2021/07/08 13:59:30 n100.r01.s091.Main.out_file 7d31354e n100/r01/n100.r01.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:29582faedfa2d1889947920ae562a90bd2feb833c4b6a132c18adc524b36a248
	sha256:7d31354e979c72eddf1089ea121c9c51e641da6425f9581c265cd61e8e1801de
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e480ee506513f58159785d0e5dbf12402a2365b7964a8e3ef0d8f10d5f9673e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s091_output"
	    wget -O "n100.r01.s091_output/n100.r01.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s091_output/n100.r01.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s091_output/n100.r01.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s091_output/n100.r01.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s091_output/n100.r01.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s091_output/n100.r01.s091.reference.fas" "n100.r01.s091_output/n100.r01.s091.fq1.fastq" "n100.r01.s091_output/n100.r01.s091.fq2.fastq" | samtools view -bS - > "n100.r01.s091_output/n100.r01.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s091_output/n100.r01.s091.untrimmed.sorted.bam" "n100.r01.s091_output/n100.r01.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s091_output/n100.r01.s091.untrimmed.sorted.bam" -b "n100.r01.s091_output/n100.r01.s091.primers.bed" -p "n100.r01.s091_output/n100.r01.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" "n100.r01.s091_output/n100.r01.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s091_output/n100.r01.s091.reference.fas" "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" > "n100.r01.s091_output/n100.r01.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s091_output/n100.r01.s091.reference.fas" --call-indels "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" > "n100.r01.s091_output/n100.r01.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s091_output/n100.r01.s091.trimmed.sorted.bam" > "n100.r01.s091_output/n100.r01.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s091_output/n100.r01.s091.depth.txt" "n100.r01.s091_output/n100.r01.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s091_output/n100.r01.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s091_output/n100.r01.s091.reference.fas" | bcftools consensus -m "n100.r01.s091_output/n100.r01.s091.low_depth.tsv" tmp.vcf.gz > "n100.r01.s091_output/n100.r01.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cc6b3c479fe6d45ff55e7a395893cf3e947575f12667591fc10c5c8cf59c089c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=129.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 13:59:30 scheduler task d07a4f05 (flow 5df85a4f): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s091.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s091.Main.cp_out_file 5df85a4f exec extern s3://niema-test/n100/r01/n100.r01.s091.tar.gz 35.8MiB
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloaded val<.=064182f8 35.4MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloaded val<.=0077b668 35.4MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloaded list<val<.=d53bc5d3 35.7MiB> 35.7MiB>
2021/07/08 13:59:30 scheduler task 4a2be2fe (flow a35830e3): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30  <-  n100.r01.s067.Main.out_file a35830e3 ok     exec 5m6s 35.7MiB
2021/07/08 13:59:30 n100.r01.s067.Main.out_file a35830e3 n100/r01/n100.r01.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d31b14b76ec76b4c7fb17927d1dcf21e7002383166555d9cde4822ebf1708016
	sha256:a35830e3dc0696fec9c3c875840adee118d1dd830fd9049125e5c4c334390143
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4a2be2fed247b9a4bbc8bb84171a8c7e643b15af987974652c71815cb0d5313d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s067_output"
	    wget -O "n100.r01.s067_output/n100.r01.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s067_output/n100.r01.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s067_output/n100.r01.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s067_output/n100.r01.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s067_output/n100.r01.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s067_output/n100.r01.s067.reference.fas" "n100.r01.s067_output/n100.r01.s067.fq1.fastq" "n100.r01.s067_output/n100.r01.s067.fq2.fastq" | samtools view -bS - > "n100.r01.s067_output/n100.r01.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s067_output/n100.r01.s067.untrimmed.sorted.bam" "n100.r01.s067_output/n100.r01.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s067_output/n100.r01.s067.untrimmed.sorted.bam" -b "n100.r01.s067_output/n100.r01.s067.primers.bed" -p "n100.r01.s067_output/n100.r01.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" "n100.r01.s067_output/n100.r01.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s067_output/n100.r01.s067.reference.fas" "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" > "n100.r01.s067_output/n100.r01.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s067_output/n100.r01.s067.reference.fas" --call-indels "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" > "n100.r01.s067_output/n100.r01.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s067_output/n100.r01.s067.trimmed.sorted.bam" > "n100.r01.s067_output/n100.r01.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s067_output/n100.r01.s067.depth.txt" "n100.r01.s067_output/n100.r01.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s067_output/n100.r01.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s067_output/n100.r01.s067.reference.fas" | bcftools consensus -m "n100.r01.s067_output/n100.r01.s067.low_depth.tsv" tmp.vcf.gz > "n100.r01.s067_output/n100.r01.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d53bc5d3dfb28208fac944630c0597189c1d35b3beb8677706b962bfb3e37161 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.4MiB max=128.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 13:59:30 scheduler task 1fb90679 (flow ffd2f9e6): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s067.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s067.Main.cp_out_file ffd2f9e6 exec extern s3://niema-test/n100/r01/n100.r01.s067.tar.gz 35.7MiB
2021/07/08 13:59:30 scheduler task 0cd68466 (flow faaa68c2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:705226e33632752a02b406bbcec15110db6ae9d5d92bfeb37d3e7372cbb4cc18 -> s3://niema-test/n100/r01/n100.r01.s007.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:30  <-  n100.r01.s007.Main.cp_out_file faaa68c2 ok   extern 0s 35.8MiB
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloading (try 0): started
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloading list<val<.=21bd46b5 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloading val<.=0c84034a 35.4MiB>
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloading val<.=8983e876 35.4MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloading (try 0): started
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloading list<val<.=ee168991 35.7MiB> 35.7MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloading val<.=bba3c135 35.4MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloading val<.=82de593d 35.4MiB>
2021/07/08 13:59:30 scheduler task 3e0df658 (flow da15cf49): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloaded val<.=0c84034a 35.4MiB>
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloaded val<.=8983e876 35.4MiB>
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloaded list<val<.=21bd46b5 35.8MiB> 35.8MiB>
2021/07/08 13:59:30 scheduler task 90a6b802 (flow 4c471319): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30 scheduler task 3e0df658 (flow da15cf49): promoting objects (try 0): started
2021/07/08 13:59:30  <-  n100.r01.s019.Main.out_file 4c471319 ok     exec 5m6s 35.8MiB
2021/07/08 13:59:30 n100.r01.s019.Main.out_file 4c471319 n100/r01/n100.r01.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:59dfaf919bd9e6df1fdd34b0e0f16acc1d30ecb94c0a54fc268f2748e193a578
	sha256:4c47131921d5e7cd6ab69d6b2b3d61d5d2dc2ac9971183e8add2427c7feae24b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/90a6b8024a3ee93f07a20e24a64935310f39bad06fd901d943e8d7d5a486303d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s019_output"
	    wget -O "n100.r01.s019_output/n100.r01.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s019_output/n100.r01.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s019_output/n100.r01.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s019_output/n100.r01.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s019_output/n100.r01.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s019_output/n100.r01.s019.reference.fas" "n100.r01.s019_output/n100.r01.s019.fq1.fastq" "n100.r01.s019_output/n100.r01.s019.fq2.fastq" | samtools view -bS - > "n100.r01.s019_output/n100.r01.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s019_output/n100.r01.s019.untrimmed.sorted.bam" "n100.r01.s019_output/n100.r01.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s019_output/n100.r01.s019.untrimmed.sorted.bam" -b "n100.r01.s019_output/n100.r01.s019.primers.bed" -p "n100.r01.s019_output/n100.r01.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" "n100.r01.s019_output/n100.r01.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s019_output/n100.r01.s019.reference.fas" "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" > "n100.r01.s019_output/n100.r01.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s019_output/n100.r01.s019.reference.fas" --call-indels "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" > "n100.r01.s019_output/n100.r01.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s019_output/n100.r01.s019.trimmed.sorted.bam" > "n100.r01.s019_output/n100.r01.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s019_output/n100.r01.s019.depth.txt" "n100.r01.s019_output/n100.r01.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s019_output/n100.r01.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s019_output/n100.r01.s019.reference.fas" | bcftools consensus -m "n100.r01.s019_output/n100.r01.s019.low_depth.tsv" tmp.vcf.gz > "n100.r01.s019_output/n100.r01.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:21bd46b5d4a0c0f7423fd6d707f5c64de5629e52b914f2728baec7b3833a9a57 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.4MiB max=125.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=704B max=3.1KiB
2021/07/08 13:59:30 scheduler task 8c2e6ab4 (flow 597eee21): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s019.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s019.Main.cp_out_file 597eee21 exec extern s3://niema-test/n100/r01/n100.r01.s019.tar.gz 35.8MiB
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloaded list<val<.=ee168991 35.7MiB> 35.7MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloaded val<.=82de593d 35.4MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloaded val<.=bba3c135 35.4MiB>
2021/07/08 13:59:30 scheduler task 47ccd70f (flow 04b2f4d8): unloading (try 0): successful, next state: complete
2021/07/08 13:59:30  <-  n100.r01.s054.Main.out_file 04b2f4d8 ok     exec 5m6s 35.7MiB
2021/07/08 13:59:30 n100.r01.s054.Main.out_file 04b2f4d8 n100/r01/n100.r01.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca723a52f05c0e2f9f8a21f3b7fb013a99d99c94743aac4418ca1d44b5ff9b9e
	sha256:04b2f4d8aa959bb21338c07584e72704f98f9f22e56025aef56131fb4d5479bc
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/47ccd70fe4c0a342d79ce5cf8bd784214aece41212a3874d6fe32c2f3a8377a5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s054_output"
	    wget -O "n100.r01.s054_output/n100.r01.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s054_output/n100.r01.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s054_output/n100.r01.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s054_output/n100.r01.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s054_output/n100.r01.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s054_output/n100.r01.s054.reference.fas" "n100.r01.s054_output/n100.r01.s054.fq1.fastq" "n100.r01.s054_output/n100.r01.s054.fq2.fastq" | samtools view -bS - > "n100.r01.s054_output/n100.r01.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s054_output/n100.r01.s054.untrimmed.sorted.bam" "n100.r01.s054_output/n100.r01.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s054_output/n100.r01.s054.untrimmed.sorted.bam" -b "n100.r01.s054_output/n100.r01.s054.primers.bed" -p "n100.r01.s054_output/n100.r01.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" "n100.r01.s054_output/n100.r01.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s054_output/n100.r01.s054.reference.fas" "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" > "n100.r01.s054_output/n100.r01.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s054_output/n100.r01.s054.reference.fas" --call-indels "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" > "n100.r01.s054_output/n100.r01.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s054_output/n100.r01.s054.trimmed.sorted.bam" > "n100.r01.s054_output/n100.r01.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s054_output/n100.r01.s054.depth.txt" "n100.r01.s054_output/n100.r01.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s054_output/n100.r01.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s054_output/n100.r01.s054.reference.fas" | bcftools consensus -m "n100.r01.s054_output/n100.r01.s054.low_depth.tsv" tmp.vcf.gz > "n100.r01.s054_output/n100.r01.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ee168991874e207dd7d70e82f5acee55941587bededadae46b544e3e5ba307df 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.5MiB max=129.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=867B max=3.1KiB
2021/07/08 13:59:30 scheduler task 53e3dca8 (flow 82836854): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s054.tar.gz resources {}
2021/07/08 13:59:30  ->  n100.r01.s054.Main.cp_out_file 82836854 exec extern s3://niema-test/n100/r01/n100.r01.s054.tar.gz 35.7MiB
2021/07/08 13:59:30 scheduler task 782b9981 (flow 466997bd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:30 scheduler task 3e0df658 (flow da15cf49): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:30 scheduler task 782b9981 (flow 466997bd): promoting objects (try 0): started
2021/07/08 13:59:30 scheduler task 3e0df658 (flow da15cf49): retrieving diagnostic output (try 0): started
2021/07/08 13:59:30 scheduler task 1276c917 (flow 8986bd36): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:30 scheduler task 1276c917 (flow 8986bd36): promoting objects (try 0): started
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): unloading (try 0): started
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): unloading list<val<.=d13b990c 35.7MiB> 35.7MiB>
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): unloading val<.=8adc010e 35.4MiB>
2021/07/08 13:59:30 scheduler task 9ca279ac (flow 8a6b6586): unloading val<.=0f9fcfdc 35.4MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): retrieving diagnostic output (try 0): started
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): promoting objects (try 0): started
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): retrieving result (try 0): started
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): retrieving diagnostic output (try 0): started
2021/07/08 13:59:31 scheduler task 9ca279ac (flow 8a6b6586): unloaded val<.=8adc010e 35.4MiB>
2021/07/08 13:59:31 scheduler task 9ca279ac (flow 8a6b6586): unloaded list<val<.=d13b990c 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 9ca279ac (flow 8a6b6586): unloaded val<.=0f9fcfdc 35.4MiB>
2021/07/08 13:59:31 scheduler task 9ca279ac (flow 8a6b6586): unloading (try 0): successful, next state: complete
2021/07/08 13:59:31 scheduler task ab7006e8 (flow 5785b5d3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:de893d284650630b2501cc6c2fd63b794e3012b70a17a358a886455e619730d7 -> s3://niema-test/n100/r01/n100.r01.s086.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s086.Main.cp_out_file 5785b5d3 ok   extern 0s 35.8MiB
2021/07/08 13:59:31  <-  n100.r01.s063.Main.out_file 8a6b6586 ok     exec 5m0s 35.7MiB
2021/07/08 13:59:31 n100.r01.s063.Main.out_file 8a6b6586 n100/r01/n100.r01.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:352de1cd46b0a4d301dcdca58d4c418d49b87697c8721eea5586faf89ae4330c
	sha256:8a6b658669ad98ea334e7116e8015a92234e942b06652cfd7117df6e6db72d83
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9ca279ac8ac4af8c3581671e1f16d313b9087f042f13161d0e660ca566262a2f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s063_output"
	    wget -O "n100.r01.s063_output/n100.r01.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s063_output/n100.r01.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s063_output/n100.r01.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s063_output/n100.r01.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s063_output/n100.r01.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s063_output/n100.r01.s063.reference.fas" "n100.r01.s063_output/n100.r01.s063.fq1.fastq" "n100.r01.s063_output/n100.r01.s063.fq2.fastq" | samtools view -bS - > "n100.r01.s063_output/n100.r01.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s063_output/n100.r01.s063.untrimmed.sorted.bam" "n100.r01.s063_output/n100.r01.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s063_output/n100.r01.s063.untrimmed.sorted.bam" -b "n100.r01.s063_output/n100.r01.s063.primers.bed" -p "n100.r01.s063_output/n100.r01.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" "n100.r01.s063_output/n100.r01.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s063_output/n100.r01.s063.reference.fas" "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" > "n100.r01.s063_output/n100.r01.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s063_output/n100.r01.s063.reference.fas" --call-indels "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" > "n100.r01.s063_output/n100.r01.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s063_output/n100.r01.s063.trimmed.sorted.bam" > "n100.r01.s063_output/n100.r01.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s063_output/n100.r01.s063.depth.txt" "n100.r01.s063_output/n100.r01.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s063_output/n100.r01.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s063_output/n100.r01.s063.reference.fas" | bcftools consensus -m "n100.r01.s063_output/n100.r01.s063.low_depth.tsv" tmp.vcf.gz > "n100.r01.s063_output/n100.r01.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d13b990c0f1d1f9b40a559f63ac40d4008a5003e4beb8bf1ee2fc6e4a05ca304 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.4MiB max=131.3MiB
	    disk mean=10.4MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 13:59:31 scheduler task 1972035a (flow 52517099): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s063.tar.gz resources {}
2021/07/08 13:59:31  ->  n100.r01.s063.Main.cp_out_file 52517099 exec extern s3://niema-test/n100/r01/n100.r01.s063.tar.gz 35.7MiB
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): retrieving result (try 0): started
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): retrieving diagnostic output (try 0): started
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): transferring output (try 0): started
2021/07/08 13:59:31 scheduler task 332245ec (flow 5e699761): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5678b0e8c2059f6d82c2c6ab0a71bebf1e0c7608e32474c36a8abbf21c484e91 -> s3://niema-test/n100/r01/n100.r01.s014.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s014.Main.cp_out_file 5e699761 ok   extern 0s 35.8MiB
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): promoting objects (try 0): started
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): retrieving result (try 0): started
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): transferring output (try 0): started
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): retrieving result (try 0): started
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): retrieving diagnostic output (try 0): started
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): transferring output (try 0): started
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:31 scheduler task d07a4f05 (flow 5df85a4f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cc6b3c479fe6d45ff55e7a395893cf3e947575f12667591fc10c5c8cf59c089c -> s3://niema-test/n100/r01/n100.r01.s091.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s091.Main.cp_out_file 5df85a4f ok   extern 0s 35.8MiB
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): transferring output (try 0): started
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): retrieving result (try 0): started
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): transferring output (try 0): started
2021/07/08 13:59:31 scheduler task 1fb90679 (flow ffd2f9e6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d53bc5d3dfb28208fac944630c0597189c1d35b3beb8677706b962bfb3e37161 -> s3://niema-test/n100/r01/n100.r01.s067.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s067.Main.cp_out_file ffd2f9e6 ok   extern 0s 35.7MiB
2021/07/08 13:59:31 scheduler task 8c2e6ab4 (flow 597eee21): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:21bd46b5d4a0c0f7423fd6d707f5c64de5629e52b914f2728baec7b3833a9a57 -> s3://niema-test/n100/r01/n100.r01.s019.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s019.Main.cp_out_file 597eee21 ok   extern 0s 35.8MiB
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloading (try 0): started
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloading list<val<.=bbcea3bd 35.8MiB> 35.8MiB>
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloading val<.=d4fcc08b 35.4MiB>
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloading val<.=97cf9dbe 35.4MiB>
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloaded val<.=97cf9dbe 35.4MiB>
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloaded list<val<.=bbcea3bd 35.8MiB> 35.8MiB>
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloaded val<.=d4fcc08b 35.4MiB>
2021/07/08 13:59:31 scheduler task 3e0df658 (flow da15cf49): unloading (try 0): successful, next state: complete
2021/07/08 13:59:31  <-  n100.r01.s021.Main.out_file da15cf49 ok     exec 5m7s 35.8MiB
2021/07/08 13:59:31 n100.r01.s021.Main.out_file da15cf49 n100/r01/n100.r01.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d7578da8aaa3716d711d62221011f5fbc187f1a761bbeab10daa1dcd39128b26
	sha256:da15cf492ec64c0d5d4b1a6c33dbc52706a3332dd275172f3a168789facfd865
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3e0df658b7f466a5fe0ff341bad140487f9445784ad3fbe44b54258c86fa0c1d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s021_output"
	    wget -O "n100.r01.s021_output/n100.r01.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s021_output/n100.r01.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s021_output/n100.r01.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s021_output/n100.r01.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s021_output/n100.r01.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s021_output/n100.r01.s021.reference.fas" "n100.r01.s021_output/n100.r01.s021.fq1.fastq" "n100.r01.s021_output/n100.r01.s021.fq2.fastq" | samtools view -bS - > "n100.r01.s021_output/n100.r01.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s021_output/n100.r01.s021.untrimmed.sorted.bam" "n100.r01.s021_output/n100.r01.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s021_output/n100.r01.s021.untrimmed.sorted.bam" -b "n100.r01.s021_output/n100.r01.s021.primers.bed" -p "n100.r01.s021_output/n100.r01.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" "n100.r01.s021_output/n100.r01.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s021_output/n100.r01.s021.reference.fas" "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" > "n100.r01.s021_output/n100.r01.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s021_output/n100.r01.s021.reference.fas" --call-indels "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" > "n100.r01.s021_output/n100.r01.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s021_output/n100.r01.s021.trimmed.sorted.bam" > "n100.r01.s021_output/n100.r01.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s021_output/n100.r01.s021.depth.txt" "n100.r01.s021_output/n100.r01.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s021_output/n100.r01.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s021_output/n100.r01.s021.reference.fas" | bcftools consensus -m "n100.r01.s021_output/n100.r01.s021.low_depth.tsv" tmp.vcf.gz > "n100.r01.s021_output/n100.r01.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bbcea3bdf32d737c8de2b105f6a2d7bab36afde5b9b6e2ce78f8898249c5f579 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=128.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 13:59:31 scheduler task fb30bff5 (flow bc3bc7ed): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s021.tar.gz resources {}
2021/07/08 13:59:31  ->  n100.r01.s021.Main.cp_out_file bc3bc7ed exec extern s3://niema-test/n100/r01/n100.r01.s021.tar.gz 35.8MiB
2021/07/08 13:59:31 scheduler task 53e3dca8 (flow 82836854): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ee168991874e207dd7d70e82f5acee55941587bededadae46b544e3e5ba307df -> s3://niema-test/n100/r01/n100.r01.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s054.Main.cp_out_file 82836854 ok   extern 0s 35.7MiB
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloading (try 0): started
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloading list<val<.=32cc4ee8 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloading val<.=508b6426 35.4MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloading val<.=b9acd0d3 35.4MiB>
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloading (try 0): started
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloading list<val<.=2e79ec39 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloading val<.=d352f0ac 35.4MiB>
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloading val<.=c7fa729f 35.4MiB>
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:31 scheduler task 1972035a (flow 52517099): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d13b990c0f1d1f9b40a559f63ac40d4008a5003e4beb8bf1ee2fc6e4a05ca304 -> s3://niema-test/n100/r01/n100.r01.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:31  <-  n100.r01.s063.Main.cp_out_file 52517099 ok   extern 0s 35.7MiB
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloading (try 0): started
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloading list<val<.=038b6fd9 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloading val<.=1798c582 35.4MiB>
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloading val<.=9ea39716 35.4MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloaded list<val<.=32cc4ee8 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloaded val<.=508b6426 35.4MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloaded val<.=b9acd0d3 35.4MiB>
2021/07/08 13:59:31 scheduler task 782b9981 (flow 466997bd): unloading (try 0): successful, next state: complete
2021/07/08 13:59:31  <-  n100.r01.s080.Main.out_file 466997bd ok     exec 5m8s 35.7MiB
2021/07/08 13:59:31 n100.r01.s080.Main.out_file 466997bd n100/r01/n100.r01.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0d2587484933856e0d10139c696097952128cc349b1bb5bd889c369757bfcce4
	sha256:466997bdce5766dacf9440792f7bdd81bb8d7fbbc4e810c85a75e83ca871c031
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/782b9981f075a6b33bf223b0b3f0218f4421d0368b6e5d8ac64958c663d4d08d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s080_output"
	    wget -O "n100.r01.s080_output/n100.r01.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s080_output/n100.r01.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s080_output/n100.r01.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s080_output/n100.r01.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s080_output/n100.r01.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s080_output/n100.r01.s080.reference.fas" "n100.r01.s080_output/n100.r01.s080.fq1.fastq" "n100.r01.s080_output/n100.r01.s080.fq2.fastq" | samtools view -bS - > "n100.r01.s080_output/n100.r01.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s080_output/n100.r01.s080.untrimmed.sorted.bam" "n100.r01.s080_output/n100.r01.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s080_output/n100.r01.s080.untrimmed.sorted.bam" -b "n100.r01.s080_output/n100.r01.s080.primers.bed" -p "n100.r01.s080_output/n100.r01.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" "n100.r01.s080_output/n100.r01.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s080_output/n100.r01.s080.reference.fas" "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" > "n100.r01.s080_output/n100.r01.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s080_output/n100.r01.s080.reference.fas" --call-indels "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" > "n100.r01.s080_output/n100.r01.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s080_output/n100.r01.s080.trimmed.sorted.bam" > "n100.r01.s080_output/n100.r01.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s080_output/n100.r01.s080.depth.txt" "n100.r01.s080_output/n100.r01.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s080_output/n100.r01.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s080_output/n100.r01.s080.reference.fas" | bcftools consensus -m "n100.r01.s080_output/n100.r01.s080.low_depth.tsv" tmp.vcf.gz > "n100.r01.s080_output/n100.r01.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:32cc4ee856e493354923052717b4a940afb12e4df48e1d0e06deb6f8306c1735 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.1MiB max=128.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 13:59:31 scheduler task 6151020c (flow 511a4dd2): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s080.tar.gz resources {}
2021/07/08 13:59:31  ->  n100.r01.s080.Main.cp_out_file 511a4dd2 exec extern s3://niema-test/n100/r01/n100.r01.s080.tar.gz 35.7MiB
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloaded list<val<.=2e79ec39 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloaded val<.=c7fa729f 35.4MiB>
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloaded val<.=d352f0ac 35.4MiB>
2021/07/08 13:59:31 scheduler task 1276c917 (flow 8986bd36): unloading (try 0): successful, next state: complete
2021/07/08 13:59:31  <-  n100.r01.s074.Main.out_file 8986bd36 ok     exec 5m8s 35.7MiB
2021/07/08 13:59:31 n100.r01.s074.Main.out_file 8986bd36 n100/r01/n100.r01.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ba417960799a9e653d6be8739b7aab7b745fbc66e8852780823db65d023d9a91
	sha256:8986bd36200b7d4825cad91f015166d616b24ce3c338b0f94a5e53e2587a2dd0
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1276c917df054857c5c980e141b18daea382780e9cbc87aa87daa41627038f64
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s074_output"
	    wget -O "n100.r01.s074_output/n100.r01.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s074_output/n100.r01.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s074_output/n100.r01.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s074_output/n100.r01.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s074_output/n100.r01.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s074_output/n100.r01.s074.reference.fas" "n100.r01.s074_output/n100.r01.s074.fq1.fastq" "n100.r01.s074_output/n100.r01.s074.fq2.fastq" | samtools view -bS - > "n100.r01.s074_output/n100.r01.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s074_output/n100.r01.s074.untrimmed.sorted.bam" "n100.r01.s074_output/n100.r01.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s074_output/n100.r01.s074.untrimmed.sorted.bam" -b "n100.r01.s074_output/n100.r01.s074.primers.bed" -p "n100.r01.s074_output/n100.r01.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" "n100.r01.s074_output/n100.r01.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s074_output/n100.r01.s074.reference.fas" "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" > "n100.r01.s074_output/n100.r01.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s074_output/n100.r01.s074.reference.fas" --call-indels "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" > "n100.r01.s074_output/n100.r01.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s074_output/n100.r01.s074.trimmed.sorted.bam" > "n100.r01.s074_output/n100.r01.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s074_output/n100.r01.s074.depth.txt" "n100.r01.s074_output/n100.r01.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s074_output/n100.r01.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s074_output/n100.r01.s074.reference.fas" | bcftools consensus -m "n100.r01.s074_output/n100.r01.s074.low_depth.tsv" tmp.vcf.gz > "n100.r01.s074_output/n100.r01.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2e79ec3988196a7b3929c3bf68f43e24b4ff4a600b127bcfcf623d659b7335d7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=131.7MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 13:59:31 scheduler task 16eb6890 (flow 02e1a5ff): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s074.tar.gz resources {}
2021/07/08 13:59:31  ->  n100.r01.s074.Main.cp_out_file 02e1a5ff exec extern s3://niema-test/n100/r01/n100.r01.s074.tar.gz 35.7MiB
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloaded list<val<.=038b6fd9 35.7MiB> 35.7MiB>
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloaded val<.=9ea39716 35.4MiB>
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloaded val<.=1798c582 35.4MiB>
2021/07/08 13:59:31 scheduler task 6a9006af (flow 15a25f65): unloading (try 0): successful, next state: complete
2021/07/08 13:59:31  <-  n100.r01.s068.Main.out_file 15a25f65 ok     exec 5m1s 35.7MiB
2021/07/08 13:59:31 n100.r01.s068.Main.out_file 15a25f65 n100/r01/n100.r01.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b58e62e6b66d430822aa41e94a49d82b30da756028f4bddfa1595502c1ba9000
	sha256:15a25f6543f835a04cdf99ade278a26ff67dda70054d689f5fbd1b2cc4b55e94
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a9006afbace5bb55b6d9864ad26a5eb08b775f6ebc005574f0ff5262118a4f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s068_output"
	    wget -O "n100.r01.s068_output/n100.r01.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s068_output/n100.r01.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s068_output/n100.r01.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s068_output/n100.r01.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s068_output/n100.r01.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s068_output/n100.r01.s068.reference.fas" "n100.r01.s068_output/n100.r01.s068.fq1.fastq" "n100.r01.s068_output/n100.r01.s068.fq2.fastq" | samtools view -bS - > "n100.r01.s068_output/n100.r01.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s068_output/n100.r01.s068.untrimmed.sorted.bam" "n100.r01.s068_output/n100.r01.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s068_output/n100.r01.s068.untrimmed.sorted.bam" -b "n100.r01.s068_output/n100.r01.s068.primers.bed" -p "n100.r01.s068_output/n100.r01.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" "n100.r01.s068_output/n100.r01.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s068_output/n100.r01.s068.reference.fas" "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" > "n100.r01.s068_output/n100.r01.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s068_output/n100.r01.s068.reference.fas" --call-indels "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" > "n100.r01.s068_output/n100.r01.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s068_output/n100.r01.s068.trimmed.sorted.bam" > "n100.r01.s068_output/n100.r01.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s068_output/n100.r01.s068.depth.txt" "n100.r01.s068_output/n100.r01.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s068_output/n100.r01.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s068_output/n100.r01.s068.reference.fas" | bcftools consensus -m "n100.r01.s068_output/n100.r01.s068.low_depth.tsv" tmp.vcf.gz > "n100.r01.s068_output/n100.r01.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:038b6fd9f5ad385e400e6dddb94a1e3439a6f19c4cf23017d548c7e53bab80c2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=128.4MiB
	    disk mean=7.2MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 13:59:31 scheduler task c901fe7e (flow 27792070): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s068.tar.gz resources {}
2021/07/08 13:59:31  ->  n100.r01.s068.Main.cp_out_file 27792070 exec extern s3://niema-test/n100/r01/n100.r01.s068.tar.gz 35.7MiB
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): unloading (try 0): started
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): unloading list<val<.=f53a67a2 35.8MiB> 35.8MiB>
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): unloading val<.=d207ae89 35.4MiB>
2021/07/08 13:59:31 scheduler task 523904ca (flow 9b5d68c9): unloading val<.=622ac5e1 35.4MiB>
2021/07/08 13:59:31 scheduler task 7d0761ce (flow 62d09709): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 523904ca (flow 9b5d68c9): unloaded val<.=622ac5e1 35.4MiB>
2021/07/08 13:59:32 scheduler task 523904ca (flow 9b5d68c9): unloaded list<val<.=f53a67a2 35.8MiB> 35.8MiB>
2021/07/08 13:59:32 scheduler task 523904ca (flow 9b5d68c9): unloaded val<.=d207ae89 35.4MiB>
2021/07/08 13:59:32 scheduler task 523904ca (flow 9b5d68c9): unloading (try 0): successful, next state: complete
2021/07/08 13:59:32  <-  n100.r01.s022.Main.out_file 9b5d68c9 ok     exec 5m11s 35.8MiB
2021/07/08 13:59:32 n100.r01.s022.Main.out_file 9b5d68c9 n100/r01/n100.r01.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27ed55ec7f5a53f60870788d672d87d70e72aed46d15b0681f08b3bdb6950aef
	sha256:9b5d68c984c57ae9ce9bb676a11091b2f286a862b9555a828e1d236356c6b6cb
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/523904ca7d18e1ba002fe5f7dce47b85ac155cc7fa25eddd57c2d6af26450e97
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s022_output"
	    wget -O "n100.r01.s022_output/n100.r01.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s022_output/n100.r01.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s022_output/n100.r01.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s022_output/n100.r01.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s022_output/n100.r01.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s022_output/n100.r01.s022.reference.fas" "n100.r01.s022_output/n100.r01.s022.fq1.fastq" "n100.r01.s022_output/n100.r01.s022.fq2.fastq" | samtools view -bS - > "n100.r01.s022_output/n100.r01.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s022_output/n100.r01.s022.untrimmed.sorted.bam" "n100.r01.s022_output/n100.r01.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s022_output/n100.r01.s022.untrimmed.sorted.bam" -b "n100.r01.s022_output/n100.r01.s022.primers.bed" -p "n100.r01.s022_output/n100.r01.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" "n100.r01.s022_output/n100.r01.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s022_output/n100.r01.s022.reference.fas" "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" > "n100.r01.s022_output/n100.r01.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s022_output/n100.r01.s022.reference.fas" --call-indels "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" > "n100.r01.s022_output/n100.r01.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s022_output/n100.r01.s022.trimmed.sorted.bam" > "n100.r01.s022_output/n100.r01.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s022_output/n100.r01.s022.depth.txt" "n100.r01.s022_output/n100.r01.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s022_output/n100.r01.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s022_output/n100.r01.s022.reference.fas" | bcftools consensus -m "n100.r01.s022_output/n100.r01.s022.low_depth.tsv" tmp.vcf.gz > "n100.r01.s022_output/n100.r01.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f53a67a28caf595cd319d757616d9fc228112152579e436787fb54517c299afc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.6MiB max=127.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 13:59:32 scheduler task 373c56c6 (flow bdb748d7): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s022.tar.gz resources {}
2021/07/08 13:59:32  ->  n100.r01.s022.Main.cp_out_file bdb748d7 exec extern s3://niema-test/n100/r01/n100.r01.s022.tar.gz 35.8MiB
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): transferring output (try 0): started
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): transferring output (try 0): started
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task fb30bff5 (flow bc3bc7ed): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bbcea3bdf32d737c8de2b105f6a2d7bab36afde5b9b6e2ce78f8898249c5f579 -> s3://niema-test/n100/r01/n100.r01.s021.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:32  <-  n100.r01.s021.Main.cp_out_file bc3bc7ed ok   extern 0s 35.8MiB
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task 6151020c (flow 511a4dd2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:32cc4ee856e493354923052717b4a940afb12e4df48e1d0e06deb6f8306c1735 -> s3://niema-test/n100/r01/n100.r01.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:32  <-  n100.r01.s080.Main.cp_out_file 511a4dd2 ok   extern 0s 35.7MiB
2021/07/08 13:59:32 scheduler task 0d9fcc7c (flow a4ee45a6): transferring output (try 0): started
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:32 scheduler task 26fea548 (flow af45f049): transferring output (try 0): started
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task 7cbb434c (flow 8d902717): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:32 scheduler task 7cbb434c (flow 8d902717): promoting objects (try 0): started
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task 7cbb434c (flow 8d902717): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:32 scheduler task 7cbb434c (flow 8d902717): retrieving diagnostic output (try 0): started
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloading (try 0): started
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloading list<val<.=723dc50c 35.8MiB> 35.8MiB>
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloading val<.=2cc5aa89 35.4MiB>
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloading val<.=c0815c5b 35.4MiB>
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task de4e06de (flow 337713ba): transferring output (try 0): started
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:32 scheduler task 7cbb434c (flow 8d902717): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): unloading (try 0): started
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): unloading list<val<.=5fc9b191 35.8MiB> 35.8MiB>
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): unloading val<.=cddc8ffd 35.4MiB>
2021/07/08 13:59:32 scheduler task 8280a85f (flow c90d12cc): unloading val<.=ae438f32 35.4MiB>
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloaded list<val<.=723dc50c 35.8MiB> 35.8MiB>
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloaded val<.=2cc5aa89 35.4MiB>
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloaded val<.=c0815c5b 35.4MiB>
2021/07/08 13:59:32 scheduler task 7d0761ce (flow 62d09709): unloading (try 0): successful, next state: complete
2021/07/08 13:59:32 scheduler task 7cbb434c (flow 8d902717): retrieving result (try 0): started
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:32  <-  n100.r01.s017.Main.out_file 62d09709 ok     exec 5m2s 35.8MiB
2021/07/08 13:59:32 n100.r01.s017.Main.out_file 62d09709 n100/r01/n100.r01.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:539d31abc14d3eccf57d4a5da5b1f7f2e6edea498cc5bf33f707bd507ec28700
	sha256:62d097097ed5636e98a43cceaebda75428b01e2f6cee3419c94b504a8a85c76a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7d0761ce6b3638a701c5883aab7acd5cb59d4ba4b19e99d82c793603b977fef1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s017_output"
	    wget -O "n100.r01.s017_output/n100.r01.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s017_output/n100.r01.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s017_output/n100.r01.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s017_output/n100.r01.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s017_output/n100.r01.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s017_output/n100.r01.s017.reference.fas" "n100.r01.s017_output/n100.r01.s017.fq1.fastq" "n100.r01.s017_output/n100.r01.s017.fq2.fastq" | samtools view -bS - > "n100.r01.s017_output/n100.r01.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s017_output/n100.r01.s017.untrimmed.sorted.bam" "n100.r01.s017_output/n100.r01.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s017_output/n100.r01.s017.untrimmed.sorted.bam" -b "n100.r01.s017_output/n100.r01.s017.primers.bed" -p "n100.r01.s017_output/n100.r01.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" "n100.r01.s017_output/n100.r01.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s017_output/n100.r01.s017.reference.fas" "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" > "n100.r01.s017_output/n100.r01.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s017_output/n100.r01.s017.reference.fas" --call-indels "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" > "n100.r01.s017_output/n100.r01.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s017_output/n100.r01.s017.trimmed.sorted.bam" > "n100.r01.s017_output/n100.r01.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s017_output/n100.r01.s017.depth.txt" "n100.r01.s017_output/n100.r01.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s017_output/n100.r01.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s017_output/n100.r01.s017.reference.fas" | bcftools consensus -m "n100.r01.s017_output/n100.r01.s017.low_depth.tsv" tmp.vcf.gz > "n100.r01.s017_output/n100.r01.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:723dc50c5c8966757c90541d511048be6990652134bfe3f24624c6d71154d045 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.5MiB max=131.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 13:59:32 scheduler task 57e301dd (flow 46a34d39): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s017.tar.gz resources {}
2021/07/08 13:59:32  ->  n100.r01.s017.Main.cp_out_file 46a34d39 exec extern s3://niema-test/n100/r01/n100.r01.s017.tar.gz 35.8MiB
2021/07/08 13:59:32 scheduler task 7c7b163b (flow 441ccf77): transferring output (try 0): started
2021/07/08 13:59:32 scheduler task 16eb6890 (flow 02e1a5ff): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2e79ec3988196a7b3929c3bf68f43e24b4ff4a600b127bcfcf623d659b7335d7 -> s3://niema-test/n100/r01/n100.r01.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:32  <-  n100.r01.s074.Main.cp_out_file 02e1a5ff ok   extern 0s 35.7MiB
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:33 scheduler task 8280a85f (flow c90d12cc): unloaded list<val<.=5fc9b191 35.8MiB> 35.8MiB>
2021/07/08 13:59:33 scheduler task 8280a85f (flow c90d12cc): unloaded val<.=cddc8ffd 35.4MiB>
2021/07/08 13:59:33 scheduler task 8280a85f (flow c90d12cc): unloaded val<.=ae438f32 35.4MiB>
2021/07/08 13:59:33 scheduler task 8280a85f (flow c90d12cc): unloading (try 0): successful, next state: complete
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): promoting objects (try 0): started
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:33  <-  n100.r01.s032.Main.out_file c90d12cc ok     exec 5m2s 35.8MiB
2021/07/08 13:59:33 n100.r01.s032.Main.out_file c90d12cc n100/r01/n100.r01.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e62223db087b334a0c6dd67dbb0ff834901eded0e386f4637ce0f71ac1abcaf
	sha256:c90d12ccfeeeb85144ce28aba5fa5bc4fbc0cacca9410966d91084a8d0842fbd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8280a85f1159da186a0e1806e6b6668b6843e6607e3cd5984e2ed7c00c854263
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s032_output"
	    wget -O "n100.r01.s032_output/n100.r01.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s032_output/n100.r01.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s032_output/n100.r01.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s032_output/n100.r01.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s032_output/n100.r01.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s032_output/n100.r01.s032.reference.fas" "n100.r01.s032_output/n100.r01.s032.fq1.fastq" "n100.r01.s032_output/n100.r01.s032.fq2.fastq" | samtools view -bS - > "n100.r01.s032_output/n100.r01.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s032_output/n100.r01.s032.untrimmed.sorted.bam" "n100.r01.s032_output/n100.r01.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s032_output/n100.r01.s032.untrimmed.sorted.bam" -b "n100.r01.s032_output/n100.r01.s032.primers.bed" -p "n100.r01.s032_output/n100.r01.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" "n100.r01.s032_output/n100.r01.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s032_output/n100.r01.s032.reference.fas" "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" > "n100.r01.s032_output/n100.r01.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s032_output/n100.r01.s032.reference.fas" --call-indels "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" > "n100.r01.s032_output/n100.r01.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s032_output/n100.r01.s032.trimmed.sorted.bam" > "n100.r01.s032_output/n100.r01.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s032_output/n100.r01.s032.depth.txt" "n100.r01.s032_output/n100.r01.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s032_output/n100.r01.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s032_output/n100.r01.s032.reference.fas" | bcftools consensus -m "n100.r01.s032_output/n100.r01.s032.low_depth.tsv" tmp.vcf.gz > "n100.r01.s032_output/n100.r01.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5fc9b19190045c2c857f4e4097b977c2554b36ca1964e6cb14ce4af4e269a562 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.0MiB max=126.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 13:59:33 scheduler task 404b065b (flow a2ecf02d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s032.tar.gz resources {}
2021/07/08 13:59:33  ->  n100.r01.s032.Main.cp_out_file a2ecf02d exec extern s3://niema-test/n100/r01/n100.r01.s032.tar.gz 35.8MiB
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): transferring output (try 0): started
2021/07/08 13:59:33 scheduler task 373c56c6 (flow bdb748d7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f53a67a28caf595cd319d757616d9fc228112152579e436787fb54517c299afc -> s3://niema-test/n100/r01/n100.r01.s022.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:33  <-  n100.r01.s022.Main.cp_out_file bdb748d7 ok   extern 0s 35.8MiB
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloading (try 0): started
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloading list<val<.=a7006f19 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloading val<.=f7700869 35.4MiB>
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloading val<.=179ba021 35.4MiB>
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): retrieving diagnostic output (try 0): started
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloaded list<val<.=a7006f19 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloaded val<.=179ba021 35.4MiB>
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloaded val<.=f7700869 35.4MiB>
2021/07/08 13:59:33 scheduler task 0d9fcc7c (flow a4ee45a6): unloading (try 0): successful, next state: complete
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloading (try 0): started
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloading list<val<.=cb7c8c24 35.8MiB> 35.8MiB>
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloading val<.=01d3280a 35.4MiB>
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloading val<.=6f1da7a0 35.4MiB>
2021/07/08 13:59:33  <-  n100.r01.s044.Main.out_file a4ee45a6 ok     exec 5m2s 35.7MiB
2021/07/08 13:59:33 n100.r01.s044.Main.out_file a4ee45a6 n100/r01/n100.r01.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d33b19f4fa5091e0587cac81bcb881c3573d6fc7f715a5ed3e72ef314d2bbaea
	sha256:a4ee45a6f34f2eaa8df5fb95dec32794ea5c0022b57b3037c5a3d0ee1843e3fd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d9fcc7c5a8c791fdd68dc6876dd6d78b9e89724cfd5774916f3304da6251986
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s044_output"
	    wget -O "n100.r01.s044_output/n100.r01.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s044_output/n100.r01.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s044_output/n100.r01.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s044_output/n100.r01.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s044_output/n100.r01.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s044_output/n100.r01.s044.reference.fas" "n100.r01.s044_output/n100.r01.s044.fq1.fastq" "n100.r01.s044_output/n100.r01.s044.fq2.fastq" | samtools view -bS - > "n100.r01.s044_output/n100.r01.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s044_output/n100.r01.s044.untrimmed.sorted.bam" "n100.r01.s044_output/n100.r01.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s044_output/n100.r01.s044.untrimmed.sorted.bam" -b "n100.r01.s044_output/n100.r01.s044.primers.bed" -p "n100.r01.s044_output/n100.r01.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" "n100.r01.s044_output/n100.r01.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s044_output/n100.r01.s044.reference.fas" "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" > "n100.r01.s044_output/n100.r01.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s044_output/n100.r01.s044.reference.fas" --call-indels "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" > "n100.r01.s044_output/n100.r01.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s044_output/n100.r01.s044.trimmed.sorted.bam" > "n100.r01.s044_output/n100.r01.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s044_output/n100.r01.s044.depth.txt" "n100.r01.s044_output/n100.r01.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s044_output/n100.r01.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s044_output/n100.r01.s044.reference.fas" | bcftools consensus -m "n100.r01.s044_output/n100.r01.s044.low_depth.tsv" tmp.vcf.gz > "n100.r01.s044_output/n100.r01.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a7006f1923de6a4081a375786674dcd2e2d1e26afcc8b18c77dd3aeb817a54e6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.0MiB max=126.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 13:59:33 scheduler task 4e691fe2 (flow c69d9924): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s044.tar.gz resources {}
2021/07/08 13:59:33  ->  n100.r01.s044.Main.cp_out_file c69d9924 exec extern s3://niema-test/n100/r01/n100.r01.s044.tar.gz 35.7MiB
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): promoting objects (try 0): started
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloaded val<.=6f1da7a0 35.4MiB>
2021/07/08 13:59:33 scheduler task c901fe7e (flow 27792070): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:038b6fd9f5ad385e400e6dddb94a1e3439a6f19c4cf23017d548c7e53bab80c2 -> s3://niema-test/n100/r01/n100.r01.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloaded list<val<.=cb7c8c24 35.8MiB> 35.8MiB>
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloaded val<.=01d3280a 35.4MiB>
2021/07/08 13:59:33 scheduler task 26fea548 (flow af45f049): unloading (try 0): successful, next state: complete
2021/07/08 13:59:33  <-  n100.r01.s068.Main.cp_out_file 27792070 ok   extern 0s 35.7MiB
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): retrieving result (try 0): started
2021/07/08 13:59:33  <-  n100.r01.s079.Main.out_file af45f049 ok     exec 5m2s 35.8MiB
2021/07/08 13:59:33 n100.r01.s079.Main.out_file af45f049 n100/r01/n100.r01.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6579f8cfe3a0fcbc688355e9623b24f53b8a554bd7c4d58062b73da89fc7c5da
	sha256:af45f04974d77588558c0e33d6240915e051b7fe1063a6b1812a7ab216bd00fe
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26fea5489aabf13e45ff7b7616309e920a49695c7b7c68c97811155969f1ff16
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s079_output"
	    wget -O "n100.r01.s079_output/n100.r01.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s079_output/n100.r01.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s079_output/n100.r01.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s079_output/n100.r01.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s079_output/n100.r01.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s079_output/n100.r01.s079.reference.fas" "n100.r01.s079_output/n100.r01.s079.fq1.fastq" "n100.r01.s079_output/n100.r01.s079.fq2.fastq" | samtools view -bS - > "n100.r01.s079_output/n100.r01.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s079_output/n100.r01.s079.untrimmed.sorted.bam" "n100.r01.s079_output/n100.r01.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s079_output/n100.r01.s079.untrimmed.sorted.bam" -b "n100.r01.s079_output/n100.r01.s079.primers.bed" -p "n100.r01.s079_output/n100.r01.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" "n100.r01.s079_output/n100.r01.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s079_output/n100.r01.s079.reference.fas" "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" > "n100.r01.s079_output/n100.r01.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s079_output/n100.r01.s079.reference.fas" --call-indels "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" > "n100.r01.s079_output/n100.r01.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s079_output/n100.r01.s079.trimmed.sorted.bam" > "n100.r01.s079_output/n100.r01.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s079_output/n100.r01.s079.depth.txt" "n100.r01.s079_output/n100.r01.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s079_output/n100.r01.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s079_output/n100.r01.s079.reference.fas" | bcftools consensus -m "n100.r01.s079_output/n100.r01.s079.low_depth.tsv" tmp.vcf.gz > "n100.r01.s079_output/n100.r01.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cb7c8c240d55f4ef55331312966cd5ff9663274b4b80acc7c727ba7bd77796c2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=131.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=696B max=3.1KiB
2021/07/08 13:59:33 scheduler task 0014682f (flow 9d8e9964): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s079.tar.gz resources {}
2021/07/08 13:59:33  ->  n100.r01.s079.Main.cp_out_file 9d8e9964 exec extern s3://niema-test/n100/r01/n100.r01.s079.tar.gz 35.8MiB
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): retrieving diagnostic output (try 0): started
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:33 scheduler task 4d45e98c (flow 3fec048b): transferring output (try 0): started
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): retrieving result (try 0): started
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloading (try 0): started
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloading list<val<.=c582e76a 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloading val<.=1673e42f 35.4MiB>
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloading val<.=d8338249 35.4MiB>
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:33 scheduler task 00418e33 (flow 580d88f9): transferring output (try 0): started
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloaded list<val<.=c582e76a 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloading (try 0): started
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloading list<val<.=fd2f7fd8 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloading val<.=9d1a1741 35.4MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloading val<.=efd390ec 35.4MiB>
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloaded val<.=d8338249 35.4MiB>
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloaded val<.=1673e42f 35.4MiB>
2021/07/08 13:59:33 scheduler task de4e06de (flow 337713ba): unloading (try 0): successful, next state: complete
2021/07/08 13:59:33  <-  n100.r01.s012.Main.out_file 337713ba ok     exec 5m2s 35.7MiB
2021/07/08 13:59:33 n100.r01.s012.Main.out_file 337713ba n100/r01/n100.r01.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d05d2878ca988975d3342f4fde8bf679859329d7e1d7b2305dbb3cef422dae79
	sha256:337713baed0b8f66c5fcf87957150b9ab6d00f782fb39c6a943d49fd53327b2a
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/de4e06dea2e00627e2391b56f02c8f3bb816cc8f5aa8e8f2ab19613134ef4f42
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s012_output"
	    wget -O "n100.r01.s012_output/n100.r01.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s012_output/n100.r01.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s012_output/n100.r01.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s012_output/n100.r01.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s012_output/n100.r01.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s012_output/n100.r01.s012.reference.fas" "n100.r01.s012_output/n100.r01.s012.fq1.fastq" "n100.r01.s012_output/n100.r01.s012.fq2.fastq" | samtools view -bS - > "n100.r01.s012_output/n100.r01.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s012_output/n100.r01.s012.untrimmed.sorted.bam" "n100.r01.s012_output/n100.r01.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s012_output/n100.r01.s012.untrimmed.sorted.bam" -b "n100.r01.s012_output/n100.r01.s012.primers.bed" -p "n100.r01.s012_output/n100.r01.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" "n100.r01.s012_output/n100.r01.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s012_output/n100.r01.s012.reference.fas" "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" > "n100.r01.s012_output/n100.r01.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s012_output/n100.r01.s012.reference.fas" --call-indels "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" > "n100.r01.s012_output/n100.r01.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s012_output/n100.r01.s012.trimmed.sorted.bam" > "n100.r01.s012_output/n100.r01.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s012_output/n100.r01.s012.depth.txt" "n100.r01.s012_output/n100.r01.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s012_output/n100.r01.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s012_output/n100.r01.s012.reference.fas" | bcftools consensus -m "n100.r01.s012_output/n100.r01.s012.low_depth.tsv" tmp.vcf.gz > "n100.r01.s012_output/n100.r01.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c582e76ab510d35482a970db2a4452e57c8dedd51f70f893eba61385167cb810 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.5MiB max=128.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=870B max=3.1KiB
2021/07/08 13:59:33 scheduler task f9559284 (flow 36b3c026): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s012.tar.gz resources {}
2021/07/08 13:59:33  ->  n100.r01.s012.Main.cp_out_file 36b3c026 exec extern s3://niema-test/n100/r01/n100.r01.s012.tar.gz 35.7MiB
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloading (try 0): started
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloading list<val<.=11242974 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloading val<.=2163c61e 35.4MiB>
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloading val<.=10d7b3f4 35.4MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloaded list<val<.=fd2f7fd8 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloaded val<.=9d1a1741 35.4MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloaded val<.=efd390ec 35.4MiB>
2021/07/08 13:59:33 scheduler task 7c7b163b (flow 441ccf77): unloading (try 0): successful, next state: complete
2021/07/08 13:59:33  <-  n100.r01.s049.Main.out_file 441ccf77 ok     exec 5m2s 35.7MiB
2021/07/08 13:59:33 n100.r01.s049.Main.out_file 441ccf77 n100/r01/n100.r01.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b8dae941c83c2a74c2415aa7c199927de307731bb32d2142d71874f2f0fdfe7
	sha256:441ccf772b221c416abaac58c648091e110e353e9b40683bf7bcbc9dfcf8c8c5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7c7b163b35ba96c0840a626264bea18b659de4979c5c4f2f8bda407bd966e2b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s049_output"
	    wget -O "n100.r01.s049_output/n100.r01.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s049_output/n100.r01.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s049_output/n100.r01.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s049_output/n100.r01.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s049_output/n100.r01.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s049_output/n100.r01.s049.reference.fas" "n100.r01.s049_output/n100.r01.s049.fq1.fastq" "n100.r01.s049_output/n100.r01.s049.fq2.fastq" | samtools view -bS - > "n100.r01.s049_output/n100.r01.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s049_output/n100.r01.s049.untrimmed.sorted.bam" "n100.r01.s049_output/n100.r01.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s049_output/n100.r01.s049.untrimmed.sorted.bam" -b "n100.r01.s049_output/n100.r01.s049.primers.bed" -p "n100.r01.s049_output/n100.r01.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" "n100.r01.s049_output/n100.r01.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s049_output/n100.r01.s049.reference.fas" "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" > "n100.r01.s049_output/n100.r01.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s049_output/n100.r01.s049.reference.fas" --call-indels "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" > "n100.r01.s049_output/n100.r01.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s049_output/n100.r01.s049.trimmed.sorted.bam" > "n100.r01.s049_output/n100.r01.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s049_output/n100.r01.s049.depth.txt" "n100.r01.s049_output/n100.r01.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s049_output/n100.r01.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s049_output/n100.r01.s049.reference.fas" | bcftools consensus -m "n100.r01.s049_output/n100.r01.s049.low_depth.tsv" tmp.vcf.gz > "n100.r01.s049_output/n100.r01.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fd2f7fd84de668457440523015c26d1016de77b3df29b26e76d39685f34d89f6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.8MiB max=127.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=697B max=3.1KiB
2021/07/08 13:59:33 scheduler task e7005334 (flow 3274dca1): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s049.tar.gz resources {}
2021/07/08 13:59:33  ->  n100.r01.s049.Main.cp_out_file 3274dca1 exec extern s3://niema-test/n100/r01/n100.r01.s049.tar.gz 35.7MiB
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloaded val<.=10d7b3f4 35.4MiB>
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloaded val<.=2163c61e 35.4MiB>
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloaded list<val<.=11242974 35.7MiB> 35.7MiB>
2021/07/08 13:59:33 scheduler task 7cbb434c (flow 8d902717): unloading (try 0): successful, next state: complete
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:33  <-  n100.r01.s073.Main.out_file 8d902717 ok     exec 4m54s 35.7MiB
2021/07/08 13:59:33 n100.r01.s073.Main.out_file 8d902717 n100/r01/n100.r01.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8273f7000e6956dd37f1daca77cf24a27bddf234248d5123aa4400bff19b8842
	sha256:8d9027174d521e8d9f4edec854098117356b5477d67e4ca041b73bc1499b97ec
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7cbb434c0927874be566b31cd8a6b6b77e48e718abea0aa959bad6dc6d20e59f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s073_output"
	    wget -O "n100.r01.s073_output/n100.r01.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s073_output/n100.r01.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s073_output/n100.r01.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s073_output/n100.r01.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s073_output/n100.r01.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s073_output/n100.r01.s073.reference.fas" "n100.r01.s073_output/n100.r01.s073.fq1.fastq" "n100.r01.s073_output/n100.r01.s073.fq2.fastq" | samtools view -bS - > "n100.r01.s073_output/n100.r01.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s073_output/n100.r01.s073.untrimmed.sorted.bam" "n100.r01.s073_output/n100.r01.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s073_output/n100.r01.s073.untrimmed.sorted.bam" -b "n100.r01.s073_output/n100.r01.s073.primers.bed" -p "n100.r01.s073_output/n100.r01.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" "n100.r01.s073_output/n100.r01.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s073_output/n100.r01.s073.reference.fas" "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" > "n100.r01.s073_output/n100.r01.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s073_output/n100.r01.s073.reference.fas" --call-indels "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" > "n100.r01.s073_output/n100.r01.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s073_output/n100.r01.s073.trimmed.sorted.bam" > "n100.r01.s073_output/n100.r01.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s073_output/n100.r01.s073.depth.txt" "n100.r01.s073_output/n100.r01.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s073_output/n100.r01.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s073_output/n100.r01.s073.reference.fas" | bcftools consensus -m "n100.r01.s073_output/n100.r01.s073.low_depth.tsv" tmp.vcf.gz > "n100.r01.s073_output/n100.r01.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1124297495eef1b9dad49090705083c1a39bc53719d1f91a7b9ab49583bc815d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=129.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 13:59:33 scheduler task f8bf1814 (flow 64d79a6d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s073.tar.gz resources {}
2021/07/08 13:59:33  ->  n100.r01.s073.Main.cp_out_file 64d79a6d exec extern s3://niema-test/n100/r01/n100.r01.s073.tar.gz 35.7MiB
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): promoting objects (try 0): started
2021/07/08 13:59:33 scheduler task 404b065b (flow a2ecf02d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5fc9b19190045c2c857f4e4097b977c2554b36ca1964e6cb14ce4af4e269a562 -> s3://niema-test/n100/r01/n100.r01.s032.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:33  <-  n100.r01.s032.Main.cp_out_file a2ecf02d ok   extern 0s 35.8MiB
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): retrieving diagnostic output (try 0): started
2021/07/08 13:59:33 scheduler task 57e301dd (flow 46a34d39): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:723dc50c5c8966757c90541d511048be6990652134bfe3f24624c6d71154d045 -> s3://niema-test/n100/r01/n100.r01.s017.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:33  <-  n100.r01.s017.Main.cp_out_file 46a34d39 ok   extern 0s 35.8MiB
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:33 scheduler task b7843960 (flow 4a121bc6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): retrieving result (try 0): started
2021/07/08 13:59:33 scheduler task b7843960 (flow 4a121bc6): promoting objects (try 0): started
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:33 scheduler task b7843960 (flow 4a121bc6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:33 scheduler task 8b2fb039 (flow d0853815): transferring output (try 0): started
2021/07/08 13:59:33 scheduler task b7843960 (flow 4a121bc6): retrieving diagnostic output (try 0): started
2021/07/08 13:59:33 scheduler task b7843960 (flow 4a121bc6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): retrieving result (try 0): started
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): promoting objects (try 0): started
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloading (try 0): started
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloading list<val<.=41bb708c 35.7MiB> 35.7MiB>
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloading val<.=0adaca2c 35.4MiB>
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloading val<.=cc59fc97 35.4MiB>
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloading (try 0): started
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloading list<val<.=cebf0222 35.8MiB> 35.8MiB>
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloading val<.=1c1fed7b 35.4MiB>
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloading val<.=11ff7b2a 35.4MiB>
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): transferring output (try 0): started
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): retrieving diagnostic output (try 0): started
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloaded val<.=0adaca2c 35.4MiB>
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloaded list<val<.=41bb708c 35.7MiB> 35.7MiB>
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloaded val<.=cc59fc97 35.4MiB>
2021/07/08 13:59:34 scheduler task 00418e33 (flow 580d88f9): unloading (try 0): successful, next state: complete
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloaded val<.=1c1fed7b 35.4MiB>
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloaded list<val<.=cebf0222 35.8MiB> 35.8MiB>
2021/07/08 13:59:34  <-  n100.r01.s005.Main.out_file 580d88f9 ok     exec 5m3s 35.7MiB
2021/07/08 13:59:34 n100.r01.s005.Main.out_file 580d88f9 n100/r01/n100.r01.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5bcab7fa1fe83bd6ecc484d51571a61736b6b3759d713fe765011da0691e8650
	sha256:580d88f9fedf00a2ba5b765d3d8c5c2ddee8817e303833c2e4431f2dde4ea827
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/00418e33c58bf4ea0bde8bf3542cd040b4e84355ae6bebbbd101f8ddad42e6bb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s005_output"
	    wget -O "n100.r01.s005_output/n100.r01.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s005_output/n100.r01.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s005_output/n100.r01.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s005_output/n100.r01.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s005_output/n100.r01.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s005_output/n100.r01.s005.reference.fas" "n100.r01.s005_output/n100.r01.s005.fq1.fastq" "n100.r01.s005_output/n100.r01.s005.fq2.fastq" | samtools view -bS - > "n100.r01.s005_output/n100.r01.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s005_output/n100.r01.s005.untrimmed.sorted.bam" "n100.r01.s005_output/n100.r01.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s005_output/n100.r01.s005.untrimmed.sorted.bam" -b "n100.r01.s005_output/n100.r01.s005.primers.bed" -p "n100.r01.s005_output/n100.r01.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" "n100.r01.s005_output/n100.r01.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s005_output/n100.r01.s005.reference.fas" "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" > "n100.r01.s005_output/n100.r01.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s005_output/n100.r01.s005.reference.fas" --call-indels "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" > "n100.r01.s005_output/n100.r01.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s005_output/n100.r01.s005.trimmed.sorted.bam" > "n100.r01.s005_output/n100.r01.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s005_output/n100.r01.s005.depth.txt" "n100.r01.s005_output/n100.r01.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s005_output/n100.r01.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s005_output/n100.r01.s005.reference.fas" | bcftools consensus -m "n100.r01.s005_output/n100.r01.s005.low_depth.tsv" tmp.vcf.gz > "n100.r01.s005_output/n100.r01.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:41bb708c84dd9b36a7a340d65999e496307dc4ae68997dc0e7c48fe78c7607e2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.9MiB max=130.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloaded val<.=11ff7b2a 35.4MiB>
2021/07/08 13:59:34 scheduler task 4d45e98c (flow 3fec048b): unloading (try 0): successful, next state: complete
2021/07/08 13:59:34 scheduler task 528b7bb9 (flow 7f546c04): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s005.tar.gz resources {}
2021/07/08 13:59:34  ->  n100.r01.s005.Main.cp_out_file 7f546c04 exec extern s3://niema-test/n100/r01/n100.r01.s005.tar.gz 35.7MiB
2021/07/08 13:59:34  <-  n100.r01.s092.Main.out_file 3fec048b ok     exec 4m54s 35.8MiB
2021/07/08 13:59:34 n100.r01.s092.Main.out_file 3fec048b n100/r01/n100.r01.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aed0e4582c37d5b035b96eca90baf5064f1d78170d254453c77a146c0f04e53d
	sha256:3fec048b604e8fab0c29fad89f0694673a2be9f3e41802c4c4699e9aa619f9fc
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4d45e98c5f59b6b09cbaaae4fb02dbcdb323d663bc1162de1c6ff756693cf7ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s092_output"
	    wget -O "n100.r01.s092_output/n100.r01.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s092_output/n100.r01.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s092_output/n100.r01.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s092_output/n100.r01.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s092_output/n100.r01.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s092_output/n100.r01.s092.reference.fas" "n100.r01.s092_output/n100.r01.s092.fq1.fastq" "n100.r01.s092_output/n100.r01.s092.fq2.fastq" | samtools view -bS - > "n100.r01.s092_output/n100.r01.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s092_output/n100.r01.s092.untrimmed.sorted.bam" "n100.r01.s092_output/n100.r01.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s092_output/n100.r01.s092.untrimmed.sorted.bam" -b "n100.r01.s092_output/n100.r01.s092.primers.bed" -p "n100.r01.s092_output/n100.r01.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" "n100.r01.s092_output/n100.r01.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s092_output/n100.r01.s092.reference.fas" "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" > "n100.r01.s092_output/n100.r01.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s092_output/n100.r01.s092.reference.fas" --call-indels "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" > "n100.r01.s092_output/n100.r01.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s092_output/n100.r01.s092.trimmed.sorted.bam" > "n100.r01.s092_output/n100.r01.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s092_output/n100.r01.s092.depth.txt" "n100.r01.s092_output/n100.r01.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s092_output/n100.r01.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s092_output/n100.r01.s092.reference.fas" | bcftools consensus -m "n100.r01.s092_output/n100.r01.s092.low_depth.tsv" tmp.vcf.gz > "n100.r01.s092_output/n100.r01.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cebf0222a3ec5556b207dbb432203a31341aa13dcec31f5ed7d884c53279ab1f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=130.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:34 scheduler task 42282dde (flow 11f95eb8): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s092.tar.gz resources {}
2021/07/08 13:59:34  ->  n100.r01.s092.Main.cp_out_file 11f95eb8 exec extern s3://niema-test/n100/r01/n100.r01.s092.tar.gz 35.8MiB
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): retrieving result (try 0): started
2021/07/08 13:59:34 scheduler task f9559284 (flow 36b3c026): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c582e76ab510d35482a970db2a4452e57c8dedd51f70f893eba61385167cb810 -> s3://niema-test/n100/r01/n100.r01.s012.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s012.Main.cp_out_file 36b3c026 ok   extern 0s 35.7MiB
2021/07/08 13:59:34 scheduler task 0014682f (flow 9d8e9964): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cb7c8c240d55f4ef55331312966cd5ff9663274b4b80acc7c727ba7bd77796c2 -> s3://niema-test/n100/r01/n100.r01.s079.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s079.Main.cp_out_file 9d8e9964 ok   extern 0s 35.8MiB
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:34 scheduler task e7005334 (flow 3274dca1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fd2f7fd84de668457440523015c26d1016de77b3df29b26e76d39685f34d89f6 -> s3://niema-test/n100/r01/n100.r01.s049.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s049.Main.cp_out_file 3274dca1 ok   extern 0s 35.7MiB
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): transferring output (try 0): started
2021/07/08 13:59:34 scheduler task 4e691fe2 (flow c69d9924): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a7006f1923de6a4081a375786674dcd2e2d1e26afcc8b18c77dd3aeb817a54e6 -> s3://niema-test/n100/r01/n100.r01.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s044.Main.cp_out_file c69d9924 ok   extern 0s 35.7MiB
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloading (try 0): started
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloading list<val<.=b5f40b7f 35.8MiB> 35.8MiB>
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloading val<.=4b7b800a 35.4MiB>
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloading val<.=be911f6e 35.4MiB>
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloaded list<val<.=b5f40b7f 35.8MiB> 35.8MiB>
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloaded val<.=4b7b800a 35.4MiB>
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloaded val<.=be911f6e 35.4MiB>
2021/07/08 13:59:34 scheduler task 8b2fb039 (flow d0853815): unloading (try 0): successful, next state: complete
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:34  <-  n100.r01.s020.Main.out_file d0853815 ok     exec 5m3s 35.8MiB
2021/07/08 13:59:34 n100.r01.s020.Main.out_file d0853815 n100/r01/n100.r01.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:913984424e0bbcb880e088617fbec9847675daa0e8bf878b6afce428e2c98577
	sha256:d085381504d2e9c4d2543b70c428760eddcad28133b98aa7ce9edee959d99952
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b2fb03995e867e36acc6b71aa009cdca25e636c4fecb868f86aaf0f50c7919d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s020_output"
	    wget -O "n100.r01.s020_output/n100.r01.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s020_output/n100.r01.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s020_output/n100.r01.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s020_output/n100.r01.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s020_output/n100.r01.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s020_output/n100.r01.s020.reference.fas" "n100.r01.s020_output/n100.r01.s020.fq1.fastq" "n100.r01.s020_output/n100.r01.s020.fq2.fastq" | samtools view -bS - > "n100.r01.s020_output/n100.r01.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s020_output/n100.r01.s020.untrimmed.sorted.bam" "n100.r01.s020_output/n100.r01.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s020_output/n100.r01.s020.untrimmed.sorted.bam" -b "n100.r01.s020_output/n100.r01.s020.primers.bed" -p "n100.r01.s020_output/n100.r01.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" "n100.r01.s020_output/n100.r01.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s020_output/n100.r01.s020.reference.fas" "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" > "n100.r01.s020_output/n100.r01.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s020_output/n100.r01.s020.reference.fas" --call-indels "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" > "n100.r01.s020_output/n100.r01.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s020_output/n100.r01.s020.trimmed.sorted.bam" > "n100.r01.s020_output/n100.r01.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s020_output/n100.r01.s020.depth.txt" "n100.r01.s020_output/n100.r01.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s020_output/n100.r01.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s020_output/n100.r01.s020.reference.fas" | bcftools consensus -m "n100.r01.s020_output/n100.r01.s020.low_depth.tsv" tmp.vcf.gz > "n100.r01.s020_output/n100.r01.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b5f40b7ff67f3a2b1c8c4b212dda8e7a931b2661362884083d16340a4998612d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.4MiB max=126.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 13:59:34 scheduler task 3902907d (flow bd77987c): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s020.tar.gz resources {}
2021/07/08 13:59:34  ->  n100.r01.s020.Main.cp_out_file bd77987c exec extern s3://niema-test/n100/r01/n100.r01.s020.tar.gz 35.8MiB
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): promoting objects (try 0): started
2021/07/08 13:59:34 scheduler task f8bf1814 (flow 64d79a6d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1124297495eef1b9dad49090705083c1a39bc53719d1f91a7b9ab49583bc815d -> s3://niema-test/n100/r01/n100.r01.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s073.Main.cp_out_file 64d79a6d ok   extern 0s 35.7MiB
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloading (try 0): started
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloading list<val<.=f1901752 35.7MiB> 35.7MiB>
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloading val<.=1f210340 35.4MiB>
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloading val<.=2a671f96 35.4MiB>
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): retrieving diagnostic output (try 0): started
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloaded val<.=1f210340 35.4MiB>
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloaded list<val<.=f1901752 35.7MiB> 35.7MiB>
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloaded val<.=2a671f96 35.4MiB>
2021/07/08 13:59:34 scheduler task b7843960 (flow 4a121bc6): unloading (try 0): successful, next state: complete
2021/07/08 13:59:34  <-  n100.r01.s072.Main.out_file 4a121bc6 ok     exec 5m4s 35.7MiB
2021/07/08 13:59:34 n100.r01.s072.Main.out_file 4a121bc6 n100/r01/n100.r01.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:656bebadd6fceaf1afef542b87772de41ed26be46216acac9d4393d25cb1f465
	sha256:4a121bc66a553ed13cf8e1d23212a52736e4b3f67a4921d1f2136505afe99f4e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b7843960bdd6c6b2d22e051c9b0bf12a42f75624c32641a0fadb9f3b67768b21
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s072_output"
	    wget -O "n100.r01.s072_output/n100.r01.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s072_output/n100.r01.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s072_output/n100.r01.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s072_output/n100.r01.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s072_output/n100.r01.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s072_output/n100.r01.s072.reference.fas" "n100.r01.s072_output/n100.r01.s072.fq1.fastq" "n100.r01.s072_output/n100.r01.s072.fq2.fastq" | samtools view -bS - > "n100.r01.s072_output/n100.r01.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s072_output/n100.r01.s072.untrimmed.sorted.bam" "n100.r01.s072_output/n100.r01.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s072_output/n100.r01.s072.untrimmed.sorted.bam" -b "n100.r01.s072_output/n100.r01.s072.primers.bed" -p "n100.r01.s072_output/n100.r01.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" "n100.r01.s072_output/n100.r01.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s072_output/n100.r01.s072.reference.fas" "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" > "n100.r01.s072_output/n100.r01.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s072_output/n100.r01.s072.reference.fas" --call-indels "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" > "n100.r01.s072_output/n100.r01.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s072_output/n100.r01.s072.trimmed.sorted.bam" > "n100.r01.s072_output/n100.r01.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s072_output/n100.r01.s072.depth.txt" "n100.r01.s072_output/n100.r01.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s072_output/n100.r01.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s072_output/n100.r01.s072.reference.fas" | bcftools consensus -m "n100.r01.s072_output/n100.r01.s072.low_depth.tsv" tmp.vcf.gz > "n100.r01.s072_output/n100.r01.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f1901752807705a22242d2ca095fcb7afdc127824c787f96313d96ae527bef71 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.4MiB max=131.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 13:59:34 scheduler task 01abb7a8 (flow 25d9ffab): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s072.tar.gz resources {}
2021/07/08 13:59:34  ->  n100.r01.s072.Main.cp_out_file 25d9ffab exec extern s3://niema-test/n100/r01/n100.r01.s072.tar.gz 35.7MiB
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): retrieving result (try 0): started
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:34 scheduler task 08e2a9ed (flow 1d467a73): transferring output (try 0): started
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloading (try 0): started
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloading list<val<.=64b035a8 35.8MiB> 35.8MiB>
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloading val<.=ab8772d2 35.4MiB>
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloading val<.=4733c8b6 35.4MiB>
2021/07/08 13:59:34 scheduler task 42282dde (flow 11f95eb8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cebf0222a3ec5556b207dbb432203a31341aa13dcec31f5ed7d884c53279ab1f -> s3://niema-test/n100/r01/n100.r01.s092.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s092.Main.cp_out_file 11f95eb8 ok   extern 0s 35.8MiB
2021/07/08 13:59:34 scheduler task 528b7bb9 (flow 7f546c04): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:41bb708c84dd9b36a7a340d65999e496307dc4ae68997dc0e7c48fe78c7607e2 -> s3://niema-test/n100/r01/n100.r01.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:34  <-  n100.r01.s005.Main.cp_out_file 7f546c04 ok   extern 0s 35.7MiB
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloaded list<val<.=64b035a8 35.8MiB> 35.8MiB>
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloaded val<.=4733c8b6 35.4MiB>
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloaded val<.=ab8772d2 35.4MiB>
2021/07/08 13:59:34 scheduler task df7b7632 (flow cb85a725): unloading (try 0): successful, next state: complete
2021/07/08 13:59:34  <-  n100.r01.s055.Main.out_file cb85a725 ok     exec 5m3s 35.8MiB
2021/07/08 13:59:34 n100.r01.s055.Main.out_file cb85a725 n100/r01/n100.r01.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:22f510a611a732a44d333b967ee1a52caf5b60ae4237120b6c83f01169a6376f
	sha256:cb85a725ddac36d1028d9fe75abe68b96f08b9302b1000e9ee9dfa943b48ea18
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df7b763238769dc2b79f8f1f40dde6c2cec9e97abe8ac6268fc9b9d6b0d4e6d1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s055_output"
	    wget -O "n100.r01.s055_output/n100.r01.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s055_output/n100.r01.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s055_output/n100.r01.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s055_output/n100.r01.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s055_output/n100.r01.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s055_output/n100.r01.s055.reference.fas" "n100.r01.s055_output/n100.r01.s055.fq1.fastq" "n100.r01.s055_output/n100.r01.s055.fq2.fastq" | samtools view -bS - > "n100.r01.s055_output/n100.r01.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s055_output/n100.r01.s055.untrimmed.sorted.bam" "n100.r01.s055_output/n100.r01.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s055_output/n100.r01.s055.untrimmed.sorted.bam" -b "n100.r01.s055_output/n100.r01.s055.primers.bed" -p "n100.r01.s055_output/n100.r01.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" "n100.r01.s055_output/n100.r01.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s055_output/n100.r01.s055.reference.fas" "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" > "n100.r01.s055_output/n100.r01.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s055_output/n100.r01.s055.reference.fas" --call-indels "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" > "n100.r01.s055_output/n100.r01.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s055_output/n100.r01.s055.trimmed.sorted.bam" > "n100.r01.s055_output/n100.r01.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s055_output/n100.r01.s055.depth.txt" "n100.r01.s055_output/n100.r01.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s055_output/n100.r01.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s055_output/n100.r01.s055.reference.fas" | bcftools consensus -m "n100.r01.s055_output/n100.r01.s055.low_depth.tsv" tmp.vcf.gz > "n100.r01.s055_output/n100.r01.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:64b035a8f676b770feb1fe72328e3693e01304ff0749366b61f8c9c0d7cca39f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.7MiB max=128.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 13:59:34 scheduler task 4ef8dbcf (flow f8ff2c9d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s055.tar.gz resources {}
2021/07/08 13:59:34  ->  n100.r01.s055.Main.cp_out_file f8ff2c9d exec extern s3://niema-test/n100/r01/n100.r01.s055.tar.gz 35.8MiB
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): promoting objects (try 0): started
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): retrieving diagnostic output (try 0): started
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): promoting objects (try 0): started
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): promoting objects (try 0): started
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:35 scheduler task 3902907d (flow bd77987c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b5f40b7ff67f3a2b1c8c4b212dda8e7a931b2661362884083d16340a4998612d -> s3://niema-test/n100/r01/n100.r01.s020.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:35  <-  n100.r01.s020.Main.cp_out_file bd77987c ok   extern 0s 35.8MiB
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): retrieving result (try 0): started
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): retrieving diagnostic output (try 0): started
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): retrieving diagnostic output (try 0): started
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): transferring output (try 0): started
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): retrieving result (try 0): started
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloading (try 0): started
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloading list<val<.=0bbaf278 35.7MiB> 35.7MiB>
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloading val<.=6d63a58a 35.4MiB>
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloading val<.=57dbfcd8 35.4MiB>
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): retrieving result (try 0): started
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): transferring output (try 0): started
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloaded list<val<.=0bbaf278 35.7MiB> 35.7MiB>
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloaded val<.=57dbfcd8 35.4MiB>
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloaded val<.=6d63a58a 35.4MiB>
2021/07/08 13:59:35 scheduler task 08e2a9ed (flow 1d467a73): unloading (try 0): successful, next state: complete
2021/07/08 13:59:35  <-  n100.r01.s035.Main.out_file 1d467a73 ok     exec 5m4s 35.7MiB
2021/07/08 13:59:35 n100.r01.s035.Main.out_file 1d467a73 n100/r01/n100.r01.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:604b562224342b7c83fe3e9f2989d54dabbf864530196adae322360045897f0c
	sha256:1d467a73b9cf5c8eb147c70ab2e96e1cb8d95007304adeb2ecc1f80505667632
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/08e2a9edca69ddae770468fbd78241c8d71327eb1af05a10e56d4bbe12d77180
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s035_output"
	    wget -O "n100.r01.s035_output/n100.r01.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s035_output/n100.r01.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s035_output/n100.r01.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s035_output/n100.r01.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s035_output/n100.r01.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s035_output/n100.r01.s035.reference.fas" "n100.r01.s035_output/n100.r01.s035.fq1.fastq" "n100.r01.s035_output/n100.r01.s035.fq2.fastq" | samtools view -bS - > "n100.r01.s035_output/n100.r01.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s035_output/n100.r01.s035.untrimmed.sorted.bam" "n100.r01.s035_output/n100.r01.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s035_output/n100.r01.s035.untrimmed.sorted.bam" -b "n100.r01.s035_output/n100.r01.s035.primers.bed" -p "n100.r01.s035_output/n100.r01.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" "n100.r01.s035_output/n100.r01.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s035_output/n100.r01.s035.reference.fas" "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" > "n100.r01.s035_output/n100.r01.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s035_output/n100.r01.s035.reference.fas" --call-indels "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" > "n100.r01.s035_output/n100.r01.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s035_output/n100.r01.s035.trimmed.sorted.bam" > "n100.r01.s035_output/n100.r01.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s035_output/n100.r01.s035.depth.txt" "n100.r01.s035_output/n100.r01.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s035_output/n100.r01.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s035_output/n100.r01.s035.reference.fas" | bcftools consensus -m "n100.r01.s035_output/n100.r01.s035.low_depth.tsv" tmp.vcf.gz > "n100.r01.s035_output/n100.r01.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0bbaf2786fccfb42c90168066d3f088481c545acbb97405feb56f3b60d9e20b3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.0MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=694B max=3.1KiB
2021/07/08 13:59:35 scheduler task 57fb44b2 (flow 99c3c961): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s035.tar.gz resources {}
2021/07/08 13:59:35  ->  n100.r01.s035.Main.cp_out_file 99c3c961 exec extern s3://niema-test/n100/r01/n100.r01.s035.tar.gz 35.7MiB
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): transferring output (try 0): started
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): promoting objects (try 0): started
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): retrieving diagnostic output (try 0): started
2021/07/08 13:59:35 scheduler task 4ef8dbcf (flow f8ff2c9d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:64b035a8f676b770feb1fe72328e3693e01304ff0749366b61f8c9c0d7cca39f -> s3://niema-test/n100/r01/n100.r01.s055.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:35  <-  n100.r01.s055.Main.cp_out_file f8ff2c9d ok   extern 0s 35.8MiB
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): retrieving result (try 0): started
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:35 scheduler task 01abb7a8 (flow 25d9ffab): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f1901752807705a22242d2ca095fcb7afdc127824c787f96313d96ae527bef71 -> s3://niema-test/n100/r01/n100.r01.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:35  <-  n100.r01.s072.Main.cp_out_file 25d9ffab ok   extern 0s 35.7MiB
2021/07/08 13:59:35 scheduler task ce295c92 (flow 4cdb8625): transferring output (try 0): started
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloading (try 0): started
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloading list<val<.=459ae086 35.8MiB> 35.8MiB>
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloading val<.=589b40db 35.4MiB>
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloading val<.=7cb9e158 35.4MiB>
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloaded list<val<.=459ae086 35.8MiB> 35.8MiB>
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloaded val<.=589b40db 35.4MiB>
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloaded val<.=7cb9e158 35.4MiB>
2021/07/08 13:59:35 scheduler task c5194497 (flow bb46d7da): unloading (try 0): successful, next state: complete
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:35  <-  n100.r01.s028.Main.out_file bb46d7da ok     exec 5m5s 35.8MiB
2021/07/08 13:59:35 n100.r01.s028.Main.out_file bb46d7da n100/r01/n100.r01.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b92c846ee4b1eab6ce150e9f5ae3a8c1319dee7fdb05e4d2126a35d2d79af0ee
	sha256:bb46d7da12347fd88311c823e0cc6469d6f0cfad697e21ecd099823ab17cd6a8
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c519449794cfdae964dd2345413ecd3df9e3883131295d30f8c80a969713eaa8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s028_output"
	    wget -O "n100.r01.s028_output/n100.r01.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s028_output/n100.r01.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s028_output/n100.r01.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s028_output/n100.r01.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s028_output/n100.r01.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s028_output/n100.r01.s028.reference.fas" "n100.r01.s028_output/n100.r01.s028.fq1.fastq" "n100.r01.s028_output/n100.r01.s028.fq2.fastq" | samtools view -bS - > "n100.r01.s028_output/n100.r01.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s028_output/n100.r01.s028.untrimmed.sorted.bam" "n100.r01.s028_output/n100.r01.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s028_output/n100.r01.s028.untrimmed.sorted.bam" -b "n100.r01.s028_output/n100.r01.s028.primers.bed" -p "n100.r01.s028_output/n100.r01.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" "n100.r01.s028_output/n100.r01.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s028_output/n100.r01.s028.reference.fas" "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" > "n100.r01.s028_output/n100.r01.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s028_output/n100.r01.s028.reference.fas" --call-indels "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" > "n100.r01.s028_output/n100.r01.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s028_output/n100.r01.s028.trimmed.sorted.bam" > "n100.r01.s028_output/n100.r01.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s028_output/n100.r01.s028.depth.txt" "n100.r01.s028_output/n100.r01.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s028_output/n100.r01.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s028_output/n100.r01.s028.reference.fas" | bcftools consensus -m "n100.r01.s028_output/n100.r01.s028.low_depth.tsv" tmp.vcf.gz > "n100.r01.s028_output/n100.r01.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:459ae0863388418218f266f5487892e08a3d9115b0caf47137aea1f443a6306a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.1MiB max=126.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 13:59:35 scheduler task a878e3f6 (flow aca6d511): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s028.tar.gz resources {}
2021/07/08 13:59:35  ->  n100.r01.s028.Main.cp_out_file aca6d511 exec extern s3://niema-test/n100/r01/n100.r01.s028.tar.gz 35.8MiB
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): unloading (try 0): started
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): unloading list<val<.=30c779cc 35.7MiB> 35.7MiB>
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): unloading val<.=511cfbf2 35.4MiB>
2021/07/08 13:59:35 scheduler task 6e4fdc45 (flow fcf02ceb): unloading val<.=2c3046e0 35.4MiB>
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): unloading (try 0): started
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): unloading list<val<.=42486696 35.7MiB> 35.7MiB>
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): unloading val<.=17aa2391 35.4MiB>
2021/07/08 13:59:35 scheduler task cd8b0435 (flow 831ed94c): unloading val<.=0d75a8b5 35.4MiB>
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): promoting objects (try 0): started
2021/07/08 13:59:36 scheduler task 6e4fdc45 (flow fcf02ceb): unloaded list<val<.=30c779cc 35.7MiB> 35.7MiB>
2021/07/08 13:59:36 scheduler task 6e4fdc45 (flow fcf02ceb): unloaded val<.=2c3046e0 35.4MiB>
2021/07/08 13:59:36 scheduler task 6e4fdc45 (flow fcf02ceb): unloaded val<.=511cfbf2 35.4MiB>
2021/07/08 13:59:36 scheduler task 6e4fdc45 (flow fcf02ceb): unloading (try 0): successful, next state: complete
2021/07/08 13:59:36  <-  n100.r01.s094.Main.out_file fcf02ceb ok     exec 4m57s 35.7MiB
2021/07/08 13:59:36 n100.r01.s094.Main.out_file fcf02ceb n100/r01/n100.r01.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e590f9ad21579c3e37f7882e20bbba439d38bf2fe60aa8cb83fd848fbb652f01
	sha256:fcf02cebde522cc80b648933a7c59d2485196ca798974ce8561e891bb463a8f3
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6e4fdc45dece42f9ecc212d2bf04d5f7f1303017b324b90078b24946646c434c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s094_output"
	    wget -O "n100.r01.s094_output/n100.r01.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s094_output/n100.r01.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s094_output/n100.r01.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s094_output/n100.r01.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s094_output/n100.r01.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s094_output/n100.r01.s094.reference.fas" "n100.r01.s094_output/n100.r01.s094.fq1.fastq" "n100.r01.s094_output/n100.r01.s094.fq2.fastq" | samtools view -bS - > "n100.r01.s094_output/n100.r01.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s094_output/n100.r01.s094.untrimmed.sorted.bam" "n100.r01.s094_output/n100.r01.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s094_output/n100.r01.s094.untrimmed.sorted.bam" -b "n100.r01.s094_output/n100.r01.s094.primers.bed" -p "n100.r01.s094_output/n100.r01.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" "n100.r01.s094_output/n100.r01.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s094_output/n100.r01.s094.reference.fas" "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" > "n100.r01.s094_output/n100.r01.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s094_output/n100.r01.s094.reference.fas" --call-indels "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" > "n100.r01.s094_output/n100.r01.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s094_output/n100.r01.s094.trimmed.sorted.bam" > "n100.r01.s094_output/n100.r01.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s094_output/n100.r01.s094.depth.txt" "n100.r01.s094_output/n100.r01.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s094_output/n100.r01.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s094_output/n100.r01.s094.reference.fas" | bcftools consensus -m "n100.r01.s094_output/n100.r01.s094.low_depth.tsv" tmp.vcf.gz > "n100.r01.s094_output/n100.r01.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:30c779ccfd3b508ccfa288008bc94519345bb38ca227c652a6e35be7a8e2bc64 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:36 scheduler task ca1f9253 (flow e610a8a6): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s094.tar.gz resources {}
2021/07/08 13:59:36  ->  n100.r01.s094.Main.cp_out_file e610a8a6 exec extern s3://niema-test/n100/r01/n100.r01.s094.tar.gz 35.7MiB
2021/07/08 13:59:36 scheduler task cd8b0435 (flow 831ed94c): unloaded val<.=17aa2391 35.4MiB>
2021/07/08 13:59:36 scheduler task cd8b0435 (flow 831ed94c): unloaded list<val<.=42486696 35.7MiB> 35.7MiB>
2021/07/08 13:59:36 scheduler task cd8b0435 (flow 831ed94c): unloaded val<.=0d75a8b5 35.4MiB>
2021/07/08 13:59:36 scheduler task cd8b0435 (flow 831ed94c): unloading (try 0): successful, next state: complete
2021/07/08 13:59:36  <-  n100.r01.s093.Main.out_file 831ed94c ok     exec 4m57s 35.7MiB
2021/07/08 13:59:36 n100.r01.s093.Main.out_file 831ed94c n100/r01/n100.r01.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dd4958faf7f678de67940f813a153f9c5d16470ad6bd6fd1f26e3229654ae683
	sha256:831ed94cb4fdaf97ce67c399e5c2600684eec95781f2ba47d3ca6b6dc3c1048f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cd8b0435364d8445e20e922074b6f27eb1809e47a3776c89e5266314410f63a1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s093_output"
	    wget -O "n100.r01.s093_output/n100.r01.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s093_output/n100.r01.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s093_output/n100.r01.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s093_output/n100.r01.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s093_output/n100.r01.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s093_output/n100.r01.s093.reference.fas" "n100.r01.s093_output/n100.r01.s093.fq1.fastq" "n100.r01.s093_output/n100.r01.s093.fq2.fastq" | samtools view -bS - > "n100.r01.s093_output/n100.r01.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s093_output/n100.r01.s093.untrimmed.sorted.bam" "n100.r01.s093_output/n100.r01.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s093_output/n100.r01.s093.untrimmed.sorted.bam" -b "n100.r01.s093_output/n100.r01.s093.primers.bed" -p "n100.r01.s093_output/n100.r01.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" "n100.r01.s093_output/n100.r01.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s093_output/n100.r01.s093.reference.fas" "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" > "n100.r01.s093_output/n100.r01.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s093_output/n100.r01.s093.reference.fas" --call-indels "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" > "n100.r01.s093_output/n100.r01.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s093_output/n100.r01.s093.trimmed.sorted.bam" > "n100.r01.s093_output/n100.r01.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s093_output/n100.r01.s093.depth.txt" "n100.r01.s093_output/n100.r01.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s093_output/n100.r01.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s093_output/n100.r01.s093.reference.fas" | bcftools consensus -m "n100.r01.s093_output/n100.r01.s093.low_depth.tsv" tmp.vcf.gz > "n100.r01.s093_output/n100.r01.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4248669642745487b63930b89095848726292570ccce14d32d69c4a6fcc8e5c5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=131.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:36 scheduler task 003b85a5 (flow 765b7ad6): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s093.tar.gz resources {}
2021/07/08 13:59:36  ->  n100.r01.s093.Main.cp_out_file 765b7ad6 exec extern s3://niema-test/n100/r01/n100.r01.s093.tar.gz 35.7MiB
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): retrieving diagnostic output (try 0): started
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): retrieving result (try 0): started
2021/07/08 13:59:36 scheduler task 57fb44b2 (flow 99c3c961): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0bbaf2786fccfb42c90168066d3f088481c545acbb97405feb56f3b60d9e20b3 -> s3://niema-test/n100/r01/n100.r01.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:36  <-  n100.r01.s035.Main.cp_out_file 99c3c961 ok   extern 0s 35.7MiB
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): promoting objects (try 0): started
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): transferring output (try 0): started
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): promoting objects (try 0): started
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): retrieving diagnostic output (try 0): started
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloading (try 0): started
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloading list<val<.=f7fce254 35.8MiB> 35.8MiB>
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloading val<.=be6f03d7 35.4MiB>
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloading val<.=ee4956a9 35.4MiB>
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): retrieving diagnostic output (try 0): started
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): retrieving result (try 0): started
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloaded val<.=be6f03d7 35.4MiB>
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloaded list<val<.=f7fce254 35.8MiB> 35.8MiB>
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloaded val<.=ee4956a9 35.4MiB>
2021/07/08 13:59:36 scheduler task ce295c92 (flow 4cdb8625): unloading (try 0): successful, next state: complete
2021/07/08 13:59:36  <-  n100.r01.s004.Main.out_file 4cdb8625 ok     exec 5m5s 35.8MiB
2021/07/08 13:59:36 n100.r01.s004.Main.out_file 4cdb8625 n100/r01/n100.r01.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:074c6f2a1b3cce585c89702179f7a5d54ce87f4126fb07c6a1257cea59350cc9
	sha256:4cdb86258ea57d69cafdb113ccdbe4d01be909b0e0d03e9a75b5576b5a7a4863
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ce295c9235cc8517e7eb76b2af68aea2096db03a565f02d2db16709f229b2360
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s004_output"
	    wget -O "n100.r01.s004_output/n100.r01.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s004_output/n100.r01.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s004_output/n100.r01.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s004_output/n100.r01.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s004_output/n100.r01.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s004_output/n100.r01.s004.reference.fas" "n100.r01.s004_output/n100.r01.s004.fq1.fastq" "n100.r01.s004_output/n100.r01.s004.fq2.fastq" | samtools view -bS - > "n100.r01.s004_output/n100.r01.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s004_output/n100.r01.s004.untrimmed.sorted.bam" "n100.r01.s004_output/n100.r01.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s004_output/n100.r01.s004.untrimmed.sorted.bam" -b "n100.r01.s004_output/n100.r01.s004.primers.bed" -p "n100.r01.s004_output/n100.r01.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" "n100.r01.s004_output/n100.r01.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s004_output/n100.r01.s004.reference.fas" "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" > "n100.r01.s004_output/n100.r01.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s004_output/n100.r01.s004.reference.fas" --call-indels "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" > "n100.r01.s004_output/n100.r01.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s004_output/n100.r01.s004.trimmed.sorted.bam" > "n100.r01.s004_output/n100.r01.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s004_output/n100.r01.s004.depth.txt" "n100.r01.s004_output/n100.r01.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s004_output/n100.r01.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s004_output/n100.r01.s004.reference.fas" | bcftools consensus -m "n100.r01.s004_output/n100.r01.s004.low_depth.tsv" tmp.vcf.gz > "n100.r01.s004_output/n100.r01.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f7fce2548278151f556a96d8165d4d148ecb1311a8b86a8551b68bd0d2bf8c63 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.2MiB max=131.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=700B max=3.1KiB
2021/07/08 13:59:36 scheduler task 4237178d (flow baa710c8): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s004.tar.gz resources {}
2021/07/08 13:59:36  ->  n100.r01.s004.Main.cp_out_file baa710c8 exec extern s3://niema-test/n100/r01/n100.r01.s004.tar.gz 35.8MiB
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): retrieving result (try 0): started
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:36 scheduler task a7bf4b87 (flow 6ea478fe): transferring output (try 0): started
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:36 scheduler task d58dd643 (flow 6d1f26d4): transferring output (try 0): started
2021/07/08 13:59:36 scheduler task a878e3f6 (flow aca6d511): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:459ae0863388418218f266f5487892e08a3d9115b0caf47137aea1f443a6306a -> s3://niema-test/n100/r01/n100.r01.s028.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:36  <-  n100.r01.s028.Main.cp_out_file aca6d511 ok   extern 0s 35.8MiB
2021/07/08 13:59:36 scheduler task 003b85a5 (flow 765b7ad6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4248669642745487b63930b89095848726292570ccce14d32d69c4a6fcc8e5c5 -> s3://niema-test/n100/r01/n100.r01.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:36  <-  n100.r01.s093.Main.cp_out_file 765b7ad6 ok   extern 0s 35.7MiB
2021/07/08 13:59:36 scheduler task ca1f9253 (flow e610a8a6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:30c779ccfd3b508ccfa288008bc94519345bb38ca227c652a6e35be7a8e2bc64 -> s3://niema-test/n100/r01/n100.r01.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:36  <-  n100.r01.s094.Main.cp_out_file e610a8a6 ok   extern 0s 35.7MiB
2021/07/08 13:59:36 scheduler task 6ec2dcb3 (flow e856bd44): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:36 scheduler task 9ad01cec (flow 6dee772b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:36 scheduler task 6ec2dcb3 (flow e856bd44): promoting objects (try 0): started
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloading (try 0): started
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloading list<val<.=a31f667a 35.8MiB> 35.8MiB>
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloading val<.=6e6e35c3 35.4MiB>
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloading val<.=0c5d5bfa 35.4MiB>
2021/07/08 13:59:36 scheduler task 9ad01cec (flow 6dee772b): promoting objects (try 0): started
2021/07/08 13:59:36 scheduler task 6ec2dcb3 (flow e856bd44): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloaded list<val<.=a31f667a 35.8MiB> 35.8MiB>
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloaded val<.=6e6e35c3 35.4MiB>
2021/07/08 13:59:36 scheduler task 6ec2dcb3 (flow e856bd44): retrieving diagnostic output (try 0): started
2021/07/08 13:59:36 scheduler task 9ad01cec (flow 6dee772b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloaded val<.=0c5d5bfa 35.4MiB>
2021/07/08 13:59:36 scheduler task 2cd9def4 (flow fea6d9e1): unloading (try 0): successful, next state: complete
2021/07/08 13:59:36 scheduler task 9ad01cec (flow 6dee772b): retrieving diagnostic output (try 0): started
2021/07/08 13:59:36  <-  n100.r01.s038.Main.out_file fea6d9e1 ok     exec 4m58s 35.8MiB
2021/07/08 13:59:36 n100.r01.s038.Main.out_file fea6d9e1 n100/r01/n100.r01.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b6cd94ba171c898925f4d6cde8a7a0ccfad017a8df2d5511c67c36e9f15cdc3f
	sha256:fea6d9e1c59f83c1f159bafde7d7dee4b1b6046f7125d66c7f0e754330f22719
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cd9def439ec6e33fd91397368e51fedd1630ce469c837f76db0c8e1ef494164
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s038_output"
	    wget -O "n100.r01.s038_output/n100.r01.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s038_output/n100.r01.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s038_output/n100.r01.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s038_output/n100.r01.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s038_output/n100.r01.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s038_output/n100.r01.s038.reference.fas" "n100.r01.s038_output/n100.r01.s038.fq1.fastq" "n100.r01.s038_output/n100.r01.s038.fq2.fastq" | samtools view -bS - > "n100.r01.s038_output/n100.r01.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s038_output/n100.r01.s038.untrimmed.sorted.bam" "n100.r01.s038_output/n100.r01.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s038_output/n100.r01.s038.untrimmed.sorted.bam" -b "n100.r01.s038_output/n100.r01.s038.primers.bed" -p "n100.r01.s038_output/n100.r01.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" "n100.r01.s038_output/n100.r01.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s038_output/n100.r01.s038.reference.fas" "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" > "n100.r01.s038_output/n100.r01.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s038_output/n100.r01.s038.reference.fas" --call-indels "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" > "n100.r01.s038_output/n100.r01.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s038_output/n100.r01.s038.trimmed.sorted.bam" > "n100.r01.s038_output/n100.r01.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s038_output/n100.r01.s038.depth.txt" "n100.r01.s038_output/n100.r01.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s038_output/n100.r01.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s038_output/n100.r01.s038.reference.fas" | bcftools consensus -m "n100.r01.s038_output/n100.r01.s038.low_depth.tsv" tmp.vcf.gz > "n100.r01.s038_output/n100.r01.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a31f667a00fc1dc39f8eb44ad81f4d8092bba73203f592751481308f5bdbef81 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=128.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 13:59:36 scheduler task 1ba2c39f (flow 048e49af): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s038.tar.gz resources {}
2021/07/08 13:59:36  ->  n100.r01.s038.Main.cp_out_file 048e49af exec extern s3://niema-test/n100/r01/n100.r01.s038.tar.gz 35.8MiB
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): retrieving result (try 0): started
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): retrieving result (try 0): started
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloading (try 0): started
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloading list<val<.=706db2ec 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloading val<.=2148072c 35.4MiB>
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloading val<.=763525c2 35.4MiB>
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): transferring output (try 0): started
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): transferring output (try 0): started
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): promoting objects (try 0): started
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloaded list<val<.=706db2ec 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloaded val<.=763525c2 35.4MiB>
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloaded val<.=2148072c 35.4MiB>
2021/07/08 13:59:37 scheduler task a7bf4b87 (flow 6ea478fe): unloading (try 0): successful, next state: complete
2021/07/08 13:59:37  <-  n100.r01.s057.Main.out_file 6ea478fe ok     exec 4m58s 35.7MiB
2021/07/08 13:59:37 n100.r01.s057.Main.out_file 6ea478fe n100/r01/n100.r01.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:15d70f783a1660173115facadae64c4e87b9d4d206f1a1b40c3f6831094697be
	sha256:6ea478fe219c5f659f3cb1cb8fa897e52068d9870e206445d789b6943d553fce
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a7bf4b87047712e9d5e51305a1396d055090673516cb44f1a811ed1d17b6904c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s057_output"
	    wget -O "n100.r01.s057_output/n100.r01.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s057_output/n100.r01.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s057_output/n100.r01.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s057_output/n100.r01.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s057_output/n100.r01.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s057_output/n100.r01.s057.reference.fas" "n100.r01.s057_output/n100.r01.s057.fq1.fastq" "n100.r01.s057_output/n100.r01.s057.fq2.fastq" | samtools view -bS - > "n100.r01.s057_output/n100.r01.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s057_output/n100.r01.s057.untrimmed.sorted.bam" "n100.r01.s057_output/n100.r01.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s057_output/n100.r01.s057.untrimmed.sorted.bam" -b "n100.r01.s057_output/n100.r01.s057.primers.bed" -p "n100.r01.s057_output/n100.r01.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" "n100.r01.s057_output/n100.r01.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s057_output/n100.r01.s057.reference.fas" "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" > "n100.r01.s057_output/n100.r01.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s057_output/n100.r01.s057.reference.fas" --call-indels "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" > "n100.r01.s057_output/n100.r01.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s057_output/n100.r01.s057.trimmed.sorted.bam" > "n100.r01.s057_output/n100.r01.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s057_output/n100.r01.s057.depth.txt" "n100.r01.s057_output/n100.r01.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s057_output/n100.r01.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s057_output/n100.r01.s057.reference.fas" | bcftools consensus -m "n100.r01.s057_output/n100.r01.s057.low_depth.tsv" tmp.vcf.gz > "n100.r01.s057_output/n100.r01.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:706db2ec322a244a16a0310502c88dacab73fc0cf905f257be1cdd721933d0aa 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:37 scheduler task d2f7860d (flow d9de1811): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s057.tar.gz resources {}
2021/07/08 13:59:37  ->  n100.r01.s057.Main.cp_out_file d9de1811 exec extern s3://niema-test/n100/r01/n100.r01.s057.tar.gz 35.7MiB
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloading (try 0): started
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloading list<val<.=e2f685e1 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloading val<.=8b60bb97 35.4MiB>
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloading val<.=7f56bdbd 35.4MiB>
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): retrieving diagnostic output (try 0): started
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloaded val<.=7f56bdbd 35.4MiB>
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloaded list<val<.=e2f685e1 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloaded val<.=8b60bb97 35.4MiB>
2021/07/08 13:59:37 scheduler task d58dd643 (flow 6d1f26d4): unloading (try 0): successful, next state: complete
2021/07/08 13:59:37  <-  n100.r01.s003.Main.out_file 6d1f26d4 ok     exec 4m58s 35.7MiB
2021/07/08 13:59:37 n100.r01.s003.Main.out_file 6d1f26d4 n100/r01/n100.r01.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd039f51b6b34dd203b0d99c58576750d64f912378e5bc360ce47dc45af25a00
	sha256:6d1f26d4b9d3bfbba3c3a16d41321aaa7049e14135c230f4b25a78ad0c48f763
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d58dd643a52b457746717bc9ebafb9115faa404634f49466b319a05710e04198
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s003_output"
	    wget -O "n100.r01.s003_output/n100.r01.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s003_output/n100.r01.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s003_output/n100.r01.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s003_output/n100.r01.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s003_output/n100.r01.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s003_output/n100.r01.s003.reference.fas" "n100.r01.s003_output/n100.r01.s003.fq1.fastq" "n100.r01.s003_output/n100.r01.s003.fq2.fastq" | samtools view -bS - > "n100.r01.s003_output/n100.r01.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s003_output/n100.r01.s003.untrimmed.sorted.bam" "n100.r01.s003_output/n100.r01.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s003_output/n100.r01.s003.untrimmed.sorted.bam" -b "n100.r01.s003_output/n100.r01.s003.primers.bed" -p "n100.r01.s003_output/n100.r01.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" "n100.r01.s003_output/n100.r01.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s003_output/n100.r01.s003.reference.fas" "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" > "n100.r01.s003_output/n100.r01.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s003_output/n100.r01.s003.reference.fas" --call-indels "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" > "n100.r01.s003_output/n100.r01.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s003_output/n100.r01.s003.trimmed.sorted.bam" > "n100.r01.s003_output/n100.r01.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s003_output/n100.r01.s003.depth.txt" "n100.r01.s003_output/n100.r01.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s003_output/n100.r01.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s003_output/n100.r01.s003.reference.fas" | bcftools consensus -m "n100.r01.s003_output/n100.r01.s003.low_depth.tsv" tmp.vcf.gz > "n100.r01.s003_output/n100.r01.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e2f685e194734d3d9804280697de843545ae8705754538fcf46ad99c7eed0eeb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=126.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:37 scheduler task 993d87cd (flow fb23856b): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s003.tar.gz resources {}
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:37  ->  n100.r01.s003.Main.cp_out_file fb23856b exec extern s3://niema-test/n100/r01/n100.r01.s003.tar.gz 35.7MiB
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): retrieving result (try 0): started
2021/07/08 13:59:37 scheduler task 4237178d (flow baa710c8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f7fce2548278151f556a96d8165d4d148ecb1311a8b86a8551b68bd0d2bf8c63 -> s3://niema-test/n100/r01/n100.r01.s004.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:37  <-  n100.r01.s004.Main.cp_out_file baa710c8 ok   extern 0s 35.8MiB
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): promoting objects (try 0): started
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): promoting objects (try 0): started
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): transferring output (try 0): started
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): retrieving diagnostic output (try 0): started
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): retrieving diagnostic output (try 0): started
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): retrieving result (try 0): started
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): retrieving result (try 0): started
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloading (try 0): started
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloading list<val<.=4eaaae15 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloading val<.=244cda16 35.4MiB>
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloading val<.=16ad7fbc 35.4MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:37 scheduler task 1ba2c39f (flow 048e49af): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a31f667a00fc1dc39f8eb44ad81f4d8092bba73203f592751481308f5bdbef81 -> s3://niema-test/n100/r01/n100.r01.s038.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:37  <-  n100.r01.s038.Main.cp_out_file 048e49af ok   extern 0s 35.8MiB
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloading (try 0): started
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloading list<val<.=ea84e97b 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloading val<.=7fb76c16 35.4MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloading val<.=d3bbfd73 35.4MiB>
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:37 scheduler task 5ba3ce8d (flow e1b32ab1): transferring output (try 0): started
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloaded val<.=244cda16 35.4MiB>
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloaded val<.=16ad7fbc 35.4MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloaded val<.=d3bbfd73 35.4MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloaded val<.=7fb76c16 35.4MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloaded list<val<.=ea84e97b 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task 9ad01cec (flow 6dee772b): unloading (try 0): successful, next state: complete
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloaded list<val<.=4eaaae15 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task 6ec2dcb3 (flow e856bd44): unloading (try 0): successful, next state: complete
2021/07/08 13:59:37 scheduler task 788f7878 (flow eb24a0c4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:37 scheduler task 89fa88da (flow 6636d54a): transferring output (try 0): started
2021/07/08 13:59:37  <-  n100.r01.s033.Main.out_file 6dee772b ok     exec 4m58s 35.7MiB
2021/07/08 13:59:37 n100.r01.s033.Main.out_file 6dee772b n100/r01/n100.r01.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bbaa8b4d3d895a61f2325486bc08a059e32ffcc543b0437576f87c909881c67b
	sha256:6dee772b1dd7a591cfc828fca5021748efd48b0d73bc30ea6822a2d5ab598dbb
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9ad01cec3a5f785457bfc396dd9aa0bbab7435765ac1a462d585bfb3ae7bcadb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s033_output"
	    wget -O "n100.r01.s033_output/n100.r01.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s033_output/n100.r01.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s033_output/n100.r01.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s033_output/n100.r01.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s033_output/n100.r01.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s033_output/n100.r01.s033.reference.fas" "n100.r01.s033_output/n100.r01.s033.fq1.fastq" "n100.r01.s033_output/n100.r01.s033.fq2.fastq" | samtools view -bS - > "n100.r01.s033_output/n100.r01.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s033_output/n100.r01.s033.untrimmed.sorted.bam" "n100.r01.s033_output/n100.r01.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s033_output/n100.r01.s033.untrimmed.sorted.bam" -b "n100.r01.s033_output/n100.r01.s033.primers.bed" -p "n100.r01.s033_output/n100.r01.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" "n100.r01.s033_output/n100.r01.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s033_output/n100.r01.s033.reference.fas" "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" > "n100.r01.s033_output/n100.r01.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s033_output/n100.r01.s033.reference.fas" --call-indels "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" > "n100.r01.s033_output/n100.r01.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s033_output/n100.r01.s033.trimmed.sorted.bam" > "n100.r01.s033_output/n100.r01.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s033_output/n100.r01.s033.depth.txt" "n100.r01.s033_output/n100.r01.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s033_output/n100.r01.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s033_output/n100.r01.s033.reference.fas" | bcftools consensus -m "n100.r01.s033_output/n100.r01.s033.low_depth.tsv" tmp.vcf.gz > "n100.r01.s033_output/n100.r01.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ea84e97b216b6d0d015b2e3c05aebddfb0223c64430d1e096e319a234d7e4e2c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=127.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:37 scheduler task abe32444 (flow be701ad5): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s033.tar.gz resources {}
2021/07/08 13:59:37  ->  n100.r01.s033.Main.cp_out_file be701ad5 exec extern s3://niema-test/n100/r01/n100.r01.s033.tar.gz 35.7MiB
2021/07/08 13:59:37  <-  n100.r01.s043.Main.out_file e856bd44 ok     exec 4m58s 35.7MiB
2021/07/08 13:59:37 n100.r01.s043.Main.out_file e856bd44 n100/r01/n100.r01.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a393cd2df4fc625b6a7b73819a45c54a1b8b36477e9cf7f9c8b36fe2f188fa0a
	sha256:e856bd44ec27391eab13af0e7d727fd248c39c9edd5e83edde9e847f2b86d760
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ec2dcb3852da82a2fa7dd716135a919a9093ce021ad7a4c29834d3f6aa3532b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s043_output"
	    wget -O "n100.r01.s043_output/n100.r01.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s043_output/n100.r01.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s043_output/n100.r01.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s043_output/n100.r01.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s043_output/n100.r01.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s043_output/n100.r01.s043.reference.fas" "n100.r01.s043_output/n100.r01.s043.fq1.fastq" "n100.r01.s043_output/n100.r01.s043.fq2.fastq" | samtools view -bS - > "n100.r01.s043_output/n100.r01.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s043_output/n100.r01.s043.untrimmed.sorted.bam" "n100.r01.s043_output/n100.r01.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s043_output/n100.r01.s043.untrimmed.sorted.bam" -b "n100.r01.s043_output/n100.r01.s043.primers.bed" -p "n100.r01.s043_output/n100.r01.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" "n100.r01.s043_output/n100.r01.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s043_output/n100.r01.s043.reference.fas" "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" > "n100.r01.s043_output/n100.r01.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s043_output/n100.r01.s043.reference.fas" --call-indels "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" > "n100.r01.s043_output/n100.r01.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s043_output/n100.r01.s043.trimmed.sorted.bam" > "n100.r01.s043_output/n100.r01.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s043_output/n100.r01.s043.depth.txt" "n100.r01.s043_output/n100.r01.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s043_output/n100.r01.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s043_output/n100.r01.s043.reference.fas" | bcftools consensus -m "n100.r01.s043_output/n100.r01.s043.low_depth.tsv" tmp.vcf.gz > "n100.r01.s043_output/n100.r01.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4eaaae1574d36aa379b75ad6a0ed791dde601173e14f18a301658ed9130f4697 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.9MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:37 scheduler task aab64594 (flow 48f8cd54): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s043.tar.gz resources {}
2021/07/08 13:59:37  ->  n100.r01.s043.Main.cp_out_file 48f8cd54 exec extern s3://niema-test/n100/r01/n100.r01.s043.tar.gz 35.7MiB
2021/07/08 13:59:37 scheduler task 788f7878 (flow eb24a0c4): promoting objects (try 0): started
2021/07/08 13:59:37 scheduler task d2f7860d (flow d9de1811): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:706db2ec322a244a16a0310502c88dacab73fc0cf905f257be1cdd721933d0aa -> s3://niema-test/n100/r01/n100.r01.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:37  <-  n100.r01.s057.Main.cp_out_file d9de1811 ok   extern 0s 35.7MiB
2021/07/08 13:59:37 scheduler task 788f7878 (flow eb24a0c4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:37 scheduler task 788f7878 (flow eb24a0c4): retrieving diagnostic output (try 0): started
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): unloading (try 0): started
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): unloading list<val<.=3fc5a4af 35.7MiB> 35.7MiB>
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): unloading val<.=a607068f 35.4MiB>
2021/07/08 13:59:37 scheduler task bf4e2cad (flow 39634eeb): unloading val<.=dcba6b7f 35.4MiB>
2021/07/08 13:59:37 scheduler task 788f7878 (flow eb24a0c4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): retrieving result (try 0): started
2021/07/08 13:59:38 scheduler task bf4e2cad (flow 39634eeb): unloaded val<.=a607068f 35.4MiB>
2021/07/08 13:59:38 scheduler task bf4e2cad (flow 39634eeb): unloaded list<val<.=3fc5a4af 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task bf4e2cad (flow 39634eeb): unloaded val<.=dcba6b7f 35.4MiB>
2021/07/08 13:59:38 scheduler task bf4e2cad (flow 39634eeb): unloading (try 0): successful, next state: complete
2021/07/08 13:59:38  <-  n100.r01.s062.Main.out_file 39634eeb ok     exec 4m59s 35.7MiB
2021/07/08 13:59:38 n100.r01.s062.Main.out_file 39634eeb n100/r01/n100.r01.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f87988a5e66a8fbb69bc303506f4a5cb01b7a388b9f9960e1738dac2fd3d1e6b
	sha256:39634eeb44741c735f73874588c3a96d1286c9e684944dedf542fe13f1684bc5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bf4e2cad71a79a229514589e0d38329f3824f049a2e76891723798f040ca6e07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s062_output"
	    wget -O "n100.r01.s062_output/n100.r01.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s062_output/n100.r01.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s062_output/n100.r01.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s062_output/n100.r01.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s062_output/n100.r01.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s062_output/n100.r01.s062.reference.fas" "n100.r01.s062_output/n100.r01.s062.fq1.fastq" "n100.r01.s062_output/n100.r01.s062.fq2.fastq" | samtools view -bS - > "n100.r01.s062_output/n100.r01.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s062_output/n100.r01.s062.untrimmed.sorted.bam" "n100.r01.s062_output/n100.r01.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s062_output/n100.r01.s062.untrimmed.sorted.bam" -b "n100.r01.s062_output/n100.r01.s062.primers.bed" -p "n100.r01.s062_output/n100.r01.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" "n100.r01.s062_output/n100.r01.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s062_output/n100.r01.s062.reference.fas" "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" > "n100.r01.s062_output/n100.r01.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s062_output/n100.r01.s062.reference.fas" --call-indels "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" > "n100.r01.s062_output/n100.r01.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s062_output/n100.r01.s062.trimmed.sorted.bam" > "n100.r01.s062_output/n100.r01.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s062_output/n100.r01.s062.depth.txt" "n100.r01.s062_output/n100.r01.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s062_output/n100.r01.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s062_output/n100.r01.s062.reference.fas" | bcftools consensus -m "n100.r01.s062_output/n100.r01.s062.low_depth.tsv" tmp.vcf.gz > "n100.r01.s062_output/n100.r01.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3fc5a4afe7cadb132e1610bbea731503b48f354c07a1b1b1e5d5d8e1e1c06691 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:38 scheduler task f605e545 (flow fc88f669): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s062.tar.gz resources {}
2021/07/08 13:59:38  ->  n100.r01.s062.Main.cp_out_file fc88f669 exec extern s3://niema-test/n100/r01/n100.r01.s062.tar.gz 35.7MiB
2021/07/08 13:59:38 scheduler task 993d87cd (flow fb23856b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e2f685e194734d3d9804280697de843545ae8705754538fcf46ad99c7eed0eeb -> s3://niema-test/n100/r01/n100.r01.s003.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:38  <-  n100.r01.s003.Main.cp_out_file fb23856b ok   extern 0s 35.7MiB
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): transferring output (try 0): started
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloading (try 0): started
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloading list<val<.=ef9e8a0d 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloading val<.=96f693e3 35.4MiB>
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloading val<.=13e59db7 35.4MiB>
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloaded list<val<.=ef9e8a0d 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloaded val<.=13e59db7 35.4MiB>
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloaded val<.=96f693e3 35.4MiB>
2021/07/08 13:59:38 scheduler task 5ba3ce8d (flow e1b32ab1): unloading (try 0): successful, next state: complete
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:38  <-  n100.r01.s016.Main.out_file e1b32ab1 ok     exec 4m59s 35.7MiB
2021/07/08 13:59:38 n100.r01.s016.Main.out_file e1b32ab1 n100/r01/n100.r01.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9ce42d19886c626d57c7e522b6f8ee985d59798a02e52d149fcf54642d0562e9
	sha256:e1b32ab1edbe7e71ca326150f2cf4760b6d2c9cb0a60e412d9ec40feeb7b088d
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ba3ce8d46b1662307070328ba7257fa0834871c611645e5b42aa2145c378226
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s016_output"
	    wget -O "n100.r01.s016_output/n100.r01.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s016_output/n100.r01.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s016_output/n100.r01.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s016_output/n100.r01.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s016_output/n100.r01.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s016_output/n100.r01.s016.reference.fas" "n100.r01.s016_output/n100.r01.s016.fq1.fastq" "n100.r01.s016_output/n100.r01.s016.fq2.fastq" | samtools view -bS - > "n100.r01.s016_output/n100.r01.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s016_output/n100.r01.s016.untrimmed.sorted.bam" "n100.r01.s016_output/n100.r01.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s016_output/n100.r01.s016.untrimmed.sorted.bam" -b "n100.r01.s016_output/n100.r01.s016.primers.bed" -p "n100.r01.s016_output/n100.r01.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" "n100.r01.s016_output/n100.r01.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s016_output/n100.r01.s016.reference.fas" "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" > "n100.r01.s016_output/n100.r01.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s016_output/n100.r01.s016.reference.fas" --call-indels "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" > "n100.r01.s016_output/n100.r01.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s016_output/n100.r01.s016.trimmed.sorted.bam" > "n100.r01.s016_output/n100.r01.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s016_output/n100.r01.s016.depth.txt" "n100.r01.s016_output/n100.r01.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s016_output/n100.r01.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s016_output/n100.r01.s016.reference.fas" | bcftools consensus -m "n100.r01.s016_output/n100.r01.s016.low_depth.tsv" tmp.vcf.gz > "n100.r01.s016_output/n100.r01.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ef9e8a0dc6f549385b56d291c150119325bf00925ca761ed7e40ba7ffcde3c57 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=128.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:38 scheduler task 398e3811 (flow 64a8bf58): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s016.tar.gz resources {}
2021/07/08 13:59:38  ->  n100.r01.s016.Main.cp_out_file 64a8bf58 exec extern s3://niema-test/n100/r01/n100.r01.s016.tar.gz 35.7MiB
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloading (try 0): started
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloading list<val<.=91ffa44b 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloading val<.=f28d994f 35.4MiB>
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloading val<.=feecab12 35.4MiB>
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloaded val<.=feecab12 35.4MiB>
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloaded val<.=f28d994f 35.4MiB>
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloaded list<val<.=91ffa44b 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task 89fa88da (flow 6636d54a): unloading (try 0): successful, next state: complete
2021/07/08 13:59:38  <-  n100.r01.s066.Main.out_file 6636d54a ok     exec 4m58s 35.7MiB
2021/07/08 13:59:38 n100.r01.s066.Main.out_file 6636d54a n100/r01/n100.r01.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d45ed42a7733454a176f283a98821310f16f3602fb6af7fea780163021a38fec
	sha256:6636d54a96aa7648e4ace196be3b23441e9c706caf2e29c034f36ce65e70c70c
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/89fa88da8dca41ef5fe31a01d1275fa62e494423b27c2600553395727f6d1899
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s066_output"
	    wget -O "n100.r01.s066_output/n100.r01.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s066_output/n100.r01.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s066_output/n100.r01.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s066_output/n100.r01.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s066_output/n100.r01.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s066_output/n100.r01.s066.reference.fas" "n100.r01.s066_output/n100.r01.s066.fq1.fastq" "n100.r01.s066_output/n100.r01.s066.fq2.fastq" | samtools view -bS - > "n100.r01.s066_output/n100.r01.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s066_output/n100.r01.s066.untrimmed.sorted.bam" "n100.r01.s066_output/n100.r01.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s066_output/n100.r01.s066.untrimmed.sorted.bam" -b "n100.r01.s066_output/n100.r01.s066.primers.bed" -p "n100.r01.s066_output/n100.r01.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" "n100.r01.s066_output/n100.r01.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s066_output/n100.r01.s066.reference.fas" "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" > "n100.r01.s066_output/n100.r01.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s066_output/n100.r01.s066.reference.fas" --call-indels "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" > "n100.r01.s066_output/n100.r01.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s066_output/n100.r01.s066.trimmed.sorted.bam" > "n100.r01.s066_output/n100.r01.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s066_output/n100.r01.s066.depth.txt" "n100.r01.s066_output/n100.r01.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s066_output/n100.r01.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s066_output/n100.r01.s066.reference.fas" | bcftools consensus -m "n100.r01.s066_output/n100.r01.s066.low_depth.tsv" tmp.vcf.gz > "n100.r01.s066_output/n100.r01.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:91ffa44b0932a7911f64680c50cef6018e3865e503383bdd13c70f623ca1256b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=126.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:38 scheduler task d8cdec7e (flow aa6f9c7a): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s066.tar.gz resources {}
2021/07/08 13:59:38  ->  n100.r01.s066.Main.cp_out_file aa6f9c7a exec extern s3://niema-test/n100/r01/n100.r01.s066.tar.gz 35.7MiB
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): promoting objects (try 0): started
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): retrieving diagnostic output (try 0): started
2021/07/08 13:59:38 scheduler task abe32444 (flow be701ad5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ea84e97b216b6d0d015b2e3c05aebddfb0223c64430d1e096e319a234d7e4e2c -> s3://niema-test/n100/r01/n100.r01.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:38  <-  n100.r01.s033.Main.cp_out_file be701ad5 ok   extern 0s 35.7MiB
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): retrieving result (try 0): started
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): promoting objects (try 0): started
2021/07/08 13:59:38 scheduler task f605e545 (flow fc88f669): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3fc5a4afe7cadb132e1610bbea731503b48f354c07a1b1b1e5d5d8e1e1c06691 -> s3://niema-test/n100/r01/n100.r01.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:38  <-  n100.r01.s062.Main.cp_out_file fc88f669 ok   extern 0s 35.7MiB
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:38 scheduler task 0fea5d54 (flow 44ac81a2): transferring output (try 0): started
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloading (try 0): started
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloading list<val<.=7ed3faae 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloading val<.=49d72b69 35.4MiB>
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloading val<.=fa05ab7d 35.4MiB>
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): retrieving diagnostic output (try 0): started
2021/07/08 13:59:38 scheduler task 47b72df9 (flow ada3a42a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:38 scheduler task 47b72df9 (flow ada3a42a): promoting objects (try 0): started
2021/07/08 13:59:38 scheduler task aab64594 (flow 48f8cd54): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4eaaae1574d36aa379b75ad6a0ed791dde601173e14f18a301658ed9130f4697 -> s3://niema-test/n100/r01/n100.r01.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:38  <-  n100.r01.s043.Main.cp_out_file 48f8cd54 ok   extern 0s 35.7MiB
2021/07/08 13:59:38 scheduler task d6c86c87 (flow 6138a66a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:38 scheduler task d6c86c87 (flow 6138a66a): promoting objects (try 0): started
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloaded val<.=49d72b69 35.4MiB>
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloaded list<val<.=7ed3faae 35.7MiB> 35.7MiB>
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloaded val<.=fa05ab7d 35.4MiB>
2021/07/08 13:59:38 scheduler task 788f7878 (flow eb24a0c4): unloading (try 0): successful, next state: complete
2021/07/08 13:59:38  <-  n100.r01.s075.Main.out_file eb24a0c4 ok     exec 4m59s 35.7MiB
2021/07/08 13:59:38 n100.r01.s075.Main.out_file eb24a0c4 n100/r01/n100.r01.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5e90749171f27c6c7e8fa9572a7198aa60e24150feaf1a7bfe0bdafa3324f4f6
	sha256:eb24a0c46c0b717e1998faa7a37700aca668106927a3a973e09e652eeaad5a8f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/788f7878317089e7bbdad8b8c9f7f5b606043de179f14eb2cbda9e15daa221cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s075_output"
	    wget -O "n100.r01.s075_output/n100.r01.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s075_output/n100.r01.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s075_output/n100.r01.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s075_output/n100.r01.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s075_output/n100.r01.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s075_output/n100.r01.s075.reference.fas" "n100.r01.s075_output/n100.r01.s075.fq1.fastq" "n100.r01.s075_output/n100.r01.s075.fq2.fastq" | samtools view -bS - > "n100.r01.s075_output/n100.r01.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s075_output/n100.r01.s075.untrimmed.sorted.bam" "n100.r01.s075_output/n100.r01.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s075_output/n100.r01.s075.untrimmed.sorted.bam" -b "n100.r01.s075_output/n100.r01.s075.primers.bed" -p "n100.r01.s075_output/n100.r01.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" "n100.r01.s075_output/n100.r01.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s075_output/n100.r01.s075.reference.fas" "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" > "n100.r01.s075_output/n100.r01.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s075_output/n100.r01.s075.reference.fas" --call-indels "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" > "n100.r01.s075_output/n100.r01.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s075_output/n100.r01.s075.trimmed.sorted.bam" > "n100.r01.s075_output/n100.r01.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s075_output/n100.r01.s075.depth.txt" "n100.r01.s075_output/n100.r01.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s075_output/n100.r01.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s075_output/n100.r01.s075.reference.fas" | bcftools consensus -m "n100.r01.s075_output/n100.r01.s075.low_depth.tsv" tmp.vcf.gz > "n100.r01.s075_output/n100.r01.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7ed3faaeb723ac348e7a1035fe98031dfba7109f5628ff28307131470c045e3c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 13:59:38 scheduler task 6653fcd8 (flow 2ea881a0): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s075.tar.gz resources {}
2021/07/08 13:59:38  ->  n100.r01.s075.Main.cp_out_file 2ea881a0 exec extern s3://niema-test/n100/r01/n100.r01.s075.tar.gz 35.7MiB
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:38 scheduler task 47b72df9 (flow ada3a42a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): retrieving result (try 0): started
2021/07/08 13:59:38 scheduler task 47b72df9 (flow ada3a42a): retrieving diagnostic output (try 0): started
2021/07/08 13:59:38 scheduler task d6c86c87 (flow 6138a66a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:38 scheduler task d6c86c87 (flow 6138a66a): retrieving diagnostic output (try 0): started
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:38 scheduler task 47b72df9 (flow ada3a42a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:38 scheduler task b25ce208 (flow f21eee98): transferring output (try 0): started
2021/07/08 13:59:38 scheduler task 47b72df9 (flow ada3a42a): retrieving result (try 0): started
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:39 scheduler task 398e3811 (flow 64a8bf58): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ef9e8a0dc6f549385b56d291c150119325bf00925ca761ed7e40ba7ffcde3c57 -> s3://niema-test/n100/r01/n100.r01.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:39  <-  n100.r01.s016.Main.cp_out_file 64a8bf58 ok   extern 0s 35.7MiB
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): retrieving result (try 0): started
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): transferring output (try 0): started
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): transferring output (try 0): started
2021/07/08 13:59:39 scheduler task d8cdec7e (flow aa6f9c7a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:91ffa44b0932a7911f64680c50cef6018e3865e503383bdd13c70f623ca1256b -> s3://niema-test/n100/r01/n100.r01.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:39  <-  n100.r01.s066.Main.cp_out_file aa6f9c7a ok   extern 0s 35.7MiB
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): promoting objects (try 0): started
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloading (try 0): started
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloading list<val<.=c0210ac4 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloading val<.=6f661ed4 35.4MiB>
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloading val<.=d9aba825 35.4MiB>
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): retrieving diagnostic output (try 0): started
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloaded val<.=6f661ed4 35.4MiB>
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloaded list<val<.=c0210ac4 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloaded val<.=d9aba825 35.4MiB>
2021/07/08 13:59:39 scheduler task 0fea5d54 (flow 44ac81a2): unloading (try 0): successful, next state: complete
2021/07/08 13:59:39  <-  n100.r01.s048.Main.out_file 44ac81a2 ok     exec 5m0s 35.7MiB
2021/07/08 13:59:39 n100.r01.s048.Main.out_file 44ac81a2 n100/r01/n100.r01.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb801bdd18ccd7fa19e9bf187e77e7cca95c7790c78c4fbb8a1ac755b5d79d58
	sha256:44ac81a2da38631620586466c560ef181a480523516d1a767909bb48d87a909e
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0fea5d547e5a594ee4c47cba27ade612de9563b35544dde4ea7a7042ed02b06b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s048_output"
	    wget -O "n100.r01.s048_output/n100.r01.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s048_output/n100.r01.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s048_output/n100.r01.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s048_output/n100.r01.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s048_output/n100.r01.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s048_output/n100.r01.s048.reference.fas" "n100.r01.s048_output/n100.r01.s048.fq1.fastq" "n100.r01.s048_output/n100.r01.s048.fq2.fastq" | samtools view -bS - > "n100.r01.s048_output/n100.r01.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s048_output/n100.r01.s048.untrimmed.sorted.bam" "n100.r01.s048_output/n100.r01.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s048_output/n100.r01.s048.untrimmed.sorted.bam" -b "n100.r01.s048_output/n100.r01.s048.primers.bed" -p "n100.r01.s048_output/n100.r01.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" "n100.r01.s048_output/n100.r01.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s048_output/n100.r01.s048.reference.fas" "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" > "n100.r01.s048_output/n100.r01.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s048_output/n100.r01.s048.reference.fas" --call-indels "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" > "n100.r01.s048_output/n100.r01.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s048_output/n100.r01.s048.trimmed.sorted.bam" > "n100.r01.s048_output/n100.r01.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s048_output/n100.r01.s048.depth.txt" "n100.r01.s048_output/n100.r01.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s048_output/n100.r01.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s048_output/n100.r01.s048.reference.fas" | bcftools consensus -m "n100.r01.s048_output/n100.r01.s048.low_depth.tsv" tmp.vcf.gz > "n100.r01.s048_output/n100.r01.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c0210ac4782f24416a79cc763b9f748609b323b8c88f0b635bc1d559a64a30f0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=128.6MiB
	    disk mean=9.1MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 13:59:39 scheduler task 49d5f3a2 (flow 97fc79d5): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s048.tar.gz resources {}
2021/07/08 13:59:39  ->  n100.r01.s048.Main.cp_out_file 97fc79d5 exec extern s3://niema-test/n100/r01/n100.r01.s048.tar.gz 35.7MiB
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): retrieving result (try 0): started
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloading (try 0): started
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloading list<val<.=1465f86b 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloading val<.=2839ba3b 35.4MiB>
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloading val<.=3fa9c090 35.4MiB>
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): transferring output (try 0): started
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloading (try 0): started
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloading list<val<.=cbb7fc59 35.8MiB> 35.8MiB>
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloading val<.=9d712f44 35.4MiB>
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloading val<.=a18a0f53 35.4MiB>
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloaded val<.=2839ba3b 35.4MiB>
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloaded val<.=3fa9c090 35.4MiB>
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloaded list<val<.=1465f86b 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task b25ce208 (flow f21eee98): unloading (try 0): successful, next state: complete
2021/07/08 13:59:39  <-  n100.r01.s036.Main.out_file f21eee98 ok     exec 5m8s 35.7MiB
2021/07/08 13:59:39 n100.r01.s036.Main.out_file f21eee98 n100/r01/n100.r01.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8474f9a79dd894343dd164f9b2fb5419744c55f9bb0e40daa949916d0aca59b3
	sha256:f21eee98bf4eddbd47d8eed1a1aae67c6170fd84fce7ab8b5c9c6d4f5ca4aa44
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b25ce208338275b663cca6ea8e42535b8c7d754a20e70342f1a605eccb216042
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s036_output"
	    wget -O "n100.r01.s036_output/n100.r01.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s036_output/n100.r01.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s036_output/n100.r01.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s036_output/n100.r01.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s036_output/n100.r01.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s036_output/n100.r01.s036.reference.fas" "n100.r01.s036_output/n100.r01.s036.fq1.fastq" "n100.r01.s036_output/n100.r01.s036.fq2.fastq" | samtools view -bS - > "n100.r01.s036_output/n100.r01.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s036_output/n100.r01.s036.untrimmed.sorted.bam" "n100.r01.s036_output/n100.r01.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s036_output/n100.r01.s036.untrimmed.sorted.bam" -b "n100.r01.s036_output/n100.r01.s036.primers.bed" -p "n100.r01.s036_output/n100.r01.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" "n100.r01.s036_output/n100.r01.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s036_output/n100.r01.s036.reference.fas" "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" > "n100.r01.s036_output/n100.r01.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s036_output/n100.r01.s036.reference.fas" --call-indels "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" > "n100.r01.s036_output/n100.r01.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s036_output/n100.r01.s036.trimmed.sorted.bam" > "n100.r01.s036_output/n100.r01.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s036_output/n100.r01.s036.depth.txt" "n100.r01.s036_output/n100.r01.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s036_output/n100.r01.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s036_output/n100.r01.s036.reference.fas" | bcftools consensus -m "n100.r01.s036_output/n100.r01.s036.low_depth.tsv" tmp.vcf.gz > "n100.r01.s036_output/n100.r01.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1465f86bebc249075d83c10f2b22c738eb079e27cedd06eb76a170d81ebdad7d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=128.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 13:59:39 scheduler task 102c37f5 (flow b0b5efb2): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s036.tar.gz resources {}
2021/07/08 13:59:39  ->  n100.r01.s036.Main.cp_out_file b0b5efb2 exec extern s3://niema-test/n100/r01/n100.r01.s036.tar.gz 35.7MiB
2021/07/08 13:59:39 scheduler task 6653fcd8 (flow 2ea881a0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7ed3faaeb723ac348e7a1035fe98031dfba7109f5628ff28307131470c045e3c -> s3://niema-test/n100/r01/n100.r01.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:39  <-  n100.r01.s075.Main.cp_out_file 2ea881a0 ok   extern 0s 35.7MiB
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloaded list<val<.=cbb7fc59 35.8MiB> 35.8MiB>
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloaded val<.=9d712f44 35.4MiB>
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloaded val<.=a18a0f53 35.4MiB>
2021/07/08 13:59:39 scheduler task 47b72df9 (flow ada3a42a): unloading (try 0): successful, next state: complete
2021/07/08 13:59:39  <-  n100.r01.s089.Main.out_file ada3a42a ok     exec 4m53s 35.8MiB
2021/07/08 13:59:39 n100.r01.s089.Main.out_file ada3a42a n100/r01/n100.r01.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8265a0bf96fa613032d3eea711dec96007c25773bd9abeb2da9c417b04c39929
	sha256:ada3a42a8f8975102dfdd2eecbd3c8acf0b7995a5170cc04acd6388324f34a0b
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/47b72df997aea04d0aab8e80c6741aacc802a787e6540298b363382d9c4ae52c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s089_output"
	    wget -O "n100.r01.s089_output/n100.r01.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s089_output/n100.r01.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s089_output/n100.r01.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s089_output/n100.r01.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s089_output/n100.r01.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s089_output/n100.r01.s089.reference.fas" "n100.r01.s089_output/n100.r01.s089.fq1.fastq" "n100.r01.s089_output/n100.r01.s089.fq2.fastq" | samtools view -bS - > "n100.r01.s089_output/n100.r01.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s089_output/n100.r01.s089.untrimmed.sorted.bam" "n100.r01.s089_output/n100.r01.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s089_output/n100.r01.s089.untrimmed.sorted.bam" -b "n100.r01.s089_output/n100.r01.s089.primers.bed" -p "n100.r01.s089_output/n100.r01.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" "n100.r01.s089_output/n100.r01.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s089_output/n100.r01.s089.reference.fas" "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" > "n100.r01.s089_output/n100.r01.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s089_output/n100.r01.s089.reference.fas" --call-indels "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" > "n100.r01.s089_output/n100.r01.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s089_output/n100.r01.s089.trimmed.sorted.bam" > "n100.r01.s089_output/n100.r01.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s089_output/n100.r01.s089.depth.txt" "n100.r01.s089_output/n100.r01.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s089_output/n100.r01.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s089_output/n100.r01.s089.reference.fas" | bcftools consensus -m "n100.r01.s089_output/n100.r01.s089.low_depth.tsv" tmp.vcf.gz > "n100.r01.s089_output/n100.r01.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cbb7fc5956cc8418604c94975b4c1385fd72c6a4a6b59ea6264ee8a3c05ac862 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=129.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:39 scheduler task 2dcfc976 (flow c440cf2b): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s089.tar.gz resources {}
2021/07/08 13:59:39  ->  n100.r01.s089.Main.cp_out_file c440cf2b exec extern s3://niema-test/n100/r01/n100.r01.s089.tar.gz 35.8MiB
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloading (try 0): started
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloading list<val<.=5123f974 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloading val<.=2b2024ef 35.4MiB>
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloading val<.=cf55d0cf 35.4MiB>
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloaded val<.=cf55d0cf 35.4MiB>
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloaded val<.=2b2024ef 35.4MiB>
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloaded list<val<.=5123f974 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task d6c86c87 (flow 6138a66a): unloading (try 0): successful, next state: complete
2021/07/08 13:59:39  <-  n100.r01.s090.Main.out_file 6138a66a ok     exec 5m1s 35.7MiB
2021/07/08 13:59:39 n100.r01.s090.Main.out_file 6138a66a n100/r01/n100.r01.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cddb73c1a810fcb310c584321e0cce0153c58d865360d7330fdfd7c953cbf8df
	sha256:6138a66a5e78c4e23a85b7e26345d0e0f43d5765be3c2124e924294aff8284f5
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d6c86c875ce091b8a13bae921e9e1f6a3130321a0069925c22b46d3f1ab2c346
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s090_output"
	    wget -O "n100.r01.s090_output/n100.r01.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s090_output/n100.r01.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s090_output/n100.r01.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s090_output/n100.r01.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s090_output/n100.r01.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s090_output/n100.r01.s090.reference.fas" "n100.r01.s090_output/n100.r01.s090.fq1.fastq" "n100.r01.s090_output/n100.r01.s090.fq2.fastq" | samtools view -bS - > "n100.r01.s090_output/n100.r01.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s090_output/n100.r01.s090.untrimmed.sorted.bam" "n100.r01.s090_output/n100.r01.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s090_output/n100.r01.s090.untrimmed.sorted.bam" -b "n100.r01.s090_output/n100.r01.s090.primers.bed" -p "n100.r01.s090_output/n100.r01.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" "n100.r01.s090_output/n100.r01.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s090_output/n100.r01.s090.reference.fas" "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" > "n100.r01.s090_output/n100.r01.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s090_output/n100.r01.s090.reference.fas" --call-indels "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" > "n100.r01.s090_output/n100.r01.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s090_output/n100.r01.s090.trimmed.sorted.bam" > "n100.r01.s090_output/n100.r01.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s090_output/n100.r01.s090.depth.txt" "n100.r01.s090_output/n100.r01.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s090_output/n100.r01.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s090_output/n100.r01.s090.reference.fas" | bcftools consensus -m "n100.r01.s090_output/n100.r01.s090.low_depth.tsv" tmp.vcf.gz > "n100.r01.s090_output/n100.r01.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5123f974403e0ecd41600ae3a1bcb6ec455fd2610c3685df014b5f470c5855a7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=129.7MiB
	    disk mean=8.8MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 13:59:39 scheduler task d6530619 (flow bbae6aba): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s090.tar.gz resources {}
2021/07/08 13:59:39  ->  n100.r01.s090.Main.cp_out_file bbae6aba exec extern s3://niema-test/n100/r01/n100.r01.s090.tar.gz 35.7MiB
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): unloading (try 0): started
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): unloading list<val<.=c1d47088 35.7MiB> 35.7MiB>
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): unloading val<.=826c2e81 35.4MiB>
2021/07/08 13:59:39 scheduler task f0d0ce5d (flow 15203b14): unloading val<.=9cc960e1 35.4MiB>
2021/07/08 13:59:39 scheduler task 49d5f3a2 (flow 97fc79d5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c0210ac4782f24416a79cc763b9f748609b323b8c88f0b635bc1d559a64a30f0 -> s3://niema-test/n100/r01/n100.r01.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:39  <-  n100.r01.s048.Main.cp_out_file 97fc79d5 ok   extern 0s 35.7MiB
2021/07/08 13:59:40 scheduler task f0d0ce5d (flow 15203b14): unloaded val<.=826c2e81 35.4MiB>
2021/07/08 13:59:40 scheduler task f0d0ce5d (flow 15203b14): unloaded list<val<.=c1d47088 35.7MiB> 35.7MiB>
2021/07/08 13:59:40 scheduler task f0d0ce5d (flow 15203b14): unloaded val<.=9cc960e1 35.4MiB>
2021/07/08 13:59:40 scheduler task f0d0ce5d (flow 15203b14): unloading (try 0): successful, next state: complete
2021/07/08 13:59:40  <-  n100.r01.s034.Main.out_file 15203b14 ok     exec 5m1s 35.7MiB
2021/07/08 13:59:40 n100.r01.s034.Main.out_file 15203b14 n100/r01/n100.r01.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fced2da0e060231814b8d5655b96769853e72aa665cb6de61b6316a99bafd4d
	sha256:15203b14aba4338992bd0b900024884e572339d1f1aa6ec3301b19de0782a8cd
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0d0ce5d6208413dbc89bb26573be3ea3ef28e8eeb384e351b196504a5ac698e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s034_output"
	    wget -O "n100.r01.s034_output/n100.r01.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s034_output/n100.r01.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s034_output/n100.r01.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s034_output/n100.r01.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s034_output/n100.r01.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s034_output/n100.r01.s034.reference.fas" "n100.r01.s034_output/n100.r01.s034.fq1.fastq" "n100.r01.s034_output/n100.r01.s034.fq2.fastq" | samtools view -bS - > "n100.r01.s034_output/n100.r01.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s034_output/n100.r01.s034.untrimmed.sorted.bam" "n100.r01.s034_output/n100.r01.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s034_output/n100.r01.s034.untrimmed.sorted.bam" -b "n100.r01.s034_output/n100.r01.s034.primers.bed" -p "n100.r01.s034_output/n100.r01.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" "n100.r01.s034_output/n100.r01.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s034_output/n100.r01.s034.reference.fas" "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" > "n100.r01.s034_output/n100.r01.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s034_output/n100.r01.s034.reference.fas" --call-indels "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" > "n100.r01.s034_output/n100.r01.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s034_output/n100.r01.s034.trimmed.sorted.bam" > "n100.r01.s034_output/n100.r01.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s034_output/n100.r01.s034.depth.txt" "n100.r01.s034_output/n100.r01.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s034_output/n100.r01.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s034_output/n100.r01.s034.reference.fas" | bcftools consensus -m "n100.r01.s034_output/n100.r01.s034.low_depth.tsv" tmp.vcf.gz > "n100.r01.s034_output/n100.r01.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c1d47088df62abf5d229c50a650f6325ac5593fc4d4444b4bbca55da3bb19925 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=128.6MiB
	    disk mean=7.5MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 13:59:40 scheduler task e36e0117 (flow 7452f3d9): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s034.tar.gz resources {}
2021/07/08 13:59:40  ->  n100.r01.s034.Main.cp_out_file 7452f3d9 exec extern s3://niema-test/n100/r01/n100.r01.s034.tar.gz 35.7MiB
2021/07/08 13:59:40 scheduler task 102c37f5 (flow b0b5efb2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1465f86bebc249075d83c10f2b22c738eb079e27cedd06eb76a170d81ebdad7d -> s3://niema-test/n100/r01/n100.r01.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:40  <-  n100.r01.s036.Main.cp_out_file b0b5efb2 ok   extern 0s 35.7MiB
2021/07/08 13:59:40 scheduler task d6530619 (flow bbae6aba): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5123f974403e0ecd41600ae3a1bcb6ec455fd2610c3685df014b5f470c5855a7 -> s3://niema-test/n100/r01/n100.r01.s090.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:40  <-  n100.r01.s090.Main.cp_out_file bbae6aba ok   extern 0s 35.7MiB
2021/07/08 13:59:40 scheduler task 2dcfc976 (flow c440cf2b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cbb7fc5956cc8418604c94975b4c1385fd72c6a4a6b59ea6264ee8a3c05ac862 -> s3://niema-test/n100/r01/n100.r01.s089.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:40  <-  n100.r01.s089.Main.cp_out_file c440cf2b ok   extern 0s 35.8MiB
2021/07/08 13:59:40 scheduler task e36e0117 (flow 7452f3d9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c1d47088df62abf5d229c50a650f6325ac5593fc4d4444b4bbca55da3bb19925 -> s3://niema-test/n100/r01/n100.r01.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:40  <-  n100.r01.s034.Main.cp_out_file 7452f3d9 ok   extern 0s 35.7MiB
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): promoting objects (try 0): started
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): promoting objects (try 0): started
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): retrieving diagnostic output (try 0): started
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): retrieving diagnostic output (try 0): started
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): retrieving result (try 0): started
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): retrieving result (try 0): started
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:41 scheduler task 3cbe7084 (flow f4094bfe): transferring output (try 0): started
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:41 scheduler task 642e6110 (flow 18df7aad): transferring output (try 0): started
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloading (try 0): started
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloading list<val<.=b05d9f6a 35.7MiB> 35.7MiB>
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloading val<.=7f0207b2 35.4MiB>
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloading val<.=dfa2321a 35.4MiB>
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloading (try 0): started
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloading list<val<.=a706fec0 35.7MiB> 35.7MiB>
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloading val<.=18bd4243 35.4MiB>
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloading val<.=7978ec40 35.4MiB>
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloaded list<val<.=b05d9f6a 35.7MiB> 35.7MiB>
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloaded val<.=dfa2321a 35.4MiB>
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloaded val<.=7f0207b2 35.4MiB>
2021/07/08 13:59:42 scheduler task 3cbe7084 (flow f4094bfe): unloading (try 0): successful, next state: complete
2021/07/08 13:59:42  <-  n100.r01.s059.Main.out_file f4094bfe ok     exec 4m55s 35.7MiB
2021/07/08 13:59:42 n100.r01.s059.Main.out_file f4094bfe n100/r01/n100.r01.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4ada77f0eb3584f20f2bfe72e2c26faa90624e7a57456a5415e9dc80fd6dae2b
	sha256:f4094bfe7ff3e2c830fd4fa42f11e9efda1986e88ee37fcdfdaeccd679d61552
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3cbe70845896f8f3951c2556fb2b9065facbdc8c53b7264977a6d358c2ec7de5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s059_output"
	    wget -O "n100.r01.s059_output/n100.r01.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s059_output/n100.r01.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s059_output/n100.r01.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s059_output/n100.r01.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s059_output/n100.r01.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s059_output/n100.r01.s059.reference.fas" "n100.r01.s059_output/n100.r01.s059.fq1.fastq" "n100.r01.s059_output/n100.r01.s059.fq2.fastq" | samtools view -bS - > "n100.r01.s059_output/n100.r01.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s059_output/n100.r01.s059.untrimmed.sorted.bam" "n100.r01.s059_output/n100.r01.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s059_output/n100.r01.s059.untrimmed.sorted.bam" -b "n100.r01.s059_output/n100.r01.s059.primers.bed" -p "n100.r01.s059_output/n100.r01.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" "n100.r01.s059_output/n100.r01.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s059_output/n100.r01.s059.reference.fas" "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" > "n100.r01.s059_output/n100.r01.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s059_output/n100.r01.s059.reference.fas" --call-indels "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" > "n100.r01.s059_output/n100.r01.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s059_output/n100.r01.s059.trimmed.sorted.bam" > "n100.r01.s059_output/n100.r01.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s059_output/n100.r01.s059.depth.txt" "n100.r01.s059_output/n100.r01.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s059_output/n100.r01.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s059_output/n100.r01.s059.reference.fas" | bcftools consensus -m "n100.r01.s059_output/n100.r01.s059.low_depth.tsv" tmp.vcf.gz > "n100.r01.s059_output/n100.r01.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b05d9f6ad0738aa34dab84f631518aed1be062acbdd7c562669ab1a0f5b0c4fe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.1MiB max=129.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 13:59:42 scheduler task 752e7634 (flow 348e6088): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s059.tar.gz resources {}
2021/07/08 13:59:42  ->  n100.r01.s059.Main.cp_out_file 348e6088 exec extern s3://niema-test/n100/r01/n100.r01.s059.tar.gz 35.7MiB
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloaded val<.=18bd4243 35.4MiB>
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloaded list<val<.=a706fec0 35.7MiB> 35.7MiB>
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloaded val<.=7978ec40 35.4MiB>
2021/07/08 13:59:42 scheduler task 642e6110 (flow 18df7aad): unloading (try 0): successful, next state: complete
2021/07/08 13:59:42  <-  n100.r01.s070.Main.out_file 18df7aad ok     exec 5m2s 35.7MiB
2021/07/08 13:59:42 n100.r01.s070.Main.out_file 18df7aad n100/r01/n100.r01.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ecf60cf2a8852f3183cf1bc27d362207e71fb6cd3e793c862030fcbcf340f48f
	sha256:18df7aad430c184ed77d6d332c4f84a61c7e448511eeb7c987b16e5f55b37d8f
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/642e6110aecffdb444ede609dbcf47d4a14480377036d453c6016723b4254b5c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s070_output"
	    wget -O "n100.r01.s070_output/n100.r01.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s070_output/n100.r01.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s070_output/n100.r01.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s070_output/n100.r01.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s070_output/n100.r01.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s070_output/n100.r01.s070.reference.fas" "n100.r01.s070_output/n100.r01.s070.fq1.fastq" "n100.r01.s070_output/n100.r01.s070.fq2.fastq" | samtools view -bS - > "n100.r01.s070_output/n100.r01.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s070_output/n100.r01.s070.untrimmed.sorted.bam" "n100.r01.s070_output/n100.r01.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s070_output/n100.r01.s070.untrimmed.sorted.bam" -b "n100.r01.s070_output/n100.r01.s070.primers.bed" -p "n100.r01.s070_output/n100.r01.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" "n100.r01.s070_output/n100.r01.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s070_output/n100.r01.s070.reference.fas" "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" > "n100.r01.s070_output/n100.r01.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s070_output/n100.r01.s070.reference.fas" --call-indels "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" > "n100.r01.s070_output/n100.r01.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s070_output/n100.r01.s070.trimmed.sorted.bam" > "n100.r01.s070_output/n100.r01.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s070_output/n100.r01.s070.depth.txt" "n100.r01.s070_output/n100.r01.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s070_output/n100.r01.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s070_output/n100.r01.s070.reference.fas" | bcftools consensus -m "n100.r01.s070_output/n100.r01.s070.low_depth.tsv" tmp.vcf.gz > "n100.r01.s070_output/n100.r01.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a706fec0de556481055ff2c9331b63cd028e54c9355209c6834d209360193fbf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=129.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=691B max=3.0KiB
2021/07/08 13:59:42 scheduler task ce2fe53f (flow 7faa955d): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s070.tar.gz resources {}
2021/07/08 13:59:42  ->  n100.r01.s070.Main.cp_out_file 7faa955d exec extern s3://niema-test/n100/r01/n100.r01.s070.tar.gz 35.7MiB
2021/07/08 13:59:42 scheduler task ce2fe53f (flow 7faa955d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a706fec0de556481055ff2c9331b63cd028e54c9355209c6834d209360193fbf -> s3://niema-test/n100/r01/n100.r01.s070.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:42  <-  n100.r01.s070.Main.cp_out_file 7faa955d ok   extern 0s 35.7MiB
2021/07/08 13:59:42 scheduler task 752e7634 (flow 348e6088): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b05d9f6ad0738aa34dab84f631518aed1be062acbdd7c562669ab1a0f5b0c4fe -> s3://niema-test/n100/r01/n100.r01.s059.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 13:59:42  <-  n100.r01.s059.Main.cp_out_file 348e6088 ok   extern 0s 35.7MiB
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): promoting objects (try 0): started
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): retrieving diagnostic output (try 0): started
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): retrieving result (try 0): started
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 13:59:43 scheduler task 238ca419 (flow 8082561f): transferring output (try 0): started
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): transferring output (try 0): successful, next state: unloading
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloading (try 0): started
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloading list<val<.=cdb57a43 35.8MiB> 35.8MiB>
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloading val<.=7e489594 35.4MiB>
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloading val<.=37b242e6 35.4MiB>
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloaded val<.=7e489594 35.4MiB>
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloaded val<.=37b242e6 35.4MiB>
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloaded list<val<.=cdb57a43 35.8MiB> 35.8MiB>
2021/07/08 13:59:44 scheduler task 238ca419 (flow 8082561f): unloading (try 0): successful, next state: complete
2021/07/08 13:59:44  <-  n100.r01.s026.Main.out_file 8082561f ok     exec 4m57s 35.8MiB
2021/07/08 13:59:44 n100.r01.s026.Main.out_file 8082561f n100/r01/n100.r01.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:367f539675d9bbd628600e9324b87b1dc761bd5f8b1bdeb82bc218f310dbeaae
	sha256:8082561f2789026fb93f2065f7e015ff9359496f3fe8c007e7087f2c5d8d9ea2
	ec2-18-117-70-74.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/238ca419b7899077f648ab133cd3a861ed9b37ea5103ac0234e7c9321bfd3829
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r01.s026_output"
	    wget -O "n100.r01.s026_output/n100.r01.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r01.s026_output/n100.r01.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r01.s026_output/n100.r01.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r01.s026_output/n100.r01.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r01.s026_output/n100.r01.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r01.s026_output/n100.r01.s026.reference.fas" "n100.r01.s026_output/n100.r01.s026.fq1.fastq" "n100.r01.s026_output/n100.r01.s026.fq2.fastq" | samtools view -bS - > "n100.r01.s026_output/n100.r01.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s026_output/n100.r01.s026.untrimmed.sorted.bam" "n100.r01.s026_output/n100.r01.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r01.s026_output/n100.r01.s026.untrimmed.sorted.bam" -b "n100.r01.s026_output/n100.r01.s026.primers.bed" -p "n100.r01.s026_output/n100.r01.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" "n100.r01.s026_output/n100.r01.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r01.s026_output/n100.r01.s026.reference.fas" "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" > "n100.r01.s026_output/n100.r01.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r01.s026_output/n100.r01.s026.reference.fas" --call-indels "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" > "n100.r01.s026_output/n100.r01.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r01.s026_output/n100.r01.s026.trimmed.sorted.bam" > "n100.r01.s026_output/n100.r01.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r01.s026_output/n100.r01.s026.depth.txt" "n100.r01.s026_output/n100.r01.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r01.s026_output/n100.r01.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r01.s026_output/n100.r01.s026.reference.fas" | bcftools consensus -m "n100.r01.s026_output/n100.r01.s026.low_depth.tsv" tmp.vcf.gz > "n100.r01.s026_output/n100.r01.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r01.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cdb57a438e9c77b3285bf7769f2886b3656521fd17ea345bd3d89e4360238ad0 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.9MiB max=128.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 13:59:44 scheduler task 29cea2d9 (flow 16223da7): submitted with execconfig extern url s3://niema-test/n100/r01/n100.r01.s026.tar.gz resources {}
2021/07/08 13:59:44  ->  n100.r01.s026.Main.cp_out_file 16223da7 exec extern s3://niema-test/n100/r01/n100.r01.s026.tar.gz 35.8MiB
2021/07/08 13:59:44 scheduler task 29cea2d9 (flow 16223da7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cdb57a438e9c77b3285bf7769f2886b3656521fd17ea345bd3d89e4360238ad0 -> s3://niema-test/n100/r01/n100.r01.s026.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 13:59:44  <-  n100.r01.s026.Main.cp_out_file 16223da7 ok   extern 0s 35.8MiB
2021/07/08 13:59:44 total n=400 time=7m33s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r01.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s001.Main.fq1         1   0      0B                                                      
	n100.r01.s001.Main.fq2         1   0      0B                                                      
	n100.r01.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s002.Main.fq1         1   0      0B                                                      
	n100.r01.s002.Main.fq2         1   0      0B                                                      
	n100.r01.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s003.Main.fq1         1   0      0B                                                      
	n100.r01.s003.Main.fq2         1   0      0B                                                      
	n100.r01.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s004.Main.fq1         1   0      0B                                                      
	n100.r01.s004.Main.fq2         1   0      0B                                                      
	n100.r01.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s005.Main.fq1         1   0      0B                                                      
	n100.r01.s005.Main.fq2         1   0      0B                                                      
	n100.r01.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s006.Main.fq1         1   0      0B                                                      
	n100.r01.s006.Main.fq2         1   0      0B                                                      
	n100.r01.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s007.Main.fq1         1   0      0B                                                      
	n100.r01.s007.Main.fq2         1   0      0B                                                      
	n100.r01.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s008.Main.fq1         1   0      0B                                                      
	n100.r01.s008.Main.fq2         1   0      0B                                                      
	n100.r01.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s009.Main.fq1         1   0      0B                                                      
	n100.r01.s009.Main.fq2         1   0      0B                                                      
	n100.r01.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s010.Main.fq1         1   0      0B                                                      
	n100.r01.s010.Main.fq2         1   0      0B                                                      
	n100.r01.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s011.Main.fq1         1   0      0B                                                      
	n100.r01.s011.Main.fq2         1   0      0B                                                      
	n100.r01.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s012.Main.fq1         1   0      0B                                                      
	n100.r01.s012.Main.fq2         1   0      0B                                                      
	n100.r01.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s013.Main.fq1         1   0      0B                                                      
	n100.r01.s013.Main.fq2         1   0      0B                                                      
	n100.r01.s013.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s014.Main.fq1         1   0      0B                                                      
	n100.r01.s014.Main.fq2         1   0      0B                                                      
	n100.r01.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s015.Main.fq1         1   0      0B                                                      
	n100.r01.s015.Main.fq2         1   0      0B                                                      
	n100.r01.s015.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s016.Main.fq1         1   0      0B                                                      
	n100.r01.s016.Main.fq2         1   0      0B                                                      
	n100.r01.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s017.Main.fq1         1   0      0B                                                      
	n100.r01.s017.Main.fq2         1   0      0B                                                      
	n100.r01.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s018.Main.fq1         1   0      0B                                                      
	n100.r01.s018.Main.fq2         1   0      0B                                                      
	n100.r01.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s019.Main.fq1         1   0      0B                                                      
	n100.r01.s019.Main.fq2         1   0      0B                                                      
	n100.r01.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s020.Main.fq1         1   0      0B                                                      
	n100.r01.s020.Main.fq2         1   0      0B                                                      
	n100.r01.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s021.Main.fq1         1   0      0B                                                      
	n100.r01.s021.Main.fq2         1   0      0B                                                      
	n100.r01.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s022.Main.fq1         1   0      0B                                                      
	n100.r01.s022.Main.fq2         1   0      0B                                                      
	n100.r01.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s023.Main.fq1         1   0      0B                                                      
	n100.r01.s023.Main.fq2         1   0      0B                                                      
	n100.r01.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s024.Main.fq1         1   0      0B                                                      
	n100.r01.s024.Main.fq2         1   0      0B                                                      
	n100.r01.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s025.Main.fq1         1   0      0B                                                      
	n100.r01.s025.Main.fq2         1   0      0B                                                      
	n100.r01.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s026.Main.fq1         1   0      0B                                                      
	n100.r01.s026.Main.fq2         1   0      0B                                                      
	n100.r01.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s027.Main.fq1         1   0      0B                                                      
	n100.r01.s027.Main.fq2         1   0      0B                                                      
	n100.r01.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s028.Main.fq1         1   0      0B                                                      
	n100.r01.s028.Main.fq2         1   0      0B                                                      
	n100.r01.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s029.Main.fq1         1   0      0B                                                      
	n100.r01.s029.Main.fq2         1   0      0B                                                      
	n100.r01.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s030.Main.fq1         1   0      0B                                                      
	n100.r01.s030.Main.fq2         1   0      0B                                                      
	n100.r01.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s031.Main.fq1         1   0      0B                                                      
	n100.r01.s031.Main.fq2         1   0      0B                                                      
	n100.r01.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s032.Main.fq1         1   0      0B                                                      
	n100.r01.s032.Main.fq2         1   0      0B                                                      
	n100.r01.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s033.Main.fq1         1   0      0B                                                      
	n100.r01.s033.Main.fq2         1   0      0B                                                      
	n100.r01.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s034.Main.fq1         1   0      0B                                                      
	n100.r01.s034.Main.fq2         1   0      0B                                                      
	n100.r01.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s035.Main.fq1         1   0      0B                                                      
	n100.r01.s035.Main.fq2         1   0      0B                                                      
	n100.r01.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s036.Main.fq1         1   0      0B                                                      
	n100.r01.s036.Main.fq2         1   0      0B                                                      
	n100.r01.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s037.Main.fq1         1   0      0B                                                      
	n100.r01.s037.Main.fq2         1   0      0B                                                      
	n100.r01.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s038.Main.fq1         1   0      0B                                                      
	n100.r01.s038.Main.fq2         1   0      0B                                                      
	n100.r01.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s039.Main.fq1         1   0      0B                                                      
	n100.r01.s039.Main.fq2         1   0      0B                                                      
	n100.r01.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s040.Main.fq1         1   0      0B                                                      
	n100.r01.s040.Main.fq2         1   0      0B                                                      
	n100.r01.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s041.Main.fq1         1   0      0B                                                      
	n100.r01.s041.Main.fq2         1   0      0B                                                      
	n100.r01.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s042.Main.fq1         1   0      0B                                                      
	n100.r01.s042.Main.fq2         1   0      0B                                                      
	n100.r01.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s043.Main.fq1         1   0      0B                                                      
	n100.r01.s043.Main.fq2         1   0      0B                                                      
	n100.r01.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s044.Main.fq1         1   0      0B                                                      
	n100.r01.s044.Main.fq2         1   0      0B                                                      
	n100.r01.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s045.Main.fq1         1   0      0B                                                      
	n100.r01.s045.Main.fq2         1   0      0B                                                      
	n100.r01.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s046.Main.fq1         1   0      0B                                                      
	n100.r01.s046.Main.fq2         1   0      0B                                                      
	n100.r01.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s047.Main.fq1         1   0      0B                                                      
	n100.r01.s047.Main.fq2         1   0      0B                                                      
	n100.r01.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s048.Main.fq1         1   0      0B                                                      
	n100.r01.s048.Main.fq2         1   0      0B                                                      
	n100.r01.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s049.Main.fq1         1   0      0B                                                      
	n100.r01.s049.Main.fq2         1   0      0B                                                      
	n100.r01.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s050.Main.fq1         1   0      0B                                                      
	n100.r01.s050.Main.fq2         1   0      0B                                                      
	n100.r01.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s051.Main.fq1         1   0      0B                                                      
	n100.r01.s051.Main.fq2         1   0      0B                                                      
	n100.r01.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s052.Main.fq1         1   0      0B                                                      
	n100.r01.s052.Main.fq2         1   0      0B                                                      
	n100.r01.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s053.Main.fq1         1   0      0B                                                      
	n100.r01.s053.Main.fq2         1   0      0B                                                      
	n100.r01.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s054.Main.fq1         1   0      0B                                                      
	n100.r01.s054.Main.fq2         1   0      0B                                                      
	n100.r01.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s055.Main.fq1         1   0      0B                                                      
	n100.r01.s055.Main.fq2         1   0      0B                                                      
	n100.r01.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s056.Main.fq1         1   0      0B                                                      
	n100.r01.s056.Main.fq2         1   0      0B                                                      
	n100.r01.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s057.Main.fq1         1   0      0B                                                      
	n100.r01.s057.Main.fq2         1   0      0B                                                      
	n100.r01.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s058.Main.fq1         1   0      0B                                                      
	n100.r01.s058.Main.fq2         1   0      0B                                                      
	n100.r01.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s059.Main.fq1         1   0      0B                                                      
	n100.r01.s059.Main.fq2         1   0      0B                                                      
	n100.r01.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s060.Main.fq1         1   0      0B                                                      
	n100.r01.s060.Main.fq2         1   0      0B                                                      
	n100.r01.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s061.Main.fq1         1   0      0B                                                      
	n100.r01.s061.Main.fq2         1   0      0B                                                      
	n100.r01.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s062.Main.fq1         1   0      0B                                                      
	n100.r01.s062.Main.fq2         1   0      0B                                                      
	n100.r01.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s063.Main.fq1         1   0      0B                                                      
	n100.r01.s063.Main.fq2         1   0      0B                                                      
	n100.r01.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s064.Main.fq1         1   0      0B                                                      
	n100.r01.s064.Main.fq2         1   0      0B                                                      
	n100.r01.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s065.Main.fq1         1   0      0B                                                      
	n100.r01.s065.Main.fq2         1   0      0B                                                      
	n100.r01.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s066.Main.fq1         1   0      0B                                                      
	n100.r01.s066.Main.fq2         1   0      0B                                                      
	n100.r01.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s067.Main.fq1         1   0      0B                                                      
	n100.r01.s067.Main.fq2         1   0      0B                                                      
	n100.r01.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s068.Main.fq1         1   0      0B                                                      
	n100.r01.s068.Main.fq2         1   0      0B                                                      
	n100.r01.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s069.Main.fq1         1   0      0B                                                      
	n100.r01.s069.Main.fq2         1   0      0B                                                      
	n100.r01.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s070.Main.fq1         1   0      0B                                                      
	n100.r01.s070.Main.fq2         1   0      0B                                                      
	n100.r01.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s071.Main.fq1         1   0      0B                                                      
	n100.r01.s071.Main.fq2         1   0      0B                                                      
	n100.r01.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s072.Main.fq1         1   0      0B                                                      
	n100.r01.s072.Main.fq2         1   0      0B                                                      
	n100.r01.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s073.Main.fq1         1   0      0B                                                      
	n100.r01.s073.Main.fq2         1   0      0B                                                      
	n100.r01.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s074.Main.fq1         1   0      0B                                                      
	n100.r01.s074.Main.fq2         1   0      0B                                                      
	n100.r01.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s075.Main.fq1         1   0      0B                                                      
	n100.r01.s075.Main.fq2         1   0      0B                                                      
	n100.r01.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s076.Main.fq1         1   0      0B                                                      
	n100.r01.s076.Main.fq2         1   0      0B                                                      
	n100.r01.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s077.Main.fq1         1   0      0B                                                      
	n100.r01.s077.Main.fq2         1   0      0B                                                      
	n100.r01.s077.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s078.Main.fq1         1   0      0B                                                      
	n100.r01.s078.Main.fq2         1   0      0B                                                      
	n100.r01.s078.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s079.Main.fq1         1   0      0B                                                      
	n100.r01.s079.Main.fq2         1   0      0B                                                      
	n100.r01.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s080.Main.fq1         1   0      0B                                                      
	n100.r01.s080.Main.fq2         1   0      0B                                                      
	n100.r01.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s081.Main.fq1         1   0      0B                                                      
	n100.r01.s081.Main.fq2         1   0      0B                                                      
	n100.r01.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s082.Main.fq1         1   0      0B                                                      
	n100.r01.s082.Main.fq2         1   0      0B                                                      
	n100.r01.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s083.Main.fq1         1   0      0B                                                      
	n100.r01.s083.Main.fq2         1   0      0B                                                      
	n100.r01.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s084.Main.fq1         1   0      0B                                                      
	n100.r01.s084.Main.fq2         1   0      0B                                                      
	n100.r01.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s085.Main.fq1         1   0      0B                                                      
	n100.r01.s085.Main.fq2         1   0      0B                                                      
	n100.r01.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s086.Main.fq1         1   0      0B                                                      
	n100.r01.s086.Main.fq2         1   0      0B                                                      
	n100.r01.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s087.Main.fq1         1   0      0B                                                      
	n100.r01.s087.Main.fq2         1   0      0B                                                      
	n100.r01.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s088.Main.fq1         1   0      0B                                                      
	n100.r01.s088.Main.fq2         1   0      0B                                                      
	n100.r01.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s089.Main.fq1         1   0      0B                                                      
	n100.r01.s089.Main.fq2         1   0      0B                                                      
	n100.r01.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s090.Main.fq1         1   0      0B                                                      
	n100.r01.s090.Main.fq2         1   0      0B                                                      
	n100.r01.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s091.Main.fq1         1   0      0B                                                      
	n100.r01.s091.Main.fq2         1   0      0B                                                      
	n100.r01.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s092.Main.fq1         1   0      0B                                                      
	n100.r01.s092.Main.fq2         1   0      0B                                                      
	n100.r01.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s093.Main.fq1         1   0      0B                                                      
	n100.r01.s093.Main.fq2         1   0      0B                                                      
	n100.r01.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s094.Main.fq1         1   0      0B                                                      
	n100.r01.s094.Main.fq2         1   0      0B                                                      
	n100.r01.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s095.Main.fq1         1   0      0B                                                      
	n100.r01.s095.Main.fq2         1   0      0B                                                      
	n100.r01.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s096.Main.fq1         1   0      0B                                                      
	n100.r01.s096.Main.fq2         1   0      0B                                                      
	n100.r01.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s097.Main.fq1         1   0      0B                                                      
	n100.r01.s097.Main.fq2         1   0      0B                                                      
	n100.r01.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s098.Main.fq1         1   0      0B                                                      
	n100.r01.s098.Main.fq2         1   0      0B                                                      
	n100.r01.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s099.Main.fq1         1   0      0B                                                      
	n100.r01.s099.Main.fq2         1   0      0B                                                      
	n100.r01.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r01.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r01.s100.Main.fq1         1   0      0B                                                      
	n100.r01.s100.Main.fq2         1   0      0B                                                      
	n100.r01.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r01.s001.Main.out_file, n100.r01.s002.Main.out_file, n100.r01.s003.Main.out_file, n100.r01.s004.Main.out_file, n100.r01.s005.Main.out_file, n100.r01.s006.Main.out_file, n100.r01.s007.Main.out_file, n100.r01.s008.Main.out_file, n100.r01.s009.Main.out_file, n100.r01.s010.Main.out_file, n100.r01.s011.Main.out_file, n100.r01.s012.Main.out_file, n100.r01.s013.Main.out_file, n100.r01.s014.Main.out_file, n100.r01.s015.Main.out_file, n100.r01.s016.Main.out_file, n100.r01.s017.Main.out_file, n100.r01.s018.Main.out_file, n100.r01.s019.Main.out_file, n100.r01.s020.Main.out_file, n100.r01.s021.Main.out_file, n100.r01.s022.Main.out_file, n100.r01.s023.Main.out_file, n100.r01.s024.Main.out_file, n100.r01.s025.Main.out_file, n100.r01.s026.Main.out_file, n100.r01.s027.Main.out_file, n100.r01.s028.Main.out_file, n100.r01.s029.Main.out_file, n100.r01.s030.Main.out_file, n100.r01.s031.Main.out_file, n100.r01.s032.Main.out_file, n100.r01.s033.Main.out_file, n100.r01.s034.Main.out_file, n100.r01.s035.Main.out_file, n100.r01.s036.Main.out_file, n100.r01.s037.Main.out_file, n100.r01.s038.Main.out_file, n100.r01.s039.Main.out_file, n100.r01.s040.Main.out_file, n100.r01.s041.Main.out_file, n100.r01.s042.Main.out_file, n100.r01.s043.Main.out_file, n100.r01.s044.Main.out_file, n100.r01.s045.Main.out_file, n100.r01.s046.Main.out_file, n100.r01.s047.Main.out_file, n100.r01.s048.Main.out_file, n100.r01.s049.Main.out_file, n100.r01.s050.Main.out_file, n100.r01.s051.Main.out_file, n100.r01.s052.Main.out_file, n100.r01.s053.Main.out_file, n100.r01.s054.Main.out_file, n100.r01.s055.Main.out_file, n100.r01.s056.Main.out_file, n100.r01.s057.Main.out_file, n100.r01.s058.Main.out_file, n100.r01.s059.Main.out_file, n100.r01.s060.Main.out_file, n100.r01.s061.Main.out_file, n100.r01.s062.Main.out_file, n100.r01.s063.Main.out_file, n100.r01.s064.Main.out_file, n100.r01.s065.Main.out_file, n100.r01.s066.Main.out_file, n100.r01.s067.Main.out_file, n100.r01.s068.Main.out_file, n100.r01.s069.Main.out_file, n100.r01.s070.Main.out_file, n100.r01.s071.Main.out_file, n100.r01.s072.Main.out_file, n100.r01.s073.Main.out_file, n100.r01.s074.Main.out_file, n100.r01.s075.Main.out_file, n100.r01.s076.Main.out_file, n100.r01.s077.Main.out_file, n100.r01.s078.Main.out_file, n100.r01.s079.Main.out_file, n100.r01.s080.Main.out_file, n100.r01.s081.Main.out_file, n100.r01.s082.Main.out_file, n100.r01.s083.Main.out_file, n100.r01.s084.Main.out_file, n100.r01.s085.Main.out_file, n100.r01.s086.Main.out_file, n100.r01.s087.Main.out_file, n100.r01.s088.Main.out_file, n100.r01.s089.Main.out_file, n100.r01.s090.Main.out_file, n100.r01.s091.Main.out_file, n100.r01.s092.Main.out_file, n100.r01.s093.Main.out_file, n100.r01.s094.Main.out_file, n100.r01.s095.Main.out_file, n100.r01.s096.Main.out_file, n100.r01.s097.Main.out_file, n100.r01.s098.Main.out_file, n100.r01.s099.Main.out_file, n100.r01.s100.Main.out_file
2021/07/08 13:59:44 result: [val<.=ee0dcff9 35.7MiB>, val<.=d680cd42 35.6MiB>, val<.=e2f685e1 35.7MiB>, val<.=f7fce254 35.8MiB>, val<.=41bb708c 35.7MiB>, val<.=10c8715f 35.7MiB>, val<.=705226e3 35.8MiB>, val<.=fd3762f6 35.7MiB>, val<.=380b8260 35.8MiB>, val<.=c086284f 35.7MiB>, val<.=7e4821de 35.7MiB>, val<.=c582e76a 35.7MiB>, val<.=12ceadfa 35.8MiB>, val<.=5678b0e8 35.8MiB>, val<.=e8e95296 35.7MiB>, val<.=ef9e8a0d 35.7MiB>, val<.=723dc50c 35.8MiB>, val<.=ccc63056 35.7MiB>, val<.=21bd46b5 35.8MiB>, val<.=b5f40b7f 35.8MiB>, val<.=bbcea3bd 35.8MiB>, val<.=f53a67a2 35.8MiB>, val<.=26d0c64f 35.8MiB>, val<.=98643561 35.7MiB>, val<.=3025fd04 35.7MiB>, val<.=cdb57a43 35.8MiB>, val<.=94c30421 35.7MiB>, val<.=459ae086 35.8MiB>, val<.=73a19b36 35.7MiB>, val<.=9ca118a4 35.8MiB>, val<.=df4be475 35.8MiB>, val<.=5fc9b191 35.8MiB>, val<.=ea84e97b 35.7MiB>, val<.=c1d47088 35.7MiB>, val<.=0bbaf278 35.7MiB>, val<.=1465f86b 35.7MiB>, val<.=dcc5bc10 35.8MiB>, val<.=a31f667a 35.8MiB>, val<.=d8c454c8 35.7MiB>, val<.=010fc88d 35.7MiB>, val<.=e60f0679 35.7MiB>, val<.=d4f7d309 35.8MiB>, val<.=4eaaae15 35.7MiB>, val<.=a7006f19 35.7MiB>, val<.=6b4bc3b7 35.7MiB>, val<.=035eef0c 35.8MiB>, val<.=e7413bcc 35.7MiB>, val<.=c0210ac4 35.7MiB>, val<.=fd2f7fd8 35.7MiB>, val<.=fe4a2638 35.7MiB>, val<.=b4b3449c 35.7MiB>, val<.=71eec149 35.8MiB>, val<.=39d854f2 35.7MiB>, val<.=ee168991 35.7MiB>, val<.=64b035a8 35.8MiB>, val<.=5c18bc81 35.7MiB>, val<.=706db2ec 35.7MiB>, val<.=5d6a8cf2 35.7MiB>, val<.=b05d9f6a 35.7MiB>, val<.=d3f270a7 35.7MiB>, val<.=b6e89877 35.7MiB>, val<.=3fc5a4af 35.7MiB>, val<.=d13b990c 35.7MiB>, val<.=42e12a19 35.8MiB>, val<.=3e693809 35.8MiB>, val<.=91ffa44b 35.7MiB>, val<.=d53bc5d3 35.7MiB>, val<.=038b6fd9 35.7MiB>, val<.=68bc475d 35.7MiB>, val<.=a706fec0 35.7MiB>, val<.=2f44008f 35.8MiB>, val<.=f1901752 35.7MiB>, val<.=11242974 35.7MiB>, val<.=2e79ec39 35.7MiB>, val<.=7ed3faae 35.7MiB>, val<.=5c70de8f 35.7MiB>, val<.=48fb972e 35.8MiB>, val<.=109b98c8 35.7MiB>, val<.=cb7c8c24 35.8MiB>, val<.=32cc4ee8 35.7MiB>, val<.=3308eb88 35.7MiB>, val<.=c7b2db0d 35.7MiB>, val<.=a271c270 35.7MiB>, val<.=17b2c168 35.7MiB>, val<.=59c082d6 35.7MiB>, val<.=de893d28 35.8MiB>, val<.=c1ce616a 35.7MiB>, val<.=86d9c4e4 35.7MiB>, val<.=cbb7fc59 35.8MiB>, val<.=5123f974 35.7MiB>, val<.=cc6b3c47 35.8MiB>, val<.=cebf0222 35.8MiB>, val<.=42486696 35.7MiB>, val<.=30c779cc 35.7MiB>, val<.=8907e66a 35.7MiB>, val<.=f6c79fc0 35.7MiB>, val<.=8ab5bc37 35.7MiB>, val<.=123a743a 35.8MiB>, val<.=d5f39ed6 35.7MiB>, val<.=291a8c9b 35.7MiB>]
2021/07/08 13:59:44 waiting for 1 background tasks to complete
