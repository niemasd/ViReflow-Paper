2021/07/08 16:58:08 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 16:58:08 run ID: a571cb56
2021/07/08 16:58:08 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r05.rf
	(no params)
	(no arguments)
2021/07/08 16:58:08 Trace: /home/niema/.reflow/runs/a571cb5631aa74937406345196025c9f58142bb0ed5f720842a536dadc665b31.trace
2021/07/08 16:58:08 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 16:58:09 scheduler task 3a4d9596 (flow 6fa0a4b3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s033_output\"\n        wget -O \"n100.r05.s033_output/n100.r05.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s033_output/n100.r05.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s033_output/n100.r05.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s033_output/n100.r05.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s033_output/n100.r05.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s033_output/n100.r05.s033.reference.fas\" \"n100.r05.s033_output/n100.r05.s033.fq1.fastq\" \"n100.r05.s033_output/n100.r05.s033.fq2.fastq\" | samtools view -bS - > \"n100.r05.s033_output/n100.r05.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s033_output/n100.r05.s033.untrimmed.sorted.bam\" \"n100.r05.s033_output/n100.r05.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s033_output/n100.r05.s033.untrimmed.sorted.bam\" -b \"n100.r05.s033_output/n100.r05.s033.primers.bed\" -p \"n100.r05.s033_output/n100.r05.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam\" \"n100.r05.s033_output/n100.r05.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s033_output/n100.r05.s033.reference.fas\" \"n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam\" > \"n100.r05.s033_output/n100.r05.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s033_output/n100.r05.s033.reference.fas\" --call-indels \"n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam\" > \"n100.r05.s033_output/n100.r05.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam\" > \"n100.r05.s033_output/n100.r05.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s033_output/n100.r05.s033.depth.txt\" \"n100.r05.s033_output/n100.r05.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s033_output/n100.r05.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s033_output/n100.r05.s033.reference.fas\" | bcftools consensus -m \"n100.r05.s033_output/n100.r05.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s033_output/n100.r05.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task cfc12c81 (flow c0fd3b1c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s087_output\"\n        wget -O \"n100.r05.s087_output/n100.r05.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s087_output/n100.r05.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s087_output/n100.r05.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s087_output/n100.r05.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s087_output/n100.r05.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s087_output/n100.r05.s087.reference.fas\" \"n100.r05.s087_output/n100.r05.s087.fq1.fastq\" \"n100.r05.s087_output/n100.r05.s087.fq2.fastq\" | samtools view -bS - > \"n100.r05.s087_output/n100.r05.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s087_output/n100.r05.s087.untrimmed.sorted.bam\" \"n100.r05.s087_output/n100.r05.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s087_output/n100.r05.s087.untrimmed.sorted.bam\" -b \"n100.r05.s087_output/n100.r05.s087.primers.bed\" -p \"n100.r05.s087_output/n100.r05.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam\" \"n100.r05.s087_output/n100.r05.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s087_output/n100.r05.s087.reference.fas\" \"n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam\" > \"n100.r05.s087_output/n100.r05.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s087_output/n100.r05.s087.reference.fas\" --call-indels \"n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam\" > \"n100.r05.s087_output/n100.r05.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam\" > \"n100.r05.s087_output/n100.r05.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s087_output/n100.r05.s087.depth.txt\" \"n100.r05.s087_output/n100.r05.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s087_output/n100.r05.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s087_output/n100.r05.s087.reference.fas\" | bcftools consensus -m \"n100.r05.s087_output/n100.r05.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s087_output/n100.r05.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 799a03d8 (flow 052c42b8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s085_output\"\n        wget -O \"n100.r05.s085_output/n100.r05.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s085_output/n100.r05.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s085_output/n100.r05.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s085_output/n100.r05.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s085_output/n100.r05.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s085_output/n100.r05.s085.reference.fas\" \"n100.r05.s085_output/n100.r05.s085.fq1.fastq\" \"n100.r05.s085_output/n100.r05.s085.fq2.fastq\" | samtools view -bS - > \"n100.r05.s085_output/n100.r05.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s085_output/n100.r05.s085.untrimmed.sorted.bam\" \"n100.r05.s085_output/n100.r05.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s085_output/n100.r05.s085.untrimmed.sorted.bam\" -b \"n100.r05.s085_output/n100.r05.s085.primers.bed\" -p \"n100.r05.s085_output/n100.r05.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam\" \"n100.r05.s085_output/n100.r05.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s085_output/n100.r05.s085.reference.fas\" \"n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam\" > \"n100.r05.s085_output/n100.r05.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s085_output/n100.r05.s085.reference.fas\" --call-indels \"n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam\" > \"n100.r05.s085_output/n100.r05.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam\" > \"n100.r05.s085_output/n100.r05.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s085_output/n100.r05.s085.depth.txt\" \"n100.r05.s085_output/n100.r05.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s085_output/n100.r05.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s085_output/n100.r05.s085.reference.fas\" | bcftools consensus -m \"n100.r05.s085_output/n100.r05.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s085_output/n100.r05.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task a5f81a19 (flow 1e808086): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s008_output\"\n        wget -O \"n100.r05.s008_output/n100.r05.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s008_output/n100.r05.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s008_output/n100.r05.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s008_output/n100.r05.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s008_output/n100.r05.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s008_output/n100.r05.s008.reference.fas\" \"n100.r05.s008_output/n100.r05.s008.fq1.fastq\" \"n100.r05.s008_output/n100.r05.s008.fq2.fastq\" | samtools view -bS - > \"n100.r05.s008_output/n100.r05.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s008_output/n100.r05.s008.untrimmed.sorted.bam\" \"n100.r05.s008_output/n100.r05.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s008_output/n100.r05.s008.untrimmed.sorted.bam\" -b \"n100.r05.s008_output/n100.r05.s008.primers.bed\" -p \"n100.r05.s008_output/n100.r05.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam\" \"n100.r05.s008_output/n100.r05.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s008_output/n100.r05.s008.reference.fas\" \"n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam\" > \"n100.r05.s008_output/n100.r05.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s008_output/n100.r05.s008.reference.fas\" --call-indels \"n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam\" > \"n100.r05.s008_output/n100.r05.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam\" > \"n100.r05.s008_output/n100.r05.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s008_output/n100.r05.s008.depth.txt\" \"n100.r05.s008_output/n100.r05.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s008_output/n100.r05.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s008_output/n100.r05.s008.reference.fas\" | bcftools consensus -m \"n100.r05.s008_output/n100.r05.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s008_output/n100.r05.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 18737f1d (flow d748bfdf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s016_output\"\n        wget -O \"n100.r05.s016_output/n100.r05.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s016_output/n100.r05.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s016_output/n100.r05.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s016_output/n100.r05.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s016_output/n100.r05.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s016_output/n100.r05.s016.reference.fas\" \"n100.r05.s016_output/n100.r05.s016.fq1.fastq\" \"n100.r05.s016_output/n100.r05.s016.fq2.fastq\" | samtools view -bS - > \"n100.r05.s016_output/n100.r05.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s016_output/n100.r05.s016.untrimmed.sorted.bam\" \"n100.r05.s016_output/n100.r05.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s016_output/n100.r05.s016.untrimmed.sorted.bam\" -b \"n100.r05.s016_output/n100.r05.s016.primers.bed\" -p \"n100.r05.s016_output/n100.r05.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam\" \"n100.r05.s016_output/n100.r05.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s016_output/n100.r05.s016.reference.fas\" \"n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam\" > \"n100.r05.s016_output/n100.r05.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s016_output/n100.r05.s016.reference.fas\" --call-indels \"n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam\" > \"n100.r05.s016_output/n100.r05.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam\" > \"n100.r05.s016_output/n100.r05.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s016_output/n100.r05.s016.depth.txt\" \"n100.r05.s016_output/n100.r05.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s016_output/n100.r05.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s016_output/n100.r05.s016.reference.fas\" | bcftools consensus -m \"n100.r05.s016_output/n100.r05.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s016_output/n100.r05.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task ef9b0bc7 (flow 18d94a36): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s077_output\"\n        wget -O \"n100.r05.s077_output/n100.r05.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s077_output/n100.r05.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s077_output/n100.r05.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s077_output/n100.r05.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s077_output/n100.r05.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s077_output/n100.r05.s077.reference.fas\" \"n100.r05.s077_output/n100.r05.s077.fq1.fastq\" \"n100.r05.s077_output/n100.r05.s077.fq2.fastq\" | samtools view -bS - > \"n100.r05.s077_output/n100.r05.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s077_output/n100.r05.s077.untrimmed.sorted.bam\" \"n100.r05.s077_output/n100.r05.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s077_output/n100.r05.s077.untrimmed.sorted.bam\" -b \"n100.r05.s077_output/n100.r05.s077.primers.bed\" -p \"n100.r05.s077_output/n100.r05.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam\" \"n100.r05.s077_output/n100.r05.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s077_output/n100.r05.s077.reference.fas\" \"n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam\" > \"n100.r05.s077_output/n100.r05.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s077_output/n100.r05.s077.reference.fas\" --call-indels \"n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam\" > \"n100.r05.s077_output/n100.r05.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam\" > \"n100.r05.s077_output/n100.r05.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s077_output/n100.r05.s077.depth.txt\" \"n100.r05.s077_output/n100.r05.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s077_output/n100.r05.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s077_output/n100.r05.s077.reference.fas\" | bcftools consensus -m \"n100.r05.s077_output/n100.r05.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s077_output/n100.r05.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c504d35d (flow 7c5932bc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s076_output\"\n        wget -O \"n100.r05.s076_output/n100.r05.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s076_output/n100.r05.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s076_output/n100.r05.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s076_output/n100.r05.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s076_output/n100.r05.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s076_output/n100.r05.s076.reference.fas\" \"n100.r05.s076_output/n100.r05.s076.fq1.fastq\" \"n100.r05.s076_output/n100.r05.s076.fq2.fastq\" | samtools view -bS - > \"n100.r05.s076_output/n100.r05.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s076_output/n100.r05.s076.untrimmed.sorted.bam\" \"n100.r05.s076_output/n100.r05.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s076_output/n100.r05.s076.untrimmed.sorted.bam\" -b \"n100.r05.s076_output/n100.r05.s076.primers.bed\" -p \"n100.r05.s076_output/n100.r05.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam\" \"n100.r05.s076_output/n100.r05.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s076_output/n100.r05.s076.reference.fas\" \"n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam\" > \"n100.r05.s076_output/n100.r05.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s076_output/n100.r05.s076.reference.fas\" --call-indels \"n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam\" > \"n100.r05.s076_output/n100.r05.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam\" > \"n100.r05.s076_output/n100.r05.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s076_output/n100.r05.s076.depth.txt\" \"n100.r05.s076_output/n100.r05.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s076_output/n100.r05.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s076_output/n100.r05.s076.reference.fas\" | bcftools consensus -m \"n100.r05.s076_output/n100.r05.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s076_output/n100.r05.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 7016df0e (flow c5ad9cb9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s007_output\"\n        wget -O \"n100.r05.s007_output/n100.r05.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s007_output/n100.r05.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s007_output/n100.r05.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s007_output/n100.r05.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s007_output/n100.r05.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s007_output/n100.r05.s007.reference.fas\" \"n100.r05.s007_output/n100.r05.s007.fq1.fastq\" \"n100.r05.s007_output/n100.r05.s007.fq2.fastq\" | samtools view -bS - > \"n100.r05.s007_output/n100.r05.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s007_output/n100.r05.s007.untrimmed.sorted.bam\" \"n100.r05.s007_output/n100.r05.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s007_output/n100.r05.s007.untrimmed.sorted.bam\" -b \"n100.r05.s007_output/n100.r05.s007.primers.bed\" -p \"n100.r05.s007_output/n100.r05.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam\" \"n100.r05.s007_output/n100.r05.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s007_output/n100.r05.s007.reference.fas\" \"n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam\" > \"n100.r05.s007_output/n100.r05.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s007_output/n100.r05.s007.reference.fas\" --call-indels \"n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam\" > \"n100.r05.s007_output/n100.r05.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam\" > \"n100.r05.s007_output/n100.r05.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s007_output/n100.r05.s007.depth.txt\" \"n100.r05.s007_output/n100.r05.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s007_output/n100.r05.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s007_output/n100.r05.s007.reference.fas\" | bcftools consensus -m \"n100.r05.s007_output/n100.r05.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s007_output/n100.r05.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task cdca394a (flow 777a4ca0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s099_output\"\n        wget -O \"n100.r05.s099_output/n100.r05.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s099_output/n100.r05.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s099_output/n100.r05.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s099_output/n100.r05.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s099_output/n100.r05.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s099_output/n100.r05.s099.reference.fas\" \"n100.r05.s099_output/n100.r05.s099.fq1.fastq\" \"n100.r05.s099_output/n100.r05.s099.fq2.fastq\" | samtools view -bS - > \"n100.r05.s099_output/n100.r05.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s099_output/n100.r05.s099.untrimmed.sorted.bam\" \"n100.r05.s099_output/n100.r05.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s099_output/n100.r05.s099.untrimmed.sorted.bam\" -b \"n100.r05.s099_output/n100.r05.s099.primers.bed\" -p \"n100.r05.s099_output/n100.r05.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam\" \"n100.r05.s099_output/n100.r05.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s099_output/n100.r05.s099.reference.fas\" \"n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam\" > \"n100.r05.s099_output/n100.r05.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s099_output/n100.r05.s099.reference.fas\" --call-indels \"n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam\" > \"n100.r05.s099_output/n100.r05.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam\" > \"n100.r05.s099_output/n100.r05.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s099_output/n100.r05.s099.depth.txt\" \"n100.r05.s099_output/n100.r05.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s099_output/n100.r05.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s099_output/n100.r05.s099.reference.fas\" | bcftools consensus -m \"n100.r05.s099_output/n100.r05.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s099_output/n100.r05.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 6a846499 (flow 410e42f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s006_output\"\n        wget -O \"n100.r05.s006_output/n100.r05.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s006_output/n100.r05.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s006_output/n100.r05.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s006_output/n100.r05.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s006_output/n100.r05.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s006_output/n100.r05.s006.reference.fas\" \"n100.r05.s006_output/n100.r05.s006.fq1.fastq\" \"n100.r05.s006_output/n100.r05.s006.fq2.fastq\" | samtools view -bS - > \"n100.r05.s006_output/n100.r05.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s006_output/n100.r05.s006.untrimmed.sorted.bam\" \"n100.r05.s006_output/n100.r05.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s006_output/n100.r05.s006.untrimmed.sorted.bam\" -b \"n100.r05.s006_output/n100.r05.s006.primers.bed\" -p \"n100.r05.s006_output/n100.r05.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam\" \"n100.r05.s006_output/n100.r05.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s006_output/n100.r05.s006.reference.fas\" \"n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam\" > \"n100.r05.s006_output/n100.r05.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s006_output/n100.r05.s006.reference.fas\" --call-indels \"n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam\" > \"n100.r05.s006_output/n100.r05.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam\" > \"n100.r05.s006_output/n100.r05.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s006_output/n100.r05.s006.depth.txt\" \"n100.r05.s006_output/n100.r05.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s006_output/n100.r05.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s006_output/n100.r05.s006.reference.fas\" | bcftools consensus -m \"n100.r05.s006_output/n100.r05.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s006_output/n100.r05.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 9cf7175b (flow 03bf8a77): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s050_output\"\n        wget -O \"n100.r05.s050_output/n100.r05.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s050_output/n100.r05.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s050_output/n100.r05.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s050_output/n100.r05.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s050_output/n100.r05.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s050_output/n100.r05.s050.reference.fas\" \"n100.r05.s050_output/n100.r05.s050.fq1.fastq\" \"n100.r05.s050_output/n100.r05.s050.fq2.fastq\" | samtools view -bS - > \"n100.r05.s050_output/n100.r05.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s050_output/n100.r05.s050.untrimmed.sorted.bam\" \"n100.r05.s050_output/n100.r05.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s050_output/n100.r05.s050.untrimmed.sorted.bam\" -b \"n100.r05.s050_output/n100.r05.s050.primers.bed\" -p \"n100.r05.s050_output/n100.r05.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam\" \"n100.r05.s050_output/n100.r05.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s050_output/n100.r05.s050.reference.fas\" \"n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam\" > \"n100.r05.s050_output/n100.r05.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s050_output/n100.r05.s050.reference.fas\" --call-indels \"n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam\" > \"n100.r05.s050_output/n100.r05.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam\" > \"n100.r05.s050_output/n100.r05.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s050_output/n100.r05.s050.depth.txt\" \"n100.r05.s050_output/n100.r05.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s050_output/n100.r05.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s050_output/n100.r05.s050.reference.fas\" | bcftools consensus -m \"n100.r05.s050_output/n100.r05.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s050_output/n100.r05.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 46c9fba6 (flow c2a88629): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s066_output\"\n        wget -O \"n100.r05.s066_output/n100.r05.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s066_output/n100.r05.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s066_output/n100.r05.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s066_output/n100.r05.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s066_output/n100.r05.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s066_output/n100.r05.s066.reference.fas\" \"n100.r05.s066_output/n100.r05.s066.fq1.fastq\" \"n100.r05.s066_output/n100.r05.s066.fq2.fastq\" | samtools view -bS - > \"n100.r05.s066_output/n100.r05.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s066_output/n100.r05.s066.untrimmed.sorted.bam\" \"n100.r05.s066_output/n100.r05.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s066_output/n100.r05.s066.untrimmed.sorted.bam\" -b \"n100.r05.s066_output/n100.r05.s066.primers.bed\" -p \"n100.r05.s066_output/n100.r05.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam\" \"n100.r05.s066_output/n100.r05.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s066_output/n100.r05.s066.reference.fas\" \"n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam\" > \"n100.r05.s066_output/n100.r05.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s066_output/n100.r05.s066.reference.fas\" --call-indels \"n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam\" > \"n100.r05.s066_output/n100.r05.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam\" > \"n100.r05.s066_output/n100.r05.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s066_output/n100.r05.s066.depth.txt\" \"n100.r05.s066_output/n100.r05.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s066_output/n100.r05.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s066_output/n100.r05.s066.reference.fas\" | bcftools consensus -m \"n100.r05.s066_output/n100.r05.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s066_output/n100.r05.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 887f8caf (flow da518317): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s088_output\"\n        wget -O \"n100.r05.s088_output/n100.r05.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s088_output/n100.r05.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s088_output/n100.r05.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s088_output/n100.r05.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s088_output/n100.r05.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s088_output/n100.r05.s088.reference.fas\" \"n100.r05.s088_output/n100.r05.s088.fq1.fastq\" \"n100.r05.s088_output/n100.r05.s088.fq2.fastq\" | samtools view -bS - > \"n100.r05.s088_output/n100.r05.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s088_output/n100.r05.s088.untrimmed.sorted.bam\" \"n100.r05.s088_output/n100.r05.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s088_output/n100.r05.s088.untrimmed.sorted.bam\" -b \"n100.r05.s088_output/n100.r05.s088.primers.bed\" -p \"n100.r05.s088_output/n100.r05.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam\" \"n100.r05.s088_output/n100.r05.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s088_output/n100.r05.s088.reference.fas\" \"n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam\" > \"n100.r05.s088_output/n100.r05.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s088_output/n100.r05.s088.reference.fas\" --call-indels \"n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam\" > \"n100.r05.s088_output/n100.r05.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam\" > \"n100.r05.s088_output/n100.r05.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s088_output/n100.r05.s088.depth.txt\" \"n100.r05.s088_output/n100.r05.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s088_output/n100.r05.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s088_output/n100.r05.s088.reference.fas\" | bcftools consensus -m \"n100.r05.s088_output/n100.r05.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s088_output/n100.r05.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 895b6be6 (flow 4ea7450d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s062_output\"\n        wget -O \"n100.r05.s062_output/n100.r05.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s062_output/n100.r05.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s062_output/n100.r05.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s062_output/n100.r05.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s062_output/n100.r05.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s062_output/n100.r05.s062.reference.fas\" \"n100.r05.s062_output/n100.r05.s062.fq1.fastq\" \"n100.r05.s062_output/n100.r05.s062.fq2.fastq\" | samtools view -bS - > \"n100.r05.s062_output/n100.r05.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s062_output/n100.r05.s062.untrimmed.sorted.bam\" \"n100.r05.s062_output/n100.r05.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s062_output/n100.r05.s062.untrimmed.sorted.bam\" -b \"n100.r05.s062_output/n100.r05.s062.primers.bed\" -p \"n100.r05.s062_output/n100.r05.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam\" \"n100.r05.s062_output/n100.r05.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s062_output/n100.r05.s062.reference.fas\" \"n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam\" > \"n100.r05.s062_output/n100.r05.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s062_output/n100.r05.s062.reference.fas\" --call-indels \"n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam\" > \"n100.r05.s062_output/n100.r05.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam\" > \"n100.r05.s062_output/n100.r05.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s062_output/n100.r05.s062.depth.txt\" \"n100.r05.s062_output/n100.r05.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s062_output/n100.r05.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s062_output/n100.r05.s062.reference.fas\" | bcftools consensus -m \"n100.r05.s062_output/n100.r05.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s062_output/n100.r05.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 83c1b665 (flow 9dafcfc9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s029_output\"\n        wget -O \"n100.r05.s029_output/n100.r05.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s029_output/n100.r05.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s029_output/n100.r05.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s029_output/n100.r05.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s029_output/n100.r05.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s029_output/n100.r05.s029.reference.fas\" \"n100.r05.s029_output/n100.r05.s029.fq1.fastq\" \"n100.r05.s029_output/n100.r05.s029.fq2.fastq\" | samtools view -bS - > \"n100.r05.s029_output/n100.r05.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s029_output/n100.r05.s029.untrimmed.sorted.bam\" \"n100.r05.s029_output/n100.r05.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s029_output/n100.r05.s029.untrimmed.sorted.bam\" -b \"n100.r05.s029_output/n100.r05.s029.primers.bed\" -p \"n100.r05.s029_output/n100.r05.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam\" \"n100.r05.s029_output/n100.r05.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s029_output/n100.r05.s029.reference.fas\" \"n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam\" > \"n100.r05.s029_output/n100.r05.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s029_output/n100.r05.s029.reference.fas\" --call-indels \"n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam\" > \"n100.r05.s029_output/n100.r05.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam\" > \"n100.r05.s029_output/n100.r05.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s029_output/n100.r05.s029.depth.txt\" \"n100.r05.s029_output/n100.r05.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s029_output/n100.r05.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s029_output/n100.r05.s029.reference.fas\" | bcftools consensus -m \"n100.r05.s029_output/n100.r05.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s029_output/n100.r05.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 70748d2b (flow dab8c84e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s092_output\"\n        wget -O \"n100.r05.s092_output/n100.r05.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s092_output/n100.r05.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s092_output/n100.r05.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s092_output/n100.r05.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s092_output/n100.r05.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s092_output/n100.r05.s092.reference.fas\" \"n100.r05.s092_output/n100.r05.s092.fq1.fastq\" \"n100.r05.s092_output/n100.r05.s092.fq2.fastq\" | samtools view -bS - > \"n100.r05.s092_output/n100.r05.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s092_output/n100.r05.s092.untrimmed.sorted.bam\" \"n100.r05.s092_output/n100.r05.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s092_output/n100.r05.s092.untrimmed.sorted.bam\" -b \"n100.r05.s092_output/n100.r05.s092.primers.bed\" -p \"n100.r05.s092_output/n100.r05.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam\" \"n100.r05.s092_output/n100.r05.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s092_output/n100.r05.s092.reference.fas\" \"n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam\" > \"n100.r05.s092_output/n100.r05.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s092_output/n100.r05.s092.reference.fas\" --call-indels \"n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam\" > \"n100.r05.s092_output/n100.r05.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam\" > \"n100.r05.s092_output/n100.r05.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s092_output/n100.r05.s092.depth.txt\" \"n100.r05.s092_output/n100.r05.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s092_output/n100.r05.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s092_output/n100.r05.s092.reference.fas\" | bcftools consensus -m \"n100.r05.s092_output/n100.r05.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s092_output/n100.r05.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 7fd21a08 (flow 5b62101d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s052_output\"\n        wget -O \"n100.r05.s052_output/n100.r05.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s052_output/n100.r05.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s052_output/n100.r05.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s052_output/n100.r05.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s052_output/n100.r05.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s052_output/n100.r05.s052.reference.fas\" \"n100.r05.s052_output/n100.r05.s052.fq1.fastq\" \"n100.r05.s052_output/n100.r05.s052.fq2.fastq\" | samtools view -bS - > \"n100.r05.s052_output/n100.r05.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s052_output/n100.r05.s052.untrimmed.sorted.bam\" \"n100.r05.s052_output/n100.r05.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s052_output/n100.r05.s052.untrimmed.sorted.bam\" -b \"n100.r05.s052_output/n100.r05.s052.primers.bed\" -p \"n100.r05.s052_output/n100.r05.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam\" \"n100.r05.s052_output/n100.r05.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s052_output/n100.r05.s052.reference.fas\" \"n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam\" > \"n100.r05.s052_output/n100.r05.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s052_output/n100.r05.s052.reference.fas\" --call-indels \"n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam\" > \"n100.r05.s052_output/n100.r05.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam\" > \"n100.r05.s052_output/n100.r05.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s052_output/n100.r05.s052.depth.txt\" \"n100.r05.s052_output/n100.r05.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s052_output/n100.r05.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s052_output/n100.r05.s052.reference.fas\" | bcftools consensus -m \"n100.r05.s052_output/n100.r05.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s052_output/n100.r05.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 94683d3a (flow 96139b10): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s042_output\"\n        wget -O \"n100.r05.s042_output/n100.r05.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s042_output/n100.r05.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s042_output/n100.r05.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s042_output/n100.r05.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s042_output/n100.r05.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s042_output/n100.r05.s042.reference.fas\" \"n100.r05.s042_output/n100.r05.s042.fq1.fastq\" \"n100.r05.s042_output/n100.r05.s042.fq2.fastq\" | samtools view -bS - > \"n100.r05.s042_output/n100.r05.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s042_output/n100.r05.s042.untrimmed.sorted.bam\" \"n100.r05.s042_output/n100.r05.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s042_output/n100.r05.s042.untrimmed.sorted.bam\" -b \"n100.r05.s042_output/n100.r05.s042.primers.bed\" -p \"n100.r05.s042_output/n100.r05.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam\" \"n100.r05.s042_output/n100.r05.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s042_output/n100.r05.s042.reference.fas\" \"n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam\" > \"n100.r05.s042_output/n100.r05.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s042_output/n100.r05.s042.reference.fas\" --call-indels \"n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam\" > \"n100.r05.s042_output/n100.r05.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam\" > \"n100.r05.s042_output/n100.r05.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s042_output/n100.r05.s042.depth.txt\" \"n100.r05.s042_output/n100.r05.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s042_output/n100.r05.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s042_output/n100.r05.s042.reference.fas\" | bcftools consensus -m \"n100.r05.s042_output/n100.r05.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s042_output/n100.r05.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 4ac811a5 (flow 62342884): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s083_output\"\n        wget -O \"n100.r05.s083_output/n100.r05.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s083_output/n100.r05.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s083_output/n100.r05.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s083_output/n100.r05.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s083_output/n100.r05.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s083_output/n100.r05.s083.reference.fas\" \"n100.r05.s083_output/n100.r05.s083.fq1.fastq\" \"n100.r05.s083_output/n100.r05.s083.fq2.fastq\" | samtools view -bS - > \"n100.r05.s083_output/n100.r05.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s083_output/n100.r05.s083.untrimmed.sorted.bam\" \"n100.r05.s083_output/n100.r05.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s083_output/n100.r05.s083.untrimmed.sorted.bam\" -b \"n100.r05.s083_output/n100.r05.s083.primers.bed\" -p \"n100.r05.s083_output/n100.r05.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam\" \"n100.r05.s083_output/n100.r05.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s083_output/n100.r05.s083.reference.fas\" \"n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam\" > \"n100.r05.s083_output/n100.r05.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s083_output/n100.r05.s083.reference.fas\" --call-indels \"n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam\" > \"n100.r05.s083_output/n100.r05.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam\" > \"n100.r05.s083_output/n100.r05.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s083_output/n100.r05.s083.depth.txt\" \"n100.r05.s083_output/n100.r05.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s083_output/n100.r05.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s083_output/n100.r05.s083.reference.fas\" | bcftools consensus -m \"n100.r05.s083_output/n100.r05.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s083_output/n100.r05.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task a959f1cd (flow deb5653c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s078_output\"\n        wget -O \"n100.r05.s078_output/n100.r05.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s078_output/n100.r05.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s078_output/n100.r05.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s078_output/n100.r05.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s078_output/n100.r05.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s078_output/n100.r05.s078.reference.fas\" \"n100.r05.s078_output/n100.r05.s078.fq1.fastq\" \"n100.r05.s078_output/n100.r05.s078.fq2.fastq\" | samtools view -bS - > \"n100.r05.s078_output/n100.r05.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s078_output/n100.r05.s078.untrimmed.sorted.bam\" \"n100.r05.s078_output/n100.r05.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s078_output/n100.r05.s078.untrimmed.sorted.bam\" -b \"n100.r05.s078_output/n100.r05.s078.primers.bed\" -p \"n100.r05.s078_output/n100.r05.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam\" \"n100.r05.s078_output/n100.r05.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s078_output/n100.r05.s078.reference.fas\" \"n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam\" > \"n100.r05.s078_output/n100.r05.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s078_output/n100.r05.s078.reference.fas\" --call-indels \"n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam\" > \"n100.r05.s078_output/n100.r05.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam\" > \"n100.r05.s078_output/n100.r05.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s078_output/n100.r05.s078.depth.txt\" \"n100.r05.s078_output/n100.r05.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s078_output/n100.r05.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s078_output/n100.r05.s078.reference.fas\" | bcftools consensus -m \"n100.r05.s078_output/n100.r05.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s078_output/n100.r05.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 541b05df (flow 28c707dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s053_output\"\n        wget -O \"n100.r05.s053_output/n100.r05.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s053_output/n100.r05.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s053_output/n100.r05.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s053_output/n100.r05.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s053_output/n100.r05.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s053_output/n100.r05.s053.reference.fas\" \"n100.r05.s053_output/n100.r05.s053.fq1.fastq\" \"n100.r05.s053_output/n100.r05.s053.fq2.fastq\" | samtools view -bS - > \"n100.r05.s053_output/n100.r05.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s053_output/n100.r05.s053.untrimmed.sorted.bam\" \"n100.r05.s053_output/n100.r05.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s053_output/n100.r05.s053.untrimmed.sorted.bam\" -b \"n100.r05.s053_output/n100.r05.s053.primers.bed\" -p \"n100.r05.s053_output/n100.r05.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam\" \"n100.r05.s053_output/n100.r05.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s053_output/n100.r05.s053.reference.fas\" \"n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam\" > \"n100.r05.s053_output/n100.r05.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s053_output/n100.r05.s053.reference.fas\" --call-indels \"n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam\" > \"n100.r05.s053_output/n100.r05.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam\" > \"n100.r05.s053_output/n100.r05.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s053_output/n100.r05.s053.depth.txt\" \"n100.r05.s053_output/n100.r05.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s053_output/n100.r05.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s053_output/n100.r05.s053.reference.fas\" | bcftools consensus -m \"n100.r05.s053_output/n100.r05.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s053_output/n100.r05.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 95aeedb8 (flow fc144875): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s023_output\"\n        wget -O \"n100.r05.s023_output/n100.r05.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s023_output/n100.r05.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s023_output/n100.r05.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s023_output/n100.r05.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s023_output/n100.r05.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s023_output/n100.r05.s023.reference.fas\" \"n100.r05.s023_output/n100.r05.s023.fq1.fastq\" \"n100.r05.s023_output/n100.r05.s023.fq2.fastq\" | samtools view -bS - > \"n100.r05.s023_output/n100.r05.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s023_output/n100.r05.s023.untrimmed.sorted.bam\" \"n100.r05.s023_output/n100.r05.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s023_output/n100.r05.s023.untrimmed.sorted.bam\" -b \"n100.r05.s023_output/n100.r05.s023.primers.bed\" -p \"n100.r05.s023_output/n100.r05.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam\" \"n100.r05.s023_output/n100.r05.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s023_output/n100.r05.s023.reference.fas\" \"n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam\" > \"n100.r05.s023_output/n100.r05.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s023_output/n100.r05.s023.reference.fas\" --call-indels \"n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam\" > \"n100.r05.s023_output/n100.r05.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam\" > \"n100.r05.s023_output/n100.r05.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s023_output/n100.r05.s023.depth.txt\" \"n100.r05.s023_output/n100.r05.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s023_output/n100.r05.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s023_output/n100.r05.s023.reference.fas\" | bcftools consensus -m \"n100.r05.s023_output/n100.r05.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s023_output/n100.r05.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task be23124b (flow 5d6d4385): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s017_output\"\n        wget -O \"n100.r05.s017_output/n100.r05.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s017_output/n100.r05.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s017_output/n100.r05.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s017_output/n100.r05.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s017_output/n100.r05.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s017_output/n100.r05.s017.reference.fas\" \"n100.r05.s017_output/n100.r05.s017.fq1.fastq\" \"n100.r05.s017_output/n100.r05.s017.fq2.fastq\" | samtools view -bS - > \"n100.r05.s017_output/n100.r05.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s017_output/n100.r05.s017.untrimmed.sorted.bam\" \"n100.r05.s017_output/n100.r05.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s017_output/n100.r05.s017.untrimmed.sorted.bam\" -b \"n100.r05.s017_output/n100.r05.s017.primers.bed\" -p \"n100.r05.s017_output/n100.r05.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam\" \"n100.r05.s017_output/n100.r05.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s017_output/n100.r05.s017.reference.fas\" \"n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam\" > \"n100.r05.s017_output/n100.r05.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s017_output/n100.r05.s017.reference.fas\" --call-indels \"n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam\" > \"n100.r05.s017_output/n100.r05.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam\" > \"n100.r05.s017_output/n100.r05.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s017_output/n100.r05.s017.depth.txt\" \"n100.r05.s017_output/n100.r05.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s017_output/n100.r05.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s017_output/n100.r05.s017.reference.fas\" | bcftools consensus -m \"n100.r05.s017_output/n100.r05.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s017_output/n100.r05.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task fa285b2b (flow 65deac98): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s005_output\"\n        wget -O \"n100.r05.s005_output/n100.r05.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s005_output/n100.r05.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s005_output/n100.r05.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s005_output/n100.r05.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s005_output/n100.r05.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s005_output/n100.r05.s005.reference.fas\" \"n100.r05.s005_output/n100.r05.s005.fq1.fastq\" \"n100.r05.s005_output/n100.r05.s005.fq2.fastq\" | samtools view -bS - > \"n100.r05.s005_output/n100.r05.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s005_output/n100.r05.s005.untrimmed.sorted.bam\" \"n100.r05.s005_output/n100.r05.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s005_output/n100.r05.s005.untrimmed.sorted.bam\" -b \"n100.r05.s005_output/n100.r05.s005.primers.bed\" -p \"n100.r05.s005_output/n100.r05.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam\" \"n100.r05.s005_output/n100.r05.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s005_output/n100.r05.s005.reference.fas\" \"n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam\" > \"n100.r05.s005_output/n100.r05.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s005_output/n100.r05.s005.reference.fas\" --call-indels \"n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam\" > \"n100.r05.s005_output/n100.r05.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam\" > \"n100.r05.s005_output/n100.r05.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s005_output/n100.r05.s005.depth.txt\" \"n100.r05.s005_output/n100.r05.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s005_output/n100.r05.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s005_output/n100.r05.s005.reference.fas\" | bcftools consensus -m \"n100.r05.s005_output/n100.r05.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s005_output/n100.r05.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c171a9af (flow f5a0e33a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s094_output\"\n        wget -O \"n100.r05.s094_output/n100.r05.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s094_output/n100.r05.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s094_output/n100.r05.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s094_output/n100.r05.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s094_output/n100.r05.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s094_output/n100.r05.s094.reference.fas\" \"n100.r05.s094_output/n100.r05.s094.fq1.fastq\" \"n100.r05.s094_output/n100.r05.s094.fq2.fastq\" | samtools view -bS - > \"n100.r05.s094_output/n100.r05.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s094_output/n100.r05.s094.untrimmed.sorted.bam\" \"n100.r05.s094_output/n100.r05.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s094_output/n100.r05.s094.untrimmed.sorted.bam\" -b \"n100.r05.s094_output/n100.r05.s094.primers.bed\" -p \"n100.r05.s094_output/n100.r05.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam\" \"n100.r05.s094_output/n100.r05.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s094_output/n100.r05.s094.reference.fas\" \"n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam\" > \"n100.r05.s094_output/n100.r05.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s094_output/n100.r05.s094.reference.fas\" --call-indels \"n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam\" > \"n100.r05.s094_output/n100.r05.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam\" > \"n100.r05.s094_output/n100.r05.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s094_output/n100.r05.s094.depth.txt\" \"n100.r05.s094_output/n100.r05.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s094_output/n100.r05.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s094_output/n100.r05.s094.reference.fas\" | bcftools consensus -m \"n100.r05.s094_output/n100.r05.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s094_output/n100.r05.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 8438db44 (flow 8f98d048): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s054_output\"\n        wget -O \"n100.r05.s054_output/n100.r05.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s054_output/n100.r05.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s054_output/n100.r05.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s054_output/n100.r05.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s054_output/n100.r05.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s054_output/n100.r05.s054.reference.fas\" \"n100.r05.s054_output/n100.r05.s054.fq1.fastq\" \"n100.r05.s054_output/n100.r05.s054.fq2.fastq\" | samtools view -bS - > \"n100.r05.s054_output/n100.r05.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s054_output/n100.r05.s054.untrimmed.sorted.bam\" \"n100.r05.s054_output/n100.r05.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s054_output/n100.r05.s054.untrimmed.sorted.bam\" -b \"n100.r05.s054_output/n100.r05.s054.primers.bed\" -p \"n100.r05.s054_output/n100.r05.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam\" \"n100.r05.s054_output/n100.r05.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s054_output/n100.r05.s054.reference.fas\" \"n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam\" > \"n100.r05.s054_output/n100.r05.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s054_output/n100.r05.s054.reference.fas\" --call-indels \"n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam\" > \"n100.r05.s054_output/n100.r05.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam\" > \"n100.r05.s054_output/n100.r05.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s054_output/n100.r05.s054.depth.txt\" \"n100.r05.s054_output/n100.r05.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s054_output/n100.r05.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s054_output/n100.r05.s054.reference.fas\" | bcftools consensus -m \"n100.r05.s054_output/n100.r05.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s054_output/n100.r05.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 72a551ca (flow 8cf24afe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s072_output\"\n        wget -O \"n100.r05.s072_output/n100.r05.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s072_output/n100.r05.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s072_output/n100.r05.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s072_output/n100.r05.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s072_output/n100.r05.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s072_output/n100.r05.s072.reference.fas\" \"n100.r05.s072_output/n100.r05.s072.fq1.fastq\" \"n100.r05.s072_output/n100.r05.s072.fq2.fastq\" | samtools view -bS - > \"n100.r05.s072_output/n100.r05.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s072_output/n100.r05.s072.untrimmed.sorted.bam\" \"n100.r05.s072_output/n100.r05.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s072_output/n100.r05.s072.untrimmed.sorted.bam\" -b \"n100.r05.s072_output/n100.r05.s072.primers.bed\" -p \"n100.r05.s072_output/n100.r05.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam\" \"n100.r05.s072_output/n100.r05.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s072_output/n100.r05.s072.reference.fas\" \"n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam\" > \"n100.r05.s072_output/n100.r05.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s072_output/n100.r05.s072.reference.fas\" --call-indels \"n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam\" > \"n100.r05.s072_output/n100.r05.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam\" > \"n100.r05.s072_output/n100.r05.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s072_output/n100.r05.s072.depth.txt\" \"n100.r05.s072_output/n100.r05.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s072_output/n100.r05.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s072_output/n100.r05.s072.reference.fas\" | bcftools consensus -m \"n100.r05.s072_output/n100.r05.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s072_output/n100.r05.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 79820afa (flow c5f1bdef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s069_output\"\n        wget -O \"n100.r05.s069_output/n100.r05.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s069_output/n100.r05.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s069_output/n100.r05.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s069_output/n100.r05.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s069_output/n100.r05.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s069_output/n100.r05.s069.reference.fas\" \"n100.r05.s069_output/n100.r05.s069.fq1.fastq\" \"n100.r05.s069_output/n100.r05.s069.fq2.fastq\" | samtools view -bS - > \"n100.r05.s069_output/n100.r05.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s069_output/n100.r05.s069.untrimmed.sorted.bam\" \"n100.r05.s069_output/n100.r05.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s069_output/n100.r05.s069.untrimmed.sorted.bam\" -b \"n100.r05.s069_output/n100.r05.s069.primers.bed\" -p \"n100.r05.s069_output/n100.r05.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam\" \"n100.r05.s069_output/n100.r05.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s069_output/n100.r05.s069.reference.fas\" \"n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam\" > \"n100.r05.s069_output/n100.r05.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s069_output/n100.r05.s069.reference.fas\" --call-indels \"n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam\" > \"n100.r05.s069_output/n100.r05.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam\" > \"n100.r05.s069_output/n100.r05.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s069_output/n100.r05.s069.depth.txt\" \"n100.r05.s069_output/n100.r05.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s069_output/n100.r05.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s069_output/n100.r05.s069.reference.fas\" | bcftools consensus -m \"n100.r05.s069_output/n100.r05.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s069_output/n100.r05.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 25b5d38e (flow b7cf4504): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s098_output\"\n        wget -O \"n100.r05.s098_output/n100.r05.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s098_output/n100.r05.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s098_output/n100.r05.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s098_output/n100.r05.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s098_output/n100.r05.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s098_output/n100.r05.s098.reference.fas\" \"n100.r05.s098_output/n100.r05.s098.fq1.fastq\" \"n100.r05.s098_output/n100.r05.s098.fq2.fastq\" | samtools view -bS - > \"n100.r05.s098_output/n100.r05.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s098_output/n100.r05.s098.untrimmed.sorted.bam\" \"n100.r05.s098_output/n100.r05.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s098_output/n100.r05.s098.untrimmed.sorted.bam\" -b \"n100.r05.s098_output/n100.r05.s098.primers.bed\" -p \"n100.r05.s098_output/n100.r05.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam\" \"n100.r05.s098_output/n100.r05.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s098_output/n100.r05.s098.reference.fas\" \"n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam\" > \"n100.r05.s098_output/n100.r05.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s098_output/n100.r05.s098.reference.fas\" --call-indels \"n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam\" > \"n100.r05.s098_output/n100.r05.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam\" > \"n100.r05.s098_output/n100.r05.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s098_output/n100.r05.s098.depth.txt\" \"n100.r05.s098_output/n100.r05.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s098_output/n100.r05.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s098_output/n100.r05.s098.reference.fas\" | bcftools consensus -m \"n100.r05.s098_output/n100.r05.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s098_output/n100.r05.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 27b13502 (flow 152eb222): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s059_output\"\n        wget -O \"n100.r05.s059_output/n100.r05.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s059_output/n100.r05.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s059_output/n100.r05.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s059_output/n100.r05.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s059_output/n100.r05.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s059_output/n100.r05.s059.reference.fas\" \"n100.r05.s059_output/n100.r05.s059.fq1.fastq\" \"n100.r05.s059_output/n100.r05.s059.fq2.fastq\" | samtools view -bS - > \"n100.r05.s059_output/n100.r05.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s059_output/n100.r05.s059.untrimmed.sorted.bam\" \"n100.r05.s059_output/n100.r05.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s059_output/n100.r05.s059.untrimmed.sorted.bam\" -b \"n100.r05.s059_output/n100.r05.s059.primers.bed\" -p \"n100.r05.s059_output/n100.r05.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam\" \"n100.r05.s059_output/n100.r05.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s059_output/n100.r05.s059.reference.fas\" \"n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam\" > \"n100.r05.s059_output/n100.r05.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s059_output/n100.r05.s059.reference.fas\" --call-indels \"n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam\" > \"n100.r05.s059_output/n100.r05.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam\" > \"n100.r05.s059_output/n100.r05.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s059_output/n100.r05.s059.depth.txt\" \"n100.r05.s059_output/n100.r05.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s059_output/n100.r05.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s059_output/n100.r05.s059.reference.fas\" | bcftools consensus -m \"n100.r05.s059_output/n100.r05.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s059_output/n100.r05.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task e551941a (flow ea8b7e31): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s044_output\"\n        wget -O \"n100.r05.s044_output/n100.r05.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s044_output/n100.r05.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s044_output/n100.r05.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s044_output/n100.r05.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s044_output/n100.r05.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s044_output/n100.r05.s044.reference.fas\" \"n100.r05.s044_output/n100.r05.s044.fq1.fastq\" \"n100.r05.s044_output/n100.r05.s044.fq2.fastq\" | samtools view -bS - > \"n100.r05.s044_output/n100.r05.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s044_output/n100.r05.s044.untrimmed.sorted.bam\" \"n100.r05.s044_output/n100.r05.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s044_output/n100.r05.s044.untrimmed.sorted.bam\" -b \"n100.r05.s044_output/n100.r05.s044.primers.bed\" -p \"n100.r05.s044_output/n100.r05.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam\" \"n100.r05.s044_output/n100.r05.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s044_output/n100.r05.s044.reference.fas\" \"n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam\" > \"n100.r05.s044_output/n100.r05.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s044_output/n100.r05.s044.reference.fas\" --call-indels \"n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam\" > \"n100.r05.s044_output/n100.r05.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam\" > \"n100.r05.s044_output/n100.r05.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s044_output/n100.r05.s044.depth.txt\" \"n100.r05.s044_output/n100.r05.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s044_output/n100.r05.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s044_output/n100.r05.s044.reference.fas\" | bcftools consensus -m \"n100.r05.s044_output/n100.r05.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s044_output/n100.r05.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 91519b5f (flow b2cb8afe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s049_output\"\n        wget -O \"n100.r05.s049_output/n100.r05.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s049_output/n100.r05.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s049_output/n100.r05.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s049_output/n100.r05.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s049_output/n100.r05.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s049_output/n100.r05.s049.reference.fas\" \"n100.r05.s049_output/n100.r05.s049.fq1.fastq\" \"n100.r05.s049_output/n100.r05.s049.fq2.fastq\" | samtools view -bS - > \"n100.r05.s049_output/n100.r05.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s049_output/n100.r05.s049.untrimmed.sorted.bam\" \"n100.r05.s049_output/n100.r05.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s049_output/n100.r05.s049.untrimmed.sorted.bam\" -b \"n100.r05.s049_output/n100.r05.s049.primers.bed\" -p \"n100.r05.s049_output/n100.r05.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam\" \"n100.r05.s049_output/n100.r05.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s049_output/n100.r05.s049.reference.fas\" \"n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam\" > \"n100.r05.s049_output/n100.r05.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s049_output/n100.r05.s049.reference.fas\" --call-indels \"n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam\" > \"n100.r05.s049_output/n100.r05.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam\" > \"n100.r05.s049_output/n100.r05.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s049_output/n100.r05.s049.depth.txt\" \"n100.r05.s049_output/n100.r05.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s049_output/n100.r05.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s049_output/n100.r05.s049.reference.fas\" | bcftools consensus -m \"n100.r05.s049_output/n100.r05.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s049_output/n100.r05.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task b5ceb6c6 (flow db9699b5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s010_output\"\n        wget -O \"n100.r05.s010_output/n100.r05.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s010_output/n100.r05.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s010_output/n100.r05.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s010_output/n100.r05.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s010_output/n100.r05.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s010_output/n100.r05.s010.reference.fas\" \"n100.r05.s010_output/n100.r05.s010.fq1.fastq\" \"n100.r05.s010_output/n100.r05.s010.fq2.fastq\" | samtools view -bS - > \"n100.r05.s010_output/n100.r05.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s010_output/n100.r05.s010.untrimmed.sorted.bam\" \"n100.r05.s010_output/n100.r05.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s010_output/n100.r05.s010.untrimmed.sorted.bam\" -b \"n100.r05.s010_output/n100.r05.s010.primers.bed\" -p \"n100.r05.s010_output/n100.r05.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam\" \"n100.r05.s010_output/n100.r05.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s010_output/n100.r05.s010.reference.fas\" \"n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam\" > \"n100.r05.s010_output/n100.r05.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s010_output/n100.r05.s010.reference.fas\" --call-indels \"n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam\" > \"n100.r05.s010_output/n100.r05.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam\" > \"n100.r05.s010_output/n100.r05.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s010_output/n100.r05.s010.depth.txt\" \"n100.r05.s010_output/n100.r05.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s010_output/n100.r05.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s010_output/n100.r05.s010.reference.fas\" | bcftools consensus -m \"n100.r05.s010_output/n100.r05.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s010_output/n100.r05.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task a1c84a70 (flow be90496f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s032_output\"\n        wget -O \"n100.r05.s032_output/n100.r05.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s032_output/n100.r05.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s032_output/n100.r05.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s032_output/n100.r05.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s032_output/n100.r05.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s032_output/n100.r05.s032.reference.fas\" \"n100.r05.s032_output/n100.r05.s032.fq1.fastq\" \"n100.r05.s032_output/n100.r05.s032.fq2.fastq\" | samtools view -bS - > \"n100.r05.s032_output/n100.r05.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s032_output/n100.r05.s032.untrimmed.sorted.bam\" \"n100.r05.s032_output/n100.r05.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s032_output/n100.r05.s032.untrimmed.sorted.bam\" -b \"n100.r05.s032_output/n100.r05.s032.primers.bed\" -p \"n100.r05.s032_output/n100.r05.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam\" \"n100.r05.s032_output/n100.r05.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s032_output/n100.r05.s032.reference.fas\" \"n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam\" > \"n100.r05.s032_output/n100.r05.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s032_output/n100.r05.s032.reference.fas\" --call-indels \"n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam\" > \"n100.r05.s032_output/n100.r05.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam\" > \"n100.r05.s032_output/n100.r05.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s032_output/n100.r05.s032.depth.txt\" \"n100.r05.s032_output/n100.r05.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s032_output/n100.r05.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s032_output/n100.r05.s032.reference.fas\" | bcftools consensus -m \"n100.r05.s032_output/n100.r05.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s032_output/n100.r05.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task d20bb815 (flow 220c7c9b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s056_output\"\n        wget -O \"n100.r05.s056_output/n100.r05.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s056_output/n100.r05.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s056_output/n100.r05.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s056_output/n100.r05.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s056_output/n100.r05.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s056_output/n100.r05.s056.reference.fas\" \"n100.r05.s056_output/n100.r05.s056.fq1.fastq\" \"n100.r05.s056_output/n100.r05.s056.fq2.fastq\" | samtools view -bS - > \"n100.r05.s056_output/n100.r05.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s056_output/n100.r05.s056.untrimmed.sorted.bam\" \"n100.r05.s056_output/n100.r05.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s056_output/n100.r05.s056.untrimmed.sorted.bam\" -b \"n100.r05.s056_output/n100.r05.s056.primers.bed\" -p \"n100.r05.s056_output/n100.r05.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam\" \"n100.r05.s056_output/n100.r05.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s056_output/n100.r05.s056.reference.fas\" \"n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam\" > \"n100.r05.s056_output/n100.r05.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s056_output/n100.r05.s056.reference.fas\" --call-indels \"n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam\" > \"n100.r05.s056_output/n100.r05.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam\" > \"n100.r05.s056_output/n100.r05.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s056_output/n100.r05.s056.depth.txt\" \"n100.r05.s056_output/n100.r05.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s056_output/n100.r05.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s056_output/n100.r05.s056.reference.fas\" | bcftools consensus -m \"n100.r05.s056_output/n100.r05.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s056_output/n100.r05.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 585ad2e5 (flow fff44c7b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s090_output\"\n        wget -O \"n100.r05.s090_output/n100.r05.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s090_output/n100.r05.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s090_output/n100.r05.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s090_output/n100.r05.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s090_output/n100.r05.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s090_output/n100.r05.s090.reference.fas\" \"n100.r05.s090_output/n100.r05.s090.fq1.fastq\" \"n100.r05.s090_output/n100.r05.s090.fq2.fastq\" | samtools view -bS - > \"n100.r05.s090_output/n100.r05.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s090_output/n100.r05.s090.untrimmed.sorted.bam\" \"n100.r05.s090_output/n100.r05.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s090_output/n100.r05.s090.untrimmed.sorted.bam\" -b \"n100.r05.s090_output/n100.r05.s090.primers.bed\" -p \"n100.r05.s090_output/n100.r05.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam\" \"n100.r05.s090_output/n100.r05.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s090_output/n100.r05.s090.reference.fas\" \"n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam\" > \"n100.r05.s090_output/n100.r05.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s090_output/n100.r05.s090.reference.fas\" --call-indels \"n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam\" > \"n100.r05.s090_output/n100.r05.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam\" > \"n100.r05.s090_output/n100.r05.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s090_output/n100.r05.s090.depth.txt\" \"n100.r05.s090_output/n100.r05.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s090_output/n100.r05.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s090_output/n100.r05.s090.reference.fas\" | bcftools consensus -m \"n100.r05.s090_output/n100.r05.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s090_output/n100.r05.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 43f6c42b (flow a15eb662): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s012_output\"\n        wget -O \"n100.r05.s012_output/n100.r05.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s012_output/n100.r05.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s012_output/n100.r05.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s012_output/n100.r05.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s012_output/n100.r05.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s012_output/n100.r05.s012.reference.fas\" \"n100.r05.s012_output/n100.r05.s012.fq1.fastq\" \"n100.r05.s012_output/n100.r05.s012.fq2.fastq\" | samtools view -bS - > \"n100.r05.s012_output/n100.r05.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s012_output/n100.r05.s012.untrimmed.sorted.bam\" \"n100.r05.s012_output/n100.r05.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s012_output/n100.r05.s012.untrimmed.sorted.bam\" -b \"n100.r05.s012_output/n100.r05.s012.primers.bed\" -p \"n100.r05.s012_output/n100.r05.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam\" \"n100.r05.s012_output/n100.r05.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s012_output/n100.r05.s012.reference.fas\" \"n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam\" > \"n100.r05.s012_output/n100.r05.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s012_output/n100.r05.s012.reference.fas\" --call-indels \"n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam\" > \"n100.r05.s012_output/n100.r05.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam\" > \"n100.r05.s012_output/n100.r05.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s012_output/n100.r05.s012.depth.txt\" \"n100.r05.s012_output/n100.r05.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s012_output/n100.r05.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s012_output/n100.r05.s012.reference.fas\" | bcftools consensus -m \"n100.r05.s012_output/n100.r05.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s012_output/n100.r05.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 4618e061 (flow 40e93ad6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s038_output\"\n        wget -O \"n100.r05.s038_output/n100.r05.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s038_output/n100.r05.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s038_output/n100.r05.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s038_output/n100.r05.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s038_output/n100.r05.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s038_output/n100.r05.s038.reference.fas\" \"n100.r05.s038_output/n100.r05.s038.fq1.fastq\" \"n100.r05.s038_output/n100.r05.s038.fq2.fastq\" | samtools view -bS - > \"n100.r05.s038_output/n100.r05.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s038_output/n100.r05.s038.untrimmed.sorted.bam\" \"n100.r05.s038_output/n100.r05.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s038_output/n100.r05.s038.untrimmed.sorted.bam\" -b \"n100.r05.s038_output/n100.r05.s038.primers.bed\" -p \"n100.r05.s038_output/n100.r05.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam\" \"n100.r05.s038_output/n100.r05.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s038_output/n100.r05.s038.reference.fas\" \"n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam\" > \"n100.r05.s038_output/n100.r05.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s038_output/n100.r05.s038.reference.fas\" --call-indels \"n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam\" > \"n100.r05.s038_output/n100.r05.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam\" > \"n100.r05.s038_output/n100.r05.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s038_output/n100.r05.s038.depth.txt\" \"n100.r05.s038_output/n100.r05.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s038_output/n100.r05.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s038_output/n100.r05.s038.reference.fas\" | bcftools consensus -m \"n100.r05.s038_output/n100.r05.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s038_output/n100.r05.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task b81e3e3f (flow 7c2051b2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s024_output\"\n        wget -O \"n100.r05.s024_output/n100.r05.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s024_output/n100.r05.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s024_output/n100.r05.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s024_output/n100.r05.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s024_output/n100.r05.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s024_output/n100.r05.s024.reference.fas\" \"n100.r05.s024_output/n100.r05.s024.fq1.fastq\" \"n100.r05.s024_output/n100.r05.s024.fq2.fastq\" | samtools view -bS - > \"n100.r05.s024_output/n100.r05.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s024_output/n100.r05.s024.untrimmed.sorted.bam\" \"n100.r05.s024_output/n100.r05.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s024_output/n100.r05.s024.untrimmed.sorted.bam\" -b \"n100.r05.s024_output/n100.r05.s024.primers.bed\" -p \"n100.r05.s024_output/n100.r05.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam\" \"n100.r05.s024_output/n100.r05.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s024_output/n100.r05.s024.reference.fas\" \"n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam\" > \"n100.r05.s024_output/n100.r05.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s024_output/n100.r05.s024.reference.fas\" --call-indels \"n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam\" > \"n100.r05.s024_output/n100.r05.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam\" > \"n100.r05.s024_output/n100.r05.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s024_output/n100.r05.s024.depth.txt\" \"n100.r05.s024_output/n100.r05.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s024_output/n100.r05.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s024_output/n100.r05.s024.reference.fas\" | bcftools consensus -m \"n100.r05.s024_output/n100.r05.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s024_output/n100.r05.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task f9272175 (flow b087d69b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s089_output\"\n        wget -O \"n100.r05.s089_output/n100.r05.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s089_output/n100.r05.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s089_output/n100.r05.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s089_output/n100.r05.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s089_output/n100.r05.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s089_output/n100.r05.s089.reference.fas\" \"n100.r05.s089_output/n100.r05.s089.fq1.fastq\" \"n100.r05.s089_output/n100.r05.s089.fq2.fastq\" | samtools view -bS - > \"n100.r05.s089_output/n100.r05.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s089_output/n100.r05.s089.untrimmed.sorted.bam\" \"n100.r05.s089_output/n100.r05.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s089_output/n100.r05.s089.untrimmed.sorted.bam\" -b \"n100.r05.s089_output/n100.r05.s089.primers.bed\" -p \"n100.r05.s089_output/n100.r05.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam\" \"n100.r05.s089_output/n100.r05.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s089_output/n100.r05.s089.reference.fas\" \"n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam\" > \"n100.r05.s089_output/n100.r05.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s089_output/n100.r05.s089.reference.fas\" --call-indels \"n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam\" > \"n100.r05.s089_output/n100.r05.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam\" > \"n100.r05.s089_output/n100.r05.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s089_output/n100.r05.s089.depth.txt\" \"n100.r05.s089_output/n100.r05.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s089_output/n100.r05.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s089_output/n100.r05.s089.reference.fas\" | bcftools consensus -m \"n100.r05.s089_output/n100.r05.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s089_output/n100.r05.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 65048d3f (flow 2ff7e1c2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s064_output\"\n        wget -O \"n100.r05.s064_output/n100.r05.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s064_output/n100.r05.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s064_output/n100.r05.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s064_output/n100.r05.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s064_output/n100.r05.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s064_output/n100.r05.s064.reference.fas\" \"n100.r05.s064_output/n100.r05.s064.fq1.fastq\" \"n100.r05.s064_output/n100.r05.s064.fq2.fastq\" | samtools view -bS - > \"n100.r05.s064_output/n100.r05.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s064_output/n100.r05.s064.untrimmed.sorted.bam\" \"n100.r05.s064_output/n100.r05.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s064_output/n100.r05.s064.untrimmed.sorted.bam\" -b \"n100.r05.s064_output/n100.r05.s064.primers.bed\" -p \"n100.r05.s064_output/n100.r05.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam\" \"n100.r05.s064_output/n100.r05.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s064_output/n100.r05.s064.reference.fas\" \"n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam\" > \"n100.r05.s064_output/n100.r05.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s064_output/n100.r05.s064.reference.fas\" --call-indels \"n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam\" > \"n100.r05.s064_output/n100.r05.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam\" > \"n100.r05.s064_output/n100.r05.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s064_output/n100.r05.s064.depth.txt\" \"n100.r05.s064_output/n100.r05.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s064_output/n100.r05.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s064_output/n100.r05.s064.reference.fas\" | bcftools consensus -m \"n100.r05.s064_output/n100.r05.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s064_output/n100.r05.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task fb5421a4 (flow 0e1a57df): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s097_output\"\n        wget -O \"n100.r05.s097_output/n100.r05.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s097_output/n100.r05.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s097_output/n100.r05.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s097_output/n100.r05.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s097_output/n100.r05.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s097_output/n100.r05.s097.reference.fas\" \"n100.r05.s097_output/n100.r05.s097.fq1.fastq\" \"n100.r05.s097_output/n100.r05.s097.fq2.fastq\" | samtools view -bS - > \"n100.r05.s097_output/n100.r05.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s097_output/n100.r05.s097.untrimmed.sorted.bam\" \"n100.r05.s097_output/n100.r05.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s097_output/n100.r05.s097.untrimmed.sorted.bam\" -b \"n100.r05.s097_output/n100.r05.s097.primers.bed\" -p \"n100.r05.s097_output/n100.r05.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam\" \"n100.r05.s097_output/n100.r05.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s097_output/n100.r05.s097.reference.fas\" \"n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam\" > \"n100.r05.s097_output/n100.r05.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s097_output/n100.r05.s097.reference.fas\" --call-indels \"n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam\" > \"n100.r05.s097_output/n100.r05.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam\" > \"n100.r05.s097_output/n100.r05.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s097_output/n100.r05.s097.depth.txt\" \"n100.r05.s097_output/n100.r05.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s097_output/n100.r05.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s097_output/n100.r05.s097.reference.fas\" | bcftools consensus -m \"n100.r05.s097_output/n100.r05.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s097_output/n100.r05.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 3176835f (flow f4fe708f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s074_output\"\n        wget -O \"n100.r05.s074_output/n100.r05.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s074_output/n100.r05.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s074_output/n100.r05.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s074_output/n100.r05.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s074_output/n100.r05.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s074_output/n100.r05.s074.reference.fas\" \"n100.r05.s074_output/n100.r05.s074.fq1.fastq\" \"n100.r05.s074_output/n100.r05.s074.fq2.fastq\" | samtools view -bS - > \"n100.r05.s074_output/n100.r05.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s074_output/n100.r05.s074.untrimmed.sorted.bam\" \"n100.r05.s074_output/n100.r05.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s074_output/n100.r05.s074.untrimmed.sorted.bam\" -b \"n100.r05.s074_output/n100.r05.s074.primers.bed\" -p \"n100.r05.s074_output/n100.r05.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam\" \"n100.r05.s074_output/n100.r05.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s074_output/n100.r05.s074.reference.fas\" \"n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam\" > \"n100.r05.s074_output/n100.r05.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s074_output/n100.r05.s074.reference.fas\" --call-indels \"n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam\" > \"n100.r05.s074_output/n100.r05.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam\" > \"n100.r05.s074_output/n100.r05.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s074_output/n100.r05.s074.depth.txt\" \"n100.r05.s074_output/n100.r05.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s074_output/n100.r05.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s074_output/n100.r05.s074.reference.fas\" | bcftools consensus -m \"n100.r05.s074_output/n100.r05.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s074_output/n100.r05.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 2d6a723e (flow 0ca87758): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s100_output\"\n        wget -O \"n100.r05.s100_output/n100.r05.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s100_output/n100.r05.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s100_output/n100.r05.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s100_output/n100.r05.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s100_output/n100.r05.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s100_output/n100.r05.s100.reference.fas\" \"n100.r05.s100_output/n100.r05.s100.fq1.fastq\" \"n100.r05.s100_output/n100.r05.s100.fq2.fastq\" | samtools view -bS - > \"n100.r05.s100_output/n100.r05.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s100_output/n100.r05.s100.untrimmed.sorted.bam\" \"n100.r05.s100_output/n100.r05.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s100_output/n100.r05.s100.untrimmed.sorted.bam\" -b \"n100.r05.s100_output/n100.r05.s100.primers.bed\" -p \"n100.r05.s100_output/n100.r05.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam\" \"n100.r05.s100_output/n100.r05.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s100_output/n100.r05.s100.reference.fas\" \"n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam\" > \"n100.r05.s100_output/n100.r05.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s100_output/n100.r05.s100.reference.fas\" --call-indels \"n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam\" > \"n100.r05.s100_output/n100.r05.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam\" > \"n100.r05.s100_output/n100.r05.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s100_output/n100.r05.s100.depth.txt\" \"n100.r05.s100_output/n100.r05.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s100_output/n100.r05.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s100_output/n100.r05.s100.reference.fas\" | bcftools consensus -m \"n100.r05.s100_output/n100.r05.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s100_output/n100.r05.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task d3dae4b0 (flow f18c9534): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s018_output\"\n        wget -O \"n100.r05.s018_output/n100.r05.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s018_output/n100.r05.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s018_output/n100.r05.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s018_output/n100.r05.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s018_output/n100.r05.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s018_output/n100.r05.s018.reference.fas\" \"n100.r05.s018_output/n100.r05.s018.fq1.fastq\" \"n100.r05.s018_output/n100.r05.s018.fq2.fastq\" | samtools view -bS - > \"n100.r05.s018_output/n100.r05.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s018_output/n100.r05.s018.untrimmed.sorted.bam\" \"n100.r05.s018_output/n100.r05.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s018_output/n100.r05.s018.untrimmed.sorted.bam\" -b \"n100.r05.s018_output/n100.r05.s018.primers.bed\" -p \"n100.r05.s018_output/n100.r05.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam\" \"n100.r05.s018_output/n100.r05.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s018_output/n100.r05.s018.reference.fas\" \"n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam\" > \"n100.r05.s018_output/n100.r05.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s018_output/n100.r05.s018.reference.fas\" --call-indels \"n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam\" > \"n100.r05.s018_output/n100.r05.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam\" > \"n100.r05.s018_output/n100.r05.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s018_output/n100.r05.s018.depth.txt\" \"n100.r05.s018_output/n100.r05.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s018_output/n100.r05.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s018_output/n100.r05.s018.reference.fas\" | bcftools consensus -m \"n100.r05.s018_output/n100.r05.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s018_output/n100.r05.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 5cf5576b (flow 0ff39579): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s040_output\"\n        wget -O \"n100.r05.s040_output/n100.r05.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s040_output/n100.r05.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s040_output/n100.r05.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s040_output/n100.r05.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s040_output/n100.r05.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s040_output/n100.r05.s040.reference.fas\" \"n100.r05.s040_output/n100.r05.s040.fq1.fastq\" \"n100.r05.s040_output/n100.r05.s040.fq2.fastq\" | samtools view -bS - > \"n100.r05.s040_output/n100.r05.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s040_output/n100.r05.s040.untrimmed.sorted.bam\" \"n100.r05.s040_output/n100.r05.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s040_output/n100.r05.s040.untrimmed.sorted.bam\" -b \"n100.r05.s040_output/n100.r05.s040.primers.bed\" -p \"n100.r05.s040_output/n100.r05.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam\" \"n100.r05.s040_output/n100.r05.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s040_output/n100.r05.s040.reference.fas\" \"n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam\" > \"n100.r05.s040_output/n100.r05.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s040_output/n100.r05.s040.reference.fas\" --call-indels \"n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam\" > \"n100.r05.s040_output/n100.r05.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam\" > \"n100.r05.s040_output/n100.r05.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s040_output/n100.r05.s040.depth.txt\" \"n100.r05.s040_output/n100.r05.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s040_output/n100.r05.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s040_output/n100.r05.s040.reference.fas\" | bcftools consensus -m \"n100.r05.s040_output/n100.r05.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s040_output/n100.r05.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 34bef674 (flow d9a526d1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s075_output\"\n        wget -O \"n100.r05.s075_output/n100.r05.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s075_output/n100.r05.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s075_output/n100.r05.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s075_output/n100.r05.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s075_output/n100.r05.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s075_output/n100.r05.s075.reference.fas\" \"n100.r05.s075_output/n100.r05.s075.fq1.fastq\" \"n100.r05.s075_output/n100.r05.s075.fq2.fastq\" | samtools view -bS - > \"n100.r05.s075_output/n100.r05.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s075_output/n100.r05.s075.untrimmed.sorted.bam\" \"n100.r05.s075_output/n100.r05.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s075_output/n100.r05.s075.untrimmed.sorted.bam\" -b \"n100.r05.s075_output/n100.r05.s075.primers.bed\" -p \"n100.r05.s075_output/n100.r05.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam\" \"n100.r05.s075_output/n100.r05.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s075_output/n100.r05.s075.reference.fas\" \"n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam\" > \"n100.r05.s075_output/n100.r05.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s075_output/n100.r05.s075.reference.fas\" --call-indels \"n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam\" > \"n100.r05.s075_output/n100.r05.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam\" > \"n100.r05.s075_output/n100.r05.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s075_output/n100.r05.s075.depth.txt\" \"n100.r05.s075_output/n100.r05.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s075_output/n100.r05.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s075_output/n100.r05.s075.reference.fas\" | bcftools consensus -m \"n100.r05.s075_output/n100.r05.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s075_output/n100.r05.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 7848c63f (flow 26ac297d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s048_output\"\n        wget -O \"n100.r05.s048_output/n100.r05.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s048_output/n100.r05.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s048_output/n100.r05.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s048_output/n100.r05.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s048_output/n100.r05.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s048_output/n100.r05.s048.reference.fas\" \"n100.r05.s048_output/n100.r05.s048.fq1.fastq\" \"n100.r05.s048_output/n100.r05.s048.fq2.fastq\" | samtools view -bS - > \"n100.r05.s048_output/n100.r05.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s048_output/n100.r05.s048.untrimmed.sorted.bam\" \"n100.r05.s048_output/n100.r05.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s048_output/n100.r05.s048.untrimmed.sorted.bam\" -b \"n100.r05.s048_output/n100.r05.s048.primers.bed\" -p \"n100.r05.s048_output/n100.r05.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam\" \"n100.r05.s048_output/n100.r05.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s048_output/n100.r05.s048.reference.fas\" \"n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam\" > \"n100.r05.s048_output/n100.r05.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s048_output/n100.r05.s048.reference.fas\" --call-indels \"n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam\" > \"n100.r05.s048_output/n100.r05.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam\" > \"n100.r05.s048_output/n100.r05.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s048_output/n100.r05.s048.depth.txt\" \"n100.r05.s048_output/n100.r05.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s048_output/n100.r05.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s048_output/n100.r05.s048.reference.fas\" | bcftools consensus -m \"n100.r05.s048_output/n100.r05.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s048_output/n100.r05.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task ea078349 (flow 81ef77fc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s037_output\"\n        wget -O \"n100.r05.s037_output/n100.r05.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s037_output/n100.r05.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s037_output/n100.r05.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s037_output/n100.r05.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s037_output/n100.r05.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s037_output/n100.r05.s037.reference.fas\" \"n100.r05.s037_output/n100.r05.s037.fq1.fastq\" \"n100.r05.s037_output/n100.r05.s037.fq2.fastq\" | samtools view -bS - > \"n100.r05.s037_output/n100.r05.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s037_output/n100.r05.s037.untrimmed.sorted.bam\" \"n100.r05.s037_output/n100.r05.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s037_output/n100.r05.s037.untrimmed.sorted.bam\" -b \"n100.r05.s037_output/n100.r05.s037.primers.bed\" -p \"n100.r05.s037_output/n100.r05.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam\" \"n100.r05.s037_output/n100.r05.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s037_output/n100.r05.s037.reference.fas\" \"n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam\" > \"n100.r05.s037_output/n100.r05.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s037_output/n100.r05.s037.reference.fas\" --call-indels \"n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam\" > \"n100.r05.s037_output/n100.r05.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam\" > \"n100.r05.s037_output/n100.r05.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s037_output/n100.r05.s037.depth.txt\" \"n100.r05.s037_output/n100.r05.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s037_output/n100.r05.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s037_output/n100.r05.s037.reference.fas\" | bcftools consensus -m \"n100.r05.s037_output/n100.r05.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s037_output/n100.r05.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task b0d98539 (flow a77292d1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s073_output\"\n        wget -O \"n100.r05.s073_output/n100.r05.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s073_output/n100.r05.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s073_output/n100.r05.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s073_output/n100.r05.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s073_output/n100.r05.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s073_output/n100.r05.s073.reference.fas\" \"n100.r05.s073_output/n100.r05.s073.fq1.fastq\" \"n100.r05.s073_output/n100.r05.s073.fq2.fastq\" | samtools view -bS - > \"n100.r05.s073_output/n100.r05.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s073_output/n100.r05.s073.untrimmed.sorted.bam\" \"n100.r05.s073_output/n100.r05.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s073_output/n100.r05.s073.untrimmed.sorted.bam\" -b \"n100.r05.s073_output/n100.r05.s073.primers.bed\" -p \"n100.r05.s073_output/n100.r05.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam\" \"n100.r05.s073_output/n100.r05.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s073_output/n100.r05.s073.reference.fas\" \"n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam\" > \"n100.r05.s073_output/n100.r05.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s073_output/n100.r05.s073.reference.fas\" --call-indels \"n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam\" > \"n100.r05.s073_output/n100.r05.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam\" > \"n100.r05.s073_output/n100.r05.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s073_output/n100.r05.s073.depth.txt\" \"n100.r05.s073_output/n100.r05.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s073_output/n100.r05.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s073_output/n100.r05.s073.reference.fas\" | bcftools consensus -m \"n100.r05.s073_output/n100.r05.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s073_output/n100.r05.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c84b5c9a (flow c81e95cd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s068_output\"\n        wget -O \"n100.r05.s068_output/n100.r05.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s068_output/n100.r05.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s068_output/n100.r05.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s068_output/n100.r05.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s068_output/n100.r05.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s068_output/n100.r05.s068.reference.fas\" \"n100.r05.s068_output/n100.r05.s068.fq1.fastq\" \"n100.r05.s068_output/n100.r05.s068.fq2.fastq\" | samtools view -bS - > \"n100.r05.s068_output/n100.r05.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s068_output/n100.r05.s068.untrimmed.sorted.bam\" \"n100.r05.s068_output/n100.r05.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s068_output/n100.r05.s068.untrimmed.sorted.bam\" -b \"n100.r05.s068_output/n100.r05.s068.primers.bed\" -p \"n100.r05.s068_output/n100.r05.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam\" \"n100.r05.s068_output/n100.r05.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s068_output/n100.r05.s068.reference.fas\" \"n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam\" > \"n100.r05.s068_output/n100.r05.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s068_output/n100.r05.s068.reference.fas\" --call-indels \"n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam\" > \"n100.r05.s068_output/n100.r05.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam\" > \"n100.r05.s068_output/n100.r05.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s068_output/n100.r05.s068.depth.txt\" \"n100.r05.s068_output/n100.r05.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s068_output/n100.r05.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s068_output/n100.r05.s068.reference.fas\" | bcftools consensus -m \"n100.r05.s068_output/n100.r05.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s068_output/n100.r05.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 7cbf55a6 (flow 148cd5d9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s020_output\"\n        wget -O \"n100.r05.s020_output/n100.r05.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s020_output/n100.r05.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s020_output/n100.r05.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s020_output/n100.r05.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s020_output/n100.r05.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s020_output/n100.r05.s020.reference.fas\" \"n100.r05.s020_output/n100.r05.s020.fq1.fastq\" \"n100.r05.s020_output/n100.r05.s020.fq2.fastq\" | samtools view -bS - > \"n100.r05.s020_output/n100.r05.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s020_output/n100.r05.s020.untrimmed.sorted.bam\" \"n100.r05.s020_output/n100.r05.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s020_output/n100.r05.s020.untrimmed.sorted.bam\" -b \"n100.r05.s020_output/n100.r05.s020.primers.bed\" -p \"n100.r05.s020_output/n100.r05.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam\" \"n100.r05.s020_output/n100.r05.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s020_output/n100.r05.s020.reference.fas\" \"n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam\" > \"n100.r05.s020_output/n100.r05.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s020_output/n100.r05.s020.reference.fas\" --call-indels \"n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam\" > \"n100.r05.s020_output/n100.r05.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam\" > \"n100.r05.s020_output/n100.r05.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s020_output/n100.r05.s020.depth.txt\" \"n100.r05.s020_output/n100.r05.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s020_output/n100.r05.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s020_output/n100.r05.s020.reference.fas\" | bcftools consensus -m \"n100.r05.s020_output/n100.r05.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s020_output/n100.r05.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task f2ba62a4 (flow 48c96476): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s001_output\"\n        wget -O \"n100.r05.s001_output/n100.r05.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s001_output/n100.r05.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s001_output/n100.r05.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s001_output/n100.r05.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s001_output/n100.r05.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s001_output/n100.r05.s001.reference.fas\" \"n100.r05.s001_output/n100.r05.s001.fq1.fastq\" \"n100.r05.s001_output/n100.r05.s001.fq2.fastq\" | samtools view -bS - > \"n100.r05.s001_output/n100.r05.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s001_output/n100.r05.s001.untrimmed.sorted.bam\" \"n100.r05.s001_output/n100.r05.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s001_output/n100.r05.s001.untrimmed.sorted.bam\" -b \"n100.r05.s001_output/n100.r05.s001.primers.bed\" -p \"n100.r05.s001_output/n100.r05.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam\" \"n100.r05.s001_output/n100.r05.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s001_output/n100.r05.s001.reference.fas\" \"n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam\" > \"n100.r05.s001_output/n100.r05.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s001_output/n100.r05.s001.reference.fas\" --call-indels \"n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam\" > \"n100.r05.s001_output/n100.r05.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam\" > \"n100.r05.s001_output/n100.r05.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s001_output/n100.r05.s001.depth.txt\" \"n100.r05.s001_output/n100.r05.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s001_output/n100.r05.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s001_output/n100.r05.s001.reference.fas\" | bcftools consensus -m \"n100.r05.s001_output/n100.r05.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s001_output/n100.r05.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 279b061c (flow f4b07b7e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s043_output\"\n        wget -O \"n100.r05.s043_output/n100.r05.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s043_output/n100.r05.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s043_output/n100.r05.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s043_output/n100.r05.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s043_output/n100.r05.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s043_output/n100.r05.s043.reference.fas\" \"n100.r05.s043_output/n100.r05.s043.fq1.fastq\" \"n100.r05.s043_output/n100.r05.s043.fq2.fastq\" | samtools view -bS - > \"n100.r05.s043_output/n100.r05.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s043_output/n100.r05.s043.untrimmed.sorted.bam\" \"n100.r05.s043_output/n100.r05.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s043_output/n100.r05.s043.untrimmed.sorted.bam\" -b \"n100.r05.s043_output/n100.r05.s043.primers.bed\" -p \"n100.r05.s043_output/n100.r05.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam\" \"n100.r05.s043_output/n100.r05.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s043_output/n100.r05.s043.reference.fas\" \"n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam\" > \"n100.r05.s043_output/n100.r05.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s043_output/n100.r05.s043.reference.fas\" --call-indels \"n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam\" > \"n100.r05.s043_output/n100.r05.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam\" > \"n100.r05.s043_output/n100.r05.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s043_output/n100.r05.s043.depth.txt\" \"n100.r05.s043_output/n100.r05.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s043_output/n100.r05.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s043_output/n100.r05.s043.reference.fas\" | bcftools consensus -m \"n100.r05.s043_output/n100.r05.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s043_output/n100.r05.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task a46930e3 (flow 29d4e1a3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s095_output\"\n        wget -O \"n100.r05.s095_output/n100.r05.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s095_output/n100.r05.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s095_output/n100.r05.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s095_output/n100.r05.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s095_output/n100.r05.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s095_output/n100.r05.s095.reference.fas\" \"n100.r05.s095_output/n100.r05.s095.fq1.fastq\" \"n100.r05.s095_output/n100.r05.s095.fq2.fastq\" | samtools view -bS - > \"n100.r05.s095_output/n100.r05.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s095_output/n100.r05.s095.untrimmed.sorted.bam\" \"n100.r05.s095_output/n100.r05.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s095_output/n100.r05.s095.untrimmed.sorted.bam\" -b \"n100.r05.s095_output/n100.r05.s095.primers.bed\" -p \"n100.r05.s095_output/n100.r05.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam\" \"n100.r05.s095_output/n100.r05.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s095_output/n100.r05.s095.reference.fas\" \"n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam\" > \"n100.r05.s095_output/n100.r05.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s095_output/n100.r05.s095.reference.fas\" --call-indels \"n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam\" > \"n100.r05.s095_output/n100.r05.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam\" > \"n100.r05.s095_output/n100.r05.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s095_output/n100.r05.s095.depth.txt\" \"n100.r05.s095_output/n100.r05.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s095_output/n100.r05.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s095_output/n100.r05.s095.reference.fas\" | bcftools consensus -m \"n100.r05.s095_output/n100.r05.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s095_output/n100.r05.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 65b5b36f (flow d2089de1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s065_output\"\n        wget -O \"n100.r05.s065_output/n100.r05.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s065_output/n100.r05.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s065_output/n100.r05.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s065_output/n100.r05.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s065_output/n100.r05.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s065_output/n100.r05.s065.reference.fas\" \"n100.r05.s065_output/n100.r05.s065.fq1.fastq\" \"n100.r05.s065_output/n100.r05.s065.fq2.fastq\" | samtools view -bS - > \"n100.r05.s065_output/n100.r05.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s065_output/n100.r05.s065.untrimmed.sorted.bam\" \"n100.r05.s065_output/n100.r05.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s065_output/n100.r05.s065.untrimmed.sorted.bam\" -b \"n100.r05.s065_output/n100.r05.s065.primers.bed\" -p \"n100.r05.s065_output/n100.r05.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam\" \"n100.r05.s065_output/n100.r05.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s065_output/n100.r05.s065.reference.fas\" \"n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam\" > \"n100.r05.s065_output/n100.r05.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s065_output/n100.r05.s065.reference.fas\" --call-indels \"n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam\" > \"n100.r05.s065_output/n100.r05.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam\" > \"n100.r05.s065_output/n100.r05.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s065_output/n100.r05.s065.depth.txt\" \"n100.r05.s065_output/n100.r05.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s065_output/n100.r05.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s065_output/n100.r05.s065.reference.fas\" | bcftools consensus -m \"n100.r05.s065_output/n100.r05.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s065_output/n100.r05.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 1075cfc4 (flow 0b598c7d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s019_output\"\n        wget -O \"n100.r05.s019_output/n100.r05.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s019_output/n100.r05.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s019_output/n100.r05.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s019_output/n100.r05.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s019_output/n100.r05.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s019_output/n100.r05.s019.reference.fas\" \"n100.r05.s019_output/n100.r05.s019.fq1.fastq\" \"n100.r05.s019_output/n100.r05.s019.fq2.fastq\" | samtools view -bS - > \"n100.r05.s019_output/n100.r05.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s019_output/n100.r05.s019.untrimmed.sorted.bam\" \"n100.r05.s019_output/n100.r05.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s019_output/n100.r05.s019.untrimmed.sorted.bam\" -b \"n100.r05.s019_output/n100.r05.s019.primers.bed\" -p \"n100.r05.s019_output/n100.r05.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam\" \"n100.r05.s019_output/n100.r05.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s019_output/n100.r05.s019.reference.fas\" \"n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam\" > \"n100.r05.s019_output/n100.r05.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s019_output/n100.r05.s019.reference.fas\" --call-indels \"n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam\" > \"n100.r05.s019_output/n100.r05.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam\" > \"n100.r05.s019_output/n100.r05.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s019_output/n100.r05.s019.depth.txt\" \"n100.r05.s019_output/n100.r05.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s019_output/n100.r05.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s019_output/n100.r05.s019.reference.fas\" | bcftools consensus -m \"n100.r05.s019_output/n100.r05.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s019_output/n100.r05.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 65ef70a2 (flow 877fe836): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s014_output\"\n        wget -O \"n100.r05.s014_output/n100.r05.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s014_output/n100.r05.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s014_output/n100.r05.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s014_output/n100.r05.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s014_output/n100.r05.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s014_output/n100.r05.s014.reference.fas\" \"n100.r05.s014_output/n100.r05.s014.fq1.fastq\" \"n100.r05.s014_output/n100.r05.s014.fq2.fastq\" | samtools view -bS - > \"n100.r05.s014_output/n100.r05.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s014_output/n100.r05.s014.untrimmed.sorted.bam\" \"n100.r05.s014_output/n100.r05.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s014_output/n100.r05.s014.untrimmed.sorted.bam\" -b \"n100.r05.s014_output/n100.r05.s014.primers.bed\" -p \"n100.r05.s014_output/n100.r05.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam\" \"n100.r05.s014_output/n100.r05.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s014_output/n100.r05.s014.reference.fas\" \"n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam\" > \"n100.r05.s014_output/n100.r05.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s014_output/n100.r05.s014.reference.fas\" --call-indels \"n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam\" > \"n100.r05.s014_output/n100.r05.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam\" > \"n100.r05.s014_output/n100.r05.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s014_output/n100.r05.s014.depth.txt\" \"n100.r05.s014_output/n100.r05.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s014_output/n100.r05.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s014_output/n100.r05.s014.reference.fas\" | bcftools consensus -m \"n100.r05.s014_output/n100.r05.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s014_output/n100.r05.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task ed56a43b (flow 4af71a7e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s091_output\"\n        wget -O \"n100.r05.s091_output/n100.r05.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s091_output/n100.r05.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s091_output/n100.r05.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s091_output/n100.r05.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s091_output/n100.r05.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s091_output/n100.r05.s091.reference.fas\" \"n100.r05.s091_output/n100.r05.s091.fq1.fastq\" \"n100.r05.s091_output/n100.r05.s091.fq2.fastq\" | samtools view -bS - > \"n100.r05.s091_output/n100.r05.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s091_output/n100.r05.s091.untrimmed.sorted.bam\" \"n100.r05.s091_output/n100.r05.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s091_output/n100.r05.s091.untrimmed.sorted.bam\" -b \"n100.r05.s091_output/n100.r05.s091.primers.bed\" -p \"n100.r05.s091_output/n100.r05.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam\" \"n100.r05.s091_output/n100.r05.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s091_output/n100.r05.s091.reference.fas\" \"n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam\" > \"n100.r05.s091_output/n100.r05.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s091_output/n100.r05.s091.reference.fas\" --call-indels \"n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam\" > \"n100.r05.s091_output/n100.r05.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam\" > \"n100.r05.s091_output/n100.r05.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s091_output/n100.r05.s091.depth.txt\" \"n100.r05.s091_output/n100.r05.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s091_output/n100.r05.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s091_output/n100.r05.s091.reference.fas\" | bcftools consensus -m \"n100.r05.s091_output/n100.r05.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s091_output/n100.r05.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task f766d6ff (flow 2796e3e6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s004_output\"\n        wget -O \"n100.r05.s004_output/n100.r05.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s004_output/n100.r05.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s004_output/n100.r05.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s004_output/n100.r05.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s004_output/n100.r05.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s004_output/n100.r05.s004.reference.fas\" \"n100.r05.s004_output/n100.r05.s004.fq1.fastq\" \"n100.r05.s004_output/n100.r05.s004.fq2.fastq\" | samtools view -bS - > \"n100.r05.s004_output/n100.r05.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s004_output/n100.r05.s004.untrimmed.sorted.bam\" \"n100.r05.s004_output/n100.r05.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s004_output/n100.r05.s004.untrimmed.sorted.bam\" -b \"n100.r05.s004_output/n100.r05.s004.primers.bed\" -p \"n100.r05.s004_output/n100.r05.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam\" \"n100.r05.s004_output/n100.r05.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s004_output/n100.r05.s004.reference.fas\" \"n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam\" > \"n100.r05.s004_output/n100.r05.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s004_output/n100.r05.s004.reference.fas\" --call-indels \"n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam\" > \"n100.r05.s004_output/n100.r05.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam\" > \"n100.r05.s004_output/n100.r05.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s004_output/n100.r05.s004.depth.txt\" \"n100.r05.s004_output/n100.r05.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s004_output/n100.r05.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s004_output/n100.r05.s004.reference.fas\" | bcftools consensus -m \"n100.r05.s004_output/n100.r05.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s004_output/n100.r05.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 5789b1c4 (flow 5c0cc62e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s096_output\"\n        wget -O \"n100.r05.s096_output/n100.r05.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s096_output/n100.r05.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s096_output/n100.r05.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s096_output/n100.r05.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s096_output/n100.r05.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s096_output/n100.r05.s096.reference.fas\" \"n100.r05.s096_output/n100.r05.s096.fq1.fastq\" \"n100.r05.s096_output/n100.r05.s096.fq2.fastq\" | samtools view -bS - > \"n100.r05.s096_output/n100.r05.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s096_output/n100.r05.s096.untrimmed.sorted.bam\" \"n100.r05.s096_output/n100.r05.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s096_output/n100.r05.s096.untrimmed.sorted.bam\" -b \"n100.r05.s096_output/n100.r05.s096.primers.bed\" -p \"n100.r05.s096_output/n100.r05.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam\" \"n100.r05.s096_output/n100.r05.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s096_output/n100.r05.s096.reference.fas\" \"n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam\" > \"n100.r05.s096_output/n100.r05.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s096_output/n100.r05.s096.reference.fas\" --call-indels \"n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam\" > \"n100.r05.s096_output/n100.r05.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam\" > \"n100.r05.s096_output/n100.r05.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s096_output/n100.r05.s096.depth.txt\" \"n100.r05.s096_output/n100.r05.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s096_output/n100.r05.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s096_output/n100.r05.s096.reference.fas\" | bcftools consensus -m \"n100.r05.s096_output/n100.r05.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s096_output/n100.r05.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 6ab8ace4 (flow adb5f9d2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s045_output\"\n        wget -O \"n100.r05.s045_output/n100.r05.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s045_output/n100.r05.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s045_output/n100.r05.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s045_output/n100.r05.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s045_output/n100.r05.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s045_output/n100.r05.s045.reference.fas\" \"n100.r05.s045_output/n100.r05.s045.fq1.fastq\" \"n100.r05.s045_output/n100.r05.s045.fq2.fastq\" | samtools view -bS - > \"n100.r05.s045_output/n100.r05.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s045_output/n100.r05.s045.untrimmed.sorted.bam\" \"n100.r05.s045_output/n100.r05.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s045_output/n100.r05.s045.untrimmed.sorted.bam\" -b \"n100.r05.s045_output/n100.r05.s045.primers.bed\" -p \"n100.r05.s045_output/n100.r05.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam\" \"n100.r05.s045_output/n100.r05.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s045_output/n100.r05.s045.reference.fas\" \"n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam\" > \"n100.r05.s045_output/n100.r05.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s045_output/n100.r05.s045.reference.fas\" --call-indels \"n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam\" > \"n100.r05.s045_output/n100.r05.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam\" > \"n100.r05.s045_output/n100.r05.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s045_output/n100.r05.s045.depth.txt\" \"n100.r05.s045_output/n100.r05.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s045_output/n100.r05.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s045_output/n100.r05.s045.reference.fas\" | bcftools consensus -m \"n100.r05.s045_output/n100.r05.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s045_output/n100.r05.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 0db5a36a (flow a529c55b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s093_output\"\n        wget -O \"n100.r05.s093_output/n100.r05.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s093_output/n100.r05.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s093_output/n100.r05.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s093_output/n100.r05.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s093_output/n100.r05.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s093_output/n100.r05.s093.reference.fas\" \"n100.r05.s093_output/n100.r05.s093.fq1.fastq\" \"n100.r05.s093_output/n100.r05.s093.fq2.fastq\" | samtools view -bS - > \"n100.r05.s093_output/n100.r05.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s093_output/n100.r05.s093.untrimmed.sorted.bam\" \"n100.r05.s093_output/n100.r05.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s093_output/n100.r05.s093.untrimmed.sorted.bam\" -b \"n100.r05.s093_output/n100.r05.s093.primers.bed\" -p \"n100.r05.s093_output/n100.r05.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam\" \"n100.r05.s093_output/n100.r05.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s093_output/n100.r05.s093.reference.fas\" \"n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam\" > \"n100.r05.s093_output/n100.r05.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s093_output/n100.r05.s093.reference.fas\" --call-indels \"n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam\" > \"n100.r05.s093_output/n100.r05.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam\" > \"n100.r05.s093_output/n100.r05.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s093_output/n100.r05.s093.depth.txt\" \"n100.r05.s093_output/n100.r05.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s093_output/n100.r05.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s093_output/n100.r05.s093.reference.fas\" | bcftools consensus -m \"n100.r05.s093_output/n100.r05.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s093_output/n100.r05.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c3dec1ba (flow 3194fd2a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s051_output\"\n        wget -O \"n100.r05.s051_output/n100.r05.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s051_output/n100.r05.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s051_output/n100.r05.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s051_output/n100.r05.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s051_output/n100.r05.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s051_output/n100.r05.s051.reference.fas\" \"n100.r05.s051_output/n100.r05.s051.fq1.fastq\" \"n100.r05.s051_output/n100.r05.s051.fq2.fastq\" | samtools view -bS - > \"n100.r05.s051_output/n100.r05.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s051_output/n100.r05.s051.untrimmed.sorted.bam\" \"n100.r05.s051_output/n100.r05.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s051_output/n100.r05.s051.untrimmed.sorted.bam\" -b \"n100.r05.s051_output/n100.r05.s051.primers.bed\" -p \"n100.r05.s051_output/n100.r05.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam\" \"n100.r05.s051_output/n100.r05.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s051_output/n100.r05.s051.reference.fas\" \"n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam\" > \"n100.r05.s051_output/n100.r05.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s051_output/n100.r05.s051.reference.fas\" --call-indels \"n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam\" > \"n100.r05.s051_output/n100.r05.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam\" > \"n100.r05.s051_output/n100.r05.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s051_output/n100.r05.s051.depth.txt\" \"n100.r05.s051_output/n100.r05.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s051_output/n100.r05.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s051_output/n100.r05.s051.reference.fas\" | bcftools consensus -m \"n100.r05.s051_output/n100.r05.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s051_output/n100.r05.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 6af0d423 (flow c1226fd8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s055_output\"\n        wget -O \"n100.r05.s055_output/n100.r05.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s055_output/n100.r05.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s055_output/n100.r05.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s055_output/n100.r05.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s055_output/n100.r05.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s055_output/n100.r05.s055.reference.fas\" \"n100.r05.s055_output/n100.r05.s055.fq1.fastq\" \"n100.r05.s055_output/n100.r05.s055.fq2.fastq\" | samtools view -bS - > \"n100.r05.s055_output/n100.r05.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s055_output/n100.r05.s055.untrimmed.sorted.bam\" \"n100.r05.s055_output/n100.r05.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s055_output/n100.r05.s055.untrimmed.sorted.bam\" -b \"n100.r05.s055_output/n100.r05.s055.primers.bed\" -p \"n100.r05.s055_output/n100.r05.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam\" \"n100.r05.s055_output/n100.r05.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s055_output/n100.r05.s055.reference.fas\" \"n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam\" > \"n100.r05.s055_output/n100.r05.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s055_output/n100.r05.s055.reference.fas\" --call-indels \"n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam\" > \"n100.r05.s055_output/n100.r05.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam\" > \"n100.r05.s055_output/n100.r05.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s055_output/n100.r05.s055.depth.txt\" \"n100.r05.s055_output/n100.r05.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s055_output/n100.r05.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s055_output/n100.r05.s055.reference.fas\" | bcftools consensus -m \"n100.r05.s055_output/n100.r05.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s055_output/n100.r05.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c999bc91 (flow 1808ed0b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s060_output\"\n        wget -O \"n100.r05.s060_output/n100.r05.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s060_output/n100.r05.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s060_output/n100.r05.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s060_output/n100.r05.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s060_output/n100.r05.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s060_output/n100.r05.s060.reference.fas\" \"n100.r05.s060_output/n100.r05.s060.fq1.fastq\" \"n100.r05.s060_output/n100.r05.s060.fq2.fastq\" | samtools view -bS - > \"n100.r05.s060_output/n100.r05.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s060_output/n100.r05.s060.untrimmed.sorted.bam\" \"n100.r05.s060_output/n100.r05.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s060_output/n100.r05.s060.untrimmed.sorted.bam\" -b \"n100.r05.s060_output/n100.r05.s060.primers.bed\" -p \"n100.r05.s060_output/n100.r05.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam\" \"n100.r05.s060_output/n100.r05.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s060_output/n100.r05.s060.reference.fas\" \"n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam\" > \"n100.r05.s060_output/n100.r05.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s060_output/n100.r05.s060.reference.fas\" --call-indels \"n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam\" > \"n100.r05.s060_output/n100.r05.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam\" > \"n100.r05.s060_output/n100.r05.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s060_output/n100.r05.s060.depth.txt\" \"n100.r05.s060_output/n100.r05.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s060_output/n100.r05.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s060_output/n100.r05.s060.reference.fas\" | bcftools consensus -m \"n100.r05.s060_output/n100.r05.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s060_output/n100.r05.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task aac314ef (flow 1a055586): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s013_output\"\n        wget -O \"n100.r05.s013_output/n100.r05.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s013_output/n100.r05.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s013_output/n100.r05.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s013_output/n100.r05.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s013_output/n100.r05.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s013_output/n100.r05.s013.reference.fas\" \"n100.r05.s013_output/n100.r05.s013.fq1.fastq\" \"n100.r05.s013_output/n100.r05.s013.fq2.fastq\" | samtools view -bS - > \"n100.r05.s013_output/n100.r05.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s013_output/n100.r05.s013.untrimmed.sorted.bam\" \"n100.r05.s013_output/n100.r05.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s013_output/n100.r05.s013.untrimmed.sorted.bam\" -b \"n100.r05.s013_output/n100.r05.s013.primers.bed\" -p \"n100.r05.s013_output/n100.r05.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam\" \"n100.r05.s013_output/n100.r05.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s013_output/n100.r05.s013.reference.fas\" \"n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam\" > \"n100.r05.s013_output/n100.r05.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s013_output/n100.r05.s013.reference.fas\" --call-indels \"n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam\" > \"n100.r05.s013_output/n100.r05.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam\" > \"n100.r05.s013_output/n100.r05.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s013_output/n100.r05.s013.depth.txt\" \"n100.r05.s013_output/n100.r05.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s013_output/n100.r05.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s013_output/n100.r05.s013.reference.fas\" | bcftools consensus -m \"n100.r05.s013_output/n100.r05.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s013_output/n100.r05.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task b23b5216 (flow 06073390): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s063_output\"\n        wget -O \"n100.r05.s063_output/n100.r05.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s063_output/n100.r05.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s063_output/n100.r05.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s063_output/n100.r05.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s063_output/n100.r05.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s063_output/n100.r05.s063.reference.fas\" \"n100.r05.s063_output/n100.r05.s063.fq1.fastq\" \"n100.r05.s063_output/n100.r05.s063.fq2.fastq\" | samtools view -bS - > \"n100.r05.s063_output/n100.r05.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s063_output/n100.r05.s063.untrimmed.sorted.bam\" \"n100.r05.s063_output/n100.r05.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s063_output/n100.r05.s063.untrimmed.sorted.bam\" -b \"n100.r05.s063_output/n100.r05.s063.primers.bed\" -p \"n100.r05.s063_output/n100.r05.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam\" \"n100.r05.s063_output/n100.r05.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s063_output/n100.r05.s063.reference.fas\" \"n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam\" > \"n100.r05.s063_output/n100.r05.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s063_output/n100.r05.s063.reference.fas\" --call-indels \"n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam\" > \"n100.r05.s063_output/n100.r05.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam\" > \"n100.r05.s063_output/n100.r05.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s063_output/n100.r05.s063.depth.txt\" \"n100.r05.s063_output/n100.r05.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s063_output/n100.r05.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s063_output/n100.r05.s063.reference.fas\" | bcftools consensus -m \"n100.r05.s063_output/n100.r05.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s063_output/n100.r05.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 9a419798 (flow b1537913): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s039_output\"\n        wget -O \"n100.r05.s039_output/n100.r05.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s039_output/n100.r05.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s039_output/n100.r05.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s039_output/n100.r05.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s039_output/n100.r05.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s039_output/n100.r05.s039.reference.fas\" \"n100.r05.s039_output/n100.r05.s039.fq1.fastq\" \"n100.r05.s039_output/n100.r05.s039.fq2.fastq\" | samtools view -bS - > \"n100.r05.s039_output/n100.r05.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s039_output/n100.r05.s039.untrimmed.sorted.bam\" \"n100.r05.s039_output/n100.r05.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s039_output/n100.r05.s039.untrimmed.sorted.bam\" -b \"n100.r05.s039_output/n100.r05.s039.primers.bed\" -p \"n100.r05.s039_output/n100.r05.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam\" \"n100.r05.s039_output/n100.r05.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s039_output/n100.r05.s039.reference.fas\" \"n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam\" > \"n100.r05.s039_output/n100.r05.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s039_output/n100.r05.s039.reference.fas\" --call-indels \"n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam\" > \"n100.r05.s039_output/n100.r05.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam\" > \"n100.r05.s039_output/n100.r05.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s039_output/n100.r05.s039.depth.txt\" \"n100.r05.s039_output/n100.r05.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s039_output/n100.r05.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s039_output/n100.r05.s039.reference.fas\" | bcftools consensus -m \"n100.r05.s039_output/n100.r05.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s039_output/n100.r05.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 600e8f95 (flow f3280027): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s031_output\"\n        wget -O \"n100.r05.s031_output/n100.r05.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s031_output/n100.r05.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s031_output/n100.r05.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s031_output/n100.r05.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s031_output/n100.r05.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s031_output/n100.r05.s031.reference.fas\" \"n100.r05.s031_output/n100.r05.s031.fq1.fastq\" \"n100.r05.s031_output/n100.r05.s031.fq2.fastq\" | samtools view -bS - > \"n100.r05.s031_output/n100.r05.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s031_output/n100.r05.s031.untrimmed.sorted.bam\" \"n100.r05.s031_output/n100.r05.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s031_output/n100.r05.s031.untrimmed.sorted.bam\" -b \"n100.r05.s031_output/n100.r05.s031.primers.bed\" -p \"n100.r05.s031_output/n100.r05.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam\" \"n100.r05.s031_output/n100.r05.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s031_output/n100.r05.s031.reference.fas\" \"n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam\" > \"n100.r05.s031_output/n100.r05.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s031_output/n100.r05.s031.reference.fas\" --call-indels \"n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam\" > \"n100.r05.s031_output/n100.r05.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam\" > \"n100.r05.s031_output/n100.r05.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s031_output/n100.r05.s031.depth.txt\" \"n100.r05.s031_output/n100.r05.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s031_output/n100.r05.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s031_output/n100.r05.s031.reference.fas\" | bcftools consensus -m \"n100.r05.s031_output/n100.r05.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s031_output/n100.r05.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 96f028fe (flow a5550ae3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s057_output\"\n        wget -O \"n100.r05.s057_output/n100.r05.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s057_output/n100.r05.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s057_output/n100.r05.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s057_output/n100.r05.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s057_output/n100.r05.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s057_output/n100.r05.s057.reference.fas\" \"n100.r05.s057_output/n100.r05.s057.fq1.fastq\" \"n100.r05.s057_output/n100.r05.s057.fq2.fastq\" | samtools view -bS - > \"n100.r05.s057_output/n100.r05.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s057_output/n100.r05.s057.untrimmed.sorted.bam\" \"n100.r05.s057_output/n100.r05.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s057_output/n100.r05.s057.untrimmed.sorted.bam\" -b \"n100.r05.s057_output/n100.r05.s057.primers.bed\" -p \"n100.r05.s057_output/n100.r05.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam\" \"n100.r05.s057_output/n100.r05.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s057_output/n100.r05.s057.reference.fas\" \"n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam\" > \"n100.r05.s057_output/n100.r05.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s057_output/n100.r05.s057.reference.fas\" --call-indels \"n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam\" > \"n100.r05.s057_output/n100.r05.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam\" > \"n100.r05.s057_output/n100.r05.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s057_output/n100.r05.s057.depth.txt\" \"n100.r05.s057_output/n100.r05.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s057_output/n100.r05.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s057_output/n100.r05.s057.reference.fas\" | bcftools consensus -m \"n100.r05.s057_output/n100.r05.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s057_output/n100.r05.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 0d2f76e7 (flow c6a48769): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s061_output\"\n        wget -O \"n100.r05.s061_output/n100.r05.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s061_output/n100.r05.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s061_output/n100.r05.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s061_output/n100.r05.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s061_output/n100.r05.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s061_output/n100.r05.s061.reference.fas\" \"n100.r05.s061_output/n100.r05.s061.fq1.fastq\" \"n100.r05.s061_output/n100.r05.s061.fq2.fastq\" | samtools view -bS - > \"n100.r05.s061_output/n100.r05.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s061_output/n100.r05.s061.untrimmed.sorted.bam\" \"n100.r05.s061_output/n100.r05.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s061_output/n100.r05.s061.untrimmed.sorted.bam\" -b \"n100.r05.s061_output/n100.r05.s061.primers.bed\" -p \"n100.r05.s061_output/n100.r05.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam\" \"n100.r05.s061_output/n100.r05.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s061_output/n100.r05.s061.reference.fas\" \"n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam\" > \"n100.r05.s061_output/n100.r05.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s061_output/n100.r05.s061.reference.fas\" --call-indels \"n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam\" > \"n100.r05.s061_output/n100.r05.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam\" > \"n100.r05.s061_output/n100.r05.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s061_output/n100.r05.s061.depth.txt\" \"n100.r05.s061_output/n100.r05.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s061_output/n100.r05.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s061_output/n100.r05.s061.reference.fas\" | bcftools consensus -m \"n100.r05.s061_output/n100.r05.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s061_output/n100.r05.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task eecc9bb8 (flow fe237c23): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s079_output\"\n        wget -O \"n100.r05.s079_output/n100.r05.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s079_output/n100.r05.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s079_output/n100.r05.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s079_output/n100.r05.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s079_output/n100.r05.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s079_output/n100.r05.s079.reference.fas\" \"n100.r05.s079_output/n100.r05.s079.fq1.fastq\" \"n100.r05.s079_output/n100.r05.s079.fq2.fastq\" | samtools view -bS - > \"n100.r05.s079_output/n100.r05.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s079_output/n100.r05.s079.untrimmed.sorted.bam\" \"n100.r05.s079_output/n100.r05.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s079_output/n100.r05.s079.untrimmed.sorted.bam\" -b \"n100.r05.s079_output/n100.r05.s079.primers.bed\" -p \"n100.r05.s079_output/n100.r05.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam\" \"n100.r05.s079_output/n100.r05.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s079_output/n100.r05.s079.reference.fas\" \"n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam\" > \"n100.r05.s079_output/n100.r05.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s079_output/n100.r05.s079.reference.fas\" --call-indels \"n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam\" > \"n100.r05.s079_output/n100.r05.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam\" > \"n100.r05.s079_output/n100.r05.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s079_output/n100.r05.s079.depth.txt\" \"n100.r05.s079_output/n100.r05.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s079_output/n100.r05.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s079_output/n100.r05.s079.reference.fas\" | bcftools consensus -m \"n100.r05.s079_output/n100.r05.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s079_output/n100.r05.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 5db678a8 (flow a4b5dc91): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s070_output\"\n        wget -O \"n100.r05.s070_output/n100.r05.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s070_output/n100.r05.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s070_output/n100.r05.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s070_output/n100.r05.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s070_output/n100.r05.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s070_output/n100.r05.s070.reference.fas\" \"n100.r05.s070_output/n100.r05.s070.fq1.fastq\" \"n100.r05.s070_output/n100.r05.s070.fq2.fastq\" | samtools view -bS - > \"n100.r05.s070_output/n100.r05.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s070_output/n100.r05.s070.untrimmed.sorted.bam\" \"n100.r05.s070_output/n100.r05.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s070_output/n100.r05.s070.untrimmed.sorted.bam\" -b \"n100.r05.s070_output/n100.r05.s070.primers.bed\" -p \"n100.r05.s070_output/n100.r05.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam\" \"n100.r05.s070_output/n100.r05.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s070_output/n100.r05.s070.reference.fas\" \"n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam\" > \"n100.r05.s070_output/n100.r05.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s070_output/n100.r05.s070.reference.fas\" --call-indels \"n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam\" > \"n100.r05.s070_output/n100.r05.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam\" > \"n100.r05.s070_output/n100.r05.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s070_output/n100.r05.s070.depth.txt\" \"n100.r05.s070_output/n100.r05.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s070_output/n100.r05.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s070_output/n100.r05.s070.reference.fas\" | bcftools consensus -m \"n100.r05.s070_output/n100.r05.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s070_output/n100.r05.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 9a6015b6 (flow 9f6cdb6e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s002_output\"\n        wget -O \"n100.r05.s002_output/n100.r05.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s002_output/n100.r05.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s002_output/n100.r05.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s002_output/n100.r05.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s002_output/n100.r05.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s002_output/n100.r05.s002.reference.fas\" \"n100.r05.s002_output/n100.r05.s002.fq1.fastq\" \"n100.r05.s002_output/n100.r05.s002.fq2.fastq\" | samtools view -bS - > \"n100.r05.s002_output/n100.r05.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s002_output/n100.r05.s002.untrimmed.sorted.bam\" \"n100.r05.s002_output/n100.r05.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s002_output/n100.r05.s002.untrimmed.sorted.bam\" -b \"n100.r05.s002_output/n100.r05.s002.primers.bed\" -p \"n100.r05.s002_output/n100.r05.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam\" \"n100.r05.s002_output/n100.r05.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s002_output/n100.r05.s002.reference.fas\" \"n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam\" > \"n100.r05.s002_output/n100.r05.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s002_output/n100.r05.s002.reference.fas\" --call-indels \"n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam\" > \"n100.r05.s002_output/n100.r05.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam\" > \"n100.r05.s002_output/n100.r05.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s002_output/n100.r05.s002.depth.txt\" \"n100.r05.s002_output/n100.r05.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s002_output/n100.r05.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s002_output/n100.r05.s002.reference.fas\" | bcftools consensus -m \"n100.r05.s002_output/n100.r05.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s002_output/n100.r05.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 1de47370 (flow 8813551d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s058_output\"\n        wget -O \"n100.r05.s058_output/n100.r05.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s058_output/n100.r05.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s058_output/n100.r05.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s058_output/n100.r05.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s058_output/n100.r05.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s058_output/n100.r05.s058.reference.fas\" \"n100.r05.s058_output/n100.r05.s058.fq1.fastq\" \"n100.r05.s058_output/n100.r05.s058.fq2.fastq\" | samtools view -bS - > \"n100.r05.s058_output/n100.r05.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s058_output/n100.r05.s058.untrimmed.sorted.bam\" \"n100.r05.s058_output/n100.r05.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s058_output/n100.r05.s058.untrimmed.sorted.bam\" -b \"n100.r05.s058_output/n100.r05.s058.primers.bed\" -p \"n100.r05.s058_output/n100.r05.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam\" \"n100.r05.s058_output/n100.r05.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s058_output/n100.r05.s058.reference.fas\" \"n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam\" > \"n100.r05.s058_output/n100.r05.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s058_output/n100.r05.s058.reference.fas\" --call-indels \"n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam\" > \"n100.r05.s058_output/n100.r05.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam\" > \"n100.r05.s058_output/n100.r05.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s058_output/n100.r05.s058.depth.txt\" \"n100.r05.s058_output/n100.r05.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s058_output/n100.r05.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s058_output/n100.r05.s058.reference.fas\" | bcftools consensus -m \"n100.r05.s058_output/n100.r05.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s058_output/n100.r05.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c24bee6e (flow 877da018): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s084_output\"\n        wget -O \"n100.r05.s084_output/n100.r05.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s084_output/n100.r05.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s084_output/n100.r05.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s084_output/n100.r05.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s084_output/n100.r05.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s084_output/n100.r05.s084.reference.fas\" \"n100.r05.s084_output/n100.r05.s084.fq1.fastq\" \"n100.r05.s084_output/n100.r05.s084.fq2.fastq\" | samtools view -bS - > \"n100.r05.s084_output/n100.r05.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s084_output/n100.r05.s084.untrimmed.sorted.bam\" \"n100.r05.s084_output/n100.r05.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s084_output/n100.r05.s084.untrimmed.sorted.bam\" -b \"n100.r05.s084_output/n100.r05.s084.primers.bed\" -p \"n100.r05.s084_output/n100.r05.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam\" \"n100.r05.s084_output/n100.r05.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s084_output/n100.r05.s084.reference.fas\" \"n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam\" > \"n100.r05.s084_output/n100.r05.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s084_output/n100.r05.s084.reference.fas\" --call-indels \"n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam\" > \"n100.r05.s084_output/n100.r05.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam\" > \"n100.r05.s084_output/n100.r05.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s084_output/n100.r05.s084.depth.txt\" \"n100.r05.s084_output/n100.r05.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s084_output/n100.r05.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s084_output/n100.r05.s084.reference.fas\" | bcftools consensus -m \"n100.r05.s084_output/n100.r05.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s084_output/n100.r05.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 76111d9e (flow 91ea955a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s081_output\"\n        wget -O \"n100.r05.s081_output/n100.r05.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s081_output/n100.r05.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s081_output/n100.r05.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s081_output/n100.r05.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s081_output/n100.r05.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s081_output/n100.r05.s081.reference.fas\" \"n100.r05.s081_output/n100.r05.s081.fq1.fastq\" \"n100.r05.s081_output/n100.r05.s081.fq2.fastq\" | samtools view -bS - > \"n100.r05.s081_output/n100.r05.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s081_output/n100.r05.s081.untrimmed.sorted.bam\" \"n100.r05.s081_output/n100.r05.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s081_output/n100.r05.s081.untrimmed.sorted.bam\" -b \"n100.r05.s081_output/n100.r05.s081.primers.bed\" -p \"n100.r05.s081_output/n100.r05.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam\" \"n100.r05.s081_output/n100.r05.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s081_output/n100.r05.s081.reference.fas\" \"n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam\" > \"n100.r05.s081_output/n100.r05.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s081_output/n100.r05.s081.reference.fas\" --call-indels \"n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam\" > \"n100.r05.s081_output/n100.r05.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam\" > \"n100.r05.s081_output/n100.r05.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s081_output/n100.r05.s081.depth.txt\" \"n100.r05.s081_output/n100.r05.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s081_output/n100.r05.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s081_output/n100.r05.s081.reference.fas\" | bcftools consensus -m \"n100.r05.s081_output/n100.r05.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s081_output/n100.r05.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 34c034d0 (flow 98cff474): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s036_output\"\n        wget -O \"n100.r05.s036_output/n100.r05.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s036_output/n100.r05.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s036_output/n100.r05.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s036_output/n100.r05.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s036_output/n100.r05.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s036_output/n100.r05.s036.reference.fas\" \"n100.r05.s036_output/n100.r05.s036.fq1.fastq\" \"n100.r05.s036_output/n100.r05.s036.fq2.fastq\" | samtools view -bS - > \"n100.r05.s036_output/n100.r05.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s036_output/n100.r05.s036.untrimmed.sorted.bam\" \"n100.r05.s036_output/n100.r05.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s036_output/n100.r05.s036.untrimmed.sorted.bam\" -b \"n100.r05.s036_output/n100.r05.s036.primers.bed\" -p \"n100.r05.s036_output/n100.r05.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam\" \"n100.r05.s036_output/n100.r05.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s036_output/n100.r05.s036.reference.fas\" \"n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam\" > \"n100.r05.s036_output/n100.r05.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s036_output/n100.r05.s036.reference.fas\" --call-indels \"n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam\" > \"n100.r05.s036_output/n100.r05.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam\" > \"n100.r05.s036_output/n100.r05.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s036_output/n100.r05.s036.depth.txt\" \"n100.r05.s036_output/n100.r05.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s036_output/n100.r05.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s036_output/n100.r05.s036.reference.fas\" | bcftools consensus -m \"n100.r05.s036_output/n100.r05.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s036_output/n100.r05.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task b2310ac6 (flow c488bfe1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s028_output\"\n        wget -O \"n100.r05.s028_output/n100.r05.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s028_output/n100.r05.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s028_output/n100.r05.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s028_output/n100.r05.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s028_output/n100.r05.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s028_output/n100.r05.s028.reference.fas\" \"n100.r05.s028_output/n100.r05.s028.fq1.fastq\" \"n100.r05.s028_output/n100.r05.s028.fq2.fastq\" | samtools view -bS - > \"n100.r05.s028_output/n100.r05.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s028_output/n100.r05.s028.untrimmed.sorted.bam\" \"n100.r05.s028_output/n100.r05.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s028_output/n100.r05.s028.untrimmed.sorted.bam\" -b \"n100.r05.s028_output/n100.r05.s028.primers.bed\" -p \"n100.r05.s028_output/n100.r05.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam\" \"n100.r05.s028_output/n100.r05.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s028_output/n100.r05.s028.reference.fas\" \"n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam\" > \"n100.r05.s028_output/n100.r05.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s028_output/n100.r05.s028.reference.fas\" --call-indels \"n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam\" > \"n100.r05.s028_output/n100.r05.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam\" > \"n100.r05.s028_output/n100.r05.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s028_output/n100.r05.s028.depth.txt\" \"n100.r05.s028_output/n100.r05.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s028_output/n100.r05.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s028_output/n100.r05.s028.reference.fas\" | bcftools consensus -m \"n100.r05.s028_output/n100.r05.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s028_output/n100.r05.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task d2c3cd80 (flow d4092336): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s086_output\"\n        wget -O \"n100.r05.s086_output/n100.r05.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s086_output/n100.r05.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s086_output/n100.r05.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s086_output/n100.r05.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s086_output/n100.r05.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s086_output/n100.r05.s086.reference.fas\" \"n100.r05.s086_output/n100.r05.s086.fq1.fastq\" \"n100.r05.s086_output/n100.r05.s086.fq2.fastq\" | samtools view -bS - > \"n100.r05.s086_output/n100.r05.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s086_output/n100.r05.s086.untrimmed.sorted.bam\" \"n100.r05.s086_output/n100.r05.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s086_output/n100.r05.s086.untrimmed.sorted.bam\" -b \"n100.r05.s086_output/n100.r05.s086.primers.bed\" -p \"n100.r05.s086_output/n100.r05.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam\" \"n100.r05.s086_output/n100.r05.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s086_output/n100.r05.s086.reference.fas\" \"n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam\" > \"n100.r05.s086_output/n100.r05.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s086_output/n100.r05.s086.reference.fas\" --call-indels \"n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam\" > \"n100.r05.s086_output/n100.r05.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam\" > \"n100.r05.s086_output/n100.r05.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s086_output/n100.r05.s086.depth.txt\" \"n100.r05.s086_output/n100.r05.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s086_output/n100.r05.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s086_output/n100.r05.s086.reference.fas\" | bcftools consensus -m \"n100.r05.s086_output/n100.r05.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s086_output/n100.r05.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 9f62f6f9 (flow 900dcaae): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s034_output\"\n        wget -O \"n100.r05.s034_output/n100.r05.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s034_output/n100.r05.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s034_output/n100.r05.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s034_output/n100.r05.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s034_output/n100.r05.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s034_output/n100.r05.s034.reference.fas\" \"n100.r05.s034_output/n100.r05.s034.fq1.fastq\" \"n100.r05.s034_output/n100.r05.s034.fq2.fastq\" | samtools view -bS - > \"n100.r05.s034_output/n100.r05.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s034_output/n100.r05.s034.untrimmed.sorted.bam\" \"n100.r05.s034_output/n100.r05.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s034_output/n100.r05.s034.untrimmed.sorted.bam\" -b \"n100.r05.s034_output/n100.r05.s034.primers.bed\" -p \"n100.r05.s034_output/n100.r05.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam\" \"n100.r05.s034_output/n100.r05.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s034_output/n100.r05.s034.reference.fas\" \"n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam\" > \"n100.r05.s034_output/n100.r05.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s034_output/n100.r05.s034.reference.fas\" --call-indels \"n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam\" > \"n100.r05.s034_output/n100.r05.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam\" > \"n100.r05.s034_output/n100.r05.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s034_output/n100.r05.s034.depth.txt\" \"n100.r05.s034_output/n100.r05.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s034_output/n100.r05.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s034_output/n100.r05.s034.reference.fas\" | bcftools consensus -m \"n100.r05.s034_output/n100.r05.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s034_output/n100.r05.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 7ee1dc12 (flow f84e5b81): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s025_output\"\n        wget -O \"n100.r05.s025_output/n100.r05.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s025_output/n100.r05.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s025_output/n100.r05.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s025_output/n100.r05.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s025_output/n100.r05.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s025_output/n100.r05.s025.reference.fas\" \"n100.r05.s025_output/n100.r05.s025.fq1.fastq\" \"n100.r05.s025_output/n100.r05.s025.fq2.fastq\" | samtools view -bS - > \"n100.r05.s025_output/n100.r05.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s025_output/n100.r05.s025.untrimmed.sorted.bam\" \"n100.r05.s025_output/n100.r05.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s025_output/n100.r05.s025.untrimmed.sorted.bam\" -b \"n100.r05.s025_output/n100.r05.s025.primers.bed\" -p \"n100.r05.s025_output/n100.r05.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam\" \"n100.r05.s025_output/n100.r05.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s025_output/n100.r05.s025.reference.fas\" \"n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam\" > \"n100.r05.s025_output/n100.r05.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s025_output/n100.r05.s025.reference.fas\" --call-indels \"n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam\" > \"n100.r05.s025_output/n100.r05.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam\" > \"n100.r05.s025_output/n100.r05.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s025_output/n100.r05.s025.depth.txt\" \"n100.r05.s025_output/n100.r05.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s025_output/n100.r05.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s025_output/n100.r05.s025.reference.fas\" | bcftools consensus -m \"n100.r05.s025_output/n100.r05.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s025_output/n100.r05.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task c33dbb19 (flow e0427763): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s067_output\"\n        wget -O \"n100.r05.s067_output/n100.r05.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s067_output/n100.r05.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s067_output/n100.r05.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s067_output/n100.r05.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s067_output/n100.r05.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s067_output/n100.r05.s067.reference.fas\" \"n100.r05.s067_output/n100.r05.s067.fq1.fastq\" \"n100.r05.s067_output/n100.r05.s067.fq2.fastq\" | samtools view -bS - > \"n100.r05.s067_output/n100.r05.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s067_output/n100.r05.s067.untrimmed.sorted.bam\" \"n100.r05.s067_output/n100.r05.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s067_output/n100.r05.s067.untrimmed.sorted.bam\" -b \"n100.r05.s067_output/n100.r05.s067.primers.bed\" -p \"n100.r05.s067_output/n100.r05.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam\" \"n100.r05.s067_output/n100.r05.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s067_output/n100.r05.s067.reference.fas\" \"n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam\" > \"n100.r05.s067_output/n100.r05.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s067_output/n100.r05.s067.reference.fas\" --call-indels \"n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam\" > \"n100.r05.s067_output/n100.r05.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam\" > \"n100.r05.s067_output/n100.r05.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s067_output/n100.r05.s067.depth.txt\" \"n100.r05.s067_output/n100.r05.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s067_output/n100.r05.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s067_output/n100.r05.s067.reference.fas\" | bcftools consensus -m \"n100.r05.s067_output/n100.r05.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s067_output/n100.r05.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 3f52d60b (flow 176763f6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s022_output\"\n        wget -O \"n100.r05.s022_output/n100.r05.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s022_output/n100.r05.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s022_output/n100.r05.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s022_output/n100.r05.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s022_output/n100.r05.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s022_output/n100.r05.s022.reference.fas\" \"n100.r05.s022_output/n100.r05.s022.fq1.fastq\" \"n100.r05.s022_output/n100.r05.s022.fq2.fastq\" | samtools view -bS - > \"n100.r05.s022_output/n100.r05.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s022_output/n100.r05.s022.untrimmed.sorted.bam\" \"n100.r05.s022_output/n100.r05.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s022_output/n100.r05.s022.untrimmed.sorted.bam\" -b \"n100.r05.s022_output/n100.r05.s022.primers.bed\" -p \"n100.r05.s022_output/n100.r05.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam\" \"n100.r05.s022_output/n100.r05.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s022_output/n100.r05.s022.reference.fas\" \"n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam\" > \"n100.r05.s022_output/n100.r05.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s022_output/n100.r05.s022.reference.fas\" --call-indels \"n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam\" > \"n100.r05.s022_output/n100.r05.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam\" > \"n100.r05.s022_output/n100.r05.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s022_output/n100.r05.s022.depth.txt\" \"n100.r05.s022_output/n100.r05.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s022_output/n100.r05.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s022_output/n100.r05.s022.reference.fas\" | bcftools consensus -m \"n100.r05.s022_output/n100.r05.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s022_output/n100.r05.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 93e71401 (flow 4e7609db): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s011_output\"\n        wget -O \"n100.r05.s011_output/n100.r05.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s011_output/n100.r05.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s011_output/n100.r05.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s011_output/n100.r05.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s011_output/n100.r05.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s011_output/n100.r05.s011.reference.fas\" \"n100.r05.s011_output/n100.r05.s011.fq1.fastq\" \"n100.r05.s011_output/n100.r05.s011.fq2.fastq\" | samtools view -bS - > \"n100.r05.s011_output/n100.r05.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s011_output/n100.r05.s011.untrimmed.sorted.bam\" \"n100.r05.s011_output/n100.r05.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s011_output/n100.r05.s011.untrimmed.sorted.bam\" -b \"n100.r05.s011_output/n100.r05.s011.primers.bed\" -p \"n100.r05.s011_output/n100.r05.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam\" \"n100.r05.s011_output/n100.r05.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s011_output/n100.r05.s011.reference.fas\" \"n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam\" > \"n100.r05.s011_output/n100.r05.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s011_output/n100.r05.s011.reference.fas\" --call-indels \"n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam\" > \"n100.r05.s011_output/n100.r05.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam\" > \"n100.r05.s011_output/n100.r05.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s011_output/n100.r05.s011.depth.txt\" \"n100.r05.s011_output/n100.r05.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s011_output/n100.r05.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s011_output/n100.r05.s011.reference.fas\" | bcftools consensus -m \"n100.r05.s011_output/n100.r05.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s011_output/n100.r05.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 3b4791e9 (flow e7ffbcd4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s021_output\"\n        wget -O \"n100.r05.s021_output/n100.r05.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s021_output/n100.r05.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s021_output/n100.r05.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s021_output/n100.r05.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s021_output/n100.r05.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s021_output/n100.r05.s021.reference.fas\" \"n100.r05.s021_output/n100.r05.s021.fq1.fastq\" \"n100.r05.s021_output/n100.r05.s021.fq2.fastq\" | samtools view -bS - > \"n100.r05.s021_output/n100.r05.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s021_output/n100.r05.s021.untrimmed.sorted.bam\" \"n100.r05.s021_output/n100.r05.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s021_output/n100.r05.s021.untrimmed.sorted.bam\" -b \"n100.r05.s021_output/n100.r05.s021.primers.bed\" -p \"n100.r05.s021_output/n100.r05.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam\" \"n100.r05.s021_output/n100.r05.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s021_output/n100.r05.s021.reference.fas\" \"n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam\" > \"n100.r05.s021_output/n100.r05.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s021_output/n100.r05.s021.reference.fas\" --call-indels \"n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam\" > \"n100.r05.s021_output/n100.r05.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam\" > \"n100.r05.s021_output/n100.r05.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s021_output/n100.r05.s021.depth.txt\" \"n100.r05.s021_output/n100.r05.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s021_output/n100.r05.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s021_output/n100.r05.s021.reference.fas\" | bcftools consensus -m \"n100.r05.s021_output/n100.r05.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s021_output/n100.r05.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task cebd915c (flow 202fcb82): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s026_output\"\n        wget -O \"n100.r05.s026_output/n100.r05.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s026_output/n100.r05.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s026_output/n100.r05.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s026_output/n100.r05.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s026_output/n100.r05.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s026_output/n100.r05.s026.reference.fas\" \"n100.r05.s026_output/n100.r05.s026.fq1.fastq\" \"n100.r05.s026_output/n100.r05.s026.fq2.fastq\" | samtools view -bS - > \"n100.r05.s026_output/n100.r05.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s026_output/n100.r05.s026.untrimmed.sorted.bam\" \"n100.r05.s026_output/n100.r05.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s026_output/n100.r05.s026.untrimmed.sorted.bam\" -b \"n100.r05.s026_output/n100.r05.s026.primers.bed\" -p \"n100.r05.s026_output/n100.r05.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam\" \"n100.r05.s026_output/n100.r05.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s026_output/n100.r05.s026.reference.fas\" \"n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam\" > \"n100.r05.s026_output/n100.r05.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s026_output/n100.r05.s026.reference.fas\" --call-indels \"n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam\" > \"n100.r05.s026_output/n100.r05.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam\" > \"n100.r05.s026_output/n100.r05.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s026_output/n100.r05.s026.depth.txt\" \"n100.r05.s026_output/n100.r05.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s026_output/n100.r05.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s026_output/n100.r05.s026.reference.fas\" | bcftools consensus -m \"n100.r05.s026_output/n100.r05.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s026_output/n100.r05.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 43b97eb9 (flow bc0eb545): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s015_output\"\n        wget -O \"n100.r05.s015_output/n100.r05.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s015_output/n100.r05.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s015_output/n100.r05.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s015_output/n100.r05.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s015_output/n100.r05.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s015_output/n100.r05.s015.reference.fas\" \"n100.r05.s015_output/n100.r05.s015.fq1.fastq\" \"n100.r05.s015_output/n100.r05.s015.fq2.fastq\" | samtools view -bS - > \"n100.r05.s015_output/n100.r05.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s015_output/n100.r05.s015.untrimmed.sorted.bam\" \"n100.r05.s015_output/n100.r05.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s015_output/n100.r05.s015.untrimmed.sorted.bam\" -b \"n100.r05.s015_output/n100.r05.s015.primers.bed\" -p \"n100.r05.s015_output/n100.r05.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam\" \"n100.r05.s015_output/n100.r05.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s015_output/n100.r05.s015.reference.fas\" \"n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam\" > \"n100.r05.s015_output/n100.r05.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s015_output/n100.r05.s015.reference.fas\" --call-indels \"n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam\" > \"n100.r05.s015_output/n100.r05.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam\" > \"n100.r05.s015_output/n100.r05.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s015_output/n100.r05.s015.depth.txt\" \"n100.r05.s015_output/n100.r05.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s015_output/n100.r05.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s015_output/n100.r05.s015.reference.fas\" | bcftools consensus -m \"n100.r05.s015_output/n100.r05.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s015_output/n100.r05.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task b8a3f011 (flow 81bfa0a3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s071_output\"\n        wget -O \"n100.r05.s071_output/n100.r05.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s071_output/n100.r05.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s071_output/n100.r05.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s071_output/n100.r05.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s071_output/n100.r05.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s071_output/n100.r05.s071.reference.fas\" \"n100.r05.s071_output/n100.r05.s071.fq1.fastq\" \"n100.r05.s071_output/n100.r05.s071.fq2.fastq\" | samtools view -bS - > \"n100.r05.s071_output/n100.r05.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s071_output/n100.r05.s071.untrimmed.sorted.bam\" \"n100.r05.s071_output/n100.r05.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s071_output/n100.r05.s071.untrimmed.sorted.bam\" -b \"n100.r05.s071_output/n100.r05.s071.primers.bed\" -p \"n100.r05.s071_output/n100.r05.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam\" \"n100.r05.s071_output/n100.r05.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s071_output/n100.r05.s071.reference.fas\" \"n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam\" > \"n100.r05.s071_output/n100.r05.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s071_output/n100.r05.s071.reference.fas\" --call-indels \"n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam\" > \"n100.r05.s071_output/n100.r05.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam\" > \"n100.r05.s071_output/n100.r05.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s071_output/n100.r05.s071.depth.txt\" \"n100.r05.s071_output/n100.r05.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s071_output/n100.r05.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s071_output/n100.r05.s071.reference.fas\" | bcftools consensus -m \"n100.r05.s071_output/n100.r05.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s071_output/n100.r05.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 222946cd (flow 37eb25e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s047_output\"\n        wget -O \"n100.r05.s047_output/n100.r05.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s047_output/n100.r05.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s047_output/n100.r05.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s047_output/n100.r05.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s047_output/n100.r05.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s047_output/n100.r05.s047.reference.fas\" \"n100.r05.s047_output/n100.r05.s047.fq1.fastq\" \"n100.r05.s047_output/n100.r05.s047.fq2.fastq\" | samtools view -bS - > \"n100.r05.s047_output/n100.r05.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s047_output/n100.r05.s047.untrimmed.sorted.bam\" \"n100.r05.s047_output/n100.r05.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s047_output/n100.r05.s047.untrimmed.sorted.bam\" -b \"n100.r05.s047_output/n100.r05.s047.primers.bed\" -p \"n100.r05.s047_output/n100.r05.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam\" \"n100.r05.s047_output/n100.r05.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s047_output/n100.r05.s047.reference.fas\" \"n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam\" > \"n100.r05.s047_output/n100.r05.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s047_output/n100.r05.s047.reference.fas\" --call-indels \"n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam\" > \"n100.r05.s047_output/n100.r05.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam\" > \"n100.r05.s047_output/n100.r05.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s047_output/n100.r05.s047.depth.txt\" \"n100.r05.s047_output/n100.r05.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s047_output/n100.r05.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s047_output/n100.r05.s047.reference.fas\" | bcftools consensus -m \"n100.r05.s047_output/n100.r05.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s047_output/n100.r05.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 5d6d53bd (flow bc5769e6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s030_output\"\n        wget -O \"n100.r05.s030_output/n100.r05.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s030_output/n100.r05.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s030_output/n100.r05.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s030_output/n100.r05.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s030_output/n100.r05.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s030_output/n100.r05.s030.reference.fas\" \"n100.r05.s030_output/n100.r05.s030.fq1.fastq\" \"n100.r05.s030_output/n100.r05.s030.fq2.fastq\" | samtools view -bS - > \"n100.r05.s030_output/n100.r05.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s030_output/n100.r05.s030.untrimmed.sorted.bam\" \"n100.r05.s030_output/n100.r05.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s030_output/n100.r05.s030.untrimmed.sorted.bam\" -b \"n100.r05.s030_output/n100.r05.s030.primers.bed\" -p \"n100.r05.s030_output/n100.r05.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam\" \"n100.r05.s030_output/n100.r05.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s030_output/n100.r05.s030.reference.fas\" \"n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam\" > \"n100.r05.s030_output/n100.r05.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s030_output/n100.r05.s030.reference.fas\" --call-indels \"n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam\" > \"n100.r05.s030_output/n100.r05.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam\" > \"n100.r05.s030_output/n100.r05.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s030_output/n100.r05.s030.depth.txt\" \"n100.r05.s030_output/n100.r05.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s030_output/n100.r05.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s030_output/n100.r05.s030.reference.fas\" | bcftools consensus -m \"n100.r05.s030_output/n100.r05.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s030_output/n100.r05.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 8772ed6d (flow 8fb434f6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s035_output\"\n        wget -O \"n100.r05.s035_output/n100.r05.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s035_output/n100.r05.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s035_output/n100.r05.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s035_output/n100.r05.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s035_output/n100.r05.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s035_output/n100.r05.s035.reference.fas\" \"n100.r05.s035_output/n100.r05.s035.fq1.fastq\" \"n100.r05.s035_output/n100.r05.s035.fq2.fastq\" | samtools view -bS - > \"n100.r05.s035_output/n100.r05.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s035_output/n100.r05.s035.untrimmed.sorted.bam\" \"n100.r05.s035_output/n100.r05.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s035_output/n100.r05.s035.untrimmed.sorted.bam\" -b \"n100.r05.s035_output/n100.r05.s035.primers.bed\" -p \"n100.r05.s035_output/n100.r05.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam\" \"n100.r05.s035_output/n100.r05.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s035_output/n100.r05.s035.reference.fas\" \"n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam\" > \"n100.r05.s035_output/n100.r05.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s035_output/n100.r05.s035.reference.fas\" --call-indels \"n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam\" > \"n100.r05.s035_output/n100.r05.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam\" > \"n100.r05.s035_output/n100.r05.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s035_output/n100.r05.s035.depth.txt\" \"n100.r05.s035_output/n100.r05.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s035_output/n100.r05.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s035_output/n100.r05.s035.reference.fas\" | bcftools consensus -m \"n100.r05.s035_output/n100.r05.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s035_output/n100.r05.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task d41d72e6 (flow 821aa882): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s041_output\"\n        wget -O \"n100.r05.s041_output/n100.r05.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s041_output/n100.r05.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s041_output/n100.r05.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s041_output/n100.r05.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s041_output/n100.r05.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s041_output/n100.r05.s041.reference.fas\" \"n100.r05.s041_output/n100.r05.s041.fq1.fastq\" \"n100.r05.s041_output/n100.r05.s041.fq2.fastq\" | samtools view -bS - > \"n100.r05.s041_output/n100.r05.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s041_output/n100.r05.s041.untrimmed.sorted.bam\" \"n100.r05.s041_output/n100.r05.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s041_output/n100.r05.s041.untrimmed.sorted.bam\" -b \"n100.r05.s041_output/n100.r05.s041.primers.bed\" -p \"n100.r05.s041_output/n100.r05.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam\" \"n100.r05.s041_output/n100.r05.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s041_output/n100.r05.s041.reference.fas\" \"n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam\" > \"n100.r05.s041_output/n100.r05.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s041_output/n100.r05.s041.reference.fas\" --call-indels \"n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam\" > \"n100.r05.s041_output/n100.r05.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam\" > \"n100.r05.s041_output/n100.r05.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s041_output/n100.r05.s041.depth.txt\" \"n100.r05.s041_output/n100.r05.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s041_output/n100.r05.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s041_output/n100.r05.s041.reference.fas\" | bcftools consensus -m \"n100.r05.s041_output/n100.r05.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s041_output/n100.r05.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task a2233715 (flow a5cfc129): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s082_output\"\n        wget -O \"n100.r05.s082_output/n100.r05.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s082_output/n100.r05.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s082_output/n100.r05.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s082_output/n100.r05.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s082_output/n100.r05.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s082_output/n100.r05.s082.reference.fas\" \"n100.r05.s082_output/n100.r05.s082.fq1.fastq\" \"n100.r05.s082_output/n100.r05.s082.fq2.fastq\" | samtools view -bS - > \"n100.r05.s082_output/n100.r05.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s082_output/n100.r05.s082.untrimmed.sorted.bam\" \"n100.r05.s082_output/n100.r05.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s082_output/n100.r05.s082.untrimmed.sorted.bam\" -b \"n100.r05.s082_output/n100.r05.s082.primers.bed\" -p \"n100.r05.s082_output/n100.r05.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam\" \"n100.r05.s082_output/n100.r05.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s082_output/n100.r05.s082.reference.fas\" \"n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam\" > \"n100.r05.s082_output/n100.r05.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s082_output/n100.r05.s082.reference.fas\" --call-indels \"n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam\" > \"n100.r05.s082_output/n100.r05.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam\" > \"n100.r05.s082_output/n100.r05.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s082_output/n100.r05.s082.depth.txt\" \"n100.r05.s082_output/n100.r05.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s082_output/n100.r05.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s082_output/n100.r05.s082.reference.fas\" | bcftools consensus -m \"n100.r05.s082_output/n100.r05.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s082_output/n100.r05.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task ed2138a1 (flow aef25be2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s009_output\"\n        wget -O \"n100.r05.s009_output/n100.r05.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s009_output/n100.r05.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s009_output/n100.r05.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s009_output/n100.r05.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s009_output/n100.r05.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s009_output/n100.r05.s009.reference.fas\" \"n100.r05.s009_output/n100.r05.s009.fq1.fastq\" \"n100.r05.s009_output/n100.r05.s009.fq2.fastq\" | samtools view -bS - > \"n100.r05.s009_output/n100.r05.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s009_output/n100.r05.s009.untrimmed.sorted.bam\" \"n100.r05.s009_output/n100.r05.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s009_output/n100.r05.s009.untrimmed.sorted.bam\" -b \"n100.r05.s009_output/n100.r05.s009.primers.bed\" -p \"n100.r05.s009_output/n100.r05.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam\" \"n100.r05.s009_output/n100.r05.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s009_output/n100.r05.s009.reference.fas\" \"n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam\" > \"n100.r05.s009_output/n100.r05.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s009_output/n100.r05.s009.reference.fas\" --call-indels \"n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam\" > \"n100.r05.s009_output/n100.r05.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam\" > \"n100.r05.s009_output/n100.r05.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s009_output/n100.r05.s009.depth.txt\" \"n100.r05.s009_output/n100.r05.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s009_output/n100.r05.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s009_output/n100.r05.s009.reference.fas\" | bcftools consensus -m \"n100.r05.s009_output/n100.r05.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s009_output/n100.r05.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 740318b7 (flow 9a2a57fd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s080_output\"\n        wget -O \"n100.r05.s080_output/n100.r05.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s080_output/n100.r05.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s080_output/n100.r05.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s080_output/n100.r05.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s080_output/n100.r05.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s080_output/n100.r05.s080.reference.fas\" \"n100.r05.s080_output/n100.r05.s080.fq1.fastq\" \"n100.r05.s080_output/n100.r05.s080.fq2.fastq\" | samtools view -bS - > \"n100.r05.s080_output/n100.r05.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s080_output/n100.r05.s080.untrimmed.sorted.bam\" \"n100.r05.s080_output/n100.r05.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s080_output/n100.r05.s080.untrimmed.sorted.bam\" -b \"n100.r05.s080_output/n100.r05.s080.primers.bed\" -p \"n100.r05.s080_output/n100.r05.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam\" \"n100.r05.s080_output/n100.r05.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s080_output/n100.r05.s080.reference.fas\" \"n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam\" > \"n100.r05.s080_output/n100.r05.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s080_output/n100.r05.s080.reference.fas\" --call-indels \"n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam\" > \"n100.r05.s080_output/n100.r05.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam\" > \"n100.r05.s080_output/n100.r05.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s080_output/n100.r05.s080.depth.txt\" \"n100.r05.s080_output/n100.r05.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s080_output/n100.r05.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s080_output/n100.r05.s080.reference.fas\" | bcftools consensus -m \"n100.r05.s080_output/n100.r05.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s080_output/n100.r05.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 7f4a126f (flow 67971600): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s046_output\"\n        wget -O \"n100.r05.s046_output/n100.r05.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s046_output/n100.r05.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s046_output/n100.r05.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s046_output/n100.r05.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s046_output/n100.r05.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s046_output/n100.r05.s046.reference.fas\" \"n100.r05.s046_output/n100.r05.s046.fq1.fastq\" \"n100.r05.s046_output/n100.r05.s046.fq2.fastq\" | samtools view -bS - > \"n100.r05.s046_output/n100.r05.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s046_output/n100.r05.s046.untrimmed.sorted.bam\" \"n100.r05.s046_output/n100.r05.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s046_output/n100.r05.s046.untrimmed.sorted.bam\" -b \"n100.r05.s046_output/n100.r05.s046.primers.bed\" -p \"n100.r05.s046_output/n100.r05.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam\" \"n100.r05.s046_output/n100.r05.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s046_output/n100.r05.s046.reference.fas\" \"n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam\" > \"n100.r05.s046_output/n100.r05.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s046_output/n100.r05.s046.reference.fas\" --call-indels \"n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam\" > \"n100.r05.s046_output/n100.r05.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam\" > \"n100.r05.s046_output/n100.r05.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s046_output/n100.r05.s046.depth.txt\" \"n100.r05.s046_output/n100.r05.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s046_output/n100.r05.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s046_output/n100.r05.s046.reference.fas\" | bcftools consensus -m \"n100.r05.s046_output/n100.r05.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s046_output/n100.r05.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task fb3965bb (flow 3518f790): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s003_output\"\n        wget -O \"n100.r05.s003_output/n100.r05.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s003_output/n100.r05.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s003_output/n100.r05.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s003_output/n100.r05.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s003_output/n100.r05.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s003_output/n100.r05.s003.reference.fas\" \"n100.r05.s003_output/n100.r05.s003.fq1.fastq\" \"n100.r05.s003_output/n100.r05.s003.fq2.fastq\" | samtools view -bS - > \"n100.r05.s003_output/n100.r05.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s003_output/n100.r05.s003.untrimmed.sorted.bam\" \"n100.r05.s003_output/n100.r05.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s003_output/n100.r05.s003.untrimmed.sorted.bam\" -b \"n100.r05.s003_output/n100.r05.s003.primers.bed\" -p \"n100.r05.s003_output/n100.r05.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam\" \"n100.r05.s003_output/n100.r05.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s003_output/n100.r05.s003.reference.fas\" \"n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam\" > \"n100.r05.s003_output/n100.r05.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s003_output/n100.r05.s003.reference.fas\" --call-indels \"n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam\" > \"n100.r05.s003_output/n100.r05.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam\" > \"n100.r05.s003_output/n100.r05.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s003_output/n100.r05.s003.depth.txt\" \"n100.r05.s003_output/n100.r05.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s003_output/n100.r05.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s003_output/n100.r05.s003.reference.fas\" | bcftools consensus -m \"n100.r05.s003_output/n100.r05.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s003_output/n100.r05.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:09 scheduler task 67f515d1 (flow 55fa0156): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r05.s027_output\"\n        wget -O \"n100.r05.s027_output/n100.r05.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r05.s027_output/n100.r05.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r05.s027_output/n100.r05.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r05.s027_output/n100.r05.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r05.s027_output/n100.r05.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r05.s027_output/n100.r05.s027.reference.fas\" \"n100.r05.s027_output/n100.r05.s027.fq1.fastq\" \"n100.r05.s027_output/n100.r05.s027.fq2.fastq\" | samtools view -bS - > \"n100.r05.s027_output/n100.r05.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s027_output/n100.r05.s027.untrimmed.sorted.bam\" \"n100.r05.s027_output/n100.r05.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r05.s027_output/n100.r05.s027.untrimmed.sorted.bam\" -b \"n100.r05.s027_output/n100.r05.s027.primers.bed\" -p \"n100.r05.s027_output/n100.r05.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam\" \"n100.r05.s027_output/n100.r05.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r05.s027_output/n100.r05.s027.reference.fas\" \"n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam\" > \"n100.r05.s027_output/n100.r05.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r05.s027_output/n100.r05.s027.reference.fas\" --call-indels \"n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam\" > \"n100.r05.s027_output/n100.r05.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam\" > \"n100.r05.s027_output/n100.r05.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r05.s027_output/n100.r05.s027.depth.txt\" \"n100.r05.s027_output/n100.r05.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r05.s027_output/n100.r05.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r05.s027_output/n100.r05.s027.reference.fas\" | bcftools consensus -m \"n100.r05.s027_output/n100.r05.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r05.s027_output/n100.r05.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r05.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r05/n100.r05.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r05/n100.r05.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:58:52 scheduler task 3a4d9596 (flow 6fa0a4b3): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 67f515d1 (flow 55fa0156): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task fb3965bb (flow 3518f790): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7f4a126f (flow 67971600): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 740318b7 (flow 9a2a57fd): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task ed2138a1 (flow aef25be2): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task a2233715 (flow a5cfc129): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task d41d72e6 (flow 821aa882): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 3a4d9596 (flow 6fa0a4b3): loading (try 0): started
2021/07/08 16:58:52 scheduler task d41d72e6 (flow 821aa882): loading (try 0): started
2021/07/08 16:58:52 scheduler task 67f515d1 (flow 55fa0156): loading (try 0): started
2021/07/08 16:58:52 scheduler task 8772ed6d (flow 8fb434f6): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7f4a126f (flow 67971600): loading (try 0): started
2021/07/08 16:58:52 scheduler task d41d72e6 (flow 821aa882): loading val<.=s3://niema-test/n100/r05/n100.r05.s041_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a2233715 (flow a5cfc129): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7f4a126f (flow 67971600): loading val<.=s3://niema-test/n100/r05/n100.r05.s046_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 8772ed6d (flow 8fb434f6): loading (try 0): started
2021/07/08 16:58:52 scheduler task a2233715 (flow a5cfc129): loading val<.=s3://niema-test/n100/r05/n100.r05.s082_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 8772ed6d (flow 8fb434f6): loading val<.=s3://niema-test/n100/r05/n100.r05.s035_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 8772ed6d (flow 8fb434f6): loading val<.=s3://niema-test/n100/r05/n100.r05.s035_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a2233715 (flow a5cfc129): loading val<.=s3://niema-test/n100/r05/n100.r05.s082_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3a4d9596 (flow 6fa0a4b3): loading val<.=s3://niema-test/n100/r05/n100.r05.s033_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 67f515d1 (flow 55fa0156): loading val<.=s3://niema-test/n100/r05/n100.r05.s027_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ed2138a1 (flow aef25be2): loading (try 0): started
2021/07/08 16:58:52 scheduler task ed2138a1 (flow aef25be2): loading val<.=s3://niema-test/n100/r05/n100.r05.s009_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3a4d9596 (flow 6fa0a4b3): loading val<.=s3://niema-test/n100/r05/n100.r05.s033_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ed2138a1 (flow aef25be2): loading val<.=s3://niema-test/n100/r05/n100.r05.s009_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fb3965bb (flow 3518f790): loading (try 0): started
2021/07/08 16:58:52 scheduler task d41d72e6 (flow 821aa882): loading val<.=s3://niema-test/n100/r05/n100.r05.s041_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fb3965bb (flow 3518f790): loading val<.=s3://niema-test/n100/r05/n100.r05.s003_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 67f515d1 (flow 55fa0156): loading val<.=s3://niema-test/n100/r05/n100.r05.s027_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7f4a126f (flow 67971600): loading val<.=s3://niema-test/n100/r05/n100.r05.s046_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 740318b7 (flow 9a2a57fd): loading (try 0): started
2021/07/08 16:58:52 scheduler task 740318b7 (flow 9a2a57fd): loading val<.=s3://niema-test/n100/r05/n100.r05.s080_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5d6d53bd (flow bc5769e6): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 222946cd (flow 37eb25e3): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task b8a3f011 (flow 81bfa0a3): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 43b97eb9 (flow bc0eb545): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task cebd915c (flow 202fcb82): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 3b4791e9 (flow e7ffbcd4): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 93e71401 (flow 4e7609db): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 3f52d60b (flow 176763f6): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c33dbb19 (flow e0427763): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7ee1dc12 (flow f84e5b81): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 9f62f6f9 (flow 900dcaae): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task d2c3cd80 (flow d4092336): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task b8a3f011 (flow 81bfa0a3): loading (try 0): started
2021/07/08 16:58:52 scheduler task 5d6d53bd (flow bc5769e6): loading (try 0): started
2021/07/08 16:58:52 scheduler task c33dbb19 (flow e0427763): loading (try 0): started
2021/07/08 16:58:52 scheduler task 3f52d60b (flow 176763f6): loading (try 0): started
2021/07/08 16:58:52 scheduler task 5d6d53bd (flow bc5769e6): loading val<.=s3://niema-test/n100/r05/n100.r05.s030_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c33dbb19 (flow e0427763): loading val<.=s3://niema-test/n100/r05/n100.r05.s067_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3f52d60b (flow 176763f6): loading val<.=s3://niema-test/n100/r05/n100.r05.s022_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3f52d60b (flow 176763f6): loading val<.=s3://niema-test/n100/r05/n100.r05.s022_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fb3965bb (flow 3518f790): loading val<.=s3://niema-test/n100/r05/n100.r05.s003_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task cebd915c (flow 202fcb82): loading (try 0): started
2021/07/08 16:58:52 scheduler task cebd915c (flow 202fcb82): loading val<.=s3://niema-test/n100/r05/n100.r05.s026_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b2310ac6 (flow c488bfe1): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 34c034d0 (flow 98cff474): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 76111d9e (flow 91ea955a): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c24bee6e (flow 877da018): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 1de47370 (flow 8813551d): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 9a6015b6 (flow 9f6cdb6e): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 5db678a8 (flow a4b5dc91): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task eecc9bb8 (flow fe237c23): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 0d2f76e7 (flow c6a48769): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 96f028fe (flow a5550ae3): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 600e8f95 (flow f3280027): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 9a419798 (flow b1537913): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task b23b5216 (flow 06073390): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task aac314ef (flow 1a055586): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c999bc91 (flow 1808ed0b): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 6af0d423 (flow c1226fd8): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c3dec1ba (flow 3194fd2a): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 0db5a36a (flow a529c55b): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 6ab8ace4 (flow adb5f9d2): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 5789b1c4 (flow 5c0cc62e): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task eecc9bb8 (flow fe237c23): loading (try 0): started
2021/07/08 16:58:52 scheduler task 9a419798 (flow b1537913): loading (try 0): started
2021/07/08 16:58:52 scheduler task 5db678a8 (flow a4b5dc91): loading (try 0): started
2021/07/08 16:58:52 scheduler task 1de47370 (flow 8813551d): loading (try 0): started
2021/07/08 16:58:52 scheduler task 9a419798 (flow b1537913): loading val<.=s3://niema-test/n100/r05/n100.r05.s039_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5db678a8 (flow a4b5dc91): loading val<.=s3://niema-test/n100/r05/n100.r05.s070_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 1de47370 (flow 8813551d): loading val<.=s3://niema-test/n100/r05/n100.r05.s058_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task aac314ef (flow 1a055586): loading (try 0): started
2021/07/08 16:58:52 scheduler task 6af0d423 (flow c1226fd8): loading (try 0): started
2021/07/08 16:58:52 scheduler task cebd915c (flow 202fcb82): loading val<.=s3://niema-test/n100/r05/n100.r05.s026_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task aac314ef (flow 1a055586): loading val<.=s3://niema-test/n100/r05/n100.r05.s013_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6af0d423 (flow c1226fd8): loading val<.=s3://niema-test/n100/r05/n100.r05.s055_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6af0d423 (flow c1226fd8): loading val<.=s3://niema-test/n100/r05/n100.r05.s055_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 43b97eb9 (flow bc0eb545): loading (try 0): started
2021/07/08 16:58:52 scheduler task 43b97eb9 (flow bc0eb545): loading val<.=s3://niema-test/n100/r05/n100.r05.s015_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d2c3cd80 (flow d4092336): loading (try 0): started
2021/07/08 16:58:52 scheduler task d2c3cd80 (flow d4092336): loading val<.=s3://niema-test/n100/r05/n100.r05.s086_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 43b97eb9 (flow bc0eb545): loading val<.=s3://niema-test/n100/r05/n100.r05.s015_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 740318b7 (flow 9a2a57fd): loading val<.=s3://niema-test/n100/r05/n100.r05.s080_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 93e71401 (flow 4e7609db): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7ee1dc12 (flow f84e5b81): loading (try 0): started
2021/07/08 16:58:52 scheduler task d2c3cd80 (flow d4092336): loading val<.=s3://niema-test/n100/r05/n100.r05.s086_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7ee1dc12 (flow f84e5b81): loading val<.=s3://niema-test/n100/r05/n100.r05.s025_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 222946cd (flow 37eb25e3): loading (try 0): started
2021/07/08 16:58:52 scheduler task 222946cd (flow 37eb25e3): loading val<.=s3://niema-test/n100/r05/n100.r05.s047_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9f62f6f9 (flow 900dcaae): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7ee1dc12 (flow f84e5b81): loading val<.=s3://niema-test/n100/r05/n100.r05.s025_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9f62f6f9 (flow 900dcaae): loading val<.=s3://niema-test/n100/r05/n100.r05.s034_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 222946cd (flow 37eb25e3): loading val<.=s3://niema-test/n100/r05/n100.r05.s047_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b8a3f011 (flow 81bfa0a3): loading val<.=s3://niema-test/n100/r05/n100.r05.s071_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b8a3f011 (flow 81bfa0a3): loading val<.=s3://niema-test/n100/r05/n100.r05.s071_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5d6d53bd (flow bc5769e6): loading val<.=s3://niema-test/n100/r05/n100.r05.s030_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c33dbb19 (flow e0427763): loading val<.=s3://niema-test/n100/r05/n100.r05.s067_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task f766d6ff (flow 2796e3e6): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task ed56a43b (flow 4af71a7e): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 65ef70a2 (flow 877fe836): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 1075cfc4 (flow 0b598c7d): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 65b5b36f (flow d2089de1): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task a46930e3 (flow 29d4e1a3): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 279b061c (flow f4b07b7e): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task f2ba62a4 (flow 48c96476): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7cbf55a6 (flow 148cd5d9): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c84b5c9a (flow c81e95cd): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task b0d98539 (flow a77292d1): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task ea078349 (flow 81ef77fc): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7848c63f (flow 26ac297d): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 34bef674 (flow d9a526d1): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 5cf5576b (flow 0ff39579): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task d3dae4b0 (flow f18c9534): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 2d6a723e (flow 0ca87758): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 3176835f (flow f4fe708f): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task fb5421a4 (flow 0e1a57df): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 65048d3f (flow 2ff7e1c2): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task f9272175 (flow b087d69b): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task b81e3e3f (flow 7c2051b2): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 4618e061 (flow 40e93ad6): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 34bef674 (flow d9a526d1): loading (try 0): started
2021/07/08 16:58:52 scheduler task c84b5c9a (flow c81e95cd): loading (try 0): started
2021/07/08 16:58:52 scheduler task 2d6a723e (flow 0ca87758): loading (try 0): started
2021/07/08 16:58:52 scheduler task 65ef70a2 (flow 877fe836): loading (try 0): started
2021/07/08 16:58:52 scheduler task f766d6ff (flow 2796e3e6): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7848c63f (flow 26ac297d): loading (try 0): started
2021/07/08 16:58:52 scheduler task f9272175 (flow b087d69b): loading (try 0): started
2021/07/08 16:58:52 scheduler task f766d6ff (flow 2796e3e6): loading val<.=s3://niema-test/n100/r05/n100.r05.s004_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 279b061c (flow f4b07b7e): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7848c63f (flow 26ac297d): loading val<.=s3://niema-test/n100/r05/n100.r05.s048_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 279b061c (flow f4b07b7e): loading val<.=s3://niema-test/n100/r05/n100.r05.s043_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9f62f6f9 (flow 900dcaae): loading val<.=s3://niema-test/n100/r05/n100.r05.s034_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 43f6c42b (flow a15eb662): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task f2ba62a4 (flow 48c96476): loading (try 0): started
2021/07/08 16:58:52 scheduler task 43f6c42b (flow a15eb662): loading (try 0): started
2021/07/08 16:58:52 scheduler task 43f6c42b (flow a15eb662): loading val<.=s3://niema-test/n100/r05/n100.r05.s012_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ed56a43b (flow 4af71a7e): loading (try 0): started
2021/07/08 16:58:52 scheduler task f2ba62a4 (flow 48c96476): loading val<.=s3://niema-test/n100/r05/n100.r05.s001_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ed56a43b (flow 4af71a7e): loading val<.=s3://niema-test/n100/r05/n100.r05.s091_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c84b5c9a (flow c81e95cd): loading val<.=s3://niema-test/n100/r05/n100.r05.s068_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task f2ba62a4 (flow 48c96476): loading val<.=s3://niema-test/n100/r05/n100.r05.s001_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 43f6c42b (flow a15eb662): loading val<.=s3://niema-test/n100/r05/n100.r05.s012_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5789b1c4 (flow 5c0cc62e): loading (try 0): started
2021/07/08 16:58:52 scheduler task ed56a43b (flow 4af71a7e): loading val<.=s3://niema-test/n100/r05/n100.r05.s091_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5789b1c4 (flow 5c0cc62e): loading val<.=s3://niema-test/n100/r05/n100.r05.s096_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b2310ac6 (flow c488bfe1): loading (try 0): started
2021/07/08 16:58:52 scheduler task b2310ac6 (flow c488bfe1): loading val<.=s3://niema-test/n100/r05/n100.r05.s028_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5789b1c4 (flow 5c0cc62e): loading val<.=s3://niema-test/n100/r05/n100.r05.s096_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 96f028fe (flow a5550ae3): loading (try 0): started
2021/07/08 16:58:52 scheduler task c3dec1ba (flow 3194fd2a): loading (try 0): started
2021/07/08 16:58:52 scheduler task eecc9bb8 (flow fe237c23): loading val<.=s3://niema-test/n100/r05/n100.r05.s079_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c999bc91 (flow 1808ed0b): loading (try 0): started
2021/07/08 16:58:52 scheduler task c24bee6e (flow 877da018): loading (try 0): started
2021/07/08 16:58:52 scheduler task b23b5216 (flow 06073390): loading (try 0): started
2021/07/08 16:58:52 scheduler task eecc9bb8 (flow fe237c23): loading val<.=s3://niema-test/n100/r05/n100.r05.s079_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 600e8f95 (flow f3280027): loading (try 0): started
2021/07/08 16:58:52 scheduler task 0db5a36a (flow a529c55b): loading (try 0): started
2021/07/08 16:58:52 scheduler task 0d2f76e7 (flow c6a48769): loading (try 0): started
2021/07/08 16:58:52 scheduler task 9a419798 (flow b1537913): loading val<.=s3://niema-test/n100/r05/n100.r05.s039_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6ab8ace4 (flow adb5f9d2): loading (try 0): started
2021/07/08 16:58:52 scheduler task 9a6015b6 (flow 9f6cdb6e): loading (try 0): started
2021/07/08 16:58:52 scheduler task 5db678a8 (flow a4b5dc91): loading val<.=s3://niema-test/n100/r05/n100.r05.s070_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 76111d9e (flow 91ea955a): loading (try 0): started
2021/07/08 16:58:52 scheduler task 1de47370 (flow 8813551d): loading val<.=s3://niema-test/n100/r05/n100.r05.s058_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task aac314ef (flow 1a055586): loading val<.=s3://niema-test/n100/r05/n100.r05.s013_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 93e71401 (flow 4e7609db): loading val<.=s3://niema-test/n100/r05/n100.r05.s011_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 93e71401 (flow 4e7609db): loading val<.=s3://niema-test/n100/r05/n100.r05.s011_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5cf5576b (flow 0ff39579): loading (try 0): started
2021/07/08 16:58:52 scheduler task d3dae4b0 (flow f18c9534): loading (try 0): started
2021/07/08 16:58:52 scheduler task 34bef674 (flow d9a526d1): loading val<.=s3://niema-test/n100/r05/n100.r05.s075_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3b4791e9 (flow e7ffbcd4): loading (try 0): started
2021/07/08 16:58:52 scheduler task 2d6a723e (flow 0ca87758): loading val<.=s3://niema-test/n100/r05/n100.r05.s100_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 65ef70a2 (flow 877fe836): loading val<.=s3://niema-test/n100/r05/n100.r05.s014_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c84b5c9a (flow c81e95cd): loading val<.=s3://niema-test/n100/r05/n100.r05.s068_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 2d6a723e (flow 0ca87758): loading val<.=s3://niema-test/n100/r05/n100.r05.s100_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b81e3e3f (flow 7c2051b2): loading (try 0): started
2021/07/08 16:58:52 scheduler task b0d98539 (flow a77292d1): loading (try 0): started
2021/07/08 16:58:52 scheduler task 34bef674 (flow d9a526d1): loading val<.=s3://niema-test/n100/r05/n100.r05.s075_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 1075cfc4 (flow 0b598c7d): loading (try 0): started
2021/07/08 16:58:52 scheduler task 65ef70a2 (flow 877fe836): loading val<.=s3://niema-test/n100/r05/n100.r05.s014_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3176835f (flow f4fe708f): loading (try 0): started
2021/07/08 16:58:52 scheduler task 65048d3f (flow 2ff7e1c2): loading (try 0): started
2021/07/08 16:58:52 scheduler task 65b5b36f (flow d2089de1): loading (try 0): started
2021/07/08 16:58:52 scheduler task 4618e061 (flow 40e93ad6): loading (try 0): started
2021/07/08 16:58:52 scheduler task fb5421a4 (flow 0e1a57df): loading (try 0): started
2021/07/08 16:58:52 scheduler task ea078349 (flow 81ef77fc): loading (try 0): started
2021/07/08 16:58:52 scheduler task f766d6ff (flow 2796e3e6): loading val<.=s3://niema-test/n100/r05/n100.r05.s004_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7848c63f (flow 26ac297d): loading val<.=s3://niema-test/n100/r05/n100.r05.s048_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task f9272175 (flow b087d69b): loading val<.=s3://niema-test/n100/r05/n100.r05.s089_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task f9272175 (flow b087d69b): loading val<.=s3://niema-test/n100/r05/n100.r05.s089_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a46930e3 (flow 29d4e1a3): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7cbf55a6 (flow 148cd5d9): loading (try 0): started
2021/07/08 16:58:52 scheduler task 279b061c (flow f4b07b7e): loading val<.=s3://niema-test/n100/r05/n100.r05.s043_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 585ad2e5 (flow fff44c7b): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 34c034d0 (flow 98cff474): loading (try 0): started
2021/07/08 16:58:52 scheduler task b2310ac6 (flow c488bfe1): loading val<.=s3://niema-test/n100/r05/n100.r05.s028_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 96f028fe (flow a5550ae3): loading val<.=s3://niema-test/n100/r05/n100.r05.s057_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c3dec1ba (flow 3194fd2a): loading val<.=s3://niema-test/n100/r05/n100.r05.s051_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 96f028fe (flow a5550ae3): loading val<.=s3://niema-test/n100/r05/n100.r05.s057_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c999bc91 (flow 1808ed0b): loading val<.=s3://niema-test/n100/r05/n100.r05.s060_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c3dec1ba (flow 3194fd2a): loading val<.=s3://niema-test/n100/r05/n100.r05.s051_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c24bee6e (flow 877da018): loading val<.=s3://niema-test/n100/r05/n100.r05.s084_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c999bc91 (flow 1808ed0b): loading val<.=s3://niema-test/n100/r05/n100.r05.s060_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b23b5216 (flow 06073390): loading val<.=s3://niema-test/n100/r05/n100.r05.s063_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b23b5216 (flow 06073390): loading val<.=s3://niema-test/n100/r05/n100.r05.s063_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c24bee6e (flow 877da018): loading val<.=s3://niema-test/n100/r05/n100.r05.s084_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 600e8f95 (flow f3280027): loading val<.=s3://niema-test/n100/r05/n100.r05.s031_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 0db5a36a (flow a529c55b): loading val<.=s3://niema-test/n100/r05/n100.r05.s093_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 0db5a36a (flow a529c55b): loading val<.=s3://niema-test/n100/r05/n100.r05.s093_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 600e8f95 (flow f3280027): loading val<.=s3://niema-test/n100/r05/n100.r05.s031_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 0d2f76e7 (flow c6a48769): loading val<.=s3://niema-test/n100/r05/n100.r05.s061_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6ab8ace4 (flow adb5f9d2): loading val<.=s3://niema-test/n100/r05/n100.r05.s045_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 0d2f76e7 (flow c6a48769): loading val<.=s3://niema-test/n100/r05/n100.r05.s061_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9a6015b6 (flow 9f6cdb6e): loading val<.=s3://niema-test/n100/r05/n100.r05.s002_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6ab8ace4 (flow adb5f9d2): loading val<.=s3://niema-test/n100/r05/n100.r05.s045_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9a6015b6 (flow 9f6cdb6e): loading val<.=s3://niema-test/n100/r05/n100.r05.s002_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 76111d9e (flow 91ea955a): loading val<.=s3://niema-test/n100/r05/n100.r05.s081_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5cf5576b (flow 0ff39579): loading val<.=s3://niema-test/n100/r05/n100.r05.s040_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 76111d9e (flow 91ea955a): loading val<.=s3://niema-test/n100/r05/n100.r05.s081_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d3dae4b0 (flow f18c9534): loading val<.=s3://niema-test/n100/r05/n100.r05.s018_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 5cf5576b (flow 0ff39579): loading val<.=s3://niema-test/n100/r05/n100.r05.s040_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d3dae4b0 (flow f18c9534): loading val<.=s3://niema-test/n100/r05/n100.r05.s018_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3b4791e9 (flow e7ffbcd4): loading val<.=s3://niema-test/n100/r05/n100.r05.s021_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3b4791e9 (flow e7ffbcd4): loading val<.=s3://niema-test/n100/r05/n100.r05.s021_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b81e3e3f (flow 7c2051b2): loading val<.=s3://niema-test/n100/r05/n100.r05.s024_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b0d98539 (flow a77292d1): loading val<.=s3://niema-test/n100/r05/n100.r05.s073_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b81e3e3f (flow 7c2051b2): loading val<.=s3://niema-test/n100/r05/n100.r05.s024_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b0d98539 (flow a77292d1): loading val<.=s3://niema-test/n100/r05/n100.r05.s073_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 1075cfc4 (flow 0b598c7d): loading val<.=s3://niema-test/n100/r05/n100.r05.s019_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 1075cfc4 (flow 0b598c7d): loading val<.=s3://niema-test/n100/r05/n100.r05.s019_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3176835f (flow f4fe708f): loading val<.=s3://niema-test/n100/r05/n100.r05.s074_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 65048d3f (flow 2ff7e1c2): loading val<.=s3://niema-test/n100/r05/n100.r05.s064_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 3176835f (flow f4fe708f): loading val<.=s3://niema-test/n100/r05/n100.r05.s074_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 65b5b36f (flow d2089de1): loading val<.=s3://niema-test/n100/r05/n100.r05.s065_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 65048d3f (flow 2ff7e1c2): loading val<.=s3://niema-test/n100/r05/n100.r05.s064_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 65b5b36f (flow d2089de1): loading val<.=s3://niema-test/n100/r05/n100.r05.s065_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 4618e061 (flow 40e93ad6): loading val<.=s3://niema-test/n100/r05/n100.r05.s038_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 4618e061 (flow 40e93ad6): loading val<.=s3://niema-test/n100/r05/n100.r05.s038_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fb5421a4 (flow 0e1a57df): loading val<.=s3://niema-test/n100/r05/n100.r05.s097_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fb5421a4 (flow 0e1a57df): loading val<.=s3://niema-test/n100/r05/n100.r05.s097_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ea078349 (flow 81ef77fc): loading val<.=s3://niema-test/n100/r05/n100.r05.s037_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ea078349 (flow 81ef77fc): loading val<.=s3://niema-test/n100/r05/n100.r05.s037_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a46930e3 (flow 29d4e1a3): loading val<.=s3://niema-test/n100/r05/n100.r05.s095_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7cbf55a6 (flow 148cd5d9): loading val<.=s3://niema-test/n100/r05/n100.r05.s020_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a46930e3 (flow 29d4e1a3): loading val<.=s3://niema-test/n100/r05/n100.r05.s095_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7cbf55a6 (flow 148cd5d9): loading val<.=s3://niema-test/n100/r05/n100.r05.s020_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d20bb815 (flow 220c7c9b): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 585ad2e5 (flow fff44c7b): loading (try 0): started
2021/07/08 16:58:52 scheduler task 34c034d0 (flow 98cff474): loading val<.=s3://niema-test/n100/r05/n100.r05.s036_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 34c034d0 (flow 98cff474): loading val<.=s3://niema-test/n100/r05/n100.r05.s036_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a1c84a70 (flow be90496f): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task b5ceb6c6 (flow db9699b5): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 91519b5f (flow b2cb8afe): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task e551941a (flow ea8b7e31): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 27b13502 (flow 152eb222): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 25b5d38e (flow b7cf4504): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 79820afa (flow c5f1bdef): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 72a551ca (flow 8cf24afe): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 8438db44 (flow 8f98d048): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c171a9af (flow f5a0e33a): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task fa285b2b (flow 65deac98): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task be23124b (flow 5d6d4385): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 95aeedb8 (flow fc144875): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 541b05df (flow 28c707dc): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task a959f1cd (flow deb5653c): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 4ac811a5 (flow 62342884): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 94683d3a (flow 96139b10): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7fd21a08 (flow 5b62101d): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 70748d2b (flow dab8c84e): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 83c1b665 (flow 9dafcfc9): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 895b6be6 (flow 4ea7450d): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 887f8caf (flow da518317): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 8438db44 (flow 8f98d048): loading (try 0): started
2021/07/08 16:58:52 scheduler task 4ac811a5 (flow 62342884): loading (try 0): started
2021/07/08 16:58:52 scheduler task a959f1cd (flow deb5653c): loading (try 0): started
2021/07/08 16:58:52 scheduler task 25b5d38e (flow b7cf4504): loading (try 0): started
2021/07/08 16:58:52 scheduler task 83c1b665 (flow 9dafcfc9): loading (try 0): started
2021/07/08 16:58:52 scheduler task 79820afa (flow c5f1bdef): loading (try 0): started
2021/07/08 16:58:52 scheduler task 83c1b665 (flow 9dafcfc9): loading val<.=s3://niema-test/n100/r05/n100.r05.s029_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 25b5d38e (flow b7cf4504): loading val<.=s3://niema-test/n100/r05/n100.r05.s098_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 91519b5f (flow b2cb8afe): loading (try 0): started
2021/07/08 16:58:52 scheduler task 4ac811a5 (flow 62342884): loading val<.=s3://niema-test/n100/r05/n100.r05.s083_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 79820afa (flow c5f1bdef): loading val<.=s3://niema-test/n100/r05/n100.r05.s069_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 91519b5f (flow b2cb8afe): loading val<.=s3://niema-test/n100/r05/n100.r05.s049_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 4ac811a5 (flow 62342884): loading val<.=s3://niema-test/n100/r05/n100.r05.s083_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 46c9fba6 (flow c2a88629): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 9cf7175b (flow 03bf8a77): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 6a846499 (flow 410e42f3): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task cdca394a (flow 777a4ca0): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 7016df0e (flow c5ad9cb9): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task c504d35d (flow 7c5932bc): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task ef9b0bc7 (flow 18d94a36): assigning to alloc ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:58:52 scheduler task 8438db44 (flow 8f98d048): loading val<.=s3://niema-test/n100/r05/n100.r05.s054_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 46c9fba6 (flow c2a88629): loading (try 0): started
2021/07/08 16:58:52 scheduler task 46c9fba6 (flow c2a88629): loading val<.=s3://niema-test/n100/r05/n100.r05.s066_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9cf7175b (flow 03bf8a77): loading (try 0): started
2021/07/08 16:58:52 scheduler task 9cf7175b (flow 03bf8a77): loading val<.=s3://niema-test/n100/r05/n100.r05.s050_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6a846499 (flow 410e42f3): loading (try 0): started
2021/07/08 16:58:52 scheduler task 6a846499 (flow 410e42f3): loading val<.=s3://niema-test/n100/r05/n100.r05.s006_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 70748d2b (flow dab8c84e): loading (try 0): started
2021/07/08 16:58:52 scheduler task cdca394a (flow 777a4ca0): loading (try 0): started
2021/07/08 16:58:52 scheduler task 585ad2e5 (flow fff44c7b): loading val<.=s3://niema-test/n100/r05/n100.r05.s090_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 70748d2b (flow dab8c84e): loading val<.=s3://niema-test/n100/r05/n100.r05.s092_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task cdca394a (flow 777a4ca0): loading val<.=s3://niema-test/n100/r05/n100.r05.s099_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 70748d2b (flow dab8c84e): loading val<.=s3://niema-test/n100/r05/n100.r05.s092_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 887f8caf (flow da518317): loading (try 0): started
2021/07/08 16:58:52 scheduler task 887f8caf (flow da518317): loading val<.=s3://niema-test/n100/r05/n100.r05.s088_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 8438db44 (flow 8f98d048): loading val<.=s3://niema-test/n100/r05/n100.r05.s054_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 94683d3a (flow 96139b10): loading (try 0): started
2021/07/08 16:58:52 scheduler task 94683d3a (flow 96139b10): loading val<.=s3://niema-test/n100/r05/n100.r05.s042_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 887f8caf (flow da518317): loading val<.=s3://niema-test/n100/r05/n100.r05.s088_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 27b13502 (flow 152eb222): loading (try 0): started
2021/07/08 16:58:52 scheduler task 94683d3a (flow 96139b10): loading val<.=s3://niema-test/n100/r05/n100.r05.s042_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 27b13502 (flow 152eb222): loading val<.=s3://niema-test/n100/r05/n100.r05.s059_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d20bb815 (flow 220c7c9b): loading (try 0): started
2021/07/08 16:58:52 scheduler task a959f1cd (flow deb5653c): loading val<.=s3://niema-test/n100/r05/n100.r05.s078_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d20bb815 (flow 220c7c9b): loading val<.=s3://niema-test/n100/r05/n100.r05.s056_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 895b6be6 (flow 4ea7450d): loading (try 0): started
2021/07/08 16:58:52 scheduler task 27b13502 (flow 152eb222): loading val<.=s3://niema-test/n100/r05/n100.r05.s059_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 895b6be6 (flow 4ea7450d): loading val<.=s3://niema-test/n100/r05/n100.r05.s062_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a1c84a70 (flow be90496f): loading (try 0): started
2021/07/08 16:58:52 scheduler task a1c84a70 (flow be90496f): loading val<.=s3://niema-test/n100/r05/n100.r05.s032_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 25b5d38e (flow b7cf4504): loading val<.=s3://niema-test/n100/r05/n100.r05.s098_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a1c84a70 (flow be90496f): loading val<.=s3://niema-test/n100/r05/n100.r05.s032_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a959f1cd (flow deb5653c): loading val<.=s3://niema-test/n100/r05/n100.r05.s078_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b5ceb6c6 (flow db9699b5): loading (try 0): started
2021/07/08 16:58:52 scheduler task b5ceb6c6 (flow db9699b5): loading val<.=s3://niema-test/n100/r05/n100.r05.s010_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 79820afa (flow c5f1bdef): loading val<.=s3://niema-test/n100/r05/n100.r05.s069_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task e551941a (flow ea8b7e31): loading (try 0): started
2021/07/08 16:58:52 scheduler task e551941a (flow ea8b7e31): loading val<.=s3://niema-test/n100/r05/n100.r05.s044_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task b5ceb6c6 (flow db9699b5): loading val<.=s3://niema-test/n100/r05/n100.r05.s010_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c171a9af (flow f5a0e33a): loading (try 0): started
2021/07/08 16:58:52 scheduler task c171a9af (flow f5a0e33a): loading val<.=s3://niema-test/n100/r05/n100.r05.s094_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task e551941a (flow ea8b7e31): loading val<.=s3://niema-test/n100/r05/n100.r05.s044_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7fd21a08 (flow 5b62101d): loading (try 0): started
2021/07/08 16:58:52 scheduler task 72a551ca (flow 8cf24afe): loading (try 0): started
2021/07/08 16:58:52 scheduler task fa285b2b (flow 65deac98): loading (try 0): started
2021/07/08 16:58:52 scheduler task 95aeedb8 (flow fc144875): loading (try 0): started
2021/07/08 16:58:52 scheduler task 83c1b665 (flow 9dafcfc9): loading val<.=s3://niema-test/n100/r05/n100.r05.s029_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 541b05df (flow 28c707dc): loading (try 0): started
2021/07/08 16:58:52 scheduler task be23124b (flow 5d6d4385): loading (try 0): started
2021/07/08 16:58:52 scheduler task 91519b5f (flow b2cb8afe): loading val<.=s3://niema-test/n100/r05/n100.r05.s049_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 46c9fba6 (flow c2a88629): loading val<.=s3://niema-test/n100/r05/n100.r05.s066_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 9cf7175b (flow 03bf8a77): loading val<.=s3://niema-test/n100/r05/n100.r05.s050_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 6a846499 (flow 410e42f3): loading val<.=s3://niema-test/n100/r05/n100.r05.s006_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c504d35d (flow 7c5932bc): loading (try 0): started
2021/07/08 16:58:52 scheduler task c504d35d (flow 7c5932bc): loading val<.=s3://niema-test/n100/r05/n100.r05.s076_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ef9b0bc7 (flow 18d94a36): loading (try 0): started
2021/07/08 16:58:52 scheduler task ef9b0bc7 (flow 18d94a36): loading val<.=s3://niema-test/n100/r05/n100.r05.s077_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c504d35d (flow 7c5932bc): loading val<.=s3://niema-test/n100/r05/n100.r05.s076_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7016df0e (flow c5ad9cb9): loading (try 0): started
2021/07/08 16:58:52 scheduler task 7016df0e (flow c5ad9cb9): loading val<.=s3://niema-test/n100/r05/n100.r05.s007_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task ef9b0bc7 (flow 18d94a36): loading val<.=s3://niema-test/n100/r05/n100.r05.s077_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task cdca394a (flow 777a4ca0): loading val<.=s3://niema-test/n100/r05/n100.r05.s099_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7016df0e (flow c5ad9cb9): loading val<.=s3://niema-test/n100/r05/n100.r05.s007_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 585ad2e5 (flow fff44c7b): loading val<.=s3://niema-test/n100/r05/n100.r05.s090_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task d20bb815 (flow 220c7c9b): loading val<.=s3://niema-test/n100/r05/n100.r05.s056_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 895b6be6 (flow 4ea7450d): loading val<.=s3://niema-test/n100/r05/n100.r05.s062_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task c171a9af (flow f5a0e33a): loading val<.=s3://niema-test/n100/r05/n100.r05.s094_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7fd21a08 (flow 5b62101d): loading val<.=s3://niema-test/n100/r05/n100.r05.s052_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 7fd21a08 (flow 5b62101d): loading val<.=s3://niema-test/n100/r05/n100.r05.s052_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 72a551ca (flow 8cf24afe): loading val<.=s3://niema-test/n100/r05/n100.r05.s072_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 72a551ca (flow 8cf24afe): loading val<.=s3://niema-test/n100/r05/n100.r05.s072_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fa285b2b (flow 65deac98): loading val<.=s3://niema-test/n100/r05/n100.r05.s005_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 95aeedb8 (flow fc144875): loading val<.=s3://niema-test/n100/r05/n100.r05.s023_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 95aeedb8 (flow fc144875): loading val<.=s3://niema-test/n100/r05/n100.r05.s023_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task fa285b2b (flow 65deac98): loading val<.=s3://niema-test/n100/r05/n100.r05.s005_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 541b05df (flow 28c707dc): loading val<.=s3://niema-test/n100/r05/n100.r05.s053_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task be23124b (flow 5d6d4385): loading val<.=s3://niema-test/n100/r05/n100.r05.s017_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 541b05df (flow 28c707dc): loading val<.=s3://niema-test/n100/r05/n100.r05.s053_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task be23124b (flow 5d6d4385): loading val<.=s3://niema-test/n100/r05/n100.r05.s017_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 18737f1d (flow d748bfdf): assigning to alloc ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:58:52 scheduler task a5f81a19 (flow 1e808086): assigning to alloc ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:58:52 scheduler task 799a03d8 (flow 052c42b8): assigning to alloc ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:58:52 scheduler task cfc12c81 (flow c0fd3b1c): assigning to alloc ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:58:52 scheduler task cfc12c81 (flow c0fd3b1c): loading (try 0): started
2021/07/08 16:58:52 scheduler task cfc12c81 (flow c0fd3b1c): loading val<.=s3://niema-test/n100/r05/n100.r05.s087_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 18737f1d (flow d748bfdf): loading (try 0): started
2021/07/08 16:58:52 scheduler task 18737f1d (flow d748bfdf): loading val<.=s3://niema-test/n100/r05/n100.r05.s016_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a5f81a19 (flow 1e808086): loading (try 0): started
2021/07/08 16:58:52 scheduler task a5f81a19 (flow 1e808086): loading val<.=s3://niema-test/n100/r05/n100.r05.s008_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 799a03d8 (flow 052c42b8): loading (try 0): started
2021/07/08 16:58:52 scheduler task 18737f1d (flow d748bfdf): loading val<.=s3://niema-test/n100/r05/n100.r05.s016_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 799a03d8 (flow 052c42b8): loading val<.=s3://niema-test/n100/r05/n100.r05.s085_R2.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task cfc12c81 (flow c0fd3b1c): loading val<.=s3://niema-test/n100/r05/n100.r05.s087_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task 799a03d8 (flow 052c42b8): loading val<.=s3://niema-test/n100/r05/n100.r05.s085_R1.fastq 35.4MiB>
2021/07/08 16:58:52 scheduler task a5f81a19 (flow 1e808086): loading val<.=s3://niema-test/n100/r05/n100.r05.s008_R1.fastq 35.4MiB>
2021/07/08 16:58:53 scheduler task 67f515d1 (flow 55fa0156): loaded val<.=b18ad783 35.4MiB>
2021/07/08 16:58:53 scheduler task d41d72e6 (flow 821aa882): loaded val<.=6a91154b 35.4MiB>
2021/07/08 16:58:53 scheduler task ed2138a1 (flow aef25be2): loaded val<.=33c33118 35.4MiB>
2021/07/08 16:58:53 scheduler task 9a419798 (flow b1537913): loaded val<.=335c68b6 35.4MiB>
2021/07/08 16:58:53 scheduler task fb3965bb (flow 3518f790): loaded val<.=823ca38c 35.4MiB>
2021/07/08 16:58:53 scheduler task cebd915c (flow 202fcb82): loaded val<.=a26c7a55 35.4MiB>
2021/07/08 16:58:53 scheduler task ed56a43b (flow 4af71a7e): loaded val<.=9ed24075 35.4MiB>
2021/07/08 16:58:53 scheduler task 3a4d9596 (flow 6fa0a4b3): loaded val<.=fa0659eb 35.4MiB>
2021/07/08 16:58:53 scheduler task 43b97eb9 (flow bc0eb545): loaded val<.=449e0d7d 35.4MiB>
2021/07/08 16:58:53 scheduler task 5d6d53bd (flow bc5769e6): loaded val<.=ac933898 35.4MiB>
2021/07/08 16:58:53 scheduler task d41d72e6 (flow 821aa882): loaded val<.=5d7ee728 35.4MiB>
2021/07/08 16:58:53 scheduler task d41d72e6 (flow 821aa882): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task d41d72e6 (flow 821aa882): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 279b061c (flow f4b07b7e): loaded val<.=1e3eb454 35.4MiB>
2021/07/08 16:58:53 scheduler task 740318b7 (flow 9a2a57fd): loaded val<.=ec4db6d2 35.4MiB>
2021/07/08 16:58:53 scheduler task 7ee1dc12 (flow f84e5b81): loaded val<.=433a7818 35.4MiB>
2021/07/08 16:58:53 scheduler task 9a419798 (flow b1537913): loaded val<.=d669f81e 35.4MiB>
2021/07/08 16:58:53 scheduler task 9a419798 (flow b1537913): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task c84b5c9a (flow c81e95cd): loaded val<.=3e1eb71a 35.4MiB>
2021/07/08 16:58:53 scheduler task 9a419798 (flow b1537913): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 3f52d60b (flow 176763f6): loaded val<.=e0d1074c 35.4MiB>
2021/07/08 16:58:53 scheduler task d2c3cd80 (flow d4092336): loaded val<.=c5ff4b00 35.4MiB>
2021/07/08 16:58:53 scheduler task 9f62f6f9 (flow 900dcaae): loaded val<.=ea7025bb 35.4MiB>
2021/07/08 16:58:53 scheduler task 6af0d423 (flow c1226fd8): loaded val<.=1673e1bf 35.4MiB>
2021/07/08 16:58:53 scheduler task 5db678a8 (flow a4b5dc91): loaded val<.=49e4acab 35.4MiB>
2021/07/08 16:58:53 scheduler task 1de47370 (flow 8813551d): loaded val<.=fcd7980d 35.4MiB>
2021/07/08 16:58:53 scheduler task aac314ef (flow 1a055586): loaded val<.=431c7c97 35.4MiB>
2021/07/08 16:58:53 scheduler task a2233715 (flow a5cfc129): loaded val<.=4a81c02a 35.4MiB>
2021/07/08 16:58:53 scheduler task ed2138a1 (flow aef25be2): loaded val<.=54a6b285 35.4MiB>
2021/07/08 16:58:53 scheduler task ed2138a1 (flow aef25be2): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 8772ed6d (flow 8fb434f6): loaded val<.=ba16a0f8 35.4MiB>
2021/07/08 16:58:53 scheduler task 6af0d423 (flow c1226fd8): loaded val<.=efd03e34 35.4MiB>
2021/07/08 16:58:53 scheduler task 6af0d423 (flow c1226fd8): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task ed2138a1 (flow aef25be2): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 6af0d423 (flow c1226fd8): submitting (try 0): started
2021/07/08 16:58:53 scheduler task c33dbb19 (flow e0427763): loaded val<.=d48449ab 35.4MiB>
2021/07/08 16:58:53 scheduler task 8772ed6d (flow 8fb434f6): loaded val<.=2f96c79a 35.4MiB>
2021/07/08 16:58:53 scheduler task 8772ed6d (flow 8fb434f6): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 7f4a126f (flow 67971600): loaded val<.=4b594e46 35.4MiB>
2021/07/08 16:58:53 scheduler task d2c3cd80 (flow d4092336): loaded val<.=83822849 35.4MiB>
2021/07/08 16:58:53 scheduler task d2c3cd80 (flow d4092336): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 8772ed6d (flow 8fb434f6): submitting (try 0): started
2021/07/08 16:58:53 scheduler task fb3965bb (flow 3518f790): loaded val<.=66e616b2 35.4MiB>
2021/07/08 16:58:53 scheduler task fb3965bb (flow 3518f790): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task a2233715 (flow a5cfc129): loaded val<.=624eb52e 35.4MiB>
2021/07/08 16:58:53 scheduler task c33dbb19 (flow e0427763): loaded val<.=3a5a6c9c 35.4MiB>
2021/07/08 16:58:53 scheduler task c33dbb19 (flow e0427763): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task a2233715 (flow a5cfc129): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task d2c3cd80 (flow d4092336): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 7f4a126f (flow 67971600): loaded val<.=eae88930 35.4MiB>
2021/07/08 16:58:53 scheduler task 7f4a126f (flow 67971600): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 93e71401 (flow 4e7609db): loaded val<.=254e77a9 35.4MiB>
2021/07/08 16:58:53 scheduler task 93e71401 (flow 4e7609db): loaded val<.=81241cc4 35.4MiB>
2021/07/08 16:58:53 scheduler task 93e71401 (flow 4e7609db): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 5d6d53bd (flow bc5769e6): loaded val<.=7a1a2f2b 35.4MiB>
2021/07/08 16:58:53 scheduler task 5d6d53bd (flow bc5769e6): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 3f52d60b (flow 176763f6): loaded val<.=afef4faf 35.4MiB>
2021/07/08 16:58:53 scheduler task 3f52d60b (flow 176763f6): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 740318b7 (flow 9a2a57fd): loaded val<.=ae9c9155 35.4MiB>
2021/07/08 16:58:53 scheduler task 740318b7 (flow 9a2a57fd): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 43b97eb9 (flow bc0eb545): loaded val<.=2a3e0e94 35.4MiB>
2021/07/08 16:58:53 scheduler task 43b97eb9 (flow bc0eb545): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task cebd915c (flow 202fcb82): loaded val<.=bf3845d0 35.4MiB>
2021/07/08 16:58:53 scheduler task cebd915c (flow 202fcb82): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 5789b1c4 (flow 5c0cc62e): loaded val<.=57df213f 35.4MiB>
2021/07/08 16:58:53 scheduler task 799a03d8 (flow 052c42b8): loaded val<.=d2d12b0f 35.4MiB>
2021/07/08 16:58:53 scheduler task fb3965bb (flow 3518f790): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 3a4d9596 (flow 6fa0a4b3): loaded val<.=a63e3e02 35.4MiB>
2021/07/08 16:58:53 scheduler task 3a4d9596 (flow 6fa0a4b3): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task c33dbb19 (flow e0427763): submitting (try 0): started
2021/07/08 16:58:53 scheduler task ed56a43b (flow 4af71a7e): loaded val<.=6e8fd397 35.4MiB>
2021/07/08 16:58:53 scheduler task ed56a43b (flow 4af71a7e): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 9f62f6f9 (flow 900dcaae): loaded val<.=99893167 35.4MiB>
2021/07/08 16:58:53 scheduler task a5f81a19 (flow 1e808086): loaded val<.=1b2e0b27 35.4MiB>
2021/07/08 16:58:53 scheduler task 9f62f6f9 (flow 900dcaae): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 18737f1d (flow d748bfdf): loaded val<.=0e897996 35.4MiB>
2021/07/08 16:58:53 scheduler task 67f515d1 (flow 55fa0156): loaded val<.=bb961e9a 35.4MiB>
2021/07/08 16:58:53 scheduler task 67f515d1 (flow 55fa0156): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 222946cd (flow 37eb25e3): loaded val<.=bd29e3e2 35.4MiB>
2021/07/08 16:58:53 scheduler task a2233715 (flow a5cfc129): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 7f4a126f (flow 67971600): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 93e71401 (flow 4e7609db): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 5d6d53bd (flow bc5769e6): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 3f52d60b (flow 176763f6): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 34bef674 (flow d9a526d1): loaded val<.=bbe74a02 35.4MiB>
2021/07/08 16:58:53 scheduler task b8a3f011 (flow 81bfa0a3): loaded val<.=9fe7f9a0 35.4MiB>
2021/07/08 16:58:53 scheduler task 7ee1dc12 (flow f84e5b81): loaded val<.=1158a130 35.4MiB>
2021/07/08 16:58:53 scheduler task 7ee1dc12 (flow f84e5b81): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 222946cd (flow 37eb25e3): loaded val<.=c94d49ca 35.4MiB>
2021/07/08 16:58:53 scheduler task f2ba62a4 (flow 48c96476): loaded val<.=340b858a 35.4MiB>
2021/07/08 16:58:53 scheduler task 222946cd (flow 37eb25e3): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task f2ba62a4 (flow 48c96476): loaded val<.=a0dc95e1 35.4MiB>
2021/07/08 16:58:53 scheduler task f2ba62a4 (flow 48c96476): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 740318b7 (flow 9a2a57fd): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 5db678a8 (flow a4b5dc91): loaded val<.=4c722808 35.4MiB>
2021/07/08 16:58:53 scheduler task 5db678a8 (flow a4b5dc91): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 43b97eb9 (flow bc0eb545): submitting (try 0): started
2021/07/08 16:58:53 scheduler task cebd915c (flow 202fcb82): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 3a4d9596 (flow 6fa0a4b3): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 1de47370 (flow 8813551d): loaded val<.=47168616 35.4MiB>
2021/07/08 16:58:53 scheduler task 1de47370 (flow 8813551d): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task ed56a43b (flow 4af71a7e): submitting (try 0): started
2021/07/08 16:58:53 scheduler task aac314ef (flow 1a055586): loaded val<.=bc8f6fbe 35.4MiB>
2021/07/08 16:58:53 scheduler task aac314ef (flow 1a055586): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 9f62f6f9 (flow 900dcaae): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 67f515d1 (flow 55fa0156): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 7ee1dc12 (flow f84e5b81): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 222946cd (flow 37eb25e3): submitting (try 0): started
2021/07/08 16:58:53 scheduler task cfc12c81 (flow c0fd3b1c): loaded val<.=c1247564 35.4MiB>
2021/07/08 16:58:53 scheduler task 43f6c42b (flow a15eb662): loaded val<.=a181f4c6 35.4MiB>
2021/07/08 16:58:53 scheduler task f2ba62a4 (flow 48c96476): submitting (try 0): started
2021/07/08 16:58:53 scheduler task a5f81a19 (flow 1e808086): loaded val<.=e5a4fde8 35.4MiB>
2021/07/08 16:58:53 scheduler task a5f81a19 (flow 1e808086): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 5db678a8 (flow a4b5dc91): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 1de47370 (flow 8813551d): submitting (try 0): started
2021/07/08 16:58:53 scheduler task aac314ef (flow 1a055586): submitting (try 0): started
2021/07/08 16:58:53 scheduler task a5f81a19 (flow 1e808086): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 18737f1d (flow d748bfdf): loaded val<.=bd4b9994 35.4MiB>
2021/07/08 16:58:53 scheduler task 18737f1d (flow d748bfdf): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 18737f1d (flow d748bfdf): submitting (try 0): started
2021/07/08 16:58:53 scheduler task b8a3f011 (flow 81bfa0a3): loaded val<.=c27e45cc 35.4MiB>
2021/07/08 16:58:53 scheduler task b8a3f011 (flow 81bfa0a3): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 43f6c42b (flow a15eb662): loaded val<.=1da4441d 35.4MiB>
2021/07/08 16:58:53 scheduler task 43f6c42b (flow a15eb662): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task b8a3f011 (flow 81bfa0a3): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 43f6c42b (flow a15eb662): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 799a03d8 (flow 052c42b8): loaded val<.=9e0bc1ae 35.4MiB>
2021/07/08 16:58:53 scheduler task 799a03d8 (flow 052c42b8): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task 799a03d8 (flow 052c42b8): submitting (try 0): started
2021/07/08 16:58:53 scheduler task cfc12c81 (flow c0fd3b1c): loaded val<.=127f0699 35.4MiB>
2021/07/08 16:58:53 scheduler task cfc12c81 (flow c0fd3b1c): loading (try 0): successful, next state: submitting
2021/07/08 16:58:53 scheduler task cfc12c81 (flow c0fd3b1c): submitting (try 0): started
2021/07/08 16:58:53 scheduler task 7848c63f (flow 26ac297d): loaded val<.=f191808e 35.4MiB>
2021/07/08 16:58:53 scheduler task d41d72e6 (flow 821aa882): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:53 scheduler task d41d72e6 (flow 821aa882): waiting for completion (try 0): started
2021/07/08 16:58:53  ->  n100.r05.s041.Main.out_file 821aa882 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:53 n100.r05.s041.Main.out_file 821aa882 n100/r05/n100.r05.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e8a38c88a780bd9cbe9011e11e6d18f2494db1f8f5ba56f6f7006bb1abffdb6
	sha256:821aa8820037298a84a46901e1bacd6043c431e438f8daff233adef04c54604a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d41d72e679bb930957f6212b0611c69d942556b442c9960013c77b3552bc97be
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s041_output"
	    wget -O "n100.r05.s041_output/n100.r05.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s041_output/n100.r05.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s041_output/n100.r05.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s041_output/n100.r05.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s041_output/n100.r05.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s041_output/n100.r05.s041.reference.fas" "n100.r05.s041_output/n100.r05.s041.fq1.fastq" "n100.r05.s041_output/n100.r05.s041.fq2.fastq" | samtools view -bS - > "n100.r05.s041_output/n100.r05.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s041_output/n100.r05.s041.untrimmed.sorted.bam" "n100.r05.s041_output/n100.r05.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s041_output/n100.r05.s041.untrimmed.sorted.bam" -b "n100.r05.s041_output/n100.r05.s041.primers.bed" -p "n100.r05.s041_output/n100.r05.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" "n100.r05.s041_output/n100.r05.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s041_output/n100.r05.s041.reference.fas" "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" > "n100.r05.s041_output/n100.r05.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s041_output/n100.r05.s041.reference.fas" --call-indels "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" > "n100.r05.s041_output/n100.r05.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" > "n100.r05.s041_output/n100.r05.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s041_output/n100.r05.s041.depth.txt" "n100.r05.s041_output/n100.r05.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s041_output/n100.r05.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s041_output/n100.r05.s041.reference.fas" | bcftools consensus -m "n100.r05.s041_output/n100.r05.s041.low_depth.tsv" tmp.vcf.gz > "n100.r05.s041_output/n100.r05.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task f766d6ff (flow 2796e3e6): loaded val<.=d5db7d84 35.4MiB>
2021/07/08 16:58:54 scheduler task 9a419798 (flow b1537913): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task 9a419798 (flow b1537913): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s039.Main.out_file b1537913 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s039.Main.out_file b1537913 n100/r05/n100.r05.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d2caf2cb205585bdc438af964ba2ec7037fca9cb5ade15d9c51c0a4e417c35aa
	sha256:b15379130d89ed5675f9046b6ea55dfdabc0e9e89a45c3e7879a246141ce38f0
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a4197982dcbcbc5669295dddf0c6bf9590b6a1afd0bf57a766150f23064560b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s039_output"
	    wget -O "n100.r05.s039_output/n100.r05.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s039_output/n100.r05.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s039_output/n100.r05.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s039_output/n100.r05.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s039_output/n100.r05.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s039_output/n100.r05.s039.reference.fas" "n100.r05.s039_output/n100.r05.s039.fq1.fastq" "n100.r05.s039_output/n100.r05.s039.fq2.fastq" | samtools view -bS - > "n100.r05.s039_output/n100.r05.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s039_output/n100.r05.s039.untrimmed.sorted.bam" "n100.r05.s039_output/n100.r05.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s039_output/n100.r05.s039.untrimmed.sorted.bam" -b "n100.r05.s039_output/n100.r05.s039.primers.bed" -p "n100.r05.s039_output/n100.r05.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" "n100.r05.s039_output/n100.r05.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s039_output/n100.r05.s039.reference.fas" "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" > "n100.r05.s039_output/n100.r05.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s039_output/n100.r05.s039.reference.fas" --call-indels "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" > "n100.r05.s039_output/n100.r05.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" > "n100.r05.s039_output/n100.r05.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s039_output/n100.r05.s039.depth.txt" "n100.r05.s039_output/n100.r05.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s039_output/n100.r05.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s039_output/n100.r05.s039.reference.fas" | bcftools consensus -m "n100.r05.s039_output/n100.r05.s039.low_depth.tsv" tmp.vcf.gz > "n100.r05.s039_output/n100.r05.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task a5f81a19 (flow 1e808086): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task a5f81a19 (flow 1e808086): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s008.Main.out_file 1e808086 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s008.Main.out_file 1e808086 n100/r05/n100.r05.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:207f1272046c2e0a73361cf7cce87cd2432286021a0f015d34ac65b5554896b3
	sha256:1e80808615e4d63cf242de776127fb9710345c1ca04eb18f16bfed09c1f6cbb1
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a5f81a19691057392fb60b61d43bbe5550671cd50fdb9708e695c8ef2731abba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s008_output"
	    wget -O "n100.r05.s008_output/n100.r05.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s008_output/n100.r05.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s008_output/n100.r05.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s008_output/n100.r05.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s008_output/n100.r05.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s008_output/n100.r05.s008.reference.fas" "n100.r05.s008_output/n100.r05.s008.fq1.fastq" "n100.r05.s008_output/n100.r05.s008.fq2.fastq" | samtools view -bS - > "n100.r05.s008_output/n100.r05.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s008_output/n100.r05.s008.untrimmed.sorted.bam" "n100.r05.s008_output/n100.r05.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s008_output/n100.r05.s008.untrimmed.sorted.bam" -b "n100.r05.s008_output/n100.r05.s008.primers.bed" -p "n100.r05.s008_output/n100.r05.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" "n100.r05.s008_output/n100.r05.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s008_output/n100.r05.s008.reference.fas" "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" > "n100.r05.s008_output/n100.r05.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s008_output/n100.r05.s008.reference.fas" --call-indels "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" > "n100.r05.s008_output/n100.r05.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" > "n100.r05.s008_output/n100.r05.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s008_output/n100.r05.s008.depth.txt" "n100.r05.s008_output/n100.r05.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s008_output/n100.r05.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s008_output/n100.r05.s008.reference.fas" | bcftools consensus -m "n100.r05.s008_output/n100.r05.s008.low_depth.tsv" tmp.vcf.gz > "n100.r05.s008_output/n100.r05.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 6a846499 (flow 410e42f3): loaded val<.=920d1fcc 35.4MiB>
2021/07/08 16:58:54 scheduler task ed2138a1 (flow aef25be2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task ed2138a1 (flow aef25be2): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s009.Main.out_file aef25be2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s009.Main.out_file aef25be2 n100/r05/n100.r05.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fc045350d949910fef2d446eefe7e3f6eb8130bf487e29393e3abb3116972cb
	sha256:aef25be2f9d47855a43e6c14ded8454772c44f079c09aec03d20ad897a930b74
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ed2138a1221ce1ff8c35416d30c4bdfbc2f487dafbaf0b062ef05859c8433408
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s009_output"
	    wget -O "n100.r05.s009_output/n100.r05.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s009_output/n100.r05.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s009_output/n100.r05.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s009_output/n100.r05.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s009_output/n100.r05.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s009_output/n100.r05.s009.reference.fas" "n100.r05.s009_output/n100.r05.s009.fq1.fastq" "n100.r05.s009_output/n100.r05.s009.fq2.fastq" | samtools view -bS - > "n100.r05.s009_output/n100.r05.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s009_output/n100.r05.s009.untrimmed.sorted.bam" "n100.r05.s009_output/n100.r05.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s009_output/n100.r05.s009.untrimmed.sorted.bam" -b "n100.r05.s009_output/n100.r05.s009.primers.bed" -p "n100.r05.s009_output/n100.r05.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" "n100.r05.s009_output/n100.r05.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s009_output/n100.r05.s009.reference.fas" "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" > "n100.r05.s009_output/n100.r05.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s009_output/n100.r05.s009.reference.fas" --call-indels "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" > "n100.r05.s009_output/n100.r05.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" > "n100.r05.s009_output/n100.r05.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s009_output/n100.r05.s009.depth.txt" "n100.r05.s009_output/n100.r05.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s009_output/n100.r05.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s009_output/n100.r05.s009.reference.fas" | bcftools consensus -m "n100.r05.s009_output/n100.r05.s009.low_depth.tsv" tmp.vcf.gz > "n100.r05.s009_output/n100.r05.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 3b4791e9 (flow e7ffbcd4): loaded val<.=2e0e8059 35.4MiB>
2021/07/08 16:58:54 scheduler task a46930e3 (flow 29d4e1a3): loaded val<.=29e626f9 35.4MiB>
2021/07/08 16:58:54 scheduler task 18737f1d (flow d748bfdf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task 70748d2b (flow dab8c84e): loaded val<.=fc248292 35.4MiB>
2021/07/08 16:58:54 scheduler task 18737f1d (flow d748bfdf): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s016.Main.out_file d748bfdf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s016.Main.out_file d748bfdf n100/r05/n100.r05.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f296431bd1168d32a3c693d1c6c46327e189c07ae29aa43ebb9e1d8b092fb704
	sha256:d748bfdf808107b8196b8822d7de64db26a2c7b7fdf9a9e3c31923091a9f9e8b
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/18737f1d1e2212974ec7dd74a76260f5be54907ed552ee3e7b04bdceeb0662a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s016_output"
	    wget -O "n100.r05.s016_output/n100.r05.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s016_output/n100.r05.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s016_output/n100.r05.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s016_output/n100.r05.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s016_output/n100.r05.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s016_output/n100.r05.s016.reference.fas" "n100.r05.s016_output/n100.r05.s016.fq1.fastq" "n100.r05.s016_output/n100.r05.s016.fq2.fastq" | samtools view -bS - > "n100.r05.s016_output/n100.r05.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s016_output/n100.r05.s016.untrimmed.sorted.bam" "n100.r05.s016_output/n100.r05.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s016_output/n100.r05.s016.untrimmed.sorted.bam" -b "n100.r05.s016_output/n100.r05.s016.primers.bed" -p "n100.r05.s016_output/n100.r05.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" "n100.r05.s016_output/n100.r05.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s016_output/n100.r05.s016.reference.fas" "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" > "n100.r05.s016_output/n100.r05.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s016_output/n100.r05.s016.reference.fas" --call-indels "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" > "n100.r05.s016_output/n100.r05.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" > "n100.r05.s016_output/n100.r05.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s016_output/n100.r05.s016.depth.txt" "n100.r05.s016_output/n100.r05.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s016_output/n100.r05.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s016_output/n100.r05.s016.reference.fas" | bcftools consensus -m "n100.r05.s016_output/n100.r05.s016.low_depth.tsv" tmp.vcf.gz > "n100.r05.s016_output/n100.r05.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 79820afa (flow c5f1bdef): loaded val<.=dfead196 35.4MiB>
2021/07/08 16:58:54 scheduler task 799a03d8 (flow 052c42b8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task 799a03d8 (flow 052c42b8): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s085.Main.out_file 052c42b8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s085.Main.out_file 052c42b8 n100/r05/n100.r05.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:72f1a381b34f7b4470a30e19f7f4bad3fa0b1d7034ea48394cbfcbfe704e9072
	sha256:052c42b8ec0d48f63ba9b08859e5624114ff6433f491f60943727161dc3f9024
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/799a03d81602e6116da1f0cf0c2e41ef17576fa9c81baf28efd54c5cac39a7e3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s085_output"
	    wget -O "n100.r05.s085_output/n100.r05.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s085_output/n100.r05.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s085_output/n100.r05.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s085_output/n100.r05.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s085_output/n100.r05.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s085_output/n100.r05.s085.reference.fas" "n100.r05.s085_output/n100.r05.s085.fq1.fastq" "n100.r05.s085_output/n100.r05.s085.fq2.fastq" | samtools view -bS - > "n100.r05.s085_output/n100.r05.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s085_output/n100.r05.s085.untrimmed.sorted.bam" "n100.r05.s085_output/n100.r05.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s085_output/n100.r05.s085.untrimmed.sorted.bam" -b "n100.r05.s085_output/n100.r05.s085.primers.bed" -p "n100.r05.s085_output/n100.r05.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" "n100.r05.s085_output/n100.r05.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s085_output/n100.r05.s085.reference.fas" "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" > "n100.r05.s085_output/n100.r05.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s085_output/n100.r05.s085.reference.fas" --call-indels "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" > "n100.r05.s085_output/n100.r05.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" > "n100.r05.s085_output/n100.r05.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s085_output/n100.r05.s085.depth.txt" "n100.r05.s085_output/n100.r05.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s085_output/n100.r05.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s085_output/n100.r05.s085.reference.fas" | bcftools consensus -m "n100.r05.s085_output/n100.r05.s085.low_depth.tsv" tmp.vcf.gz > "n100.r05.s085_output/n100.r05.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 895b6be6 (flow 4ea7450d): loaded val<.=6554c981 35.4MiB>
2021/07/08 16:58:54 scheduler task 541b05df (flow 28c707dc): loaded val<.=ae846bd7 35.4MiB>
2021/07/08 16:58:54 scheduler task 7cbf55a6 (flow 148cd5d9): loaded val<.=078567e2 35.4MiB>
2021/07/08 16:58:54 scheduler task 83c1b665 (flow 9dafcfc9): loaded val<.=6fd1d01a 35.4MiB>
2021/07/08 16:58:54 scheduler task 34c034d0 (flow 98cff474): loaded val<.=e962aea7 35.4MiB>
2021/07/08 16:58:54 scheduler task b23b5216 (flow 06073390): loaded val<.=22516b3a 35.4MiB>
2021/07/08 16:58:54 scheduler task eecc9bb8 (flow fe237c23): loaded val<.=4dbb347a 35.4MiB>
2021/07/08 16:58:54 scheduler task 7016df0e (flow c5ad9cb9): loaded val<.=82356c8a 35.4MiB>
2021/07/08 16:58:54 scheduler task 1075cfc4 (flow 0b598c7d): loaded val<.=2c372af0 35.4MiB>
2021/07/08 16:58:54 scheduler task 5cf5576b (flow 0ff39579): loaded val<.=5c69e070 35.4MiB>
2021/07/08 16:58:54 scheduler task f9272175 (flow b087d69b): loaded val<.=1ff6ef9e 35.4MiB>
2021/07/08 16:58:54 scheduler task 46c9fba6 (flow c2a88629): loaded val<.=86a3f35b 35.4MiB>
2021/07/08 16:58:54 scheduler task c504d35d (flow 7c5932bc): loaded val<.=c38cb85b 35.4MiB>
2021/07/08 16:58:54 scheduler task 0d2f76e7 (flow c6a48769): loaded val<.=ffa54b48 35.4MiB>
2021/07/08 16:58:54 scheduler task 8438db44 (flow 8f98d048): loaded val<.=77d6c9da 35.4MiB>
2021/07/08 16:58:54 scheduler task 4ac811a5 (flow 62342884): loaded val<.=552b5f55 35.4MiB>
2021/07/08 16:58:54 scheduler task c84b5c9a (flow c81e95cd): loaded val<.=b0526c05 35.4MiB>
2021/07/08 16:58:54 scheduler task c84b5c9a (flow c81e95cd): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task b81e3e3f (flow 7c2051b2): loaded val<.=7e4775e9 35.4MiB>
2021/07/08 16:58:54 scheduler task 34bef674 (flow d9a526d1): loaded val<.=da44ca5d 35.4MiB>
2021/07/08 16:58:54 scheduler task 34bef674 (flow d9a526d1): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task 6a846499 (flow 410e42f3): loaded val<.=60f9e1ef 35.4MiB>
2021/07/08 16:58:54 scheduler task 6a846499 (flow 410e42f3): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task 6af0d423 (flow c1226fd8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task 70748d2b (flow dab8c84e): loaded val<.=5de476cb 35.4MiB>
2021/07/08 16:58:54 scheduler task 65ef70a2 (flow 877fe836): loaded val<.=17e0d04b 35.4MiB>
2021/07/08 16:58:54 scheduler task 70748d2b (flow dab8c84e): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task 65048d3f (flow 2ff7e1c2): loaded val<.=e5f2aa57 35.4MiB>
2021/07/08 16:58:54 scheduler task 6ab8ace4 (flow adb5f9d2): loaded val<.=32aaffe2 35.4MiB>
2021/07/08 16:58:54 scheduler task 541b05df (flow 28c707dc): loaded val<.=ec160749 35.4MiB>
2021/07/08 16:58:54 scheduler task 541b05df (flow 28c707dc): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task cdca394a (flow 777a4ca0): loaded val<.=1aa67da5 35.4MiB>
2021/07/08 16:58:54 scheduler task 76111d9e (flow 91ea955a): loaded val<.=265b2ac0 35.4MiB>
2021/07/08 16:58:54 scheduler task c999bc91 (flow 1808ed0b): loaded val<.=6260eb6f 35.4MiB>
2021/07/08 16:58:54 scheduler task 6ab8ace4 (flow adb5f9d2): loaded val<.=5956d6ff 35.4MiB>
2021/07/08 16:58:54 scheduler task 6ab8ace4 (flow adb5f9d2): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task 887f8caf (flow da518317): loaded val<.=cfbf94d8 35.4MiB>
2021/07/08 16:58:54 scheduler task 46c9fba6 (flow c2a88629): loaded val<.=f89597da 35.4MiB>
2021/07/08 16:58:54 scheduler task 46c9fba6 (flow c2a88629): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task e551941a (flow ea8b7e31): loaded val<.=f0003d6b 35.4MiB>
2021/07/08 16:58:54 scheduler task b5ceb6c6 (flow db9699b5): loaded val<.=ff7fabc9 35.4MiB>
2021/07/08 16:58:54 scheduler task 0db5a36a (flow a529c55b): loaded val<.=58c6feee 35.4MiB>
2021/07/08 16:58:54 scheduler task 8438db44 (flow 8f98d048): loaded val<.=5e9b1a5a 35.4MiB>
2021/07/08 16:58:54 scheduler task 8438db44 (flow 8f98d048): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task fb5421a4 (flow 0e1a57df): loaded val<.=e2b6caa7 35.4MiB>
2021/07/08 16:58:54 scheduler task 25b5d38e (flow b7cf4504): loaded val<.=790ad96e 35.4MiB>
2021/07/08 16:58:54 scheduler task c24bee6e (flow 877da018): loaded val<.=6ef34f12 35.4MiB>
2021/07/08 16:58:54 scheduler task 0d2f76e7 (flow c6a48769): loaded val<.=5508f84b 35.4MiB>
2021/07/08 16:58:54 scheduler task f766d6ff (flow 2796e3e6): loaded val<.=af10cc71 35.4MiB>
2021/07/08 16:58:54 scheduler task 0d2f76e7 (flow c6a48769): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task f766d6ff (flow 2796e3e6): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task c3dec1ba (flow 3194fd2a): loaded val<.=d94868d5 35.4MiB>
2021/07/08 16:58:54 scheduler task c84b5c9a (flow c81e95cd): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 34bef674 (flow d9a526d1): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 6a846499 (flow 410e42f3): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 6af0d423 (flow c1226fd8): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s055.Main.out_file c1226fd8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s055.Main.out_file c1226fd8 n100/r05/n100.r05.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f09a6c0da0dcc17d3ec04c55c3442b8a4d753973f26eaf72574859b7f497212
	sha256:c1226fd815a7d1d066b9658bfece48ebbb53a1301b102f5f483aa58b0cdc722c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6af0d423018c551aac9910f9abc3f417c174d254abfff131d70758fc481313e6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s055_output"
	    wget -O "n100.r05.s055_output/n100.r05.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s055_output/n100.r05.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s055_output/n100.r05.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s055_output/n100.r05.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s055_output/n100.r05.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s055_output/n100.r05.s055.reference.fas" "n100.r05.s055_output/n100.r05.s055.fq1.fastq" "n100.r05.s055_output/n100.r05.s055.fq2.fastq" | samtools view -bS - > "n100.r05.s055_output/n100.r05.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s055_output/n100.r05.s055.untrimmed.sorted.bam" "n100.r05.s055_output/n100.r05.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s055_output/n100.r05.s055.untrimmed.sorted.bam" -b "n100.r05.s055_output/n100.r05.s055.primers.bed" -p "n100.r05.s055_output/n100.r05.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" "n100.r05.s055_output/n100.r05.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s055_output/n100.r05.s055.reference.fas" "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" > "n100.r05.s055_output/n100.r05.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s055_output/n100.r05.s055.reference.fas" --call-indels "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" > "n100.r05.s055_output/n100.r05.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" > "n100.r05.s055_output/n100.r05.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s055_output/n100.r05.s055.depth.txt" "n100.r05.s055_output/n100.r05.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s055_output/n100.r05.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s055_output/n100.r05.s055.reference.fas" | bcftools consensus -m "n100.r05.s055_output/n100.r05.s055.low_depth.tsv" tmp.vcf.gz > "n100.r05.s055_output/n100.r05.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 70748d2b (flow dab8c84e): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 541b05df (flow 28c707dc): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 6ab8ace4 (flow adb5f9d2): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 46c9fba6 (flow c2a88629): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 8438db44 (flow 8f98d048): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 0d2f76e7 (flow c6a48769): submitting (try 0): started
2021/07/08 16:58:54 scheduler task f766d6ff (flow 2796e3e6): submitting (try 0): started
2021/07/08 16:58:54 scheduler task cfc12c81 (flow c0fd3b1c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task c504d35d (flow 7c5932bc): loaded val<.=d0aa94b9 35.4MiB>
2021/07/08 16:58:54 scheduler task 8772ed6d (flow 8fb434f6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task be23124b (flow 5d6d4385): loaded val<.=fb6c1466 35.4MiB>
2021/07/08 16:58:54 scheduler task 27b13502 (flow 152eb222): loaded val<.=507e8d09 35.4MiB>
2021/07/08 16:58:54 scheduler task 600e8f95 (flow f3280027): loaded val<.=adcf9c00 35.4MiB>
2021/07/08 16:58:54 scheduler task d20bb815 (flow 220c7c9b): loaded val<.=7201324b 35.4MiB>
2021/07/08 16:58:54 scheduler task 4618e061 (flow 40e93ad6): loaded val<.=8f146d7a 35.4MiB>
2021/07/08 16:58:54 scheduler task c504d35d (flow 7c5932bc): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task 94683d3a (flow 96139b10): loaded val<.=58e3413e 35.4MiB>
2021/07/08 16:58:54 scheduler task ea078349 (flow 81ef77fc): loaded val<.=2699dced 35.4MiB>
2021/07/08 16:58:54 scheduler task 79820afa (flow c5f1bdef): loaded val<.=bec76111 35.4MiB>
2021/07/08 16:58:54 scheduler task 79820afa (flow c5f1bdef): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task c171a9af (flow f5a0e33a): loaded val<.=25043257 35.4MiB>
2021/07/08 16:58:54 scheduler task 83c1b665 (flow 9dafcfc9): loaded val<.=2abd9b31 35.4MiB>
2021/07/08 16:58:54 scheduler task 83c1b665 (flow 9dafcfc9): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task be23124b (flow 5d6d4385): loaded val<.=0a6b7b7b 35.4MiB>
2021/07/08 16:58:54 scheduler task be23124b (flow 5d6d4385): loading (try 0): successful, next state: submitting
2021/07/08 16:58:54 scheduler task cfc12c81 (flow c0fd3b1c): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s087.Main.out_file c0fd3b1c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s087.Main.out_file c0fd3b1c n100/r05/n100.r05.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:997efb813f5bed1b4cd98c8e39f298c3786b5c5a597e21a2ee268d7d745a2096
	sha256:c0fd3b1c3ff88ab84fc8c742bb9ee2b6073160151975549b0c4f07bb26295fe3
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cfc12c8174c8d6ae19f9e233c0fa3a978704a8863bf8703d7c008f040f0d1302
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s087_output"
	    wget -O "n100.r05.s087_output/n100.r05.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s087_output/n100.r05.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s087_output/n100.r05.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s087_output/n100.r05.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s087_output/n100.r05.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s087_output/n100.r05.s087.reference.fas" "n100.r05.s087_output/n100.r05.s087.fq1.fastq" "n100.r05.s087_output/n100.r05.s087.fq2.fastq" | samtools view -bS - > "n100.r05.s087_output/n100.r05.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s087_output/n100.r05.s087.untrimmed.sorted.bam" "n100.r05.s087_output/n100.r05.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s087_output/n100.r05.s087.untrimmed.sorted.bam" -b "n100.r05.s087_output/n100.r05.s087.primers.bed" -p "n100.r05.s087_output/n100.r05.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" "n100.r05.s087_output/n100.r05.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s087_output/n100.r05.s087.reference.fas" "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" > "n100.r05.s087_output/n100.r05.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s087_output/n100.r05.s087.reference.fas" --call-indels "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" > "n100.r05.s087_output/n100.r05.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" > "n100.r05.s087_output/n100.r05.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s087_output/n100.r05.s087.depth.txt" "n100.r05.s087_output/n100.r05.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s087_output/n100.r05.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s087_output/n100.r05.s087.reference.fas" | bcftools consensus -m "n100.r05.s087_output/n100.r05.s087.low_depth.tsv" tmp.vcf.gz > "n100.r05.s087_output/n100.r05.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 8772ed6d (flow 8fb434f6): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s035.Main.out_file 8fb434f6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s035.Main.out_file 8fb434f6 n100/r05/n100.r05.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:70088c0f1f7e9a0804511667a76644bc5724e2cc0f1dcd236a0e6aeda4bfd375
	sha256:8fb434f672694a43ad1dc081ca937905da66935ac70a7d5e9060742f3943fff2
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8772ed6d836d3f9a4d3858fb4c0003bcd8a017983ebadc9de0b83bcc8ad88b5b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s035_output"
	    wget -O "n100.r05.s035_output/n100.r05.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s035_output/n100.r05.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s035_output/n100.r05.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s035_output/n100.r05.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s035_output/n100.r05.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s035_output/n100.r05.s035.reference.fas" "n100.r05.s035_output/n100.r05.s035.fq1.fastq" "n100.r05.s035_output/n100.r05.s035.fq2.fastq" | samtools view -bS - > "n100.r05.s035_output/n100.r05.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s035_output/n100.r05.s035.untrimmed.sorted.bam" "n100.r05.s035_output/n100.r05.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s035_output/n100.r05.s035.untrimmed.sorted.bam" -b "n100.r05.s035_output/n100.r05.s035.primers.bed" -p "n100.r05.s035_output/n100.r05.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" "n100.r05.s035_output/n100.r05.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s035_output/n100.r05.s035.reference.fas" "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" > "n100.r05.s035_output/n100.r05.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s035_output/n100.r05.s035.reference.fas" --call-indels "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" > "n100.r05.s035_output/n100.r05.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" > "n100.r05.s035_output/n100.r05.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s035_output/n100.r05.s035.depth.txt" "n100.r05.s035_output/n100.r05.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s035_output/n100.r05.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s035_output/n100.r05.s035.reference.fas" | bcftools consensus -m "n100.r05.s035_output/n100.r05.s035.low_depth.tsv" tmp.vcf.gz > "n100.r05.s035_output/n100.r05.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task c504d35d (flow 7c5932bc): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 79820afa (flow c5f1bdef): submitting (try 0): started
2021/07/08 16:58:54 scheduler task 83c1b665 (flow 9dafcfc9): submitting (try 0): started
2021/07/08 16:58:54 scheduler task be23124b (flow 5d6d4385): submitting (try 0): started
2021/07/08 16:58:54 scheduler task d2c3cd80 (flow d4092336): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task d2c3cd80 (flow d4092336): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s086.Main.out_file d4092336 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s086.Main.out_file d4092336 n100/r05/n100.r05.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:945a4b56cb90f92c089150bd5fa13ff29ddb4983bb3c7ad3693645c46bef4d21
	sha256:d40923366ee1e468a47d030272575628cec6a61cb26f52af8f30f427917befeb
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d2c3cd80184fcd8ebf4c63e457ce9c72c2ef540b3951da26489ca372aca74aab
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s086_output"
	    wget -O "n100.r05.s086_output/n100.r05.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s086_output/n100.r05.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s086_output/n100.r05.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s086_output/n100.r05.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s086_output/n100.r05.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s086_output/n100.r05.s086.reference.fas" "n100.r05.s086_output/n100.r05.s086.fq1.fastq" "n100.r05.s086_output/n100.r05.s086.fq2.fastq" | samtools view -bS - > "n100.r05.s086_output/n100.r05.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s086_output/n100.r05.s086.untrimmed.sorted.bam" "n100.r05.s086_output/n100.r05.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s086_output/n100.r05.s086.untrimmed.sorted.bam" -b "n100.r05.s086_output/n100.r05.s086.primers.bed" -p "n100.r05.s086_output/n100.r05.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" "n100.r05.s086_output/n100.r05.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s086_output/n100.r05.s086.reference.fas" "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" > "n100.r05.s086_output/n100.r05.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s086_output/n100.r05.s086.reference.fas" --call-indels "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" > "n100.r05.s086_output/n100.r05.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" > "n100.r05.s086_output/n100.r05.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s086_output/n100.r05.s086.depth.txt" "n100.r05.s086_output/n100.r05.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s086_output/n100.r05.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s086_output/n100.r05.s086.reference.fas" | bcftools consensus -m "n100.r05.s086_output/n100.r05.s086.low_depth.tsv" tmp.vcf.gz > "n100.r05.s086_output/n100.r05.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:54 scheduler task 3176835f (flow f4fe708f): loaded val<.=041a72d3 35.4MiB>
2021/07/08 16:58:54 scheduler task fb3965bb (flow 3518f790): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:54 scheduler task fb3965bb (flow 3518f790): waiting for completion (try 0): started
2021/07/08 16:58:54  ->  n100.r05.s003.Main.out_file 3518f790 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:54 n100.r05.s003.Main.out_file 3518f790 n100/r05/n100.r05.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9189a3e44621a56c87e80dc9512b437ce35823db13b03589ccf76605873b045
	sha256:3518f790160aac0345d04401ed4218080d827bcee56a47f0f0c46d976cde4d8a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fb3965bb5276bd5b153c6e0bcac87b1b656196c0b9ac52ee856fc0523046f9ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s003_output"
	    wget -O "n100.r05.s003_output/n100.r05.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s003_output/n100.r05.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s003_output/n100.r05.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s003_output/n100.r05.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s003_output/n100.r05.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s003_output/n100.r05.s003.reference.fas" "n100.r05.s003_output/n100.r05.s003.fq1.fastq" "n100.r05.s003_output/n100.r05.s003.fq2.fastq" | samtools view -bS - > "n100.r05.s003_output/n100.r05.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s003_output/n100.r05.s003.untrimmed.sorted.bam" "n100.r05.s003_output/n100.r05.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s003_output/n100.r05.s003.untrimmed.sorted.bam" -b "n100.r05.s003_output/n100.r05.s003.primers.bed" -p "n100.r05.s003_output/n100.r05.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" "n100.r05.s003_output/n100.r05.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s003_output/n100.r05.s003.reference.fas" "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" > "n100.r05.s003_output/n100.r05.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s003_output/n100.r05.s003.reference.fas" --call-indels "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" > "n100.r05.s003_output/n100.r05.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" > "n100.r05.s003_output/n100.r05.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s003_output/n100.r05.s003.depth.txt" "n100.r05.s003_output/n100.r05.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s003_output/n100.r05.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s003_output/n100.r05.s003.reference.fas" | bcftools consensus -m "n100.r05.s003_output/n100.r05.s003.low_depth.tsv" tmp.vcf.gz > "n100.r05.s003_output/n100.r05.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:55 scheduler task c33dbb19 (flow e0427763): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:55 scheduler task c33dbb19 (flow e0427763): waiting for completion (try 0): started
2021/07/08 16:58:55  ->  n100.r05.s067.Main.out_file e0427763 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:55 n100.r05.s067.Main.out_file e0427763 n100/r05/n100.r05.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e7c03ab19d7278b094dbf219a68ce42d3bd3e5397f43b083017fe7e08a4d3b53
	sha256:e0427763700e959f87fa2e11ec425164f6d9ddc0d2986e26913ea6916c28ad98
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c33dbb19732af3335c29ae3f85d5641c6e85c25077b30c9533b86f191fa2b9ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s067_output"
	    wget -O "n100.r05.s067_output/n100.r05.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s067_output/n100.r05.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s067_output/n100.r05.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s067_output/n100.r05.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s067_output/n100.r05.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s067_output/n100.r05.s067.reference.fas" "n100.r05.s067_output/n100.r05.s067.fq1.fastq" "n100.r05.s067_output/n100.r05.s067.fq2.fastq" | samtools view -bS - > "n100.r05.s067_output/n100.r05.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s067_output/n100.r05.s067.untrimmed.sorted.bam" "n100.r05.s067_output/n100.r05.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s067_output/n100.r05.s067.untrimmed.sorted.bam" -b "n100.r05.s067_output/n100.r05.s067.primers.bed" -p "n100.r05.s067_output/n100.r05.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" "n100.r05.s067_output/n100.r05.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s067_output/n100.r05.s067.reference.fas" "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" > "n100.r05.s067_output/n100.r05.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s067_output/n100.r05.s067.reference.fas" --call-indels "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" > "n100.r05.s067_output/n100.r05.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" > "n100.r05.s067_output/n100.r05.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s067_output/n100.r05.s067.depth.txt" "n100.r05.s067_output/n100.r05.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s067_output/n100.r05.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s067_output/n100.r05.s067.reference.fas" | bcftools consensus -m "n100.r05.s067_output/n100.r05.s067.low_depth.tsv" tmp.vcf.gz > "n100.r05.s067_output/n100.r05.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:55 scheduler task 96f028fe (flow a5550ae3): loaded val<.=911e2c96 35.4MiB>
2021/07/08 16:58:55 scheduler task b2310ac6 (flow c488bfe1): loaded val<.=2f23cb38 35.4MiB>
2021/07/08 16:58:55 scheduler task 7cbf55a6 (flow 148cd5d9): loaded val<.=5b07a54d 35.4MiB>
2021/07/08 16:58:55 scheduler task 7cbf55a6 (flow 148cd5d9): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 7cbf55a6 (flow 148cd5d9): submitting (try 0): started
2021/07/08 16:58:55 scheduler task fa285b2b (flow 65deac98): loaded val<.=e1bba291 35.4MiB>
2021/07/08 16:58:55 scheduler task d3dae4b0 (flow f18c9534): loaded val<.=6ef34f12 35.4MiB>
2021/07/08 16:58:55 scheduler task eecc9bb8 (flow fe237c23): loaded val<.=5cf36e65 35.4MiB>
2021/07/08 16:58:55 scheduler task eecc9bb8 (flow fe237c23): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 94683d3a (flow 96139b10): loaded val<.=b6e731e4 35.4MiB>
2021/07/08 16:58:55 scheduler task 94683d3a (flow 96139b10): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task eecc9bb8 (flow fe237c23): submitting (try 0): started
2021/07/08 16:58:55 scheduler task e551941a (flow ea8b7e31): loaded val<.=10003339 35.4MiB>
2021/07/08 16:58:55 scheduler task e551941a (flow ea8b7e31): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 94683d3a (flow 96139b10): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 887f8caf (flow da518317): loaded val<.=66a4bf82 35.4MiB>
2021/07/08 16:58:55 scheduler task 887f8caf (flow da518317): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 7016df0e (flow c5ad9cb9): loaded val<.=44fbbfdd 35.4MiB>
2021/07/08 16:58:55 scheduler task 7016df0e (flow c5ad9cb9): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task fa285b2b (flow 65deac98): loaded val<.=e7d68d14 35.4MiB>
2021/07/08 16:58:55 scheduler task fa285b2b (flow 65deac98): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task a46930e3 (flow 29d4e1a3): loaded val<.=8d5976e0 35.4MiB>
2021/07/08 16:58:55 scheduler task ea078349 (flow 81ef77fc): loaded val<.=41280413 35.4MiB>
2021/07/08 16:58:55 scheduler task a46930e3 (flow 29d4e1a3): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task ea078349 (flow 81ef77fc): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 9a6015b6 (flow 9f6cdb6e): loaded val<.=c132cefd 35.4MiB>
2021/07/08 16:58:55 scheduler task 887f8caf (flow da518317): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 65b5b36f (flow d2089de1): loaded val<.=7f34a5fa 35.4MiB>
2021/07/08 16:58:55 scheduler task 72a551ca (flow 8cf24afe): loaded val<.=4a612df7 35.4MiB>
2021/07/08 16:58:55 scheduler task 91519b5f (flow b2cb8afe): loaded val<.=f75047c0 35.4MiB>
2021/07/08 16:58:55 scheduler task 5789b1c4 (flow 5c0cc62e): loaded val<.=91ba01ba 35.4MiB>
2021/07/08 16:58:55 scheduler task 5789b1c4 (flow 5c0cc62e): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 72a551ca (flow 8cf24afe): loaded val<.=43c40c1e 35.4MiB>
2021/07/08 16:58:55 scheduler task 72a551ca (flow 8cf24afe): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 9a6015b6 (flow 9f6cdb6e): loaded val<.=f8652671 35.4MiB>
2021/07/08 16:58:55 scheduler task 9a6015b6 (flow 9f6cdb6e): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 1075cfc4 (flow 0b598c7d): loaded val<.=1b46ea58 35.4MiB>
2021/07/08 16:58:55 scheduler task b5ceb6c6 (flow db9699b5): loaded val<.=9d735c1f 35.4MiB>
2021/07/08 16:58:55 scheduler task b5ceb6c6 (flow db9699b5): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 1075cfc4 (flow 0b598c7d): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task a2233715 (flow a5cfc129): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:55 scheduler task 279b061c (flow f4b07b7e): loaded val<.=bae3b2ad 35.4MiB>
2021/07/08 16:58:55 scheduler task 279b061c (flow f4b07b7e): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task c3dec1ba (flow 3194fd2a): loaded val<.=6cc78b19 35.4MiB>
2021/07/08 16:58:55 scheduler task c3dec1ba (flow 3194fd2a): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 895b6be6 (flow 4ea7450d): loaded val<.=de457d59 35.4MiB>
2021/07/08 16:58:55 scheduler task 895b6be6 (flow 4ea7450d): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task e551941a (flow ea8b7e31): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 7016df0e (flow c5ad9cb9): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 7848c63f (flow 26ac297d): loaded val<.=c75ef535 35.4MiB>
2021/07/08 16:58:55 scheduler task 7848c63f (flow 26ac297d): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 7fd21a08 (flow 5b62101d): loaded val<.=c64b7e56 35.4MiB>
2021/07/08 16:58:55 scheduler task 76111d9e (flow 91ea955a): loaded val<.=ff5c7278 35.4MiB>
2021/07/08 16:58:55 scheduler task 76111d9e (flow 91ea955a): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 7fd21a08 (flow 5b62101d): loaded val<.=59148e6a 35.4MiB>
2021/07/08 16:58:55 scheduler task 7fd21a08 (flow 5b62101d): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task ef9b0bc7 (flow 18d94a36): loaded val<.=33a93a3c 35.4MiB>
2021/07/08 16:58:55 scheduler task 96f028fe (flow a5550ae3): loaded val<.=aa150b0f 35.4MiB>
2021/07/08 16:58:55 scheduler task 96f028fe (flow a5550ae3): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task c999bc91 (flow 1808ed0b): loaded val<.=f827dbc4 35.4MiB>
2021/07/08 16:58:55 scheduler task c999bc91 (flow 1808ed0b): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task d20bb815 (flow 220c7c9b): loaded val<.=c00c2ec2 35.4MiB>
2021/07/08 16:58:55 scheduler task d20bb815 (flow 220c7c9b): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task fa285b2b (flow 65deac98): submitting (try 0): started
2021/07/08 16:58:55 scheduler task a46930e3 (flow 29d4e1a3): submitting (try 0): started
2021/07/08 16:58:55 scheduler task a1c84a70 (flow be90496f): loaded val<.=ae2c6286 35.4MiB>
2021/07/08 16:58:55 scheduler task ef9b0bc7 (flow 18d94a36): loaded val<.=db0485bf 35.4MiB>
2021/07/08 16:58:55 scheduler task ef9b0bc7 (flow 18d94a36): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 2d6a723e (flow 0ca87758): loaded val<.=f8489207 35.4MiB>
2021/07/08 16:58:55 scheduler task ea078349 (flow 81ef77fc): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 5789b1c4 (flow 5c0cc62e): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 72a551ca (flow 8cf24afe): submitting (try 0): started
2021/07/08 16:58:55 scheduler task c171a9af (flow f5a0e33a): loaded val<.=f3493876 35.4MiB>
2021/07/08 16:58:55 scheduler task c171a9af (flow f5a0e33a): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 9a6015b6 (flow 9f6cdb6e): submitting (try 0): started
2021/07/08 16:58:55 scheduler task fb5421a4 (flow 0e1a57df): loaded val<.=10cfadef 35.4MiB>
2021/07/08 16:58:55 scheduler task fb5421a4 (flow 0e1a57df): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 91519b5f (flow b2cb8afe): loaded val<.=a7d2c084 35.4MiB>
2021/07/08 16:58:55 scheduler task 91519b5f (flow b2cb8afe): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 34c034d0 (flow 98cff474): loaded val<.=11ad8f73 35.4MiB>
2021/07/08 16:58:55 scheduler task 34c034d0 (flow 98cff474): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task b5ceb6c6 (flow db9699b5): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 1075cfc4 (flow 0b598c7d): submitting (try 0): started
2021/07/08 16:58:55 scheduler task a2233715 (flow a5cfc129): waiting for completion (try 0): started
2021/07/08 16:58:55  ->  n100.r05.s082.Main.out_file a5cfc129 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:55 n100.r05.s082.Main.out_file a5cfc129 n100/r05/n100.r05.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:733da1d60ca6cf3b9c03810518234c35f3e697f67099958033f529b74919520a
	sha256:a5cfc129d0027c2552ab0a022dfc32cd1b3c0d379cac136d51d88d366a5bd289
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a223371598f8a1b45bcf4997c32c34868d4b434ec5c83964f06102c973e01721
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s082_output"
	    wget -O "n100.r05.s082_output/n100.r05.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s082_output/n100.r05.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s082_output/n100.r05.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s082_output/n100.r05.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s082_output/n100.r05.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s082_output/n100.r05.s082.reference.fas" "n100.r05.s082_output/n100.r05.s082.fq1.fastq" "n100.r05.s082_output/n100.r05.s082.fq2.fastq" | samtools view -bS - > "n100.r05.s082_output/n100.r05.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s082_output/n100.r05.s082.untrimmed.sorted.bam" "n100.r05.s082_output/n100.r05.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s082_output/n100.r05.s082.untrimmed.sorted.bam" -b "n100.r05.s082_output/n100.r05.s082.primers.bed" -p "n100.r05.s082_output/n100.r05.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" "n100.r05.s082_output/n100.r05.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s082_output/n100.r05.s082.reference.fas" "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" > "n100.r05.s082_output/n100.r05.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s082_output/n100.r05.s082.reference.fas" --call-indels "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" > "n100.r05.s082_output/n100.r05.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" > "n100.r05.s082_output/n100.r05.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s082_output/n100.r05.s082.depth.txt" "n100.r05.s082_output/n100.r05.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s082_output/n100.r05.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s082_output/n100.r05.s082.reference.fas" | bcftools consensus -m "n100.r05.s082_output/n100.r05.s082.low_depth.tsv" tmp.vcf.gz > "n100.r05.s082_output/n100.r05.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:55 scheduler task 279b061c (flow f4b07b7e): submitting (try 0): started
2021/07/08 16:58:55 scheduler task c3dec1ba (flow 3194fd2a): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 895b6be6 (flow 4ea7450d): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 7848c63f (flow 26ac297d): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 76111d9e (flow 91ea955a): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 4618e061 (flow 40e93ad6): loaded val<.=ea35e090 35.4MiB>
2021/07/08 16:58:55 scheduler task 4618e061 (flow 40e93ad6): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 7fd21a08 (flow 5b62101d): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 3b4791e9 (flow e7ffbcd4): loaded val<.=49a114c0 35.4MiB>
2021/07/08 16:58:55 scheduler task 3b4791e9 (flow e7ffbcd4): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 585ad2e5 (flow fff44c7b): loaded val<.=d130af28 35.4MiB>
2021/07/08 16:58:55 scheduler task 96f028fe (flow a5550ae3): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 65ef70a2 (flow 877fe836): loaded val<.=e2b245db 35.4MiB>
2021/07/08 16:58:55 scheduler task 65ef70a2 (flow 877fe836): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 5cf5576b (flow 0ff39579): loaded val<.=eca12f60 35.4MiB>
2021/07/08 16:58:55 scheduler task 5cf5576b (flow 0ff39579): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 585ad2e5 (flow fff44c7b): loaded val<.=90a1a0e2 35.4MiB>
2021/07/08 16:58:55 scheduler task 585ad2e5 (flow fff44c7b): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task b23b5216 (flow 06073390): loaded val<.=ee967759 35.4MiB>
2021/07/08 16:58:55 scheduler task b23b5216 (flow 06073390): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task c999bc91 (flow 1808ed0b): submitting (try 0): started
2021/07/08 16:58:55 scheduler task d20bb815 (flow 220c7c9b): submitting (try 0): started
2021/07/08 16:58:55 scheduler task ef9b0bc7 (flow 18d94a36): submitting (try 0): started
2021/07/08 16:58:55 scheduler task c171a9af (flow f5a0e33a): submitting (try 0): started
2021/07/08 16:58:55 scheduler task b2310ac6 (flow c488bfe1): loaded val<.=6d31bff4 35.4MiB>
2021/07/08 16:58:55 scheduler task b2310ac6 (flow c488bfe1): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task fb5421a4 (flow 0e1a57df): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 91519b5f (flow b2cb8afe): submitting (try 0): started
2021/07/08 16:58:55 scheduler task d3dae4b0 (flow f18c9534): loaded val<.=248a0a5c 35.4MiB>
2021/07/08 16:58:55 scheduler task d3dae4b0 (flow f18c9534): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 2d6a723e (flow 0ca87758): loaded val<.=b0970af2 35.4MiB>
2021/07/08 16:58:55 scheduler task 2d6a723e (flow 0ca87758): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 600e8f95 (flow f3280027): loaded val<.=d9cd22f8 35.4MiB>
2021/07/08 16:58:55 scheduler task 600e8f95 (flow f3280027): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 27b13502 (flow 152eb222): loaded val<.=dae236c4 35.4MiB>
2021/07/08 16:58:55 scheduler task 27b13502 (flow 152eb222): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 7f4a126f (flow 67971600): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:55 scheduler task 9cf7175b (flow 03bf8a77): loaded val<.=4a9370ab 35.4MiB>
2021/07/08 16:58:55 scheduler task 34c034d0 (flow 98cff474): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 4618e061 (flow 40e93ad6): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 3b4791e9 (flow e7ffbcd4): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 65ef70a2 (flow 877fe836): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 0db5a36a (flow a529c55b): loaded val<.=df5722bc 35.4MiB>
2021/07/08 16:58:55 scheduler task 0db5a36a (flow a529c55b): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 3176835f (flow f4fe708f): loaded val<.=574b729d 35.4MiB>
2021/07/08 16:58:55 scheduler task 3176835f (flow f4fe708f): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 5cf5576b (flow 0ff39579): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 65048d3f (flow 2ff7e1c2): loaded val<.=175ac563 35.4MiB>
2021/07/08 16:58:55 scheduler task 65048d3f (flow 2ff7e1c2): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task f9272175 (flow b087d69b): loaded val<.=0b94ff6b 35.4MiB>
2021/07/08 16:58:55 scheduler task f9272175 (flow b087d69b): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 585ad2e5 (flow fff44c7b): submitting (try 0): started
2021/07/08 16:58:55 scheduler task b23b5216 (flow 06073390): submitting (try 0): started
2021/07/08 16:58:55 scheduler task b2310ac6 (flow c488bfe1): submitting (try 0): started
2021/07/08 16:58:55 scheduler task b0d98539 (flow a77292d1): loaded val<.=06aef94f 35.4MiB>
2021/07/08 16:58:55 scheduler task 95aeedb8 (flow fc144875): loaded val<.=310455e2 35.4MiB>
2021/07/08 16:58:55 scheduler task d3dae4b0 (flow f18c9534): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 2d6a723e (flow 0ca87758): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 600e8f95 (flow f3280027): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 27b13502 (flow 152eb222): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 7f4a126f (flow 67971600): waiting for completion (try 0): started
2021/07/08 16:58:55  ->  n100.r05.s046.Main.out_file 67971600 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:55 n100.r05.s046.Main.out_file 67971600 n100/r05/n100.r05.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61156972d506653cc769831c2bda7c9cc46ac9f8a8f450889d4350b786b4ac75
	sha256:67971600b5e8a738bff4ab7bbe7862fe2a77841cf34d27d91abf6b9625fe6c70
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7f4a126f4a8d6ed6c231c5e613c68dbd731a809d0e3b00e41578e543fa047788
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s046_output"
	    wget -O "n100.r05.s046_output/n100.r05.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s046_output/n100.r05.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s046_output/n100.r05.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s046_output/n100.r05.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s046_output/n100.r05.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s046_output/n100.r05.s046.reference.fas" "n100.r05.s046_output/n100.r05.s046.fq1.fastq" "n100.r05.s046_output/n100.r05.s046.fq2.fastq" | samtools view -bS - > "n100.r05.s046_output/n100.r05.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s046_output/n100.r05.s046.untrimmed.sorted.bam" "n100.r05.s046_output/n100.r05.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s046_output/n100.r05.s046.untrimmed.sorted.bam" -b "n100.r05.s046_output/n100.r05.s046.primers.bed" -p "n100.r05.s046_output/n100.r05.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" "n100.r05.s046_output/n100.r05.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s046_output/n100.r05.s046.reference.fas" "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" > "n100.r05.s046_output/n100.r05.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s046_output/n100.r05.s046.reference.fas" --call-indels "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" > "n100.r05.s046_output/n100.r05.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" > "n100.r05.s046_output/n100.r05.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s046_output/n100.r05.s046.depth.txt" "n100.r05.s046_output/n100.r05.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s046_output/n100.r05.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s046_output/n100.r05.s046.reference.fas" | bcftools consensus -m "n100.r05.s046_output/n100.r05.s046.low_depth.tsv" tmp.vcf.gz > "n100.r05.s046_output/n100.r05.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:55 scheduler task 0db5a36a (flow a529c55b): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 3176835f (flow f4fe708f): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 65048d3f (flow 2ff7e1c2): submitting (try 0): started
2021/07/08 16:58:55 scheduler task f9272175 (flow b087d69b): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 95aeedb8 (flow fc144875): loaded val<.=d79f3920 35.4MiB>
2021/07/08 16:58:55 scheduler task a959f1cd (flow deb5653c): loaded val<.=0e627a35 35.4MiB>
2021/07/08 16:58:55 scheduler task 95aeedb8 (flow fc144875): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 95aeedb8 (flow fc144875): submitting (try 0): started
2021/07/08 16:58:55 scheduler task a959f1cd (flow deb5653c): loaded val<.=012341f0 35.4MiB>
2021/07/08 16:58:55 scheduler task a959f1cd (flow deb5653c): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task a959f1cd (flow deb5653c): submitting (try 0): started
2021/07/08 16:58:55 scheduler task cdca394a (flow 777a4ca0): loaded val<.=3c3f2b0b 35.4MiB>
2021/07/08 16:58:55 scheduler task cdca394a (flow 777a4ca0): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 93e71401 (flow 4e7609db): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:55 scheduler task b0d98539 (flow a77292d1): loaded val<.=b6bf5366 35.4MiB>
2021/07/08 16:58:55 scheduler task b0d98539 (flow a77292d1): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task cdca394a (flow 777a4ca0): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 93e71401 (flow 4e7609db): waiting for completion (try 0): started
2021/07/08 16:58:55  ->  n100.r05.s011.Main.out_file 4e7609db exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:55 n100.r05.s011.Main.out_file 4e7609db n100/r05/n100.r05.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:483ee3ad182aa20980144aaa3674b2c0b08933912de64ab5a80e698814df9917
	sha256:4e7609db831ce21cb7fee28f6a9a796f22aa6afe864eaa9996b27120665ef57e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/93e714011948925cfc847cef885a8ecf1d32e071593138f56b6f47c8371975c4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s011_output"
	    wget -O "n100.r05.s011_output/n100.r05.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s011_output/n100.r05.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s011_output/n100.r05.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s011_output/n100.r05.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s011_output/n100.r05.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s011_output/n100.r05.s011.reference.fas" "n100.r05.s011_output/n100.r05.s011.fq1.fastq" "n100.r05.s011_output/n100.r05.s011.fq2.fastq" | samtools view -bS - > "n100.r05.s011_output/n100.r05.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s011_output/n100.r05.s011.untrimmed.sorted.bam" "n100.r05.s011_output/n100.r05.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s011_output/n100.r05.s011.untrimmed.sorted.bam" -b "n100.r05.s011_output/n100.r05.s011.primers.bed" -p "n100.r05.s011_output/n100.r05.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" "n100.r05.s011_output/n100.r05.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s011_output/n100.r05.s011.reference.fas" "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" > "n100.r05.s011_output/n100.r05.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s011_output/n100.r05.s011.reference.fas" --call-indels "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" > "n100.r05.s011_output/n100.r05.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" > "n100.r05.s011_output/n100.r05.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s011_output/n100.r05.s011.depth.txt" "n100.r05.s011_output/n100.r05.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s011_output/n100.r05.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s011_output/n100.r05.s011.reference.fas" | bcftools consensus -m "n100.r05.s011_output/n100.r05.s011.low_depth.tsv" tmp.vcf.gz > "n100.r05.s011_output/n100.r05.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:55 scheduler task b0d98539 (flow a77292d1): submitting (try 0): started
2021/07/08 16:58:55 scheduler task b81e3e3f (flow 7c2051b2): loaded val<.=908bb4b5 35.4MiB>
2021/07/08 16:58:55 scheduler task b81e3e3f (flow 7c2051b2): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task b81e3e3f (flow 7c2051b2): submitting (try 0): started
2021/07/08 16:58:55 scheduler task a1c84a70 (flow be90496f): loaded val<.=5b525d79 35.4MiB>
2021/07/08 16:58:55 scheduler task a1c84a70 (flow be90496f): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task a1c84a70 (flow be90496f): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 65b5b36f (flow d2089de1): loaded val<.=3d72fb01 35.4MiB>
2021/07/08 16:58:55 scheduler task 65b5b36f (flow d2089de1): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 65b5b36f (flow d2089de1): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 25b5d38e (flow b7cf4504): loaded val<.=c619032b 35.4MiB>
2021/07/08 16:58:55 scheduler task 25b5d38e (flow b7cf4504): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 25b5d38e (flow b7cf4504): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 9cf7175b (flow 03bf8a77): loaded val<.=08b96caa 35.4MiB>
2021/07/08 16:58:55 scheduler task 9cf7175b (flow 03bf8a77): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 9cf7175b (flow 03bf8a77): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 4ac811a5 (flow 62342884): loaded val<.=10eaec33 35.4MiB>
2021/07/08 16:58:55 scheduler task 4ac811a5 (flow 62342884): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task c24bee6e (flow 877da018): loaded val<.=248a0a5c 35.4MiB>
2021/07/08 16:58:55 scheduler task c24bee6e (flow 877da018): loading (try 0): successful, next state: submitting
2021/07/08 16:58:55 scheduler task 4ac811a5 (flow 62342884): submitting (try 0): started
2021/07/08 16:58:55 scheduler task c24bee6e (flow 877da018): submitting (try 0): started
2021/07/08 16:58:55 scheduler task 5d6d53bd (flow bc5769e6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:55 scheduler task 5d6d53bd (flow bc5769e6): waiting for completion (try 0): started
2021/07/08 16:58:55  ->  n100.r05.s030.Main.out_file bc5769e6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:55 n100.r05.s030.Main.out_file bc5769e6 n100/r05/n100.r05.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:809f7f519b3e1ac29ed3239d378c31e5563e8f883e63dbe339d9366a30048101
	sha256:bc5769e6914fb7b9b31744bf4ca8ab303072701d74c24dd8aaac9ea39b5ec26d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5d6d53bd0c92f8b4368cf59237d3b5e2a1ac99b194cece006993144e70fe4adb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s030_output"
	    wget -O "n100.r05.s030_output/n100.r05.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s030_output/n100.r05.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s030_output/n100.r05.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s030_output/n100.r05.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s030_output/n100.r05.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s030_output/n100.r05.s030.reference.fas" "n100.r05.s030_output/n100.r05.s030.fq1.fastq" "n100.r05.s030_output/n100.r05.s030.fq2.fastq" | samtools view -bS - > "n100.r05.s030_output/n100.r05.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s030_output/n100.r05.s030.untrimmed.sorted.bam" "n100.r05.s030_output/n100.r05.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s030_output/n100.r05.s030.untrimmed.sorted.bam" -b "n100.r05.s030_output/n100.r05.s030.primers.bed" -p "n100.r05.s030_output/n100.r05.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" "n100.r05.s030_output/n100.r05.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s030_output/n100.r05.s030.reference.fas" "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" > "n100.r05.s030_output/n100.r05.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s030_output/n100.r05.s030.reference.fas" --call-indels "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" > "n100.r05.s030_output/n100.r05.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" > "n100.r05.s030_output/n100.r05.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s030_output/n100.r05.s030.depth.txt" "n100.r05.s030_output/n100.r05.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s030_output/n100.r05.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s030_output/n100.r05.s030.reference.fas" | bcftools consensus -m "n100.r05.s030_output/n100.r05.s030.low_depth.tsv" tmp.vcf.gz > "n100.r05.s030_output/n100.r05.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:55 scheduler task 3f52d60b (flow 176763f6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:55 scheduler task 3f52d60b (flow 176763f6): waiting for completion (try 0): started
2021/07/08 16:58:55  ->  n100.r05.s022.Main.out_file 176763f6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:55 n100.r05.s022.Main.out_file 176763f6 n100/r05/n100.r05.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0fc2b0f5bb29a17d0262e6c01524db4ffaa124655c59283b94dcd7b5cbee8ce8
	sha256:176763f6a4cee4ac0b62b08a55a3e432a60a3543dafaea24dc84486775bd57bd
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3f52d60bc815cbc67cf34c7daba152c4a96a3a1e6e1a53b510797ec882bbfdbb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s022_output"
	    wget -O "n100.r05.s022_output/n100.r05.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s022_output/n100.r05.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s022_output/n100.r05.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s022_output/n100.r05.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s022_output/n100.r05.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s022_output/n100.r05.s022.reference.fas" "n100.r05.s022_output/n100.r05.s022.fq1.fastq" "n100.r05.s022_output/n100.r05.s022.fq2.fastq" | samtools view -bS - > "n100.r05.s022_output/n100.r05.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s022_output/n100.r05.s022.untrimmed.sorted.bam" "n100.r05.s022_output/n100.r05.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s022_output/n100.r05.s022.untrimmed.sorted.bam" -b "n100.r05.s022_output/n100.r05.s022.primers.bed" -p "n100.r05.s022_output/n100.r05.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" "n100.r05.s022_output/n100.r05.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s022_output/n100.r05.s022.reference.fas" "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" > "n100.r05.s022_output/n100.r05.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s022_output/n100.r05.s022.reference.fas" --call-indels "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" > "n100.r05.s022_output/n100.r05.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" > "n100.r05.s022_output/n100.r05.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s022_output/n100.r05.s022.depth.txt" "n100.r05.s022_output/n100.r05.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s022_output/n100.r05.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s022_output/n100.r05.s022.reference.fas" | bcftools consensus -m "n100.r05.s022_output/n100.r05.s022.low_depth.tsv" tmp.vcf.gz > "n100.r05.s022_output/n100.r05.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task 740318b7 (flow 9a2a57fd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task 740318b7 (flow 9a2a57fd): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s080.Main.out_file 9a2a57fd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s080.Main.out_file 9a2a57fd n100/r05/n100.r05.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:979316aa130dd721eeac9b20fa05c9340f769084a4fc536e5da1e1d992c155c9
	sha256:9a2a57fdaabaa14ad8eae03e7e95aa13e3195bbe1f012a41f2fc47fc23b3de30
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/740318b7b8d1694a24600acc26f4b0af07ae71d311b3f349accef4a2c1e44051
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s080_output"
	    wget -O "n100.r05.s080_output/n100.r05.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s080_output/n100.r05.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s080_output/n100.r05.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s080_output/n100.r05.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s080_output/n100.r05.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s080_output/n100.r05.s080.reference.fas" "n100.r05.s080_output/n100.r05.s080.fq1.fastq" "n100.r05.s080_output/n100.r05.s080.fq2.fastq" | samtools view -bS - > "n100.r05.s080_output/n100.r05.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s080_output/n100.r05.s080.untrimmed.sorted.bam" "n100.r05.s080_output/n100.r05.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s080_output/n100.r05.s080.untrimmed.sorted.bam" -b "n100.r05.s080_output/n100.r05.s080.primers.bed" -p "n100.r05.s080_output/n100.r05.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" "n100.r05.s080_output/n100.r05.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s080_output/n100.r05.s080.reference.fas" "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" > "n100.r05.s080_output/n100.r05.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s080_output/n100.r05.s080.reference.fas" --call-indels "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" > "n100.r05.s080_output/n100.r05.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" > "n100.r05.s080_output/n100.r05.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s080_output/n100.r05.s080.depth.txt" "n100.r05.s080_output/n100.r05.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s080_output/n100.r05.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s080_output/n100.r05.s080.reference.fas" | bcftools consensus -m "n100.r05.s080_output/n100.r05.s080.low_depth.tsv" tmp.vcf.gz > "n100.r05.s080_output/n100.r05.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task 43b97eb9 (flow bc0eb545): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task 43b97eb9 (flow bc0eb545): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s015.Main.out_file bc0eb545 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s015.Main.out_file bc0eb545 n100/r05/n100.r05.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:675d2dfb0a4dadc14b15752dc428188009d514cb724bdc720e00422234033c73
	sha256:bc0eb545608d25f064a3aa71467817b11e6f8b41bae86918266f336b0c133be1
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43b97eb9642180da491ca0c8998bda7cd91c60fddc1193f171a789f8306f8f5e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s015_output"
	    wget -O "n100.r05.s015_output/n100.r05.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s015_output/n100.r05.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s015_output/n100.r05.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s015_output/n100.r05.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s015_output/n100.r05.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s015_output/n100.r05.s015.reference.fas" "n100.r05.s015_output/n100.r05.s015.fq1.fastq" "n100.r05.s015_output/n100.r05.s015.fq2.fastq" | samtools view -bS - > "n100.r05.s015_output/n100.r05.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s015_output/n100.r05.s015.untrimmed.sorted.bam" "n100.r05.s015_output/n100.r05.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s015_output/n100.r05.s015.untrimmed.sorted.bam" -b "n100.r05.s015_output/n100.r05.s015.primers.bed" -p "n100.r05.s015_output/n100.r05.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" "n100.r05.s015_output/n100.r05.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s015_output/n100.r05.s015.reference.fas" "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" > "n100.r05.s015_output/n100.r05.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s015_output/n100.r05.s015.reference.fas" --call-indels "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" > "n100.r05.s015_output/n100.r05.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" > "n100.r05.s015_output/n100.r05.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s015_output/n100.r05.s015.depth.txt" "n100.r05.s015_output/n100.r05.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s015_output/n100.r05.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s015_output/n100.r05.s015.reference.fas" | bcftools consensus -m "n100.r05.s015_output/n100.r05.s015.low_depth.tsv" tmp.vcf.gz > "n100.r05.s015_output/n100.r05.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task cebd915c (flow 202fcb82): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task cebd915c (flow 202fcb82): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s026.Main.out_file 202fcb82 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s026.Main.out_file 202fcb82 n100/r05/n100.r05.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a65aa1e6323ff4355c02bfb6db6b0f9d53fedf7a5b060d16f7a931ba1be83397
	sha256:202fcb82ba3092820ded50db7c96af41f9082f3242fef7788065bb1e4e2e9e1e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cebd915c1367086d1869b85cff2c55729d50c644d2be4a3e2167a6a38dc62c44
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s026_output"
	    wget -O "n100.r05.s026_output/n100.r05.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s026_output/n100.r05.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s026_output/n100.r05.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s026_output/n100.r05.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s026_output/n100.r05.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s026_output/n100.r05.s026.reference.fas" "n100.r05.s026_output/n100.r05.s026.fq1.fastq" "n100.r05.s026_output/n100.r05.s026.fq2.fastq" | samtools view -bS - > "n100.r05.s026_output/n100.r05.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s026_output/n100.r05.s026.untrimmed.sorted.bam" "n100.r05.s026_output/n100.r05.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s026_output/n100.r05.s026.untrimmed.sorted.bam" -b "n100.r05.s026_output/n100.r05.s026.primers.bed" -p "n100.r05.s026_output/n100.r05.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" "n100.r05.s026_output/n100.r05.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s026_output/n100.r05.s026.reference.fas" "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" > "n100.r05.s026_output/n100.r05.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s026_output/n100.r05.s026.reference.fas" --call-indels "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" > "n100.r05.s026_output/n100.r05.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" > "n100.r05.s026_output/n100.r05.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s026_output/n100.r05.s026.depth.txt" "n100.r05.s026_output/n100.r05.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s026_output/n100.r05.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s026_output/n100.r05.s026.reference.fas" | bcftools consensus -m "n100.r05.s026_output/n100.r05.s026.low_depth.tsv" tmp.vcf.gz > "n100.r05.s026_output/n100.r05.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task ed56a43b (flow 4af71a7e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task ed56a43b (flow 4af71a7e): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s091.Main.out_file 4af71a7e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s091.Main.out_file 4af71a7e n100/r05/n100.r05.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:45279f05cc8e90437ebf9b2936f20716c451762afb787b9240177ee5931f9e95
	sha256:4af71a7ecf68128f98d72096732c895363821baebff4b4cf0efa2b724800778a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ed56a43b4612487f01c8d0282a2d6ecad3f6f5f15ea9a7d56640be0482b4dc55
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s091_output"
	    wget -O "n100.r05.s091_output/n100.r05.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s091_output/n100.r05.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s091_output/n100.r05.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s091_output/n100.r05.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s091_output/n100.r05.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s091_output/n100.r05.s091.reference.fas" "n100.r05.s091_output/n100.r05.s091.fq1.fastq" "n100.r05.s091_output/n100.r05.s091.fq2.fastq" | samtools view -bS - > "n100.r05.s091_output/n100.r05.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s091_output/n100.r05.s091.untrimmed.sorted.bam" "n100.r05.s091_output/n100.r05.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s091_output/n100.r05.s091.untrimmed.sorted.bam" -b "n100.r05.s091_output/n100.r05.s091.primers.bed" -p "n100.r05.s091_output/n100.r05.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" "n100.r05.s091_output/n100.r05.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s091_output/n100.r05.s091.reference.fas" "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" > "n100.r05.s091_output/n100.r05.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s091_output/n100.r05.s091.reference.fas" --call-indels "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" > "n100.r05.s091_output/n100.r05.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" > "n100.r05.s091_output/n100.r05.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s091_output/n100.r05.s091.depth.txt" "n100.r05.s091_output/n100.r05.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s091_output/n100.r05.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s091_output/n100.r05.s091.reference.fas" | bcftools consensus -m "n100.r05.s091_output/n100.r05.s091.low_depth.tsv" tmp.vcf.gz > "n100.r05.s091_output/n100.r05.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task 3a4d9596 (flow 6fa0a4b3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task 3a4d9596 (flow 6fa0a4b3): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s033.Main.out_file 6fa0a4b3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s033.Main.out_file 6fa0a4b3 n100/r05/n100.r05.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:590c4e4ee4f7e0b8b591fc5f111c68546c8e48d04ad852dfed83212d1941dcaf
	sha256:6fa0a4b3fdede99694b000c696f013d38a30b53f13f3b465eb97433f1435bc56
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a4d959669c08682091f633dc1269851eab280139179896f2e56a44cef5e2bbb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s033_output"
	    wget -O "n100.r05.s033_output/n100.r05.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s033_output/n100.r05.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s033_output/n100.r05.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s033_output/n100.r05.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s033_output/n100.r05.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s033_output/n100.r05.s033.reference.fas" "n100.r05.s033_output/n100.r05.s033.fq1.fastq" "n100.r05.s033_output/n100.r05.s033.fq2.fastq" | samtools view -bS - > "n100.r05.s033_output/n100.r05.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s033_output/n100.r05.s033.untrimmed.sorted.bam" "n100.r05.s033_output/n100.r05.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s033_output/n100.r05.s033.untrimmed.sorted.bam" -b "n100.r05.s033_output/n100.r05.s033.primers.bed" -p "n100.r05.s033_output/n100.r05.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" "n100.r05.s033_output/n100.r05.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s033_output/n100.r05.s033.reference.fas" "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" > "n100.r05.s033_output/n100.r05.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s033_output/n100.r05.s033.reference.fas" --call-indels "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" > "n100.r05.s033_output/n100.r05.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" > "n100.r05.s033_output/n100.r05.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s033_output/n100.r05.s033.depth.txt" "n100.r05.s033_output/n100.r05.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s033_output/n100.r05.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s033_output/n100.r05.s033.reference.fas" | bcftools consensus -m "n100.r05.s033_output/n100.r05.s033.low_depth.tsv" tmp.vcf.gz > "n100.r05.s033_output/n100.r05.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task 9f62f6f9 (flow 900dcaae): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task 9f62f6f9 (flow 900dcaae): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s034.Main.out_file 900dcaae exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s034.Main.out_file 900dcaae n100/r05/n100.r05.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:981a0132f5f3dd650fa4ce4fa2f34abe481db588be27837b4f2d52e02a20b89e
	sha256:900dcaae625eaf7114644adcfd9401ba879bfb339e503441dd951510e7f17c1b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9f62f6f9e0d2e40fdb065910c0ab22dd85e1d2675b3e341df20ccde376412313
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s034_output"
	    wget -O "n100.r05.s034_output/n100.r05.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s034_output/n100.r05.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s034_output/n100.r05.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s034_output/n100.r05.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s034_output/n100.r05.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s034_output/n100.r05.s034.reference.fas" "n100.r05.s034_output/n100.r05.s034.fq1.fastq" "n100.r05.s034_output/n100.r05.s034.fq2.fastq" | samtools view -bS - > "n100.r05.s034_output/n100.r05.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s034_output/n100.r05.s034.untrimmed.sorted.bam" "n100.r05.s034_output/n100.r05.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s034_output/n100.r05.s034.untrimmed.sorted.bam" -b "n100.r05.s034_output/n100.r05.s034.primers.bed" -p "n100.r05.s034_output/n100.r05.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" "n100.r05.s034_output/n100.r05.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s034_output/n100.r05.s034.reference.fas" "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" > "n100.r05.s034_output/n100.r05.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s034_output/n100.r05.s034.reference.fas" --call-indels "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" > "n100.r05.s034_output/n100.r05.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" > "n100.r05.s034_output/n100.r05.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s034_output/n100.r05.s034.depth.txt" "n100.r05.s034_output/n100.r05.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s034_output/n100.r05.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s034_output/n100.r05.s034.reference.fas" | bcftools consensus -m "n100.r05.s034_output/n100.r05.s034.low_depth.tsv" tmp.vcf.gz > "n100.r05.s034_output/n100.r05.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:56 scheduler task 67f515d1 (flow 55fa0156): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:56 scheduler task 67f515d1 (flow 55fa0156): waiting for completion (try 0): started
2021/07/08 16:58:56  ->  n100.r05.s027.Main.out_file 55fa0156 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:56 n100.r05.s027.Main.out_file 55fa0156 n100/r05/n100.r05.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c492a9062f478ba5d96f892c552f9bf0c890065d97ea4321ab06896f6499db9e
	sha256:55fa01560126b358700a179288963b57aeeb8d1ec527f6ce629596a1ddf01e5c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67f515d14bbfcd6761c8fbcec6449854cbc672f7576f6c90631ff6d31c8b5c25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s027_output"
	    wget -O "n100.r05.s027_output/n100.r05.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s027_output/n100.r05.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s027_output/n100.r05.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s027_output/n100.r05.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s027_output/n100.r05.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s027_output/n100.r05.s027.reference.fas" "n100.r05.s027_output/n100.r05.s027.fq1.fastq" "n100.r05.s027_output/n100.r05.s027.fq2.fastq" | samtools view -bS - > "n100.r05.s027_output/n100.r05.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s027_output/n100.r05.s027.untrimmed.sorted.bam" "n100.r05.s027_output/n100.r05.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s027_output/n100.r05.s027.untrimmed.sorted.bam" -b "n100.r05.s027_output/n100.r05.s027.primers.bed" -p "n100.r05.s027_output/n100.r05.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" "n100.r05.s027_output/n100.r05.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s027_output/n100.r05.s027.reference.fas" "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" > "n100.r05.s027_output/n100.r05.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s027_output/n100.r05.s027.reference.fas" --call-indels "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" > "n100.r05.s027_output/n100.r05.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" > "n100.r05.s027_output/n100.r05.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s027_output/n100.r05.s027.depth.txt" "n100.r05.s027_output/n100.r05.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s027_output/n100.r05.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s027_output/n100.r05.s027.reference.fas" | bcftools consensus -m "n100.r05.s027_output/n100.r05.s027.low_depth.tsv" tmp.vcf.gz > "n100.r05.s027_output/n100.r05.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:57 scheduler task 222946cd (flow 37eb25e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:57 scheduler task 222946cd (flow 37eb25e3): waiting for completion (try 0): started
2021/07/08 16:58:57  ->  n100.r05.s047.Main.out_file 37eb25e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:57 n100.r05.s047.Main.out_file 37eb25e3 n100/r05/n100.r05.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:112647b680a7b612e70f9f5ddee4b6883a007087de72b5d48756a10846627a0b
	sha256:37eb25e3ba18678a77f468fb8081f24db3384a8a59a3148dc372754e801f2ebf
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/222946cd5209fa9aa1d10a8834096ad773b1d3ec36437abf55f17aca6a205fff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s047_output"
	    wget -O "n100.r05.s047_output/n100.r05.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s047_output/n100.r05.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s047_output/n100.r05.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s047_output/n100.r05.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s047_output/n100.r05.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s047_output/n100.r05.s047.reference.fas" "n100.r05.s047_output/n100.r05.s047.fq1.fastq" "n100.r05.s047_output/n100.r05.s047.fq2.fastq" | samtools view -bS - > "n100.r05.s047_output/n100.r05.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s047_output/n100.r05.s047.untrimmed.sorted.bam" "n100.r05.s047_output/n100.r05.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s047_output/n100.r05.s047.untrimmed.sorted.bam" -b "n100.r05.s047_output/n100.r05.s047.primers.bed" -p "n100.r05.s047_output/n100.r05.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" "n100.r05.s047_output/n100.r05.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s047_output/n100.r05.s047.reference.fas" "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" > "n100.r05.s047_output/n100.r05.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s047_output/n100.r05.s047.reference.fas" --call-indels "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" > "n100.r05.s047_output/n100.r05.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" > "n100.r05.s047_output/n100.r05.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s047_output/n100.r05.s047.depth.txt" "n100.r05.s047_output/n100.r05.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s047_output/n100.r05.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s047_output/n100.r05.s047.reference.fas" | bcftools consensus -m "n100.r05.s047_output/n100.r05.s047.low_depth.tsv" tmp.vcf.gz > "n100.r05.s047_output/n100.r05.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:57 scheduler task 7ee1dc12 (flow f84e5b81): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:57 scheduler task 7ee1dc12 (flow f84e5b81): waiting for completion (try 0): started
2021/07/08 16:58:57  ->  n100.r05.s025.Main.out_file f84e5b81 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:57 n100.r05.s025.Main.out_file f84e5b81 n100/r05/n100.r05.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5d9c272a823dfe14b05f33e87609569faacd5d7f03af4f262fefdd8e270566c9
	sha256:f84e5b81afd9c2ac514d2f12ab315621621768f785cef27bbb1e269cbc0403c8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ee1dc128dca6cc3a638c80f95f6f1ad7c8ae5642d53cea5698ca5a80b586cab
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s025_output"
	    wget -O "n100.r05.s025_output/n100.r05.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s025_output/n100.r05.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s025_output/n100.r05.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s025_output/n100.r05.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s025_output/n100.r05.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s025_output/n100.r05.s025.reference.fas" "n100.r05.s025_output/n100.r05.s025.fq1.fastq" "n100.r05.s025_output/n100.r05.s025.fq2.fastq" | samtools view -bS - > "n100.r05.s025_output/n100.r05.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s025_output/n100.r05.s025.untrimmed.sorted.bam" "n100.r05.s025_output/n100.r05.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s025_output/n100.r05.s025.untrimmed.sorted.bam" -b "n100.r05.s025_output/n100.r05.s025.primers.bed" -p "n100.r05.s025_output/n100.r05.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" "n100.r05.s025_output/n100.r05.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s025_output/n100.r05.s025.reference.fas" "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" > "n100.r05.s025_output/n100.r05.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s025_output/n100.r05.s025.reference.fas" --call-indels "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" > "n100.r05.s025_output/n100.r05.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" > "n100.r05.s025_output/n100.r05.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s025_output/n100.r05.s025.depth.txt" "n100.r05.s025_output/n100.r05.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s025_output/n100.r05.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s025_output/n100.r05.s025.reference.fas" | bcftools consensus -m "n100.r05.s025_output/n100.r05.s025.low_depth.tsv" tmp.vcf.gz > "n100.r05.s025_output/n100.r05.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:57 scheduler task f2ba62a4 (flow 48c96476): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:57 scheduler task f2ba62a4 (flow 48c96476): waiting for completion (try 0): started
2021/07/08 16:58:57  ->  n100.r05.s001.Main.out_file 48c96476 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:57 n100.r05.s001.Main.out_file 48c96476 n100/r05/n100.r05.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:993cfb12eb4365c84cb2e869d0dab1e454f937565b4d933d68125e8105b25bc5
	sha256:48c9647634a4b60f02e183f1c0de45c13db492458f97542a7e67f788770b8880
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2ba62a4206050a2a5d774d69a40bbe9275cb630c137914a46027f68b888c36d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s001_output"
	    wget -O "n100.r05.s001_output/n100.r05.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s001_output/n100.r05.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s001_output/n100.r05.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s001_output/n100.r05.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s001_output/n100.r05.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s001_output/n100.r05.s001.reference.fas" "n100.r05.s001_output/n100.r05.s001.fq1.fastq" "n100.r05.s001_output/n100.r05.s001.fq2.fastq" | samtools view -bS - > "n100.r05.s001_output/n100.r05.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s001_output/n100.r05.s001.untrimmed.sorted.bam" "n100.r05.s001_output/n100.r05.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s001_output/n100.r05.s001.untrimmed.sorted.bam" -b "n100.r05.s001_output/n100.r05.s001.primers.bed" -p "n100.r05.s001_output/n100.r05.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" "n100.r05.s001_output/n100.r05.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s001_output/n100.r05.s001.reference.fas" "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" > "n100.r05.s001_output/n100.r05.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s001_output/n100.r05.s001.reference.fas" --call-indels "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" > "n100.r05.s001_output/n100.r05.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" > "n100.r05.s001_output/n100.r05.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s001_output/n100.r05.s001.depth.txt" "n100.r05.s001_output/n100.r05.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s001_output/n100.r05.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s001_output/n100.r05.s001.reference.fas" | bcftools consensus -m "n100.r05.s001_output/n100.r05.s001.low_depth.tsv" tmp.vcf.gz > "n100.r05.s001_output/n100.r05.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:57 scheduler task 5db678a8 (flow a4b5dc91): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:57 scheduler task 5db678a8 (flow a4b5dc91): waiting for completion (try 0): started
2021/07/08 16:58:57  ->  n100.r05.s070.Main.out_file a4b5dc91 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:57 n100.r05.s070.Main.out_file a4b5dc91 n100/r05/n100.r05.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7aede367463f12ea40f47cd344b309ce031fe9c4b4765991587a19c6cea7d45e
	sha256:a4b5dc9165462cc97e848584be496add5d0d08dc04f9bc8c035c1e258995ff6d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5db678a82d452768dede0b7e60bdd027095d1a0ac20ac4b3d8f0b57707dc9f11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s070_output"
	    wget -O "n100.r05.s070_output/n100.r05.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s070_output/n100.r05.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s070_output/n100.r05.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s070_output/n100.r05.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s070_output/n100.r05.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s070_output/n100.r05.s070.reference.fas" "n100.r05.s070_output/n100.r05.s070.fq1.fastq" "n100.r05.s070_output/n100.r05.s070.fq2.fastq" | samtools view -bS - > "n100.r05.s070_output/n100.r05.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s070_output/n100.r05.s070.untrimmed.sorted.bam" "n100.r05.s070_output/n100.r05.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s070_output/n100.r05.s070.untrimmed.sorted.bam" -b "n100.r05.s070_output/n100.r05.s070.primers.bed" -p "n100.r05.s070_output/n100.r05.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" "n100.r05.s070_output/n100.r05.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s070_output/n100.r05.s070.reference.fas" "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" > "n100.r05.s070_output/n100.r05.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s070_output/n100.r05.s070.reference.fas" --call-indels "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" > "n100.r05.s070_output/n100.r05.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" > "n100.r05.s070_output/n100.r05.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s070_output/n100.r05.s070.depth.txt" "n100.r05.s070_output/n100.r05.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s070_output/n100.r05.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s070_output/n100.r05.s070.reference.fas" | bcftools consensus -m "n100.r05.s070_output/n100.r05.s070.low_depth.tsv" tmp.vcf.gz > "n100.r05.s070_output/n100.r05.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:57 scheduler task 1de47370 (flow 8813551d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:57 scheduler task 1de47370 (flow 8813551d): waiting for completion (try 0): started
2021/07/08 16:58:57  ->  n100.r05.s058.Main.out_file 8813551d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:57 n100.r05.s058.Main.out_file 8813551d n100/r05/n100.r05.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad375470116cdde69dbc06fe921c1c33605e7a6bdaa6cb72608dd48b1d1c3ead
	sha256:8813551d5fd9006baa237d2c9bebd52f7f3d91742f2293b5b2b2dd6a5ce09fe5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1de4737028c4b2b77bc6653b53f1cba2fbc7ba2e82f261c4263c150911b7e2a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s058_output"
	    wget -O "n100.r05.s058_output/n100.r05.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s058_output/n100.r05.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s058_output/n100.r05.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s058_output/n100.r05.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s058_output/n100.r05.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s058_output/n100.r05.s058.reference.fas" "n100.r05.s058_output/n100.r05.s058.fq1.fastq" "n100.r05.s058_output/n100.r05.s058.fq2.fastq" | samtools view -bS - > "n100.r05.s058_output/n100.r05.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s058_output/n100.r05.s058.untrimmed.sorted.bam" "n100.r05.s058_output/n100.r05.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s058_output/n100.r05.s058.untrimmed.sorted.bam" -b "n100.r05.s058_output/n100.r05.s058.primers.bed" -p "n100.r05.s058_output/n100.r05.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" "n100.r05.s058_output/n100.r05.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s058_output/n100.r05.s058.reference.fas" "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" > "n100.r05.s058_output/n100.r05.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s058_output/n100.r05.s058.reference.fas" --call-indels "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" > "n100.r05.s058_output/n100.r05.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" > "n100.r05.s058_output/n100.r05.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s058_output/n100.r05.s058.depth.txt" "n100.r05.s058_output/n100.r05.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s058_output/n100.r05.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s058_output/n100.r05.s058.reference.fas" | bcftools consensus -m "n100.r05.s058_output/n100.r05.s058.low_depth.tsv" tmp.vcf.gz > "n100.r05.s058_output/n100.r05.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task aac314ef (flow 1a055586): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task aac314ef (flow 1a055586): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s013.Main.out_file 1a055586 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s013.Main.out_file 1a055586 n100/r05/n100.r05.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3ab728fb87ebd3599afde07a6adf83d9deceeaa96f32d56ca93800a68db92a11
	sha256:1a0555864a40611543da89d1a649ea3e3fbabdc9499bc88ee273244f018c59be
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aac314ef953a48cdd715e50bb57163c1aa6dbb12a7bbacd2ce43b25239fdb88d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s013_output"
	    wget -O "n100.r05.s013_output/n100.r05.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s013_output/n100.r05.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s013_output/n100.r05.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s013_output/n100.r05.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s013_output/n100.r05.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s013_output/n100.r05.s013.reference.fas" "n100.r05.s013_output/n100.r05.s013.fq1.fastq" "n100.r05.s013_output/n100.r05.s013.fq2.fastq" | samtools view -bS - > "n100.r05.s013_output/n100.r05.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s013_output/n100.r05.s013.untrimmed.sorted.bam" "n100.r05.s013_output/n100.r05.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s013_output/n100.r05.s013.untrimmed.sorted.bam" -b "n100.r05.s013_output/n100.r05.s013.primers.bed" -p "n100.r05.s013_output/n100.r05.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" "n100.r05.s013_output/n100.r05.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s013_output/n100.r05.s013.reference.fas" "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" > "n100.r05.s013_output/n100.r05.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s013_output/n100.r05.s013.reference.fas" --call-indels "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" > "n100.r05.s013_output/n100.r05.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" > "n100.r05.s013_output/n100.r05.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s013_output/n100.r05.s013.depth.txt" "n100.r05.s013_output/n100.r05.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s013_output/n100.r05.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s013_output/n100.r05.s013.reference.fas" | bcftools consensus -m "n100.r05.s013_output/n100.r05.s013.low_depth.tsv" tmp.vcf.gz > "n100.r05.s013_output/n100.r05.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task b8a3f011 (flow 81bfa0a3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task b8a3f011 (flow 81bfa0a3): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s071.Main.out_file 81bfa0a3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s071.Main.out_file 81bfa0a3 n100/r05/n100.r05.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7440b5238a5df1f0d7bb9c277c6919a92dbd9734bd037014b77b60b440c8b76c
	sha256:81bfa0a32a9012825867a3d44d67030045d99b3ec512a9d100b1730e36b722ec
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b8a3f01157a19ac5ea06a7d6d3e444e6565246e57d23d92d8308f624fe4ea2fa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s071_output"
	    wget -O "n100.r05.s071_output/n100.r05.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s071_output/n100.r05.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s071_output/n100.r05.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s071_output/n100.r05.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s071_output/n100.r05.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s071_output/n100.r05.s071.reference.fas" "n100.r05.s071_output/n100.r05.s071.fq1.fastq" "n100.r05.s071_output/n100.r05.s071.fq2.fastq" | samtools view -bS - > "n100.r05.s071_output/n100.r05.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s071_output/n100.r05.s071.untrimmed.sorted.bam" "n100.r05.s071_output/n100.r05.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s071_output/n100.r05.s071.untrimmed.sorted.bam" -b "n100.r05.s071_output/n100.r05.s071.primers.bed" -p "n100.r05.s071_output/n100.r05.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" "n100.r05.s071_output/n100.r05.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s071_output/n100.r05.s071.reference.fas" "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" > "n100.r05.s071_output/n100.r05.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s071_output/n100.r05.s071.reference.fas" --call-indels "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" > "n100.r05.s071_output/n100.r05.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" > "n100.r05.s071_output/n100.r05.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s071_output/n100.r05.s071.depth.txt" "n100.r05.s071_output/n100.r05.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s071_output/n100.r05.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s071_output/n100.r05.s071.reference.fas" | bcftools consensus -m "n100.r05.s071_output/n100.r05.s071.low_depth.tsv" tmp.vcf.gz > "n100.r05.s071_output/n100.r05.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task 43f6c42b (flow a15eb662): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task 43f6c42b (flow a15eb662): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s012.Main.out_file a15eb662 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s012.Main.out_file a15eb662 n100/r05/n100.r05.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd664f69a0cdb1620c6f03e04f754e8de901084767b4e36933c47c0d6c9663e2
	sha256:a15eb66261ce7334b459b307003f89470f1fab602d12ba97970c1f5e8b02b88a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43f6c42b852dee0b65dae092918cf8fe62aa54ddfc074b2be15e3f8e3d7a2b17
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s012_output"
	    wget -O "n100.r05.s012_output/n100.r05.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s012_output/n100.r05.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s012_output/n100.r05.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s012_output/n100.r05.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s012_output/n100.r05.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s012_output/n100.r05.s012.reference.fas" "n100.r05.s012_output/n100.r05.s012.fq1.fastq" "n100.r05.s012_output/n100.r05.s012.fq2.fastq" | samtools view -bS - > "n100.r05.s012_output/n100.r05.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s012_output/n100.r05.s012.untrimmed.sorted.bam" "n100.r05.s012_output/n100.r05.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s012_output/n100.r05.s012.untrimmed.sorted.bam" -b "n100.r05.s012_output/n100.r05.s012.primers.bed" -p "n100.r05.s012_output/n100.r05.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" "n100.r05.s012_output/n100.r05.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s012_output/n100.r05.s012.reference.fas" "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" > "n100.r05.s012_output/n100.r05.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s012_output/n100.r05.s012.reference.fas" --call-indels "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" > "n100.r05.s012_output/n100.r05.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" > "n100.r05.s012_output/n100.r05.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s012_output/n100.r05.s012.depth.txt" "n100.r05.s012_output/n100.r05.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s012_output/n100.r05.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s012_output/n100.r05.s012.reference.fas" | bcftools consensus -m "n100.r05.s012_output/n100.r05.s012.low_depth.tsv" tmp.vcf.gz > "n100.r05.s012_output/n100.r05.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task c84b5c9a (flow c81e95cd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task c84b5c9a (flow c81e95cd): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s068.Main.out_file c81e95cd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s068.Main.out_file c81e95cd n100/r05/n100.r05.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bb9777b0884a9bff464d77cf201390e3a6de71e4590b34af9398e17c61d487aa
	sha256:c81e95cd173c452296051f7c247b4ad4f6364f49b6adaa88126c5090a70a073f
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c84b5c9ac53106f65b5cbc3b4dbf4369dc305536c389f950c799bd3d2f9b57f3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s068_output"
	    wget -O "n100.r05.s068_output/n100.r05.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s068_output/n100.r05.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s068_output/n100.r05.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s068_output/n100.r05.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s068_output/n100.r05.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s068_output/n100.r05.s068.reference.fas" "n100.r05.s068_output/n100.r05.s068.fq1.fastq" "n100.r05.s068_output/n100.r05.s068.fq2.fastq" | samtools view -bS - > "n100.r05.s068_output/n100.r05.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s068_output/n100.r05.s068.untrimmed.sorted.bam" "n100.r05.s068_output/n100.r05.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s068_output/n100.r05.s068.untrimmed.sorted.bam" -b "n100.r05.s068_output/n100.r05.s068.primers.bed" -p "n100.r05.s068_output/n100.r05.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" "n100.r05.s068_output/n100.r05.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s068_output/n100.r05.s068.reference.fas" "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" > "n100.r05.s068_output/n100.r05.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s068_output/n100.r05.s068.reference.fas" --call-indels "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" > "n100.r05.s068_output/n100.r05.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" > "n100.r05.s068_output/n100.r05.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s068_output/n100.r05.s068.depth.txt" "n100.r05.s068_output/n100.r05.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s068_output/n100.r05.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s068_output/n100.r05.s068.reference.fas" | bcftools consensus -m "n100.r05.s068_output/n100.r05.s068.low_depth.tsv" tmp.vcf.gz > "n100.r05.s068_output/n100.r05.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task 34bef674 (flow d9a526d1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task 34bef674 (flow d9a526d1): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s075.Main.out_file d9a526d1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s075.Main.out_file d9a526d1 n100/r05/n100.r05.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f88f7362e4fb0b8743fce4c0d3798a4677e609e0a445ce4516f211a88c17ab6e
	sha256:d9a526d14a9578a15bcf3d0e764b9d5456572f0d4d02cc79da06d560e9dfc866
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/34bef674d38784c354b42ac038a2c53570ddf3c02f84bf58218a6f58d3d96352
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s075_output"
	    wget -O "n100.r05.s075_output/n100.r05.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s075_output/n100.r05.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s075_output/n100.r05.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s075_output/n100.r05.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s075_output/n100.r05.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s075_output/n100.r05.s075.reference.fas" "n100.r05.s075_output/n100.r05.s075.fq1.fastq" "n100.r05.s075_output/n100.r05.s075.fq2.fastq" | samtools view -bS - > "n100.r05.s075_output/n100.r05.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s075_output/n100.r05.s075.untrimmed.sorted.bam" "n100.r05.s075_output/n100.r05.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s075_output/n100.r05.s075.untrimmed.sorted.bam" -b "n100.r05.s075_output/n100.r05.s075.primers.bed" -p "n100.r05.s075_output/n100.r05.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" "n100.r05.s075_output/n100.r05.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s075_output/n100.r05.s075.reference.fas" "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" > "n100.r05.s075_output/n100.r05.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s075_output/n100.r05.s075.reference.fas" --call-indels "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" > "n100.r05.s075_output/n100.r05.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" > "n100.r05.s075_output/n100.r05.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s075_output/n100.r05.s075.depth.txt" "n100.r05.s075_output/n100.r05.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s075_output/n100.r05.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s075_output/n100.r05.s075.reference.fas" | bcftools consensus -m "n100.r05.s075_output/n100.r05.s075.low_depth.tsv" tmp.vcf.gz > "n100.r05.s075_output/n100.r05.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task 6a846499 (flow 410e42f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task 6a846499 (flow 410e42f3): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s006.Main.out_file 410e42f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s006.Main.out_file 410e42f3 n100/r05/n100.r05.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f6ffd2f9597be07844e119fd76eacacead794b9c6c274105edf7fcd5ec816cb1
	sha256:410e42f3840a4b145ff609dccc4170f4e680a238b404d1f6fd521fa7ad06f7bd
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a846499b732f10f89795b852745e889f64076e83d15db1069e22b22039af5cb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s006_output"
	    wget -O "n100.r05.s006_output/n100.r05.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s006_output/n100.r05.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s006_output/n100.r05.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s006_output/n100.r05.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s006_output/n100.r05.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s006_output/n100.r05.s006.reference.fas" "n100.r05.s006_output/n100.r05.s006.fq1.fastq" "n100.r05.s006_output/n100.r05.s006.fq2.fastq" | samtools view -bS - > "n100.r05.s006_output/n100.r05.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s006_output/n100.r05.s006.untrimmed.sorted.bam" "n100.r05.s006_output/n100.r05.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s006_output/n100.r05.s006.untrimmed.sorted.bam" -b "n100.r05.s006_output/n100.r05.s006.primers.bed" -p "n100.r05.s006_output/n100.r05.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" "n100.r05.s006_output/n100.r05.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s006_output/n100.r05.s006.reference.fas" "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" > "n100.r05.s006_output/n100.r05.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s006_output/n100.r05.s006.reference.fas" --call-indels "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" > "n100.r05.s006_output/n100.r05.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" > "n100.r05.s006_output/n100.r05.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s006_output/n100.r05.s006.depth.txt" "n100.r05.s006_output/n100.r05.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s006_output/n100.r05.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s006_output/n100.r05.s006.reference.fas" | bcftools consensus -m "n100.r05.s006_output/n100.r05.s006.low_depth.tsv" tmp.vcf.gz > "n100.r05.s006_output/n100.r05.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:58 scheduler task 70748d2b (flow dab8c84e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:58 scheduler task 70748d2b (flow dab8c84e): waiting for completion (try 0): started
2021/07/08 16:58:58  ->  n100.r05.s092.Main.out_file dab8c84e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:58 n100.r05.s092.Main.out_file dab8c84e n100/r05/n100.r05.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c7bb626268c17223ecff4360b13b1ef6f042ffcf197755bc38b52a3327ef25e8
	sha256:dab8c84e93ced0eadc810f0dc8b31b6ed448f39c7bac1a36aa2cab0967257ba4
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/70748d2bb2e22c85d7f25e577217ae7dd48a66f95a760b08ab5cbe346d5bf277
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s092_output"
	    wget -O "n100.r05.s092_output/n100.r05.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s092_output/n100.r05.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s092_output/n100.r05.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s092_output/n100.r05.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s092_output/n100.r05.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s092_output/n100.r05.s092.reference.fas" "n100.r05.s092_output/n100.r05.s092.fq1.fastq" "n100.r05.s092_output/n100.r05.s092.fq2.fastq" | samtools view -bS - > "n100.r05.s092_output/n100.r05.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s092_output/n100.r05.s092.untrimmed.sorted.bam" "n100.r05.s092_output/n100.r05.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s092_output/n100.r05.s092.untrimmed.sorted.bam" -b "n100.r05.s092_output/n100.r05.s092.primers.bed" -p "n100.r05.s092_output/n100.r05.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" "n100.r05.s092_output/n100.r05.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s092_output/n100.r05.s092.reference.fas" "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" > "n100.r05.s092_output/n100.r05.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s092_output/n100.r05.s092.reference.fas" --call-indels "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" > "n100.r05.s092_output/n100.r05.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" > "n100.r05.s092_output/n100.r05.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s092_output/n100.r05.s092.depth.txt" "n100.r05.s092_output/n100.r05.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s092_output/n100.r05.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s092_output/n100.r05.s092.reference.fas" | bcftools consensus -m "n100.r05.s092_output/n100.r05.s092.low_depth.tsv" tmp.vcf.gz > "n100.r05.s092_output/n100.r05.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:59 scheduler task 541b05df (flow 28c707dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:59 scheduler task 541b05df (flow 28c707dc): waiting for completion (try 0): started
2021/07/08 16:58:59  ->  n100.r05.s053.Main.out_file 28c707dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:59 n100.r05.s053.Main.out_file 28c707dc n100/r05/n100.r05.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2d2ab92095ea76aeb7242f5ed01ad9a6fd41e1210caf9e1c0f69b1acddbffd16
	sha256:28c707dc336fe889450fb9a52e1d6278df0c327b3cbe1b95d68a8646b8d66df6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/541b05df5438aaa64397eb3a6c74b3b4aa1837190b9b80bc75c26e1942db042d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s053_output"
	    wget -O "n100.r05.s053_output/n100.r05.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s053_output/n100.r05.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s053_output/n100.r05.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s053_output/n100.r05.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s053_output/n100.r05.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s053_output/n100.r05.s053.reference.fas" "n100.r05.s053_output/n100.r05.s053.fq1.fastq" "n100.r05.s053_output/n100.r05.s053.fq2.fastq" | samtools view -bS - > "n100.r05.s053_output/n100.r05.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s053_output/n100.r05.s053.untrimmed.sorted.bam" "n100.r05.s053_output/n100.r05.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s053_output/n100.r05.s053.untrimmed.sorted.bam" -b "n100.r05.s053_output/n100.r05.s053.primers.bed" -p "n100.r05.s053_output/n100.r05.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" "n100.r05.s053_output/n100.r05.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s053_output/n100.r05.s053.reference.fas" "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" > "n100.r05.s053_output/n100.r05.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s053_output/n100.r05.s053.reference.fas" --call-indels "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" > "n100.r05.s053_output/n100.r05.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" > "n100.r05.s053_output/n100.r05.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s053_output/n100.r05.s053.depth.txt" "n100.r05.s053_output/n100.r05.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s053_output/n100.r05.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s053_output/n100.r05.s053.reference.fas" | bcftools consensus -m "n100.r05.s053_output/n100.r05.s053.low_depth.tsv" tmp.vcf.gz > "n100.r05.s053_output/n100.r05.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:59 scheduler task 6ab8ace4 (flow adb5f9d2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:59 scheduler task 6ab8ace4 (flow adb5f9d2): waiting for completion (try 0): started
2021/07/08 16:58:59  ->  n100.r05.s045.Main.out_file adb5f9d2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:59 n100.r05.s045.Main.out_file adb5f9d2 n100/r05/n100.r05.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5af797cce85f67bac61f89548466fd8716cba7b4699ac39c882f5d8f807cc40a
	sha256:adb5f9d29e233ac3bc16a6c4e77855ffac21795bc0ce50b27e94423ad3a9665b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ab8ace484146faeddd41edee4e3dd3c57b8fb684e1fb5910b77e6b1084d3cb6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s045_output"
	    wget -O "n100.r05.s045_output/n100.r05.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s045_output/n100.r05.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s045_output/n100.r05.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s045_output/n100.r05.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s045_output/n100.r05.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s045_output/n100.r05.s045.reference.fas" "n100.r05.s045_output/n100.r05.s045.fq1.fastq" "n100.r05.s045_output/n100.r05.s045.fq2.fastq" | samtools view -bS - > "n100.r05.s045_output/n100.r05.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s045_output/n100.r05.s045.untrimmed.sorted.bam" "n100.r05.s045_output/n100.r05.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s045_output/n100.r05.s045.untrimmed.sorted.bam" -b "n100.r05.s045_output/n100.r05.s045.primers.bed" -p "n100.r05.s045_output/n100.r05.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" "n100.r05.s045_output/n100.r05.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s045_output/n100.r05.s045.reference.fas" "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" > "n100.r05.s045_output/n100.r05.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s045_output/n100.r05.s045.reference.fas" --call-indels "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" > "n100.r05.s045_output/n100.r05.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" > "n100.r05.s045_output/n100.r05.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s045_output/n100.r05.s045.depth.txt" "n100.r05.s045_output/n100.r05.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s045_output/n100.r05.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s045_output/n100.r05.s045.reference.fas" | bcftools consensus -m "n100.r05.s045_output/n100.r05.s045.low_depth.tsv" tmp.vcf.gz > "n100.r05.s045_output/n100.r05.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:59 scheduler task 46c9fba6 (flow c2a88629): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:59 scheduler task 46c9fba6 (flow c2a88629): waiting for completion (try 0): started
2021/07/08 16:58:59  ->  n100.r05.s066.Main.out_file c2a88629 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:59 n100.r05.s066.Main.out_file c2a88629 n100/r05/n100.r05.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f8e28e58685c50e131009f5b5ea3d190735a83c775966684973fcae0450aa86b
	sha256:c2a886295a8119ba44072f401c45806219aa0308b001aabbfab86e77fa5b5807
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/46c9fba61268c54727ace635ee71403738cce87ae1274b734664871b391d3f41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s066_output"
	    wget -O "n100.r05.s066_output/n100.r05.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s066_output/n100.r05.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s066_output/n100.r05.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s066_output/n100.r05.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s066_output/n100.r05.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s066_output/n100.r05.s066.reference.fas" "n100.r05.s066_output/n100.r05.s066.fq1.fastq" "n100.r05.s066_output/n100.r05.s066.fq2.fastq" | samtools view -bS - > "n100.r05.s066_output/n100.r05.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s066_output/n100.r05.s066.untrimmed.sorted.bam" "n100.r05.s066_output/n100.r05.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s066_output/n100.r05.s066.untrimmed.sorted.bam" -b "n100.r05.s066_output/n100.r05.s066.primers.bed" -p "n100.r05.s066_output/n100.r05.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" "n100.r05.s066_output/n100.r05.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s066_output/n100.r05.s066.reference.fas" "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" > "n100.r05.s066_output/n100.r05.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s066_output/n100.r05.s066.reference.fas" --call-indels "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" > "n100.r05.s066_output/n100.r05.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" > "n100.r05.s066_output/n100.r05.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s066_output/n100.r05.s066.depth.txt" "n100.r05.s066_output/n100.r05.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s066_output/n100.r05.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s066_output/n100.r05.s066.reference.fas" | bcftools consensus -m "n100.r05.s066_output/n100.r05.s066.low_depth.tsv" tmp.vcf.gz > "n100.r05.s066_output/n100.r05.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:59 scheduler task 0d2f76e7 (flow c6a48769): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:59 scheduler task 0d2f76e7 (flow c6a48769): waiting for completion (try 0): started
2021/07/08 16:58:59  ->  n100.r05.s061.Main.out_file c6a48769 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:59 n100.r05.s061.Main.out_file c6a48769 n100/r05/n100.r05.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f28d184874ce90ed2b1879d1edb4e94df734e4229bc346557cc71102331ead3
	sha256:c6a48769722736e8cf40fb5a3dcff231fb200013465d16c1d7513d6b33624ed2
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d2f76e7b98138f61ce5ee447c2361104622cfbc6c2b0d47c8059de54f5973cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s061_output"
	    wget -O "n100.r05.s061_output/n100.r05.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s061_output/n100.r05.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s061_output/n100.r05.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s061_output/n100.r05.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s061_output/n100.r05.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s061_output/n100.r05.s061.reference.fas" "n100.r05.s061_output/n100.r05.s061.fq1.fastq" "n100.r05.s061_output/n100.r05.s061.fq2.fastq" | samtools view -bS - > "n100.r05.s061_output/n100.r05.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s061_output/n100.r05.s061.untrimmed.sorted.bam" "n100.r05.s061_output/n100.r05.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s061_output/n100.r05.s061.untrimmed.sorted.bam" -b "n100.r05.s061_output/n100.r05.s061.primers.bed" -p "n100.r05.s061_output/n100.r05.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" "n100.r05.s061_output/n100.r05.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s061_output/n100.r05.s061.reference.fas" "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" > "n100.r05.s061_output/n100.r05.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s061_output/n100.r05.s061.reference.fas" --call-indels "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" > "n100.r05.s061_output/n100.r05.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" > "n100.r05.s061_output/n100.r05.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s061_output/n100.r05.s061.depth.txt" "n100.r05.s061_output/n100.r05.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s061_output/n100.r05.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s061_output/n100.r05.s061.reference.fas" | bcftools consensus -m "n100.r05.s061_output/n100.r05.s061.low_depth.tsv" tmp.vcf.gz > "n100.r05.s061_output/n100.r05.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:59 scheduler task 8438db44 (flow 8f98d048): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:59 scheduler task 8438db44 (flow 8f98d048): waiting for completion (try 0): started
2021/07/08 16:58:59  ->  n100.r05.s054.Main.out_file 8f98d048 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:59 n100.r05.s054.Main.out_file 8f98d048 n100/r05/n100.r05.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:572e2fd6f746e051e33685e54f82f370d7b4b966211b7cf7ca018c32c272bdd3
	sha256:8f98d04822a829cf78be6584b39572d76bf8f421e7d1842798c68268192bf4ab
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8438db44ce4df86966442babd99467912b296932903b81732d4fa99b1919b382
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s054_output"
	    wget -O "n100.r05.s054_output/n100.r05.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s054_output/n100.r05.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s054_output/n100.r05.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s054_output/n100.r05.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s054_output/n100.r05.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s054_output/n100.r05.s054.reference.fas" "n100.r05.s054_output/n100.r05.s054.fq1.fastq" "n100.r05.s054_output/n100.r05.s054.fq2.fastq" | samtools view -bS - > "n100.r05.s054_output/n100.r05.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s054_output/n100.r05.s054.untrimmed.sorted.bam" "n100.r05.s054_output/n100.r05.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s054_output/n100.r05.s054.untrimmed.sorted.bam" -b "n100.r05.s054_output/n100.r05.s054.primers.bed" -p "n100.r05.s054_output/n100.r05.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" "n100.r05.s054_output/n100.r05.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s054_output/n100.r05.s054.reference.fas" "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" > "n100.r05.s054_output/n100.r05.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s054_output/n100.r05.s054.reference.fas" --call-indels "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" > "n100.r05.s054_output/n100.r05.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" > "n100.r05.s054_output/n100.r05.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s054_output/n100.r05.s054.depth.txt" "n100.r05.s054_output/n100.r05.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s054_output/n100.r05.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s054_output/n100.r05.s054.reference.fas" | bcftools consensus -m "n100.r05.s054_output/n100.r05.s054.low_depth.tsv" tmp.vcf.gz > "n100.r05.s054_output/n100.r05.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:58:59 scheduler task f766d6ff (flow 2796e3e6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:58:59 scheduler task f766d6ff (flow 2796e3e6): waiting for completion (try 0): started
2021/07/08 16:58:59  ->  n100.r05.s004.Main.out_file 2796e3e6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:58:59 n100.r05.s004.Main.out_file 2796e3e6 n100/r05/n100.r05.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5978dde1b61e19e6c5af888ab8a2e7255f60984b426ecc1d739798e831e80301
	sha256:2796e3e67478a4623e6793a3c485b6bb012d71d06fd368d3677c803eb303b272
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f766d6ff9a0a848ac63f84a4d31a44f0b1b6204899111b6303a4b35802559602
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s004_output"
	    wget -O "n100.r05.s004_output/n100.r05.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s004_output/n100.r05.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s004_output/n100.r05.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s004_output/n100.r05.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s004_output/n100.r05.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s004_output/n100.r05.s004.reference.fas" "n100.r05.s004_output/n100.r05.s004.fq1.fastq" "n100.r05.s004_output/n100.r05.s004.fq2.fastq" | samtools view -bS - > "n100.r05.s004_output/n100.r05.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s004_output/n100.r05.s004.untrimmed.sorted.bam" "n100.r05.s004_output/n100.r05.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s004_output/n100.r05.s004.untrimmed.sorted.bam" -b "n100.r05.s004_output/n100.r05.s004.primers.bed" -p "n100.r05.s004_output/n100.r05.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" "n100.r05.s004_output/n100.r05.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s004_output/n100.r05.s004.reference.fas" "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" > "n100.r05.s004_output/n100.r05.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s004_output/n100.r05.s004.reference.fas" --call-indels "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" > "n100.r05.s004_output/n100.r05.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" > "n100.r05.s004_output/n100.r05.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s004_output/n100.r05.s004.depth.txt" "n100.r05.s004_output/n100.r05.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s004_output/n100.r05.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s004_output/n100.r05.s004.reference.fas" | bcftools consensus -m "n100.r05.s004_output/n100.r05.s004.low_depth.tsv" tmp.vcf.gz > "n100.r05.s004_output/n100.r05.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:00 scheduler task c504d35d (flow 7c5932bc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:00 scheduler task c504d35d (flow 7c5932bc): waiting for completion (try 0): started
2021/07/08 16:59:00  ->  n100.r05.s076.Main.out_file 7c5932bc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:00 n100.r05.s076.Main.out_file 7c5932bc n100/r05/n100.r05.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:343d7dea9e1f4fe045276d822f894063f8394742a8d40ba8e630fdd112f55895
	sha256:7c5932bc3cd839a39f5f9363032b15b26c86116b0e94ad07862ebcb360af5b0d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c504d35d0336a3e8272f0726022c8ec45b331062b1316deab940fc2dbe537870
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s076_output"
	    wget -O "n100.r05.s076_output/n100.r05.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s076_output/n100.r05.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s076_output/n100.r05.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s076_output/n100.r05.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s076_output/n100.r05.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s076_output/n100.r05.s076.reference.fas" "n100.r05.s076_output/n100.r05.s076.fq1.fastq" "n100.r05.s076_output/n100.r05.s076.fq2.fastq" | samtools view -bS - > "n100.r05.s076_output/n100.r05.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s076_output/n100.r05.s076.untrimmed.sorted.bam" "n100.r05.s076_output/n100.r05.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s076_output/n100.r05.s076.untrimmed.sorted.bam" -b "n100.r05.s076_output/n100.r05.s076.primers.bed" -p "n100.r05.s076_output/n100.r05.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" "n100.r05.s076_output/n100.r05.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s076_output/n100.r05.s076.reference.fas" "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" > "n100.r05.s076_output/n100.r05.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s076_output/n100.r05.s076.reference.fas" --call-indels "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" > "n100.r05.s076_output/n100.r05.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" > "n100.r05.s076_output/n100.r05.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s076_output/n100.r05.s076.depth.txt" "n100.r05.s076_output/n100.r05.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s076_output/n100.r05.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s076_output/n100.r05.s076.reference.fas" | bcftools consensus -m "n100.r05.s076_output/n100.r05.s076.low_depth.tsv" tmp.vcf.gz > "n100.r05.s076_output/n100.r05.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:00 scheduler task 79820afa (flow c5f1bdef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:00 scheduler task 79820afa (flow c5f1bdef): waiting for completion (try 0): started
2021/07/08 16:59:00  ->  n100.r05.s069.Main.out_file c5f1bdef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:00 n100.r05.s069.Main.out_file c5f1bdef n100/r05/n100.r05.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e6bf5d88daa7346d192a568ac9ee842e85f94e079122aba39b332da4b8cc15e
	sha256:c5f1bdef458cada49f04f71dd42e502f908e11069e69480451ddc6a4a346940d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79820afac966a9c7c709fd3a489b970c76b6f19d58e93fb3829247579bc47213
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s069_output"
	    wget -O "n100.r05.s069_output/n100.r05.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s069_output/n100.r05.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s069_output/n100.r05.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s069_output/n100.r05.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s069_output/n100.r05.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s069_output/n100.r05.s069.reference.fas" "n100.r05.s069_output/n100.r05.s069.fq1.fastq" "n100.r05.s069_output/n100.r05.s069.fq2.fastq" | samtools view -bS - > "n100.r05.s069_output/n100.r05.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s069_output/n100.r05.s069.untrimmed.sorted.bam" "n100.r05.s069_output/n100.r05.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s069_output/n100.r05.s069.untrimmed.sorted.bam" -b "n100.r05.s069_output/n100.r05.s069.primers.bed" -p "n100.r05.s069_output/n100.r05.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" "n100.r05.s069_output/n100.r05.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s069_output/n100.r05.s069.reference.fas" "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" > "n100.r05.s069_output/n100.r05.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s069_output/n100.r05.s069.reference.fas" --call-indels "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" > "n100.r05.s069_output/n100.r05.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" > "n100.r05.s069_output/n100.r05.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s069_output/n100.r05.s069.depth.txt" "n100.r05.s069_output/n100.r05.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s069_output/n100.r05.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s069_output/n100.r05.s069.reference.fas" | bcftools consensus -m "n100.r05.s069_output/n100.r05.s069.low_depth.tsv" tmp.vcf.gz > "n100.r05.s069_output/n100.r05.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:00 scheduler task 83c1b665 (flow 9dafcfc9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:00 scheduler task 83c1b665 (flow 9dafcfc9): waiting for completion (try 0): started
2021/07/08 16:59:00  ->  n100.r05.s029.Main.out_file 9dafcfc9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:00 n100.r05.s029.Main.out_file 9dafcfc9 n100/r05/n100.r05.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f93c7d0de633c4e814acc0b50d6d86ce20632991f86161b7a9c3ae0092934f3
	sha256:9dafcfc9db780d676255a43604233a0e2bc095c987b74d7ad83c5f866f2d17af
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83c1b6655ff9cf231024a8207829ef53d0baa6d2a0fe15822b07b47a93f2ebc7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s029_output"
	    wget -O "n100.r05.s029_output/n100.r05.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s029_output/n100.r05.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s029_output/n100.r05.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s029_output/n100.r05.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s029_output/n100.r05.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s029_output/n100.r05.s029.reference.fas" "n100.r05.s029_output/n100.r05.s029.fq1.fastq" "n100.r05.s029_output/n100.r05.s029.fq2.fastq" | samtools view -bS - > "n100.r05.s029_output/n100.r05.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s029_output/n100.r05.s029.untrimmed.sorted.bam" "n100.r05.s029_output/n100.r05.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s029_output/n100.r05.s029.untrimmed.sorted.bam" -b "n100.r05.s029_output/n100.r05.s029.primers.bed" -p "n100.r05.s029_output/n100.r05.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" "n100.r05.s029_output/n100.r05.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s029_output/n100.r05.s029.reference.fas" "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" > "n100.r05.s029_output/n100.r05.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s029_output/n100.r05.s029.reference.fas" --call-indels "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" > "n100.r05.s029_output/n100.r05.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" > "n100.r05.s029_output/n100.r05.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s029_output/n100.r05.s029.depth.txt" "n100.r05.s029_output/n100.r05.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s029_output/n100.r05.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s029_output/n100.r05.s029.reference.fas" | bcftools consensus -m "n100.r05.s029_output/n100.r05.s029.low_depth.tsv" tmp.vcf.gz > "n100.r05.s029_output/n100.r05.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:00 scheduler task be23124b (flow 5d6d4385): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:00 scheduler task be23124b (flow 5d6d4385): waiting for completion (try 0): started
2021/07/08 16:59:00  ->  n100.r05.s017.Main.out_file 5d6d4385 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:00 n100.r05.s017.Main.out_file 5d6d4385 n100/r05/n100.r05.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7b85d73e383e16acd29a57bc4ba7c33df2a6756460594fd147e4493901f4c8fc
	sha256:5d6d43853d8005977ea526dd77f09f29aa0cd12e6967205ce951be618146323e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/be23124b279c193696fea40daca26658fdbd035be9c39a860f9e89cc23fbf4e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s017_output"
	    wget -O "n100.r05.s017_output/n100.r05.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s017_output/n100.r05.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s017_output/n100.r05.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s017_output/n100.r05.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s017_output/n100.r05.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s017_output/n100.r05.s017.reference.fas" "n100.r05.s017_output/n100.r05.s017.fq1.fastq" "n100.r05.s017_output/n100.r05.s017.fq2.fastq" | samtools view -bS - > "n100.r05.s017_output/n100.r05.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s017_output/n100.r05.s017.untrimmed.sorted.bam" "n100.r05.s017_output/n100.r05.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s017_output/n100.r05.s017.untrimmed.sorted.bam" -b "n100.r05.s017_output/n100.r05.s017.primers.bed" -p "n100.r05.s017_output/n100.r05.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" "n100.r05.s017_output/n100.r05.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s017_output/n100.r05.s017.reference.fas" "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" > "n100.r05.s017_output/n100.r05.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s017_output/n100.r05.s017.reference.fas" --call-indels "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" > "n100.r05.s017_output/n100.r05.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" > "n100.r05.s017_output/n100.r05.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s017_output/n100.r05.s017.depth.txt" "n100.r05.s017_output/n100.r05.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s017_output/n100.r05.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s017_output/n100.r05.s017.reference.fas" | bcftools consensus -m "n100.r05.s017_output/n100.r05.s017.low_depth.tsv" tmp.vcf.gz > "n100.r05.s017_output/n100.r05.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:00 scheduler task 7cbf55a6 (flow 148cd5d9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:00 scheduler task 7cbf55a6 (flow 148cd5d9): waiting for completion (try 0): started
2021/07/08 16:59:00  ->  n100.r05.s020.Main.out_file 148cd5d9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:00 n100.r05.s020.Main.out_file 148cd5d9 n100/r05/n100.r05.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5e7b47728b2fb1ae44069c7654514bee48832a07f28111a40d31dc707d4ed19
	sha256:148cd5d940d3f0c8e60249ea7ba5cf185f4334f581d8cf3277874924b9cae301
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7cbf55a61b229674c21e9a45e0db81ca6c6cf7ece829cb0b688120263e5685b8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s020_output"
	    wget -O "n100.r05.s020_output/n100.r05.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s020_output/n100.r05.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s020_output/n100.r05.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s020_output/n100.r05.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s020_output/n100.r05.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s020_output/n100.r05.s020.reference.fas" "n100.r05.s020_output/n100.r05.s020.fq1.fastq" "n100.r05.s020_output/n100.r05.s020.fq2.fastq" | samtools view -bS - > "n100.r05.s020_output/n100.r05.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s020_output/n100.r05.s020.untrimmed.sorted.bam" "n100.r05.s020_output/n100.r05.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s020_output/n100.r05.s020.untrimmed.sorted.bam" -b "n100.r05.s020_output/n100.r05.s020.primers.bed" -p "n100.r05.s020_output/n100.r05.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" "n100.r05.s020_output/n100.r05.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s020_output/n100.r05.s020.reference.fas" "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" > "n100.r05.s020_output/n100.r05.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s020_output/n100.r05.s020.reference.fas" --call-indels "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" > "n100.r05.s020_output/n100.r05.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" > "n100.r05.s020_output/n100.r05.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s020_output/n100.r05.s020.depth.txt" "n100.r05.s020_output/n100.r05.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s020_output/n100.r05.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s020_output/n100.r05.s020.reference.fas" | bcftools consensus -m "n100.r05.s020_output/n100.r05.s020.low_depth.tsv" tmp.vcf.gz > "n100.r05.s020_output/n100.r05.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:00 scheduler task eecc9bb8 (flow fe237c23): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:00 scheduler task eecc9bb8 (flow fe237c23): waiting for completion (try 0): started
2021/07/08 16:59:00  ->  n100.r05.s079.Main.out_file fe237c23 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:00 n100.r05.s079.Main.out_file fe237c23 n100/r05/n100.r05.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:76253e8ca5592f6a8a3622e5417982cab5aa09e7358856abdf834a3b3029ff4f
	sha256:fe237c2379e2c6657d77ab60536d39335370871e1ecc65ff54d70ef3282df954
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eecc9bb8603c982cb63224f211fd29706988a52a0dc83b75359043fed1793ec6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s079_output"
	    wget -O "n100.r05.s079_output/n100.r05.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s079_output/n100.r05.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s079_output/n100.r05.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s079_output/n100.r05.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s079_output/n100.r05.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s079_output/n100.r05.s079.reference.fas" "n100.r05.s079_output/n100.r05.s079.fq1.fastq" "n100.r05.s079_output/n100.r05.s079.fq2.fastq" | samtools view -bS - > "n100.r05.s079_output/n100.r05.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s079_output/n100.r05.s079.untrimmed.sorted.bam" "n100.r05.s079_output/n100.r05.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s079_output/n100.r05.s079.untrimmed.sorted.bam" -b "n100.r05.s079_output/n100.r05.s079.primers.bed" -p "n100.r05.s079_output/n100.r05.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" "n100.r05.s079_output/n100.r05.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s079_output/n100.r05.s079.reference.fas" "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" > "n100.r05.s079_output/n100.r05.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s079_output/n100.r05.s079.reference.fas" --call-indels "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" > "n100.r05.s079_output/n100.r05.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" > "n100.r05.s079_output/n100.r05.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s079_output/n100.r05.s079.depth.txt" "n100.r05.s079_output/n100.r05.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s079_output/n100.r05.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s079_output/n100.r05.s079.reference.fas" | bcftools consensus -m "n100.r05.s079_output/n100.r05.s079.low_depth.tsv" tmp.vcf.gz > "n100.r05.s079_output/n100.r05.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:01 scheduler task 94683d3a (flow 96139b10): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:01 scheduler task 94683d3a (flow 96139b10): waiting for completion (try 0): started
2021/07/08 16:59:01  ->  n100.r05.s042.Main.out_file 96139b10 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:01 n100.r05.s042.Main.out_file 96139b10 n100/r05/n100.r05.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5f6c5dbe31469cb7ef989859488bae7853ed65cb9a645b737b868a3bb72693bb
	sha256:96139b10177dfde078f5b745ca6f8212c8ecbd8c83d25b518abc8fdec7cada11
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/94683d3a463a2b28083698a44f90a0d535b82d76d1f9ddf5c471bb4dcc139800
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s042_output"
	    wget -O "n100.r05.s042_output/n100.r05.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s042_output/n100.r05.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s042_output/n100.r05.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s042_output/n100.r05.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s042_output/n100.r05.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s042_output/n100.r05.s042.reference.fas" "n100.r05.s042_output/n100.r05.s042.fq1.fastq" "n100.r05.s042_output/n100.r05.s042.fq2.fastq" | samtools view -bS - > "n100.r05.s042_output/n100.r05.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s042_output/n100.r05.s042.untrimmed.sorted.bam" "n100.r05.s042_output/n100.r05.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s042_output/n100.r05.s042.untrimmed.sorted.bam" -b "n100.r05.s042_output/n100.r05.s042.primers.bed" -p "n100.r05.s042_output/n100.r05.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" "n100.r05.s042_output/n100.r05.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s042_output/n100.r05.s042.reference.fas" "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" > "n100.r05.s042_output/n100.r05.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s042_output/n100.r05.s042.reference.fas" --call-indels "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" > "n100.r05.s042_output/n100.r05.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" > "n100.r05.s042_output/n100.r05.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s042_output/n100.r05.s042.depth.txt" "n100.r05.s042_output/n100.r05.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s042_output/n100.r05.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s042_output/n100.r05.s042.reference.fas" | bcftools consensus -m "n100.r05.s042_output/n100.r05.s042.low_depth.tsv" tmp.vcf.gz > "n100.r05.s042_output/n100.r05.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:01 scheduler task 887f8caf (flow da518317): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:01 scheduler task 887f8caf (flow da518317): waiting for completion (try 0): started
2021/07/08 16:59:01  ->  n100.r05.s088.Main.out_file da518317 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:01 n100.r05.s088.Main.out_file da518317 n100/r05/n100.r05.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:40539a8e2fe728831736041fe390a15c66e0b8557a9b47a6d1d775f25dbf9add
	sha256:da518317019615703a052171d87caec57412fd99ff289619e7267a0bc78ffbe5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/887f8cafa16fd41e6003b2147cb3b972d7932c4540a6bdfc5189ea8d21091b0f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s088_output"
	    wget -O "n100.r05.s088_output/n100.r05.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s088_output/n100.r05.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s088_output/n100.r05.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s088_output/n100.r05.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s088_output/n100.r05.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s088_output/n100.r05.s088.reference.fas" "n100.r05.s088_output/n100.r05.s088.fq1.fastq" "n100.r05.s088_output/n100.r05.s088.fq2.fastq" | samtools view -bS - > "n100.r05.s088_output/n100.r05.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s088_output/n100.r05.s088.untrimmed.sorted.bam" "n100.r05.s088_output/n100.r05.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s088_output/n100.r05.s088.untrimmed.sorted.bam" -b "n100.r05.s088_output/n100.r05.s088.primers.bed" -p "n100.r05.s088_output/n100.r05.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" "n100.r05.s088_output/n100.r05.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s088_output/n100.r05.s088.reference.fas" "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" > "n100.r05.s088_output/n100.r05.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s088_output/n100.r05.s088.reference.fas" --call-indels "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" > "n100.r05.s088_output/n100.r05.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" > "n100.r05.s088_output/n100.r05.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s088_output/n100.r05.s088.depth.txt" "n100.r05.s088_output/n100.r05.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s088_output/n100.r05.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s088_output/n100.r05.s088.reference.fas" | bcftools consensus -m "n100.r05.s088_output/n100.r05.s088.low_depth.tsv" tmp.vcf.gz > "n100.r05.s088_output/n100.r05.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:01 scheduler task e551941a (flow ea8b7e31): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:01 scheduler task e551941a (flow ea8b7e31): waiting for completion (try 0): started
2021/07/08 16:59:01  ->  n100.r05.s044.Main.out_file ea8b7e31 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:01 n100.r05.s044.Main.out_file ea8b7e31 n100/r05/n100.r05.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ddc9b8a441e93668388bf89836ad9e2042e49d42e98ddfa37611769f5a8b9578
	sha256:ea8b7e318a69da55de66cf5e561424de2e7a65e7984040a6c023c298be6dbed2
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e551941a39e04844f5855286b7ccd8af4da267363134a59717ed579361880849
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s044_output"
	    wget -O "n100.r05.s044_output/n100.r05.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s044_output/n100.r05.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s044_output/n100.r05.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s044_output/n100.r05.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s044_output/n100.r05.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s044_output/n100.r05.s044.reference.fas" "n100.r05.s044_output/n100.r05.s044.fq1.fastq" "n100.r05.s044_output/n100.r05.s044.fq2.fastq" | samtools view -bS - > "n100.r05.s044_output/n100.r05.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s044_output/n100.r05.s044.untrimmed.sorted.bam" "n100.r05.s044_output/n100.r05.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s044_output/n100.r05.s044.untrimmed.sorted.bam" -b "n100.r05.s044_output/n100.r05.s044.primers.bed" -p "n100.r05.s044_output/n100.r05.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" "n100.r05.s044_output/n100.r05.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s044_output/n100.r05.s044.reference.fas" "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" > "n100.r05.s044_output/n100.r05.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s044_output/n100.r05.s044.reference.fas" --call-indels "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" > "n100.r05.s044_output/n100.r05.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" > "n100.r05.s044_output/n100.r05.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s044_output/n100.r05.s044.depth.txt" "n100.r05.s044_output/n100.r05.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s044_output/n100.r05.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s044_output/n100.r05.s044.reference.fas" | bcftools consensus -m "n100.r05.s044_output/n100.r05.s044.low_depth.tsv" tmp.vcf.gz > "n100.r05.s044_output/n100.r05.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:01 scheduler task 7016df0e (flow c5ad9cb9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:01 scheduler task 7016df0e (flow c5ad9cb9): waiting for completion (try 0): started
2021/07/08 16:59:01  ->  n100.r05.s007.Main.out_file c5ad9cb9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:01 n100.r05.s007.Main.out_file c5ad9cb9 n100/r05/n100.r05.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07565cc8ba531c021c057807325c880620c14abc78f19ae0a200ca468a65cea0
	sha256:c5ad9cb9e130cd2f90ce98afd27a28a5dc93570cbbec869fa6b04f372f5f5a0a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7016df0e19f62cf6f98700dec3fd02860fefd227935843f241125cd4c61f400f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s007_output"
	    wget -O "n100.r05.s007_output/n100.r05.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s007_output/n100.r05.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s007_output/n100.r05.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s007_output/n100.r05.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s007_output/n100.r05.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s007_output/n100.r05.s007.reference.fas" "n100.r05.s007_output/n100.r05.s007.fq1.fastq" "n100.r05.s007_output/n100.r05.s007.fq2.fastq" | samtools view -bS - > "n100.r05.s007_output/n100.r05.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s007_output/n100.r05.s007.untrimmed.sorted.bam" "n100.r05.s007_output/n100.r05.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s007_output/n100.r05.s007.untrimmed.sorted.bam" -b "n100.r05.s007_output/n100.r05.s007.primers.bed" -p "n100.r05.s007_output/n100.r05.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" "n100.r05.s007_output/n100.r05.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s007_output/n100.r05.s007.reference.fas" "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" > "n100.r05.s007_output/n100.r05.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s007_output/n100.r05.s007.reference.fas" --call-indels "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" > "n100.r05.s007_output/n100.r05.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" > "n100.r05.s007_output/n100.r05.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s007_output/n100.r05.s007.depth.txt" "n100.r05.s007_output/n100.r05.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s007_output/n100.r05.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s007_output/n100.r05.s007.reference.fas" | bcftools consensus -m "n100.r05.s007_output/n100.r05.s007.low_depth.tsv" tmp.vcf.gz > "n100.r05.s007_output/n100.r05.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:01 scheduler task fa285b2b (flow 65deac98): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:01 scheduler task fa285b2b (flow 65deac98): waiting for completion (try 0): started
2021/07/08 16:59:01  ->  n100.r05.s005.Main.out_file 65deac98 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:01 n100.r05.s005.Main.out_file 65deac98 n100/r05/n100.r05.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:611531a3e69e7ec1d5434acca7dd1cad0fb433f8cecbc2c7ea4b9db4154146e1
	sha256:65deac98d111a3b2590a217e3fb835ea4872d44d2268ede69b88ba7418569947
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fa285b2bee5b0e9aedbe3192c4341d31d954f058fa2caebedffb41ea8b6bc977
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s005_output"
	    wget -O "n100.r05.s005_output/n100.r05.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s005_output/n100.r05.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s005_output/n100.r05.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s005_output/n100.r05.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s005_output/n100.r05.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s005_output/n100.r05.s005.reference.fas" "n100.r05.s005_output/n100.r05.s005.fq1.fastq" "n100.r05.s005_output/n100.r05.s005.fq2.fastq" | samtools view -bS - > "n100.r05.s005_output/n100.r05.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s005_output/n100.r05.s005.untrimmed.sorted.bam" "n100.r05.s005_output/n100.r05.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s005_output/n100.r05.s005.untrimmed.sorted.bam" -b "n100.r05.s005_output/n100.r05.s005.primers.bed" -p "n100.r05.s005_output/n100.r05.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" "n100.r05.s005_output/n100.r05.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s005_output/n100.r05.s005.reference.fas" "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" > "n100.r05.s005_output/n100.r05.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s005_output/n100.r05.s005.reference.fas" --call-indels "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" > "n100.r05.s005_output/n100.r05.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" > "n100.r05.s005_output/n100.r05.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s005_output/n100.r05.s005.depth.txt" "n100.r05.s005_output/n100.r05.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s005_output/n100.r05.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s005_output/n100.r05.s005.reference.fas" | bcftools consensus -m "n100.r05.s005_output/n100.r05.s005.low_depth.tsv" tmp.vcf.gz > "n100.r05.s005_output/n100.r05.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:01 scheduler task a46930e3 (flow 29d4e1a3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:01 scheduler task a46930e3 (flow 29d4e1a3): waiting for completion (try 0): started
2021/07/08 16:59:01  ->  n100.r05.s095.Main.out_file 29d4e1a3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:01 n100.r05.s095.Main.out_file 29d4e1a3 n100/r05/n100.r05.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36749f2bd5216f4822e3454e7f73c0977edd7ca2438d19a625544a5b3ee488af
	sha256:29d4e1a3a780c8034bd562bacc4dd39506be2c4a33a49a6c0a3ad76756dd21da
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a46930e3b6d910a53219d8ac013c4971dcf755a1f2800a83ebd3af74fa698927
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s095_output"
	    wget -O "n100.r05.s095_output/n100.r05.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s095_output/n100.r05.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s095_output/n100.r05.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s095_output/n100.r05.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s095_output/n100.r05.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s095_output/n100.r05.s095.reference.fas" "n100.r05.s095_output/n100.r05.s095.fq1.fastq" "n100.r05.s095_output/n100.r05.s095.fq2.fastq" | samtools view -bS - > "n100.r05.s095_output/n100.r05.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s095_output/n100.r05.s095.untrimmed.sorted.bam" "n100.r05.s095_output/n100.r05.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s095_output/n100.r05.s095.untrimmed.sorted.bam" -b "n100.r05.s095_output/n100.r05.s095.primers.bed" -p "n100.r05.s095_output/n100.r05.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" "n100.r05.s095_output/n100.r05.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s095_output/n100.r05.s095.reference.fas" "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" > "n100.r05.s095_output/n100.r05.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s095_output/n100.r05.s095.reference.fas" --call-indels "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" > "n100.r05.s095_output/n100.r05.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" > "n100.r05.s095_output/n100.r05.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s095_output/n100.r05.s095.depth.txt" "n100.r05.s095_output/n100.r05.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s095_output/n100.r05.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s095_output/n100.r05.s095.reference.fas" | bcftools consensus -m "n100.r05.s095_output/n100.r05.s095.low_depth.tsv" tmp.vcf.gz > "n100.r05.s095_output/n100.r05.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:02 scheduler task ea078349 (flow 81ef77fc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:02 scheduler task ea078349 (flow 81ef77fc): waiting for completion (try 0): started
2021/07/08 16:59:02  ->  n100.r05.s037.Main.out_file 81ef77fc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:02 n100.r05.s037.Main.out_file 81ef77fc n100/r05/n100.r05.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:46c3ccfa9dd851955d8d79c9d7230cc760b8dd9cc536b82077e7c1b2f6b0eb01
	sha256:81ef77fc2afad98bbc420ff34434c39250fed54cc1ccf3a68b9b479418e06be5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ea07834920e5af45f8face6e914b58f9740b8c90a72f771ad8194afaf082dda7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s037_output"
	    wget -O "n100.r05.s037_output/n100.r05.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s037_output/n100.r05.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s037_output/n100.r05.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s037_output/n100.r05.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s037_output/n100.r05.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s037_output/n100.r05.s037.reference.fas" "n100.r05.s037_output/n100.r05.s037.fq1.fastq" "n100.r05.s037_output/n100.r05.s037.fq2.fastq" | samtools view -bS - > "n100.r05.s037_output/n100.r05.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s037_output/n100.r05.s037.untrimmed.sorted.bam" "n100.r05.s037_output/n100.r05.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s037_output/n100.r05.s037.untrimmed.sorted.bam" -b "n100.r05.s037_output/n100.r05.s037.primers.bed" -p "n100.r05.s037_output/n100.r05.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" "n100.r05.s037_output/n100.r05.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s037_output/n100.r05.s037.reference.fas" "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" > "n100.r05.s037_output/n100.r05.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s037_output/n100.r05.s037.reference.fas" --call-indels "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" > "n100.r05.s037_output/n100.r05.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" > "n100.r05.s037_output/n100.r05.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s037_output/n100.r05.s037.depth.txt" "n100.r05.s037_output/n100.r05.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s037_output/n100.r05.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s037_output/n100.r05.s037.reference.fas" | bcftools consensus -m "n100.r05.s037_output/n100.r05.s037.low_depth.tsv" tmp.vcf.gz > "n100.r05.s037_output/n100.r05.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:02 scheduler task 5789b1c4 (flow 5c0cc62e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:02 scheduler task 5789b1c4 (flow 5c0cc62e): waiting for completion (try 0): started
2021/07/08 16:59:02  ->  n100.r05.s096.Main.out_file 5c0cc62e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:02 n100.r05.s096.Main.out_file 5c0cc62e n100/r05/n100.r05.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5236c7e25a14bb2a28dca4e583e6c7043a5a24d0f486653f29c551387615f4d3
	sha256:5c0cc62e68be95c246bdef245c1aa9713d1f81ddc970ef7553f43b643626dc6d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5789b1c4b24351cf67de695f2a0815c65977126d5ddd8ad5526630c886732ead
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s096_output"
	    wget -O "n100.r05.s096_output/n100.r05.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s096_output/n100.r05.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s096_output/n100.r05.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s096_output/n100.r05.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s096_output/n100.r05.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s096_output/n100.r05.s096.reference.fas" "n100.r05.s096_output/n100.r05.s096.fq1.fastq" "n100.r05.s096_output/n100.r05.s096.fq2.fastq" | samtools view -bS - > "n100.r05.s096_output/n100.r05.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s096_output/n100.r05.s096.untrimmed.sorted.bam" "n100.r05.s096_output/n100.r05.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s096_output/n100.r05.s096.untrimmed.sorted.bam" -b "n100.r05.s096_output/n100.r05.s096.primers.bed" -p "n100.r05.s096_output/n100.r05.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" "n100.r05.s096_output/n100.r05.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s096_output/n100.r05.s096.reference.fas" "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" > "n100.r05.s096_output/n100.r05.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s096_output/n100.r05.s096.reference.fas" --call-indels "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" > "n100.r05.s096_output/n100.r05.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" > "n100.r05.s096_output/n100.r05.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s096_output/n100.r05.s096.depth.txt" "n100.r05.s096_output/n100.r05.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s096_output/n100.r05.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s096_output/n100.r05.s096.reference.fas" | bcftools consensus -m "n100.r05.s096_output/n100.r05.s096.low_depth.tsv" tmp.vcf.gz > "n100.r05.s096_output/n100.r05.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:02 scheduler task 72a551ca (flow 8cf24afe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:02 scheduler task 72a551ca (flow 8cf24afe): waiting for completion (try 0): started
2021/07/08 16:59:02  ->  n100.r05.s072.Main.out_file 8cf24afe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:02 n100.r05.s072.Main.out_file 8cf24afe n100/r05/n100.r05.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e4ae1db7f7df50ee5e95103da0fb1b41ac98277418aad4de0b992c552cac3a89
	sha256:8cf24afe1f0c7cd711cd96e34629a1f4ccb44cb27a85771c486ce502b57a70b3
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/72a551ca58ddab1a47e2ded92b9fa2210fd60728cdf49e0b2d405432291ab98a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s072_output"
	    wget -O "n100.r05.s072_output/n100.r05.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s072_output/n100.r05.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s072_output/n100.r05.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s072_output/n100.r05.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s072_output/n100.r05.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s072_output/n100.r05.s072.reference.fas" "n100.r05.s072_output/n100.r05.s072.fq1.fastq" "n100.r05.s072_output/n100.r05.s072.fq2.fastq" | samtools view -bS - > "n100.r05.s072_output/n100.r05.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s072_output/n100.r05.s072.untrimmed.sorted.bam" "n100.r05.s072_output/n100.r05.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s072_output/n100.r05.s072.untrimmed.sorted.bam" -b "n100.r05.s072_output/n100.r05.s072.primers.bed" -p "n100.r05.s072_output/n100.r05.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" "n100.r05.s072_output/n100.r05.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s072_output/n100.r05.s072.reference.fas" "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" > "n100.r05.s072_output/n100.r05.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s072_output/n100.r05.s072.reference.fas" --call-indels "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" > "n100.r05.s072_output/n100.r05.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" > "n100.r05.s072_output/n100.r05.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s072_output/n100.r05.s072.depth.txt" "n100.r05.s072_output/n100.r05.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s072_output/n100.r05.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s072_output/n100.r05.s072.reference.fas" | bcftools consensus -m "n100.r05.s072_output/n100.r05.s072.low_depth.tsv" tmp.vcf.gz > "n100.r05.s072_output/n100.r05.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:02 scheduler task 9a6015b6 (flow 9f6cdb6e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:02 scheduler task 9a6015b6 (flow 9f6cdb6e): waiting for completion (try 0): started
2021/07/08 16:59:02  ->  n100.r05.s002.Main.out_file 9f6cdb6e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:02 n100.r05.s002.Main.out_file 9f6cdb6e n100/r05/n100.r05.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b87e047e86794fafa0381ef5bbe9c05d96882ff196cc89cb9e148e547249620c
	sha256:9f6cdb6ea9fe1ad093d122664f13cdadb41ea9ca6887648966555396bf6cfcad
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a6015b62e21f025687368c1ec4abd8aadd4992e64efdc093a85ff35e4091b78
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s002_output"
	    wget -O "n100.r05.s002_output/n100.r05.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s002_output/n100.r05.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s002_output/n100.r05.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s002_output/n100.r05.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s002_output/n100.r05.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s002_output/n100.r05.s002.reference.fas" "n100.r05.s002_output/n100.r05.s002.fq1.fastq" "n100.r05.s002_output/n100.r05.s002.fq2.fastq" | samtools view -bS - > "n100.r05.s002_output/n100.r05.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s002_output/n100.r05.s002.untrimmed.sorted.bam" "n100.r05.s002_output/n100.r05.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s002_output/n100.r05.s002.untrimmed.sorted.bam" -b "n100.r05.s002_output/n100.r05.s002.primers.bed" -p "n100.r05.s002_output/n100.r05.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" "n100.r05.s002_output/n100.r05.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s002_output/n100.r05.s002.reference.fas" "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" > "n100.r05.s002_output/n100.r05.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s002_output/n100.r05.s002.reference.fas" --call-indels "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" > "n100.r05.s002_output/n100.r05.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" > "n100.r05.s002_output/n100.r05.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s002_output/n100.r05.s002.depth.txt" "n100.r05.s002_output/n100.r05.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s002_output/n100.r05.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s002_output/n100.r05.s002.reference.fas" | bcftools consensus -m "n100.r05.s002_output/n100.r05.s002.low_depth.tsv" tmp.vcf.gz > "n100.r05.s002_output/n100.r05.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:02 scheduler task b5ceb6c6 (flow db9699b5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:02 scheduler task b5ceb6c6 (flow db9699b5): waiting for completion (try 0): started
2021/07/08 16:59:02  ->  n100.r05.s010.Main.out_file db9699b5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:02 n100.r05.s010.Main.out_file db9699b5 n100/r05/n100.r05.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6905686ce9686cd1de3f361dd9fbe522a7f6799e15dff3c3c7f541e878f8a5f0
	sha256:db9699b5395a4178d7cc1b436da7519454cee4c1bfbbba6c4d4f02a099f19633
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5ceb6c63ea7c40dba7ab64806a85bc69bc8de93bccfd5df0af5cf46cef4793b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s010_output"
	    wget -O "n100.r05.s010_output/n100.r05.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s010_output/n100.r05.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s010_output/n100.r05.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s010_output/n100.r05.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s010_output/n100.r05.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s010_output/n100.r05.s010.reference.fas" "n100.r05.s010_output/n100.r05.s010.fq1.fastq" "n100.r05.s010_output/n100.r05.s010.fq2.fastq" | samtools view -bS - > "n100.r05.s010_output/n100.r05.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s010_output/n100.r05.s010.untrimmed.sorted.bam" "n100.r05.s010_output/n100.r05.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s010_output/n100.r05.s010.untrimmed.sorted.bam" -b "n100.r05.s010_output/n100.r05.s010.primers.bed" -p "n100.r05.s010_output/n100.r05.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" "n100.r05.s010_output/n100.r05.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s010_output/n100.r05.s010.reference.fas" "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" > "n100.r05.s010_output/n100.r05.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s010_output/n100.r05.s010.reference.fas" --call-indels "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" > "n100.r05.s010_output/n100.r05.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" > "n100.r05.s010_output/n100.r05.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s010_output/n100.r05.s010.depth.txt" "n100.r05.s010_output/n100.r05.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s010_output/n100.r05.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s010_output/n100.r05.s010.reference.fas" | bcftools consensus -m "n100.r05.s010_output/n100.r05.s010.low_depth.tsv" tmp.vcf.gz > "n100.r05.s010_output/n100.r05.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:02 scheduler task 1075cfc4 (flow 0b598c7d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:02 scheduler task 1075cfc4 (flow 0b598c7d): waiting for completion (try 0): started
2021/07/08 16:59:02  ->  n100.r05.s019.Main.out_file 0b598c7d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:02 n100.r05.s019.Main.out_file 0b598c7d n100/r05/n100.r05.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e604eff73677b2a6349ce8fdda21b0c22e591515188a56711f48cf099d0b1a3
	sha256:0b598c7d501d34a522ced3403fd178380e75d23ebd6c16a724576143d9a367aa
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1075cfc4486e96c351b4d25adfa080d3581e9aae439ff33bf278338436dfc460
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s019_output"
	    wget -O "n100.r05.s019_output/n100.r05.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s019_output/n100.r05.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s019_output/n100.r05.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s019_output/n100.r05.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s019_output/n100.r05.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s019_output/n100.r05.s019.reference.fas" "n100.r05.s019_output/n100.r05.s019.fq1.fastq" "n100.r05.s019_output/n100.r05.s019.fq2.fastq" | samtools view -bS - > "n100.r05.s019_output/n100.r05.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s019_output/n100.r05.s019.untrimmed.sorted.bam" "n100.r05.s019_output/n100.r05.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s019_output/n100.r05.s019.untrimmed.sorted.bam" -b "n100.r05.s019_output/n100.r05.s019.primers.bed" -p "n100.r05.s019_output/n100.r05.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" "n100.r05.s019_output/n100.r05.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s019_output/n100.r05.s019.reference.fas" "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" > "n100.r05.s019_output/n100.r05.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s019_output/n100.r05.s019.reference.fas" --call-indels "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" > "n100.r05.s019_output/n100.r05.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" > "n100.r05.s019_output/n100.r05.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s019_output/n100.r05.s019.depth.txt" "n100.r05.s019_output/n100.r05.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s019_output/n100.r05.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s019_output/n100.r05.s019.reference.fas" | bcftools consensus -m "n100.r05.s019_output/n100.r05.s019.low_depth.tsv" tmp.vcf.gz > "n100.r05.s019_output/n100.r05.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:03 scheduler task 279b061c (flow f4b07b7e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:03 scheduler task 279b061c (flow f4b07b7e): waiting for completion (try 0): started
2021/07/08 16:59:03  ->  n100.r05.s043.Main.out_file f4b07b7e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:03 n100.r05.s043.Main.out_file f4b07b7e n100/r05/n100.r05.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a1c30ed0d0b90a7c8dd0014f9651aff46760bce6cb7fe337d8d6a21ddf51641d
	sha256:f4b07b7e033a8850aaf5da2da38236dec7dc051079234b69693981d5fe018ab8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/279b061c93ee4b0833726010b9aca16bcb6b93fb061c4b5eabfc26af2d05793f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s043_output"
	    wget -O "n100.r05.s043_output/n100.r05.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s043_output/n100.r05.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s043_output/n100.r05.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s043_output/n100.r05.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s043_output/n100.r05.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s043_output/n100.r05.s043.reference.fas" "n100.r05.s043_output/n100.r05.s043.fq1.fastq" "n100.r05.s043_output/n100.r05.s043.fq2.fastq" | samtools view -bS - > "n100.r05.s043_output/n100.r05.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s043_output/n100.r05.s043.untrimmed.sorted.bam" "n100.r05.s043_output/n100.r05.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s043_output/n100.r05.s043.untrimmed.sorted.bam" -b "n100.r05.s043_output/n100.r05.s043.primers.bed" -p "n100.r05.s043_output/n100.r05.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" "n100.r05.s043_output/n100.r05.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s043_output/n100.r05.s043.reference.fas" "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" > "n100.r05.s043_output/n100.r05.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s043_output/n100.r05.s043.reference.fas" --call-indels "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" > "n100.r05.s043_output/n100.r05.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" > "n100.r05.s043_output/n100.r05.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s043_output/n100.r05.s043.depth.txt" "n100.r05.s043_output/n100.r05.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s043_output/n100.r05.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s043_output/n100.r05.s043.reference.fas" | bcftools consensus -m "n100.r05.s043_output/n100.r05.s043.low_depth.tsv" tmp.vcf.gz > "n100.r05.s043_output/n100.r05.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:03 scheduler task c3dec1ba (flow 3194fd2a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:03 scheduler task c3dec1ba (flow 3194fd2a): waiting for completion (try 0): started
2021/07/08 16:59:03  ->  n100.r05.s051.Main.out_file 3194fd2a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:03 n100.r05.s051.Main.out_file 3194fd2a n100/r05/n100.r05.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4c2c137d91aeee63a072a00622e576098a398fe0e5bfcc5d4ce9f81e15d8b5ef
	sha256:3194fd2a8bc7470afa6d1275aebb2c6392fdc3896b0036a16cc6f6cdc3ae54ef
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3dec1baf3f8eaec087f74baf8d7a2a2196a9a09d68f1f04cac54037d005a06d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s051_output"
	    wget -O "n100.r05.s051_output/n100.r05.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s051_output/n100.r05.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s051_output/n100.r05.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s051_output/n100.r05.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s051_output/n100.r05.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s051_output/n100.r05.s051.reference.fas" "n100.r05.s051_output/n100.r05.s051.fq1.fastq" "n100.r05.s051_output/n100.r05.s051.fq2.fastq" | samtools view -bS - > "n100.r05.s051_output/n100.r05.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s051_output/n100.r05.s051.untrimmed.sorted.bam" "n100.r05.s051_output/n100.r05.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s051_output/n100.r05.s051.untrimmed.sorted.bam" -b "n100.r05.s051_output/n100.r05.s051.primers.bed" -p "n100.r05.s051_output/n100.r05.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" "n100.r05.s051_output/n100.r05.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s051_output/n100.r05.s051.reference.fas" "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" > "n100.r05.s051_output/n100.r05.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s051_output/n100.r05.s051.reference.fas" --call-indels "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" > "n100.r05.s051_output/n100.r05.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" > "n100.r05.s051_output/n100.r05.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s051_output/n100.r05.s051.depth.txt" "n100.r05.s051_output/n100.r05.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s051_output/n100.r05.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s051_output/n100.r05.s051.reference.fas" | bcftools consensus -m "n100.r05.s051_output/n100.r05.s051.low_depth.tsv" tmp.vcf.gz > "n100.r05.s051_output/n100.r05.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:03 scheduler task 895b6be6 (flow 4ea7450d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:03 scheduler task 895b6be6 (flow 4ea7450d): waiting for completion (try 0): started
2021/07/08 16:59:03  ->  n100.r05.s062.Main.out_file 4ea7450d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:03 n100.r05.s062.Main.out_file 4ea7450d n100/r05/n100.r05.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:41f9a2f42245bdcd9196616f8c6cba48774677c0aac9c34891872e3b0e0bb6f9
	sha256:4ea7450d3be9b81e98eeb77317e6114f4d31b6c75cadb0101bc2917da3bf83d8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/895b6be62a175d1d98970d23df00ebb75a444ecb023fb26570176e3bf34b8a3f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s062_output"
	    wget -O "n100.r05.s062_output/n100.r05.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s062_output/n100.r05.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s062_output/n100.r05.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s062_output/n100.r05.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s062_output/n100.r05.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s062_output/n100.r05.s062.reference.fas" "n100.r05.s062_output/n100.r05.s062.fq1.fastq" "n100.r05.s062_output/n100.r05.s062.fq2.fastq" | samtools view -bS - > "n100.r05.s062_output/n100.r05.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s062_output/n100.r05.s062.untrimmed.sorted.bam" "n100.r05.s062_output/n100.r05.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s062_output/n100.r05.s062.untrimmed.sorted.bam" -b "n100.r05.s062_output/n100.r05.s062.primers.bed" -p "n100.r05.s062_output/n100.r05.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" "n100.r05.s062_output/n100.r05.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s062_output/n100.r05.s062.reference.fas" "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" > "n100.r05.s062_output/n100.r05.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s062_output/n100.r05.s062.reference.fas" --call-indels "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" > "n100.r05.s062_output/n100.r05.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" > "n100.r05.s062_output/n100.r05.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s062_output/n100.r05.s062.depth.txt" "n100.r05.s062_output/n100.r05.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s062_output/n100.r05.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s062_output/n100.r05.s062.reference.fas" | bcftools consensus -m "n100.r05.s062_output/n100.r05.s062.low_depth.tsv" tmp.vcf.gz > "n100.r05.s062_output/n100.r05.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:03 scheduler task 7848c63f (flow 26ac297d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:03 scheduler task 7848c63f (flow 26ac297d): waiting for completion (try 0): started
2021/07/08 16:59:03  ->  n100.r05.s048.Main.out_file 26ac297d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:03 n100.r05.s048.Main.out_file 26ac297d n100/r05/n100.r05.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b51cc2f3e9c2edc8870328dbfa965d16109a7d0c6a4733a4d31c03ed96d11511
	sha256:26ac297d1893244bc4af350efbbdcfae9d4b3fd837ada1fb6adfd3a715f3f068
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7848c63fdcf0d59df79dd14f8c476a7c2924589f399bb052f3e7afe777b0fd9f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s048_output"
	    wget -O "n100.r05.s048_output/n100.r05.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s048_output/n100.r05.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s048_output/n100.r05.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s048_output/n100.r05.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s048_output/n100.r05.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s048_output/n100.r05.s048.reference.fas" "n100.r05.s048_output/n100.r05.s048.fq1.fastq" "n100.r05.s048_output/n100.r05.s048.fq2.fastq" | samtools view -bS - > "n100.r05.s048_output/n100.r05.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s048_output/n100.r05.s048.untrimmed.sorted.bam" "n100.r05.s048_output/n100.r05.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s048_output/n100.r05.s048.untrimmed.sorted.bam" -b "n100.r05.s048_output/n100.r05.s048.primers.bed" -p "n100.r05.s048_output/n100.r05.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" "n100.r05.s048_output/n100.r05.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s048_output/n100.r05.s048.reference.fas" "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" > "n100.r05.s048_output/n100.r05.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s048_output/n100.r05.s048.reference.fas" --call-indels "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" > "n100.r05.s048_output/n100.r05.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" > "n100.r05.s048_output/n100.r05.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s048_output/n100.r05.s048.depth.txt" "n100.r05.s048_output/n100.r05.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s048_output/n100.r05.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s048_output/n100.r05.s048.reference.fas" | bcftools consensus -m "n100.r05.s048_output/n100.r05.s048.low_depth.tsv" tmp.vcf.gz > "n100.r05.s048_output/n100.r05.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:03 scheduler task 76111d9e (flow 91ea955a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:03 scheduler task 76111d9e (flow 91ea955a): waiting for completion (try 0): started
2021/07/08 16:59:03  ->  n100.r05.s081.Main.out_file 91ea955a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:03 n100.r05.s081.Main.out_file 91ea955a n100/r05/n100.r05.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9f29b3f61650da4df1fc72ac8806b99ade8d842001d7370f51e62ffdee500017
	sha256:91ea955aef68803cf2d4bfc863063cae1d546698b1f4bff6a66fb2a14c6305c3
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/76111d9ea5b59df37d5548bcb957e2a474c295ee7f9df20760a49f4712271d86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s081_output"
	    wget -O "n100.r05.s081_output/n100.r05.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s081_output/n100.r05.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s081_output/n100.r05.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s081_output/n100.r05.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s081_output/n100.r05.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s081_output/n100.r05.s081.reference.fas" "n100.r05.s081_output/n100.r05.s081.fq1.fastq" "n100.r05.s081_output/n100.r05.s081.fq2.fastq" | samtools view -bS - > "n100.r05.s081_output/n100.r05.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s081_output/n100.r05.s081.untrimmed.sorted.bam" "n100.r05.s081_output/n100.r05.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s081_output/n100.r05.s081.untrimmed.sorted.bam" -b "n100.r05.s081_output/n100.r05.s081.primers.bed" -p "n100.r05.s081_output/n100.r05.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" "n100.r05.s081_output/n100.r05.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s081_output/n100.r05.s081.reference.fas" "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" > "n100.r05.s081_output/n100.r05.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s081_output/n100.r05.s081.reference.fas" --call-indels "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" > "n100.r05.s081_output/n100.r05.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" > "n100.r05.s081_output/n100.r05.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s081_output/n100.r05.s081.depth.txt" "n100.r05.s081_output/n100.r05.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s081_output/n100.r05.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s081_output/n100.r05.s081.reference.fas" | bcftools consensus -m "n100.r05.s081_output/n100.r05.s081.low_depth.tsv" tmp.vcf.gz > "n100.r05.s081_output/n100.r05.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:03 scheduler task 7fd21a08 (flow 5b62101d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:03 scheduler task 7fd21a08 (flow 5b62101d): waiting for completion (try 0): started
2021/07/08 16:59:03  ->  n100.r05.s052.Main.out_file 5b62101d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:03 n100.r05.s052.Main.out_file 5b62101d n100/r05/n100.r05.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1640098f5cc8b529256b04cb3a93a9a32eed7800c787f9f0a3292b35e33c6f34
	sha256:5b62101dcae267a30a6cc8e7cfd64c973657258ea18f75873d8ebc0feab92ea8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7fd21a08b97fbce08af5459ee765c6ba15ea625735d9ec525bfa9023b9dc6a70
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s052_output"
	    wget -O "n100.r05.s052_output/n100.r05.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s052_output/n100.r05.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s052_output/n100.r05.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s052_output/n100.r05.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s052_output/n100.r05.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s052_output/n100.r05.s052.reference.fas" "n100.r05.s052_output/n100.r05.s052.fq1.fastq" "n100.r05.s052_output/n100.r05.s052.fq2.fastq" | samtools view -bS - > "n100.r05.s052_output/n100.r05.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s052_output/n100.r05.s052.untrimmed.sorted.bam" "n100.r05.s052_output/n100.r05.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s052_output/n100.r05.s052.untrimmed.sorted.bam" -b "n100.r05.s052_output/n100.r05.s052.primers.bed" -p "n100.r05.s052_output/n100.r05.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" "n100.r05.s052_output/n100.r05.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s052_output/n100.r05.s052.reference.fas" "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" > "n100.r05.s052_output/n100.r05.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s052_output/n100.r05.s052.reference.fas" --call-indels "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" > "n100.r05.s052_output/n100.r05.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" > "n100.r05.s052_output/n100.r05.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s052_output/n100.r05.s052.depth.txt" "n100.r05.s052_output/n100.r05.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s052_output/n100.r05.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s052_output/n100.r05.s052.reference.fas" | bcftools consensus -m "n100.r05.s052_output/n100.r05.s052.low_depth.tsv" tmp.vcf.gz > "n100.r05.s052_output/n100.r05.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task 96f028fe (flow a5550ae3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task 96f028fe (flow a5550ae3): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s057.Main.out_file a5550ae3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s057.Main.out_file a5550ae3 n100/r05/n100.r05.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c8d9ae1d90f602b264a4b3519e6780018c3cb4bd693d6b24c4856b5bd9ebe4ed
	sha256:a5550ae3e666f9244f750b8c9353ae5426356aa41ea635220de9e5f8007c51a6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/96f028feefcb82d3de1de3e4bb0ec434a1a5c945926ff4e9e751cb72c63ae5ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s057_output"
	    wget -O "n100.r05.s057_output/n100.r05.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s057_output/n100.r05.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s057_output/n100.r05.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s057_output/n100.r05.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s057_output/n100.r05.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s057_output/n100.r05.s057.reference.fas" "n100.r05.s057_output/n100.r05.s057.fq1.fastq" "n100.r05.s057_output/n100.r05.s057.fq2.fastq" | samtools view -bS - > "n100.r05.s057_output/n100.r05.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s057_output/n100.r05.s057.untrimmed.sorted.bam" "n100.r05.s057_output/n100.r05.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s057_output/n100.r05.s057.untrimmed.sorted.bam" -b "n100.r05.s057_output/n100.r05.s057.primers.bed" -p "n100.r05.s057_output/n100.r05.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" "n100.r05.s057_output/n100.r05.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s057_output/n100.r05.s057.reference.fas" "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" > "n100.r05.s057_output/n100.r05.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s057_output/n100.r05.s057.reference.fas" --call-indels "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" > "n100.r05.s057_output/n100.r05.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" > "n100.r05.s057_output/n100.r05.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s057_output/n100.r05.s057.depth.txt" "n100.r05.s057_output/n100.r05.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s057_output/n100.r05.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s057_output/n100.r05.s057.reference.fas" | bcftools consensus -m "n100.r05.s057_output/n100.r05.s057.low_depth.tsv" tmp.vcf.gz > "n100.r05.s057_output/n100.r05.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task c999bc91 (flow 1808ed0b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task c999bc91 (flow 1808ed0b): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s060.Main.out_file 1808ed0b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s060.Main.out_file 1808ed0b n100/r05/n100.r05.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36ea2b03167ba29d6a6acce631667555f5d871829c036190e4bc02ec6d5a289e
	sha256:1808ed0bc7a0862a63bf2c9172cd99648137e5b97b2a44e44ea18374bb06d6c4
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c999bc91291bed9a76f7cd482a00f901f144b7c40472e3e9e686d9cce38ccd61
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s060_output"
	    wget -O "n100.r05.s060_output/n100.r05.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s060_output/n100.r05.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s060_output/n100.r05.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s060_output/n100.r05.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s060_output/n100.r05.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s060_output/n100.r05.s060.reference.fas" "n100.r05.s060_output/n100.r05.s060.fq1.fastq" "n100.r05.s060_output/n100.r05.s060.fq2.fastq" | samtools view -bS - > "n100.r05.s060_output/n100.r05.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s060_output/n100.r05.s060.untrimmed.sorted.bam" "n100.r05.s060_output/n100.r05.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s060_output/n100.r05.s060.untrimmed.sorted.bam" -b "n100.r05.s060_output/n100.r05.s060.primers.bed" -p "n100.r05.s060_output/n100.r05.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" "n100.r05.s060_output/n100.r05.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s060_output/n100.r05.s060.reference.fas" "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" > "n100.r05.s060_output/n100.r05.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s060_output/n100.r05.s060.reference.fas" --call-indels "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" > "n100.r05.s060_output/n100.r05.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" > "n100.r05.s060_output/n100.r05.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s060_output/n100.r05.s060.depth.txt" "n100.r05.s060_output/n100.r05.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s060_output/n100.r05.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s060_output/n100.r05.s060.reference.fas" | bcftools consensus -m "n100.r05.s060_output/n100.r05.s060.low_depth.tsv" tmp.vcf.gz > "n100.r05.s060_output/n100.r05.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task ef9b0bc7 (flow 18d94a36): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task ef9b0bc7 (flow 18d94a36): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s077.Main.out_file 18d94a36 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s077.Main.out_file 18d94a36 n100/r05/n100.r05.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0a72928cc97d11063199c6445f2b28a7fe283641feb0f314f93262e5d6faec1c
	sha256:18d94a36217d8175c349155939bad0c538b2d5e6c86e0d3733f0d548a583b5b5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ef9b0bc7500158152edafffb2dd235087148c5d3ce865b00eb4048cdb6f5dca6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s077_output"
	    wget -O "n100.r05.s077_output/n100.r05.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s077_output/n100.r05.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s077_output/n100.r05.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s077_output/n100.r05.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s077_output/n100.r05.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s077_output/n100.r05.s077.reference.fas" "n100.r05.s077_output/n100.r05.s077.fq1.fastq" "n100.r05.s077_output/n100.r05.s077.fq2.fastq" | samtools view -bS - > "n100.r05.s077_output/n100.r05.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s077_output/n100.r05.s077.untrimmed.sorted.bam" "n100.r05.s077_output/n100.r05.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s077_output/n100.r05.s077.untrimmed.sorted.bam" -b "n100.r05.s077_output/n100.r05.s077.primers.bed" -p "n100.r05.s077_output/n100.r05.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" "n100.r05.s077_output/n100.r05.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s077_output/n100.r05.s077.reference.fas" "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" > "n100.r05.s077_output/n100.r05.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s077_output/n100.r05.s077.reference.fas" --call-indels "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" > "n100.r05.s077_output/n100.r05.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" > "n100.r05.s077_output/n100.r05.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s077_output/n100.r05.s077.depth.txt" "n100.r05.s077_output/n100.r05.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s077_output/n100.r05.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s077_output/n100.r05.s077.reference.fas" | bcftools consensus -m "n100.r05.s077_output/n100.r05.s077.low_depth.tsv" tmp.vcf.gz > "n100.r05.s077_output/n100.r05.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task d20bb815 (flow 220c7c9b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task d20bb815 (flow 220c7c9b): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s056.Main.out_file 220c7c9b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s056.Main.out_file 220c7c9b n100/r05/n100.r05.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d3ceeecb00f46442e4dade47daea180b16aa371eaa051f5f97d80dad26b5b37e
	sha256:220c7c9b2703697dd690449d99739e36f45e02b490c226f19174397050218813
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d20bb81565a9f5c5a2abb4558ea3e16c0fa4505fb3324225f5a9ee6e65641b99
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s056_output"
	    wget -O "n100.r05.s056_output/n100.r05.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s056_output/n100.r05.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s056_output/n100.r05.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s056_output/n100.r05.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s056_output/n100.r05.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s056_output/n100.r05.s056.reference.fas" "n100.r05.s056_output/n100.r05.s056.fq1.fastq" "n100.r05.s056_output/n100.r05.s056.fq2.fastq" | samtools view -bS - > "n100.r05.s056_output/n100.r05.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s056_output/n100.r05.s056.untrimmed.sorted.bam" "n100.r05.s056_output/n100.r05.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s056_output/n100.r05.s056.untrimmed.sorted.bam" -b "n100.r05.s056_output/n100.r05.s056.primers.bed" -p "n100.r05.s056_output/n100.r05.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" "n100.r05.s056_output/n100.r05.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s056_output/n100.r05.s056.reference.fas" "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" > "n100.r05.s056_output/n100.r05.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s056_output/n100.r05.s056.reference.fas" --call-indels "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" > "n100.r05.s056_output/n100.r05.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" > "n100.r05.s056_output/n100.r05.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s056_output/n100.r05.s056.depth.txt" "n100.r05.s056_output/n100.r05.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s056_output/n100.r05.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s056_output/n100.r05.s056.reference.fas" | bcftools consensus -m "n100.r05.s056_output/n100.r05.s056.low_depth.tsv" tmp.vcf.gz > "n100.r05.s056_output/n100.r05.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task c171a9af (flow f5a0e33a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task c171a9af (flow f5a0e33a): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s094.Main.out_file f5a0e33a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s094.Main.out_file f5a0e33a n100/r05/n100.r05.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac571e245abaa65d5eba40f1db9ca83d526c4743e2d8e58d4738423f2b6b6829
	sha256:f5a0e33a513f856c4cb7fa2650ce0e0c626095ea1057fea964d39c45a89883f6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c171a9afe4d5115422140bac0ef2790b4248e06e2f27429ccbea131d1d1fce32
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s094_output"
	    wget -O "n100.r05.s094_output/n100.r05.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s094_output/n100.r05.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s094_output/n100.r05.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s094_output/n100.r05.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s094_output/n100.r05.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s094_output/n100.r05.s094.reference.fas" "n100.r05.s094_output/n100.r05.s094.fq1.fastq" "n100.r05.s094_output/n100.r05.s094.fq2.fastq" | samtools view -bS - > "n100.r05.s094_output/n100.r05.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s094_output/n100.r05.s094.untrimmed.sorted.bam" "n100.r05.s094_output/n100.r05.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s094_output/n100.r05.s094.untrimmed.sorted.bam" -b "n100.r05.s094_output/n100.r05.s094.primers.bed" -p "n100.r05.s094_output/n100.r05.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" "n100.r05.s094_output/n100.r05.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s094_output/n100.r05.s094.reference.fas" "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" > "n100.r05.s094_output/n100.r05.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s094_output/n100.r05.s094.reference.fas" --call-indels "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" > "n100.r05.s094_output/n100.r05.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" > "n100.r05.s094_output/n100.r05.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s094_output/n100.r05.s094.depth.txt" "n100.r05.s094_output/n100.r05.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s094_output/n100.r05.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s094_output/n100.r05.s094.reference.fas" | bcftools consensus -m "n100.r05.s094_output/n100.r05.s094.low_depth.tsv" tmp.vcf.gz > "n100.r05.s094_output/n100.r05.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task fb5421a4 (flow 0e1a57df): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task fb5421a4 (flow 0e1a57df): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s097.Main.out_file 0e1a57df exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s097.Main.out_file 0e1a57df n100/r05/n100.r05.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7ae420bc36efc508f08fbab8cdc61d99384221244f267ce60867cd0743b2b9b5
	sha256:0e1a57df1d3f8f9594358debe378e6d11c909cd6d05004fcc9195763f2970f2d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fb5421a489c9e5dccf98e20ced00225c81bd251f91d1e9c711117a67001c8829
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s097_output"
	    wget -O "n100.r05.s097_output/n100.r05.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s097_output/n100.r05.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s097_output/n100.r05.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s097_output/n100.r05.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s097_output/n100.r05.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s097_output/n100.r05.s097.reference.fas" "n100.r05.s097_output/n100.r05.s097.fq1.fastq" "n100.r05.s097_output/n100.r05.s097.fq2.fastq" | samtools view -bS - > "n100.r05.s097_output/n100.r05.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s097_output/n100.r05.s097.untrimmed.sorted.bam" "n100.r05.s097_output/n100.r05.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s097_output/n100.r05.s097.untrimmed.sorted.bam" -b "n100.r05.s097_output/n100.r05.s097.primers.bed" -p "n100.r05.s097_output/n100.r05.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" "n100.r05.s097_output/n100.r05.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s097_output/n100.r05.s097.reference.fas" "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" > "n100.r05.s097_output/n100.r05.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s097_output/n100.r05.s097.reference.fas" --call-indels "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" > "n100.r05.s097_output/n100.r05.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" > "n100.r05.s097_output/n100.r05.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s097_output/n100.r05.s097.depth.txt" "n100.r05.s097_output/n100.r05.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s097_output/n100.r05.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s097_output/n100.r05.s097.reference.fas" | bcftools consensus -m "n100.r05.s097_output/n100.r05.s097.low_depth.tsv" tmp.vcf.gz > "n100.r05.s097_output/n100.r05.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:04 scheduler task 91519b5f (flow b2cb8afe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:04 scheduler task 91519b5f (flow b2cb8afe): waiting for completion (try 0): started
2021/07/08 16:59:04  ->  n100.r05.s049.Main.out_file b2cb8afe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:04 n100.r05.s049.Main.out_file b2cb8afe n100/r05/n100.r05.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e97ddea68c3a05af37834fde1f72a0ab3c9a2e9636541dbff49e66ae84e96db0
	sha256:b2cb8afea23d19bd49929f4dc5dd66283ca7f2b6cdeee011eb56213367b0739d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/91519b5f040275d236e2194b8ce856076d1c3cbf695b827c60266500cc228f89
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s049_output"
	    wget -O "n100.r05.s049_output/n100.r05.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s049_output/n100.r05.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s049_output/n100.r05.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s049_output/n100.r05.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s049_output/n100.r05.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s049_output/n100.r05.s049.reference.fas" "n100.r05.s049_output/n100.r05.s049.fq1.fastq" "n100.r05.s049_output/n100.r05.s049.fq2.fastq" | samtools view -bS - > "n100.r05.s049_output/n100.r05.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s049_output/n100.r05.s049.untrimmed.sorted.bam" "n100.r05.s049_output/n100.r05.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s049_output/n100.r05.s049.untrimmed.sorted.bam" -b "n100.r05.s049_output/n100.r05.s049.primers.bed" -p "n100.r05.s049_output/n100.r05.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" "n100.r05.s049_output/n100.r05.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s049_output/n100.r05.s049.reference.fas" "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" > "n100.r05.s049_output/n100.r05.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s049_output/n100.r05.s049.reference.fas" --call-indels "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" > "n100.r05.s049_output/n100.r05.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" > "n100.r05.s049_output/n100.r05.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s049_output/n100.r05.s049.depth.txt" "n100.r05.s049_output/n100.r05.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s049_output/n100.r05.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s049_output/n100.r05.s049.reference.fas" | bcftools consensus -m "n100.r05.s049_output/n100.r05.s049.low_depth.tsv" tmp.vcf.gz > "n100.r05.s049_output/n100.r05.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:05 scheduler task 34c034d0 (flow 98cff474): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:05 scheduler task 34c034d0 (flow 98cff474): waiting for completion (try 0): started
2021/07/08 16:59:05  ->  n100.r05.s036.Main.out_file 98cff474 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:05 n100.r05.s036.Main.out_file 98cff474 n100/r05/n100.r05.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1397b18ab3f27f639e28fe2738b8139c008117b7ce589476790889bf3636ea11
	sha256:98cff4749a632cb7345706ef5d8b69b948bb5f4fb585e8e7753d2e259618b8b0
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/34c034d01e26e7d90265d8de98f09b38af36a78e276a9a28a0ea0a03ce238681
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s036_output"
	    wget -O "n100.r05.s036_output/n100.r05.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s036_output/n100.r05.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s036_output/n100.r05.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s036_output/n100.r05.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s036_output/n100.r05.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s036_output/n100.r05.s036.reference.fas" "n100.r05.s036_output/n100.r05.s036.fq1.fastq" "n100.r05.s036_output/n100.r05.s036.fq2.fastq" | samtools view -bS - > "n100.r05.s036_output/n100.r05.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s036_output/n100.r05.s036.untrimmed.sorted.bam" "n100.r05.s036_output/n100.r05.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s036_output/n100.r05.s036.untrimmed.sorted.bam" -b "n100.r05.s036_output/n100.r05.s036.primers.bed" -p "n100.r05.s036_output/n100.r05.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" "n100.r05.s036_output/n100.r05.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s036_output/n100.r05.s036.reference.fas" "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" > "n100.r05.s036_output/n100.r05.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s036_output/n100.r05.s036.reference.fas" --call-indels "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" > "n100.r05.s036_output/n100.r05.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" > "n100.r05.s036_output/n100.r05.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s036_output/n100.r05.s036.depth.txt" "n100.r05.s036_output/n100.r05.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s036_output/n100.r05.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s036_output/n100.r05.s036.reference.fas" | bcftools consensus -m "n100.r05.s036_output/n100.r05.s036.low_depth.tsv" tmp.vcf.gz > "n100.r05.s036_output/n100.r05.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:05 scheduler task 4618e061 (flow 40e93ad6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:05 scheduler task 4618e061 (flow 40e93ad6): waiting for completion (try 0): started
2021/07/08 16:59:05  ->  n100.r05.s038.Main.out_file 40e93ad6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:05 n100.r05.s038.Main.out_file 40e93ad6 n100/r05/n100.r05.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:06e070eaabade75ea2f796b8b5bf38685fc5ec27572cc65f89c1703f1d57907b
	sha256:40e93ad6aca333b70e58d50cea69b97db3f6b2c3206d33be787a5a48c3bf2892
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4618e061fbda852cfed316ce4012f796ff95d51bed469f2ee3e309a71e169620
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s038_output"
	    wget -O "n100.r05.s038_output/n100.r05.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s038_output/n100.r05.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s038_output/n100.r05.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s038_output/n100.r05.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s038_output/n100.r05.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s038_output/n100.r05.s038.reference.fas" "n100.r05.s038_output/n100.r05.s038.fq1.fastq" "n100.r05.s038_output/n100.r05.s038.fq2.fastq" | samtools view -bS - > "n100.r05.s038_output/n100.r05.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s038_output/n100.r05.s038.untrimmed.sorted.bam" "n100.r05.s038_output/n100.r05.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s038_output/n100.r05.s038.untrimmed.sorted.bam" -b "n100.r05.s038_output/n100.r05.s038.primers.bed" -p "n100.r05.s038_output/n100.r05.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" "n100.r05.s038_output/n100.r05.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s038_output/n100.r05.s038.reference.fas" "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" > "n100.r05.s038_output/n100.r05.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s038_output/n100.r05.s038.reference.fas" --call-indels "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" > "n100.r05.s038_output/n100.r05.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" > "n100.r05.s038_output/n100.r05.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s038_output/n100.r05.s038.depth.txt" "n100.r05.s038_output/n100.r05.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s038_output/n100.r05.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s038_output/n100.r05.s038.reference.fas" | bcftools consensus -m "n100.r05.s038_output/n100.r05.s038.low_depth.tsv" tmp.vcf.gz > "n100.r05.s038_output/n100.r05.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:05 scheduler task 3b4791e9 (flow e7ffbcd4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:05 scheduler task 3b4791e9 (flow e7ffbcd4): waiting for completion (try 0): started
2021/07/08 16:59:05  ->  n100.r05.s021.Main.out_file e7ffbcd4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:05 n100.r05.s021.Main.out_file e7ffbcd4 n100/r05/n100.r05.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b283a7ba88e15d6d2b36580ea3f6795b77c0d16ae7ec26efc92e7f1abea75fc7
	sha256:e7ffbcd4c61e911457b4af73790bc77726d1c01464da4b8cedd1c22e4543d29c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3b4791e9183455e0361d40a008b6f783bb132c0e5cdd4e26bb54c0a7091c25d4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s021_output"
	    wget -O "n100.r05.s021_output/n100.r05.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s021_output/n100.r05.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s021_output/n100.r05.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s021_output/n100.r05.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s021_output/n100.r05.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s021_output/n100.r05.s021.reference.fas" "n100.r05.s021_output/n100.r05.s021.fq1.fastq" "n100.r05.s021_output/n100.r05.s021.fq2.fastq" | samtools view -bS - > "n100.r05.s021_output/n100.r05.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s021_output/n100.r05.s021.untrimmed.sorted.bam" "n100.r05.s021_output/n100.r05.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s021_output/n100.r05.s021.untrimmed.sorted.bam" -b "n100.r05.s021_output/n100.r05.s021.primers.bed" -p "n100.r05.s021_output/n100.r05.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" "n100.r05.s021_output/n100.r05.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s021_output/n100.r05.s021.reference.fas" "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" > "n100.r05.s021_output/n100.r05.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s021_output/n100.r05.s021.reference.fas" --call-indels "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" > "n100.r05.s021_output/n100.r05.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" > "n100.r05.s021_output/n100.r05.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s021_output/n100.r05.s021.depth.txt" "n100.r05.s021_output/n100.r05.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s021_output/n100.r05.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s021_output/n100.r05.s021.reference.fas" | bcftools consensus -m "n100.r05.s021_output/n100.r05.s021.low_depth.tsv" tmp.vcf.gz > "n100.r05.s021_output/n100.r05.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:05 scheduler task 65ef70a2 (flow 877fe836): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:05 scheduler task 65ef70a2 (flow 877fe836): waiting for completion (try 0): started
2021/07/08 16:59:05  ->  n100.r05.s014.Main.out_file 877fe836 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:05 n100.r05.s014.Main.out_file 877fe836 n100/r05/n100.r05.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:418b6580f1d5b9b03f8b454b4334aefc063fe8be59ce885dba9bcafa7affcc0b
	sha256:877fe8366f14e5efd7eeb1bf7426bfd5d378aaacf965827c9abf4ee330ff2649
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/65ef70a2be4d4ef280a669de4b06bccde4ce6d05d7eaba0228b83752d691391a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s014_output"
	    wget -O "n100.r05.s014_output/n100.r05.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s014_output/n100.r05.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s014_output/n100.r05.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s014_output/n100.r05.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s014_output/n100.r05.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s014_output/n100.r05.s014.reference.fas" "n100.r05.s014_output/n100.r05.s014.fq1.fastq" "n100.r05.s014_output/n100.r05.s014.fq2.fastq" | samtools view -bS - > "n100.r05.s014_output/n100.r05.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s014_output/n100.r05.s014.untrimmed.sorted.bam" "n100.r05.s014_output/n100.r05.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s014_output/n100.r05.s014.untrimmed.sorted.bam" -b "n100.r05.s014_output/n100.r05.s014.primers.bed" -p "n100.r05.s014_output/n100.r05.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" "n100.r05.s014_output/n100.r05.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s014_output/n100.r05.s014.reference.fas" "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" > "n100.r05.s014_output/n100.r05.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s014_output/n100.r05.s014.reference.fas" --call-indels "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" > "n100.r05.s014_output/n100.r05.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" > "n100.r05.s014_output/n100.r05.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s014_output/n100.r05.s014.depth.txt" "n100.r05.s014_output/n100.r05.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s014_output/n100.r05.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s014_output/n100.r05.s014.reference.fas" | bcftools consensus -m "n100.r05.s014_output/n100.r05.s014.low_depth.tsv" tmp.vcf.gz > "n100.r05.s014_output/n100.r05.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:05 scheduler task 5cf5576b (flow 0ff39579): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:05 scheduler task 5cf5576b (flow 0ff39579): waiting for completion (try 0): started
2021/07/08 16:59:05  ->  n100.r05.s040.Main.out_file 0ff39579 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:05 n100.r05.s040.Main.out_file 0ff39579 n100/r05/n100.r05.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fafefb422c91d8d0cbc934e01e916974700ec0207c00fe0443780bfb306e0058
	sha256:0ff39579fbfe30e36f5f344a31c612b573042d0d22ba6d796b1c91581241a72e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5cf5576bdc62c727d4f952a3a77e81b0c80363add443ff83268e98a700e0c4a4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s040_output"
	    wget -O "n100.r05.s040_output/n100.r05.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s040_output/n100.r05.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s040_output/n100.r05.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s040_output/n100.r05.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s040_output/n100.r05.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s040_output/n100.r05.s040.reference.fas" "n100.r05.s040_output/n100.r05.s040.fq1.fastq" "n100.r05.s040_output/n100.r05.s040.fq2.fastq" | samtools view -bS - > "n100.r05.s040_output/n100.r05.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s040_output/n100.r05.s040.untrimmed.sorted.bam" "n100.r05.s040_output/n100.r05.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s040_output/n100.r05.s040.untrimmed.sorted.bam" -b "n100.r05.s040_output/n100.r05.s040.primers.bed" -p "n100.r05.s040_output/n100.r05.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" "n100.r05.s040_output/n100.r05.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s040_output/n100.r05.s040.reference.fas" "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" > "n100.r05.s040_output/n100.r05.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s040_output/n100.r05.s040.reference.fas" --call-indels "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" > "n100.r05.s040_output/n100.r05.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" > "n100.r05.s040_output/n100.r05.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s040_output/n100.r05.s040.depth.txt" "n100.r05.s040_output/n100.r05.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s040_output/n100.r05.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s040_output/n100.r05.s040.reference.fas" | bcftools consensus -m "n100.r05.s040_output/n100.r05.s040.low_depth.tsv" tmp.vcf.gz > "n100.r05.s040_output/n100.r05.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:05 scheduler task 585ad2e5 (flow fff44c7b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:05 scheduler task 585ad2e5 (flow fff44c7b): waiting for completion (try 0): started
2021/07/08 16:59:05  ->  n100.r05.s090.Main.out_file fff44c7b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:05 n100.r05.s090.Main.out_file fff44c7b n100/r05/n100.r05.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8272190fe403f2ada172ad82e1708f31f0138b067bcc933a0ef23f02ad446cb2
	sha256:fff44c7bf42d67eff5dbca34dbcf733cc034010f578ad026df96804488f95f1b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/585ad2e5728e2a618e69d616203536dfb23e49c975f06df8f25009192fa1b06a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s090_output"
	    wget -O "n100.r05.s090_output/n100.r05.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s090_output/n100.r05.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s090_output/n100.r05.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s090_output/n100.r05.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s090_output/n100.r05.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s090_output/n100.r05.s090.reference.fas" "n100.r05.s090_output/n100.r05.s090.fq1.fastq" "n100.r05.s090_output/n100.r05.s090.fq2.fastq" | samtools view -bS - > "n100.r05.s090_output/n100.r05.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s090_output/n100.r05.s090.untrimmed.sorted.bam" "n100.r05.s090_output/n100.r05.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s090_output/n100.r05.s090.untrimmed.sorted.bam" -b "n100.r05.s090_output/n100.r05.s090.primers.bed" -p "n100.r05.s090_output/n100.r05.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" "n100.r05.s090_output/n100.r05.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s090_output/n100.r05.s090.reference.fas" "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" > "n100.r05.s090_output/n100.r05.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s090_output/n100.r05.s090.reference.fas" --call-indels "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" > "n100.r05.s090_output/n100.r05.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" > "n100.r05.s090_output/n100.r05.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s090_output/n100.r05.s090.depth.txt" "n100.r05.s090_output/n100.r05.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s090_output/n100.r05.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s090_output/n100.r05.s090.reference.fas" | bcftools consensus -m "n100.r05.s090_output/n100.r05.s090.low_depth.tsv" tmp.vcf.gz > "n100.r05.s090_output/n100.r05.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:06 scheduler task b23b5216 (flow 06073390): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:06 scheduler task b23b5216 (flow 06073390): waiting for completion (try 0): started
2021/07/08 16:59:06  ->  n100.r05.s063.Main.out_file 06073390 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:06 n100.r05.s063.Main.out_file 06073390 n100/r05/n100.r05.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5abb2d4e5a9d5fcf3cdd11c986728dc504f7d2e1b6fbd0ce1cfe38c65bea990
	sha256:060733909e764b2be9a57993d6a1b918dcf4b69c585049c7bf9dacf876c83d48
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b23b521668de5f79fd35316f41035c7c0f0ff65176ed31f2486ab53551f265cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s063_output"
	    wget -O "n100.r05.s063_output/n100.r05.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s063_output/n100.r05.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s063_output/n100.r05.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s063_output/n100.r05.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s063_output/n100.r05.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s063_output/n100.r05.s063.reference.fas" "n100.r05.s063_output/n100.r05.s063.fq1.fastq" "n100.r05.s063_output/n100.r05.s063.fq2.fastq" | samtools view -bS - > "n100.r05.s063_output/n100.r05.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s063_output/n100.r05.s063.untrimmed.sorted.bam" "n100.r05.s063_output/n100.r05.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s063_output/n100.r05.s063.untrimmed.sorted.bam" -b "n100.r05.s063_output/n100.r05.s063.primers.bed" -p "n100.r05.s063_output/n100.r05.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" "n100.r05.s063_output/n100.r05.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s063_output/n100.r05.s063.reference.fas" "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" > "n100.r05.s063_output/n100.r05.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s063_output/n100.r05.s063.reference.fas" --call-indels "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" > "n100.r05.s063_output/n100.r05.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" > "n100.r05.s063_output/n100.r05.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s063_output/n100.r05.s063.depth.txt" "n100.r05.s063_output/n100.r05.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s063_output/n100.r05.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s063_output/n100.r05.s063.reference.fas" | bcftools consensus -m "n100.r05.s063_output/n100.r05.s063.low_depth.tsv" tmp.vcf.gz > "n100.r05.s063_output/n100.r05.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:06 scheduler task b2310ac6 (flow c488bfe1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:06 scheduler task b2310ac6 (flow c488bfe1): waiting for completion (try 0): started
2021/07/08 16:59:06  ->  n100.r05.s028.Main.out_file c488bfe1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:06 n100.r05.s028.Main.out_file c488bfe1 n100/r05/n100.r05.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cc7d12b3c64d40a9cb314bfea85c508cd0805c71fac83dce1f428d01c8afed6f
	sha256:c488bfe1d21add356d353e735a854eed4396bdb9344182365c66f6ff61085c09
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b2310ac690e12fb33c6a73dac401c5a66debe640496d6f0d0c7c2101f873dc17
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s028_output"
	    wget -O "n100.r05.s028_output/n100.r05.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s028_output/n100.r05.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s028_output/n100.r05.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s028_output/n100.r05.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s028_output/n100.r05.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s028_output/n100.r05.s028.reference.fas" "n100.r05.s028_output/n100.r05.s028.fq1.fastq" "n100.r05.s028_output/n100.r05.s028.fq2.fastq" | samtools view -bS - > "n100.r05.s028_output/n100.r05.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s028_output/n100.r05.s028.untrimmed.sorted.bam" "n100.r05.s028_output/n100.r05.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s028_output/n100.r05.s028.untrimmed.sorted.bam" -b "n100.r05.s028_output/n100.r05.s028.primers.bed" -p "n100.r05.s028_output/n100.r05.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" "n100.r05.s028_output/n100.r05.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s028_output/n100.r05.s028.reference.fas" "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" > "n100.r05.s028_output/n100.r05.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s028_output/n100.r05.s028.reference.fas" --call-indels "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" > "n100.r05.s028_output/n100.r05.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" > "n100.r05.s028_output/n100.r05.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s028_output/n100.r05.s028.depth.txt" "n100.r05.s028_output/n100.r05.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s028_output/n100.r05.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s028_output/n100.r05.s028.reference.fas" | bcftools consensus -m "n100.r05.s028_output/n100.r05.s028.low_depth.tsv" tmp.vcf.gz > "n100.r05.s028_output/n100.r05.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:06 scheduler task d3dae4b0 (flow f18c9534): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:06 scheduler task d3dae4b0 (flow f18c9534): waiting for completion (try 0): started
2021/07/08 16:59:06  ->  n100.r05.s018.Main.out_file f18c9534 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:06 n100.r05.s018.Main.out_file f18c9534 n100/r05/n100.r05.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1365089ce0b015c86ff82c8f2d089d20552bb735d8aa57146cc524e01efd446
	sha256:f18c9534e4ca7bc33bc763f540a23f6ce5867df704f400b900170da4234cc6d6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3dae4b0d2829e66e2815b3cde0c26782936e29f385a56af97393d5301400f3e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s018_output"
	    wget -O "n100.r05.s018_output/n100.r05.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s018_output/n100.r05.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s018_output/n100.r05.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s018_output/n100.r05.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s018_output/n100.r05.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s018_output/n100.r05.s018.reference.fas" "n100.r05.s018_output/n100.r05.s018.fq1.fastq" "n100.r05.s018_output/n100.r05.s018.fq2.fastq" | samtools view -bS - > "n100.r05.s018_output/n100.r05.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s018_output/n100.r05.s018.untrimmed.sorted.bam" "n100.r05.s018_output/n100.r05.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s018_output/n100.r05.s018.untrimmed.sorted.bam" -b "n100.r05.s018_output/n100.r05.s018.primers.bed" -p "n100.r05.s018_output/n100.r05.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" "n100.r05.s018_output/n100.r05.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s018_output/n100.r05.s018.reference.fas" "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" > "n100.r05.s018_output/n100.r05.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s018_output/n100.r05.s018.reference.fas" --call-indels "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" > "n100.r05.s018_output/n100.r05.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" > "n100.r05.s018_output/n100.r05.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s018_output/n100.r05.s018.depth.txt" "n100.r05.s018_output/n100.r05.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s018_output/n100.r05.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s018_output/n100.r05.s018.reference.fas" | bcftools consensus -m "n100.r05.s018_output/n100.r05.s018.low_depth.tsv" tmp.vcf.gz > "n100.r05.s018_output/n100.r05.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:06 scheduler task 2d6a723e (flow 0ca87758): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:06 scheduler task 2d6a723e (flow 0ca87758): waiting for completion (try 0): started
2021/07/08 16:59:06  ->  n100.r05.s100.Main.out_file 0ca87758 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:06 n100.r05.s100.Main.out_file 0ca87758 n100/r05/n100.r05.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:67b5942ee9f4d10ace44a1a386f6d9a7d862a269f6e91b7ff19ec57d861f6232
	sha256:0ca877583291be878d23289dccc4fa8fee62a5340c645330ac6a9e45c74df254
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2d6a723e27e54a9e1ca866ccf1b815bf817d2039180c5c41847a2cbdb8f3f2b6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s100_output"
	    wget -O "n100.r05.s100_output/n100.r05.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s100_output/n100.r05.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s100_output/n100.r05.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s100_output/n100.r05.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s100_output/n100.r05.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s100_output/n100.r05.s100.reference.fas" "n100.r05.s100_output/n100.r05.s100.fq1.fastq" "n100.r05.s100_output/n100.r05.s100.fq2.fastq" | samtools view -bS - > "n100.r05.s100_output/n100.r05.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s100_output/n100.r05.s100.untrimmed.sorted.bam" "n100.r05.s100_output/n100.r05.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s100_output/n100.r05.s100.untrimmed.sorted.bam" -b "n100.r05.s100_output/n100.r05.s100.primers.bed" -p "n100.r05.s100_output/n100.r05.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" "n100.r05.s100_output/n100.r05.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s100_output/n100.r05.s100.reference.fas" "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" > "n100.r05.s100_output/n100.r05.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s100_output/n100.r05.s100.reference.fas" --call-indels "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" > "n100.r05.s100_output/n100.r05.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" > "n100.r05.s100_output/n100.r05.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s100_output/n100.r05.s100.depth.txt" "n100.r05.s100_output/n100.r05.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s100_output/n100.r05.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s100_output/n100.r05.s100.reference.fas" | bcftools consensus -m "n100.r05.s100_output/n100.r05.s100.low_depth.tsv" tmp.vcf.gz > "n100.r05.s100_output/n100.r05.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:06 scheduler task 600e8f95 (flow f3280027): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:06 scheduler task 600e8f95 (flow f3280027): waiting for completion (try 0): started
2021/07/08 16:59:06  ->  n100.r05.s031.Main.out_file f3280027 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:06 n100.r05.s031.Main.out_file f3280027 n100/r05/n100.r05.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23e0c43e9fd6d77b938a177699d7d9d2ec17c22cbdbf4456b1dbb858c8ba7a48
	sha256:f328002711684120325a6be0d3f15bc8ae8f91939b1a78b6276269d8838ffb4c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/600e8f9594eff529cca1892b7ea09d6b30bbbbd191dd126e0faf6c5ad43666cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s031_output"
	    wget -O "n100.r05.s031_output/n100.r05.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s031_output/n100.r05.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s031_output/n100.r05.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s031_output/n100.r05.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s031_output/n100.r05.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s031_output/n100.r05.s031.reference.fas" "n100.r05.s031_output/n100.r05.s031.fq1.fastq" "n100.r05.s031_output/n100.r05.s031.fq2.fastq" | samtools view -bS - > "n100.r05.s031_output/n100.r05.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s031_output/n100.r05.s031.untrimmed.sorted.bam" "n100.r05.s031_output/n100.r05.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s031_output/n100.r05.s031.untrimmed.sorted.bam" -b "n100.r05.s031_output/n100.r05.s031.primers.bed" -p "n100.r05.s031_output/n100.r05.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" "n100.r05.s031_output/n100.r05.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s031_output/n100.r05.s031.reference.fas" "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" > "n100.r05.s031_output/n100.r05.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s031_output/n100.r05.s031.reference.fas" --call-indels "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" > "n100.r05.s031_output/n100.r05.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" > "n100.r05.s031_output/n100.r05.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s031_output/n100.r05.s031.depth.txt" "n100.r05.s031_output/n100.r05.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s031_output/n100.r05.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s031_output/n100.r05.s031.reference.fas" | bcftools consensus -m "n100.r05.s031_output/n100.r05.s031.low_depth.tsv" tmp.vcf.gz > "n100.r05.s031_output/n100.r05.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:07 scheduler task 27b13502 (flow 152eb222): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:07 scheduler task 27b13502 (flow 152eb222): waiting for completion (try 0): started
2021/07/08 16:59:07  ->  n100.r05.s059.Main.out_file 152eb222 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:07 n100.r05.s059.Main.out_file 152eb222 n100/r05/n100.r05.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a3255d39e08b1de57196f73a6d3e35e90154dcbee2ca9810763d1c6bf839be3d
	sha256:152eb222781701a877aa830855e3f4d01d68416cd1f7135d704916059aa3801c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27b13502eea34c6282da0777d62dda9257ed7cba7145399cc25abd3b634f1c3d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s059_output"
	    wget -O "n100.r05.s059_output/n100.r05.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s059_output/n100.r05.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s059_output/n100.r05.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s059_output/n100.r05.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s059_output/n100.r05.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s059_output/n100.r05.s059.reference.fas" "n100.r05.s059_output/n100.r05.s059.fq1.fastq" "n100.r05.s059_output/n100.r05.s059.fq2.fastq" | samtools view -bS - > "n100.r05.s059_output/n100.r05.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s059_output/n100.r05.s059.untrimmed.sorted.bam" "n100.r05.s059_output/n100.r05.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s059_output/n100.r05.s059.untrimmed.sorted.bam" -b "n100.r05.s059_output/n100.r05.s059.primers.bed" -p "n100.r05.s059_output/n100.r05.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" "n100.r05.s059_output/n100.r05.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s059_output/n100.r05.s059.reference.fas" "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" > "n100.r05.s059_output/n100.r05.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s059_output/n100.r05.s059.reference.fas" --call-indels "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" > "n100.r05.s059_output/n100.r05.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" > "n100.r05.s059_output/n100.r05.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s059_output/n100.r05.s059.depth.txt" "n100.r05.s059_output/n100.r05.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s059_output/n100.r05.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s059_output/n100.r05.s059.reference.fas" | bcftools consensus -m "n100.r05.s059_output/n100.r05.s059.low_depth.tsv" tmp.vcf.gz > "n100.r05.s059_output/n100.r05.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:07 scheduler task 0db5a36a (flow a529c55b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:07 scheduler task 0db5a36a (flow a529c55b): waiting for completion (try 0): started
2021/07/08 16:59:07  ->  n100.r05.s093.Main.out_file a529c55b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:07 n100.r05.s093.Main.out_file a529c55b n100/r05/n100.r05.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1e6d229e6481687e33ede9fab654cdd926a3e52b93c8621de23a3e6452de3649
	sha256:a529c55b2223335c48e4cdfe2a14d4278bd2caee12729c699c82b92b09708b3b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0db5a36a7e25b4371d2bd42cdffafdda09370f4d85c731d9ede4b089ff94d7c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s093_output"
	    wget -O "n100.r05.s093_output/n100.r05.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s093_output/n100.r05.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s093_output/n100.r05.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s093_output/n100.r05.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s093_output/n100.r05.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s093_output/n100.r05.s093.reference.fas" "n100.r05.s093_output/n100.r05.s093.fq1.fastq" "n100.r05.s093_output/n100.r05.s093.fq2.fastq" | samtools view -bS - > "n100.r05.s093_output/n100.r05.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s093_output/n100.r05.s093.untrimmed.sorted.bam" "n100.r05.s093_output/n100.r05.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s093_output/n100.r05.s093.untrimmed.sorted.bam" -b "n100.r05.s093_output/n100.r05.s093.primers.bed" -p "n100.r05.s093_output/n100.r05.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" "n100.r05.s093_output/n100.r05.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s093_output/n100.r05.s093.reference.fas" "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" > "n100.r05.s093_output/n100.r05.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s093_output/n100.r05.s093.reference.fas" --call-indels "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" > "n100.r05.s093_output/n100.r05.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" > "n100.r05.s093_output/n100.r05.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s093_output/n100.r05.s093.depth.txt" "n100.r05.s093_output/n100.r05.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s093_output/n100.r05.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s093_output/n100.r05.s093.reference.fas" | bcftools consensus -m "n100.r05.s093_output/n100.r05.s093.low_depth.tsv" tmp.vcf.gz > "n100.r05.s093_output/n100.r05.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:07 scheduler task 3176835f (flow f4fe708f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:07 scheduler task 3176835f (flow f4fe708f): waiting for completion (try 0): started
2021/07/08 16:59:07  ->  n100.r05.s074.Main.out_file f4fe708f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:07 n100.r05.s074.Main.out_file f4fe708f n100/r05/n100.r05.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:be44126c7d22149efe0f4e3d8038e0f932440a81f29229e0252d9e74d8af5523
	sha256:f4fe708f761fe606e37478ee6c3e1a985ec2383edb33b3347063b47022880e6e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3176835f070e87a66bdb97d247cc18c1d5f45f2e44262bd87164a59cdcf61452
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s074_output"
	    wget -O "n100.r05.s074_output/n100.r05.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s074_output/n100.r05.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s074_output/n100.r05.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s074_output/n100.r05.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s074_output/n100.r05.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s074_output/n100.r05.s074.reference.fas" "n100.r05.s074_output/n100.r05.s074.fq1.fastq" "n100.r05.s074_output/n100.r05.s074.fq2.fastq" | samtools view -bS - > "n100.r05.s074_output/n100.r05.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s074_output/n100.r05.s074.untrimmed.sorted.bam" "n100.r05.s074_output/n100.r05.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s074_output/n100.r05.s074.untrimmed.sorted.bam" -b "n100.r05.s074_output/n100.r05.s074.primers.bed" -p "n100.r05.s074_output/n100.r05.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" "n100.r05.s074_output/n100.r05.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s074_output/n100.r05.s074.reference.fas" "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" > "n100.r05.s074_output/n100.r05.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s074_output/n100.r05.s074.reference.fas" --call-indels "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" > "n100.r05.s074_output/n100.r05.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" > "n100.r05.s074_output/n100.r05.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s074_output/n100.r05.s074.depth.txt" "n100.r05.s074_output/n100.r05.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s074_output/n100.r05.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s074_output/n100.r05.s074.reference.fas" | bcftools consensus -m "n100.r05.s074_output/n100.r05.s074.low_depth.tsv" tmp.vcf.gz > "n100.r05.s074_output/n100.r05.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:07 scheduler task 65048d3f (flow 2ff7e1c2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:07 scheduler task 65048d3f (flow 2ff7e1c2): waiting for completion (try 0): started
2021/07/08 16:59:07  ->  n100.r05.s064.Main.out_file 2ff7e1c2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:07 n100.r05.s064.Main.out_file 2ff7e1c2 n100/r05/n100.r05.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f3a2da43dc5151e0034cc112a69411831d26f7505f0778da581cd1e6cfd4aa2
	sha256:2ff7e1c2bcd645f176a0192db425754557916af75c64d17f1446647f336bbec4
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/65048d3fb45d2770cf8cb0034e92ad697d2b94f65660fa4b03ddfbeeb96b0493
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s064_output"
	    wget -O "n100.r05.s064_output/n100.r05.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s064_output/n100.r05.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s064_output/n100.r05.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s064_output/n100.r05.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s064_output/n100.r05.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s064_output/n100.r05.s064.reference.fas" "n100.r05.s064_output/n100.r05.s064.fq1.fastq" "n100.r05.s064_output/n100.r05.s064.fq2.fastq" | samtools view -bS - > "n100.r05.s064_output/n100.r05.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s064_output/n100.r05.s064.untrimmed.sorted.bam" "n100.r05.s064_output/n100.r05.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s064_output/n100.r05.s064.untrimmed.sorted.bam" -b "n100.r05.s064_output/n100.r05.s064.primers.bed" -p "n100.r05.s064_output/n100.r05.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" "n100.r05.s064_output/n100.r05.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s064_output/n100.r05.s064.reference.fas" "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" > "n100.r05.s064_output/n100.r05.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s064_output/n100.r05.s064.reference.fas" --call-indels "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" > "n100.r05.s064_output/n100.r05.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" > "n100.r05.s064_output/n100.r05.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s064_output/n100.r05.s064.depth.txt" "n100.r05.s064_output/n100.r05.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s064_output/n100.r05.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s064_output/n100.r05.s064.reference.fas" | bcftools consensus -m "n100.r05.s064_output/n100.r05.s064.low_depth.tsv" tmp.vcf.gz > "n100.r05.s064_output/n100.r05.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:07 scheduler task f9272175 (flow b087d69b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:07 scheduler task f9272175 (flow b087d69b): waiting for completion (try 0): started
2021/07/08 16:59:07  ->  n100.r05.s089.Main.out_file b087d69b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:07 n100.r05.s089.Main.out_file b087d69b n100/r05/n100.r05.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:25fc188dfbf7470cb53a6e2ae42b40b2fd3dc8a02035673d8d2add99ae6c6d7b
	sha256:b087d69bc583d6a3f30091cfc2099263c5fc9334192171466d859b72f70780be
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f92721753f11f0c54c354f67eb325b5abeca215f4f43147f14f81984d08d94fa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s089_output"
	    wget -O "n100.r05.s089_output/n100.r05.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s089_output/n100.r05.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s089_output/n100.r05.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s089_output/n100.r05.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s089_output/n100.r05.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s089_output/n100.r05.s089.reference.fas" "n100.r05.s089_output/n100.r05.s089.fq1.fastq" "n100.r05.s089_output/n100.r05.s089.fq2.fastq" | samtools view -bS - > "n100.r05.s089_output/n100.r05.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s089_output/n100.r05.s089.untrimmed.sorted.bam" "n100.r05.s089_output/n100.r05.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s089_output/n100.r05.s089.untrimmed.sorted.bam" -b "n100.r05.s089_output/n100.r05.s089.primers.bed" -p "n100.r05.s089_output/n100.r05.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" "n100.r05.s089_output/n100.r05.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s089_output/n100.r05.s089.reference.fas" "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" > "n100.r05.s089_output/n100.r05.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s089_output/n100.r05.s089.reference.fas" --call-indels "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" > "n100.r05.s089_output/n100.r05.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" > "n100.r05.s089_output/n100.r05.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s089_output/n100.r05.s089.depth.txt" "n100.r05.s089_output/n100.r05.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s089_output/n100.r05.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s089_output/n100.r05.s089.reference.fas" | bcftools consensus -m "n100.r05.s089_output/n100.r05.s089.low_depth.tsv" tmp.vcf.gz > "n100.r05.s089_output/n100.r05.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:07 scheduler task 95aeedb8 (flow fc144875): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:07 scheduler task 95aeedb8 (flow fc144875): waiting for completion (try 0): started
2021/07/08 16:59:07  ->  n100.r05.s023.Main.out_file fc144875 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:07 n100.r05.s023.Main.out_file fc144875 n100/r05/n100.r05.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9cb920a034db827a7740ead3d2bb95fe3bdc885c2340a8dc2081c6b4df707a40
	sha256:fc1448758f4895e5094e3734203c762aa0b9bdfbdbf263d1650b7f1f5aebf21c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95aeedb863a72c2fa54552093d5a0b8f5edbeba32078f98fc936672aeebfaba6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s023_output"
	    wget -O "n100.r05.s023_output/n100.r05.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s023_output/n100.r05.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s023_output/n100.r05.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s023_output/n100.r05.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s023_output/n100.r05.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s023_output/n100.r05.s023.reference.fas" "n100.r05.s023_output/n100.r05.s023.fq1.fastq" "n100.r05.s023_output/n100.r05.s023.fq2.fastq" | samtools view -bS - > "n100.r05.s023_output/n100.r05.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s023_output/n100.r05.s023.untrimmed.sorted.bam" "n100.r05.s023_output/n100.r05.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s023_output/n100.r05.s023.untrimmed.sorted.bam" -b "n100.r05.s023_output/n100.r05.s023.primers.bed" -p "n100.r05.s023_output/n100.r05.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" "n100.r05.s023_output/n100.r05.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s023_output/n100.r05.s023.reference.fas" "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" > "n100.r05.s023_output/n100.r05.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s023_output/n100.r05.s023.reference.fas" --call-indels "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" > "n100.r05.s023_output/n100.r05.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" > "n100.r05.s023_output/n100.r05.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s023_output/n100.r05.s023.depth.txt" "n100.r05.s023_output/n100.r05.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s023_output/n100.r05.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s023_output/n100.r05.s023.reference.fas" | bcftools consensus -m "n100.r05.s023_output/n100.r05.s023.low_depth.tsv" tmp.vcf.gz > "n100.r05.s023_output/n100.r05.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:08 scheduler task a959f1cd (flow deb5653c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:08 scheduler task a959f1cd (flow deb5653c): waiting for completion (try 0): started
2021/07/08 16:59:08  ->  n100.r05.s078.Main.out_file deb5653c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:08 n100.r05.s078.Main.out_file deb5653c n100/r05/n100.r05.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ecc2e245b5e0c4abc33fa7253c21f0c22b98cb8d53ffc582ff5437b00545b2d5
	sha256:deb5653c60581eee08f3ef322dad1920e2af825036217fc238eef0d9ac792a66
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a959f1cd58c667903ebad545e49b374e3660169d688a05de7835ae2ed3b4f422
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s078_output"
	    wget -O "n100.r05.s078_output/n100.r05.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s078_output/n100.r05.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s078_output/n100.r05.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s078_output/n100.r05.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s078_output/n100.r05.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s078_output/n100.r05.s078.reference.fas" "n100.r05.s078_output/n100.r05.s078.fq1.fastq" "n100.r05.s078_output/n100.r05.s078.fq2.fastq" | samtools view -bS - > "n100.r05.s078_output/n100.r05.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s078_output/n100.r05.s078.untrimmed.sorted.bam" "n100.r05.s078_output/n100.r05.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s078_output/n100.r05.s078.untrimmed.sorted.bam" -b "n100.r05.s078_output/n100.r05.s078.primers.bed" -p "n100.r05.s078_output/n100.r05.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" "n100.r05.s078_output/n100.r05.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s078_output/n100.r05.s078.reference.fas" "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" > "n100.r05.s078_output/n100.r05.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s078_output/n100.r05.s078.reference.fas" --call-indels "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" > "n100.r05.s078_output/n100.r05.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" > "n100.r05.s078_output/n100.r05.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s078_output/n100.r05.s078.depth.txt" "n100.r05.s078_output/n100.r05.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s078_output/n100.r05.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s078_output/n100.r05.s078.reference.fas" | bcftools consensus -m "n100.r05.s078_output/n100.r05.s078.low_depth.tsv" tmp.vcf.gz > "n100.r05.s078_output/n100.r05.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:08 scheduler task cdca394a (flow 777a4ca0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:08 scheduler task cdca394a (flow 777a4ca0): waiting for completion (try 0): started
2021/07/08 16:59:08  ->  n100.r05.s099.Main.out_file 777a4ca0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:08 n100.r05.s099.Main.out_file 777a4ca0 n100/r05/n100.r05.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ae055d0a4ab4b30891938867792f53e478f2586cc0f82260007ea5c5e79aaa4
	sha256:777a4ca06c1c8dfdcda57b0116e7b2ba6c5cfda5c23c5aad44e9adcbdf414b95
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cdca394ab6a020b96fd5781ab492712f61ad2b745edb2c0b7cb76c729558ac4a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s099_output"
	    wget -O "n100.r05.s099_output/n100.r05.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s099_output/n100.r05.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s099_output/n100.r05.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s099_output/n100.r05.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s099_output/n100.r05.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s099_output/n100.r05.s099.reference.fas" "n100.r05.s099_output/n100.r05.s099.fq1.fastq" "n100.r05.s099_output/n100.r05.s099.fq2.fastq" | samtools view -bS - > "n100.r05.s099_output/n100.r05.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s099_output/n100.r05.s099.untrimmed.sorted.bam" "n100.r05.s099_output/n100.r05.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s099_output/n100.r05.s099.untrimmed.sorted.bam" -b "n100.r05.s099_output/n100.r05.s099.primers.bed" -p "n100.r05.s099_output/n100.r05.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" "n100.r05.s099_output/n100.r05.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s099_output/n100.r05.s099.reference.fas" "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" > "n100.r05.s099_output/n100.r05.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s099_output/n100.r05.s099.reference.fas" --call-indels "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" > "n100.r05.s099_output/n100.r05.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" > "n100.r05.s099_output/n100.r05.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s099_output/n100.r05.s099.depth.txt" "n100.r05.s099_output/n100.r05.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s099_output/n100.r05.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s099_output/n100.r05.s099.reference.fas" | bcftools consensus -m "n100.r05.s099_output/n100.r05.s099.low_depth.tsv" tmp.vcf.gz > "n100.r05.s099_output/n100.r05.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:08 scheduler task b0d98539 (flow a77292d1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:08 scheduler task b0d98539 (flow a77292d1): waiting for completion (try 0): started
2021/07/08 16:59:08  ->  n100.r05.s073.Main.out_file a77292d1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:08 n100.r05.s073.Main.out_file a77292d1 n100/r05/n100.r05.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8f9844980f3e68c6f461926470385212f682ee33387bd5bac0f840036503fb22
	sha256:a77292d10d3d07cfd835121250d452cdf8bf00fdce68fd46c0faa1581f1c60a1
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b0d9853926854724caa3bb373526c761f98c7c4338f848e73d2a5591fa71e537
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s073_output"
	    wget -O "n100.r05.s073_output/n100.r05.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s073_output/n100.r05.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s073_output/n100.r05.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s073_output/n100.r05.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s073_output/n100.r05.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s073_output/n100.r05.s073.reference.fas" "n100.r05.s073_output/n100.r05.s073.fq1.fastq" "n100.r05.s073_output/n100.r05.s073.fq2.fastq" | samtools view -bS - > "n100.r05.s073_output/n100.r05.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s073_output/n100.r05.s073.untrimmed.sorted.bam" "n100.r05.s073_output/n100.r05.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s073_output/n100.r05.s073.untrimmed.sorted.bam" -b "n100.r05.s073_output/n100.r05.s073.primers.bed" -p "n100.r05.s073_output/n100.r05.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" "n100.r05.s073_output/n100.r05.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s073_output/n100.r05.s073.reference.fas" "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" > "n100.r05.s073_output/n100.r05.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s073_output/n100.r05.s073.reference.fas" --call-indels "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" > "n100.r05.s073_output/n100.r05.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" > "n100.r05.s073_output/n100.r05.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s073_output/n100.r05.s073.depth.txt" "n100.r05.s073_output/n100.r05.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s073_output/n100.r05.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s073_output/n100.r05.s073.reference.fas" | bcftools consensus -m "n100.r05.s073_output/n100.r05.s073.low_depth.tsv" tmp.vcf.gz > "n100.r05.s073_output/n100.r05.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:08 scheduler task b81e3e3f (flow 7c2051b2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:08 scheduler task b81e3e3f (flow 7c2051b2): waiting for completion (try 0): started
2021/07/08 16:59:08  ->  n100.r05.s024.Main.out_file 7c2051b2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:08 n100.r05.s024.Main.out_file 7c2051b2 n100/r05/n100.r05.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3e56d92a496766105f55055b1241241094a8849c901f1087f47ed16686453ad0
	sha256:7c2051b2ada7dca1eff87b47fd014bd15cdc237dfa8000ee39c2d22625d03d9e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b81e3e3f58e088388de2a3c6d960e82ec59c9f3b21d5cab1cc634ce53f5db5cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s024_output"
	    wget -O "n100.r05.s024_output/n100.r05.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s024_output/n100.r05.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s024_output/n100.r05.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s024_output/n100.r05.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s024_output/n100.r05.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s024_output/n100.r05.s024.reference.fas" "n100.r05.s024_output/n100.r05.s024.fq1.fastq" "n100.r05.s024_output/n100.r05.s024.fq2.fastq" | samtools view -bS - > "n100.r05.s024_output/n100.r05.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s024_output/n100.r05.s024.untrimmed.sorted.bam" "n100.r05.s024_output/n100.r05.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s024_output/n100.r05.s024.untrimmed.sorted.bam" -b "n100.r05.s024_output/n100.r05.s024.primers.bed" -p "n100.r05.s024_output/n100.r05.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" "n100.r05.s024_output/n100.r05.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s024_output/n100.r05.s024.reference.fas" "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" > "n100.r05.s024_output/n100.r05.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s024_output/n100.r05.s024.reference.fas" --call-indels "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" > "n100.r05.s024_output/n100.r05.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" > "n100.r05.s024_output/n100.r05.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s024_output/n100.r05.s024.depth.txt" "n100.r05.s024_output/n100.r05.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s024_output/n100.r05.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s024_output/n100.r05.s024.reference.fas" | bcftools consensus -m "n100.r05.s024_output/n100.r05.s024.low_depth.tsv" tmp.vcf.gz > "n100.r05.s024_output/n100.r05.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:08 scheduler task a1c84a70 (flow be90496f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:08 scheduler task a1c84a70 (flow be90496f): waiting for completion (try 0): started
2021/07/08 16:59:08  ->  n100.r05.s032.Main.out_file be90496f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:08 n100.r05.s032.Main.out_file be90496f n100/r05/n100.r05.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:098c107011afa96348c7587d6c9b325d7deae20db0cf7b0f6231a7e25195ddb8
	sha256:be90496fe48d6b9645d325b20b3bb2264288eeaa73d5c1d1eff34c4cc83af1c5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1c84a7094de9bc06e91920fee8c9ad9f67aa1eac111a42da1e0c047cd353f67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s032_output"
	    wget -O "n100.r05.s032_output/n100.r05.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s032_output/n100.r05.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s032_output/n100.r05.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s032_output/n100.r05.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s032_output/n100.r05.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s032_output/n100.r05.s032.reference.fas" "n100.r05.s032_output/n100.r05.s032.fq1.fastq" "n100.r05.s032_output/n100.r05.s032.fq2.fastq" | samtools view -bS - > "n100.r05.s032_output/n100.r05.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s032_output/n100.r05.s032.untrimmed.sorted.bam" "n100.r05.s032_output/n100.r05.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s032_output/n100.r05.s032.untrimmed.sorted.bam" -b "n100.r05.s032_output/n100.r05.s032.primers.bed" -p "n100.r05.s032_output/n100.r05.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" "n100.r05.s032_output/n100.r05.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s032_output/n100.r05.s032.reference.fas" "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" > "n100.r05.s032_output/n100.r05.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s032_output/n100.r05.s032.reference.fas" --call-indels "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" > "n100.r05.s032_output/n100.r05.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" > "n100.r05.s032_output/n100.r05.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s032_output/n100.r05.s032.depth.txt" "n100.r05.s032_output/n100.r05.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s032_output/n100.r05.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s032_output/n100.r05.s032.reference.fas" | bcftools consensus -m "n100.r05.s032_output/n100.r05.s032.low_depth.tsv" tmp.vcf.gz > "n100.r05.s032_output/n100.r05.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:08 scheduler task 65b5b36f (flow d2089de1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:08 scheduler task 65b5b36f (flow d2089de1): waiting for completion (try 0): started
2021/07/08 16:59:08  ->  n100.r05.s065.Main.out_file d2089de1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:08 n100.r05.s065.Main.out_file d2089de1 n100/r05/n100.r05.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fff58496a3815ce03d6cfdd5c6a4d3e719fb75a0ca512e7d6a57ec040c26fc0a
	sha256:d2089de1f75cd90f6000cf53c53f310d95d56db9d348dc461de8b4f817d0236b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/65b5b36fae56111839a2dfeb5251cb2a3e39232b490a1525db18068fe3e82786
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s065_output"
	    wget -O "n100.r05.s065_output/n100.r05.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s065_output/n100.r05.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s065_output/n100.r05.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s065_output/n100.r05.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s065_output/n100.r05.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s065_output/n100.r05.s065.reference.fas" "n100.r05.s065_output/n100.r05.s065.fq1.fastq" "n100.r05.s065_output/n100.r05.s065.fq2.fastq" | samtools view -bS - > "n100.r05.s065_output/n100.r05.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s065_output/n100.r05.s065.untrimmed.sorted.bam" "n100.r05.s065_output/n100.r05.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s065_output/n100.r05.s065.untrimmed.sorted.bam" -b "n100.r05.s065_output/n100.r05.s065.primers.bed" -p "n100.r05.s065_output/n100.r05.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" "n100.r05.s065_output/n100.r05.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s065_output/n100.r05.s065.reference.fas" "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" > "n100.r05.s065_output/n100.r05.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s065_output/n100.r05.s065.reference.fas" --call-indels "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" > "n100.r05.s065_output/n100.r05.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" > "n100.r05.s065_output/n100.r05.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s065_output/n100.r05.s065.depth.txt" "n100.r05.s065_output/n100.r05.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s065_output/n100.r05.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s065_output/n100.r05.s065.reference.fas" | bcftools consensus -m "n100.r05.s065_output/n100.r05.s065.low_depth.tsv" tmp.vcf.gz > "n100.r05.s065_output/n100.r05.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:09 scheduler task 25b5d38e (flow b7cf4504): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:09 scheduler task 25b5d38e (flow b7cf4504): waiting for completion (try 0): started
2021/07/08 16:59:09  ->  n100.r05.s098.Main.out_file b7cf4504 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:09 n100.r05.s098.Main.out_file b7cf4504 n100/r05/n100.r05.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b12f069235d81c85f7b9747f58991e12266abfeec73caa03f0c8ab3fda18d819
	sha256:b7cf45046d0bb31d73a81330e69754ecd7f94bb87b6a7839b3197a38639e52ac
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/25b5d38ea1a4f811c30290670e749656db7c25afe0fa6044cbfabcd6769241df
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s098_output"
	    wget -O "n100.r05.s098_output/n100.r05.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s098_output/n100.r05.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s098_output/n100.r05.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s098_output/n100.r05.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s098_output/n100.r05.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s098_output/n100.r05.s098.reference.fas" "n100.r05.s098_output/n100.r05.s098.fq1.fastq" "n100.r05.s098_output/n100.r05.s098.fq2.fastq" | samtools view -bS - > "n100.r05.s098_output/n100.r05.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s098_output/n100.r05.s098.untrimmed.sorted.bam" "n100.r05.s098_output/n100.r05.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s098_output/n100.r05.s098.untrimmed.sorted.bam" -b "n100.r05.s098_output/n100.r05.s098.primers.bed" -p "n100.r05.s098_output/n100.r05.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" "n100.r05.s098_output/n100.r05.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s098_output/n100.r05.s098.reference.fas" "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" > "n100.r05.s098_output/n100.r05.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s098_output/n100.r05.s098.reference.fas" --call-indels "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" > "n100.r05.s098_output/n100.r05.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" > "n100.r05.s098_output/n100.r05.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s098_output/n100.r05.s098.depth.txt" "n100.r05.s098_output/n100.r05.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s098_output/n100.r05.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s098_output/n100.r05.s098.reference.fas" | bcftools consensus -m "n100.r05.s098_output/n100.r05.s098.low_depth.tsv" tmp.vcf.gz > "n100.r05.s098_output/n100.r05.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:09 scheduler task 9cf7175b (flow 03bf8a77): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:09 scheduler task 9cf7175b (flow 03bf8a77): waiting for completion (try 0): started
2021/07/08 16:59:09  ->  n100.r05.s050.Main.out_file 03bf8a77 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:09 n100.r05.s050.Main.out_file 03bf8a77 n100/r05/n100.r05.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:66bb1f30319af0efb4474bab9296adfef72c85eab16629e07b828e15485373dd
	sha256:03bf8a779d1ca9e17b77a9aba85ab92bd6b7d4a70d36f1a611aa531adddc9cfe
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9cf7175bca2ea1b2d6c5f15749337f3b7729061776c0d83ef4a3d2cc90a7041c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s050_output"
	    wget -O "n100.r05.s050_output/n100.r05.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s050_output/n100.r05.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s050_output/n100.r05.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s050_output/n100.r05.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s050_output/n100.r05.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s050_output/n100.r05.s050.reference.fas" "n100.r05.s050_output/n100.r05.s050.fq1.fastq" "n100.r05.s050_output/n100.r05.s050.fq2.fastq" | samtools view -bS - > "n100.r05.s050_output/n100.r05.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s050_output/n100.r05.s050.untrimmed.sorted.bam" "n100.r05.s050_output/n100.r05.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s050_output/n100.r05.s050.untrimmed.sorted.bam" -b "n100.r05.s050_output/n100.r05.s050.primers.bed" -p "n100.r05.s050_output/n100.r05.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" "n100.r05.s050_output/n100.r05.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s050_output/n100.r05.s050.reference.fas" "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" > "n100.r05.s050_output/n100.r05.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s050_output/n100.r05.s050.reference.fas" --call-indels "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" > "n100.r05.s050_output/n100.r05.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" > "n100.r05.s050_output/n100.r05.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s050_output/n100.r05.s050.depth.txt" "n100.r05.s050_output/n100.r05.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s050_output/n100.r05.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s050_output/n100.r05.s050.reference.fas" | bcftools consensus -m "n100.r05.s050_output/n100.r05.s050.low_depth.tsv" tmp.vcf.gz > "n100.r05.s050_output/n100.r05.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:09 scheduler task 4ac811a5 (flow 62342884): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:09 scheduler task 4ac811a5 (flow 62342884): waiting for completion (try 0): started
2021/07/08 16:59:09  ->  n100.r05.s083.Main.out_file 62342884 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:09 n100.r05.s083.Main.out_file 62342884 n100/r05/n100.r05.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0fc834dea0eb7dda4ceb162e0a69d162f87358e64dff5ca658c695a9e450444c
	sha256:623428841fb06e5a97c86e8e422e207e34d0a93ee642ac318a6956c4eb889036
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ac811a57fba2326d4e29f20dd30ff944542826a13bc9946f9366abc3a24b5b2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s083_output"
	    wget -O "n100.r05.s083_output/n100.r05.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s083_output/n100.r05.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s083_output/n100.r05.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s083_output/n100.r05.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s083_output/n100.r05.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s083_output/n100.r05.s083.reference.fas" "n100.r05.s083_output/n100.r05.s083.fq1.fastq" "n100.r05.s083_output/n100.r05.s083.fq2.fastq" | samtools view -bS - > "n100.r05.s083_output/n100.r05.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s083_output/n100.r05.s083.untrimmed.sorted.bam" "n100.r05.s083_output/n100.r05.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s083_output/n100.r05.s083.untrimmed.sorted.bam" -b "n100.r05.s083_output/n100.r05.s083.primers.bed" -p "n100.r05.s083_output/n100.r05.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" "n100.r05.s083_output/n100.r05.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s083_output/n100.r05.s083.reference.fas" "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" > "n100.r05.s083_output/n100.r05.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s083_output/n100.r05.s083.reference.fas" --call-indels "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" > "n100.r05.s083_output/n100.r05.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" > "n100.r05.s083_output/n100.r05.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s083_output/n100.r05.s083.depth.txt" "n100.r05.s083_output/n100.r05.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s083_output/n100.r05.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s083_output/n100.r05.s083.reference.fas" | bcftools consensus -m "n100.r05.s083_output/n100.r05.s083.low_depth.tsv" tmp.vcf.gz > "n100.r05.s083_output/n100.r05.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:59:09 scheduler task c24bee6e (flow 877da018): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:59:09 scheduler task c24bee6e (flow 877da018): waiting for completion (try 0): started
2021/07/08 16:59:09  ->  n100.r05.s084.Main.out_file 877da018 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:59:09 n100.r05.s084.Main.out_file 877da018 n100/r05/n100.r05.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f57294c8e832f64a2288571e7b57bd5a4c8d1bc368bcbaa11c86e406a5935986
	sha256:877da01828d3e9c9f32648e66e19890075a40de3150da12c65edbfc6653742d3
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c24bee6edbfca5b6fb81fba51ffeeed5dd55ba908d88e0d86d60722eebdc5692
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s084_output"
	    wget -O "n100.r05.s084_output/n100.r05.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s084_output/n100.r05.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s084_output/n100.r05.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s084_output/n100.r05.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s084_output/n100.r05.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s084_output/n100.r05.s084.reference.fas" "n100.r05.s084_output/n100.r05.s084.fq1.fastq" "n100.r05.s084_output/n100.r05.s084.fq2.fastq" | samtools view -bS - > "n100.r05.s084_output/n100.r05.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s084_output/n100.r05.s084.untrimmed.sorted.bam" "n100.r05.s084_output/n100.r05.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s084_output/n100.r05.s084.untrimmed.sorted.bam" -b "n100.r05.s084_output/n100.r05.s084.primers.bed" -p "n100.r05.s084_output/n100.r05.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" "n100.r05.s084_output/n100.r05.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s084_output/n100.r05.s084.reference.fas" "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" > "n100.r05.s084_output/n100.r05.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s084_output/n100.r05.s084.reference.fas" --call-indels "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" > "n100.r05.s084_output/n100.r05.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" > "n100.r05.s084_output/n100.r05.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s084_output/n100.r05.s084.depth.txt" "n100.r05.s084_output/n100.r05.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s084_output/n100.r05.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s084_output/n100.r05.s084.reference.fas" | bcftools consensus -m "n100.r05.s084_output/n100.r05.s084.low_depth.tsv" tmp.vcf.gz > "n100.r05.s084_output/n100.r05.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): promoting objects (try 0): started
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): retrieving diagnostic output (try 0): started
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): retrieving result (try 0): started
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:03:09 scheduler task 799a03d8 (flow 052c42b8): transferring output (try 0): started
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): promoting objects (try 0): started
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): retrieving diagnostic output (try 0): started
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): promoting objects (try 0): started
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): retrieving diagnostic output (try 0): started
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloading (try 0): started
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloading list<val<.=28abd702 35.7MiB> 35.7MiB>
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloading val<.=d2d12b0f 35.4MiB>
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloading val<.=9e0bc1ae 35.4MiB>
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): promoting objects (try 0): started
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): retrieving result (try 0): started
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloaded val<.=9e0bc1ae 35.4MiB>
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloaded val<.=d2d12b0f 35.4MiB>
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloaded list<val<.=28abd702 35.7MiB> 35.7MiB>
2021/07/08 17:03:10 scheduler task 799a03d8 (flow 052c42b8): unloading (try 0): successful, next state: complete
2021/07/08 17:03:10  <-  n100.r05.s085.Main.out_file 052c42b8 ok     exec 3m57s 35.7MiB
2021/07/08 17:03:10 n100.r05.s085.Main.out_file 052c42b8 n100/r05/n100.r05.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:72f1a381b34f7b4470a30e19f7f4bad3fa0b1d7034ea48394cbfcbfe704e9072
	sha256:052c42b8ec0d48f63ba9b08859e5624114ff6433f491f60943727161dc3f9024
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/799a03d81602e6116da1f0cf0c2e41ef17576fa9c81baf28efd54c5cac39a7e3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s085_output"
	    wget -O "n100.r05.s085_output/n100.r05.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s085_output/n100.r05.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s085_output/n100.r05.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s085_output/n100.r05.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s085_output/n100.r05.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s085_output/n100.r05.s085.reference.fas" "n100.r05.s085_output/n100.r05.s085.fq1.fastq" "n100.r05.s085_output/n100.r05.s085.fq2.fastq" | samtools view -bS - > "n100.r05.s085_output/n100.r05.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s085_output/n100.r05.s085.untrimmed.sorted.bam" "n100.r05.s085_output/n100.r05.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s085_output/n100.r05.s085.untrimmed.sorted.bam" -b "n100.r05.s085_output/n100.r05.s085.primers.bed" -p "n100.r05.s085_output/n100.r05.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" "n100.r05.s085_output/n100.r05.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s085_output/n100.r05.s085.reference.fas" "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" > "n100.r05.s085_output/n100.r05.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s085_output/n100.r05.s085.reference.fas" --call-indels "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" > "n100.r05.s085_output/n100.r05.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s085_output/n100.r05.s085.trimmed.sorted.bam" > "n100.r05.s085_output/n100.r05.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s085_output/n100.r05.s085.depth.txt" "n100.r05.s085_output/n100.r05.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s085_output/n100.r05.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s085_output/n100.r05.s085.reference.fas" | bcftools consensus -m "n100.r05.s085_output/n100.r05.s085.low_depth.tsv" tmp.vcf.gz > "n100.r05.s085_output/n100.r05.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:28abd702d97596610f8fc3440b86109828b87ebcef20defdcf9372d026e89375 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.1MiB max=124.6MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:03:10 scheduler task 11774853 (flow 24bd94f7): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s085.tar.gz resources {}
2021/07/08 17:03:10  ->  n100.r05.s085.Main.cp_out_file 24bd94f7 exec extern s3://niema-test/n100/r05/n100.r05.s085.tar.gz 35.7MiB
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): retrieving diagnostic output (try 0): started
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): retrieving result (try 0): started
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:03:10 scheduler task cfc12c81 (flow c0fd3b1c): transferring output (try 0): started
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:03:10 scheduler task 18737f1d (flow d748bfdf): transferring output (try 0): started
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): retrieving result (try 0): started
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:03:10 scheduler task a5f81a19 (flow 1e808086): transferring output (try 0): started
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloading (try 0): started
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloading list<val<.=474cc708 35.7MiB> 35.7MiB>
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloading val<.=127f0699 35.4MiB>
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloading val<.=c1247564 35.4MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): transferring output (try 0): successful, next state: unloading
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloading (try 0): started
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloading list<val<.=f8e7ac21 35.7MiB> 35.7MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloading val<.=0e897996 35.4MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloading val<.=bd4b9994 35.4MiB>
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloaded list<val<.=474cc708 35.7MiB> 35.7MiB>
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloaded val<.=127f0699 35.4MiB>
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloaded val<.=c1247564 35.4MiB>
2021/07/08 17:03:11 scheduler task cfc12c81 (flow c0fd3b1c): unloading (try 0): successful, next state: complete
2021/07/08 17:03:11  <-  n100.r05.s087.Main.out_file c0fd3b1c ok     exec 3m58s 35.7MiB
2021/07/08 17:03:11 n100.r05.s087.Main.out_file c0fd3b1c n100/r05/n100.r05.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:997efb813f5bed1b4cd98c8e39f298c3786b5c5a597e21a2ee268d7d745a2096
	sha256:c0fd3b1c3ff88ab84fc8c742bb9ee2b6073160151975549b0c4f07bb26295fe3
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cfc12c8174c8d6ae19f9e233c0fa3a978704a8863bf8703d7c008f040f0d1302
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s087_output"
	    wget -O "n100.r05.s087_output/n100.r05.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s087_output/n100.r05.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s087_output/n100.r05.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s087_output/n100.r05.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s087_output/n100.r05.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s087_output/n100.r05.s087.reference.fas" "n100.r05.s087_output/n100.r05.s087.fq1.fastq" "n100.r05.s087_output/n100.r05.s087.fq2.fastq" | samtools view -bS - > "n100.r05.s087_output/n100.r05.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s087_output/n100.r05.s087.untrimmed.sorted.bam" "n100.r05.s087_output/n100.r05.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s087_output/n100.r05.s087.untrimmed.sorted.bam" -b "n100.r05.s087_output/n100.r05.s087.primers.bed" -p "n100.r05.s087_output/n100.r05.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" "n100.r05.s087_output/n100.r05.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s087_output/n100.r05.s087.reference.fas" "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" > "n100.r05.s087_output/n100.r05.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s087_output/n100.r05.s087.reference.fas" --call-indels "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" > "n100.r05.s087_output/n100.r05.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s087_output/n100.r05.s087.trimmed.sorted.bam" > "n100.r05.s087_output/n100.r05.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s087_output/n100.r05.s087.depth.txt" "n100.r05.s087_output/n100.r05.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s087_output/n100.r05.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s087_output/n100.r05.s087.reference.fas" | bcftools consensus -m "n100.r05.s087_output/n100.r05.s087.low_depth.tsv" tmp.vcf.gz > "n100.r05.s087_output/n100.r05.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:474cc7084aa2f28d09e52fe228fd961e5a70cc45f500d892d9b112d0ba61664e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=126.2MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:03:11 scheduler task 610c9db9 (flow 607c888e): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s087.tar.gz resources {}
2021/07/08 17:03:11  ->  n100.r05.s087.Main.cp_out_file 607c888e exec extern s3://niema-test/n100/r05/n100.r05.s087.tar.gz 35.7MiB
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): transferring output (try 0): successful, next state: unloading
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloading (try 0): started
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloading list<val<.=b0c6bff9 35.7MiB> 35.7MiB>
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloading val<.=1b2e0b27 35.4MiB>
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloading val<.=e5a4fde8 35.4MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloaded val<.=0e897996 35.4MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloaded val<.=bd4b9994 35.4MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloaded list<val<.=f8e7ac21 35.7MiB> 35.7MiB>
2021/07/08 17:03:11 scheduler task 18737f1d (flow d748bfdf): unloading (try 0): successful, next state: complete
2021/07/08 17:03:11  <-  n100.r05.s016.Main.out_file d748bfdf ok     exec 3m58s 35.7MiB
2021/07/08 17:03:11 n100.r05.s016.Main.out_file d748bfdf n100/r05/n100.r05.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f296431bd1168d32a3c693d1c6c46327e189c07ae29aa43ebb9e1d8b092fb704
	sha256:d748bfdf808107b8196b8822d7de64db26a2c7b7fdf9a9e3c31923091a9f9e8b
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/18737f1d1e2212974ec7dd74a76260f5be54907ed552ee3e7b04bdceeb0662a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s016_output"
	    wget -O "n100.r05.s016_output/n100.r05.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s016_output/n100.r05.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s016_output/n100.r05.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s016_output/n100.r05.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s016_output/n100.r05.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s016_output/n100.r05.s016.reference.fas" "n100.r05.s016_output/n100.r05.s016.fq1.fastq" "n100.r05.s016_output/n100.r05.s016.fq2.fastq" | samtools view -bS - > "n100.r05.s016_output/n100.r05.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s016_output/n100.r05.s016.untrimmed.sorted.bam" "n100.r05.s016_output/n100.r05.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s016_output/n100.r05.s016.untrimmed.sorted.bam" -b "n100.r05.s016_output/n100.r05.s016.primers.bed" -p "n100.r05.s016_output/n100.r05.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" "n100.r05.s016_output/n100.r05.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s016_output/n100.r05.s016.reference.fas" "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" > "n100.r05.s016_output/n100.r05.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s016_output/n100.r05.s016.reference.fas" --call-indels "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" > "n100.r05.s016_output/n100.r05.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s016_output/n100.r05.s016.trimmed.sorted.bam" > "n100.r05.s016_output/n100.r05.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s016_output/n100.r05.s016.depth.txt" "n100.r05.s016_output/n100.r05.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s016_output/n100.r05.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s016_output/n100.r05.s016.reference.fas" | bcftools consensus -m "n100.r05.s016_output/n100.r05.s016.low_depth.tsv" tmp.vcf.gz > "n100.r05.s016_output/n100.r05.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f8e7ac217dca652692af8cf3e5f3ee8339f08b4f1505a7bfbc444d2e7da644c1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.2MiB max=124.2MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:03:11 scheduler task 48e2c12b (flow 2b4e657a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s016.tar.gz resources {}
2021/07/08 17:03:11  ->  n100.r05.s016.Main.cp_out_file 2b4e657a exec extern s3://niema-test/n100/r05/n100.r05.s016.tar.gz 35.7MiB
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloaded val<.=1b2e0b27 35.4MiB>
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloaded list<val<.=b0c6bff9 35.7MiB> 35.7MiB>
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloaded val<.=e5a4fde8 35.4MiB>
2021/07/08 17:03:11 scheduler task a5f81a19 (flow 1e808086): unloading (try 0): successful, next state: complete
2021/07/08 17:03:11  <-  n100.r05.s008.Main.out_file 1e808086 ok     exec 3m59s 35.7MiB
2021/07/08 17:03:11 n100.r05.s008.Main.out_file 1e808086 n100/r05/n100.r05.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:207f1272046c2e0a73361cf7cce87cd2432286021a0f015d34ac65b5554896b3
	sha256:1e80808615e4d63cf242de776127fb9710345c1ca04eb18f16bfed09c1f6cbb1
	ec2-3-133-123-195.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a5f81a19691057392fb60b61d43bbe5550671cd50fdb9708e695c8ef2731abba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s008_output"
	    wget -O "n100.r05.s008_output/n100.r05.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s008_output/n100.r05.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s008_output/n100.r05.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s008_output/n100.r05.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s008_output/n100.r05.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s008_output/n100.r05.s008.reference.fas" "n100.r05.s008_output/n100.r05.s008.fq1.fastq" "n100.r05.s008_output/n100.r05.s008.fq2.fastq" | samtools view -bS - > "n100.r05.s008_output/n100.r05.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s008_output/n100.r05.s008.untrimmed.sorted.bam" "n100.r05.s008_output/n100.r05.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s008_output/n100.r05.s008.untrimmed.sorted.bam" -b "n100.r05.s008_output/n100.r05.s008.primers.bed" -p "n100.r05.s008_output/n100.r05.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" "n100.r05.s008_output/n100.r05.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s008_output/n100.r05.s008.reference.fas" "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" > "n100.r05.s008_output/n100.r05.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s008_output/n100.r05.s008.reference.fas" --call-indels "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" > "n100.r05.s008_output/n100.r05.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s008_output/n100.r05.s008.trimmed.sorted.bam" > "n100.r05.s008_output/n100.r05.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s008_output/n100.r05.s008.depth.txt" "n100.r05.s008_output/n100.r05.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s008_output/n100.r05.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s008_output/n100.r05.s008.reference.fas" | bcftools consensus -m "n100.r05.s008_output/n100.r05.s008.low_depth.tsv" tmp.vcf.gz > "n100.r05.s008_output/n100.r05.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b0c6bff937804c1cd2146e891b80c6171f5b891d607c40f6929fbab4c80d6a21 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.2MiB max=124.6MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:03:11 scheduler task 4ea77b33 (flow 7915a1f3): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s008.tar.gz resources {}
2021/07/08 17:03:11  ->  n100.r05.s008.Main.cp_out_file 7915a1f3 exec extern s3://niema-test/n100/r05/n100.r05.s008.tar.gz 35.7MiB
2021/07/08 17:03:11 scheduler task 11774853 (flow 24bd94f7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:28abd702d97596610f8fc3440b86109828b87ebcef20defdcf9372d026e89375 -> s3://niema-test/n100/r05/n100.r05.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:03:11  <-  n100.r05.s085.Main.cp_out_file 24bd94f7 ok   extern 0s 35.7MiB
2021/07/08 17:03:12 scheduler task 4ea77b33 (flow 7915a1f3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b0c6bff937804c1cd2146e891b80c6171f5b891d607c40f6929fbab4c80d6a21 -> s3://niema-test/n100/r05/n100.r05.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:03:12  <-  n100.r05.s008.Main.cp_out_file 7915a1f3 ok   extern 0s 35.7MiB
2021/07/08 17:03:12 scheduler task 48e2c12b (flow 2b4e657a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f8e7ac217dca652692af8cf3e5f3ee8339f08b4f1505a7bfbc444d2e7da644c1 -> s3://niema-test/n100/r05/n100.r05.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:03:12  <-  n100.r05.s016.Main.cp_out_file 2b4e657a ok   extern 0s 35.7MiB
2021/07/08 17:03:12 scheduler task 610c9db9 (flow 607c888e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:474cc7084aa2f28d09e52fe228fd961e5a70cc45f500d892d9b112d0ba61664e -> s3://niema-test/n100/r05/n100.r05.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:03:12  <-  n100.r05.s087.Main.cp_out_file 607c888e ok   extern 0s 35.7MiB
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): promoting objects (try 0): started
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): retrieving diagnostic output (try 0): started
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): retrieving result (try 0): started
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:03:55 scheduler task d41d72e6 (flow 821aa882): transferring output (try 0): started
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): promoting objects (try 0): started
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): retrieving diagnostic output (try 0): started
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): retrieving result (try 0): started
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:00 scheduler task aac314ef (flow 1a055586): transferring output (try 0): started
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloading (try 0): started
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloading list<val<.=5930f40e 35.8MiB> 35.8MiB>
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloading val<.=bc8f6fbe 35.4MiB>
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloading val<.=431c7c97 35.4MiB>
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloading (try 0): started
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloading list<val<.=5e6fe0a6 35.7MiB> 35.7MiB>
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloading val<.=5d7ee728 35.4MiB>
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloading val<.=6a91154b 35.4MiB>
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloaded val<.=431c7c97 35.4MiB>
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloaded list<val<.=5930f40e 35.8MiB> 35.8MiB>
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloaded val<.=bc8f6fbe 35.4MiB>
2021/07/08 17:04:01 scheduler task aac314ef (flow 1a055586): unloading (try 0): successful, next state: complete
2021/07/08 17:04:01  <-  n100.r05.s013.Main.out_file 1a055586 ok     exec 4m51s 35.8MiB
2021/07/08 17:04:01 n100.r05.s013.Main.out_file 1a055586 n100/r05/n100.r05.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3ab728fb87ebd3599afde07a6adf83d9deceeaa96f32d56ca93800a68db92a11
	sha256:1a0555864a40611543da89d1a649ea3e3fbabdc9499bc88ee273244f018c59be
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aac314ef953a48cdd715e50bb57163c1aa6dbb12a7bbacd2ce43b25239fdb88d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s013_output"
	    wget -O "n100.r05.s013_output/n100.r05.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s013_output/n100.r05.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s013_output/n100.r05.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s013_output/n100.r05.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s013_output/n100.r05.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s013_output/n100.r05.s013.reference.fas" "n100.r05.s013_output/n100.r05.s013.fq1.fastq" "n100.r05.s013_output/n100.r05.s013.fq2.fastq" | samtools view -bS - > "n100.r05.s013_output/n100.r05.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s013_output/n100.r05.s013.untrimmed.sorted.bam" "n100.r05.s013_output/n100.r05.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s013_output/n100.r05.s013.untrimmed.sorted.bam" -b "n100.r05.s013_output/n100.r05.s013.primers.bed" -p "n100.r05.s013_output/n100.r05.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" "n100.r05.s013_output/n100.r05.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s013_output/n100.r05.s013.reference.fas" "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" > "n100.r05.s013_output/n100.r05.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s013_output/n100.r05.s013.reference.fas" --call-indels "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" > "n100.r05.s013_output/n100.r05.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s013_output/n100.r05.s013.trimmed.sorted.bam" > "n100.r05.s013_output/n100.r05.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s013_output/n100.r05.s013.depth.txt" "n100.r05.s013_output/n100.r05.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s013_output/n100.r05.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s013_output/n100.r05.s013.reference.fas" | bcftools consensus -m "n100.r05.s013_output/n100.r05.s013.low_depth.tsv" tmp.vcf.gz > "n100.r05.s013_output/n100.r05.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5930f40e850616cd02262111ddf5ee2a1ee86807c13eefcf5f05ec75a7943fa9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=127.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:04:01 scheduler task 27aba5d9 (flow a477db55): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s013.tar.gz resources {}
2021/07/08 17:04:01  ->  n100.r05.s013.Main.cp_out_file a477db55 exec extern s3://niema-test/n100/r05/n100.r05.s013.tar.gz 35.8MiB
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloaded val<.=6a91154b 35.4MiB>
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloaded list<val<.=5e6fe0a6 35.7MiB> 35.7MiB>
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloaded val<.=5d7ee728 35.4MiB>
2021/07/08 17:04:01 scheduler task d41d72e6 (flow 821aa882): unloading (try 0): successful, next state: complete
2021/07/08 17:04:01  <-  n100.r05.s041.Main.out_file 821aa882 ok     exec 4m45s 35.7MiB
2021/07/08 17:04:01 n100.r05.s041.Main.out_file 821aa882 n100/r05/n100.r05.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e8a38c88a780bd9cbe9011e11e6d18f2494db1f8f5ba56f6f7006bb1abffdb6
	sha256:821aa8820037298a84a46901e1bacd6043c431e438f8daff233adef04c54604a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d41d72e679bb930957f6212b0611c69d942556b442c9960013c77b3552bc97be
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s041_output"
	    wget -O "n100.r05.s041_output/n100.r05.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s041_output/n100.r05.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s041_output/n100.r05.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s041_output/n100.r05.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s041_output/n100.r05.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s041_output/n100.r05.s041.reference.fas" "n100.r05.s041_output/n100.r05.s041.fq1.fastq" "n100.r05.s041_output/n100.r05.s041.fq2.fastq" | samtools view -bS - > "n100.r05.s041_output/n100.r05.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s041_output/n100.r05.s041.untrimmed.sorted.bam" "n100.r05.s041_output/n100.r05.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s041_output/n100.r05.s041.untrimmed.sorted.bam" -b "n100.r05.s041_output/n100.r05.s041.primers.bed" -p "n100.r05.s041_output/n100.r05.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" "n100.r05.s041_output/n100.r05.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s041_output/n100.r05.s041.reference.fas" "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" > "n100.r05.s041_output/n100.r05.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s041_output/n100.r05.s041.reference.fas" --call-indels "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" > "n100.r05.s041_output/n100.r05.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s041_output/n100.r05.s041.trimmed.sorted.bam" > "n100.r05.s041_output/n100.r05.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s041_output/n100.r05.s041.depth.txt" "n100.r05.s041_output/n100.r05.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s041_output/n100.r05.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s041_output/n100.r05.s041.reference.fas" | bcftools consensus -m "n100.r05.s041_output/n100.r05.s041.low_depth.tsv" tmp.vcf.gz > "n100.r05.s041_output/n100.r05.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5e6fe0a67acae17bbaa83af420f81945df3f85dcdaced8f802fa4a01654c75bb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=125.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:04:01 scheduler task 71160d35 (flow e28f0c74): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s041.tar.gz resources {}
2021/07/08 17:04:01  ->  n100.r05.s041.Main.cp_out_file e28f0c74 exec extern s3://niema-test/n100/r05/n100.r05.s041.tar.gz 35.7MiB
2021/07/08 17:04:02 scheduler task 27aba5d9 (flow a477db55): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5930f40e850616cd02262111ddf5ee2a1ee86807c13eefcf5f05ec75a7943fa9 -> s3://niema-test/n100/r05/n100.r05.s013.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:02  <-  n100.r05.s013.Main.cp_out_file a477db55 ok   extern 0s 35.8MiB
2021/07/08 17:04:03 scheduler task 71160d35 (flow e28f0c74): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5e6fe0a67acae17bbaa83af420f81945df3f85dcdaced8f802fa4a01654c75bb -> s3://niema-test/n100/r05/n100.r05.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:03  <-  n100.r05.s041.Main.cp_out_file e28f0c74 ok   extern 0s 35.7MiB
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): promoting objects (try 0): started
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): promoting objects (try 0): started
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): retrieving diagnostic output (try 0): started
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): retrieving diagnostic output (try 0): started
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): retrieving result (try 0): started
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): promoting objects (try 0): started
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): retrieving result (try 0): started
2021/07/08 17:04:03 scheduler task 5cf5576b (flow 0ff39579): transferring output (try 0): started
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): retrieving diagnostic output (try 0): started
2021/07/08 17:04:03 scheduler task 8438db44 (flow 8f98d048): transferring output (try 0): started
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): retrieving result (try 0): started
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:03 scheduler task 3b4791e9 (flow e7ffbcd4): transferring output (try 0): started
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloading (try 0): started
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloading list<val<.=c68a2819 35.7MiB> 35.7MiB>
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloading val<.=eca12f60 35.4MiB>
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloading val<.=5c69e070 35.4MiB>
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): promoting objects (try 0): started
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloading (try 0): started
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloading list<val<.=2bd7073b 35.7MiB> 35.7MiB>
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloading val<.=77d6c9da 35.4MiB>
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloading val<.=5e9b1a5a 35.4MiB>
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloaded list<val<.=c68a2819 35.7MiB> 35.7MiB>
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloaded val<.=5c69e070 35.4MiB>
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloaded val<.=eca12f60 35.4MiB>
2021/07/08 17:04:04 scheduler task 5cf5576b (flow 0ff39579): unloading (try 0): successful, next state: complete
2021/07/08 17:04:04  <-  n100.r05.s040.Main.out_file 0ff39579 ok     exec 4m54s 35.7MiB
2021/07/08 17:04:04 n100.r05.s040.Main.out_file 0ff39579 n100/r05/n100.r05.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fafefb422c91d8d0cbc934e01e916974700ec0207c00fe0443780bfb306e0058
	sha256:0ff39579fbfe30e36f5f344a31c612b573042d0d22ba6d796b1c91581241a72e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5cf5576bdc62c727d4f952a3a77e81b0c80363add443ff83268e98a700e0c4a4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s040_output"
	    wget -O "n100.r05.s040_output/n100.r05.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s040_output/n100.r05.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s040_output/n100.r05.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s040_output/n100.r05.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s040_output/n100.r05.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s040_output/n100.r05.s040.reference.fas" "n100.r05.s040_output/n100.r05.s040.fq1.fastq" "n100.r05.s040_output/n100.r05.s040.fq2.fastq" | samtools view -bS - > "n100.r05.s040_output/n100.r05.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s040_output/n100.r05.s040.untrimmed.sorted.bam" "n100.r05.s040_output/n100.r05.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s040_output/n100.r05.s040.untrimmed.sorted.bam" -b "n100.r05.s040_output/n100.r05.s040.primers.bed" -p "n100.r05.s040_output/n100.r05.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" "n100.r05.s040_output/n100.r05.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s040_output/n100.r05.s040.reference.fas" "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" > "n100.r05.s040_output/n100.r05.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s040_output/n100.r05.s040.reference.fas" --call-indels "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" > "n100.r05.s040_output/n100.r05.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s040_output/n100.r05.s040.trimmed.sorted.bam" > "n100.r05.s040_output/n100.r05.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s040_output/n100.r05.s040.depth.txt" "n100.r05.s040_output/n100.r05.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s040_output/n100.r05.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s040_output/n100.r05.s040.reference.fas" | bcftools consensus -m "n100.r05.s040_output/n100.r05.s040.low_depth.tsv" tmp.vcf.gz > "n100.r05.s040_output/n100.r05.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c68a281986a5e3d1eff2f1a9c91b5bde2e736364cc3adfa15da6a9c7bb99c449 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:04:04 scheduler task 91660c81 (flow a647d63f): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s040.tar.gz resources {}
2021/07/08 17:04:04  ->  n100.r05.s040.Main.cp_out_file a647d63f exec extern s3://niema-test/n100/r05/n100.r05.s040.tar.gz 35.7MiB
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloaded list<val<.=2bd7073b 35.7MiB> 35.7MiB>
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloaded val<.=77d6c9da 35.4MiB>
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloaded val<.=5e9b1a5a 35.4MiB>
2021/07/08 17:04:04 scheduler task 8438db44 (flow 8f98d048): unloading (try 0): successful, next state: complete
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): retrieving diagnostic output (try 0): started
2021/07/08 17:04:04  <-  n100.r05.s054.Main.out_file 8f98d048 ok     exec 4m54s 35.7MiB
2021/07/08 17:04:04 n100.r05.s054.Main.out_file 8f98d048 n100/r05/n100.r05.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:572e2fd6f746e051e33685e54f82f370d7b4b966211b7cf7ca018c32c272bdd3
	sha256:8f98d04822a829cf78be6584b39572d76bf8f421e7d1842798c68268192bf4ab
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8438db44ce4df86966442babd99467912b296932903b81732d4fa99b1919b382
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s054_output"
	    wget -O "n100.r05.s054_output/n100.r05.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s054_output/n100.r05.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s054_output/n100.r05.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s054_output/n100.r05.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s054_output/n100.r05.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s054_output/n100.r05.s054.reference.fas" "n100.r05.s054_output/n100.r05.s054.fq1.fastq" "n100.r05.s054_output/n100.r05.s054.fq2.fastq" | samtools view -bS - > "n100.r05.s054_output/n100.r05.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s054_output/n100.r05.s054.untrimmed.sorted.bam" "n100.r05.s054_output/n100.r05.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s054_output/n100.r05.s054.untrimmed.sorted.bam" -b "n100.r05.s054_output/n100.r05.s054.primers.bed" -p "n100.r05.s054_output/n100.r05.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" "n100.r05.s054_output/n100.r05.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s054_output/n100.r05.s054.reference.fas" "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" > "n100.r05.s054_output/n100.r05.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s054_output/n100.r05.s054.reference.fas" --call-indels "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" > "n100.r05.s054_output/n100.r05.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s054_output/n100.r05.s054.trimmed.sorted.bam" > "n100.r05.s054_output/n100.r05.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s054_output/n100.r05.s054.depth.txt" "n100.r05.s054_output/n100.r05.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s054_output/n100.r05.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s054_output/n100.r05.s054.reference.fas" | bcftools consensus -m "n100.r05.s054_output/n100.r05.s054.low_depth.tsv" tmp.vcf.gz > "n100.r05.s054_output/n100.r05.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2bd7073b16296bfeab8dfd396923963c82ddc3488f50876741a17eb1b3b8fad6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 17:04:04 scheduler task a0665b77 (flow afd2aca7): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s054.tar.gz resources {}
2021/07/08 17:04:04  ->  n100.r05.s054.Main.cp_out_file afd2aca7 exec extern s3://niema-test/n100/r05/n100.r05.s054.tar.gz 35.7MiB
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): retrieving result (try 0): started
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloading (try 0): started
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloading list<val<.=d69e431b 35.7MiB> 35.7MiB>
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloading val<.=49a114c0 35.4MiB>
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloading val<.=2e0e8059 35.4MiB>
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:04 scheduler task 67f515d1 (flow 55fa0156): transferring output (try 0): started
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloaded val<.=2e0e8059 35.4MiB>
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloaded list<val<.=d69e431b 35.7MiB> 35.7MiB>
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloaded val<.=49a114c0 35.4MiB>
2021/07/08 17:04:04 scheduler task 3b4791e9 (flow e7ffbcd4): unloading (try 0): successful, next state: complete
2021/07/08 17:04:04  <-  n100.r05.s021.Main.out_file e7ffbcd4 ok     exec 4m53s 35.7MiB
2021/07/08 17:04:04 n100.r05.s021.Main.out_file e7ffbcd4 n100/r05/n100.r05.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b283a7ba88e15d6d2b36580ea3f6795b77c0d16ae7ec26efc92e7f1abea75fc7
	sha256:e7ffbcd4c61e911457b4af73790bc77726d1c01464da4b8cedd1c22e4543d29c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3b4791e9183455e0361d40a008b6f783bb132c0e5cdd4e26bb54c0a7091c25d4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s021_output"
	    wget -O "n100.r05.s021_output/n100.r05.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s021_output/n100.r05.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s021_output/n100.r05.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s021_output/n100.r05.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s021_output/n100.r05.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s021_output/n100.r05.s021.reference.fas" "n100.r05.s021_output/n100.r05.s021.fq1.fastq" "n100.r05.s021_output/n100.r05.s021.fq2.fastq" | samtools view -bS - > "n100.r05.s021_output/n100.r05.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s021_output/n100.r05.s021.untrimmed.sorted.bam" "n100.r05.s021_output/n100.r05.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s021_output/n100.r05.s021.untrimmed.sorted.bam" -b "n100.r05.s021_output/n100.r05.s021.primers.bed" -p "n100.r05.s021_output/n100.r05.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" "n100.r05.s021_output/n100.r05.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s021_output/n100.r05.s021.reference.fas" "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" > "n100.r05.s021_output/n100.r05.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s021_output/n100.r05.s021.reference.fas" --call-indels "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" > "n100.r05.s021_output/n100.r05.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s021_output/n100.r05.s021.trimmed.sorted.bam" > "n100.r05.s021_output/n100.r05.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s021_output/n100.r05.s021.depth.txt" "n100.r05.s021_output/n100.r05.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s021_output/n100.r05.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s021_output/n100.r05.s021.reference.fas" | bcftools consensus -m "n100.r05.s021_output/n100.r05.s021.low_depth.tsv" tmp.vcf.gz > "n100.r05.s021_output/n100.r05.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d69e431b270c9ce1886e5f02046b8aa56eadfd8bbe019c27fada0c484cddf44e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=126.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 17:04:04 scheduler task ca52affc (flow 0462b63d): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s021.tar.gz resources {}
2021/07/08 17:04:04  ->  n100.r05.s021.Main.cp_out_file 0462b63d exec extern s3://niema-test/n100/r05/n100.r05.s021.tar.gz 35.7MiB
2021/07/08 17:04:04 scheduler task cebd915c (flow 202fcb82): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:04 scheduler task cebd915c (flow 202fcb82): promoting objects (try 0): started
2021/07/08 17:04:04 scheduler task cebd915c (flow 202fcb82): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:04 scheduler task cebd915c (flow 202fcb82): retrieving diagnostic output (try 0): started
2021/07/08 17:04:04 scheduler task a0665b77 (flow afd2aca7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2bd7073b16296bfeab8dfd396923963c82ddc3488f50876741a17eb1b3b8fad6 -> s3://niema-test/n100/r05/n100.r05.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:04  <-  n100.r05.s054.Main.cp_out_file afd2aca7 ok   extern 0s 35.7MiB
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): retrieving result (try 0): started
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloading (try 0): started
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloading list<val<.=ba74b4c1 35.7MiB> 35.7MiB>
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloading val<.=bb961e9a 35.4MiB>
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloading val<.=b18ad783 35.4MiB>
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): promoting objects (try 0): started
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): transferring output (try 0): started
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloaded val<.=bb961e9a 35.4MiB>
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloaded list<val<.=ba74b4c1 35.7MiB> 35.7MiB>
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloaded val<.=b18ad783 35.4MiB>
2021/07/08 17:04:05 scheduler task 67f515d1 (flow 55fa0156): unloading (try 0): successful, next state: complete
2021/07/08 17:04:05  <-  n100.r05.s027.Main.out_file 55fa0156 ok     exec 4m55s 35.7MiB
2021/07/08 17:04:05 n100.r05.s027.Main.out_file 55fa0156 n100/r05/n100.r05.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c492a9062f478ba5d96f892c552f9bf0c890065d97ea4321ab06896f6499db9e
	sha256:55fa01560126b358700a179288963b57aeeb8d1ec527f6ce629596a1ddf01e5c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67f515d14bbfcd6761c8fbcec6449854cbc672f7576f6c90631ff6d31c8b5c25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s027_output"
	    wget -O "n100.r05.s027_output/n100.r05.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s027_output/n100.r05.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s027_output/n100.r05.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s027_output/n100.r05.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s027_output/n100.r05.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s027_output/n100.r05.s027.reference.fas" "n100.r05.s027_output/n100.r05.s027.fq1.fastq" "n100.r05.s027_output/n100.r05.s027.fq2.fastq" | samtools view -bS - > "n100.r05.s027_output/n100.r05.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s027_output/n100.r05.s027.untrimmed.sorted.bam" "n100.r05.s027_output/n100.r05.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s027_output/n100.r05.s027.untrimmed.sorted.bam" -b "n100.r05.s027_output/n100.r05.s027.primers.bed" -p "n100.r05.s027_output/n100.r05.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" "n100.r05.s027_output/n100.r05.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s027_output/n100.r05.s027.reference.fas" "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" > "n100.r05.s027_output/n100.r05.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s027_output/n100.r05.s027.reference.fas" --call-indels "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" > "n100.r05.s027_output/n100.r05.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s027_output/n100.r05.s027.trimmed.sorted.bam" > "n100.r05.s027_output/n100.r05.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s027_output/n100.r05.s027.depth.txt" "n100.r05.s027_output/n100.r05.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s027_output/n100.r05.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s027_output/n100.r05.s027.reference.fas" | bcftools consensus -m "n100.r05.s027_output/n100.r05.s027.low_depth.tsv" tmp.vcf.gz > "n100.r05.s027_output/n100.r05.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ba74b4c130ce966c3361d833e56668b3cbe082bc4c346281820ffd9c52aa5f03 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:04:05 scheduler task 1a60472e (flow 9d645d0a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s027.tar.gz resources {}
2021/07/08 17:04:05  ->  n100.r05.s027.Main.cp_out_file 9d645d0a exec extern s3://niema-test/n100/r05/n100.r05.s027.tar.gz 35.7MiB
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): promoting objects (try 0): started
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): retrieving diagnostic output (try 0): started
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): promoting objects (try 0): started
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:05 scheduler task ca52affc (flow 0462b63d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d69e431b270c9ce1886e5f02046b8aa56eadfd8bbe019c27fada0c484cddf44e -> s3://niema-test/n100/r05/n100.r05.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:05  <-  n100.r05.s021.Main.cp_out_file 0462b63d ok   extern 0s 35.7MiB
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): retrieving diagnostic output (try 0): started
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): retrieving diagnostic output (try 0): started
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): retrieving result (try 0): started
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): retrieving result (try 0): started
2021/07/08 17:04:05 scheduler task 91660c81 (flow a647d63f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c68a281986a5e3d1eff2f1a9c91b5bde2e736364cc3adfa15da6a9c7bb99c449 -> s3://niema-test/n100/r05/n100.r05.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:05  <-  n100.r05.s040.Main.cp_out_file a647d63f ok   extern 0s 35.7MiB
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:05 scheduler task 1de47370 (flow 8813551d): transferring output (try 0): started
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): retrieving result (try 0): started
2021/07/08 17:04:05 scheduler task 70748d2b (flow dab8c84e): transferring output (try 0): started
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloading (try 0): started
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloading list<val<.=2e4e8582 35.7MiB> 35.7MiB>
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloading val<.=a26c7a55 35.4MiB>
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloading val<.=bf3845d0 35.4MiB>
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:05 scheduler task 585ad2e5 (flow fff44c7b): transferring output (try 0): started
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloaded val<.=a26c7a55 35.4MiB>
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloaded val<.=bf3845d0 35.4MiB>
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloaded list<val<.=2e4e8582 35.7MiB> 35.7MiB>
2021/07/08 17:04:05 scheduler task cebd915c (flow 202fcb82): unloading (try 0): successful, next state: complete
2021/07/08 17:04:05  <-  n100.r05.s026.Main.out_file 202fcb82 ok     exec 4m54s 35.7MiB
2021/07/08 17:04:05 n100.r05.s026.Main.out_file 202fcb82 n100/r05/n100.r05.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a65aa1e6323ff4355c02bfb6db6b0f9d53fedf7a5b060d16f7a931ba1be83397
	sha256:202fcb82ba3092820ded50db7c96af41f9082f3242fef7788065bb1e4e2e9e1e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cebd915c1367086d1869b85cff2c55729d50c644d2be4a3e2167a6a38dc62c44
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s026_output"
	    wget -O "n100.r05.s026_output/n100.r05.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s026_output/n100.r05.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s026_output/n100.r05.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s026_output/n100.r05.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s026_output/n100.r05.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s026_output/n100.r05.s026.reference.fas" "n100.r05.s026_output/n100.r05.s026.fq1.fastq" "n100.r05.s026_output/n100.r05.s026.fq2.fastq" | samtools view -bS - > "n100.r05.s026_output/n100.r05.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s026_output/n100.r05.s026.untrimmed.sorted.bam" "n100.r05.s026_output/n100.r05.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s026_output/n100.r05.s026.untrimmed.sorted.bam" -b "n100.r05.s026_output/n100.r05.s026.primers.bed" -p "n100.r05.s026_output/n100.r05.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" "n100.r05.s026_output/n100.r05.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s026_output/n100.r05.s026.reference.fas" "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" > "n100.r05.s026_output/n100.r05.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s026_output/n100.r05.s026.reference.fas" --call-indels "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" > "n100.r05.s026_output/n100.r05.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s026_output/n100.r05.s026.trimmed.sorted.bam" > "n100.r05.s026_output/n100.r05.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s026_output/n100.r05.s026.depth.txt" "n100.r05.s026_output/n100.r05.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s026_output/n100.r05.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s026_output/n100.r05.s026.reference.fas" | bcftools consensus -m "n100.r05.s026_output/n100.r05.s026.low_depth.tsv" tmp.vcf.gz > "n100.r05.s026_output/n100.r05.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2e4e85822bcd9b370cb63f63551ad4a18761727fd087e676c5c6b92043158a8d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=129.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:04:05 scheduler task 83e2b30f (flow c05780fa): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s026.tar.gz resources {}
2021/07/08 17:04:05  ->  n100.r05.s026.Main.cp_out_file c05780fa exec extern s3://niema-test/n100/r05/n100.r05.s026.tar.gz 35.7MiB
2021/07/08 17:04:05 scheduler task 1a60472e (flow 9d645d0a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ba74b4c130ce966c3361d833e56668b3cbe082bc4c346281820ffd9c52aa5f03 -> s3://niema-test/n100/r05/n100.r05.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:05  <-  n100.r05.s027.Main.cp_out_file 9d645d0a ok   extern 0s 35.7MiB
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloading (try 0): started
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloading list<val<.=d6be1d00 35.7MiB> 35.7MiB>
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloading val<.=47168616 35.4MiB>
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloading val<.=fcd7980d 35.4MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloading (try 0): started
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloading list<val<.=f0b64cde 35.7MiB> 35.7MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloading val<.=5de476cb 35.4MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloading val<.=fc248292 35.4MiB>
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloaded list<val<.=d6be1d00 35.7MiB> 35.7MiB>
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloaded val<.=47168616 35.4MiB>
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloaded val<.=fcd7980d 35.4MiB>
2021/07/08 17:04:06 scheduler task 1de47370 (flow 8813551d): unloading (try 0): successful, next state: complete
2021/07/08 17:04:06  <-  n100.r05.s058.Main.out_file 8813551d ok     exec 4m55s 35.7MiB
2021/07/08 17:04:06 n100.r05.s058.Main.out_file 8813551d n100/r05/n100.r05.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad375470116cdde69dbc06fe921c1c33605e7a6bdaa6cb72608dd48b1d1c3ead
	sha256:8813551d5fd9006baa237d2c9bebd52f7f3d91742f2293b5b2b2dd6a5ce09fe5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1de4737028c4b2b77bc6653b53f1cba2fbc7ba2e82f261c4263c150911b7e2a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s058_output"
	    wget -O "n100.r05.s058_output/n100.r05.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s058_output/n100.r05.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s058_output/n100.r05.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s058_output/n100.r05.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s058_output/n100.r05.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s058_output/n100.r05.s058.reference.fas" "n100.r05.s058_output/n100.r05.s058.fq1.fastq" "n100.r05.s058_output/n100.r05.s058.fq2.fastq" | samtools view -bS - > "n100.r05.s058_output/n100.r05.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s058_output/n100.r05.s058.untrimmed.sorted.bam" "n100.r05.s058_output/n100.r05.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s058_output/n100.r05.s058.untrimmed.sorted.bam" -b "n100.r05.s058_output/n100.r05.s058.primers.bed" -p "n100.r05.s058_output/n100.r05.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" "n100.r05.s058_output/n100.r05.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s058_output/n100.r05.s058.reference.fas" "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" > "n100.r05.s058_output/n100.r05.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s058_output/n100.r05.s058.reference.fas" --call-indels "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" > "n100.r05.s058_output/n100.r05.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s058_output/n100.r05.s058.trimmed.sorted.bam" > "n100.r05.s058_output/n100.r05.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s058_output/n100.r05.s058.depth.txt" "n100.r05.s058_output/n100.r05.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s058_output/n100.r05.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s058_output/n100.r05.s058.reference.fas" | bcftools consensus -m "n100.r05.s058_output/n100.r05.s058.low_depth.tsv" tmp.vcf.gz > "n100.r05.s058_output/n100.r05.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d6be1d002d908973aceccafeff819ae7233e1d371edf82f4f9614fc1e15a78e1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=126.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:06 scheduler task ba24506c (flow 0bb5daad): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s058.tar.gz resources {}
2021/07/08 17:04:06  ->  n100.r05.s058.Main.cp_out_file 0bb5daad exec extern s3://niema-test/n100/r05/n100.r05.s058.tar.gz 35.7MiB
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloading (try 0): started
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloading list<val<.=fbd7cb3f 35.7MiB> 35.7MiB>
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloading val<.=d130af28 35.4MiB>
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloading val<.=90a1a0e2 35.4MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloaded list<val<.=f0b64cde 35.7MiB> 35.7MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloaded val<.=fc248292 35.4MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloaded val<.=5de476cb 35.4MiB>
2021/07/08 17:04:06 scheduler task 70748d2b (flow dab8c84e): unloading (try 0): successful, next state: complete
2021/07/08 17:04:06  <-  n100.r05.s092.Main.out_file dab8c84e ok     exec 4m55s 35.7MiB
2021/07/08 17:04:06 n100.r05.s092.Main.out_file dab8c84e n100/r05/n100.r05.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c7bb626268c17223ecff4360b13b1ef6f042ffcf197755bc38b52a3327ef25e8
	sha256:dab8c84e93ced0eadc810f0dc8b31b6ed448f39c7bac1a36aa2cab0967257ba4
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/70748d2bb2e22c85d7f25e577217ae7dd48a66f95a760b08ab5cbe346d5bf277
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s092_output"
	    wget -O "n100.r05.s092_output/n100.r05.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s092_output/n100.r05.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s092_output/n100.r05.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s092_output/n100.r05.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s092_output/n100.r05.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s092_output/n100.r05.s092.reference.fas" "n100.r05.s092_output/n100.r05.s092.fq1.fastq" "n100.r05.s092_output/n100.r05.s092.fq2.fastq" | samtools view -bS - > "n100.r05.s092_output/n100.r05.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s092_output/n100.r05.s092.untrimmed.sorted.bam" "n100.r05.s092_output/n100.r05.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s092_output/n100.r05.s092.untrimmed.sorted.bam" -b "n100.r05.s092_output/n100.r05.s092.primers.bed" -p "n100.r05.s092_output/n100.r05.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" "n100.r05.s092_output/n100.r05.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s092_output/n100.r05.s092.reference.fas" "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" > "n100.r05.s092_output/n100.r05.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s092_output/n100.r05.s092.reference.fas" --call-indels "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" > "n100.r05.s092_output/n100.r05.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s092_output/n100.r05.s092.trimmed.sorted.bam" > "n100.r05.s092_output/n100.r05.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s092_output/n100.r05.s092.depth.txt" "n100.r05.s092_output/n100.r05.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s092_output/n100.r05.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s092_output/n100.r05.s092.reference.fas" | bcftools consensus -m "n100.r05.s092_output/n100.r05.s092.low_depth.tsv" tmp.vcf.gz > "n100.r05.s092_output/n100.r05.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f0b64cde7e7bf046bbff16aee92b6ef73b72c09f7cfc38651087f7b8d086e0ab 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=125.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:04:06 scheduler task 2b2ed05e (flow f62cc02c): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s092.tar.gz resources {}
2021/07/08 17:04:06  ->  n100.r05.s092.Main.cp_out_file f62cc02c exec extern s3://niema-test/n100/r05/n100.r05.s092.tar.gz 35.7MiB
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloaded val<.=d130af28 35.4MiB>
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloaded list<val<.=fbd7cb3f 35.7MiB> 35.7MiB>
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloaded val<.=90a1a0e2 35.4MiB>
2021/07/08 17:04:06 scheduler task 585ad2e5 (flow fff44c7b): unloading (try 0): successful, next state: complete
2021/07/08 17:04:06  <-  n100.r05.s090.Main.out_file fff44c7b ok     exec 4m56s 35.7MiB
2021/07/08 17:04:06 n100.r05.s090.Main.out_file fff44c7b n100/r05/n100.r05.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8272190fe403f2ada172ad82e1708f31f0138b067bcc933a0ef23f02ad446cb2
	sha256:fff44c7bf42d67eff5dbca34dbcf733cc034010f578ad026df96804488f95f1b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/585ad2e5728e2a618e69d616203536dfb23e49c975f06df8f25009192fa1b06a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s090_output"
	    wget -O "n100.r05.s090_output/n100.r05.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s090_output/n100.r05.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s090_output/n100.r05.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s090_output/n100.r05.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s090_output/n100.r05.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s090_output/n100.r05.s090.reference.fas" "n100.r05.s090_output/n100.r05.s090.fq1.fastq" "n100.r05.s090_output/n100.r05.s090.fq2.fastq" | samtools view -bS - > "n100.r05.s090_output/n100.r05.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s090_output/n100.r05.s090.untrimmed.sorted.bam" "n100.r05.s090_output/n100.r05.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s090_output/n100.r05.s090.untrimmed.sorted.bam" -b "n100.r05.s090_output/n100.r05.s090.primers.bed" -p "n100.r05.s090_output/n100.r05.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" "n100.r05.s090_output/n100.r05.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s090_output/n100.r05.s090.reference.fas" "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" > "n100.r05.s090_output/n100.r05.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s090_output/n100.r05.s090.reference.fas" --call-indels "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" > "n100.r05.s090_output/n100.r05.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s090_output/n100.r05.s090.trimmed.sorted.bam" > "n100.r05.s090_output/n100.r05.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s090_output/n100.r05.s090.depth.txt" "n100.r05.s090_output/n100.r05.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s090_output/n100.r05.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s090_output/n100.r05.s090.reference.fas" | bcftools consensus -m "n100.r05.s090_output/n100.r05.s090.low_depth.tsv" tmp.vcf.gz > "n100.r05.s090_output/n100.r05.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fbd7cb3f6ebf214806aa5600bd9ff9865290d4a8393777030667b0478992f985 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=128.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:04:06 scheduler task acfa13fe (flow 4d3a7c3e): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s090.tar.gz resources {}
2021/07/08 17:04:06  ->  n100.r05.s090.Main.cp_out_file 4d3a7c3e exec extern s3://niema-test/n100/r05/n100.r05.s090.tar.gz 35.7MiB
2021/07/08 17:04:06 scheduler task ba24506c (flow 0bb5daad): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d6be1d002d908973aceccafeff819ae7233e1d371edf82f4f9614fc1e15a78e1 -> s3://niema-test/n100/r05/n100.r05.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:06  <-  n100.r05.s058.Main.cp_out_file 0bb5daad ok   extern 0s 35.7MiB
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): promoting objects (try 0): started
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): retrieving diagnostic output (try 0): started
2021/07/08 17:04:07 scheduler task 83e2b30f (flow c05780fa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2e4e85822bcd9b370cb63f63551ad4a18761727fd087e676c5c6b92043158a8d -> s3://niema-test/n100/r05/n100.r05.s026.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:07  <-  n100.r05.s026.Main.cp_out_file c05780fa ok   extern 0s 35.7MiB
2021/07/08 17:04:07 scheduler task 2b2ed05e (flow f62cc02c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f0b64cde7e7bf046bbff16aee92b6ef73b72c09f7cfc38651087f7b8d086e0ab -> s3://niema-test/n100/r05/n100.r05.s092.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:07  <-  n100.r05.s092.Main.cp_out_file f62cc02c ok   extern 0s 35.7MiB
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): retrieving result (try 0): started
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): promoting objects (try 0): started
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): transferring output (try 0): started
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): retrieving diagnostic output (try 0): started
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): retrieving result (try 0): started
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:07 scheduler task 6ab8ace4 (flow adb5f9d2): transferring output (try 0): started
2021/07/08 17:04:07 scheduler task acfa13fe (flow 4d3a7c3e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fbd7cb3f6ebf214806aa5600bd9ff9865290d4a8393777030667b0478992f985 -> s3://niema-test/n100/r05/n100.r05.s090.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:07  <-  n100.r05.s090.Main.cp_out_file 4d3a7c3e ok   extern 0s 35.7MiB
2021/07/08 17:04:07 scheduler task d20bb815 (flow 220c7c9b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:07 scheduler task d20bb815 (flow 220c7c9b): promoting objects (try 0): started
2021/07/08 17:04:07 scheduler task d20bb815 (flow 220c7c9b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:07 scheduler task d20bb815 (flow 220c7c9b): retrieving diagnostic output (try 0): started
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): unloading (try 0): started
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): unloading list<val<.=d88906c9 35.8MiB> 35.8MiB>
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): unloading val<.=4b594e46 35.4MiB>
2021/07/08 17:04:07 scheduler task 7f4a126f (flow 67971600): unloading val<.=eae88930 35.4MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): retrieving result (try 0): started
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:08 scheduler task 7f4a126f (flow 67971600): unloaded val<.=4b594e46 35.4MiB>
2021/07/08 17:04:08 scheduler task 7f4a126f (flow 67971600): unloaded list<val<.=d88906c9 35.8MiB> 35.8MiB>
2021/07/08 17:04:08 scheduler task 7f4a126f (flow 67971600): unloaded val<.=eae88930 35.4MiB>
2021/07/08 17:04:08 scheduler task 7f4a126f (flow 67971600): unloading (try 0): successful, next state: complete
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): promoting objects (try 0): started
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:08  <-  n100.r05.s046.Main.out_file 67971600 ok     exec 4m58s 35.8MiB
2021/07/08 17:04:08 n100.r05.s046.Main.out_file 67971600 n100/r05/n100.r05.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61156972d506653cc769831c2bda7c9cc46ac9f8a8f450889d4350b786b4ac75
	sha256:67971600b5e8a738bff4ab7bbe7862fe2a77841cf34d27d91abf6b9625fe6c70
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7f4a126f4a8d6ed6c231c5e613c68dbd731a809d0e3b00e41578e543fa047788
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s046_output"
	    wget -O "n100.r05.s046_output/n100.r05.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s046_output/n100.r05.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s046_output/n100.r05.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s046_output/n100.r05.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s046_output/n100.r05.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s046_output/n100.r05.s046.reference.fas" "n100.r05.s046_output/n100.r05.s046.fq1.fastq" "n100.r05.s046_output/n100.r05.s046.fq2.fastq" | samtools view -bS - > "n100.r05.s046_output/n100.r05.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s046_output/n100.r05.s046.untrimmed.sorted.bam" "n100.r05.s046_output/n100.r05.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s046_output/n100.r05.s046.untrimmed.sorted.bam" -b "n100.r05.s046_output/n100.r05.s046.primers.bed" -p "n100.r05.s046_output/n100.r05.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" "n100.r05.s046_output/n100.r05.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s046_output/n100.r05.s046.reference.fas" "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" > "n100.r05.s046_output/n100.r05.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s046_output/n100.r05.s046.reference.fas" --call-indels "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" > "n100.r05.s046_output/n100.r05.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s046_output/n100.r05.s046.trimmed.sorted.bam" > "n100.r05.s046_output/n100.r05.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s046_output/n100.r05.s046.depth.txt" "n100.r05.s046_output/n100.r05.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s046_output/n100.r05.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s046_output/n100.r05.s046.reference.fas" | bcftools consensus -m "n100.r05.s046_output/n100.r05.s046.low_depth.tsv" tmp.vcf.gz > "n100.r05.s046_output/n100.r05.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d88906c9f2a633477fea8d70a1ea1c10c558dd8b5ff2f290959d90edb4ed0d26 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=127.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=624B max=2.0KiB
2021/07/08 17:04:08 scheduler task 49be43ba (flow e5e843e8): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s046.tar.gz resources {}
2021/07/08 17:04:08  ->  n100.r05.s046.Main.cp_out_file e5e843e8 exec extern s3://niema-test/n100/r05/n100.r05.s046.tar.gz 35.8MiB
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloading (try 0): started
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloading list<val<.=799491fa 35.8MiB> 35.8MiB>
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloading val<.=5956d6ff 35.4MiB>
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloading val<.=32aaffe2 35.4MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): transferring output (try 0): started
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): retrieving diagnostic output (try 0): started
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloaded val<.=32aaffe2 35.4MiB>
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloaded list<val<.=799491fa 35.8MiB> 35.8MiB>
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloaded val<.=5956d6ff 35.4MiB>
2021/07/08 17:04:08 scheduler task 6ab8ace4 (flow adb5f9d2): unloading (try 0): successful, next state: complete
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:08  <-  n100.r05.s045.Main.out_file adb5f9d2 ok     exec 4m58s 35.8MiB
2021/07/08 17:04:08 n100.r05.s045.Main.out_file adb5f9d2 n100/r05/n100.r05.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5af797cce85f67bac61f89548466fd8716cba7b4699ac39c882f5d8f807cc40a
	sha256:adb5f9d29e233ac3bc16a6c4e77855ffac21795bc0ce50b27e94423ad3a9665b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ab8ace484146faeddd41edee4e3dd3c57b8fb684e1fb5910b77e6b1084d3cb6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s045_output"
	    wget -O "n100.r05.s045_output/n100.r05.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s045_output/n100.r05.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s045_output/n100.r05.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s045_output/n100.r05.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s045_output/n100.r05.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s045_output/n100.r05.s045.reference.fas" "n100.r05.s045_output/n100.r05.s045.fq1.fastq" "n100.r05.s045_output/n100.r05.s045.fq2.fastq" | samtools view -bS - > "n100.r05.s045_output/n100.r05.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s045_output/n100.r05.s045.untrimmed.sorted.bam" "n100.r05.s045_output/n100.r05.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s045_output/n100.r05.s045.untrimmed.sorted.bam" -b "n100.r05.s045_output/n100.r05.s045.primers.bed" -p "n100.r05.s045_output/n100.r05.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" "n100.r05.s045_output/n100.r05.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s045_output/n100.r05.s045.reference.fas" "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" > "n100.r05.s045_output/n100.r05.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s045_output/n100.r05.s045.reference.fas" --call-indels "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" > "n100.r05.s045_output/n100.r05.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s045_output/n100.r05.s045.trimmed.sorted.bam" > "n100.r05.s045_output/n100.r05.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s045_output/n100.r05.s045.depth.txt" "n100.r05.s045_output/n100.r05.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s045_output/n100.r05.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s045_output/n100.r05.s045.reference.fas" | bcftools consensus -m "n100.r05.s045_output/n100.r05.s045.low_depth.tsv" tmp.vcf.gz > "n100.r05.s045_output/n100.r05.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:799491fa43c7cfcc91db0a3549f703a545c42f27718ff47a780f5dc8fc821caf 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=127.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 17:04:08 scheduler task bc36d0c8 (flow 547effcf): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s045.tar.gz resources {}
2021/07/08 17:04:08  ->  n100.r05.s045.Main.cp_out_file 547effcf exec extern s3://niema-test/n100/r05/n100.r05.s045.tar.gz 35.8MiB
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): promoting objects (try 0): started
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): retrieving result (try 0): started
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): retrieving diagnostic output (try 0): started
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:08 scheduler task b23b5216 (flow 06073390): transferring output (try 0): started
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): retrieving result (try 0): started
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:08 scheduler task ea078349 (flow 81ef77fc): transferring output (try 0): started
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloading (try 0): started
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloading list<val<.=c1b8d296 35.8MiB> 35.8MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloading val<.=c00c2ec2 35.4MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloading val<.=7201324b 35.4MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloaded val<.=7201324b 35.4MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloaded list<val<.=c1b8d296 35.8MiB> 35.8MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloaded val<.=c00c2ec2 35.4MiB>
2021/07/08 17:04:08 scheduler task d20bb815 (flow 220c7c9b): unloading (try 0): successful, next state: complete
2021/07/08 17:04:08  <-  n100.r05.s056.Main.out_file 220c7c9b ok     exec 4m58s 35.8MiB
2021/07/08 17:04:08 n100.r05.s056.Main.out_file 220c7c9b n100/r05/n100.r05.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d3ceeecb00f46442e4dade47daea180b16aa371eaa051f5f97d80dad26b5b37e
	sha256:220c7c9b2703697dd690449d99739e36f45e02b490c226f19174397050218813
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d20bb81565a9f5c5a2abb4558ea3e16c0fa4505fb3324225f5a9ee6e65641b99
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s056_output"
	    wget -O "n100.r05.s056_output/n100.r05.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s056_output/n100.r05.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s056_output/n100.r05.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s056_output/n100.r05.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s056_output/n100.r05.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s056_output/n100.r05.s056.reference.fas" "n100.r05.s056_output/n100.r05.s056.fq1.fastq" "n100.r05.s056_output/n100.r05.s056.fq2.fastq" | samtools view -bS - > "n100.r05.s056_output/n100.r05.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s056_output/n100.r05.s056.untrimmed.sorted.bam" "n100.r05.s056_output/n100.r05.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s056_output/n100.r05.s056.untrimmed.sorted.bam" -b "n100.r05.s056_output/n100.r05.s056.primers.bed" -p "n100.r05.s056_output/n100.r05.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" "n100.r05.s056_output/n100.r05.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s056_output/n100.r05.s056.reference.fas" "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" > "n100.r05.s056_output/n100.r05.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s056_output/n100.r05.s056.reference.fas" --call-indels "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" > "n100.r05.s056_output/n100.r05.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s056_output/n100.r05.s056.trimmed.sorted.bam" > "n100.r05.s056_output/n100.r05.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s056_output/n100.r05.s056.depth.txt" "n100.r05.s056_output/n100.r05.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s056_output/n100.r05.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s056_output/n100.r05.s056.reference.fas" | bcftools consensus -m "n100.r05.s056_output/n100.r05.s056.low_depth.tsv" tmp.vcf.gz > "n100.r05.s056_output/n100.r05.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c1b8d2969dfd7613342283d7d1693dcedd03150096e0546fcd0f5c3e8a72da52 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=126.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:04:08 scheduler task 7b473fe2 (flow 9d1bc0c3): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s056.tar.gz resources {}
2021/07/08 17:04:08  ->  n100.r05.s056.Main.cp_out_file 9d1bc0c3 exec extern s3://niema-test/n100/r05/n100.r05.s056.tar.gz 35.8MiB
2021/07/08 17:04:08 scheduler task bc36d0c8 (flow 547effcf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:799491fa43c7cfcc91db0a3549f703a545c42f27718ff47a780f5dc8fc821caf -> s3://niema-test/n100/r05/n100.r05.s045.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:08  <-  n100.r05.s045.Main.cp_out_file 547effcf ok   extern 0s 35.8MiB
2021/07/08 17:04:08 scheduler task 7fd21a08 (flow 5b62101d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:08 scheduler task 7fd21a08 (flow 5b62101d): promoting objects (try 0): started
2021/07/08 17:04:08 scheduler task 7fd21a08 (flow 5b62101d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:08 scheduler task 49be43ba (flow e5e843e8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d88906c9f2a633477fea8d70a1ea1c10c558dd8b5ff2f290959d90edb4ed0d26 -> s3://niema-test/n100/r05/n100.r05.s046.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:08  <-  n100.r05.s046.Main.cp_out_file e5e843e8 ok   extern 0s 35.8MiB
2021/07/08 17:04:08 scheduler task 7fd21a08 (flow 5b62101d): retrieving diagnostic output (try 0): started
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): retrieving result (try 0): started
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloading (try 0): started
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloading list<val<.=70f261f4 35.7MiB> 35.7MiB>
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloading val<.=41280413 35.4MiB>
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloading val<.=2699dced 35.4MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): transferring output (try 0): started
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloaded list<val<.=70f261f4 35.7MiB> 35.7MiB>
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloaded val<.=2699dced 35.4MiB>
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloaded val<.=41280413 35.4MiB>
2021/07/08 17:04:09 scheduler task ea078349 (flow 81ef77fc): unloading (try 0): successful, next state: complete
2021/07/08 17:04:09  <-  n100.r05.s037.Main.out_file 81ef77fc ok     exec 4m58s 35.7MiB
2021/07/08 17:04:09 n100.r05.s037.Main.out_file 81ef77fc n100/r05/n100.r05.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:46c3ccfa9dd851955d8d79c9d7230cc760b8dd9cc536b82077e7c1b2f6b0eb01
	sha256:81ef77fc2afad98bbc420ff34434c39250fed54cc1ccf3a68b9b479418e06be5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ea07834920e5af45f8face6e914b58f9740b8c90a72f771ad8194afaf082dda7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s037_output"
	    wget -O "n100.r05.s037_output/n100.r05.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s037_output/n100.r05.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s037_output/n100.r05.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s037_output/n100.r05.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s037_output/n100.r05.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s037_output/n100.r05.s037.reference.fas" "n100.r05.s037_output/n100.r05.s037.fq1.fastq" "n100.r05.s037_output/n100.r05.s037.fq2.fastq" | samtools view -bS - > "n100.r05.s037_output/n100.r05.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s037_output/n100.r05.s037.untrimmed.sorted.bam" "n100.r05.s037_output/n100.r05.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s037_output/n100.r05.s037.untrimmed.sorted.bam" -b "n100.r05.s037_output/n100.r05.s037.primers.bed" -p "n100.r05.s037_output/n100.r05.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" "n100.r05.s037_output/n100.r05.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s037_output/n100.r05.s037.reference.fas" "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" > "n100.r05.s037_output/n100.r05.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s037_output/n100.r05.s037.reference.fas" --call-indels "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" > "n100.r05.s037_output/n100.r05.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s037_output/n100.r05.s037.trimmed.sorted.bam" > "n100.r05.s037_output/n100.r05.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s037_output/n100.r05.s037.depth.txt" "n100.r05.s037_output/n100.r05.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s037_output/n100.r05.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s037_output/n100.r05.s037.reference.fas" | bcftools consensus -m "n100.r05.s037_output/n100.r05.s037.low_depth.tsv" tmp.vcf.gz > "n100.r05.s037_output/n100.r05.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:70f261f405d11a41fd2ca13ec7fa60e35c3821bfb55a108865d048f5b34ec81b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:04:09 scheduler task 1ac37ae7 (flow e0daaf03): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s037.tar.gz resources {}
2021/07/08 17:04:09  ->  n100.r05.s037.Main.cp_out_file e0daaf03 exec extern s3://niema-test/n100/r05/n100.r05.s037.tar.gz 35.7MiB
2021/07/08 17:04:09 scheduler task 7b473fe2 (flow 9d1bc0c3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c1b8d2969dfd7613342283d7d1693dcedd03150096e0546fcd0f5c3e8a72da52 -> s3://niema-test/n100/r05/n100.r05.s056.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:09  <-  n100.r05.s056.Main.cp_out_file 9d1bc0c3 ok   extern 0s 35.8MiB
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloading (try 0): started
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloading list<val<.=5896b80a 35.7MiB> 35.7MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloading val<.=c64b7e56 35.4MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloading val<.=59148e6a 35.4MiB>
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloading (try 0): started
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloading list<val<.=eedf5bb4 35.7MiB> 35.7MiB>
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloading val<.=22516b3a 35.4MiB>
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloading val<.=ee967759 35.4MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloaded list<val<.=5896b80a 35.7MiB> 35.7MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloaded val<.=59148e6a 35.4MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloaded val<.=c64b7e56 35.4MiB>
2021/07/08 17:04:09 scheduler task 7fd21a08 (flow 5b62101d): unloading (try 0): successful, next state: complete
2021/07/08 17:04:09  <-  n100.r05.s052.Main.out_file 5b62101d ok     exec 4m59s 35.7MiB
2021/07/08 17:04:09 n100.r05.s052.Main.out_file 5b62101d n100/r05/n100.r05.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1640098f5cc8b529256b04cb3a93a9a32eed7800c787f9f0a3292b35e33c6f34
	sha256:5b62101dcae267a30a6cc8e7cfd64c973657258ea18f75873d8ebc0feab92ea8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7fd21a08b97fbce08af5459ee765c6ba15ea625735d9ec525bfa9023b9dc6a70
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s052_output"
	    wget -O "n100.r05.s052_output/n100.r05.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s052_output/n100.r05.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s052_output/n100.r05.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s052_output/n100.r05.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s052_output/n100.r05.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s052_output/n100.r05.s052.reference.fas" "n100.r05.s052_output/n100.r05.s052.fq1.fastq" "n100.r05.s052_output/n100.r05.s052.fq2.fastq" | samtools view -bS - > "n100.r05.s052_output/n100.r05.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s052_output/n100.r05.s052.untrimmed.sorted.bam" "n100.r05.s052_output/n100.r05.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s052_output/n100.r05.s052.untrimmed.sorted.bam" -b "n100.r05.s052_output/n100.r05.s052.primers.bed" -p "n100.r05.s052_output/n100.r05.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" "n100.r05.s052_output/n100.r05.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s052_output/n100.r05.s052.reference.fas" "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" > "n100.r05.s052_output/n100.r05.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s052_output/n100.r05.s052.reference.fas" --call-indels "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" > "n100.r05.s052_output/n100.r05.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s052_output/n100.r05.s052.trimmed.sorted.bam" > "n100.r05.s052_output/n100.r05.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s052_output/n100.r05.s052.depth.txt" "n100.r05.s052_output/n100.r05.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s052_output/n100.r05.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s052_output/n100.r05.s052.reference.fas" | bcftools consensus -m "n100.r05.s052_output/n100.r05.s052.low_depth.tsv" tmp.vcf.gz > "n100.r05.s052_output/n100.r05.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5896b80a83d062cd376b2cdcf31ce5063d81cb9867498e3d5f7f3fadf4d6e008 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.9MiB max=126.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:04:09 scheduler task c5294810 (flow 344e1b93): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s052.tar.gz resources {}
2021/07/08 17:04:09  ->  n100.r05.s052.Main.cp_out_file 344e1b93 exec extern s3://niema-test/n100/r05/n100.r05.s052.tar.gz 35.7MiB
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloaded val<.=ee967759 35.4MiB>
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloaded val<.=22516b3a 35.4MiB>
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloaded list<val<.=eedf5bb4 35.7MiB> 35.7MiB>
2021/07/08 17:04:09 scheduler task b23b5216 (flow 06073390): unloading (try 0): successful, next state: complete
2021/07/08 17:04:09  <-  n100.r05.s063.Main.out_file 06073390 ok     exec 4m58s 35.7MiB
2021/07/08 17:04:09 n100.r05.s063.Main.out_file 06073390 n100/r05/n100.r05.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5abb2d4e5a9d5fcf3cdd11c986728dc504f7d2e1b6fbd0ce1cfe38c65bea990
	sha256:060733909e764b2be9a57993d6a1b918dcf4b69c585049c7bf9dacf876c83d48
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b23b521668de5f79fd35316f41035c7c0f0ff65176ed31f2486ab53551f265cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s063_output"
	    wget -O "n100.r05.s063_output/n100.r05.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s063_output/n100.r05.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s063_output/n100.r05.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s063_output/n100.r05.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s063_output/n100.r05.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s063_output/n100.r05.s063.reference.fas" "n100.r05.s063_output/n100.r05.s063.fq1.fastq" "n100.r05.s063_output/n100.r05.s063.fq2.fastq" | samtools view -bS - > "n100.r05.s063_output/n100.r05.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s063_output/n100.r05.s063.untrimmed.sorted.bam" "n100.r05.s063_output/n100.r05.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s063_output/n100.r05.s063.untrimmed.sorted.bam" -b "n100.r05.s063_output/n100.r05.s063.primers.bed" -p "n100.r05.s063_output/n100.r05.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" "n100.r05.s063_output/n100.r05.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s063_output/n100.r05.s063.reference.fas" "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" > "n100.r05.s063_output/n100.r05.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s063_output/n100.r05.s063.reference.fas" --call-indels "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" > "n100.r05.s063_output/n100.r05.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s063_output/n100.r05.s063.trimmed.sorted.bam" > "n100.r05.s063_output/n100.r05.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s063_output/n100.r05.s063.depth.txt" "n100.r05.s063_output/n100.r05.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s063_output/n100.r05.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s063_output/n100.r05.s063.reference.fas" | bcftools consensus -m "n100.r05.s063_output/n100.r05.s063.low_depth.tsv" tmp.vcf.gz > "n100.r05.s063_output/n100.r05.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eedf5bb4a2b2cca51dea62833f1429116c9394d9a7ea856f6b3a288c0864d18c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=126.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:04:09 scheduler task 384215cd (flow 4cfcd08a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s063.tar.gz resources {}
2021/07/08 17:04:09  ->  n100.r05.s063.Main.cp_out_file 4cfcd08a exec extern s3://niema-test/n100/r05/n100.r05.s063.tar.gz 35.7MiB
2021/07/08 17:04:09 scheduler task 1ac37ae7 (flow e0daaf03): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:70f261f405d11a41fd2ca13ec7fa60e35c3821bfb55a108865d048f5b34ec81b -> s3://niema-test/n100/r05/n100.r05.s037.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:09  <-  n100.r05.s037.Main.cp_out_file e0daaf03 ok   extern 0s 35.7MiB
2021/07/08 17:04:09 scheduler task b5ceb6c6 (flow db9699b5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:09 scheduler task b5ceb6c6 (flow db9699b5): promoting objects (try 0): started
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): retrieving diagnostic output (try 0): started
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): retrieving result (try 0): started
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): promoting objects (try 0): started
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): transferring output (try 0): started
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): retrieving diagnostic output (try 0): started
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): retrieving result (try 0): started
2021/07/08 17:04:10 scheduler task 384215cd (flow 4cfcd08a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eedf5bb4a2b2cca51dea62833f1429116c9394d9a7ea856f6b3a288c0864d18c -> s3://niema-test/n100/r05/n100.r05.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:10  <-  n100.r05.s063.Main.cp_out_file 4cfcd08a ok   extern 0s 35.7MiB
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): promoting objects (try 0): started
2021/07/08 17:04:10 scheduler task 94683d3a (flow 96139b10): transferring output (try 0): started
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): retrieving diagnostic output (try 0): started
2021/07/08 17:04:10 scheduler task c5294810 (flow 344e1b93): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5896b80a83d062cd376b2cdcf31ce5063d81cb9867498e3d5f7f3fadf4d6e008 -> s3://niema-test/n100/r05/n100.r05.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:10  <-  n100.r05.s052.Main.cp_out_file 344e1b93 ok   extern 0s 35.7MiB
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): retrieving result (try 0): started
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloading (try 0): started
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloading list<val<.=9c5fce16 35.8MiB> 35.8MiB>
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloading val<.=ff7fabc9 35.4MiB>
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloading val<.=9d735c1f 35.4MiB>
2021/07/08 17:04:10 scheduler task fb5421a4 (flow 0e1a57df): transferring output (try 0): started
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloaded val<.=9d735c1f 35.4MiB>
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloaded val<.=ff7fabc9 35.4MiB>
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloaded list<val<.=9c5fce16 35.8MiB> 35.8MiB>
2021/07/08 17:04:10 scheduler task b5ceb6c6 (flow db9699b5): unloading (try 0): successful, next state: complete
2021/07/08 17:04:10  <-  n100.r05.s010.Main.out_file db9699b5 ok     exec 5m0s 35.8MiB
2021/07/08 17:04:10 n100.r05.s010.Main.out_file db9699b5 n100/r05/n100.r05.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6905686ce9686cd1de3f361dd9fbe522a7f6799e15dff3c3c7f541e878f8a5f0
	sha256:db9699b5395a4178d7cc1b436da7519454cee4c1bfbbba6c4d4f02a099f19633
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5ceb6c63ea7c40dba7ab64806a85bc69bc8de93bccfd5df0af5cf46cef4793b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s010_output"
	    wget -O "n100.r05.s010_output/n100.r05.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s010_output/n100.r05.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s010_output/n100.r05.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s010_output/n100.r05.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s010_output/n100.r05.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s010_output/n100.r05.s010.reference.fas" "n100.r05.s010_output/n100.r05.s010.fq1.fastq" "n100.r05.s010_output/n100.r05.s010.fq2.fastq" | samtools view -bS - > "n100.r05.s010_output/n100.r05.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s010_output/n100.r05.s010.untrimmed.sorted.bam" "n100.r05.s010_output/n100.r05.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s010_output/n100.r05.s010.untrimmed.sorted.bam" -b "n100.r05.s010_output/n100.r05.s010.primers.bed" -p "n100.r05.s010_output/n100.r05.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" "n100.r05.s010_output/n100.r05.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s010_output/n100.r05.s010.reference.fas" "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" > "n100.r05.s010_output/n100.r05.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s010_output/n100.r05.s010.reference.fas" --call-indels "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" > "n100.r05.s010_output/n100.r05.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s010_output/n100.r05.s010.trimmed.sorted.bam" > "n100.r05.s010_output/n100.r05.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s010_output/n100.r05.s010.depth.txt" "n100.r05.s010_output/n100.r05.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s010_output/n100.r05.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s010_output/n100.r05.s010.reference.fas" | bcftools consensus -m "n100.r05.s010_output/n100.r05.s010.low_depth.tsv" tmp.vcf.gz > "n100.r05.s010_output/n100.r05.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c5fce1672905fcbfa5776eb9483399efff01a7f223e2c2e2de7b82bcf12dbc2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=128.7MiB
	    disk mean=10.1MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:04:10 scheduler task 1bf793de (flow 66c3af1a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s010.tar.gz resources {}
2021/07/08 17:04:10  ->  n100.r05.s010.Main.cp_out_file 66c3af1a exec extern s3://niema-test/n100/r05/n100.r05.s010.tar.gz 35.8MiB
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloading (try 0): started
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloading list<val<.=396d4eae 35.8MiB> 35.8MiB>
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloading val<.=b6e731e4 35.4MiB>
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloading val<.=58e3413e 35.4MiB>
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloaded val<.=b6e731e4 35.4MiB>
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloaded list<val<.=396d4eae 35.8MiB> 35.8MiB>
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloaded val<.=58e3413e 35.4MiB>
2021/07/08 17:04:11 scheduler task 94683d3a (flow 96139b10): unloading (try 0): successful, next state: complete
2021/07/08 17:04:11  <-  n100.r05.s042.Main.out_file 96139b10 ok     exec 5m1s 35.8MiB
2021/07/08 17:04:11 n100.r05.s042.Main.out_file 96139b10 n100/r05/n100.r05.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5f6c5dbe31469cb7ef989859488bae7853ed65cb9a645b737b868a3bb72693bb
	sha256:96139b10177dfde078f5b745ca6f8212c8ecbd8c83d25b518abc8fdec7cada11
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/94683d3a463a2b28083698a44f90a0d535b82d76d1f9ddf5c471bb4dcc139800
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s042_output"
	    wget -O "n100.r05.s042_output/n100.r05.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s042_output/n100.r05.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s042_output/n100.r05.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s042_output/n100.r05.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s042_output/n100.r05.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s042_output/n100.r05.s042.reference.fas" "n100.r05.s042_output/n100.r05.s042.fq1.fastq" "n100.r05.s042_output/n100.r05.s042.fq2.fastq" | samtools view -bS - > "n100.r05.s042_output/n100.r05.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s042_output/n100.r05.s042.untrimmed.sorted.bam" "n100.r05.s042_output/n100.r05.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s042_output/n100.r05.s042.untrimmed.sorted.bam" -b "n100.r05.s042_output/n100.r05.s042.primers.bed" -p "n100.r05.s042_output/n100.r05.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" "n100.r05.s042_output/n100.r05.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s042_output/n100.r05.s042.reference.fas" "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" > "n100.r05.s042_output/n100.r05.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s042_output/n100.r05.s042.reference.fas" --call-indels "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" > "n100.r05.s042_output/n100.r05.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s042_output/n100.r05.s042.trimmed.sorted.bam" > "n100.r05.s042_output/n100.r05.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s042_output/n100.r05.s042.depth.txt" "n100.r05.s042_output/n100.r05.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s042_output/n100.r05.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s042_output/n100.r05.s042.reference.fas" | bcftools consensus -m "n100.r05.s042_output/n100.r05.s042.low_depth.tsv" tmp.vcf.gz > "n100.r05.s042_output/n100.r05.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:396d4eae3343f7630bab99ff3171f139310c3ec04def3d3223096f8faeb3532e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=126.4MiB
	    disk mean=8.4MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:04:11 scheduler task 725a9163 (flow 595133e0): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s042.tar.gz resources {}
2021/07/08 17:04:11  ->  n100.r05.s042.Main.cp_out_file 595133e0 exec extern s3://niema-test/n100/r05/n100.r05.s042.tar.gz 35.8MiB
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloading (try 0): started
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloading list<val<.=ba4c88a4 35.7MiB> 35.7MiB>
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloading val<.=10cfadef 35.4MiB>
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloading val<.=e2b6caa7 35.4MiB>
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloaded val<.=10cfadef 35.4MiB>
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloaded val<.=e2b6caa7 35.4MiB>
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloaded list<val<.=ba4c88a4 35.7MiB> 35.7MiB>
2021/07/08 17:04:11 scheduler task fb5421a4 (flow 0e1a57df): unloading (try 0): successful, next state: complete
2021/07/08 17:04:11 scheduler task 1bf793de (flow 66c3af1a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c5fce1672905fcbfa5776eb9483399efff01a7f223e2c2e2de7b82bcf12dbc2 -> s3://niema-test/n100/r05/n100.r05.s010.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:11  <-  n100.r05.s097.Main.out_file 0e1a57df ok     exec 5m0s 35.7MiB
2021/07/08 17:04:11 n100.r05.s097.Main.out_file 0e1a57df n100/r05/n100.r05.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7ae420bc36efc508f08fbab8cdc61d99384221244f267ce60867cd0743b2b9b5
	sha256:0e1a57df1d3f8f9594358debe378e6d11c909cd6d05004fcc9195763f2970f2d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fb5421a489c9e5dccf98e20ced00225c81bd251f91d1e9c711117a67001c8829
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s097_output"
	    wget -O "n100.r05.s097_output/n100.r05.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s097_output/n100.r05.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s097_output/n100.r05.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s097_output/n100.r05.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s097_output/n100.r05.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s097_output/n100.r05.s097.reference.fas" "n100.r05.s097_output/n100.r05.s097.fq1.fastq" "n100.r05.s097_output/n100.r05.s097.fq2.fastq" | samtools view -bS - > "n100.r05.s097_output/n100.r05.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s097_output/n100.r05.s097.untrimmed.sorted.bam" "n100.r05.s097_output/n100.r05.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s097_output/n100.r05.s097.untrimmed.sorted.bam" -b "n100.r05.s097_output/n100.r05.s097.primers.bed" -p "n100.r05.s097_output/n100.r05.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" "n100.r05.s097_output/n100.r05.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s097_output/n100.r05.s097.reference.fas" "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" > "n100.r05.s097_output/n100.r05.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s097_output/n100.r05.s097.reference.fas" --call-indels "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" > "n100.r05.s097_output/n100.r05.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s097_output/n100.r05.s097.trimmed.sorted.bam" > "n100.r05.s097_output/n100.r05.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s097_output/n100.r05.s097.depth.txt" "n100.r05.s097_output/n100.r05.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s097_output/n100.r05.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s097_output/n100.r05.s097.reference.fas" | bcftools consensus -m "n100.r05.s097_output/n100.r05.s097.low_depth.tsv" tmp.vcf.gz > "n100.r05.s097_output/n100.r05.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ba4c88a4325043ae7be6fd2507fe68ce358f409f857486e20055a2f85b4ec266 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=123.9MiB
	    disk mean=9.1MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:04:11  <-  n100.r05.s010.Main.cp_out_file 66c3af1a ok   extern 0s 35.8MiB
2021/07/08 17:04:11 scheduler task 0ce9b16c (flow a84909f3): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s097.tar.gz resources {}
2021/07/08 17:04:11  ->  n100.r05.s097.Main.cp_out_file a84909f3 exec extern s3://niema-test/n100/r05/n100.r05.s097.tar.gz 35.7MiB
2021/07/08 17:04:12 scheduler task 725a9163 (flow 595133e0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:396d4eae3343f7630bab99ff3171f139310c3ec04def3d3223096f8faeb3532e -> s3://niema-test/n100/r05/n100.r05.s042.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:12  <-  n100.r05.s042.Main.cp_out_file 595133e0 ok   extern 0s 35.8MiB
2021/07/08 17:04:12 scheduler task 0ce9b16c (flow a84909f3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ba4c88a4325043ae7be6fd2507fe68ce358f409f857486e20055a2f85b4ec266 -> s3://niema-test/n100/r05/n100.r05.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:12  <-  n100.r05.s097.Main.cp_out_file a84909f3 ok   extern 0s 35.7MiB
2021/07/08 17:04:12 scheduler task c504d35d (flow 7c5932bc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:12 scheduler task c504d35d (flow 7c5932bc): promoting objects (try 0): started
2021/07/08 17:04:12 scheduler task c504d35d (flow 7c5932bc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:12 scheduler task c504d35d (flow 7c5932bc): retrieving diagnostic output (try 0): started
2021/07/08 17:04:12 scheduler task c504d35d (flow 7c5932bc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:12 scheduler task c504d35d (flow 7c5932bc): retrieving result (try 0): started
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): transferring output (try 0): started
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloading (try 0): started
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloading list<val<.=addf1e55 35.7MiB> 35.7MiB>
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloading val<.=d0aa94b9 35.4MiB>
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloading val<.=c38cb85b 35.4MiB>
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloaded list<val<.=addf1e55 35.7MiB> 35.7MiB>
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloaded val<.=c38cb85b 35.4MiB>
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloaded val<.=d0aa94b9 35.4MiB>
2021/07/08 17:04:13 scheduler task c504d35d (flow 7c5932bc): unloading (try 0): successful, next state: complete
2021/07/08 17:04:13  <-  n100.r05.s076.Main.out_file 7c5932bc ok     exec 5m3s 35.7MiB
2021/07/08 17:04:13 n100.r05.s076.Main.out_file 7c5932bc n100/r05/n100.r05.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:343d7dea9e1f4fe045276d822f894063f8394742a8d40ba8e630fdd112f55895
	sha256:7c5932bc3cd839a39f5f9363032b15b26c86116b0e94ad07862ebcb360af5b0d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c504d35d0336a3e8272f0726022c8ec45b331062b1316deab940fc2dbe537870
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s076_output"
	    wget -O "n100.r05.s076_output/n100.r05.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s076_output/n100.r05.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s076_output/n100.r05.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s076_output/n100.r05.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s076_output/n100.r05.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s076_output/n100.r05.s076.reference.fas" "n100.r05.s076_output/n100.r05.s076.fq1.fastq" "n100.r05.s076_output/n100.r05.s076.fq2.fastq" | samtools view -bS - > "n100.r05.s076_output/n100.r05.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s076_output/n100.r05.s076.untrimmed.sorted.bam" "n100.r05.s076_output/n100.r05.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s076_output/n100.r05.s076.untrimmed.sorted.bam" -b "n100.r05.s076_output/n100.r05.s076.primers.bed" -p "n100.r05.s076_output/n100.r05.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" "n100.r05.s076_output/n100.r05.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s076_output/n100.r05.s076.reference.fas" "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" > "n100.r05.s076_output/n100.r05.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s076_output/n100.r05.s076.reference.fas" --call-indels "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" > "n100.r05.s076_output/n100.r05.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s076_output/n100.r05.s076.trimmed.sorted.bam" > "n100.r05.s076_output/n100.r05.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s076_output/n100.r05.s076.depth.txt" "n100.r05.s076_output/n100.r05.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s076_output/n100.r05.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s076_output/n100.r05.s076.reference.fas" | bcftools consensus -m "n100.r05.s076_output/n100.r05.s076.low_depth.tsv" tmp.vcf.gz > "n100.r05.s076_output/n100.r05.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:addf1e55576a7e9cb6f4de6c2e3b02bab5a3981eb9cfb063f5ab11d7186def18 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:13 scheduler task 17dc4a40 (flow 66fb53f9): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s076.tar.gz resources {}
2021/07/08 17:04:13  ->  n100.r05.s076.Main.cp_out_file 66fb53f9 exec extern s3://niema-test/n100/r05/n100.r05.s076.tar.gz 35.7MiB
2021/07/08 17:04:13 scheduler task 7016df0e (flow c5ad9cb9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:13 scheduler task 7016df0e (flow c5ad9cb9): promoting objects (try 0): started
2021/07/08 17:04:13 scheduler task 7016df0e (flow c5ad9cb9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:13 scheduler task 7016df0e (flow c5ad9cb9): retrieving diagnostic output (try 0): started
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): retrieving result (try 0): started
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): transferring output (try 0): started
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:14 scheduler task 17dc4a40 (flow 66fb53f9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:addf1e55576a7e9cb6f4de6c2e3b02bab5a3981eb9cfb063f5ab11d7186def18 -> s3://niema-test/n100/r05/n100.r05.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:14  <-  n100.r05.s076.Main.cp_out_file 66fb53f9 ok   extern 0s 35.7MiB
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): promoting objects (try 0): started
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): retrieving diagnostic output (try 0): started
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): retrieving result (try 0): started
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:14 scheduler task c3dec1ba (flow 3194fd2a): transferring output (try 0): started
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloading (try 0): started
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloading list<val<.=2a342892 35.8MiB> 35.8MiB>
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloading val<.=44fbbfdd 35.4MiB>
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloading val<.=82356c8a 35.4MiB>
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloaded list<val<.=2a342892 35.8MiB> 35.8MiB>
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloaded val<.=44fbbfdd 35.4MiB>
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloaded val<.=82356c8a 35.4MiB>
2021/07/08 17:04:14 scheduler task 7016df0e (flow c5ad9cb9): unloading (try 0): successful, next state: complete
2021/07/08 17:04:14  <-  n100.r05.s007.Main.out_file c5ad9cb9 ok     exec 5m4s 35.8MiB
2021/07/08 17:04:14 n100.r05.s007.Main.out_file c5ad9cb9 n100/r05/n100.r05.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07565cc8ba531c021c057807325c880620c14abc78f19ae0a200ca468a65cea0
	sha256:c5ad9cb9e130cd2f90ce98afd27a28a5dc93570cbbec869fa6b04f372f5f5a0a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7016df0e19f62cf6f98700dec3fd02860fefd227935843f241125cd4c61f400f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s007_output"
	    wget -O "n100.r05.s007_output/n100.r05.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s007_output/n100.r05.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s007_output/n100.r05.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s007_output/n100.r05.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s007_output/n100.r05.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s007_output/n100.r05.s007.reference.fas" "n100.r05.s007_output/n100.r05.s007.fq1.fastq" "n100.r05.s007_output/n100.r05.s007.fq2.fastq" | samtools view -bS - > "n100.r05.s007_output/n100.r05.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s007_output/n100.r05.s007.untrimmed.sorted.bam" "n100.r05.s007_output/n100.r05.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s007_output/n100.r05.s007.untrimmed.sorted.bam" -b "n100.r05.s007_output/n100.r05.s007.primers.bed" -p "n100.r05.s007_output/n100.r05.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" "n100.r05.s007_output/n100.r05.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s007_output/n100.r05.s007.reference.fas" "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" > "n100.r05.s007_output/n100.r05.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s007_output/n100.r05.s007.reference.fas" --call-indels "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" > "n100.r05.s007_output/n100.r05.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s007_output/n100.r05.s007.trimmed.sorted.bam" > "n100.r05.s007_output/n100.r05.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s007_output/n100.r05.s007.depth.txt" "n100.r05.s007_output/n100.r05.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s007_output/n100.r05.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s007_output/n100.r05.s007.reference.fas" | bcftools consensus -m "n100.r05.s007_output/n100.r05.s007.low_depth.tsv" tmp.vcf.gz > "n100.r05.s007_output/n100.r05.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2a342892d6318e63f178d592ff99e03dbc534dc7c7eea5d33c09780b003d632c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=123.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:04:14 scheduler task 464c1dca (flow 69000a23): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s007.tar.gz resources {}
2021/07/08 17:04:14  ->  n100.r05.s007.Main.cp_out_file 69000a23 exec extern s3://niema-test/n100/r05/n100.r05.s007.tar.gz 35.8MiB
2021/07/08 17:04:14 scheduler task 91519b5f (flow b2cb8afe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:14 scheduler task 91519b5f (flow b2cb8afe): promoting objects (try 0): started
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): promoting objects (try 0): started
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloading (try 0): started
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloading list<val<.=083b85fb 35.7MiB> 35.7MiB>
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloading val<.=d94868d5 35.4MiB>
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloading val<.=6cc78b19 35.4MiB>
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): promoting objects (try 0): started
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): retrieving diagnostic output (try 0): started
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): retrieving diagnostic output (try 0): started
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloaded val<.=6cc78b19 35.4MiB>
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloaded list<val<.=083b85fb 35.7MiB> 35.7MiB>
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloaded val<.=d94868d5 35.4MiB>
2021/07/08 17:04:15 scheduler task c3dec1ba (flow 3194fd2a): unloading (try 0): successful, next state: complete
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:15  <-  n100.r05.s051.Main.out_file 3194fd2a ok     exec 5m5s 35.7MiB
2021/07/08 17:04:15 n100.r05.s051.Main.out_file 3194fd2a n100/r05/n100.r05.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4c2c137d91aeee63a072a00622e576098a398fe0e5bfcc5d4ce9f81e15d8b5ef
	sha256:3194fd2a8bc7470afa6d1275aebb2c6392fdc3896b0036a16cc6f6cdc3ae54ef
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3dec1baf3f8eaec087f74baf8d7a2a2196a9a09d68f1f04cac54037d005a06d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s051_output"
	    wget -O "n100.r05.s051_output/n100.r05.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s051_output/n100.r05.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s051_output/n100.r05.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s051_output/n100.r05.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s051_output/n100.r05.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s051_output/n100.r05.s051.reference.fas" "n100.r05.s051_output/n100.r05.s051.fq1.fastq" "n100.r05.s051_output/n100.r05.s051.fq2.fastq" | samtools view -bS - > "n100.r05.s051_output/n100.r05.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s051_output/n100.r05.s051.untrimmed.sorted.bam" "n100.r05.s051_output/n100.r05.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s051_output/n100.r05.s051.untrimmed.sorted.bam" -b "n100.r05.s051_output/n100.r05.s051.primers.bed" -p "n100.r05.s051_output/n100.r05.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" "n100.r05.s051_output/n100.r05.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s051_output/n100.r05.s051.reference.fas" "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" > "n100.r05.s051_output/n100.r05.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s051_output/n100.r05.s051.reference.fas" --call-indels "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" > "n100.r05.s051_output/n100.r05.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s051_output/n100.r05.s051.trimmed.sorted.bam" > "n100.r05.s051_output/n100.r05.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s051_output/n100.r05.s051.depth.txt" "n100.r05.s051_output/n100.r05.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s051_output/n100.r05.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s051_output/n100.r05.s051.reference.fas" | bcftools consensus -m "n100.r05.s051_output/n100.r05.s051.low_depth.tsv" tmp.vcf.gz > "n100.r05.s051_output/n100.r05.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:083b85fb113115d9844674e9ad4a3d7b90e9c32de15f31d2f1615b3e9f95ab22 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:15 scheduler task cb86d74c (flow c61b2e4c): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s051.tar.gz resources {}
2021/07/08 17:04:15  ->  n100.r05.s051.Main.cp_out_file c61b2e4c exec extern s3://niema-test/n100/r05/n100.r05.s051.tar.gz 35.7MiB
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): retrieving diagnostic output (try 0): started
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): retrieving result (try 0): started
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): retrieving result (try 0): started
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): transferring output (try 0): started
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): retrieving result (try 0): started
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): transferring output (try 0): started
2021/07/08 17:04:15 scheduler task 464c1dca (flow 69000a23): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2a342892d6318e63f178d592ff99e03dbc534dc7c7eea5d33c09780b003d632c -> s3://niema-test/n100/r05/n100.r05.s007.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:15  <-  n100.r05.s007.Main.cp_out_file 69000a23 ok   extern 0s 35.8MiB
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): transferring output (try 0): started
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloading (try 0): started
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloading list<val<.=f92cf09f 35.8MiB> 35.8MiB>
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloading val<.=f75047c0 35.4MiB>
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloading val<.=a7d2c084 35.4MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloading (try 0): started
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloading list<val<.=404ce038 35.7MiB> 35.7MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloading val<.=bec76111 35.4MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloading val<.=dfead196 35.4MiB>
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloaded val<.=f75047c0 35.4MiB>
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloaded val<.=a7d2c084 35.4MiB>
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloaded list<val<.=f92cf09f 35.8MiB> 35.8MiB>
2021/07/08 17:04:15 scheduler task 91519b5f (flow b2cb8afe): unloading (try 0): successful, next state: complete
2021/07/08 17:04:15  <-  n100.r05.s049.Main.out_file b2cb8afe ok     exec 5m5s 35.8MiB
2021/07/08 17:04:15 n100.r05.s049.Main.out_file b2cb8afe n100/r05/n100.r05.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e97ddea68c3a05af37834fde1f72a0ab3c9a2e9636541dbff49e66ae84e96db0
	sha256:b2cb8afea23d19bd49929f4dc5dd66283ca7f2b6cdeee011eb56213367b0739d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/91519b5f040275d236e2194b8ce856076d1c3cbf695b827c60266500cc228f89
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s049_output"
	    wget -O "n100.r05.s049_output/n100.r05.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s049_output/n100.r05.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s049_output/n100.r05.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s049_output/n100.r05.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s049_output/n100.r05.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s049_output/n100.r05.s049.reference.fas" "n100.r05.s049_output/n100.r05.s049.fq1.fastq" "n100.r05.s049_output/n100.r05.s049.fq2.fastq" | samtools view -bS - > "n100.r05.s049_output/n100.r05.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s049_output/n100.r05.s049.untrimmed.sorted.bam" "n100.r05.s049_output/n100.r05.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s049_output/n100.r05.s049.untrimmed.sorted.bam" -b "n100.r05.s049_output/n100.r05.s049.primers.bed" -p "n100.r05.s049_output/n100.r05.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" "n100.r05.s049_output/n100.r05.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s049_output/n100.r05.s049.reference.fas" "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" > "n100.r05.s049_output/n100.r05.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s049_output/n100.r05.s049.reference.fas" --call-indels "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" > "n100.r05.s049_output/n100.r05.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s049_output/n100.r05.s049.trimmed.sorted.bam" > "n100.r05.s049_output/n100.r05.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s049_output/n100.r05.s049.depth.txt" "n100.r05.s049_output/n100.r05.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s049_output/n100.r05.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s049_output/n100.r05.s049.reference.fas" | bcftools consensus -m "n100.r05.s049_output/n100.r05.s049.low_depth.tsv" tmp.vcf.gz > "n100.r05.s049_output/n100.r05.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f92cf09f54bee2188d72627414f222005034b101eca9749104bcb55d640ec069 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=127.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:15 scheduler task b53a355c (flow 9fcec444): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s049.tar.gz resources {}
2021/07/08 17:04:15  ->  n100.r05.s049.Main.cp_out_file 9fcec444 exec extern s3://niema-test/n100/r05/n100.r05.s049.tar.gz 35.8MiB
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): unloading (try 0): started
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): unloading list<val<.=b0fccbd1 35.7MiB> 35.7MiB>
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): unloading val<.=a63e3e02 35.4MiB>
2021/07/08 17:04:15 scheduler task 3a4d9596 (flow 6fa0a4b3): unloading val<.=fa0659eb 35.4MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloaded list<val<.=404ce038 35.7MiB> 35.7MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloaded val<.=dfead196 35.4MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloaded val<.=bec76111 35.4MiB>
2021/07/08 17:04:15 scheduler task 79820afa (flow c5f1bdef): unloading (try 0): successful, next state: complete
2021/07/08 17:04:15  <-  n100.r05.s069.Main.out_file c5f1bdef ok     exec 5m5s 35.7MiB
2021/07/08 17:04:15 n100.r05.s069.Main.out_file c5f1bdef n100/r05/n100.r05.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e6bf5d88daa7346d192a568ac9ee842e85f94e079122aba39b332da4b8cc15e
	sha256:c5f1bdef458cada49f04f71dd42e502f908e11069e69480451ddc6a4a346940d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79820afac966a9c7c709fd3a489b970c76b6f19d58e93fb3829247579bc47213
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s069_output"
	    wget -O "n100.r05.s069_output/n100.r05.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s069_output/n100.r05.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s069_output/n100.r05.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s069_output/n100.r05.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s069_output/n100.r05.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s069_output/n100.r05.s069.reference.fas" "n100.r05.s069_output/n100.r05.s069.fq1.fastq" "n100.r05.s069_output/n100.r05.s069.fq2.fastq" | samtools view -bS - > "n100.r05.s069_output/n100.r05.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s069_output/n100.r05.s069.untrimmed.sorted.bam" "n100.r05.s069_output/n100.r05.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s069_output/n100.r05.s069.untrimmed.sorted.bam" -b "n100.r05.s069_output/n100.r05.s069.primers.bed" -p "n100.r05.s069_output/n100.r05.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" "n100.r05.s069_output/n100.r05.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s069_output/n100.r05.s069.reference.fas" "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" > "n100.r05.s069_output/n100.r05.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s069_output/n100.r05.s069.reference.fas" --call-indels "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" > "n100.r05.s069_output/n100.r05.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s069_output/n100.r05.s069.trimmed.sorted.bam" > "n100.r05.s069_output/n100.r05.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s069_output/n100.r05.s069.depth.txt" "n100.r05.s069_output/n100.r05.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s069_output/n100.r05.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s069_output/n100.r05.s069.reference.fas" | bcftools consensus -m "n100.r05.s069_output/n100.r05.s069.low_depth.tsv" tmp.vcf.gz > "n100.r05.s069_output/n100.r05.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:404ce038680b12238db1230a94eb1f0edf927c9d9eb8261704c6bcea13edc6b8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=873B max=2.1KiB
2021/07/08 17:04:15 scheduler task 2fc4bef6 (flow 8722522a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s069.tar.gz resources {}
2021/07/08 17:04:15  ->  n100.r05.s069.Main.cp_out_file 8722522a exec extern s3://niema-test/n100/r05/n100.r05.s069.tar.gz 35.7MiB
2021/07/08 17:04:16 scheduler task 3a4d9596 (flow 6fa0a4b3): unloaded val<.=fa0659eb 35.4MiB>
2021/07/08 17:04:16 scheduler task 3a4d9596 (flow 6fa0a4b3): unloaded val<.=a63e3e02 35.4MiB>
2021/07/08 17:04:16 scheduler task 3a4d9596 (flow 6fa0a4b3): unloaded list<val<.=b0fccbd1 35.7MiB> 35.7MiB>
2021/07/08 17:04:16 scheduler task 3a4d9596 (flow 6fa0a4b3): unloading (try 0): successful, next state: complete
2021/07/08 17:04:16  <-  n100.r05.s033.Main.out_file 6fa0a4b3 ok     exec 5m5s 35.7MiB
2021/07/08 17:04:16 n100.r05.s033.Main.out_file 6fa0a4b3 n100/r05/n100.r05.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:590c4e4ee4f7e0b8b591fc5f111c68546c8e48d04ad852dfed83212d1941dcaf
	sha256:6fa0a4b3fdede99694b000c696f013d38a30b53f13f3b465eb97433f1435bc56
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a4d959669c08682091f633dc1269851eab280139179896f2e56a44cef5e2bbb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s033_output"
	    wget -O "n100.r05.s033_output/n100.r05.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s033_output/n100.r05.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s033_output/n100.r05.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s033_output/n100.r05.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s033_output/n100.r05.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s033_output/n100.r05.s033.reference.fas" "n100.r05.s033_output/n100.r05.s033.fq1.fastq" "n100.r05.s033_output/n100.r05.s033.fq2.fastq" | samtools view -bS - > "n100.r05.s033_output/n100.r05.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s033_output/n100.r05.s033.untrimmed.sorted.bam" "n100.r05.s033_output/n100.r05.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s033_output/n100.r05.s033.untrimmed.sorted.bam" -b "n100.r05.s033_output/n100.r05.s033.primers.bed" -p "n100.r05.s033_output/n100.r05.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" "n100.r05.s033_output/n100.r05.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s033_output/n100.r05.s033.reference.fas" "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" > "n100.r05.s033_output/n100.r05.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s033_output/n100.r05.s033.reference.fas" --call-indels "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" > "n100.r05.s033_output/n100.r05.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s033_output/n100.r05.s033.trimmed.sorted.bam" > "n100.r05.s033_output/n100.r05.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s033_output/n100.r05.s033.depth.txt" "n100.r05.s033_output/n100.r05.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s033_output/n100.r05.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s033_output/n100.r05.s033.reference.fas" | bcftools consensus -m "n100.r05.s033_output/n100.r05.s033.low_depth.tsv" tmp.vcf.gz > "n100.r05.s033_output/n100.r05.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b0fccbd1ee6664ce8f38459a72db2e2b92700836df8ffaca66690cca115585a2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=870B max=2.0KiB
2021/07/08 17:04:16 scheduler task 7e1b75ac (flow 9c6da467): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s033.tar.gz resources {}
2021/07/08 17:04:16  ->  n100.r05.s033.Main.cp_out_file 9c6da467 exec extern s3://niema-test/n100/r05/n100.r05.s033.tar.gz 35.7MiB
2021/07/08 17:04:16 scheduler task cb86d74c (flow c61b2e4c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:083b85fb113115d9844674e9ad4a3d7b90e9c32de15f31d2f1615b3e9f95ab22 -> s3://niema-test/n100/r05/n100.r05.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:16  <-  n100.r05.s051.Main.cp_out_file c61b2e4c ok   extern 0s 35.7MiB
2021/07/08 17:04:16 scheduler task b53a355c (flow 9fcec444): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f92cf09f54bee2188d72627414f222005034b101eca9749104bcb55d640ec069 -> s3://niema-test/n100/r05/n100.r05.s049.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:16  <-  n100.r05.s049.Main.cp_out_file 9fcec444 ok   extern 0s 35.8MiB
2021/07/08 17:04:16 scheduler task 2fc4bef6 (flow 8722522a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:404ce038680b12238db1230a94eb1f0edf927c9d9eb8261704c6bcea13edc6b8 -> s3://niema-test/n100/r05/n100.r05.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:16  <-  n100.r05.s069.Main.cp_out_file 8722522a ok   extern 0s 35.7MiB
2021/07/08 17:04:16 scheduler task 7e1b75ac (flow 9c6da467): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b0fccbd1ee6664ce8f38459a72db2e2b92700836df8ffaca66690cca115585a2 -> s3://niema-test/n100/r05/n100.r05.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:16  <-  n100.r05.s033.Main.cp_out_file 9c6da467 ok   extern 0s 35.7MiB
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): promoting objects (try 0): started
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): retrieving diagnostic output (try 0): started
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): retrieving result (try 0): started
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:17 scheduler task 8772ed6d (flow 8fb434f6): transferring output (try 0): started
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): promoting objects (try 0): started
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloading (try 0): started
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloading list<val<.=35304939 35.7MiB> 35.7MiB>
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloading val<.=ba16a0f8 35.4MiB>
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloading val<.=2f96c79a 35.4MiB>
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): retrieving diagnostic output (try 0): started
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloaded list<val<.=35304939 35.7MiB> 35.7MiB>
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloaded val<.=2f96c79a 35.4MiB>
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloaded val<.=ba16a0f8 35.4MiB>
2021/07/08 17:04:18 scheduler task 8772ed6d (flow 8fb434f6): unloading (try 0): successful, next state: complete
2021/07/08 17:04:18  <-  n100.r05.s035.Main.out_file 8fb434f6 ok     exec 5m7s 35.7MiB
2021/07/08 17:04:18 n100.r05.s035.Main.out_file 8fb434f6 n100/r05/n100.r05.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:70088c0f1f7e9a0804511667a76644bc5724e2cc0f1dcd236a0e6aeda4bfd375
	sha256:8fb434f672694a43ad1dc081ca937905da66935ac70a7d5e9060742f3943fff2
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8772ed6d836d3f9a4d3858fb4c0003bcd8a017983ebadc9de0b83bcc8ad88b5b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s035_output"
	    wget -O "n100.r05.s035_output/n100.r05.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s035_output/n100.r05.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s035_output/n100.r05.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s035_output/n100.r05.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s035_output/n100.r05.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s035_output/n100.r05.s035.reference.fas" "n100.r05.s035_output/n100.r05.s035.fq1.fastq" "n100.r05.s035_output/n100.r05.s035.fq2.fastq" | samtools view -bS - > "n100.r05.s035_output/n100.r05.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s035_output/n100.r05.s035.untrimmed.sorted.bam" "n100.r05.s035_output/n100.r05.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s035_output/n100.r05.s035.untrimmed.sorted.bam" -b "n100.r05.s035_output/n100.r05.s035.primers.bed" -p "n100.r05.s035_output/n100.r05.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" "n100.r05.s035_output/n100.r05.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s035_output/n100.r05.s035.reference.fas" "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" > "n100.r05.s035_output/n100.r05.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s035_output/n100.r05.s035.reference.fas" --call-indels "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" > "n100.r05.s035_output/n100.r05.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s035_output/n100.r05.s035.trimmed.sorted.bam" > "n100.r05.s035_output/n100.r05.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s035_output/n100.r05.s035.depth.txt" "n100.r05.s035_output/n100.r05.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s035_output/n100.r05.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s035_output/n100.r05.s035.reference.fas" | bcftools consensus -m "n100.r05.s035_output/n100.r05.s035.low_depth.tsv" tmp.vcf.gz > "n100.r05.s035_output/n100.r05.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:35304939c4772e0db8fc37ad0e72a84f804343f348e09130875a0b722427fe32 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=125.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:18 scheduler task 07e36afd (flow 55a9b804): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s035.tar.gz resources {}
2021/07/08 17:04:18  ->  n100.r05.s035.Main.cp_out_file 55a9b804 exec extern s3://niema-test/n100/r05/n100.r05.s035.tar.gz 35.7MiB
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): retrieving result (try 0): started
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:18 scheduler task 83c1b665 (flow 9dafcfc9): transferring output (try 0): started
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): promoting objects (try 0): started
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): retrieving diagnostic output (try 0): started
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): retrieving result (try 0): started
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): transferring output (try 0): started
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloading (try 0): started
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloading list<val<.=53aa970e 35.7MiB> 35.7MiB>
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloading val<.=2abd9b31 35.4MiB>
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloading val<.=6fd1d01a 35.4MiB>
2021/07/08 17:04:19 scheduler task 07e36afd (flow 55a9b804): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:35304939c4772e0db8fc37ad0e72a84f804343f348e09130875a0b722427fe32 -> s3://niema-test/n100/r05/n100.r05.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:19  <-  n100.r05.s035.Main.cp_out_file 55a9b804 ok   extern 0s 35.7MiB
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloaded val<.=6fd1d01a 35.4MiB>
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloaded val<.=2abd9b31 35.4MiB>
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloaded list<val<.=53aa970e 35.7MiB> 35.7MiB>
2021/07/08 17:04:19 scheduler task 83c1b665 (flow 9dafcfc9): unloading (try 0): successful, next state: complete
2021/07/08 17:04:19  <-  n100.r05.s029.Main.out_file 9dafcfc9 ok     exec 4m58s 35.7MiB
2021/07/08 17:04:19 n100.r05.s029.Main.out_file 9dafcfc9 n100/r05/n100.r05.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f93c7d0de633c4e814acc0b50d6d86ce20632991f86161b7a9c3ae0092934f3
	sha256:9dafcfc9db780d676255a43604233a0e2bc095c987b74d7ad83c5f866f2d17af
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83c1b6655ff9cf231024a8207829ef53d0baa6d2a0fe15822b07b47a93f2ebc7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s029_output"
	    wget -O "n100.r05.s029_output/n100.r05.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s029_output/n100.r05.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s029_output/n100.r05.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s029_output/n100.r05.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s029_output/n100.r05.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s029_output/n100.r05.s029.reference.fas" "n100.r05.s029_output/n100.r05.s029.fq1.fastq" "n100.r05.s029_output/n100.r05.s029.fq2.fastq" | samtools view -bS - > "n100.r05.s029_output/n100.r05.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s029_output/n100.r05.s029.untrimmed.sorted.bam" "n100.r05.s029_output/n100.r05.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s029_output/n100.r05.s029.untrimmed.sorted.bam" -b "n100.r05.s029_output/n100.r05.s029.primers.bed" -p "n100.r05.s029_output/n100.r05.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" "n100.r05.s029_output/n100.r05.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s029_output/n100.r05.s029.reference.fas" "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" > "n100.r05.s029_output/n100.r05.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s029_output/n100.r05.s029.reference.fas" --call-indels "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" > "n100.r05.s029_output/n100.r05.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s029_output/n100.r05.s029.trimmed.sorted.bam" > "n100.r05.s029_output/n100.r05.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s029_output/n100.r05.s029.depth.txt" "n100.r05.s029_output/n100.r05.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s029_output/n100.r05.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s029_output/n100.r05.s029.reference.fas" | bcftools consensus -m "n100.r05.s029_output/n100.r05.s029.low_depth.tsv" tmp.vcf.gz > "n100.r05.s029_output/n100.r05.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:53aa970ef8dfc8623898621b036539a8b980046f73e5a9986b0ac538fbfd2936 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=129.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:04:19 scheduler task 44c1d964 (flow d96c4f6c): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s029.tar.gz resources {}
2021/07/08 17:04:19  ->  n100.r05.s029.Main.cp_out_file d96c4f6c exec extern s3://niema-test/n100/r05/n100.r05.s029.tar.gz 35.7MiB
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): unloading (try 0): started
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): unloading list<val<.=3dacec89 35.7MiB> 35.7MiB>
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): unloading val<.=d5db7d84 35.4MiB>
2021/07/08 17:04:19 scheduler task f766d6ff (flow 2796e3e6): unloading val<.=af10cc71 35.4MiB>
2021/07/08 17:04:20 scheduler task f766d6ff (flow 2796e3e6): unloaded val<.=af10cc71 35.4MiB>
2021/07/08 17:04:20 scheduler task f766d6ff (flow 2796e3e6): unloaded list<val<.=3dacec89 35.7MiB> 35.7MiB>
2021/07/08 17:04:20 scheduler task f766d6ff (flow 2796e3e6): unloaded val<.=d5db7d84 35.4MiB>
2021/07/08 17:04:20 scheduler task f766d6ff (flow 2796e3e6): unloading (try 0): successful, next state: complete
2021/07/08 17:04:20  <-  n100.r05.s004.Main.out_file 2796e3e6 ok     exec 4m59s 35.7MiB
2021/07/08 17:04:20 n100.r05.s004.Main.out_file 2796e3e6 n100/r05/n100.r05.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5978dde1b61e19e6c5af888ab8a2e7255f60984b426ecc1d739798e831e80301
	sha256:2796e3e67478a4623e6793a3c485b6bb012d71d06fd368d3677c803eb303b272
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f766d6ff9a0a848ac63f84a4d31a44f0b1b6204899111b6303a4b35802559602
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s004_output"
	    wget -O "n100.r05.s004_output/n100.r05.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s004_output/n100.r05.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s004_output/n100.r05.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s004_output/n100.r05.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s004_output/n100.r05.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s004_output/n100.r05.s004.reference.fas" "n100.r05.s004_output/n100.r05.s004.fq1.fastq" "n100.r05.s004_output/n100.r05.s004.fq2.fastq" | samtools view -bS - > "n100.r05.s004_output/n100.r05.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s004_output/n100.r05.s004.untrimmed.sorted.bam" "n100.r05.s004_output/n100.r05.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s004_output/n100.r05.s004.untrimmed.sorted.bam" -b "n100.r05.s004_output/n100.r05.s004.primers.bed" -p "n100.r05.s004_output/n100.r05.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" "n100.r05.s004_output/n100.r05.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s004_output/n100.r05.s004.reference.fas" "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" > "n100.r05.s004_output/n100.r05.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s004_output/n100.r05.s004.reference.fas" --call-indels "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" > "n100.r05.s004_output/n100.r05.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s004_output/n100.r05.s004.trimmed.sorted.bam" > "n100.r05.s004_output/n100.r05.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s004_output/n100.r05.s004.depth.txt" "n100.r05.s004_output/n100.r05.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s004_output/n100.r05.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s004_output/n100.r05.s004.reference.fas" | bcftools consensus -m "n100.r05.s004_output/n100.r05.s004.low_depth.tsv" tmp.vcf.gz > "n100.r05.s004_output/n100.r05.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3dacec89aec2a5e45140146a2cc411d4f02211a8c7c073a74f629697f071a0e8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=125.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:04:20 scheduler task 0c20fba3 (flow 025f583c): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s004.tar.gz resources {}
2021/07/08 17:04:20  ->  n100.r05.s004.Main.cp_out_file 025f583c exec extern s3://niema-test/n100/r05/n100.r05.s004.tar.gz 35.7MiB
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): promoting objects (try 0): started
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): retrieving diagnostic output (try 0): started
2021/07/08 17:04:20 scheduler task 44c1d964 (flow d96c4f6c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:53aa970ef8dfc8623898621b036539a8b980046f73e5a9986b0ac538fbfd2936 -> s3://niema-test/n100/r05/n100.r05.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:20  <-  n100.r05.s029.Main.cp_out_file d96c4f6c ok   extern 0s 35.7MiB
2021/07/08 17:04:20 scheduler task 9f62f6f9 (flow 900dcaae): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:20 scheduler task d3dae4b0 (flow f18c9534): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:20 scheduler task 9f62f6f9 (flow 900dcaae): promoting objects (try 0): started
2021/07/08 17:04:20 scheduler task d3dae4b0 (flow f18c9534): promoting objects (try 0): started
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): retrieving result (try 0): started
2021/07/08 17:04:20 scheduler task 9f62f6f9 (flow 900dcaae): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:20 scheduler task 9f62f6f9 (flow 900dcaae): retrieving diagnostic output (try 0): started
2021/07/08 17:04:20 scheduler task d3dae4b0 (flow f18c9534): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:20 scheduler task 9a6015b6 (flow 9f6cdb6e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:20 scheduler task 0c20fba3 (flow 025f583c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3dacec89aec2a5e45140146a2cc411d4f02211a8c7c073a74f629697f071a0e8 -> s3://niema-test/n100/r05/n100.r05.s004.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:20  <-  n100.r05.s004.Main.cp_out_file 025f583c ok   extern 0s 35.7MiB
2021/07/08 17:04:20 scheduler task 9f62f6f9 (flow 900dcaae): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:20 scheduler task d3dae4b0 (flow f18c9534): retrieving diagnostic output (try 0): started
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): transferring output (try 0): started
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): retrieving result (try 0): started
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): retrieving result (try 0): started
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): transferring output (try 0): started
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): transferring output (try 0): started
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloading (try 0): started
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloading list<val<.=91aa0751 35.7MiB> 35.7MiB>
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloading val<.=c132cefd 35.4MiB>
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloading val<.=f8652671 35.4MiB>
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloaded list<val<.=91aa0751 35.7MiB> 35.7MiB>
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloaded val<.=f8652671 35.4MiB>
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloaded val<.=c132cefd 35.4MiB>
2021/07/08 17:04:21 scheduler task 9a6015b6 (flow 9f6cdb6e): unloading (try 0): successful, next state: complete
2021/07/08 17:04:21  <-  n100.r05.s002.Main.out_file 9f6cdb6e ok     exec 5m0s 35.7MiB
2021/07/08 17:04:21 n100.r05.s002.Main.out_file 9f6cdb6e n100/r05/n100.r05.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b87e047e86794fafa0381ef5bbe9c05d96882ff196cc89cb9e148e547249620c
	sha256:9f6cdb6ea9fe1ad093d122664f13cdadb41ea9ca6887648966555396bf6cfcad
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a6015b62e21f025687368c1ec4abd8aadd4992e64efdc093a85ff35e4091b78
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s002_output"
	    wget -O "n100.r05.s002_output/n100.r05.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s002_output/n100.r05.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s002_output/n100.r05.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s002_output/n100.r05.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s002_output/n100.r05.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s002_output/n100.r05.s002.reference.fas" "n100.r05.s002_output/n100.r05.s002.fq1.fastq" "n100.r05.s002_output/n100.r05.s002.fq2.fastq" | samtools view -bS - > "n100.r05.s002_output/n100.r05.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s002_output/n100.r05.s002.untrimmed.sorted.bam" "n100.r05.s002_output/n100.r05.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s002_output/n100.r05.s002.untrimmed.sorted.bam" -b "n100.r05.s002_output/n100.r05.s002.primers.bed" -p "n100.r05.s002_output/n100.r05.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" "n100.r05.s002_output/n100.r05.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s002_output/n100.r05.s002.reference.fas" "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" > "n100.r05.s002_output/n100.r05.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s002_output/n100.r05.s002.reference.fas" --call-indels "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" > "n100.r05.s002_output/n100.r05.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s002_output/n100.r05.s002.trimmed.sorted.bam" > "n100.r05.s002_output/n100.r05.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s002_output/n100.r05.s002.depth.txt" "n100.r05.s002_output/n100.r05.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s002_output/n100.r05.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s002_output/n100.r05.s002.reference.fas" | bcftools consensus -m "n100.r05.s002_output/n100.r05.s002.low_depth.tsv" tmp.vcf.gz > "n100.r05.s002_output/n100.r05.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:91aa0751b85e59c4bf53edd54a5c392cc33e749a73ea32d8da3ae5831c8de726 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=125.8MiB
	    disk mean=9.1MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:04:21 scheduler task c7a27a43 (flow ed5de540): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s002.tar.gz resources {}
2021/07/08 17:04:21  ->  n100.r05.s002.Main.cp_out_file ed5de540 exec extern s3://niema-test/n100/r05/n100.r05.s002.tar.gz 35.7MiB
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloading (try 0): started
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloading list<val<.=d7fe5fc7 35.7MiB> 35.7MiB>
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloading val<.=99893167 35.4MiB>
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloading val<.=ea7025bb 35.4MiB>
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloading (try 0): started
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloading list<val<.=fdd88953 35.7MiB> 35.7MiB>
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloading val<.=248a0a5c 35.4MiB>
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloading val<.=6ef34f12 35.4MiB>
2021/07/08 17:04:21 scheduler task 3f52d60b (flow 176763f6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:21 scheduler task 3f52d60b (flow 176763f6): promoting objects (try 0): started
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloaded val<.=99893167 35.4MiB>
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloaded list<val<.=d7fe5fc7 35.7MiB> 35.7MiB>
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloaded val<.=ea7025bb 35.4MiB>
2021/07/08 17:04:21 scheduler task 9f62f6f9 (flow 900dcaae): unloading (try 0): successful, next state: complete
2021/07/08 17:04:21  <-  n100.r05.s034.Main.out_file 900dcaae ok     exec 5m1s 35.7MiB
2021/07/08 17:04:21 n100.r05.s034.Main.out_file 900dcaae n100/r05/n100.r05.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:981a0132f5f3dd650fa4ce4fa2f34abe481db588be27837b4f2d52e02a20b89e
	sha256:900dcaae625eaf7114644adcfd9401ba879bfb339e503441dd951510e7f17c1b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9f62f6f9e0d2e40fdb065910c0ab22dd85e1d2675b3e341df20ccde376412313
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s034_output"
	    wget -O "n100.r05.s034_output/n100.r05.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s034_output/n100.r05.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s034_output/n100.r05.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s034_output/n100.r05.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s034_output/n100.r05.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s034_output/n100.r05.s034.reference.fas" "n100.r05.s034_output/n100.r05.s034.fq1.fastq" "n100.r05.s034_output/n100.r05.s034.fq2.fastq" | samtools view -bS - > "n100.r05.s034_output/n100.r05.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s034_output/n100.r05.s034.untrimmed.sorted.bam" "n100.r05.s034_output/n100.r05.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s034_output/n100.r05.s034.untrimmed.sorted.bam" -b "n100.r05.s034_output/n100.r05.s034.primers.bed" -p "n100.r05.s034_output/n100.r05.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" "n100.r05.s034_output/n100.r05.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s034_output/n100.r05.s034.reference.fas" "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" > "n100.r05.s034_output/n100.r05.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s034_output/n100.r05.s034.reference.fas" --call-indels "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" > "n100.r05.s034_output/n100.r05.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s034_output/n100.r05.s034.trimmed.sorted.bam" > "n100.r05.s034_output/n100.r05.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s034_output/n100.r05.s034.depth.txt" "n100.r05.s034_output/n100.r05.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s034_output/n100.r05.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s034_output/n100.r05.s034.reference.fas" | bcftools consensus -m "n100.r05.s034_output/n100.r05.s034.low_depth.tsv" tmp.vcf.gz > "n100.r05.s034_output/n100.r05.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d7fe5fc748b193d6738cb572cade97bb7a5d3230a28782ae8030b3ef20047e11 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=127.4MiB
	    disk mean=7.9MiB max=35.7MiB
	    tmp mean=346B max=1.0KiB
2021/07/08 17:04:21 scheduler task 2acc67cf (flow 9b4c42a5): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s034.tar.gz resources {}
2021/07/08 17:04:21  ->  n100.r05.s034.Main.cp_out_file 9b4c42a5 exec extern s3://niema-test/n100/r05/n100.r05.s034.tar.gz 35.7MiB
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloaded list<val<.=fdd88953 35.7MiB> 35.7MiB>
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloaded val<.=6ef34f12 35.4MiB>
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloaded val<.=248a0a5c 35.4MiB>
2021/07/08 17:04:21 scheduler task d3dae4b0 (flow f18c9534): unloading (try 0): successful, next state: complete
2021/07/08 17:04:21  <-  n100.r05.s018.Main.out_file f18c9534 ok     exec 5m1s 35.7MiB
2021/07/08 17:04:21 n100.r05.s018.Main.out_file f18c9534 n100/r05/n100.r05.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1365089ce0b015c86ff82c8f2d089d20552bb735d8aa57146cc524e01efd446
	sha256:f18c9534e4ca7bc33bc763f540a23f6ce5867df704f400b900170da4234cc6d6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3dae4b0d2829e66e2815b3cde0c26782936e29f385a56af97393d5301400f3e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s018_output"
	    wget -O "n100.r05.s018_output/n100.r05.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s018_output/n100.r05.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s018_output/n100.r05.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s018_output/n100.r05.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s018_output/n100.r05.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s018_output/n100.r05.s018.reference.fas" "n100.r05.s018_output/n100.r05.s018.fq1.fastq" "n100.r05.s018_output/n100.r05.s018.fq2.fastq" | samtools view -bS - > "n100.r05.s018_output/n100.r05.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s018_output/n100.r05.s018.untrimmed.sorted.bam" "n100.r05.s018_output/n100.r05.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s018_output/n100.r05.s018.untrimmed.sorted.bam" -b "n100.r05.s018_output/n100.r05.s018.primers.bed" -p "n100.r05.s018_output/n100.r05.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" "n100.r05.s018_output/n100.r05.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s018_output/n100.r05.s018.reference.fas" "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" > "n100.r05.s018_output/n100.r05.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s018_output/n100.r05.s018.reference.fas" --call-indels "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" > "n100.r05.s018_output/n100.r05.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s018_output/n100.r05.s018.trimmed.sorted.bam" > "n100.r05.s018_output/n100.r05.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s018_output/n100.r05.s018.depth.txt" "n100.r05.s018_output/n100.r05.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s018_output/n100.r05.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s018_output/n100.r05.s018.reference.fas" | bcftools consensus -m "n100.r05.s018_output/n100.r05.s018.low_depth.tsv" tmp.vcf.gz > "n100.r05.s018_output/n100.r05.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fdd889530050064947d2720d4a9b0730be1678683c30ac4e7d41ad702599a3eb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=127.8MiB
	    disk mean=8.7MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 17:04:21 scheduler task 54c48413 (flow f43f783c): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s018.tar.gz resources {}
2021/07/08 17:04:21  ->  n100.r05.s018.Main.cp_out_file f43f783c exec extern s3://niema-test/n100/r05/n100.r05.s018.tar.gz 35.7MiB
2021/07/08 17:04:21 scheduler task 3f52d60b (flow 176763f6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:21 scheduler task 3f52d60b (flow 176763f6): retrieving diagnostic output (try 0): started
2021/07/08 17:04:21 scheduler task 3f52d60b (flow 176763f6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:21 scheduler task 3f52d60b (flow 176763f6): retrieving result (try 0): started
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): transferring output (try 0): started
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): promoting objects (try 0): started
2021/07/08 17:04:22 scheduler task c7a27a43 (flow ed5de540): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:91aa0751b85e59c4bf53edd54a5c392cc33e749a73ea32d8da3ae5831c8de726 -> s3://niema-test/n100/r05/n100.r05.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:22  <-  n100.r05.s002.Main.cp_out_file ed5de540 ok   extern 0s 35.7MiB
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): retrieving diagnostic output (try 0): started
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): retrieving result (try 0): started
2021/07/08 17:04:22 scheduler task 2acc67cf (flow 9b4c42a5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d7fe5fc748b193d6738cb572cade97bb7a5d3230a28782ae8030b3ef20047e11 -> s3://niema-test/n100/r05/n100.r05.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:22  <-  n100.r05.s034.Main.cp_out_file 9b4c42a5 ok   extern 0s 35.7MiB
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): promoting objects (try 0): started
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloading (try 0): started
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloading list<val<.=ed532d94 35.8MiB> 35.8MiB>
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloading val<.=afef4faf 35.4MiB>
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloading val<.=e0d1074c 35.4MiB>
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:22 scheduler task 5db678a8 (flow a4b5dc91): transferring output (try 0): started
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): retrieving diagnostic output (try 0): started
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloaded list<val<.=ed532d94 35.8MiB> 35.8MiB>
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloaded val<.=e0d1074c 35.4MiB>
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloaded val<.=afef4faf 35.4MiB>
2021/07/08 17:04:22 scheduler task 3f52d60b (flow 176763f6): unloading (try 0): successful, next state: complete
2021/07/08 17:04:22  <-  n100.r05.s022.Main.out_file 176763f6 ok     exec 5m2s 35.8MiB
2021/07/08 17:04:22 n100.r05.s022.Main.out_file 176763f6 n100/r05/n100.r05.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0fc2b0f5bb29a17d0262e6c01524db4ffaa124655c59283b94dcd7b5cbee8ce8
	sha256:176763f6a4cee4ac0b62b08a55a3e432a60a3543dafaea24dc84486775bd57bd
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3f52d60bc815cbc67cf34c7daba152c4a96a3a1e6e1a53b510797ec882bbfdbb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s022_output"
	    wget -O "n100.r05.s022_output/n100.r05.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s022_output/n100.r05.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s022_output/n100.r05.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s022_output/n100.r05.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s022_output/n100.r05.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s022_output/n100.r05.s022.reference.fas" "n100.r05.s022_output/n100.r05.s022.fq1.fastq" "n100.r05.s022_output/n100.r05.s022.fq2.fastq" | samtools view -bS - > "n100.r05.s022_output/n100.r05.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s022_output/n100.r05.s022.untrimmed.sorted.bam" "n100.r05.s022_output/n100.r05.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s022_output/n100.r05.s022.untrimmed.sorted.bam" -b "n100.r05.s022_output/n100.r05.s022.primers.bed" -p "n100.r05.s022_output/n100.r05.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" "n100.r05.s022_output/n100.r05.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s022_output/n100.r05.s022.reference.fas" "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" > "n100.r05.s022_output/n100.r05.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s022_output/n100.r05.s022.reference.fas" --call-indels "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" > "n100.r05.s022_output/n100.r05.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s022_output/n100.r05.s022.trimmed.sorted.bam" > "n100.r05.s022_output/n100.r05.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s022_output/n100.r05.s022.depth.txt" "n100.r05.s022_output/n100.r05.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s022_output/n100.r05.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s022_output/n100.r05.s022.reference.fas" | bcftools consensus -m "n100.r05.s022_output/n100.r05.s022.low_depth.tsv" tmp.vcf.gz > "n100.r05.s022_output/n100.r05.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ed532d9411f07f6d7051446d14e4f95b7c817f1263099067943714158e3fe87e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=127.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 17:04:22 scheduler task 9b5dc3b7 (flow 01b53624): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s022.tar.gz resources {}
2021/07/08 17:04:22  ->  n100.r05.s022.Main.cp_out_file 01b53624 exec extern s3://niema-test/n100/r05/n100.r05.s022.tar.gz 35.8MiB
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): retrieving result (try 0): started
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:22 scheduler task 54c48413 (flow f43f783c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fdd889530050064947d2720d4a9b0730be1678683c30ac4e7d41ad702599a3eb -> s3://niema-test/n100/r05/n100.r05.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:22  <-  n100.r05.s018.Main.cp_out_file f43f783c ok   extern 0s 35.7MiB
2021/07/08 17:04:22 scheduler task 93e71401 (flow 4e7609db): transferring output (try 0): started
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloading (try 0): started
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloading list<val<.=71fbdb89 35.7MiB> 35.7MiB>
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloading val<.=4c722808 35.4MiB>
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloading val<.=49e4acab 35.4MiB>
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloaded val<.=49e4acab 35.4MiB>
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloaded val<.=4c722808 35.4MiB>
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloaded list<val<.=71fbdb89 35.7MiB> 35.7MiB>
2021/07/08 17:04:23 scheduler task 5db678a8 (flow a4b5dc91): unloading (try 0): successful, next state: complete
2021/07/08 17:04:23  <-  n100.r05.s070.Main.out_file a4b5dc91 ok     exec 5m2s 35.7MiB
2021/07/08 17:04:23 n100.r05.s070.Main.out_file a4b5dc91 n100/r05/n100.r05.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7aede367463f12ea40f47cd344b309ce031fe9c4b4765991587a19c6cea7d45e
	sha256:a4b5dc9165462cc97e848584be496add5d0d08dc04f9bc8c035c1e258995ff6d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5db678a82d452768dede0b7e60bdd027095d1a0ac20ac4b3d8f0b57707dc9f11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s070_output"
	    wget -O "n100.r05.s070_output/n100.r05.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s070_output/n100.r05.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s070_output/n100.r05.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s070_output/n100.r05.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s070_output/n100.r05.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s070_output/n100.r05.s070.reference.fas" "n100.r05.s070_output/n100.r05.s070.fq1.fastq" "n100.r05.s070_output/n100.r05.s070.fq2.fastq" | samtools view -bS - > "n100.r05.s070_output/n100.r05.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s070_output/n100.r05.s070.untrimmed.sorted.bam" "n100.r05.s070_output/n100.r05.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s070_output/n100.r05.s070.untrimmed.sorted.bam" -b "n100.r05.s070_output/n100.r05.s070.primers.bed" -p "n100.r05.s070_output/n100.r05.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" "n100.r05.s070_output/n100.r05.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s070_output/n100.r05.s070.reference.fas" "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" > "n100.r05.s070_output/n100.r05.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s070_output/n100.r05.s070.reference.fas" --call-indels "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" > "n100.r05.s070_output/n100.r05.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s070_output/n100.r05.s070.trimmed.sorted.bam" > "n100.r05.s070_output/n100.r05.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s070_output/n100.r05.s070.depth.txt" "n100.r05.s070_output/n100.r05.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s070_output/n100.r05.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s070_output/n100.r05.s070.reference.fas" | bcftools consensus -m "n100.r05.s070_output/n100.r05.s070.low_depth.tsv" tmp.vcf.gz > "n100.r05.s070_output/n100.r05.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:71fbdb894be3642356f6505d96aba66aa22420c38e0963db013910c669d49f5b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.3MiB max=128.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:04:23 scheduler task ef6d3ec1 (flow e1fcded5): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s070.tar.gz resources {}
2021/07/08 17:04:23  ->  n100.r05.s070.Main.cp_out_file e1fcded5 exec extern s3://niema-test/n100/r05/n100.r05.s070.tar.gz 35.7MiB
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloading (try 0): started
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloading list<val<.=8efa81b8 35.7MiB> 35.7MiB>
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloading val<.=254e77a9 35.4MiB>
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloading val<.=81241cc4 35.4MiB>
2021/07/08 17:04:23 scheduler task 9b5dc3b7 (flow 01b53624): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ed532d9411f07f6d7051446d14e4f95b7c817f1263099067943714158e3fe87e -> s3://niema-test/n100/r05/n100.r05.s022.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:23  <-  n100.r05.s022.Main.cp_out_file 01b53624 ok   extern 0s 35.8MiB
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloaded list<val<.=8efa81b8 35.7MiB> 35.7MiB>
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloaded val<.=81241cc4 35.4MiB>
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloaded val<.=254e77a9 35.4MiB>
2021/07/08 17:04:23 scheduler task 93e71401 (flow 4e7609db): unloading (try 0): successful, next state: complete
2021/07/08 17:04:23  <-  n100.r05.s011.Main.out_file 4e7609db ok     exec 4m57s 35.7MiB
2021/07/08 17:04:23 n100.r05.s011.Main.out_file 4e7609db n100/r05/n100.r05.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:483ee3ad182aa20980144aaa3674b2c0b08933912de64ab5a80e698814df9917
	sha256:4e7609db831ce21cb7fee28f6a9a796f22aa6afe864eaa9996b27120665ef57e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/93e714011948925cfc847cef885a8ecf1d32e071593138f56b6f47c8371975c4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s011_output"
	    wget -O "n100.r05.s011_output/n100.r05.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s011_output/n100.r05.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s011_output/n100.r05.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s011_output/n100.r05.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s011_output/n100.r05.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s011_output/n100.r05.s011.reference.fas" "n100.r05.s011_output/n100.r05.s011.fq1.fastq" "n100.r05.s011_output/n100.r05.s011.fq2.fastq" | samtools view -bS - > "n100.r05.s011_output/n100.r05.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s011_output/n100.r05.s011.untrimmed.sorted.bam" "n100.r05.s011_output/n100.r05.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s011_output/n100.r05.s011.untrimmed.sorted.bam" -b "n100.r05.s011_output/n100.r05.s011.primers.bed" -p "n100.r05.s011_output/n100.r05.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" "n100.r05.s011_output/n100.r05.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s011_output/n100.r05.s011.reference.fas" "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" > "n100.r05.s011_output/n100.r05.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s011_output/n100.r05.s011.reference.fas" --call-indels "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" > "n100.r05.s011_output/n100.r05.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s011_output/n100.r05.s011.trimmed.sorted.bam" > "n100.r05.s011_output/n100.r05.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s011_output/n100.r05.s011.depth.txt" "n100.r05.s011_output/n100.r05.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s011_output/n100.r05.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s011_output/n100.r05.s011.reference.fas" | bcftools consensus -m "n100.r05.s011_output/n100.r05.s011.low_depth.tsv" tmp.vcf.gz > "n100.r05.s011_output/n100.r05.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8efa81b8f47d25ff9bf8f763575d11999d8daf8abfdc1b42f50a2ca085011670 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=132.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:04:23 scheduler task b2b0c9b7 (flow f4296ebb): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s011.tar.gz resources {}
2021/07/08 17:04:23  ->  n100.r05.s011.Main.cp_out_file f4296ebb exec extern s3://niema-test/n100/r05/n100.r05.s011.tar.gz 35.7MiB
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): promoting objects (try 0): started
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): retrieving diagnostic output (try 0): started
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): retrieving result (try 0): started
2021/07/08 17:04:23 scheduler task ef6d3ec1 (flow e1fcded5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:71fbdb894be3642356f6505d96aba66aa22420c38e0963db013910c669d49f5b -> s3://niema-test/n100/r05/n100.r05.s070.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:23  <-  n100.r05.s070.Main.cp_out_file e1fcded5 ok   extern 0s 35.7MiB
2021/07/08 17:04:23 scheduler task 76111d9e (flow 91ea955a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:23 scheduler task 76111d9e (flow 91ea955a): promoting objects (try 0): started
2021/07/08 17:04:23 scheduler task 1075cfc4 (flow 0b598c7d): transferring output (try 0): started
2021/07/08 17:04:23 scheduler task 76111d9e (flow 91ea955a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:23 scheduler task 76111d9e (flow 91ea955a): retrieving diagnostic output (try 0): started
2021/07/08 17:04:23 scheduler task 76111d9e (flow 91ea955a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:23 scheduler task 76111d9e (flow 91ea955a): retrieving result (try 0): started
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): promoting objects (try 0): started
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): transferring output (try 0): started
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): promoting objects (try 0): started
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): retrieving diagnostic output (try 0): started
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): retrieving diagnostic output (try 0): started
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): promoting objects (try 0): started
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): retrieving result (try 0): started
2021/07/08 17:04:24 scheduler task b2b0c9b7 (flow f4296ebb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8efa81b8f47d25ff9bf8f763575d11999d8daf8abfdc1b42f50a2ca085011670 -> s3://niema-test/n100/r05/n100.r05.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:24  <-  n100.r05.s011.Main.cp_out_file f4296ebb ok   extern 0s 35.7MiB
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloading (try 0): started
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloading list<val<.=599bc3d0 35.7MiB> 35.7MiB>
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloading val<.=1b46ea58 35.4MiB>
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloading val<.=2c372af0 35.4MiB>
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): retrieving result (try 0): started
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): retrieving diagnostic output (try 0): started
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:24 scheduler task 5d6d53bd (flow bc5769e6): transferring output (try 0): started
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloaded list<val<.=599bc3d0 35.7MiB> 35.7MiB>
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloaded val<.=1b46ea58 35.4MiB>
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloaded val<.=2c372af0 35.4MiB>
2021/07/08 17:04:24 scheduler task 1075cfc4 (flow 0b598c7d): unloading (try 0): successful, next state: complete
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:24  <-  n100.r05.s019.Main.out_file 0b598c7d ok     exec 5m3s 35.7MiB
2021/07/08 17:04:24 n100.r05.s019.Main.out_file 0b598c7d n100/r05/n100.r05.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e604eff73677b2a6349ce8fdda21b0c22e591515188a56711f48cf099d0b1a3
	sha256:0b598c7d501d34a522ced3403fd178380e75d23ebd6c16a724576143d9a367aa
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1075cfc4486e96c351b4d25adfa080d3581e9aae439ff33bf278338436dfc460
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s019_output"
	    wget -O "n100.r05.s019_output/n100.r05.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s019_output/n100.r05.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s019_output/n100.r05.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s019_output/n100.r05.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s019_output/n100.r05.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s019_output/n100.r05.s019.reference.fas" "n100.r05.s019_output/n100.r05.s019.fq1.fastq" "n100.r05.s019_output/n100.r05.s019.fq2.fastq" | samtools view -bS - > "n100.r05.s019_output/n100.r05.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s019_output/n100.r05.s019.untrimmed.sorted.bam" "n100.r05.s019_output/n100.r05.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s019_output/n100.r05.s019.untrimmed.sorted.bam" -b "n100.r05.s019_output/n100.r05.s019.primers.bed" -p "n100.r05.s019_output/n100.r05.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" "n100.r05.s019_output/n100.r05.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s019_output/n100.r05.s019.reference.fas" "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" > "n100.r05.s019_output/n100.r05.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s019_output/n100.r05.s019.reference.fas" --call-indels "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" > "n100.r05.s019_output/n100.r05.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s019_output/n100.r05.s019.trimmed.sorted.bam" > "n100.r05.s019_output/n100.r05.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s019_output/n100.r05.s019.depth.txt" "n100.r05.s019_output/n100.r05.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s019_output/n100.r05.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s019_output/n100.r05.s019.reference.fas" | bcftools consensus -m "n100.r05.s019_output/n100.r05.s019.low_depth.tsv" tmp.vcf.gz > "n100.r05.s019_output/n100.r05.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:599bc3d08616f4ad50616eb62a49dbf4fb09154f71caf79ea99048600bede922 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=128.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=694B max=2.0KiB
2021/07/08 17:04:24 scheduler task 511237ed (flow 298860b6): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s019.tar.gz resources {}
2021/07/08 17:04:24  ->  n100.r05.s019.Main.cp_out_file 298860b6 exec extern s3://niema-test/n100/r05/n100.r05.s019.tar.gz 35.7MiB
2021/07/08 17:04:24 scheduler task 895b6be6 (flow 4ea7450d): transferring output (try 0): started
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): retrieving result (try 0): started
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:24 scheduler task f2ba62a4 (flow 48c96476): transferring output (try 0): started
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloading (try 0): started
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloading list<val<.=e145fb7b 35.7MiB> 35.7MiB>
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloading val<.=265b2ac0 35.4MiB>
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloading val<.=ff5c7278 35.4MiB>
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloaded val<.=265b2ac0 35.4MiB>
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloaded list<val<.=e145fb7b 35.7MiB> 35.7MiB>
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloaded val<.=ff5c7278 35.4MiB>
2021/07/08 17:04:24 scheduler task 76111d9e (flow 91ea955a): unloading (try 0): successful, next state: complete
2021/07/08 17:04:24  <-  n100.r05.s081.Main.out_file 91ea955a ok     exec 4m58s 35.7MiB
2021/07/08 17:04:24 n100.r05.s081.Main.out_file 91ea955a n100/r05/n100.r05.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9f29b3f61650da4df1fc72ac8806b99ade8d842001d7370f51e62ffdee500017
	sha256:91ea955aef68803cf2d4bfc863063cae1d546698b1f4bff6a66fb2a14c6305c3
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/76111d9ea5b59df37d5548bcb957e2a474c295ee7f9df20760a49f4712271d86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s081_output"
	    wget -O "n100.r05.s081_output/n100.r05.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s081_output/n100.r05.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s081_output/n100.r05.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s081_output/n100.r05.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s081_output/n100.r05.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s081_output/n100.r05.s081.reference.fas" "n100.r05.s081_output/n100.r05.s081.fq1.fastq" "n100.r05.s081_output/n100.r05.s081.fq2.fastq" | samtools view -bS - > "n100.r05.s081_output/n100.r05.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s081_output/n100.r05.s081.untrimmed.sorted.bam" "n100.r05.s081_output/n100.r05.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s081_output/n100.r05.s081.untrimmed.sorted.bam" -b "n100.r05.s081_output/n100.r05.s081.primers.bed" -p "n100.r05.s081_output/n100.r05.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" "n100.r05.s081_output/n100.r05.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s081_output/n100.r05.s081.reference.fas" "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" > "n100.r05.s081_output/n100.r05.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s081_output/n100.r05.s081.reference.fas" --call-indels "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" > "n100.r05.s081_output/n100.r05.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s081_output/n100.r05.s081.trimmed.sorted.bam" > "n100.r05.s081_output/n100.r05.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s081_output/n100.r05.s081.depth.txt" "n100.r05.s081_output/n100.r05.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s081_output/n100.r05.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s081_output/n100.r05.s081.reference.fas" | bcftools consensus -m "n100.r05.s081_output/n100.r05.s081.low_depth.tsv" tmp.vcf.gz > "n100.r05.s081_output/n100.r05.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e145fb7b0ea665de1bb8ca2f44dedb3aa7e6c5437a5f42ac6f499f82790da89e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.5MiB max=127.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:24 scheduler task 5823feea (flow f448f4c9): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s081.tar.gz resources {}
2021/07/08 17:04:24  ->  n100.r05.s081.Main.cp_out_file f448f4c9 exec extern s3://niema-test/n100/r05/n100.r05.s081.tar.gz 35.7MiB
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloading (try 0): started
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloading list<val<.=9804db59 35.7MiB> 35.7MiB>
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloading val<.=ac933898 35.4MiB>
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloading val<.=7a1a2f2b 35.4MiB>
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloading (try 0): started
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloading list<val<.=686f933f 35.7MiB> 35.7MiB>
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloading val<.=de457d59 35.4MiB>
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloading val<.=6554c981 35.4MiB>
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloading (try 0): started
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloading list<val<.=bb63e023 35.7MiB> 35.7MiB>
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloading val<.=340b858a 35.4MiB>
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloading val<.=a0dc95e1 35.4MiB>
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloaded list<val<.=9804db59 35.7MiB> 35.7MiB>
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloaded val<.=7a1a2f2b 35.4MiB>
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloaded val<.=ac933898 35.4MiB>
2021/07/08 17:04:25 scheduler task 5d6d53bd (flow bc5769e6): unloading (try 0): successful, next state: complete
2021/07/08 17:04:25  <-  n100.r05.s030.Main.out_file bc5769e6 ok     exec 5m4s 35.7MiB
2021/07/08 17:04:25 n100.r05.s030.Main.out_file bc5769e6 n100/r05/n100.r05.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:809f7f519b3e1ac29ed3239d378c31e5563e8f883e63dbe339d9366a30048101
	sha256:bc5769e6914fb7b9b31744bf4ca8ab303072701d74c24dd8aaac9ea39b5ec26d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5d6d53bd0c92f8b4368cf59237d3b5e2a1ac99b194cece006993144e70fe4adb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s030_output"
	    wget -O "n100.r05.s030_output/n100.r05.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s030_output/n100.r05.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s030_output/n100.r05.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s030_output/n100.r05.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s030_output/n100.r05.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s030_output/n100.r05.s030.reference.fas" "n100.r05.s030_output/n100.r05.s030.fq1.fastq" "n100.r05.s030_output/n100.r05.s030.fq2.fastq" | samtools view -bS - > "n100.r05.s030_output/n100.r05.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s030_output/n100.r05.s030.untrimmed.sorted.bam" "n100.r05.s030_output/n100.r05.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s030_output/n100.r05.s030.untrimmed.sorted.bam" -b "n100.r05.s030_output/n100.r05.s030.primers.bed" -p "n100.r05.s030_output/n100.r05.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" "n100.r05.s030_output/n100.r05.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s030_output/n100.r05.s030.reference.fas" "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" > "n100.r05.s030_output/n100.r05.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s030_output/n100.r05.s030.reference.fas" --call-indels "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" > "n100.r05.s030_output/n100.r05.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s030_output/n100.r05.s030.trimmed.sorted.bam" > "n100.r05.s030_output/n100.r05.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s030_output/n100.r05.s030.depth.txt" "n100.r05.s030_output/n100.r05.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s030_output/n100.r05.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s030_output/n100.r05.s030.reference.fas" | bcftools consensus -m "n100.r05.s030_output/n100.r05.s030.low_depth.tsv" tmp.vcf.gz > "n100.r05.s030_output/n100.r05.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9804db59bdcc1d22feb95617ceea928f4fe1f74cfc0fb9511826d05905773f10 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:25 scheduler task 07f326db (flow 91083a31): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s030.tar.gz resources {}
2021/07/08 17:04:25  ->  n100.r05.s030.Main.cp_out_file 91083a31 exec extern s3://niema-test/n100/r05/n100.r05.s030.tar.gz 35.7MiB
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloaded val<.=de457d59 35.4MiB>
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloaded val<.=6554c981 35.4MiB>
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloaded list<val<.=686f933f 35.7MiB> 35.7MiB>
2021/07/08 17:04:25 scheduler task 895b6be6 (flow 4ea7450d): unloading (try 0): successful, next state: complete
2021/07/08 17:04:25 scheduler task 511237ed (flow 298860b6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:599bc3d08616f4ad50616eb62a49dbf4fb09154f71caf79ea99048600bede922 -> s3://niema-test/n100/r05/n100.r05.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:25  <-  n100.r05.s019.Main.cp_out_file 298860b6 ok   extern 0s 35.7MiB
2021/07/08 17:04:25  <-  n100.r05.s062.Main.out_file 4ea7450d ok     exec 5m4s 35.7MiB
2021/07/08 17:04:25 n100.r05.s062.Main.out_file 4ea7450d n100/r05/n100.r05.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:41f9a2f42245bdcd9196616f8c6cba48774677c0aac9c34891872e3b0e0bb6f9
	sha256:4ea7450d3be9b81e98eeb77317e6114f4d31b6c75cadb0101bc2917da3bf83d8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/895b6be62a175d1d98970d23df00ebb75a444ecb023fb26570176e3bf34b8a3f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s062_output"
	    wget -O "n100.r05.s062_output/n100.r05.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s062_output/n100.r05.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s062_output/n100.r05.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s062_output/n100.r05.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s062_output/n100.r05.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s062_output/n100.r05.s062.reference.fas" "n100.r05.s062_output/n100.r05.s062.fq1.fastq" "n100.r05.s062_output/n100.r05.s062.fq2.fastq" | samtools view -bS - > "n100.r05.s062_output/n100.r05.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s062_output/n100.r05.s062.untrimmed.sorted.bam" "n100.r05.s062_output/n100.r05.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s062_output/n100.r05.s062.untrimmed.sorted.bam" -b "n100.r05.s062_output/n100.r05.s062.primers.bed" -p "n100.r05.s062_output/n100.r05.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" "n100.r05.s062_output/n100.r05.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s062_output/n100.r05.s062.reference.fas" "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" > "n100.r05.s062_output/n100.r05.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s062_output/n100.r05.s062.reference.fas" --call-indels "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" > "n100.r05.s062_output/n100.r05.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s062_output/n100.r05.s062.trimmed.sorted.bam" > "n100.r05.s062_output/n100.r05.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s062_output/n100.r05.s062.depth.txt" "n100.r05.s062_output/n100.r05.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s062_output/n100.r05.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s062_output/n100.r05.s062.reference.fas" | bcftools consensus -m "n100.r05.s062_output/n100.r05.s062.low_depth.tsv" tmp.vcf.gz > "n100.r05.s062_output/n100.r05.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:686f933fec8899839c80bdb371f721d16a0aba73d4f073f6caefc979c0edaab5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=126.1MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:25 scheduler task e0565660 (flow 13351687): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s062.tar.gz resources {}
2021/07/08 17:04:25  ->  n100.r05.s062.Main.cp_out_file 13351687 exec extern s3://niema-test/n100/r05/n100.r05.s062.tar.gz 35.7MiB
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloaded list<val<.=bb63e023 35.7MiB> 35.7MiB>
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloaded val<.=a0dc95e1 35.4MiB>
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloaded val<.=340b858a 35.4MiB>
2021/07/08 17:04:25 scheduler task f2ba62a4 (flow 48c96476): unloading (try 0): successful, next state: complete
2021/07/08 17:04:25  <-  n100.r05.s001.Main.out_file 48c96476 ok     exec 4m58s 35.7MiB
2021/07/08 17:04:25 n100.r05.s001.Main.out_file 48c96476 n100/r05/n100.r05.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:993cfb12eb4365c84cb2e869d0dab1e454f937565b4d933d68125e8105b25bc5
	sha256:48c9647634a4b60f02e183f1c0de45c13db492458f97542a7e67f788770b8880
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2ba62a4206050a2a5d774d69a40bbe9275cb630c137914a46027f68b888c36d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s001_output"
	    wget -O "n100.r05.s001_output/n100.r05.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s001_output/n100.r05.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s001_output/n100.r05.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s001_output/n100.r05.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s001_output/n100.r05.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s001_output/n100.r05.s001.reference.fas" "n100.r05.s001_output/n100.r05.s001.fq1.fastq" "n100.r05.s001_output/n100.r05.s001.fq2.fastq" | samtools view -bS - > "n100.r05.s001_output/n100.r05.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s001_output/n100.r05.s001.untrimmed.sorted.bam" "n100.r05.s001_output/n100.r05.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s001_output/n100.r05.s001.untrimmed.sorted.bam" -b "n100.r05.s001_output/n100.r05.s001.primers.bed" -p "n100.r05.s001_output/n100.r05.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" "n100.r05.s001_output/n100.r05.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s001_output/n100.r05.s001.reference.fas" "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" > "n100.r05.s001_output/n100.r05.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s001_output/n100.r05.s001.reference.fas" --call-indels "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" > "n100.r05.s001_output/n100.r05.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s001_output/n100.r05.s001.trimmed.sorted.bam" > "n100.r05.s001_output/n100.r05.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s001_output/n100.r05.s001.depth.txt" "n100.r05.s001_output/n100.r05.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s001_output/n100.r05.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s001_output/n100.r05.s001.reference.fas" | bcftools consensus -m "n100.r05.s001_output/n100.r05.s001.low_depth.tsv" tmp.vcf.gz > "n100.r05.s001_output/n100.r05.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bb63e023cda32b40eac5823f062f39f837ee3c232f6a37106bbfde48349808b8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.5MiB max=127.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:04:25 scheduler task 57fb51ed (flow 5584a5a3): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s001.tar.gz resources {}
2021/07/08 17:04:25  ->  n100.r05.s001.Main.cp_out_file 5584a5a3 exec extern s3://niema-test/n100/r05/n100.r05.s001.tar.gz 35.7MiB
2021/07/08 17:04:25 scheduler task 5823feea (flow f448f4c9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e145fb7b0ea665de1bb8ca2f44dedb3aa7e6c5437a5f42ac6f499f82790da89e -> s3://niema-test/n100/r05/n100.r05.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:25  <-  n100.r05.s081.Main.cp_out_file f448f4c9 ok   extern 0s 35.7MiB
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): promoting objects (try 0): started
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): retrieving diagnostic output (try 0): started
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): retrieving result (try 0): started
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:25 scheduler task a2233715 (flow a5cfc129): transferring output (try 0): started
2021/07/08 17:04:25 scheduler task e0565660 (flow 13351687): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:686f933fec8899839c80bdb371f721d16a0aba73d4f073f6caefc979c0edaab5 -> s3://niema-test/n100/r05/n100.r05.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:25  <-  n100.r05.s062.Main.cp_out_file 13351687 ok   extern 0s 35.7MiB
2021/07/08 17:04:25 scheduler task 07f326db (flow 91083a31): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9804db59bdcc1d22feb95617ceea928f4fe1f74cfc0fb9511826d05905773f10 -> s3://niema-test/n100/r05/n100.r05.s030.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:25  <-  n100.r05.s030.Main.cp_out_file 91083a31 ok   extern 0s 35.7MiB
2021/07/08 17:04:25 scheduler task 222946cd (flow 37eb25e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): promoting objects (try 0): started
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): retrieving diagnostic output (try 0): started
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): retrieving result (try 0): started
2021/07/08 17:04:26 scheduler task 57fb51ed (flow 5584a5a3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bb63e023cda32b40eac5823f062f39f837ee3c232f6a37106bbfde48349808b8 -> s3://niema-test/n100/r05/n100.r05.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:26  <-  n100.r05.s001.Main.cp_out_file 5584a5a3 ok   extern 0s 35.7MiB
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): transferring output (try 0): started
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): promoting objects (try 0): started
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): retrieving diagnostic output (try 0): started
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): retrieving result (try 0): started
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloading (try 0): started
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloading list<val<.=b39010ef 35.7MiB> 35.7MiB>
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloading val<.=624eb52e 35.4MiB>
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloading val<.=4a81c02a 35.4MiB>
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:26 scheduler task c171a9af (flow f5a0e33a): transferring output (try 0): started
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloaded val<.=624eb52e 35.4MiB>
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloaded list<val<.=b39010ef 35.7MiB> 35.7MiB>
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloaded val<.=4a81c02a 35.4MiB>
2021/07/08 17:04:26 scheduler task a2233715 (flow a5cfc129): unloading (try 0): successful, next state: complete
2021/07/08 17:04:26  <-  n100.r05.s082.Main.out_file a5cfc129 ok     exec 5m0s 35.7MiB
2021/07/08 17:04:26 n100.r05.s082.Main.out_file a5cfc129 n100/r05/n100.r05.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:733da1d60ca6cf3b9c03810518234c35f3e697f67099958033f529b74919520a
	sha256:a5cfc129d0027c2552ab0a022dfc32cd1b3c0d379cac136d51d88d366a5bd289
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a223371598f8a1b45bcf4997c32c34868d4b434ec5c83964f06102c973e01721
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s082_output"
	    wget -O "n100.r05.s082_output/n100.r05.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s082_output/n100.r05.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s082_output/n100.r05.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s082_output/n100.r05.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s082_output/n100.r05.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s082_output/n100.r05.s082.reference.fas" "n100.r05.s082_output/n100.r05.s082.fq1.fastq" "n100.r05.s082_output/n100.r05.s082.fq2.fastq" | samtools view -bS - > "n100.r05.s082_output/n100.r05.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s082_output/n100.r05.s082.untrimmed.sorted.bam" "n100.r05.s082_output/n100.r05.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s082_output/n100.r05.s082.untrimmed.sorted.bam" -b "n100.r05.s082_output/n100.r05.s082.primers.bed" -p "n100.r05.s082_output/n100.r05.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" "n100.r05.s082_output/n100.r05.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s082_output/n100.r05.s082.reference.fas" "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" > "n100.r05.s082_output/n100.r05.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s082_output/n100.r05.s082.reference.fas" --call-indels "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" > "n100.r05.s082_output/n100.r05.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s082_output/n100.r05.s082.trimmed.sorted.bam" > "n100.r05.s082_output/n100.r05.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s082_output/n100.r05.s082.depth.txt" "n100.r05.s082_output/n100.r05.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s082_output/n100.r05.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s082_output/n100.r05.s082.reference.fas" | bcftools consensus -m "n100.r05.s082_output/n100.r05.s082.low_depth.tsv" tmp.vcf.gz > "n100.r05.s082_output/n100.r05.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b39010efaf2761dfc7df96d7356ae019fae98967b23b6f2a70ee910d3e0dd4fb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=128.6MiB
	    disk mean=11.2MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:26 scheduler task 76ba70e8 (flow c3a5dad8): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s082.tar.gz resources {}
2021/07/08 17:04:26  ->  n100.r05.s082.Main.cp_out_file c3a5dad8 exec extern s3://niema-test/n100/r05/n100.r05.s082.tar.gz 35.7MiB
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloading (try 0): started
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloading list<val<.=24288298 35.8MiB> 35.8MiB>
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloading val<.=bd29e3e2 35.4MiB>
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloading val<.=c94d49ca 35.4MiB>
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloaded val<.=c94d49ca 35.4MiB>
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloaded list<val<.=24288298 35.8MiB> 35.8MiB>
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloaded val<.=bd29e3e2 35.4MiB>
2021/07/08 17:04:26 scheduler task 222946cd (flow 37eb25e3): unloading (try 0): successful, next state: complete
2021/07/08 17:04:26  <-  n100.r05.s047.Main.out_file 37eb25e3 ok     exec 5m6s 35.8MiB
2021/07/08 17:04:26 n100.r05.s047.Main.out_file 37eb25e3 n100/r05/n100.r05.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:112647b680a7b612e70f9f5ddee4b6883a007087de72b5d48756a10846627a0b
	sha256:37eb25e3ba18678a77f468fb8081f24db3384a8a59a3148dc372754e801f2ebf
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/222946cd5209fa9aa1d10a8834096ad773b1d3ec36437abf55f17aca6a205fff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s047_output"
	    wget -O "n100.r05.s047_output/n100.r05.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s047_output/n100.r05.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s047_output/n100.r05.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s047_output/n100.r05.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s047_output/n100.r05.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s047_output/n100.r05.s047.reference.fas" "n100.r05.s047_output/n100.r05.s047.fq1.fastq" "n100.r05.s047_output/n100.r05.s047.fq2.fastq" | samtools view -bS - > "n100.r05.s047_output/n100.r05.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s047_output/n100.r05.s047.untrimmed.sorted.bam" "n100.r05.s047_output/n100.r05.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s047_output/n100.r05.s047.untrimmed.sorted.bam" -b "n100.r05.s047_output/n100.r05.s047.primers.bed" -p "n100.r05.s047_output/n100.r05.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" "n100.r05.s047_output/n100.r05.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s047_output/n100.r05.s047.reference.fas" "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" > "n100.r05.s047_output/n100.r05.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s047_output/n100.r05.s047.reference.fas" --call-indels "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" > "n100.r05.s047_output/n100.r05.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s047_output/n100.r05.s047.trimmed.sorted.bam" > "n100.r05.s047_output/n100.r05.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s047_output/n100.r05.s047.depth.txt" "n100.r05.s047_output/n100.r05.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s047_output/n100.r05.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s047_output/n100.r05.s047.reference.fas" | bcftools consensus -m "n100.r05.s047_output/n100.r05.s047.low_depth.tsv" tmp.vcf.gz > "n100.r05.s047_output/n100.r05.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2428829885091c471302f74f52fa926453c5ed1babeac9a948e6fd2b5352b2e1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=126.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:26 scheduler task d09556d8 (flow 88f4a128): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s047.tar.gz resources {}
2021/07/08 17:04:26  ->  n100.r05.s047.Main.cp_out_file 88f4a128 exec extern s3://niema-test/n100/r05/n100.r05.s047.tar.gz 35.8MiB
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloading (try 0): started
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloading list<val<.=a69d3727 35.7MiB> 35.7MiB>
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloading val<.=25043257 35.4MiB>
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloading val<.=f3493876 35.4MiB>
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): promoting objects (try 0): started
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloaded val<.=25043257 35.4MiB>
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloaded val<.=f3493876 35.4MiB>
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloaded list<val<.=a69d3727 35.7MiB> 35.7MiB>
2021/07/08 17:04:27 scheduler task c171a9af (flow f5a0e33a): unloading (try 0): successful, next state: complete
2021/07/08 17:04:27  <-  n100.r05.s094.Main.out_file f5a0e33a ok     exec 5m1s 35.7MiB
2021/07/08 17:04:27 n100.r05.s094.Main.out_file f5a0e33a n100/r05/n100.r05.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac571e245abaa65d5eba40f1db9ca83d526c4743e2d8e58d4738423f2b6b6829
	sha256:f5a0e33a513f856c4cb7fa2650ce0e0c626095ea1057fea964d39c45a89883f6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c171a9afe4d5115422140bac0ef2790b4248e06e2f27429ccbea131d1d1fce32
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s094_output"
	    wget -O "n100.r05.s094_output/n100.r05.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s094_output/n100.r05.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s094_output/n100.r05.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s094_output/n100.r05.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s094_output/n100.r05.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s094_output/n100.r05.s094.reference.fas" "n100.r05.s094_output/n100.r05.s094.fq1.fastq" "n100.r05.s094_output/n100.r05.s094.fq2.fastq" | samtools view -bS - > "n100.r05.s094_output/n100.r05.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s094_output/n100.r05.s094.untrimmed.sorted.bam" "n100.r05.s094_output/n100.r05.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s094_output/n100.r05.s094.untrimmed.sorted.bam" -b "n100.r05.s094_output/n100.r05.s094.primers.bed" -p "n100.r05.s094_output/n100.r05.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" "n100.r05.s094_output/n100.r05.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s094_output/n100.r05.s094.reference.fas" "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" > "n100.r05.s094_output/n100.r05.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s094_output/n100.r05.s094.reference.fas" --call-indels "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" > "n100.r05.s094_output/n100.r05.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s094_output/n100.r05.s094.trimmed.sorted.bam" > "n100.r05.s094_output/n100.r05.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s094_output/n100.r05.s094.depth.txt" "n100.r05.s094_output/n100.r05.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s094_output/n100.r05.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s094_output/n100.r05.s094.reference.fas" | bcftools consensus -m "n100.r05.s094_output/n100.r05.s094.low_depth.tsv" tmp.vcf.gz > "n100.r05.s094_output/n100.r05.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a69d3727b4894bf0e63a6b558d520ca4a6bfc59b4351db7077122aaa34034b6e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.8MiB max=128.9MiB
	    disk mean=9.6MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:27 scheduler task ec0f2354 (flow 3b70a4e6): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s094.tar.gz resources {}
2021/07/08 17:04:27  ->  n100.r05.s094.Main.cp_out_file 3b70a4e6 exec extern s3://niema-test/n100/r05/n100.r05.s094.tar.gz 35.7MiB
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): retrieving diagnostic output (try 0): started
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): retrieving result (try 0): started
2021/07/08 17:04:27 scheduler task 76ba70e8 (flow c3a5dad8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b39010efaf2761dfc7df96d7356ae019fae98967b23b6f2a70ee910d3e0dd4fb -> s3://niema-test/n100/r05/n100.r05.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:27  <-  n100.r05.s082.Main.cp_out_file c3a5dad8 ok   extern 0s 35.7MiB
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): transferring output (try 0): started
2021/07/08 17:04:27 scheduler task d09556d8 (flow 88f4a128): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2428829885091c471302f74f52fa926453c5ed1babeac9a948e6fd2b5352b2e1 -> s3://niema-test/n100/r05/n100.r05.s047.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:27  <-  n100.r05.s047.Main.cp_out_file 88f4a128 ok   extern 0s 35.8MiB
2021/07/08 17:04:27 scheduler task 72a551ca (flow 8cf24afe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:27 scheduler task 72a551ca (flow 8cf24afe): promoting objects (try 0): started
2021/07/08 17:04:27 scheduler task 72a551ca (flow 8cf24afe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:27 scheduler task 72a551ca (flow 8cf24afe): retrieving diagnostic output (try 0): started
2021/07/08 17:04:27 scheduler task 72a551ca (flow 8cf24afe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:27 scheduler task 72a551ca (flow 8cf24afe): retrieving result (try 0): started
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): unloading (try 0): started
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): unloading list<val<.=85717843 35.7MiB> 35.7MiB>
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): unloading val<.=e2b245db 35.4MiB>
2021/07/08 17:04:27 scheduler task 65ef70a2 (flow 877fe836): unloading val<.=17e0d04b 35.4MiB>
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:28 scheduler task ec0f2354 (flow 3b70a4e6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a69d3727b4894bf0e63a6b558d520ca4a6bfc59b4351db7077122aaa34034b6e -> s3://niema-test/n100/r05/n100.r05.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:28  <-  n100.r05.s094.Main.cp_out_file 3b70a4e6 ok   extern 0s 35.7MiB
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): transferring output (try 0): started
2021/07/08 17:04:28 scheduler task 65ef70a2 (flow 877fe836): unloaded val<.=17e0d04b 35.4MiB>
2021/07/08 17:04:28 scheduler task 65ef70a2 (flow 877fe836): unloaded list<val<.=85717843 35.7MiB> 35.7MiB>
2021/07/08 17:04:28 scheduler task 65ef70a2 (flow 877fe836): unloaded val<.=e2b245db 35.4MiB>
2021/07/08 17:04:28 scheduler task 65ef70a2 (flow 877fe836): unloading (try 0): successful, next state: complete
2021/07/08 17:04:28  <-  n100.r05.s014.Main.out_file 877fe836 ok     exec 5m7s 35.7MiB
2021/07/08 17:04:28 n100.r05.s014.Main.out_file 877fe836 n100/r05/n100.r05.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:418b6580f1d5b9b03f8b454b4334aefc063fe8be59ce885dba9bcafa7affcc0b
	sha256:877fe8366f14e5efd7eeb1bf7426bfd5d378aaacf965827c9abf4ee330ff2649
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/65ef70a2be4d4ef280a669de4b06bccde4ce6d05d7eaba0228b83752d691391a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s014_output"
	    wget -O "n100.r05.s014_output/n100.r05.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s014_output/n100.r05.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s014_output/n100.r05.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s014_output/n100.r05.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s014_output/n100.r05.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s014_output/n100.r05.s014.reference.fas" "n100.r05.s014_output/n100.r05.s014.fq1.fastq" "n100.r05.s014_output/n100.r05.s014.fq2.fastq" | samtools view -bS - > "n100.r05.s014_output/n100.r05.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s014_output/n100.r05.s014.untrimmed.sorted.bam" "n100.r05.s014_output/n100.r05.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s014_output/n100.r05.s014.untrimmed.sorted.bam" -b "n100.r05.s014_output/n100.r05.s014.primers.bed" -p "n100.r05.s014_output/n100.r05.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" "n100.r05.s014_output/n100.r05.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s014_output/n100.r05.s014.reference.fas" "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" > "n100.r05.s014_output/n100.r05.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s014_output/n100.r05.s014.reference.fas" --call-indels "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" > "n100.r05.s014_output/n100.r05.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s014_output/n100.r05.s014.trimmed.sorted.bam" > "n100.r05.s014_output/n100.r05.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s014_output/n100.r05.s014.depth.txt" "n100.r05.s014_output/n100.r05.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s014_output/n100.r05.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s014_output/n100.r05.s014.reference.fas" | bcftools consensus -m "n100.r05.s014_output/n100.r05.s014.low_depth.tsv" tmp.vcf.gz > "n100.r05.s014_output/n100.r05.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:85717843d3aaeafe8cb7894e168ee8d64e5ae367b2cf7f687425aeb1a2ce292b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.6MiB max=126.0MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:04:28 scheduler task f994a0ad (flow c696225b): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s014.tar.gz resources {}
2021/07/08 17:04:28  ->  n100.r05.s014.Main.cp_out_file c696225b exec extern s3://niema-test/n100/r05/n100.r05.s014.tar.gz 35.7MiB
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): promoting objects (try 0): started
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): promoting objects (try 0): started
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): promoting objects (try 0): started
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): retrieving diagnostic output (try 0): started
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): retrieving diagnostic output (try 0): started
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): retrieving diagnostic output (try 0): started
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): retrieving result (try 0): started
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): retrieving result (try 0): started
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloading (try 0): started
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloading list<val<.=6cdf66d2 35.7MiB> 35.7MiB>
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloading val<.=43c40c1e 35.4MiB>
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloading val<.=4a612df7 35.4MiB>
2021/07/08 17:04:28 scheduler task c33dbb19 (flow e0427763): transferring output (try 0): started
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): retrieving result (try 0): started
2021/07/08 17:04:28 scheduler task fb3965bb (flow 3518f790): transferring output (try 0): started
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloaded list<val<.=6cdf66d2 35.7MiB> 35.7MiB>
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloaded val<.=4a612df7 35.4MiB>
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloaded val<.=43c40c1e 35.4MiB>
2021/07/08 17:04:28 scheduler task 72a551ca (flow 8cf24afe): unloading (try 0): successful, next state: complete
2021/07/08 17:04:28  <-  n100.r05.s072.Main.out_file 8cf24afe ok     exec 5m2s 35.7MiB
2021/07/08 17:04:28 n100.r05.s072.Main.out_file 8cf24afe n100/r05/n100.r05.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e4ae1db7f7df50ee5e95103da0fb1b41ac98277418aad4de0b992c552cac3a89
	sha256:8cf24afe1f0c7cd711cd96e34629a1f4ccb44cb27a85771c486ce502b57a70b3
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/72a551ca58ddab1a47e2ded92b9fa2210fd60728cdf49e0b2d405432291ab98a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s072_output"
	    wget -O "n100.r05.s072_output/n100.r05.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s072_output/n100.r05.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s072_output/n100.r05.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s072_output/n100.r05.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s072_output/n100.r05.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s072_output/n100.r05.s072.reference.fas" "n100.r05.s072_output/n100.r05.s072.fq1.fastq" "n100.r05.s072_output/n100.r05.s072.fq2.fastq" | samtools view -bS - > "n100.r05.s072_output/n100.r05.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s072_output/n100.r05.s072.untrimmed.sorted.bam" "n100.r05.s072_output/n100.r05.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s072_output/n100.r05.s072.untrimmed.sorted.bam" -b "n100.r05.s072_output/n100.r05.s072.primers.bed" -p "n100.r05.s072_output/n100.r05.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" "n100.r05.s072_output/n100.r05.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s072_output/n100.r05.s072.reference.fas" "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" > "n100.r05.s072_output/n100.r05.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s072_output/n100.r05.s072.reference.fas" --call-indels "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" > "n100.r05.s072_output/n100.r05.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s072_output/n100.r05.s072.trimmed.sorted.bam" > "n100.r05.s072_output/n100.r05.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s072_output/n100.r05.s072.depth.txt" "n100.r05.s072_output/n100.r05.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s072_output/n100.r05.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s072_output/n100.r05.s072.reference.fas" | bcftools consensus -m "n100.r05.s072_output/n100.r05.s072.low_depth.tsv" tmp.vcf.gz > "n100.r05.s072_output/n100.r05.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6cdf66d20672ae179f73a8da4deecba56d90652407561b27709f9d9884470a8c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=126.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=690B max=3.0KiB
2021/07/08 17:04:28 scheduler task e73e1cea (flow 5cebe2c4): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s072.tar.gz resources {}
2021/07/08 17:04:28  ->  n100.r05.s072.Main.cp_out_file 5cebe2c4 exec extern s3://niema-test/n100/r05/n100.r05.s072.tar.gz 35.7MiB
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:28 scheduler task e551941a (flow ea8b7e31): transferring output (try 0): started
2021/07/08 17:04:28 scheduler task f994a0ad (flow c696225b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:85717843d3aaeafe8cb7894e168ee8d64e5ae367b2cf7f687425aeb1a2ce292b -> s3://niema-test/n100/r05/n100.r05.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:28  <-  n100.r05.s014.Main.cp_out_file c696225b ok   extern 0s 35.7MiB
2021/07/08 17:04:28 scheduler task 4618e061 (flow 40e93ad6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:28 scheduler task 4618e061 (flow 40e93ad6): promoting objects (try 0): started
2021/07/08 17:04:28 scheduler task ef9b0bc7 (flow 18d94a36): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:28 scheduler task ef9b0bc7 (flow 18d94a36): promoting objects (try 0): started
2021/07/08 17:04:28 scheduler task 4618e061 (flow 40e93ad6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): retrieving diagnostic output (try 0): started
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloading (try 0): started
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloading list<val<.=8af3a8f1 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloading val<.=66e616b2 35.4MiB>
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloading val<.=823ca38c 35.4MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): retrieving diagnostic output (try 0): started
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloading (try 0): started
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloading list<val<.=9f11e2ec 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloading val<.=3a5a6c9c 35.4MiB>
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloading val<.=d48449ab 35.4MiB>
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloaded list<val<.=8af3a8f1 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloaded val<.=66e616b2 35.4MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): retrieving result (try 0): started
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloaded val<.=823ca38c 35.4MiB>
2021/07/08 17:04:29 scheduler task fb3965bb (flow 3518f790): unloading (try 0): successful, next state: complete
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): promoting objects (try 0): started
2021/07/08 17:04:29  <-  n100.r05.s003.Main.out_file 3518f790 ok     exec 5m8s 35.7MiB
2021/07/08 17:04:29 n100.r05.s003.Main.out_file 3518f790 n100/r05/n100.r05.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9189a3e44621a56c87e80dc9512b437ce35823db13b03589ccf76605873b045
	sha256:3518f790160aac0345d04401ed4218080d827bcee56a47f0f0c46d976cde4d8a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fb3965bb5276bd5b153c6e0bcac87b1b656196c0b9ac52ee856fc0523046f9ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s003_output"
	    wget -O "n100.r05.s003_output/n100.r05.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s003_output/n100.r05.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s003_output/n100.r05.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s003_output/n100.r05.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s003_output/n100.r05.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s003_output/n100.r05.s003.reference.fas" "n100.r05.s003_output/n100.r05.s003.fq1.fastq" "n100.r05.s003_output/n100.r05.s003.fq2.fastq" | samtools view -bS - > "n100.r05.s003_output/n100.r05.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s003_output/n100.r05.s003.untrimmed.sorted.bam" "n100.r05.s003_output/n100.r05.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s003_output/n100.r05.s003.untrimmed.sorted.bam" -b "n100.r05.s003_output/n100.r05.s003.primers.bed" -p "n100.r05.s003_output/n100.r05.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" "n100.r05.s003_output/n100.r05.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s003_output/n100.r05.s003.reference.fas" "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" > "n100.r05.s003_output/n100.r05.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s003_output/n100.r05.s003.reference.fas" --call-indels "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" > "n100.r05.s003_output/n100.r05.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s003_output/n100.r05.s003.trimmed.sorted.bam" > "n100.r05.s003_output/n100.r05.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s003_output/n100.r05.s003.depth.txt" "n100.r05.s003_output/n100.r05.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s003_output/n100.r05.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s003_output/n100.r05.s003.reference.fas" | bcftools consensus -m "n100.r05.s003_output/n100.r05.s003.low_depth.tsv" tmp.vcf.gz > "n100.r05.s003_output/n100.r05.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8af3a8f15b3919c163c8a55a617d9f35abf5814b5ac634b47fa90138d04cfefc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:04:29 scheduler task e948af93 (flow 877db10f): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s003.tar.gz resources {}
2021/07/08 17:04:29  ->  n100.r05.s003.Main.cp_out_file 877db10f exec extern s3://niema-test/n100/r05/n100.r05.s003.tar.gz 35.7MiB
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloaded val<.=d48449ab 35.4MiB>
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloaded list<val<.=9f11e2ec 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloaded val<.=3a5a6c9c 35.4MiB>
2021/07/08 17:04:29 scheduler task c33dbb19 (flow e0427763): unloading (try 0): successful, next state: complete
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): retrieving result (try 0): started
2021/07/08 17:04:29  <-  n100.r05.s067.Main.out_file e0427763 ok     exec 5m3s 35.7MiB
2021/07/08 17:04:29 n100.r05.s067.Main.out_file e0427763 n100/r05/n100.r05.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e7c03ab19d7278b094dbf219a68ce42d3bd3e5397f43b083017fe7e08a4d3b53
	sha256:e0427763700e959f87fa2e11ec425164f6d9ddc0d2986e26913ea6916c28ad98
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c33dbb19732af3335c29ae3f85d5641c6e85c25077b30c9533b86f191fa2b9ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s067_output"
	    wget -O "n100.r05.s067_output/n100.r05.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s067_output/n100.r05.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s067_output/n100.r05.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s067_output/n100.r05.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s067_output/n100.r05.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s067_output/n100.r05.s067.reference.fas" "n100.r05.s067_output/n100.r05.s067.fq1.fastq" "n100.r05.s067_output/n100.r05.s067.fq2.fastq" | samtools view -bS - > "n100.r05.s067_output/n100.r05.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s067_output/n100.r05.s067.untrimmed.sorted.bam" "n100.r05.s067_output/n100.r05.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s067_output/n100.r05.s067.untrimmed.sorted.bam" -b "n100.r05.s067_output/n100.r05.s067.primers.bed" -p "n100.r05.s067_output/n100.r05.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" "n100.r05.s067_output/n100.r05.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s067_output/n100.r05.s067.reference.fas" "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" > "n100.r05.s067_output/n100.r05.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s067_output/n100.r05.s067.reference.fas" --call-indels "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" > "n100.r05.s067_output/n100.r05.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s067_output/n100.r05.s067.trimmed.sorted.bam" > "n100.r05.s067_output/n100.r05.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s067_output/n100.r05.s067.depth.txt" "n100.r05.s067_output/n100.r05.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s067_output/n100.r05.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s067_output/n100.r05.s067.reference.fas" | bcftools consensus -m "n100.r05.s067_output/n100.r05.s067.low_depth.tsv" tmp.vcf.gz > "n100.r05.s067_output/n100.r05.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9f11e2ec903a6a7864be14d55fffbc482a036d8b8de04e224200a1a0b8f2a817 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.4MiB max=127.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=697B max=3.1KiB
2021/07/08 17:04:29 scheduler task d8bcf7bb (flow 11618334): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s067.tar.gz resources {}
2021/07/08 17:04:29  ->  n100.r05.s067.Main.cp_out_file 11618334 exec extern s3://niema-test/n100/r05/n100.r05.s067.tar.gz 35.7MiB
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloading (try 0): started
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloading list<val<.=170eb531 35.8MiB> 35.8MiB>
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloading val<.=f0003d6b 35.4MiB>
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloading val<.=10003339 35.4MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): transferring output (try 0): started
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): retrieving diagnostic output (try 0): started
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): transferring output (try 0): started
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloaded val<.=10003339 35.4MiB>
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloaded val<.=f0003d6b 35.4MiB>
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloaded list<val<.=170eb531 35.8MiB> 35.8MiB>
2021/07/08 17:04:29 scheduler task e551941a (flow ea8b7e31): unloading (try 0): successful, next state: complete
2021/07/08 17:04:29  <-  n100.r05.s044.Main.out_file ea8b7e31 ok     exec 4m54s 35.8MiB
2021/07/08 17:04:29 n100.r05.s044.Main.out_file ea8b7e31 n100/r05/n100.r05.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ddc9b8a441e93668388bf89836ad9e2042e49d42e98ddfa37611769f5a8b9578
	sha256:ea8b7e318a69da55de66cf5e561424de2e7a65e7984040a6c023c298be6dbed2
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e551941a39e04844f5855286b7ccd8af4da267363134a59717ed579361880849
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s044_output"
	    wget -O "n100.r05.s044_output/n100.r05.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s044_output/n100.r05.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s044_output/n100.r05.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s044_output/n100.r05.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s044_output/n100.r05.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s044_output/n100.r05.s044.reference.fas" "n100.r05.s044_output/n100.r05.s044.fq1.fastq" "n100.r05.s044_output/n100.r05.s044.fq2.fastq" | samtools view -bS - > "n100.r05.s044_output/n100.r05.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s044_output/n100.r05.s044.untrimmed.sorted.bam" "n100.r05.s044_output/n100.r05.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s044_output/n100.r05.s044.untrimmed.sorted.bam" -b "n100.r05.s044_output/n100.r05.s044.primers.bed" -p "n100.r05.s044_output/n100.r05.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" "n100.r05.s044_output/n100.r05.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s044_output/n100.r05.s044.reference.fas" "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" > "n100.r05.s044_output/n100.r05.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s044_output/n100.r05.s044.reference.fas" --call-indels "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" > "n100.r05.s044_output/n100.r05.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s044_output/n100.r05.s044.trimmed.sorted.bam" > "n100.r05.s044_output/n100.r05.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s044_output/n100.r05.s044.depth.txt" "n100.r05.s044_output/n100.r05.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s044_output/n100.r05.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s044_output/n100.r05.s044.reference.fas" | bcftools consensus -m "n100.r05.s044_output/n100.r05.s044.low_depth.tsv" tmp.vcf.gz > "n100.r05.s044_output/n100.r05.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:170eb5315714ed0dcc0cddc73bad1ece686dd2001ecdf6806d176687784dd30a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=128.4MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 17:04:29 scheduler task b6d41e2a (flow 46c0112c): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s044.tar.gz resources {}
2021/07/08 17:04:29  ->  n100.r05.s044.Main.cp_out_file 46c0112c exec extern s3://niema-test/n100/r05/n100.r05.s044.tar.gz 35.8MiB
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): retrieving result (try 0): started
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:29 scheduler task e73e1cea (flow 5cebe2c4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6cdf66d20672ae179f73a8da4deecba56d90652407561b27709f9d9884470a8c -> s3://niema-test/n100/r05/n100.r05.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:29  <-  n100.r05.s072.Main.cp_out_file 5cebe2c4 ok   extern 0s 35.7MiB
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): transferring output (try 0): started
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloading (try 0): started
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloading list<val<.=4ff7c931 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloading val<.=ea35e090 35.4MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloading val<.=8f146d7a 35.4MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloading (try 0): started
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloading list<val<.=cc78b609 35.8MiB> 35.8MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloading val<.=33a93a3c 35.4MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloading val<.=db0485bf 35.4MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloaded val<.=ea35e090 35.4MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloaded list<val<.=4ff7c931 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloaded val<.=8f146d7a 35.4MiB>
2021/07/08 17:04:29 scheduler task 4618e061 (flow 40e93ad6): unloading (try 0): successful, next state: complete
2021/07/08 17:04:29  <-  n100.r05.s038.Main.out_file 40e93ad6 ok     exec 5m3s 35.7MiB
2021/07/08 17:04:29 n100.r05.s038.Main.out_file 40e93ad6 n100/r05/n100.r05.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:06e070eaabade75ea2f796b8b5bf38685fc5ec27572cc65f89c1703f1d57907b
	sha256:40e93ad6aca333b70e58d50cea69b97db3f6b2c3206d33be787a5a48c3bf2892
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4618e061fbda852cfed316ce4012f796ff95d51bed469f2ee3e309a71e169620
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s038_output"
	    wget -O "n100.r05.s038_output/n100.r05.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s038_output/n100.r05.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s038_output/n100.r05.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s038_output/n100.r05.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s038_output/n100.r05.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s038_output/n100.r05.s038.reference.fas" "n100.r05.s038_output/n100.r05.s038.fq1.fastq" "n100.r05.s038_output/n100.r05.s038.fq2.fastq" | samtools view -bS - > "n100.r05.s038_output/n100.r05.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s038_output/n100.r05.s038.untrimmed.sorted.bam" "n100.r05.s038_output/n100.r05.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s038_output/n100.r05.s038.untrimmed.sorted.bam" -b "n100.r05.s038_output/n100.r05.s038.primers.bed" -p "n100.r05.s038_output/n100.r05.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" "n100.r05.s038_output/n100.r05.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s038_output/n100.r05.s038.reference.fas" "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" > "n100.r05.s038_output/n100.r05.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s038_output/n100.r05.s038.reference.fas" --call-indels "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" > "n100.r05.s038_output/n100.r05.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s038_output/n100.r05.s038.trimmed.sorted.bam" > "n100.r05.s038_output/n100.r05.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s038_output/n100.r05.s038.depth.txt" "n100.r05.s038_output/n100.r05.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s038_output/n100.r05.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s038_output/n100.r05.s038.reference.fas" | bcftools consensus -m "n100.r05.s038_output/n100.r05.s038.low_depth.tsv" tmp.vcf.gz > "n100.r05.s038_output/n100.r05.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4ff7c931f9f07107c46544034e79b1f9209fe58c60b96ff9af2592e2cea4f75a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.6MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=694B max=3.1KiB
2021/07/08 17:04:29 scheduler task 86f1867b (flow f54486c8): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s038.tar.gz resources {}
2021/07/08 17:04:29  ->  n100.r05.s038.Main.cp_out_file f54486c8 exec extern s3://niema-test/n100/r05/n100.r05.s038.tar.gz 35.7MiB
2021/07/08 17:04:29 scheduler task be23124b (flow 5d6d4385): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:29 scheduler task be23124b (flow 5d6d4385): promoting objects (try 0): started
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloaded val<.=33a93a3c 35.4MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloaded list<val<.=cc78b609 35.8MiB> 35.8MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloaded val<.=db0485bf 35.4MiB>
2021/07/08 17:04:29 scheduler task ef9b0bc7 (flow 18d94a36): unloading (try 0): successful, next state: complete
2021/07/08 17:04:29 scheduler task e948af93 (flow 877db10f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8af3a8f15b3919c163c8a55a617d9f35abf5814b5ac634b47fa90138d04cfefc -> s3://niema-test/n100/r05/n100.r05.s003.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:29  <-  n100.r05.s003.Main.cp_out_file 877db10f ok   extern 0s 35.7MiB
2021/07/08 17:04:29  <-  n100.r05.s077.Main.out_file 18d94a36 ok     exec 5m3s 35.8MiB
2021/07/08 17:04:29 n100.r05.s077.Main.out_file 18d94a36 n100/r05/n100.r05.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0a72928cc97d11063199c6445f2b28a7fe283641feb0f314f93262e5d6faec1c
	sha256:18d94a36217d8175c349155939bad0c538b2d5e6c86e0d3733f0d548a583b5b5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ef9b0bc7500158152edafffb2dd235087148c5d3ce865b00eb4048cdb6f5dca6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s077_output"
	    wget -O "n100.r05.s077_output/n100.r05.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s077_output/n100.r05.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s077_output/n100.r05.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s077_output/n100.r05.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s077_output/n100.r05.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s077_output/n100.r05.s077.reference.fas" "n100.r05.s077_output/n100.r05.s077.fq1.fastq" "n100.r05.s077_output/n100.r05.s077.fq2.fastq" | samtools view -bS - > "n100.r05.s077_output/n100.r05.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s077_output/n100.r05.s077.untrimmed.sorted.bam" "n100.r05.s077_output/n100.r05.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s077_output/n100.r05.s077.untrimmed.sorted.bam" -b "n100.r05.s077_output/n100.r05.s077.primers.bed" -p "n100.r05.s077_output/n100.r05.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" "n100.r05.s077_output/n100.r05.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s077_output/n100.r05.s077.reference.fas" "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" > "n100.r05.s077_output/n100.r05.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s077_output/n100.r05.s077.reference.fas" --call-indels "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" > "n100.r05.s077_output/n100.r05.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s077_output/n100.r05.s077.trimmed.sorted.bam" > "n100.r05.s077_output/n100.r05.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s077_output/n100.r05.s077.depth.txt" "n100.r05.s077_output/n100.r05.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s077_output/n100.r05.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s077_output/n100.r05.s077.reference.fas" | bcftools consensus -m "n100.r05.s077_output/n100.r05.s077.low_depth.tsv" tmp.vcf.gz > "n100.r05.s077_output/n100.r05.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cc78b6094e3c1035e5ddee11f05d475938270f300bf8828442f7e2762178561f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=130.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=874B max=3.1KiB
2021/07/08 17:04:29 scheduler task 245d590b (flow bb1aa3e2): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s077.tar.gz resources {}
2021/07/08 17:04:29  ->  n100.r05.s077.Main.cp_out_file bb1aa3e2 exec extern s3://niema-test/n100/r05/n100.r05.s077.tar.gz 35.8MiB
2021/07/08 17:04:29 scheduler task 740318b7 (flow 9a2a57fd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:29 scheduler task 740318b7 (flow 9a2a57fd): promoting objects (try 0): started
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): unloading (try 0): started
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): unloading list<val<.=34679790 35.7MiB> 35.7MiB>
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): unloading val<.=f191808e 35.4MiB>
2021/07/08 17:04:29 scheduler task 7848c63f (flow 26ac297d): unloading val<.=c75ef535 35.4MiB>
2021/07/08 17:04:29 scheduler task be23124b (flow 5d6d4385): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:29 scheduler task be23124b (flow 5d6d4385): retrieving diagnostic output (try 0): started
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): retrieving diagnostic output (try 0): started
2021/07/08 17:04:30 scheduler task d8bcf7bb (flow 11618334): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9f11e2ec903a6a7864be14d55fffbc482a036d8b8de04e224200a1a0b8f2a817 -> s3://niema-test/n100/r05/n100.r05.s067.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:30  <-  n100.r05.s067.Main.cp_out_file 11618334 ok   extern 0s 35.7MiB
2021/07/08 17:04:30 scheduler task 7848c63f (flow 26ac297d): unloaded val<.=f191808e 35.4MiB>
2021/07/08 17:04:30 scheduler task 7848c63f (flow 26ac297d): unloaded val<.=c75ef535 35.4MiB>
2021/07/08 17:04:30 scheduler task 7848c63f (flow 26ac297d): unloaded list<val<.=34679790 35.7MiB> 35.7MiB>
2021/07/08 17:04:30 scheduler task 7848c63f (flow 26ac297d): unloading (try 0): successful, next state: complete
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:30  <-  n100.r05.s048.Main.out_file 26ac297d ok     exec 5m9s 35.7MiB
2021/07/08 17:04:30 n100.r05.s048.Main.out_file 26ac297d n100/r05/n100.r05.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b51cc2f3e9c2edc8870328dbfa965d16109a7d0c6a4733a4d31c03ed96d11511
	sha256:26ac297d1893244bc4af350efbbdcfae9d4b3fd837ada1fb6adfd3a715f3f068
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7848c63fdcf0d59df79dd14f8c476a7c2924589f399bb052f3e7afe777b0fd9f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s048_output"
	    wget -O "n100.r05.s048_output/n100.r05.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s048_output/n100.r05.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s048_output/n100.r05.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s048_output/n100.r05.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s048_output/n100.r05.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s048_output/n100.r05.s048.reference.fas" "n100.r05.s048_output/n100.r05.s048.fq1.fastq" "n100.r05.s048_output/n100.r05.s048.fq2.fastq" | samtools view -bS - > "n100.r05.s048_output/n100.r05.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s048_output/n100.r05.s048.untrimmed.sorted.bam" "n100.r05.s048_output/n100.r05.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s048_output/n100.r05.s048.untrimmed.sorted.bam" -b "n100.r05.s048_output/n100.r05.s048.primers.bed" -p "n100.r05.s048_output/n100.r05.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" "n100.r05.s048_output/n100.r05.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s048_output/n100.r05.s048.reference.fas" "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" > "n100.r05.s048_output/n100.r05.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s048_output/n100.r05.s048.reference.fas" --call-indels "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" > "n100.r05.s048_output/n100.r05.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s048_output/n100.r05.s048.trimmed.sorted.bam" > "n100.r05.s048_output/n100.r05.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s048_output/n100.r05.s048.depth.txt" "n100.r05.s048_output/n100.r05.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s048_output/n100.r05.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s048_output/n100.r05.s048.reference.fas" | bcftools consensus -m "n100.r05.s048_output/n100.r05.s048.low_depth.tsv" tmp.vcf.gz > "n100.r05.s048_output/n100.r05.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:346797904819c8256b729dabc5b547ffd7025d039e865c6d331c7834072eb677 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=129.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=703B max=3.1KiB
2021/07/08 17:04:30 scheduler task 05bb8925 (flow 8a29c63f): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s048.tar.gz resources {}
2021/07/08 17:04:30  ->  n100.r05.s048.Main.cp_out_file 8a29c63f exec extern s3://niema-test/n100/r05/n100.r05.s048.tar.gz 35.7MiB
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): retrieving result (try 0): started
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): promoting objects (try 0): started
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): retrieving result (try 0): started
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): promoting objects (try 0): started
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): transferring output (try 0): started
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): retrieving diagnostic output (try 0): started
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): transferring output (try 0): started
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): retrieving diagnostic output (try 0): started
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): retrieving result (try 0): started
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): retrieving result (try 0): started
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): transferring output (try 0): started
2021/07/08 17:04:30 scheduler task b6d41e2a (flow 46c0112c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:170eb5315714ed0dcc0cddc73bad1ece686dd2001ecdf6806d176687784dd30a -> s3://niema-test/n100/r05/n100.r05.s044.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:30  <-  n100.r05.s044.Main.cp_out_file 46c0112c ok   extern 0s 35.8MiB
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): promoting objects (try 0): started
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): transferring output (try 0): started
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): promoting objects (try 0): started
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): retrieving diagnostic output (try 0): started
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): retrieving diagnostic output (try 0): started
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): retrieving result (try 0): started
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): retrieving result (try 0): started
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:30 scheduler task 245d590b (flow bb1aa3e2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cc78b6094e3c1035e5ddee11f05d475938270f300bf8828442f7e2762178561f -> s3://niema-test/n100/r05/n100.r05.s077.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:30  <-  n100.r05.s077.Main.cp_out_file bb1aa3e2 ok   extern 0s 35.8MiB
2021/07/08 17:04:30 scheduler task 43b97eb9 (flow bc0eb545): transferring output (try 0): started
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:30 scheduler task 86f1867b (flow f54486c8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4ff7c931f9f07107c46544034e79b1f9209fe58c60b96ff9af2592e2cea4f75a -> s3://niema-test/n100/r05/n100.r05.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:30  <-  n100.r05.s038.Main.cp_out_file f54486c8 ok   extern 0s 35.7MiB
2021/07/08 17:04:30 scheduler task 46c9fba6 (flow c2a88629): transferring output (try 0): started
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloading (try 0): started
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloading list<val<.=4b74f43f 35.7MiB> 35.7MiB>
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloading val<.=fb6c1466 35.4MiB>
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloading val<.=0a6b7b7b 35.4MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloading (try 0): started
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloading list<val<.=7bd6c253 35.8MiB> 35.8MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloading val<.=ae9c9155 35.4MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloading val<.=ec4db6d2 35.4MiB>
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloaded val<.=fb6c1466 35.4MiB>
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloaded list<val<.=4b74f43f 35.7MiB> 35.7MiB>
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloaded val<.=0a6b7b7b 35.4MiB>
2021/07/08 17:04:30 scheduler task be23124b (flow 5d6d4385): unloading (try 0): successful, next state: complete
2021/07/08 17:04:30  <-  n100.r05.s017.Main.out_file 5d6d4385 ok     exec 4m55s 35.7MiB
2021/07/08 17:04:30 n100.r05.s017.Main.out_file 5d6d4385 n100/r05/n100.r05.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7b85d73e383e16acd29a57bc4ba7c33df2a6756460594fd147e4493901f4c8fc
	sha256:5d6d43853d8005977ea526dd77f09f29aa0cd12e6967205ce951be618146323e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/be23124b279c193696fea40daca26658fdbd035be9c39a860f9e89cc23fbf4e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s017_output"
	    wget -O "n100.r05.s017_output/n100.r05.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s017_output/n100.r05.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s017_output/n100.r05.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s017_output/n100.r05.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s017_output/n100.r05.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s017_output/n100.r05.s017.reference.fas" "n100.r05.s017_output/n100.r05.s017.fq1.fastq" "n100.r05.s017_output/n100.r05.s017.fq2.fastq" | samtools view -bS - > "n100.r05.s017_output/n100.r05.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s017_output/n100.r05.s017.untrimmed.sorted.bam" "n100.r05.s017_output/n100.r05.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s017_output/n100.r05.s017.untrimmed.sorted.bam" -b "n100.r05.s017_output/n100.r05.s017.primers.bed" -p "n100.r05.s017_output/n100.r05.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" "n100.r05.s017_output/n100.r05.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s017_output/n100.r05.s017.reference.fas" "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" > "n100.r05.s017_output/n100.r05.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s017_output/n100.r05.s017.reference.fas" --call-indels "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" > "n100.r05.s017_output/n100.r05.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s017_output/n100.r05.s017.trimmed.sorted.bam" > "n100.r05.s017_output/n100.r05.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s017_output/n100.r05.s017.depth.txt" "n100.r05.s017_output/n100.r05.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s017_output/n100.r05.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s017_output/n100.r05.s017.reference.fas" | bcftools consensus -m "n100.r05.s017_output/n100.r05.s017.low_depth.tsv" tmp.vcf.gz > "n100.r05.s017_output/n100.r05.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4b74f43f12b82d566d8978ccecb539541cf4129cb32ca782dfdca097b2e9a1ce 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:04:30 scheduler task 6d01e6dc (flow 81e1204a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s017.tar.gz resources {}
2021/07/08 17:04:30  ->  n100.r05.s017.Main.cp_out_file 81e1204a exec extern s3://niema-test/n100/r05/n100.r05.s017.tar.gz 35.7MiB
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloading (try 0): started
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloading list<val<.=af617970 35.7MiB> 35.7MiB>
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloading val<.=cfbf94d8 35.4MiB>
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloading val<.=66a4bf82 35.4MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloaded val<.=ae9c9155 35.4MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloaded list<val<.=7bd6c253 35.8MiB> 35.8MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloaded val<.=ec4db6d2 35.4MiB>
2021/07/08 17:04:30 scheduler task 740318b7 (flow 9a2a57fd): unloading (try 0): successful, next state: complete
2021/07/08 17:04:30  <-  n100.r05.s080.Main.out_file 9a2a57fd ok     exec 4m55s 35.8MiB
2021/07/08 17:04:30 n100.r05.s080.Main.out_file 9a2a57fd n100/r05/n100.r05.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:979316aa130dd721eeac9b20fa05c9340f769084a4fc536e5da1e1d992c155c9
	sha256:9a2a57fdaabaa14ad8eae03e7e95aa13e3195bbe1f012a41f2fc47fc23b3de30
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/740318b7b8d1694a24600acc26f4b0af07ae71d311b3f349accef4a2c1e44051
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s080_output"
	    wget -O "n100.r05.s080_output/n100.r05.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s080_output/n100.r05.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s080_output/n100.r05.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s080_output/n100.r05.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s080_output/n100.r05.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s080_output/n100.r05.s080.reference.fas" "n100.r05.s080_output/n100.r05.s080.fq1.fastq" "n100.r05.s080_output/n100.r05.s080.fq2.fastq" | samtools view -bS - > "n100.r05.s080_output/n100.r05.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s080_output/n100.r05.s080.untrimmed.sorted.bam" "n100.r05.s080_output/n100.r05.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s080_output/n100.r05.s080.untrimmed.sorted.bam" -b "n100.r05.s080_output/n100.r05.s080.primers.bed" -p "n100.r05.s080_output/n100.r05.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" "n100.r05.s080_output/n100.r05.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s080_output/n100.r05.s080.reference.fas" "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" > "n100.r05.s080_output/n100.r05.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s080_output/n100.r05.s080.reference.fas" --call-indels "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" > "n100.r05.s080_output/n100.r05.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s080_output/n100.r05.s080.trimmed.sorted.bam" > "n100.r05.s080_output/n100.r05.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s080_output/n100.r05.s080.depth.txt" "n100.r05.s080_output/n100.r05.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s080_output/n100.r05.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s080_output/n100.r05.s080.reference.fas" | bcftools consensus -m "n100.r05.s080_output/n100.r05.s080.low_depth.tsv" tmp.vcf.gz > "n100.r05.s080_output/n100.r05.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7bd6c25397a8a881c988e2fcecc52988946af992c724ea5bc20d4b9976124acf 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=131.0MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:04:30 scheduler task 3465fbed (flow f7e319a0): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s080.tar.gz resources {}
2021/07/08 17:04:30  ->  n100.r05.s080.Main.cp_out_file f7e319a0 exec extern s3://niema-test/n100/r05/n100.r05.s080.tar.gz 35.8MiB
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloaded list<val<.=af617970 35.7MiB> 35.7MiB>
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloaded val<.=66a4bf82 35.4MiB>
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloaded val<.=cfbf94d8 35.4MiB>
2021/07/08 17:04:30 scheduler task 887f8caf (flow da518317): unloading (try 0): successful, next state: complete
2021/07/08 17:04:30  <-  n100.r05.s088.Main.out_file da518317 ok     exec 5m4s 35.7MiB
2021/07/08 17:04:30 n100.r05.s088.Main.out_file da518317 n100/r05/n100.r05.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:40539a8e2fe728831736041fe390a15c66e0b8557a9b47a6d1d775f25dbf9add
	sha256:da518317019615703a052171d87caec57412fd99ff289619e7267a0bc78ffbe5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/887f8cafa16fd41e6003b2147cb3b972d7932c4540a6bdfc5189ea8d21091b0f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s088_output"
	    wget -O "n100.r05.s088_output/n100.r05.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s088_output/n100.r05.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s088_output/n100.r05.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s088_output/n100.r05.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s088_output/n100.r05.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s088_output/n100.r05.s088.reference.fas" "n100.r05.s088_output/n100.r05.s088.fq1.fastq" "n100.r05.s088_output/n100.r05.s088.fq2.fastq" | samtools view -bS - > "n100.r05.s088_output/n100.r05.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s088_output/n100.r05.s088.untrimmed.sorted.bam" "n100.r05.s088_output/n100.r05.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s088_output/n100.r05.s088.untrimmed.sorted.bam" -b "n100.r05.s088_output/n100.r05.s088.primers.bed" -p "n100.r05.s088_output/n100.r05.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" "n100.r05.s088_output/n100.r05.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s088_output/n100.r05.s088.reference.fas" "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" > "n100.r05.s088_output/n100.r05.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s088_output/n100.r05.s088.reference.fas" --call-indels "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" > "n100.r05.s088_output/n100.r05.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s088_output/n100.r05.s088.trimmed.sorted.bam" > "n100.r05.s088_output/n100.r05.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s088_output/n100.r05.s088.depth.txt" "n100.r05.s088_output/n100.r05.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s088_output/n100.r05.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s088_output/n100.r05.s088.reference.fas" | bcftools consensus -m "n100.r05.s088_output/n100.r05.s088.low_depth.tsv" tmp.vcf.gz > "n100.r05.s088_output/n100.r05.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:af6179706c28bd18517379f5b923cbf8c7ca08f40824831e9a11761709a96a50 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=18.8MiB max=126.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:04:30 scheduler task 0bff6ecc (flow eadb26f6): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s088.tar.gz resources {}
2021/07/08 17:04:30  ->  n100.r05.s088.Main.cp_out_file eadb26f6 exec extern s3://niema-test/n100/r05/n100.r05.s088.tar.gz 35.7MiB
2021/07/08 17:04:30 scheduler task 6a846499 (flow 410e42f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:30 scheduler task 6a846499 (flow 410e42f3): promoting objects (try 0): started
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): unloading (try 0): started
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): unloading list<val<.=5fa37818 35.8MiB> 35.8MiB>
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): unloading val<.=335c68b6 35.4MiB>
2021/07/08 17:04:30 scheduler task 9a419798 (flow b1537913): unloading val<.=d669f81e 35.4MiB>
2021/07/08 17:04:30 scheduler task 05bb8925 (flow 8a29c63f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:346797904819c8256b729dabc5b547ffd7025d039e865c6d331c7834072eb677 -> s3://niema-test/n100/r05/n100.r05.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:30  <-  n100.r05.s048.Main.cp_out_file 8a29c63f ok   extern 0s 35.7MiB
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): retrieving diagnostic output (try 0): started
2021/07/08 17:04:31 scheduler task 9a419798 (flow b1537913): unloaded val<.=335c68b6 35.4MiB>
2021/07/08 17:04:31 scheduler task 9a419798 (flow b1537913): unloaded list<val<.=5fa37818 35.8MiB> 35.8MiB>
2021/07/08 17:04:31 scheduler task 9a419798 (flow b1537913): unloaded val<.=d669f81e 35.4MiB>
2021/07/08 17:04:31 scheduler task 9a419798 (flow b1537913): unloading (try 0): successful, next state: complete
2021/07/08 17:04:31  <-  n100.r05.s039.Main.out_file b1537913 ok     exec 5m4s 35.8MiB
2021/07/08 17:04:31 n100.r05.s039.Main.out_file b1537913 n100/r05/n100.r05.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d2caf2cb205585bdc438af964ba2ec7037fca9cb5ade15d9c51c0a4e417c35aa
	sha256:b15379130d89ed5675f9046b6ea55dfdabc0e9e89a45c3e7879a246141ce38f0
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a4197982dcbcbc5669295dddf0c6bf9590b6a1afd0bf57a766150f23064560b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s039_output"
	    wget -O "n100.r05.s039_output/n100.r05.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s039_output/n100.r05.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s039_output/n100.r05.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s039_output/n100.r05.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s039_output/n100.r05.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s039_output/n100.r05.s039.reference.fas" "n100.r05.s039_output/n100.r05.s039.fq1.fastq" "n100.r05.s039_output/n100.r05.s039.fq2.fastq" | samtools view -bS - > "n100.r05.s039_output/n100.r05.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s039_output/n100.r05.s039.untrimmed.sorted.bam" "n100.r05.s039_output/n100.r05.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s039_output/n100.r05.s039.untrimmed.sorted.bam" -b "n100.r05.s039_output/n100.r05.s039.primers.bed" -p "n100.r05.s039_output/n100.r05.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" "n100.r05.s039_output/n100.r05.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s039_output/n100.r05.s039.reference.fas" "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" > "n100.r05.s039_output/n100.r05.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s039_output/n100.r05.s039.reference.fas" --call-indels "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" > "n100.r05.s039_output/n100.r05.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s039_output/n100.r05.s039.trimmed.sorted.bam" > "n100.r05.s039_output/n100.r05.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s039_output/n100.r05.s039.depth.txt" "n100.r05.s039_output/n100.r05.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s039_output/n100.r05.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s039_output/n100.r05.s039.reference.fas" | bcftools consensus -m "n100.r05.s039_output/n100.r05.s039.low_depth.tsv" tmp.vcf.gz > "n100.r05.s039_output/n100.r05.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5fa3781875bce956e368d57472e74d24761ded33adb586bc8b8652471f574da4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.8MiB max=131.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=862B max=3.0KiB
2021/07/08 17:04:31 scheduler task 892cad29 (flow 2e679db3): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s039.tar.gz resources {}
2021/07/08 17:04:31  ->  n100.r05.s039.Main.cp_out_file 2e679db3 exec extern s3://niema-test/n100/r05/n100.r05.s039.tar.gz 35.8MiB
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): retrieving result (try 0): started
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloading (try 0): started
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloading list<val<.=d3ea8acb 35.7MiB> 35.7MiB>
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloading val<.=449e0d7d 35.4MiB>
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloading val<.=2a3e0e94 35.4MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): transferring output (try 0): started
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): promoting objects (try 0): started
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloaded list<val<.=d3ea8acb 35.7MiB> 35.7MiB>
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloaded val<.=449e0d7d 35.4MiB>
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloaded val<.=2a3e0e94 35.4MiB>
2021/07/08 17:04:31 scheduler task 43b97eb9 (flow bc0eb545): unloading (try 0): successful, next state: complete
2021/07/08 17:04:31  <-  n100.r05.s015.Main.out_file bc0eb545 ok     exec 4m56s 35.7MiB
2021/07/08 17:04:31 n100.r05.s015.Main.out_file bc0eb545 n100/r05/n100.r05.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:675d2dfb0a4dadc14b15752dc428188009d514cb724bdc720e00422234033c73
	sha256:bc0eb545608d25f064a3aa71467817b11e6f8b41bae86918266f336b0c133be1
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43b97eb9642180da491ca0c8998bda7cd91c60fddc1193f171a789f8306f8f5e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s015_output"
	    wget -O "n100.r05.s015_output/n100.r05.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s015_output/n100.r05.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s015_output/n100.r05.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s015_output/n100.r05.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s015_output/n100.r05.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s015_output/n100.r05.s015.reference.fas" "n100.r05.s015_output/n100.r05.s015.fq1.fastq" "n100.r05.s015_output/n100.r05.s015.fq2.fastq" | samtools view -bS - > "n100.r05.s015_output/n100.r05.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s015_output/n100.r05.s015.untrimmed.sorted.bam" "n100.r05.s015_output/n100.r05.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s015_output/n100.r05.s015.untrimmed.sorted.bam" -b "n100.r05.s015_output/n100.r05.s015.primers.bed" -p "n100.r05.s015_output/n100.r05.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" "n100.r05.s015_output/n100.r05.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s015_output/n100.r05.s015.reference.fas" "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" > "n100.r05.s015_output/n100.r05.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s015_output/n100.r05.s015.reference.fas" --call-indels "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" > "n100.r05.s015_output/n100.r05.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s015_output/n100.r05.s015.trimmed.sorted.bam" > "n100.r05.s015_output/n100.r05.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s015_output/n100.r05.s015.depth.txt" "n100.r05.s015_output/n100.r05.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s015_output/n100.r05.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s015_output/n100.r05.s015.reference.fas" | bcftools consensus -m "n100.r05.s015_output/n100.r05.s015.low_depth.tsv" tmp.vcf.gz > "n100.r05.s015_output/n100.r05.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d3ea8acb059eb0077233e0e5922baba5fff982dfebc40d673c1ce7c2567eabb4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=127.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:04:31 scheduler task 1aaade6c (flow d7f5dc82): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s015.tar.gz resources {}
2021/07/08 17:04:31  ->  n100.r05.s015.Main.cp_out_file d7f5dc82 exec extern s3://niema-test/n100/r05/n100.r05.s015.tar.gz 35.7MiB
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloading (try 0): started
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloading list<val<.=873dff66 35.8MiB> 35.8MiB>
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloading val<.=f89597da 35.4MiB>
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloading val<.=86a3f35b 35.4MiB>
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): retrieving diagnostic output (try 0): started
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloaded val<.=86a3f35b 35.4MiB>
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloaded val<.=f89597da 35.4MiB>
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloaded list<val<.=873dff66 35.8MiB> 35.8MiB>
2021/07/08 17:04:31 scheduler task 46c9fba6 (flow c2a88629): unloading (try 0): successful, next state: complete
2021/07/08 17:04:31  <-  n100.r05.s066.Main.out_file c2a88629 ok     exec 5m4s 35.8MiB
2021/07/08 17:04:31 n100.r05.s066.Main.out_file c2a88629 n100/r05/n100.r05.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f8e28e58685c50e131009f5b5ea3d190735a83c775966684973fcae0450aa86b
	sha256:c2a886295a8119ba44072f401c45806219aa0308b001aabbfab86e77fa5b5807
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/46c9fba61268c54727ace635ee71403738cce87ae1274b734664871b391d3f41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s066_output"
	    wget -O "n100.r05.s066_output/n100.r05.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s066_output/n100.r05.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s066_output/n100.r05.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s066_output/n100.r05.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s066_output/n100.r05.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s066_output/n100.r05.s066.reference.fas" "n100.r05.s066_output/n100.r05.s066.fq1.fastq" "n100.r05.s066_output/n100.r05.s066.fq2.fastq" | samtools view -bS - > "n100.r05.s066_output/n100.r05.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s066_output/n100.r05.s066.untrimmed.sorted.bam" "n100.r05.s066_output/n100.r05.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s066_output/n100.r05.s066.untrimmed.sorted.bam" -b "n100.r05.s066_output/n100.r05.s066.primers.bed" -p "n100.r05.s066_output/n100.r05.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" "n100.r05.s066_output/n100.r05.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s066_output/n100.r05.s066.reference.fas" "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" > "n100.r05.s066_output/n100.r05.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s066_output/n100.r05.s066.reference.fas" --call-indels "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" > "n100.r05.s066_output/n100.r05.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s066_output/n100.r05.s066.trimmed.sorted.bam" > "n100.r05.s066_output/n100.r05.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s066_output/n100.r05.s066.depth.txt" "n100.r05.s066_output/n100.r05.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s066_output/n100.r05.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s066_output/n100.r05.s066.reference.fas" | bcftools consensus -m "n100.r05.s066_output/n100.r05.s066.low_depth.tsv" tmp.vcf.gz > "n100.r05.s066_output/n100.r05.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:873dff66c7860a938905cd0079a919e8115d07390aecdacfcd7d81b1720d62a8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=129.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:04:31 scheduler task ea35ee3e (flow 62d16a36): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s066.tar.gz resources {}
2021/07/08 17:04:31  ->  n100.r05.s066.Main.cp_out_file 62d16a36 exec extern s3://niema-test/n100/r05/n100.r05.s066.tar.gz 35.8MiB
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): retrieving result (try 0): started
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:31 scheduler task ed56a43b (flow 4af71a7e): transferring output (try 0): started
2021/07/08 17:04:31 scheduler task 6d01e6dc (flow 81e1204a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4b74f43f12b82d566d8978ccecb539541cf4129cb32ca782dfdca097b2e9a1ce -> s3://niema-test/n100/r05/n100.r05.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:31  <-  n100.r05.s017.Main.cp_out_file 81e1204a ok   extern 0s 35.7MiB
2021/07/08 17:04:31 scheduler task 3465fbed (flow f7e319a0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7bd6c25397a8a881c988e2fcecc52988946af992c724ea5bc20d4b9976124acf -> s3://niema-test/n100/r05/n100.r05.s080.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:31  <-  n100.r05.s080.Main.cp_out_file f7e319a0 ok   extern 0s 35.8MiB
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloading (try 0): started
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloading val<.=920d1fcc 35.4MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloading val<.=60f9e1ef 35.4MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloading list<val<.=98e3266b 35.7MiB> 35.7MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloaded val<.=60f9e1ef 35.4MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloaded val<.=920d1fcc 35.4MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloaded list<val<.=98e3266b 35.7MiB> 35.7MiB>
2021/07/08 17:04:31 scheduler task 6a846499 (flow 410e42f3): unloading (try 0): successful, next state: complete
2021/07/08 17:04:31  <-  n100.r05.s006.Main.out_file 410e42f3 ok     exec 5m5s 35.7MiB
2021/07/08 17:04:31 n100.r05.s006.Main.out_file 410e42f3 n100/r05/n100.r05.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f6ffd2f9597be07844e119fd76eacacead794b9c6c274105edf7fcd5ec816cb1
	sha256:410e42f3840a4b145ff609dccc4170f4e680a238b404d1f6fd521fa7ad06f7bd
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a846499b732f10f89795b852745e889f64076e83d15db1069e22b22039af5cb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s006_output"
	    wget -O "n100.r05.s006_output/n100.r05.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s006_output/n100.r05.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s006_output/n100.r05.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s006_output/n100.r05.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s006_output/n100.r05.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s006_output/n100.r05.s006.reference.fas" "n100.r05.s006_output/n100.r05.s006.fq1.fastq" "n100.r05.s006_output/n100.r05.s006.fq2.fastq" | samtools view -bS - > "n100.r05.s006_output/n100.r05.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s006_output/n100.r05.s006.untrimmed.sorted.bam" "n100.r05.s006_output/n100.r05.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s006_output/n100.r05.s006.untrimmed.sorted.bam" -b "n100.r05.s006_output/n100.r05.s006.primers.bed" -p "n100.r05.s006_output/n100.r05.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" "n100.r05.s006_output/n100.r05.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s006_output/n100.r05.s006.reference.fas" "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" > "n100.r05.s006_output/n100.r05.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s006_output/n100.r05.s006.reference.fas" --call-indels "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" > "n100.r05.s006_output/n100.r05.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s006_output/n100.r05.s006.trimmed.sorted.bam" > "n100.r05.s006_output/n100.r05.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s006_output/n100.r05.s006.depth.txt" "n100.r05.s006_output/n100.r05.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s006_output/n100.r05.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s006_output/n100.r05.s006.reference.fas" | bcftools consensus -m "n100.r05.s006_output/n100.r05.s006.low_depth.tsv" tmp.vcf.gz > "n100.r05.s006_output/n100.r05.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:98e3266b4e6416d2c345556b32af42c66cf590c5b37dc72ad68f211830536093 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=127.4MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=870B max=3.1KiB
2021/07/08 17:04:31 scheduler task 71fea6a7 (flow 81af31f3): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s006.tar.gz resources {}
2021/07/08 17:04:31  ->  n100.r05.s006.Main.cp_out_file 81af31f3 exec extern s3://niema-test/n100/r05/n100.r05.s006.tar.gz 35.7MiB
2021/07/08 17:04:31 scheduler task 892cad29 (flow 2e679db3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5fa3781875bce956e368d57472e74d24761ded33adb586bc8b8652471f574da4 -> s3://niema-test/n100/r05/n100.r05.s039.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:31  <-  n100.r05.s039.Main.cp_out_file 2e679db3 ok   extern 0s 35.8MiB
2021/07/08 17:04:31 scheduler task 34c034d0 (flow 98cff474): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:31 scheduler task 34c034d0 (flow 98cff474): promoting objects (try 0): started
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:32 scheduler task 0bff6ecc (flow eadb26f6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:af6179706c28bd18517379f5b923cbf8c7ca08f40824831e9a11761709a96a50 -> s3://niema-test/n100/r05/n100.r05.s088.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:32  <-  n100.r05.s088.Main.cp_out_file eadb26f6 ok   extern 0s 35.7MiB
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloading (try 0): started
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloading list<val<.=8dc9aeea 35.7MiB> 35.7MiB>
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloading val<.=9ed24075 35.4MiB>
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloading val<.=6e8fd397 35.4MiB>
2021/07/08 17:04:32 scheduler task ea35ee3e (flow 62d16a36): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:873dff66c7860a938905cd0079a919e8115d07390aecdacfcd7d81b1720d62a8 -> s3://niema-test/n100/r05/n100.r05.s066.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:32  <-  n100.r05.s066.Main.cp_out_file 62d16a36 ok   extern 0s 35.8MiB
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): retrieving diagnostic output (try 0): started
2021/07/08 17:04:32 scheduler task 1aaade6c (flow d7f5dc82): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d3ea8acb059eb0077233e0e5922baba5fff982dfebc40d673c1ce7c2567eabb4 -> s3://niema-test/n100/r05/n100.r05.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:32  <-  n100.r05.s015.Main.cp_out_file d7f5dc82 ok   extern 0s 35.7MiB
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloaded val<.=9ed24075 35.4MiB>
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloaded list<val<.=8dc9aeea 35.7MiB> 35.7MiB>
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloaded val<.=6e8fd397 35.4MiB>
2021/07/08 17:04:32 scheduler task ed56a43b (flow 4af71a7e): unloading (try 0): successful, next state: complete
2021/07/08 17:04:32  <-  n100.r05.s091.Main.out_file 4af71a7e ok     exec 4m56s 35.7MiB
2021/07/08 17:04:32 n100.r05.s091.Main.out_file 4af71a7e n100/r05/n100.r05.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:45279f05cc8e90437ebf9b2936f20716c451762afb787b9240177ee5931f9e95
	sha256:4af71a7ecf68128f98d72096732c895363821baebff4b4cf0efa2b724800778a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ed56a43b4612487f01c8d0282a2d6ecad3f6f5f15ea9a7d56640be0482b4dc55
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s091_output"
	    wget -O "n100.r05.s091_output/n100.r05.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s091_output/n100.r05.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s091_output/n100.r05.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s091_output/n100.r05.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s091_output/n100.r05.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s091_output/n100.r05.s091.reference.fas" "n100.r05.s091_output/n100.r05.s091.fq1.fastq" "n100.r05.s091_output/n100.r05.s091.fq2.fastq" | samtools view -bS - > "n100.r05.s091_output/n100.r05.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s091_output/n100.r05.s091.untrimmed.sorted.bam" "n100.r05.s091_output/n100.r05.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s091_output/n100.r05.s091.untrimmed.sorted.bam" -b "n100.r05.s091_output/n100.r05.s091.primers.bed" -p "n100.r05.s091_output/n100.r05.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" "n100.r05.s091_output/n100.r05.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s091_output/n100.r05.s091.reference.fas" "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" > "n100.r05.s091_output/n100.r05.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s091_output/n100.r05.s091.reference.fas" --call-indels "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" > "n100.r05.s091_output/n100.r05.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s091_output/n100.r05.s091.trimmed.sorted.bam" > "n100.r05.s091_output/n100.r05.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s091_output/n100.r05.s091.depth.txt" "n100.r05.s091_output/n100.r05.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s091_output/n100.r05.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s091_output/n100.r05.s091.reference.fas" | bcftools consensus -m "n100.r05.s091_output/n100.r05.s091.low_depth.tsv" tmp.vcf.gz > "n100.r05.s091_output/n100.r05.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8dc9aeea0c321c6c443bab5e922bfa33a1d4c1930b11b021674e2bad70784c90 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.0MiB max=131.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:32 scheduler task ed62e451 (flow d9bac52e): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s091.tar.gz resources {}
2021/07/08 17:04:32  ->  n100.r05.s091.Main.cp_out_file d9bac52e exec extern s3://niema-test/n100/r05/n100.r05.s091.tar.gz 35.7MiB
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): retrieving result (try 0): started
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): transferring output (try 0): started
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): promoting objects (try 0): started
2021/07/08 17:04:32 scheduler task 71fea6a7 (flow 81af31f3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:98e3266b4e6416d2c345556b32af42c66cf590c5b37dc72ad68f211830536093 -> s3://niema-test/n100/r05/n100.r05.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:32  <-  n100.r05.s006.Main.cp_out_file 81af31f3 ok   extern 0s 35.7MiB
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): retrieving diagnostic output (try 0): started
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): promoting objects (try 0): started
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): retrieving result (try 0): started
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): promoting objects (try 0): started
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): retrieving diagnostic output (try 0): started
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:32 scheduler task 96f028fe (flow a5550ae3): transferring output (try 0): started
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): retrieving diagnostic output (try 0): started
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): retrieving result (try 0): started
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloading (try 0): started
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloading list<val<.=8868beda 35.7MiB> 35.7MiB>
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloading val<.=11ad8f73 35.4MiB>
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloading val<.=e962aea7 35.4MiB>
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): retrieving result (try 0): started
2021/07/08 17:04:32 scheduler task d2c3cd80 (flow d4092336): transferring output (try 0): started
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloaded val<.=e962aea7 35.4MiB>
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloaded list<val<.=8868beda 35.7MiB> 35.7MiB>
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloaded val<.=11ad8f73 35.4MiB>
2021/07/08 17:04:32 scheduler task 34c034d0 (flow 98cff474): unloading (try 0): successful, next state: complete
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:32  <-  n100.r05.s036.Main.out_file 98cff474 ok     exec 4m57s 35.7MiB
2021/07/08 17:04:32 n100.r05.s036.Main.out_file 98cff474 n100/r05/n100.r05.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1397b18ab3f27f639e28fe2738b8139c008117b7ce589476790889bf3636ea11
	sha256:98cff4749a632cb7345706ef5d8b69b948bb5f4fb585e8e7753d2e259618b8b0
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/34c034d01e26e7d90265d8de98f09b38af36a78e276a9a28a0ea0a03ce238681
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s036_output"
	    wget -O "n100.r05.s036_output/n100.r05.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s036_output/n100.r05.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s036_output/n100.r05.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s036_output/n100.r05.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s036_output/n100.r05.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s036_output/n100.r05.s036.reference.fas" "n100.r05.s036_output/n100.r05.s036.fq1.fastq" "n100.r05.s036_output/n100.r05.s036.fq2.fastq" | samtools view -bS - > "n100.r05.s036_output/n100.r05.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s036_output/n100.r05.s036.untrimmed.sorted.bam" "n100.r05.s036_output/n100.r05.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s036_output/n100.r05.s036.untrimmed.sorted.bam" -b "n100.r05.s036_output/n100.r05.s036.primers.bed" -p "n100.r05.s036_output/n100.r05.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" "n100.r05.s036_output/n100.r05.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s036_output/n100.r05.s036.reference.fas" "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" > "n100.r05.s036_output/n100.r05.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s036_output/n100.r05.s036.reference.fas" --call-indels "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" > "n100.r05.s036_output/n100.r05.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s036_output/n100.r05.s036.trimmed.sorted.bam" > "n100.r05.s036_output/n100.r05.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s036_output/n100.r05.s036.depth.txt" "n100.r05.s036_output/n100.r05.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s036_output/n100.r05.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s036_output/n100.r05.s036.reference.fas" | bcftools consensus -m "n100.r05.s036_output/n100.r05.s036.low_depth.tsv" tmp.vcf.gz > "n100.r05.s036_output/n100.r05.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8868bedad1b898990257b010621eef6e1732b185b05996dc3b8b042a184249d3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=124.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:32 scheduler task ffc9a051 (flow 00129384): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s036.tar.gz resources {}
2021/07/08 17:04:32  ->  n100.r05.s036.Main.cp_out_file 00129384 exec extern s3://niema-test/n100/r05/n100.r05.s036.tar.gz 35.7MiB
2021/07/08 17:04:32 scheduler task 7cbf55a6 (flow 148cd5d9): transferring output (try 0): started
2021/07/08 17:04:32 scheduler task ed62e451 (flow d9bac52e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8dc9aeea0c321c6c443bab5e922bfa33a1d4c1930b11b021674e2bad70784c90 -> s3://niema-test/n100/r05/n100.r05.s091.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:32  <-  n100.r05.s091.Main.cp_out_file d9bac52e ok   extern 0s 35.7MiB
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloading (try 0): started
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloading list<val<.=08629030 35.8MiB> 35.8MiB>
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloading val<.=911e2c96 35.4MiB>
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloading val<.=aa150b0f 35.4MiB>
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): promoting objects (try 0): started
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloaded val<.=aa150b0f 35.4MiB>
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloaded list<val<.=08629030 35.8MiB> 35.8MiB>
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloaded val<.=911e2c96 35.4MiB>
2021/07/08 17:04:33 scheduler task 96f028fe (flow a5550ae3): unloading (try 0): successful, next state: complete
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:33  <-  n100.r05.s057.Main.out_file a5550ae3 ok     exec 5m7s 35.8MiB
2021/07/08 17:04:33 n100.r05.s057.Main.out_file a5550ae3 n100/r05/n100.r05.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c8d9ae1d90f602b264a4b3519e6780018c3cb4bd693d6b24c4856b5bd9ebe4ed
	sha256:a5550ae3e666f9244f750b8c9353ae5426356aa41ea635220de9e5f8007c51a6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/96f028feefcb82d3de1de3e4bb0ec434a1a5c945926ff4e9e751cb72c63ae5ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s057_output"
	    wget -O "n100.r05.s057_output/n100.r05.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s057_output/n100.r05.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s057_output/n100.r05.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s057_output/n100.r05.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s057_output/n100.r05.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s057_output/n100.r05.s057.reference.fas" "n100.r05.s057_output/n100.r05.s057.fq1.fastq" "n100.r05.s057_output/n100.r05.s057.fq2.fastq" | samtools view -bS - > "n100.r05.s057_output/n100.r05.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s057_output/n100.r05.s057.untrimmed.sorted.bam" "n100.r05.s057_output/n100.r05.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s057_output/n100.r05.s057.untrimmed.sorted.bam" -b "n100.r05.s057_output/n100.r05.s057.primers.bed" -p "n100.r05.s057_output/n100.r05.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" "n100.r05.s057_output/n100.r05.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s057_output/n100.r05.s057.reference.fas" "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" > "n100.r05.s057_output/n100.r05.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s057_output/n100.r05.s057.reference.fas" --call-indels "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" > "n100.r05.s057_output/n100.r05.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s057_output/n100.r05.s057.trimmed.sorted.bam" > "n100.r05.s057_output/n100.r05.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s057_output/n100.r05.s057.depth.txt" "n100.r05.s057_output/n100.r05.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s057_output/n100.r05.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s057_output/n100.r05.s057.reference.fas" | bcftools consensus -m "n100.r05.s057_output/n100.r05.s057.low_depth.tsv" tmp.vcf.gz > "n100.r05.s057_output/n100.r05.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0862903017c324f9c2958fb4f6ec4ff52cd785cbca9a067f9e576b261ad977fe 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.4MiB max=129.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=872B max=3.1KiB
2021/07/08 17:04:33 scheduler task e095ee1f (flow 1609f4ba): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s057.tar.gz resources {}
2021/07/08 17:04:33  ->  n100.r05.s057.Main.cp_out_file 1609f4ba exec extern s3://niema-test/n100/r05/n100.r05.s057.tar.gz 35.8MiB
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloading (try 0): started
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloading list<val<.=eae9dd42 35.7MiB> 35.7MiB>
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloading val<.=83822849 35.4MiB>
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloading val<.=c5ff4b00 35.4MiB>
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): retrieving diagnostic output (try 0): started
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): promoting objects (try 0): started
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloaded val<.=83822849 35.4MiB>
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloaded list<val<.=eae9dd42 35.7MiB> 35.7MiB>
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloaded val<.=c5ff4b00 35.4MiB>
2021/07/08 17:04:33 scheduler task d2c3cd80 (flow d4092336): unloading (try 0): successful, next state: complete
2021/07/08 17:04:33  <-  n100.r05.s086.Main.out_file d4092336 ok     exec 4m58s 35.7MiB
2021/07/08 17:04:33 n100.r05.s086.Main.out_file d4092336 n100/r05/n100.r05.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:945a4b56cb90f92c089150bd5fa13ff29ddb4983bb3c7ad3693645c46bef4d21
	sha256:d40923366ee1e468a47d030272575628cec6a61cb26f52af8f30f427917befeb
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d2c3cd80184fcd8ebf4c63e457ce9c72c2ef540b3951da26489ca372aca74aab
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s086_output"
	    wget -O "n100.r05.s086_output/n100.r05.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s086_output/n100.r05.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s086_output/n100.r05.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s086_output/n100.r05.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s086_output/n100.r05.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s086_output/n100.r05.s086.reference.fas" "n100.r05.s086_output/n100.r05.s086.fq1.fastq" "n100.r05.s086_output/n100.r05.s086.fq2.fastq" | samtools view -bS - > "n100.r05.s086_output/n100.r05.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s086_output/n100.r05.s086.untrimmed.sorted.bam" "n100.r05.s086_output/n100.r05.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s086_output/n100.r05.s086.untrimmed.sorted.bam" -b "n100.r05.s086_output/n100.r05.s086.primers.bed" -p "n100.r05.s086_output/n100.r05.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" "n100.r05.s086_output/n100.r05.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s086_output/n100.r05.s086.reference.fas" "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" > "n100.r05.s086_output/n100.r05.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s086_output/n100.r05.s086.reference.fas" --call-indels "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" > "n100.r05.s086_output/n100.r05.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s086_output/n100.r05.s086.trimmed.sorted.bam" > "n100.r05.s086_output/n100.r05.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s086_output/n100.r05.s086.depth.txt" "n100.r05.s086_output/n100.r05.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s086_output/n100.r05.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s086_output/n100.r05.s086.reference.fas" | bcftools consensus -m "n100.r05.s086_output/n100.r05.s086.low_depth.tsv" tmp.vcf.gz > "n100.r05.s086_output/n100.r05.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eae9dd421b63e1ad0b1b1097b15a89e4bc87f92a38a2446fe269ccbbb601ab8b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=130.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:04:33 scheduler task 5333ec04 (flow e20858cc): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s086.tar.gz resources {}
2021/07/08 17:04:33  ->  n100.r05.s086.Main.cp_out_file e20858cc exec extern s3://niema-test/n100/r05/n100.r05.s086.tar.gz 35.7MiB
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:33 scheduler task ffc9a051 (flow 00129384): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8868bedad1b898990257b010621eef6e1732b185b05996dc3b8b042a184249d3 -> s3://niema-test/n100/r05/n100.r05.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:33  <-  n100.r05.s036.Main.cp_out_file 00129384 ok   extern 0s 35.7MiB
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): retrieving result (try 0): started
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloading (try 0): started
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloading list<val<.=559e8720 35.8MiB> 35.8MiB>
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloading val<.=5b07a54d 35.4MiB>
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloading val<.=078567e2 35.4MiB>
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): retrieving diagnostic output (try 0): started
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): transferring output (try 0): started
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloaded list<val<.=559e8720 35.8MiB> 35.8MiB>
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloaded val<.=078567e2 35.4MiB>
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloaded val<.=5b07a54d 35.4MiB>
2021/07/08 17:04:33 scheduler task 7cbf55a6 (flow 148cd5d9): unloading (try 0): successful, next state: complete
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:33  <-  n100.r05.s020.Main.out_file 148cd5d9 ok     exec 5m7s 35.8MiB
2021/07/08 17:04:33 n100.r05.s020.Main.out_file 148cd5d9 n100/r05/n100.r05.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5e7b47728b2fb1ae44069c7654514bee48832a07f28111a40d31dc707d4ed19
	sha256:148cd5d940d3f0c8e60249ea7ba5cf185f4334f581d8cf3277874924b9cae301
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7cbf55a61b229674c21e9a45e0db81ca6c6cf7ece829cb0b688120263e5685b8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s020_output"
	    wget -O "n100.r05.s020_output/n100.r05.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s020_output/n100.r05.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s020_output/n100.r05.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s020_output/n100.r05.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s020_output/n100.r05.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s020_output/n100.r05.s020.reference.fas" "n100.r05.s020_output/n100.r05.s020.fq1.fastq" "n100.r05.s020_output/n100.r05.s020.fq2.fastq" | samtools view -bS - > "n100.r05.s020_output/n100.r05.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s020_output/n100.r05.s020.untrimmed.sorted.bam" "n100.r05.s020_output/n100.r05.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s020_output/n100.r05.s020.untrimmed.sorted.bam" -b "n100.r05.s020_output/n100.r05.s020.primers.bed" -p "n100.r05.s020_output/n100.r05.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" "n100.r05.s020_output/n100.r05.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s020_output/n100.r05.s020.reference.fas" "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" > "n100.r05.s020_output/n100.r05.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s020_output/n100.r05.s020.reference.fas" --call-indels "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" > "n100.r05.s020_output/n100.r05.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s020_output/n100.r05.s020.trimmed.sorted.bam" > "n100.r05.s020_output/n100.r05.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s020_output/n100.r05.s020.depth.txt" "n100.r05.s020_output/n100.r05.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s020_output/n100.r05.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s020_output/n100.r05.s020.reference.fas" | bcftools consensus -m "n100.r05.s020_output/n100.r05.s020.low_depth.tsv" tmp.vcf.gz > "n100.r05.s020_output/n100.r05.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:559e87200d2f92ea6705999a980b69371850067dc432b3e4d5c25f89cf18d557 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=128.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=866B max=3.1KiB
2021/07/08 17:04:33 scheduler task 8c3f7402 (flow 60da0bf2): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s020.tar.gz resources {}
2021/07/08 17:04:33  ->  n100.r05.s020.Main.cp_out_file 60da0bf2 exec extern s3://niema-test/n100/r05/n100.r05.s020.tar.gz 35.8MiB
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): promoting objects (try 0): started
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): retrieving result (try 0): started
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): retrieving diagnostic output (try 0): started
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:33 scheduler task cdca394a (flow 777a4ca0): transferring output (try 0): started
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): promoting objects (try 0): started
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): retrieving result (try 0): started
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): retrieving diagnostic output (try 0): started
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:33 scheduler task c84b5c9a (flow c81e95cd): transferring output (try 0): started
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): retrieving result (try 0): started
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:33 scheduler task ed2138a1 (flow aef25be2): transferring output (try 0): started
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): unloading (try 0): started
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): unloading list<val<.=e4ee8d88 35.8MiB> 35.8MiB>
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): unloading val<.=91ba01ba 35.4MiB>
2021/07/08 17:04:33 scheduler task 5789b1c4 (flow 5c0cc62e): unloading val<.=57df213f 35.4MiB>
2021/07/08 17:04:33 scheduler task 541b05df (flow 28c707dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:33 scheduler task 541b05df (flow 28c707dc): promoting objects (try 0): started
2021/07/08 17:04:33 scheduler task 6af0d423 (flow c1226fd8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:33 scheduler task 5333ec04 (flow e20858cc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eae9dd421b63e1ad0b1b1097b15a89e4bc87f92a38a2446fe269ccbbb601ab8b -> s3://niema-test/n100/r05/n100.r05.s086.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:33  <-  n100.r05.s086.Main.cp_out_file e20858cc ok   extern 0s 35.7MiB
2021/07/08 17:04:33 scheduler task 6af0d423 (flow c1226fd8): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task e095ee1f (flow 1609f4ba): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0862903017c324f9c2958fb4f6ec4ff52cd785cbca9a067f9e576b261ad977fe -> s3://niema-test/n100/r05/n100.r05.s057.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:34  <-  n100.r05.s057.Main.cp_out_file 1609f4ba ok   extern 0s 35.8MiB
2021/07/08 17:04:34 scheduler task 5789b1c4 (flow 5c0cc62e): unloaded val<.=91ba01ba 35.4MiB>
2021/07/08 17:04:34 scheduler task 5789b1c4 (flow 5c0cc62e): unloaded list<val<.=e4ee8d88 35.8MiB> 35.8MiB>
2021/07/08 17:04:34 scheduler task 5789b1c4 (flow 5c0cc62e): unloaded val<.=57df213f 35.4MiB>
2021/07/08 17:04:34 scheduler task 5789b1c4 (flow 5c0cc62e): unloading (try 0): successful, next state: complete
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34  <-  n100.r05.s096.Main.out_file 5c0cc62e ok     exec 5m8s 35.8MiB
2021/07/08 17:04:34 n100.r05.s096.Main.out_file 5c0cc62e n100/r05/n100.r05.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5236c7e25a14bb2a28dca4e583e6c7043a5a24d0f486653f29c551387615f4d3
	sha256:5c0cc62e68be95c246bdef245c1aa9713d1f81ddc970ef7553f43b643626dc6d
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5789b1c4b24351cf67de695f2a0815c65977126d5ddd8ad5526630c886732ead
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s096_output"
	    wget -O "n100.r05.s096_output/n100.r05.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s096_output/n100.r05.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s096_output/n100.r05.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s096_output/n100.r05.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s096_output/n100.r05.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s096_output/n100.r05.s096.reference.fas" "n100.r05.s096_output/n100.r05.s096.fq1.fastq" "n100.r05.s096_output/n100.r05.s096.fq2.fastq" | samtools view -bS - > "n100.r05.s096_output/n100.r05.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s096_output/n100.r05.s096.untrimmed.sorted.bam" "n100.r05.s096_output/n100.r05.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s096_output/n100.r05.s096.untrimmed.sorted.bam" -b "n100.r05.s096_output/n100.r05.s096.primers.bed" -p "n100.r05.s096_output/n100.r05.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" "n100.r05.s096_output/n100.r05.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s096_output/n100.r05.s096.reference.fas" "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" > "n100.r05.s096_output/n100.r05.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s096_output/n100.r05.s096.reference.fas" --call-indels "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" > "n100.r05.s096_output/n100.r05.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s096_output/n100.r05.s096.trimmed.sorted.bam" > "n100.r05.s096_output/n100.r05.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s096_output/n100.r05.s096.depth.txt" "n100.r05.s096_output/n100.r05.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s096_output/n100.r05.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s096_output/n100.r05.s096.reference.fas" | bcftools consensus -m "n100.r05.s096_output/n100.r05.s096.low_depth.tsv" tmp.vcf.gz > "n100.r05.s096_output/n100.r05.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e4ee8d880e76909267d4d426c8db364cbabe70c53e7aed29e5f5b355b5fd6189 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=127.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=869B max=3.0KiB
2021/07/08 17:04:34 scheduler task fdfb86d0 (flow 5c5e594f): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s096.tar.gz resources {}
2021/07/08 17:04:34  ->  n100.r05.s096.Main.cp_out_file 5c5e594f exec extern s3://niema-test/n100/r05/n100.r05.s096.tar.gz 35.8MiB
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task 6af0d423 (flow c1226fd8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task 6af0d423 (flow c1226fd8): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloading (try 0): started
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloading list<val<.=8c50bde9 35.7MiB> 35.7MiB>
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloading val<.=1aa67da5 35.4MiB>
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloading val<.=3c3f2b0b 35.4MiB>
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task 6af0d423 (flow c1226fd8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task 6af0d423 (flow c1226fd8): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloaded val<.=1aa67da5 35.4MiB>
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloaded list<val<.=8c50bde9 35.7MiB> 35.7MiB>
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloaded val<.=3c3f2b0b 35.4MiB>
2021/07/08 17:04:34 scheduler task cdca394a (flow 777a4ca0): unloading (try 0): successful, next state: complete
2021/07/08 17:04:34  <-  n100.r05.s099.Main.out_file 777a4ca0 ok     exec 4m51s 35.7MiB
2021/07/08 17:04:34 n100.r05.s099.Main.out_file 777a4ca0 n100/r05/n100.r05.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ae055d0a4ab4b30891938867792f53e478f2586cc0f82260007ea5c5e79aaa4
	sha256:777a4ca06c1c8dfdcda57b0116e7b2ba6c5cfda5c23c5aad44e9adcbdf414b95
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cdca394ab6a020b96fd5781ab492712f61ad2b745edb2c0b7cb76c729558ac4a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s099_output"
	    wget -O "n100.r05.s099_output/n100.r05.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s099_output/n100.r05.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s099_output/n100.r05.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s099_output/n100.r05.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s099_output/n100.r05.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s099_output/n100.r05.s099.reference.fas" "n100.r05.s099_output/n100.r05.s099.fq1.fastq" "n100.r05.s099_output/n100.r05.s099.fq2.fastq" | samtools view -bS - > "n100.r05.s099_output/n100.r05.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s099_output/n100.r05.s099.untrimmed.sorted.bam" "n100.r05.s099_output/n100.r05.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s099_output/n100.r05.s099.untrimmed.sorted.bam" -b "n100.r05.s099_output/n100.r05.s099.primers.bed" -p "n100.r05.s099_output/n100.r05.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" "n100.r05.s099_output/n100.r05.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s099_output/n100.r05.s099.reference.fas" "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" > "n100.r05.s099_output/n100.r05.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s099_output/n100.r05.s099.reference.fas" --call-indels "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" > "n100.r05.s099_output/n100.r05.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s099_output/n100.r05.s099.trimmed.sorted.bam" > "n100.r05.s099_output/n100.r05.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s099_output/n100.r05.s099.depth.txt" "n100.r05.s099_output/n100.r05.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s099_output/n100.r05.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s099_output/n100.r05.s099.reference.fas" | bcftools consensus -m "n100.r05.s099_output/n100.r05.s099.low_depth.tsv" tmp.vcf.gz > "n100.r05.s099_output/n100.r05.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8c50bde9c6a1946fd2118612e111f91e2cc960b9cefb6e144721bd3765e303f0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=129.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:04:34 scheduler task 6de17ebb (flow d6f8bc3a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s099.tar.gz resources {}
2021/07/08 17:04:34  ->  n100.r05.s099.Main.cp_out_file d6f8bc3a exec extern s3://niema-test/n100/r05/n100.r05.s099.tar.gz 35.7MiB
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): transferring output (try 0): started
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task 6af0d423 (flow c1226fd8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:34 scheduler task 6af0d423 (flow c1226fd8): transferring output (try 0): started
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloading (try 0): started
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloading list<val<.=f69d896e 35.7MiB> 35.7MiB>
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloading val<.=b0526c05 35.4MiB>
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloading val<.=3e1eb71a 35.4MiB>
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): transferring output (try 0): started
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloaded list<val<.=f69d896e 35.7MiB> 35.7MiB>
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloaded val<.=b0526c05 35.4MiB>
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloaded val<.=3e1eb71a 35.4MiB>
2021/07/08 17:04:34 scheduler task c84b5c9a (flow c81e95cd): unloading (try 0): successful, next state: complete
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloading (try 0): started
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloading list<val<.=9a98be3a 35.8MiB> 35.8MiB>
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloading val<.=54a6b285 35.4MiB>
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloading val<.=33c33118 35.4MiB>
2021/07/08 17:04:34  <-  n100.r05.s068.Main.out_file c81e95cd ok     exec 5m8s 35.7MiB
2021/07/08 17:04:34 n100.r05.s068.Main.out_file c81e95cd n100/r05/n100.r05.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bb9777b0884a9bff464d77cf201390e3a6de71e4590b34af9398e17c61d487aa
	sha256:c81e95cd173c452296051f7c247b4ad4f6364f49b6adaa88126c5090a70a073f
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c84b5c9ac53106f65b5cbc3b4dbf4369dc305536c389f950c799bd3d2f9b57f3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s068_output"
	    wget -O "n100.r05.s068_output/n100.r05.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s068_output/n100.r05.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s068_output/n100.r05.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s068_output/n100.r05.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s068_output/n100.r05.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s068_output/n100.r05.s068.reference.fas" "n100.r05.s068_output/n100.r05.s068.fq1.fastq" "n100.r05.s068_output/n100.r05.s068.fq2.fastq" | samtools view -bS - > "n100.r05.s068_output/n100.r05.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s068_output/n100.r05.s068.untrimmed.sorted.bam" "n100.r05.s068_output/n100.r05.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s068_output/n100.r05.s068.untrimmed.sorted.bam" -b "n100.r05.s068_output/n100.r05.s068.primers.bed" -p "n100.r05.s068_output/n100.r05.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" "n100.r05.s068_output/n100.r05.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s068_output/n100.r05.s068.reference.fas" "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" > "n100.r05.s068_output/n100.r05.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s068_output/n100.r05.s068.reference.fas" --call-indels "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" > "n100.r05.s068_output/n100.r05.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s068_output/n100.r05.s068.trimmed.sorted.bam" > "n100.r05.s068_output/n100.r05.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s068_output/n100.r05.s068.depth.txt" "n100.r05.s068_output/n100.r05.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s068_output/n100.r05.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s068_output/n100.r05.s068.reference.fas" | bcftools consensus -m "n100.r05.s068_output/n100.r05.s068.low_depth.tsv" tmp.vcf.gz > "n100.r05.s068_output/n100.r05.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f69d896ea8bd1433f6566f0c8fab447cf25afcc6e638e4fab6515e40f09fee3e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.5MiB max=128.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=2.0KiB
2021/07/08 17:04:34 scheduler task 8cd3390c (flow 61bd3c07): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s068.tar.gz resources {}
2021/07/08 17:04:34  ->  n100.r05.s068.Main.cp_out_file 61bd3c07 exec extern s3://niema-test/n100/r05/n100.r05.s068.tar.gz 35.7MiB
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task 8c3f7402 (flow 60da0bf2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:559e87200d2f92ea6705999a980b69371850067dc432b3e4d5c25f89cf18d557 -> s3://niema-test/n100/r05/n100.r05.s020.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:34  <-  n100.r05.s020.Main.cp_out_file 60da0bf2 ok   extern 0s 35.8MiB
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloaded list<val<.=9a98be3a 35.8MiB> 35.8MiB>
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloaded val<.=33c33118 35.4MiB>
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloaded val<.=54a6b285 35.4MiB>
2021/07/08 17:04:34 scheduler task ed2138a1 (flow aef25be2): unloading (try 0): successful, next state: complete
2021/07/08 17:04:34  <-  n100.r05.s009.Main.out_file aef25be2 ok     exec 5m8s 35.8MiB
2021/07/08 17:04:34 n100.r05.s009.Main.out_file aef25be2 n100/r05/n100.r05.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fc045350d949910fef2d446eefe7e3f6eb8130bf487e29393e3abb3116972cb
	sha256:aef25be2f9d47855a43e6c14ded8454772c44f079c09aec03d20ad897a930b74
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ed2138a1221ce1ff8c35416d30c4bdfbc2f487dafbaf0b062ef05859c8433408
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s009_output"
	    wget -O "n100.r05.s009_output/n100.r05.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s009_output/n100.r05.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s009_output/n100.r05.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s009_output/n100.r05.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s009_output/n100.r05.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s009_output/n100.r05.s009.reference.fas" "n100.r05.s009_output/n100.r05.s009.fq1.fastq" "n100.r05.s009_output/n100.r05.s009.fq2.fastq" | samtools view -bS - > "n100.r05.s009_output/n100.r05.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s009_output/n100.r05.s009.untrimmed.sorted.bam" "n100.r05.s009_output/n100.r05.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s009_output/n100.r05.s009.untrimmed.sorted.bam" -b "n100.r05.s009_output/n100.r05.s009.primers.bed" -p "n100.r05.s009_output/n100.r05.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" "n100.r05.s009_output/n100.r05.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s009_output/n100.r05.s009.reference.fas" "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" > "n100.r05.s009_output/n100.r05.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s009_output/n100.r05.s009.reference.fas" --call-indels "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" > "n100.r05.s009_output/n100.r05.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s009_output/n100.r05.s009.trimmed.sorted.bam" > "n100.r05.s009_output/n100.r05.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s009_output/n100.r05.s009.depth.txt" "n100.r05.s009_output/n100.r05.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s009_output/n100.r05.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s009_output/n100.r05.s009.reference.fas" | bcftools consensus -m "n100.r05.s009_output/n100.r05.s009.low_depth.tsv" tmp.vcf.gz > "n100.r05.s009_output/n100.r05.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9a98be3abd37ed7264748e5df9169404251e90ddbce7f42d911265c8e554e87b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.2MiB max=130.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=873B max=2.1KiB
2021/07/08 17:04:34 scheduler task 8edb29af (flow 1849e658): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s009.tar.gz resources {}
2021/07/08 17:04:34  ->  n100.r05.s009.Main.cp_out_file 1849e658 exec extern s3://niema-test/n100/r05/n100.r05.s009.tar.gz 35.8MiB
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task fa285b2b (flow 65deac98): transferring output (try 0): started
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task fdfb86d0 (flow 5c5e594f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e4ee8d880e76909267d4d426c8db364cbabe70c53e7aed29e5f5b355b5fd6189 -> s3://niema-test/n100/r05/n100.r05.s096.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:34  <-  n100.r05.s096.Main.cp_out_file 5c5e594f ok   extern 0s 35.8MiB
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:34 scheduler task 0db5a36a (flow a529c55b): transferring output (try 0): started
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task 3176835f (flow f4fe708f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task 3176835f (flow f4fe708f): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task 27b13502 (flow 152eb222): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:34 scheduler task 3176835f (flow f4fe708f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task 27b13502 (flow 152eb222): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloading (try 0): started
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloading list<val<.=9c2bc08c 35.8MiB> 35.8MiB>
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloading val<.=ae846bd7 35.4MiB>
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloading val<.=ec160749 35.4MiB>
2021/07/08 17:04:34 scheduler task 65048d3f (flow 2ff7e1c2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task eecc9bb8 (flow fe237c23): transferring output (try 0): started
2021/07/08 17:04:34 scheduler task 3176835f (flow f4fe708f): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task 65048d3f (flow 2ff7e1c2): promoting objects (try 0): started
2021/07/08 17:04:34 scheduler task 27b13502 (flow 152eb222): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task 6de17ebb (flow d6f8bc3a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8c50bde9c6a1946fd2118612e111f91e2cc960b9cefb6e144721bd3765e303f0 -> s3://niema-test/n100/r05/n100.r05.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:34  <-  n100.r05.s099.Main.cp_out_file d6f8bc3a ok   extern 0s 35.7MiB
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloaded val<.=ec160749 35.4MiB>
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloaded list<val<.=9c2bc08c 35.8MiB> 35.8MiB>
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloaded val<.=ae846bd7 35.4MiB>
2021/07/08 17:04:34 scheduler task 541b05df (flow 28c707dc): unloading (try 0): successful, next state: complete
2021/07/08 17:04:34 scheduler task 27b13502 (flow 152eb222): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34  <-  n100.r05.s053.Main.out_file 28c707dc ok     exec 4m59s 35.8MiB
2021/07/08 17:04:34 n100.r05.s053.Main.out_file 28c707dc n100/r05/n100.r05.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2d2ab92095ea76aeb7242f5ed01ad9a6fd41e1210caf9e1c0f69b1acddbffd16
	sha256:28c707dc336fe889450fb9a52e1d6278df0c327b3cbe1b95d68a8646b8d66df6
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/541b05df5438aaa64397eb3a6c74b3b4aa1837190b9b80bc75c26e1942db042d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s053_output"
	    wget -O "n100.r05.s053_output/n100.r05.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s053_output/n100.r05.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s053_output/n100.r05.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s053_output/n100.r05.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s053_output/n100.r05.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s053_output/n100.r05.s053.reference.fas" "n100.r05.s053_output/n100.r05.s053.fq1.fastq" "n100.r05.s053_output/n100.r05.s053.fq2.fastq" | samtools view -bS - > "n100.r05.s053_output/n100.r05.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s053_output/n100.r05.s053.untrimmed.sorted.bam" "n100.r05.s053_output/n100.r05.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s053_output/n100.r05.s053.untrimmed.sorted.bam" -b "n100.r05.s053_output/n100.r05.s053.primers.bed" -p "n100.r05.s053_output/n100.r05.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" "n100.r05.s053_output/n100.r05.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s053_output/n100.r05.s053.reference.fas" "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" > "n100.r05.s053_output/n100.r05.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s053_output/n100.r05.s053.reference.fas" --call-indels "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" > "n100.r05.s053_output/n100.r05.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s053_output/n100.r05.s053.trimmed.sorted.bam" > "n100.r05.s053_output/n100.r05.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s053_output/n100.r05.s053.depth.txt" "n100.r05.s053_output/n100.r05.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s053_output/n100.r05.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s053_output/n100.r05.s053.reference.fas" | bcftools consensus -m "n100.r05.s053_output/n100.r05.s053.low_depth.tsv" tmp.vcf.gz > "n100.r05.s053_output/n100.r05.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c2bc08c58f5d5f6267b459ebf48c07389a8015bc5c161829cce4e079712dda0 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=126.7MiB
	    disk mean=11.9MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:34 scheduler task 87324905 (flow f74f40be): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s053.tar.gz resources {}
2021/07/08 17:04:34  ->  n100.r05.s053.Main.cp_out_file f74f40be exec extern s3://niema-test/n100/r05/n100.r05.s053.tar.gz 35.8MiB
2021/07/08 17:04:34 scheduler task 3176835f (flow f4fe708f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:34 scheduler task 65048d3f (flow 2ff7e1c2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:34 scheduler task 3176835f (flow f4fe708f): retrieving result (try 0): started
2021/07/08 17:04:34 scheduler task 65048d3f (flow 2ff7e1c2): retrieving diagnostic output (try 0): started
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): unloading (try 0): started
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): unloading list<val<.=e7cb6f81 35.7MiB> 35.7MiB>
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): unloading val<.=310455e2 35.4MiB>
2021/07/08 17:04:34 scheduler task 95aeedb8 (flow fc144875): unloading val<.=d79f3920 35.4MiB>
2021/07/08 17:04:34 scheduler task c999bc91 (flow 1808ed0b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:34 scheduler task c999bc91 (flow 1808ed0b): promoting objects (try 0): started
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): retrieving result (try 0): started
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): transferring output (try 0): started
2021/07/08 17:04:35 scheduler task 8cd3390c (flow 61bd3c07): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f69d896ea8bd1433f6566f0c8fab447cf25afcc6e638e4fab6515e40f09fee3e -> s3://niema-test/n100/r05/n100.r05.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:35 scheduler task 95aeedb8 (flow fc144875): unloaded list<val<.=e7cb6f81 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:35  <-  n100.r05.s068.Main.cp_out_file 61bd3c07 ok   extern 0s 35.7MiB
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:35 scheduler task 95aeedb8 (flow fc144875): unloaded val<.=310455e2 35.4MiB>
2021/07/08 17:04:35 scheduler task 95aeedb8 (flow fc144875): unloaded val<.=d79f3920 35.4MiB>
2021/07/08 17:04:35 scheduler task 95aeedb8 (flow fc144875): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35 scheduler task c999bc91 (flow 1808ed0b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:35 scheduler task 65048d3f (flow 2ff7e1c2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:35 scheduler task 8edb29af (flow 1849e658): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9a98be3abd37ed7264748e5df9169404251e90ddbce7f42d911265c8e554e87b -> s3://niema-test/n100/r05/n100.r05.s009.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:35  <-  n100.r05.s009.Main.cp_out_file 1849e658 ok   extern 0s 35.8MiB
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloading (try 0): started
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloading list<val<.=8ae7d7d5 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloading val<.=df5722bc 35.4MiB>
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloading val<.=58c6feee 35.4MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloading (try 0): started
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloading list<val<.=68388ec8 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloading val<.=e1bba291 35.4MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloading val<.=e7d68d14 35.4MiB>
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloading (try 0): started
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloading list<val<.=a259118a 35.8MiB> 35.8MiB>
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloading val<.=1673e1bf 35.4MiB>
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloading val<.=efd03e34 35.4MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): transferring output (try 0): started
2021/07/08 17:04:35  <-  n100.r05.s023.Main.out_file fc144875 ok     exec 4m52s 35.7MiB
2021/07/08 17:04:35 n100.r05.s023.Main.out_file fc144875 n100/r05/n100.r05.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9cb920a034db827a7740ead3d2bb95fe3bdc885c2340a8dc2081c6b4df707a40
	sha256:fc1448758f4895e5094e3734203c762aa0b9bdfbdbf263d1650b7f1f5aebf21c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95aeedb863a72c2fa54552093d5a0b8f5edbeba32078f98fc936672aeebfaba6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s023_output"
	    wget -O "n100.r05.s023_output/n100.r05.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s023_output/n100.r05.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s023_output/n100.r05.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s023_output/n100.r05.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s023_output/n100.r05.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s023_output/n100.r05.s023.reference.fas" "n100.r05.s023_output/n100.r05.s023.fq1.fastq" "n100.r05.s023_output/n100.r05.s023.fq2.fastq" | samtools view -bS - > "n100.r05.s023_output/n100.r05.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s023_output/n100.r05.s023.untrimmed.sorted.bam" "n100.r05.s023_output/n100.r05.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s023_output/n100.r05.s023.untrimmed.sorted.bam" -b "n100.r05.s023_output/n100.r05.s023.primers.bed" -p "n100.r05.s023_output/n100.r05.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" "n100.r05.s023_output/n100.r05.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s023_output/n100.r05.s023.reference.fas" "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" > "n100.r05.s023_output/n100.r05.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s023_output/n100.r05.s023.reference.fas" --call-indels "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" > "n100.r05.s023_output/n100.r05.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s023_output/n100.r05.s023.trimmed.sorted.bam" > "n100.r05.s023_output/n100.r05.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s023_output/n100.r05.s023.depth.txt" "n100.r05.s023_output/n100.r05.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s023_output/n100.r05.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s023_output/n100.r05.s023.reference.fas" | bcftools consensus -m "n100.r05.s023_output/n100.r05.s023.low_depth.tsv" tmp.vcf.gz > "n100.r05.s023_output/n100.r05.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e7cb6f81121919567fcf673445a1c255f4ae21ab0d1b2a58fd64e43e9bac5db6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.9MiB max=131.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:35 scheduler task e247d9b7 (flow 349041f4): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s023.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s023.Main.cp_out_file 349041f4 exec extern s3://niema-test/n100/r05/n100.r05.s023.tar.gz 35.7MiB
2021/07/08 17:04:35 scheduler task c999bc91 (flow 1808ed0b): retrieving diagnostic output (try 0): started
2021/07/08 17:04:35 scheduler task 65048d3f (flow 2ff7e1c2): retrieving result (try 0): started
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloaded list<val<.=8ae7d7d5 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloaded list<val<.=68388ec8 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloaded val<.=e1bba291 35.4MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloaded val<.=e7d68d14 35.4MiB>
2021/07/08 17:04:35 scheduler task fa285b2b (flow 65deac98): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloaded val<.=df5722bc 35.4MiB>
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloaded val<.=58c6feee 35.4MiB>
2021/07/08 17:04:35 scheduler task 0db5a36a (flow a529c55b): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35  <-  n100.r05.s005.Main.out_file 65deac98 ok     exec 4m59s 35.7MiB
2021/07/08 17:04:35 n100.r05.s005.Main.out_file 65deac98 n100/r05/n100.r05.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:611531a3e69e7ec1d5434acca7dd1cad0fb433f8cecbc2c7ea4b9db4154146e1
	sha256:65deac98d111a3b2590a217e3fb835ea4872d44d2268ede69b88ba7418569947
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fa285b2bee5b0e9aedbe3192c4341d31d954f058fa2caebedffb41ea8b6bc977
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s005_output"
	    wget -O "n100.r05.s005_output/n100.r05.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s005_output/n100.r05.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s005_output/n100.r05.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s005_output/n100.r05.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s005_output/n100.r05.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s005_output/n100.r05.s005.reference.fas" "n100.r05.s005_output/n100.r05.s005.fq1.fastq" "n100.r05.s005_output/n100.r05.s005.fq2.fastq" | samtools view -bS - > "n100.r05.s005_output/n100.r05.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s005_output/n100.r05.s005.untrimmed.sorted.bam" "n100.r05.s005_output/n100.r05.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s005_output/n100.r05.s005.untrimmed.sorted.bam" -b "n100.r05.s005_output/n100.r05.s005.primers.bed" -p "n100.r05.s005_output/n100.r05.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" "n100.r05.s005_output/n100.r05.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s005_output/n100.r05.s005.reference.fas" "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" > "n100.r05.s005_output/n100.r05.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s005_output/n100.r05.s005.reference.fas" --call-indels "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" > "n100.r05.s005_output/n100.r05.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s005_output/n100.r05.s005.trimmed.sorted.bam" > "n100.r05.s005_output/n100.r05.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s005_output/n100.r05.s005.depth.txt" "n100.r05.s005_output/n100.r05.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s005_output/n100.r05.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s005_output/n100.r05.s005.reference.fas" | bcftools consensus -m "n100.r05.s005_output/n100.r05.s005.low_depth.tsv" tmp.vcf.gz > "n100.r05.s005_output/n100.r05.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:68388ec827ed9b12869b0b0695f09f76eaae75bbf9ebe0ae1e64d1f82ce75f97 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.7MiB max=127.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 17:04:35 scheduler task f59bb867 (flow 33db81cc): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s005.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s005.Main.cp_out_file 33db81cc exec extern s3://niema-test/n100/r05/n100.r05.s005.tar.gz 35.7MiB
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloaded list<val<.=a259118a 35.8MiB> 35.8MiB>
2021/07/08 17:04:35  <-  n100.r05.s093.Main.out_file a529c55b ok     exec 4m52s 35.7MiB
2021/07/08 17:04:35 n100.r05.s093.Main.out_file a529c55b n100/r05/n100.r05.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1e6d229e6481687e33ede9fab654cdd926a3e52b93c8621de23a3e6452de3649
	sha256:a529c55b2223335c48e4cdfe2a14d4278bd2caee12729c699c82b92b09708b3b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0db5a36a7e25b4371d2bd42cdffafdda09370f4d85c731d9ede4b089ff94d7c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s093_output"
	    wget -O "n100.r05.s093_output/n100.r05.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s093_output/n100.r05.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s093_output/n100.r05.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s093_output/n100.r05.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s093_output/n100.r05.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s093_output/n100.r05.s093.reference.fas" "n100.r05.s093_output/n100.r05.s093.fq1.fastq" "n100.r05.s093_output/n100.r05.s093.fq2.fastq" | samtools view -bS - > "n100.r05.s093_output/n100.r05.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s093_output/n100.r05.s093.untrimmed.sorted.bam" "n100.r05.s093_output/n100.r05.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s093_output/n100.r05.s093.untrimmed.sorted.bam" -b "n100.r05.s093_output/n100.r05.s093.primers.bed" -p "n100.r05.s093_output/n100.r05.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" "n100.r05.s093_output/n100.r05.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s093_output/n100.r05.s093.reference.fas" "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" > "n100.r05.s093_output/n100.r05.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s093_output/n100.r05.s093.reference.fas" --call-indels "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" > "n100.r05.s093_output/n100.r05.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s093_output/n100.r05.s093.trimmed.sorted.bam" > "n100.r05.s093_output/n100.r05.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s093_output/n100.r05.s093.depth.txt" "n100.r05.s093_output/n100.r05.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s093_output/n100.r05.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s093_output/n100.r05.s093.reference.fas" | bcftools consensus -m "n100.r05.s093_output/n100.r05.s093.low_depth.tsv" tmp.vcf.gz > "n100.r05.s093_output/n100.r05.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8ae7d7d5cdc90ab5dec762f7e06ec9205816d8c18e646699e98e768b92786601 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.8MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:04:35 scheduler task d884f703 (flow 839447df): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s093.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s093.Main.cp_out_file 839447df exec extern s3://niema-test/n100/r05/n100.r05.s093.tar.gz 35.7MiB
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloaded val<.=1673e1bf 35.4MiB>
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloaded val<.=efd03e34 35.4MiB>
2021/07/08 17:04:35 scheduler task 6af0d423 (flow c1226fd8): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35  <-  n100.r05.s055.Main.out_file c1226fd8 ok     exec 5m8s 35.8MiB
2021/07/08 17:04:35 n100.r05.s055.Main.out_file c1226fd8 n100/r05/n100.r05.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f09a6c0da0dcc17d3ec04c55c3442b8a4d753973f26eaf72574859b7f497212
	sha256:c1226fd815a7d1d066b9658bfece48ebbb53a1301b102f5f483aa58b0cdc722c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6af0d423018c551aac9910f9abc3f417c174d254abfff131d70758fc481313e6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s055_output"
	    wget -O "n100.r05.s055_output/n100.r05.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s055_output/n100.r05.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s055_output/n100.r05.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s055_output/n100.r05.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s055_output/n100.r05.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s055_output/n100.r05.s055.reference.fas" "n100.r05.s055_output/n100.r05.s055.fq1.fastq" "n100.r05.s055_output/n100.r05.s055.fq2.fastq" | samtools view -bS - > "n100.r05.s055_output/n100.r05.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s055_output/n100.r05.s055.untrimmed.sorted.bam" "n100.r05.s055_output/n100.r05.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s055_output/n100.r05.s055.untrimmed.sorted.bam" -b "n100.r05.s055_output/n100.r05.s055.primers.bed" -p "n100.r05.s055_output/n100.r05.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" "n100.r05.s055_output/n100.r05.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s055_output/n100.r05.s055.reference.fas" "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" > "n100.r05.s055_output/n100.r05.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s055_output/n100.r05.s055.reference.fas" --call-indels "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" > "n100.r05.s055_output/n100.r05.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s055_output/n100.r05.s055.trimmed.sorted.bam" > "n100.r05.s055_output/n100.r05.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s055_output/n100.r05.s055.depth.txt" "n100.r05.s055_output/n100.r05.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s055_output/n100.r05.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s055_output/n100.r05.s055.reference.fas" | bcftools consensus -m "n100.r05.s055_output/n100.r05.s055.low_depth.tsv" tmp.vcf.gz > "n100.r05.s055_output/n100.r05.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a259118a608a01edbe966e3bac74ffeab30723b4f3f26c24f13c023fc4cea46b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=128.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:04:35 scheduler task ae443e5e (flow 3956ccfc): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s055.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s055.Main.cp_out_file 3956ccfc exec extern s3://niema-test/n100/r05/n100.r05.s055.tar.gz 35.8MiB
2021/07/08 17:04:35 scheduler task c999bc91 (flow 1808ed0b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:35 scheduler task 65048d3f (flow 2ff7e1c2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:35 scheduler task c999bc91 (flow 1808ed0b): retrieving result (try 0): started
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloading (try 0): started
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloading list<val<.=adb3d6e0 35.8MiB> 35.8MiB>
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloading val<.=5cf36e65 35.4MiB>
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloading val<.=4dbb347a 35.4MiB>
2021/07/08 17:04:35 scheduler task 65048d3f (flow 2ff7e1c2): transferring output (try 0): started
2021/07/08 17:04:35 scheduler task c999bc91 (flow 1808ed0b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloaded val<.=5cf36e65 35.4MiB>
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloaded list<val<.=adb3d6e0 35.8MiB> 35.8MiB>
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloaded val<.=4dbb347a 35.4MiB>
2021/07/08 17:04:35 scheduler task eecc9bb8 (flow fe237c23): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35 scheduler task c999bc91 (flow 1808ed0b): transferring output (try 0): started
2021/07/08 17:04:35  <-  n100.r05.s079.Main.out_file fe237c23 ok     exec 5m0s 35.8MiB
2021/07/08 17:04:35 n100.r05.s079.Main.out_file fe237c23 n100/r05/n100.r05.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:76253e8ca5592f6a8a3622e5417982cab5aa09e7358856abdf834a3b3029ff4f
	sha256:fe237c2379e2c6657d77ab60536d39335370871e1ecc65ff54d70ef3282df954
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eecc9bb8603c982cb63224f211fd29706988a52a0dc83b75359043fed1793ec6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s079_output"
	    wget -O "n100.r05.s079_output/n100.r05.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s079_output/n100.r05.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s079_output/n100.r05.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s079_output/n100.r05.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s079_output/n100.r05.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s079_output/n100.r05.s079.reference.fas" "n100.r05.s079_output/n100.r05.s079.fq1.fastq" "n100.r05.s079_output/n100.r05.s079.fq2.fastq" | samtools view -bS - > "n100.r05.s079_output/n100.r05.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s079_output/n100.r05.s079.untrimmed.sorted.bam" "n100.r05.s079_output/n100.r05.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s079_output/n100.r05.s079.untrimmed.sorted.bam" -b "n100.r05.s079_output/n100.r05.s079.primers.bed" -p "n100.r05.s079_output/n100.r05.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" "n100.r05.s079_output/n100.r05.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s079_output/n100.r05.s079.reference.fas" "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" > "n100.r05.s079_output/n100.r05.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s079_output/n100.r05.s079.reference.fas" --call-indels "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" > "n100.r05.s079_output/n100.r05.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s079_output/n100.r05.s079.trimmed.sorted.bam" > "n100.r05.s079_output/n100.r05.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s079_output/n100.r05.s079.depth.txt" "n100.r05.s079_output/n100.r05.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s079_output/n100.r05.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s079_output/n100.r05.s079.reference.fas" | bcftools consensus -m "n100.r05.s079_output/n100.r05.s079.low_depth.tsv" tmp.vcf.gz > "n100.r05.s079_output/n100.r05.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:adb3d6e0fe180e5e0931074ca489d62bf78c82e5c43b1501f6a6d73f6dfa04c6 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=125.9MiB
	    disk mean=11.9MiB max=35.8MiB
	    tmp mean=350B max=2.1KiB
2021/07/08 17:04:35 scheduler task 55663d0e (flow 23f78337): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s079.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s079.Main.cp_out_file 23f78337 exec extern s3://niema-test/n100/r05/n100.r05.s079.tar.gz 35.8MiB
2021/07/08 17:04:35 scheduler task 87324905 (flow f74f40be): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c2bc08c58f5d5f6267b459ebf48c07389a8015bc5c161829cce4e079712dda0 -> s3://niema-test/n100/r05/n100.r05.s053.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:35  <-  n100.r05.s053.Main.cp_out_file f74f40be ok   extern 0s 35.8MiB
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloading (try 0): started
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloading list<val<.=d8426055 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloading val<.=041a72d3 35.4MiB>
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloading val<.=574b729d 35.4MiB>
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloaded val<.=041a72d3 35.4MiB>
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloaded list<val<.=d8426055 35.7MiB> 35.7MiB>
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloaded val<.=574b729d 35.4MiB>
2021/07/08 17:04:35 scheduler task 3176835f (flow f4fe708f): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35  <-  n100.r05.s074.Main.out_file f4fe708f ok     exec 4m53s 35.7MiB
2021/07/08 17:04:35 n100.r05.s074.Main.out_file f4fe708f n100/r05/n100.r05.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:be44126c7d22149efe0f4e3d8038e0f932440a81f29229e0252d9e74d8af5523
	sha256:f4fe708f761fe606e37478ee6c3e1a985ec2383edb33b3347063b47022880e6e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3176835f070e87a66bdb97d247cc18c1d5f45f2e44262bd87164a59cdcf61452
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s074_output"
	    wget -O "n100.r05.s074_output/n100.r05.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s074_output/n100.r05.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s074_output/n100.r05.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s074_output/n100.r05.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s074_output/n100.r05.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s074_output/n100.r05.s074.reference.fas" "n100.r05.s074_output/n100.r05.s074.fq1.fastq" "n100.r05.s074_output/n100.r05.s074.fq2.fastq" | samtools view -bS - > "n100.r05.s074_output/n100.r05.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s074_output/n100.r05.s074.untrimmed.sorted.bam" "n100.r05.s074_output/n100.r05.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s074_output/n100.r05.s074.untrimmed.sorted.bam" -b "n100.r05.s074_output/n100.r05.s074.primers.bed" -p "n100.r05.s074_output/n100.r05.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" "n100.r05.s074_output/n100.r05.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s074_output/n100.r05.s074.reference.fas" "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" > "n100.r05.s074_output/n100.r05.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s074_output/n100.r05.s074.reference.fas" --call-indels "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" > "n100.r05.s074_output/n100.r05.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s074_output/n100.r05.s074.trimmed.sorted.bam" > "n100.r05.s074_output/n100.r05.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s074_output/n100.r05.s074.depth.txt" "n100.r05.s074_output/n100.r05.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s074_output/n100.r05.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s074_output/n100.r05.s074.reference.fas" | bcftools consensus -m "n100.r05.s074_output/n100.r05.s074.low_depth.tsv" tmp.vcf.gz > "n100.r05.s074_output/n100.r05.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d8426055b067401fbf4ed41fc8fe922f8db4b058ec01cc3d37c2b7358f8703b8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=128.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:35 scheduler task b18be703 (flow 2bbf2ff1): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s074.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s074.Main.cp_out_file 2bbf2ff1 exec extern s3://niema-test/n100/r05/n100.r05.s074.tar.gz 35.7MiB
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloading (try 0): started
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloading list<val<.=eeae43df 35.8MiB> 35.8MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloading val<.=dae236c4 35.4MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloading val<.=507e8d09 35.4MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloaded list<val<.=eeae43df 35.8MiB> 35.8MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloaded val<.=dae236c4 35.4MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloaded val<.=507e8d09 35.4MiB>
2021/07/08 17:04:35 scheduler task 27b13502 (flow 152eb222): unloading (try 0): successful, next state: complete
2021/07/08 17:04:35  <-  n100.r05.s059.Main.out_file 152eb222 ok     exec 4m53s 35.8MiB
2021/07/08 17:04:35 n100.r05.s059.Main.out_file 152eb222 n100/r05/n100.r05.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a3255d39e08b1de57196f73a6d3e35e90154dcbee2ca9810763d1c6bf839be3d
	sha256:152eb222781701a877aa830855e3f4d01d68416cd1f7135d704916059aa3801c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27b13502eea34c6282da0777d62dda9257ed7cba7145399cc25abd3b634f1c3d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s059_output"
	    wget -O "n100.r05.s059_output/n100.r05.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s059_output/n100.r05.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s059_output/n100.r05.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s059_output/n100.r05.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s059_output/n100.r05.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s059_output/n100.r05.s059.reference.fas" "n100.r05.s059_output/n100.r05.s059.fq1.fastq" "n100.r05.s059_output/n100.r05.s059.fq2.fastq" | samtools view -bS - > "n100.r05.s059_output/n100.r05.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s059_output/n100.r05.s059.untrimmed.sorted.bam" "n100.r05.s059_output/n100.r05.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s059_output/n100.r05.s059.untrimmed.sorted.bam" -b "n100.r05.s059_output/n100.r05.s059.primers.bed" -p "n100.r05.s059_output/n100.r05.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" "n100.r05.s059_output/n100.r05.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s059_output/n100.r05.s059.reference.fas" "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" > "n100.r05.s059_output/n100.r05.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s059_output/n100.r05.s059.reference.fas" --call-indels "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" > "n100.r05.s059_output/n100.r05.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s059_output/n100.r05.s059.trimmed.sorted.bam" > "n100.r05.s059_output/n100.r05.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s059_output/n100.r05.s059.depth.txt" "n100.r05.s059_output/n100.r05.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s059_output/n100.r05.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s059_output/n100.r05.s059.reference.fas" | bcftools consensus -m "n100.r05.s059_output/n100.r05.s059.low_depth.tsv" tmp.vcf.gz > "n100.r05.s059_output/n100.r05.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eeae43df6d1b3e558f8d1edcb8cd6a1d8815104d0b4a054ec8a96c8feab93a18 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=131.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:04:35 scheduler task 7746ae7a (flow 3f3ac152): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s059.tar.gz resources {}
2021/07/08 17:04:35  ->  n100.r05.s059.Main.cp_out_file 3f3ac152 exec extern s3://niema-test/n100/r05/n100.r05.s059.tar.gz 35.8MiB
2021/07/08 17:04:36 scheduler task e247d9b7 (flow 349041f4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e7cb6f81121919567fcf673445a1c255f4ae21ab0d1b2a58fd64e43e9bac5db6 -> s3://niema-test/n100/r05/n100.r05.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s023.Main.cp_out_file 349041f4 ok   extern 0s 35.7MiB
2021/07/08 17:04:36 scheduler task f59bb867 (flow 33db81cc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:68388ec827ed9b12869b0b0695f09f76eaae75bbf9ebe0ae1e64d1f82ce75f97 -> s3://niema-test/n100/r05/n100.r05.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s005.Main.cp_out_file 33db81cc ok   extern 0s 35.7MiB
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloading (try 0): started
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloading list<val<.=175073e2 35.8MiB> 35.8MiB>
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloading val<.=175ac563 35.4MiB>
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloading val<.=e5f2aa57 35.4MiB>
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloading (try 0): started
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloading list<val<.=65140c4b 35.7MiB> 35.7MiB>
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloading val<.=6260eb6f 35.4MiB>
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloading val<.=f827dbc4 35.4MiB>
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloaded list<val<.=175073e2 35.8MiB> 35.8MiB>
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloaded val<.=175ac563 35.4MiB>
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloaded val<.=e5f2aa57 35.4MiB>
2021/07/08 17:04:36 scheduler task 65048d3f (flow 2ff7e1c2): unloading (try 0): successful, next state: complete
2021/07/08 17:04:36  <-  n100.r05.s064.Main.out_file 2ff7e1c2 ok     exec 4m53s 35.8MiB
2021/07/08 17:04:36 n100.r05.s064.Main.out_file 2ff7e1c2 n100/r05/n100.r05.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f3a2da43dc5151e0034cc112a69411831d26f7505f0778da581cd1e6cfd4aa2
	sha256:2ff7e1c2bcd645f176a0192db425754557916af75c64d17f1446647f336bbec4
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/65048d3fb45d2770cf8cb0034e92ad697d2b94f65660fa4b03ddfbeeb96b0493
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s064_output"
	    wget -O "n100.r05.s064_output/n100.r05.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s064_output/n100.r05.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s064_output/n100.r05.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s064_output/n100.r05.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s064_output/n100.r05.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s064_output/n100.r05.s064.reference.fas" "n100.r05.s064_output/n100.r05.s064.fq1.fastq" "n100.r05.s064_output/n100.r05.s064.fq2.fastq" | samtools view -bS - > "n100.r05.s064_output/n100.r05.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s064_output/n100.r05.s064.untrimmed.sorted.bam" "n100.r05.s064_output/n100.r05.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s064_output/n100.r05.s064.untrimmed.sorted.bam" -b "n100.r05.s064_output/n100.r05.s064.primers.bed" -p "n100.r05.s064_output/n100.r05.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" "n100.r05.s064_output/n100.r05.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s064_output/n100.r05.s064.reference.fas" "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" > "n100.r05.s064_output/n100.r05.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s064_output/n100.r05.s064.reference.fas" --call-indels "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" > "n100.r05.s064_output/n100.r05.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s064_output/n100.r05.s064.trimmed.sorted.bam" > "n100.r05.s064_output/n100.r05.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s064_output/n100.r05.s064.depth.txt" "n100.r05.s064_output/n100.r05.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s064_output/n100.r05.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s064_output/n100.r05.s064.reference.fas" | bcftools consensus -m "n100.r05.s064_output/n100.r05.s064.low_depth.tsv" tmp.vcf.gz > "n100.r05.s064_output/n100.r05.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:175073e2d72e667b86ecea4a96c6c21ef45e7e70fce7196b6a66ee38b211f9b1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=129.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:36 scheduler task 0288fda3 (flow f6aaa7b4): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s064.tar.gz resources {}
2021/07/08 17:04:36  ->  n100.r05.s064.Main.cp_out_file f6aaa7b4 exec extern s3://niema-test/n100/r05/n100.r05.s064.tar.gz 35.8MiB
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloaded list<val<.=65140c4b 35.7MiB> 35.7MiB>
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloaded val<.=f827dbc4 35.4MiB>
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloaded val<.=6260eb6f 35.4MiB>
2021/07/08 17:04:36 scheduler task c999bc91 (flow 1808ed0b): unloading (try 0): successful, next state: complete
2021/07/08 17:04:36  <-  n100.r05.s060.Main.out_file 1808ed0b ok     exec 5m1s 35.7MiB
2021/07/08 17:04:36 n100.r05.s060.Main.out_file 1808ed0b n100/r05/n100.r05.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36ea2b03167ba29d6a6acce631667555f5d871829c036190e4bc02ec6d5a289e
	sha256:1808ed0bc7a0862a63bf2c9172cd99648137e5b97b2a44e44ea18374bb06d6c4
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c999bc91291bed9a76f7cd482a00f901f144b7c40472e3e9e686d9cce38ccd61
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s060_output"
	    wget -O "n100.r05.s060_output/n100.r05.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s060_output/n100.r05.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s060_output/n100.r05.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s060_output/n100.r05.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s060_output/n100.r05.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s060_output/n100.r05.s060.reference.fas" "n100.r05.s060_output/n100.r05.s060.fq1.fastq" "n100.r05.s060_output/n100.r05.s060.fq2.fastq" | samtools view -bS - > "n100.r05.s060_output/n100.r05.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s060_output/n100.r05.s060.untrimmed.sorted.bam" "n100.r05.s060_output/n100.r05.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s060_output/n100.r05.s060.untrimmed.sorted.bam" -b "n100.r05.s060_output/n100.r05.s060.primers.bed" -p "n100.r05.s060_output/n100.r05.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" "n100.r05.s060_output/n100.r05.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s060_output/n100.r05.s060.reference.fas" "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" > "n100.r05.s060_output/n100.r05.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s060_output/n100.r05.s060.reference.fas" --call-indels "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" > "n100.r05.s060_output/n100.r05.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s060_output/n100.r05.s060.trimmed.sorted.bam" > "n100.r05.s060_output/n100.r05.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s060_output/n100.r05.s060.depth.txt" "n100.r05.s060_output/n100.r05.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s060_output/n100.r05.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s060_output/n100.r05.s060.reference.fas" | bcftools consensus -m "n100.r05.s060_output/n100.r05.s060.low_depth.tsv" tmp.vcf.gz > "n100.r05.s060_output/n100.r05.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:65140c4b054f12dd8d1dba1fad626f7c2b31a2fed2b8828462a4741d7c08e650 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=129.2MiB
	    disk mean=7.9MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:36 scheduler task 38f1a413 (flow 4c4c1e42): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s060.tar.gz resources {}
2021/07/08 17:04:36  ->  n100.r05.s060.Main.cp_out_file 4c4c1e42 exec extern s3://niema-test/n100/r05/n100.r05.s060.tar.gz 35.7MiB
2021/07/08 17:04:36 scheduler task d884f703 (flow 839447df): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8ae7d7d5cdc90ab5dec762f7e06ec9205816d8c18e646699e98e768b92786601 -> s3://niema-test/n100/r05/n100.r05.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s093.Main.cp_out_file 839447df ok   extern 0s 35.7MiB
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): promoting objects (try 0): started
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): retrieving diagnostic output (try 0): started
2021/07/08 17:04:36 scheduler task ae443e5e (flow 3956ccfc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a259118a608a01edbe966e3bac74ffeab30723b4f3f26c24f13c023fc4cea46b -> s3://niema-test/n100/r05/n100.r05.s055.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s055.Main.cp_out_file 3956ccfc ok   extern 0s 35.8MiB
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): retrieving result (try 0): started
2021/07/08 17:04:36 scheduler task 55663d0e (flow 23f78337): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:adb3d6e0fe180e5e0931074ca489d62bf78c82e5c43b1501f6a6d73f6dfa04c6 -> s3://niema-test/n100/r05/n100.r05.s079.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s079.Main.cp_out_file 23f78337 ok   extern 0s 35.8MiB
2021/07/08 17:04:36 scheduler task b18be703 (flow 2bbf2ff1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d8426055b067401fbf4ed41fc8fe922f8db4b058ec01cc3d37c2b7358f8703b8 -> s3://niema-test/n100/r05/n100.r05.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s074.Main.cp_out_file 2bbf2ff1 ok   extern 0s 35.7MiB
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): promoting objects (try 0): started
2021/07/08 17:04:36 scheduler task 7746ae7a (flow 3f3ac152): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eeae43df6d1b3e558f8d1edcb8cd6a1d8815104d0b4a054ec8a96c8feab93a18 -> s3://niema-test/n100/r05/n100.r05.s059.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s059.Main.cp_out_file 3f3ac152 ok   extern 0s 35.8MiB
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:36 scheduler task 0d2f76e7 (flow c6a48769): transferring output (try 0): started
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): retrieving diagnostic output (try 0): started
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): promoting objects (try 0): started
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): retrieving result (try 0): started
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): retrieving diagnostic output (try 0): started
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:36 scheduler task a46930e3 (flow 29d4e1a3): transferring output (try 0): started
2021/07/08 17:04:36 scheduler task 0288fda3 (flow f6aaa7b4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:175073e2d72e667b86ecea4a96c6c21ef45e7e70fce7196b6a66ee38b211f9b1 -> s3://niema-test/n100/r05/n100.r05.s064.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s064.Main.cp_out_file f6aaa7b4 ok   extern 0s 35.8MiB
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): retrieving result (try 0): started
2021/07/08 17:04:36 scheduler task 600e8f95 (flow f3280027): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:36 scheduler task 600e8f95 (flow f3280027): promoting objects (try 0): started
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:36 scheduler task 38f1a413 (flow 4c4c1e42): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:65140c4b054f12dd8d1dba1fad626f7c2b31a2fed2b8828462a4741d7c08e650 -> s3://niema-test/n100/r05/n100.r05.s060.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:36  <-  n100.r05.s060.Main.cp_out_file 4c4c1e42 ok   extern 0s 35.7MiB
2021/07/08 17:04:36 scheduler task 279b061c (flow f4b07b7e): transferring output (try 0): started
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): retrieving diagnostic output (try 0): started
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): retrieving result (try 0): started
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloading (try 0): started
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloading list<val<.=7a3d4592 35.7MiB> 35.7MiB>
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloading val<.=5508f84b 35.4MiB>
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloading val<.=ffa54b48 35.4MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): transferring output (try 0): started
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloaded list<val<.=7a3d4592 35.7MiB> 35.7MiB>
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloaded val<.=5508f84b 35.4MiB>
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloaded val<.=ffa54b48 35.4MiB>
2021/07/08 17:04:37 scheduler task 0d2f76e7 (flow c6a48769): unloading (try 0): successful, next state: complete
2021/07/08 17:04:37  <-  n100.r05.s061.Main.out_file c6a48769 ok     exec 5m1s 35.7MiB
2021/07/08 17:04:37 n100.r05.s061.Main.out_file c6a48769 n100/r05/n100.r05.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f28d184874ce90ed2b1879d1edb4e94df734e4229bc346557cc71102331ead3
	sha256:c6a48769722736e8cf40fb5a3dcff231fb200013465d16c1d7513d6b33624ed2
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d2f76e7b98138f61ce5ee447c2361104622cfbc6c2b0d47c8059de54f5973cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s061_output"
	    wget -O "n100.r05.s061_output/n100.r05.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s061_output/n100.r05.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s061_output/n100.r05.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s061_output/n100.r05.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s061_output/n100.r05.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s061_output/n100.r05.s061.reference.fas" "n100.r05.s061_output/n100.r05.s061.fq1.fastq" "n100.r05.s061_output/n100.r05.s061.fq2.fastq" | samtools view -bS - > "n100.r05.s061_output/n100.r05.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s061_output/n100.r05.s061.untrimmed.sorted.bam" "n100.r05.s061_output/n100.r05.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s061_output/n100.r05.s061.untrimmed.sorted.bam" -b "n100.r05.s061_output/n100.r05.s061.primers.bed" -p "n100.r05.s061_output/n100.r05.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" "n100.r05.s061_output/n100.r05.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s061_output/n100.r05.s061.reference.fas" "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" > "n100.r05.s061_output/n100.r05.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s061_output/n100.r05.s061.reference.fas" --call-indels "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" > "n100.r05.s061_output/n100.r05.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s061_output/n100.r05.s061.trimmed.sorted.bam" > "n100.r05.s061_output/n100.r05.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s061_output/n100.r05.s061.depth.txt" "n100.r05.s061_output/n100.r05.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s061_output/n100.r05.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s061_output/n100.r05.s061.reference.fas" | bcftools consensus -m "n100.r05.s061_output/n100.r05.s061.low_depth.tsv" tmp.vcf.gz > "n100.r05.s061_output/n100.r05.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7a3d4592b8f7df1b86d63ceda236ec24413ed262d34b8ebf86751208d332254d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:37 scheduler task e6df00ff (flow 44fc334a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s061.tar.gz resources {}
2021/07/08 17:04:37  ->  n100.r05.s061.Main.cp_out_file 44fc334a exec extern s3://niema-test/n100/r05/n100.r05.s061.tar.gz 35.7MiB
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): promoting objects (try 0): started
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): retrieving diagnostic output (try 0): started
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloading (try 0): started
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloading list<val<.=45c4ba20 35.7MiB> 35.7MiB>
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloading val<.=29e626f9 35.4MiB>
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloading val<.=8d5976e0 35.4MiB>
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): retrieving result (try 0): started
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloaded val<.=29e626f9 35.4MiB>
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloaded val<.=8d5976e0 35.4MiB>
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloaded list<val<.=45c4ba20 35.7MiB> 35.7MiB>
2021/07/08 17:04:37 scheduler task a46930e3 (flow 29d4e1a3): unloading (try 0): successful, next state: complete
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): promoting objects (try 0): started
2021/07/08 17:04:37  <-  n100.r05.s095.Main.out_file 29d4e1a3 ok     exec 5m2s 35.7MiB
2021/07/08 17:04:37 n100.r05.s095.Main.out_file 29d4e1a3 n100/r05/n100.r05.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36749f2bd5216f4822e3454e7f73c0977edd7ca2438d19a625544a5b3ee488af
	sha256:29d4e1a3a780c8034bd562bacc4dd39506be2c4a33a49a6c0a3ad76756dd21da
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a46930e3b6d910a53219d8ac013c4971dcf755a1f2800a83ebd3af74fa698927
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s095_output"
	    wget -O "n100.r05.s095_output/n100.r05.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s095_output/n100.r05.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s095_output/n100.r05.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s095_output/n100.r05.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s095_output/n100.r05.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s095_output/n100.r05.s095.reference.fas" "n100.r05.s095_output/n100.r05.s095.fq1.fastq" "n100.r05.s095_output/n100.r05.s095.fq2.fastq" | samtools view -bS - > "n100.r05.s095_output/n100.r05.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s095_output/n100.r05.s095.untrimmed.sorted.bam" "n100.r05.s095_output/n100.r05.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s095_output/n100.r05.s095.untrimmed.sorted.bam" -b "n100.r05.s095_output/n100.r05.s095.primers.bed" -p "n100.r05.s095_output/n100.r05.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" "n100.r05.s095_output/n100.r05.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s095_output/n100.r05.s095.reference.fas" "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" > "n100.r05.s095_output/n100.r05.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s095_output/n100.r05.s095.reference.fas" --call-indels "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" > "n100.r05.s095_output/n100.r05.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s095_output/n100.r05.s095.trimmed.sorted.bam" > "n100.r05.s095_output/n100.r05.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s095_output/n100.r05.s095.depth.txt" "n100.r05.s095_output/n100.r05.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s095_output/n100.r05.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s095_output/n100.r05.s095.reference.fas" | bcftools consensus -m "n100.r05.s095_output/n100.r05.s095.low_depth.tsv" tmp.vcf.gz > "n100.r05.s095_output/n100.r05.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:45c4ba200114204856fea0a9479c2e23ca4623b41ec17b5e78705794372bb525 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=125.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=697B max=3.1KiB
2021/07/08 17:04:37 scheduler task eaf39c4c (flow 58611434): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s095.tar.gz resources {}
2021/07/08 17:04:37  ->  n100.r05.s095.Main.cp_out_file 58611434 exec extern s3://niema-test/n100/r05/n100.r05.s095.tar.gz 35.7MiB
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:37 scheduler task 4ac811a5 (flow 62342884): transferring output (try 0): started
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): promoting objects (try 0): started
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloading (try 0): started
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloading list<val<.=2f096043 35.7MiB> 35.7MiB>
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloading val<.=bae3b2ad 35.4MiB>
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloading val<.=1e3eb454 35.4MiB>
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): retrieving diagnostic output (try 0): started
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): retrieving diagnostic output (try 0): started
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloaded list<val<.=2f096043 35.7MiB> 35.7MiB>
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloaded val<.=1e3eb454 35.4MiB>
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloaded val<.=bae3b2ad 35.4MiB>
2021/07/08 17:04:37 scheduler task 279b061c (flow f4b07b7e): unloading (try 0): successful, next state: complete
2021/07/08 17:04:37  <-  n100.r05.s043.Main.out_file f4b07b7e ok     exec 5m2s 35.7MiB
2021/07/08 17:04:37 n100.r05.s043.Main.out_file f4b07b7e n100/r05/n100.r05.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a1c30ed0d0b90a7c8dd0014f9651aff46760bce6cb7fe337d8d6a21ddf51641d
	sha256:f4b07b7e033a8850aaf5da2da38236dec7dc051079234b69693981d5fe018ab8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/279b061c93ee4b0833726010b9aca16bcb6b93fb061c4b5eabfc26af2d05793f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s043_output"
	    wget -O "n100.r05.s043_output/n100.r05.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s043_output/n100.r05.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s043_output/n100.r05.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s043_output/n100.r05.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s043_output/n100.r05.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s043_output/n100.r05.s043.reference.fas" "n100.r05.s043_output/n100.r05.s043.fq1.fastq" "n100.r05.s043_output/n100.r05.s043.fq2.fastq" | samtools view -bS - > "n100.r05.s043_output/n100.r05.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s043_output/n100.r05.s043.untrimmed.sorted.bam" "n100.r05.s043_output/n100.r05.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s043_output/n100.r05.s043.untrimmed.sorted.bam" -b "n100.r05.s043_output/n100.r05.s043.primers.bed" -p "n100.r05.s043_output/n100.r05.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" "n100.r05.s043_output/n100.r05.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s043_output/n100.r05.s043.reference.fas" "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" > "n100.r05.s043_output/n100.r05.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s043_output/n100.r05.s043.reference.fas" --call-indels "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" > "n100.r05.s043_output/n100.r05.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s043_output/n100.r05.s043.trimmed.sorted.bam" > "n100.r05.s043_output/n100.r05.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s043_output/n100.r05.s043.depth.txt" "n100.r05.s043_output/n100.r05.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s043_output/n100.r05.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s043_output/n100.r05.s043.reference.fas" | bcftools consensus -m "n100.r05.s043_output/n100.r05.s043.low_depth.tsv" tmp.vcf.gz > "n100.r05.s043_output/n100.r05.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2f0960430833365a16cafd76de0dbdbba682fbed1d73365b8e3eb084571c80fe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=133.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=702B max=3.1KiB
2021/07/08 17:04:37 scheduler task 2156ad05 (flow 210fcbc2): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s043.tar.gz resources {}
2021/07/08 17:04:37  ->  n100.r05.s043.Main.cp_out_file 210fcbc2 exec extern s3://niema-test/n100/r05/n100.r05.s043.tar.gz 35.7MiB
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): retrieving result (try 0): started
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): retrieving result (try 0): started
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:37 scheduler task 34bef674 (flow d9a526d1): transferring output (try 0): started
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:37 scheduler task a959f1cd (flow deb5653c): transferring output (try 0): started
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloading (try 0): started
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloading list<val<.=a2b45a17 35.8MiB> 35.8MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloading val<.=d9cd22f8 35.4MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloading val<.=adcf9c00 35.4MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloaded list<val<.=a2b45a17 35.8MiB> 35.8MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloaded val<.=adcf9c00 35.4MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloaded val<.=d9cd22f8 35.4MiB>
2021/07/08 17:04:37 scheduler task 600e8f95 (flow f3280027): unloading (try 0): successful, next state: complete
2021/07/08 17:04:37  <-  n100.r05.s031.Main.out_file f3280027 ok     exec 4m55s 35.8MiB
2021/07/08 17:04:37 n100.r05.s031.Main.out_file f3280027 n100/r05/n100.r05.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23e0c43e9fd6d77b938a177699d7d9d2ec17c22cbdbf4456b1dbb858c8ba7a48
	sha256:f328002711684120325a6be0d3f15bc8ae8f91939b1a78b6276269d8838ffb4c
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/600e8f9594eff529cca1892b7ea09d6b30bbbbd191dd126e0faf6c5ad43666cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s031_output"
	    wget -O "n100.r05.s031_output/n100.r05.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s031_output/n100.r05.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s031_output/n100.r05.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s031_output/n100.r05.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s031_output/n100.r05.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s031_output/n100.r05.s031.reference.fas" "n100.r05.s031_output/n100.r05.s031.fq1.fastq" "n100.r05.s031_output/n100.r05.s031.fq2.fastq" | samtools view -bS - > "n100.r05.s031_output/n100.r05.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s031_output/n100.r05.s031.untrimmed.sorted.bam" "n100.r05.s031_output/n100.r05.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s031_output/n100.r05.s031.untrimmed.sorted.bam" -b "n100.r05.s031_output/n100.r05.s031.primers.bed" -p "n100.r05.s031_output/n100.r05.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" "n100.r05.s031_output/n100.r05.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s031_output/n100.r05.s031.reference.fas" "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" > "n100.r05.s031_output/n100.r05.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s031_output/n100.r05.s031.reference.fas" --call-indels "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" > "n100.r05.s031_output/n100.r05.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s031_output/n100.r05.s031.trimmed.sorted.bam" > "n100.r05.s031_output/n100.r05.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s031_output/n100.r05.s031.depth.txt" "n100.r05.s031_output/n100.r05.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s031_output/n100.r05.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s031_output/n100.r05.s031.reference.fas" | bcftools consensus -m "n100.r05.s031_output/n100.r05.s031.low_depth.tsv" tmp.vcf.gz > "n100.r05.s031_output/n100.r05.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a2b45a1789174b5af5c6aac5dd3ece10701993d0f65241e8b6d66c808c26afc8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=125.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:37 scheduler task c4c36c9d (flow cb7b2557): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s031.tar.gz resources {}
2021/07/08 17:04:37  ->  n100.r05.s031.Main.cp_out_file cb7b2557 exec extern s3://niema-test/n100/r05/n100.r05.s031.tar.gz 35.8MiB
2021/07/08 17:04:37 scheduler task e6df00ff (flow 44fc334a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7a3d4592b8f7df1b86d63ceda236ec24413ed262d34b8ebf86751208d332254d -> s3://niema-test/n100/r05/n100.r05.s061.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:37  <-  n100.r05.s061.Main.cp_out_file 44fc334a ok   extern 0s 35.7MiB
2021/07/08 17:04:38 scheduler task eaf39c4c (flow 58611434): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:45c4ba200114204856fea0a9479c2e23ca4623b41ec17b5e78705794372bb525 -> s3://niema-test/n100/r05/n100.r05.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:38  <-  n100.r05.s095.Main.cp_out_file 58611434 ok   extern 0s 35.7MiB
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): promoting objects (try 0): started
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): retrieving diagnostic output (try 0): started
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloading (try 0): started
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloading list<val<.=76f25bb6 35.8MiB> 35.8MiB>
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloading val<.=552b5f55 35.4MiB>
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloading val<.=10eaec33 35.4MiB>
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): retrieving result (try 0): started
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloaded val<.=552b5f55 35.4MiB>
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloaded val<.=10eaec33 35.4MiB>
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloaded list<val<.=76f25bb6 35.8MiB> 35.8MiB>
2021/07/08 17:04:38 scheduler task 4ac811a5 (flow 62342884): unloading (try 0): successful, next state: complete
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloading (try 0): started
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloading list<val<.=05d20d52 35.7MiB> 35.7MiB>
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloading val<.=da44ca5d 35.4MiB>
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloading val<.=bbe74a02 35.4MiB>
2021/07/08 17:04:38  <-  n100.r05.s083.Main.out_file 62342884 ok     exec 4m55s 35.8MiB
2021/07/08 17:04:38 n100.r05.s083.Main.out_file 62342884 n100/r05/n100.r05.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0fc834dea0eb7dda4ceb162e0a69d162f87358e64dff5ca658c695a9e450444c
	sha256:623428841fb06e5a97c86e8e422e207e34d0a93ee642ac318a6956c4eb889036
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ac811a57fba2326d4e29f20dd30ff944542826a13bc9946f9366abc3a24b5b2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s083_output"
	    wget -O "n100.r05.s083_output/n100.r05.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s083_output/n100.r05.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s083_output/n100.r05.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s083_output/n100.r05.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s083_output/n100.r05.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s083_output/n100.r05.s083.reference.fas" "n100.r05.s083_output/n100.r05.s083.fq1.fastq" "n100.r05.s083_output/n100.r05.s083.fq2.fastq" | samtools view -bS - > "n100.r05.s083_output/n100.r05.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s083_output/n100.r05.s083.untrimmed.sorted.bam" "n100.r05.s083_output/n100.r05.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s083_output/n100.r05.s083.untrimmed.sorted.bam" -b "n100.r05.s083_output/n100.r05.s083.primers.bed" -p "n100.r05.s083_output/n100.r05.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" "n100.r05.s083_output/n100.r05.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s083_output/n100.r05.s083.reference.fas" "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" > "n100.r05.s083_output/n100.r05.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s083_output/n100.r05.s083.reference.fas" --call-indels "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" > "n100.r05.s083_output/n100.r05.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s083_output/n100.r05.s083.trimmed.sorted.bam" > "n100.r05.s083_output/n100.r05.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s083_output/n100.r05.s083.depth.txt" "n100.r05.s083_output/n100.r05.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s083_output/n100.r05.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s083_output/n100.r05.s083.reference.fas" | bcftools consensus -m "n100.r05.s083_output/n100.r05.s083.low_depth.tsv" tmp.vcf.gz > "n100.r05.s083_output/n100.r05.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:76f25bb6f9a49626cfe63b7b8e88642ca97326edd6c03ae081fbfee68c070d87 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.8MiB max=126.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:38 scheduler task 0a3c4652 (flow 0cdef05b): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s083.tar.gz resources {}
2021/07/08 17:04:38  ->  n100.r05.s083.Main.cp_out_file 0cdef05b exec extern s3://niema-test/n100/r05/n100.r05.s083.tar.gz 35.8MiB
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): transferring output (try 0): started
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloaded val<.=da44ca5d 35.4MiB>
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloaded val<.=bbe74a02 35.4MiB>
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloaded list<val<.=05d20d52 35.7MiB> 35.7MiB>
2021/07/08 17:04:38 scheduler task 34bef674 (flow d9a526d1): unloading (try 0): successful, next state: complete
2021/07/08 17:04:38  <-  n100.r05.s075.Main.out_file d9a526d1 ok     exec 5m3s 35.7MiB
2021/07/08 17:04:38 n100.r05.s075.Main.out_file d9a526d1 n100/r05/n100.r05.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f88f7362e4fb0b8743fce4c0d3798a4677e609e0a445ce4516f211a88c17ab6e
	sha256:d9a526d14a9578a15bcf3d0e764b9d5456572f0d4d02cc79da06d560e9dfc866
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/34bef674d38784c354b42ac038a2c53570ddf3c02f84bf58218a6f58d3d96352
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s075_output"
	    wget -O "n100.r05.s075_output/n100.r05.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s075_output/n100.r05.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s075_output/n100.r05.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s075_output/n100.r05.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s075_output/n100.r05.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s075_output/n100.r05.s075.reference.fas" "n100.r05.s075_output/n100.r05.s075.fq1.fastq" "n100.r05.s075_output/n100.r05.s075.fq2.fastq" | samtools view -bS - > "n100.r05.s075_output/n100.r05.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s075_output/n100.r05.s075.untrimmed.sorted.bam" "n100.r05.s075_output/n100.r05.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s075_output/n100.r05.s075.untrimmed.sorted.bam" -b "n100.r05.s075_output/n100.r05.s075.primers.bed" -p "n100.r05.s075_output/n100.r05.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" "n100.r05.s075_output/n100.r05.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s075_output/n100.r05.s075.reference.fas" "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" > "n100.r05.s075_output/n100.r05.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s075_output/n100.r05.s075.reference.fas" --call-indels "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" > "n100.r05.s075_output/n100.r05.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s075_output/n100.r05.s075.trimmed.sorted.bam" > "n100.r05.s075_output/n100.r05.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s075_output/n100.r05.s075.depth.txt" "n100.r05.s075_output/n100.r05.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s075_output/n100.r05.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s075_output/n100.r05.s075.reference.fas" | bcftools consensus -m "n100.r05.s075_output/n100.r05.s075.low_depth.tsv" tmp.vcf.gz > "n100.r05.s075_output/n100.r05.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:05d20d5275597b8c76e86d72d6dc14d9e1a126020f38a1cd4e17e29ae9373a99 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=130.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:04:38 scheduler task 12e6dc0c (flow 030f898e): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s075.tar.gz resources {}
2021/07/08 17:04:38  ->  n100.r05.s075.Main.cp_out_file 030f898e exec extern s3://niema-test/n100/r05/n100.r05.s075.tar.gz 35.7MiB
2021/07/08 17:04:38 scheduler task 2156ad05 (flow 210fcbc2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2f0960430833365a16cafd76de0dbdbba682fbed1d73365b8e3eb084571c80fe -> s3://niema-test/n100/r05/n100.r05.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:38  <-  n100.r05.s043.Main.cp_out_file 210fcbc2 ok   extern 0s 35.7MiB
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloading (try 0): started
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloading list<val<.=d0f22df3 35.8MiB> 35.8MiB>
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloading val<.=0e627a35 35.4MiB>
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloading val<.=012341f0 35.4MiB>
2021/07/08 17:04:38 scheduler task c4c36c9d (flow cb7b2557): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a2b45a1789174b5af5c6aac5dd3ece10701993d0f65241e8b6d66c808c26afc8 -> s3://niema-test/n100/r05/n100.r05.s031.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:38  <-  n100.r05.s031.Main.cp_out_file cb7b2557 ok   extern 0s 35.8MiB
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloaded list<val<.=d0f22df3 35.8MiB> 35.8MiB>
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloaded val<.=0e627a35 35.4MiB>
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloaded val<.=012341f0 35.4MiB>
2021/07/08 17:04:38 scheduler task a959f1cd (flow deb5653c): unloading (try 0): successful, next state: complete
2021/07/08 17:04:38  <-  n100.r05.s078.Main.out_file deb5653c ok     exec 4m55s 35.8MiB
2021/07/08 17:04:38 n100.r05.s078.Main.out_file deb5653c n100/r05/n100.r05.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ecc2e245b5e0c4abc33fa7253c21f0c22b98cb8d53ffc582ff5437b00545b2d5
	sha256:deb5653c60581eee08f3ef322dad1920e2af825036217fc238eef0d9ac792a66
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a959f1cd58c667903ebad545e49b374e3660169d688a05de7835ae2ed3b4f422
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s078_output"
	    wget -O "n100.r05.s078_output/n100.r05.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s078_output/n100.r05.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s078_output/n100.r05.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s078_output/n100.r05.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s078_output/n100.r05.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s078_output/n100.r05.s078.reference.fas" "n100.r05.s078_output/n100.r05.s078.fq1.fastq" "n100.r05.s078_output/n100.r05.s078.fq2.fastq" | samtools view -bS - > "n100.r05.s078_output/n100.r05.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s078_output/n100.r05.s078.untrimmed.sorted.bam" "n100.r05.s078_output/n100.r05.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s078_output/n100.r05.s078.untrimmed.sorted.bam" -b "n100.r05.s078_output/n100.r05.s078.primers.bed" -p "n100.r05.s078_output/n100.r05.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" "n100.r05.s078_output/n100.r05.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s078_output/n100.r05.s078.reference.fas" "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" > "n100.r05.s078_output/n100.r05.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s078_output/n100.r05.s078.reference.fas" --call-indels "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" > "n100.r05.s078_output/n100.r05.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s078_output/n100.r05.s078.trimmed.sorted.bam" > "n100.r05.s078_output/n100.r05.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s078_output/n100.r05.s078.depth.txt" "n100.r05.s078_output/n100.r05.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s078_output/n100.r05.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s078_output/n100.r05.s078.reference.fas" | bcftools consensus -m "n100.r05.s078_output/n100.r05.s078.low_depth.tsv" tmp.vcf.gz > "n100.r05.s078_output/n100.r05.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d0f22df3a50fa6e4bc6766ba497171b9b47f303d08613806a09ecc48c169811f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=130.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:38 scheduler task c4e5338c (flow 255078e0): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s078.tar.gz resources {}
2021/07/08 17:04:38  ->  n100.r05.s078.Main.cp_out_file 255078e0 exec extern s3://niema-test/n100/r05/n100.r05.s078.tar.gz 35.8MiB
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): promoting objects (try 0): started
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): retrieving diagnostic output (try 0): started
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): retrieving result (try 0): started
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloading (try 0): started
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloading list<val<.=ffe798f7 35.8MiB> 35.8MiB>
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloading val<.=a181f4c6 35.4MiB>
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloading val<.=1da4441d 35.4MiB>
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:38 scheduler task b0d98539 (flow a77292d1): transferring output (try 0): started
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloaded val<.=1da4441d 35.4MiB>
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloaded list<val<.=ffe798f7 35.8MiB> 35.8MiB>
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloaded val<.=a181f4c6 35.4MiB>
2021/07/08 17:04:38 scheduler task 43f6c42b (flow a15eb662): unloading (try 0): successful, next state: complete
2021/07/08 17:04:39  <-  n100.r05.s012.Main.out_file a15eb662 ok     exec 5m4s 35.8MiB
2021/07/08 17:04:39 n100.r05.s012.Main.out_file a15eb662 n100/r05/n100.r05.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd664f69a0cdb1620c6f03e04f754e8de901084767b4e36933c47c0d6c9663e2
	sha256:a15eb66261ce7334b459b307003f89470f1fab602d12ba97970c1f5e8b02b88a
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43f6c42b852dee0b65dae092918cf8fe62aa54ddfc074b2be15e3f8e3d7a2b17
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s012_output"
	    wget -O "n100.r05.s012_output/n100.r05.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s012_output/n100.r05.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s012_output/n100.r05.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s012_output/n100.r05.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s012_output/n100.r05.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s012_output/n100.r05.s012.reference.fas" "n100.r05.s012_output/n100.r05.s012.fq1.fastq" "n100.r05.s012_output/n100.r05.s012.fq2.fastq" | samtools view -bS - > "n100.r05.s012_output/n100.r05.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s012_output/n100.r05.s012.untrimmed.sorted.bam" "n100.r05.s012_output/n100.r05.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s012_output/n100.r05.s012.untrimmed.sorted.bam" -b "n100.r05.s012_output/n100.r05.s012.primers.bed" -p "n100.r05.s012_output/n100.r05.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" "n100.r05.s012_output/n100.r05.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s012_output/n100.r05.s012.reference.fas" "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" > "n100.r05.s012_output/n100.r05.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s012_output/n100.r05.s012.reference.fas" --call-indels "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" > "n100.r05.s012_output/n100.r05.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s012_output/n100.r05.s012.trimmed.sorted.bam" > "n100.r05.s012_output/n100.r05.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s012_output/n100.r05.s012.depth.txt" "n100.r05.s012_output/n100.r05.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s012_output/n100.r05.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s012_output/n100.r05.s012.reference.fas" | bcftools consensus -m "n100.r05.s012_output/n100.r05.s012.low_depth.tsv" tmp.vcf.gz > "n100.r05.s012_output/n100.r05.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ffe798f7686d74688bd91aa27c7ca86f729bea2bb50816c2c3ccf619a23e60ee 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.7MiB max=126.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:04:39 scheduler task c8c1c6b0 (flow 291ffa71): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s012.tar.gz resources {}
2021/07/08 17:04:39  ->  n100.r05.s012.Main.cp_out_file 291ffa71 exec extern s3://niema-test/n100/r05/n100.r05.s012.tar.gz 35.8MiB
2021/07/08 17:04:39 scheduler task 0a3c4652 (flow 0cdef05b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:76f25bb6f9a49626cfe63b7b8e88642ca97326edd6c03ae081fbfee68c070d87 -> s3://niema-test/n100/r05/n100.r05.s083.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:39  <-  n100.r05.s083.Main.cp_out_file 0cdef05b ok   extern 0s 35.8MiB
2021/07/08 17:04:39 scheduler task c4e5338c (flow 255078e0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d0f22df3a50fa6e4bc6766ba497171b9b47f303d08613806a09ecc48c169811f -> s3://niema-test/n100/r05/n100.r05.s078.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:39  <-  n100.r05.s078.Main.cp_out_file 255078e0 ok   extern 0s 35.8MiB
2021/07/08 17:04:39 scheduler task 12e6dc0c (flow 030f898e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:05d20d5275597b8c76e86d72d6dc14d9e1a126020f38a1cd4e17e29ae9373a99 -> s3://niema-test/n100/r05/n100.r05.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:39  <-  n100.r05.s075.Main.cp_out_file 030f898e ok   extern 0s 35.7MiB
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloading (try 0): started
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloading list<val<.=07f7f509 35.7MiB> 35.7MiB>
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloading val<.=b6bf5366 35.4MiB>
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloading val<.=06aef94f 35.4MiB>
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloaded val<.=b6bf5366 35.4MiB>
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloaded list<val<.=07f7f509 35.7MiB> 35.7MiB>
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloaded val<.=06aef94f 35.4MiB>
2021/07/08 17:04:39 scheduler task b0d98539 (flow a77292d1): unloading (try 0): successful, next state: complete
2021/07/08 17:04:39  <-  n100.r05.s073.Main.out_file a77292d1 ok     exec 4m57s 35.7MiB
2021/07/08 17:04:39 n100.r05.s073.Main.out_file a77292d1 n100/r05/n100.r05.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8f9844980f3e68c6f461926470385212f682ee33387bd5bac0f840036503fb22
	sha256:a77292d10d3d07cfd835121250d452cdf8bf00fdce68fd46c0faa1581f1c60a1
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b0d9853926854724caa3bb373526c761f98c7c4338f848e73d2a5591fa71e537
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s073_output"
	    wget -O "n100.r05.s073_output/n100.r05.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s073_output/n100.r05.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s073_output/n100.r05.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s073_output/n100.r05.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s073_output/n100.r05.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s073_output/n100.r05.s073.reference.fas" "n100.r05.s073_output/n100.r05.s073.fq1.fastq" "n100.r05.s073_output/n100.r05.s073.fq2.fastq" | samtools view -bS - > "n100.r05.s073_output/n100.r05.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s073_output/n100.r05.s073.untrimmed.sorted.bam" "n100.r05.s073_output/n100.r05.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s073_output/n100.r05.s073.untrimmed.sorted.bam" -b "n100.r05.s073_output/n100.r05.s073.primers.bed" -p "n100.r05.s073_output/n100.r05.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" "n100.r05.s073_output/n100.r05.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s073_output/n100.r05.s073.reference.fas" "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" > "n100.r05.s073_output/n100.r05.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s073_output/n100.r05.s073.reference.fas" --call-indels "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" > "n100.r05.s073_output/n100.r05.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s073_output/n100.r05.s073.trimmed.sorted.bam" > "n100.r05.s073_output/n100.r05.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s073_output/n100.r05.s073.depth.txt" "n100.r05.s073_output/n100.r05.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s073_output/n100.r05.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s073_output/n100.r05.s073.reference.fas" | bcftools consensus -m "n100.r05.s073_output/n100.r05.s073.low_depth.tsv" tmp.vcf.gz > "n100.r05.s073_output/n100.r05.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:07f7f5095720c79f6d4919780c24b8cbc59615274fc92b6df443c143538b7a54 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=131.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:04:39 scheduler task 6ebac118 (flow 38870a72): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s073.tar.gz resources {}
2021/07/08 17:04:39  ->  n100.r05.s073.Main.cp_out_file 38870a72 exec extern s3://niema-test/n100/r05/n100.r05.s073.tar.gz 35.7MiB
2021/07/08 17:04:39 scheduler task c8c1c6b0 (flow 291ffa71): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ffe798f7686d74688bd91aa27c7ca86f729bea2bb50816c2c3ccf619a23e60ee -> s3://niema-test/n100/r05/n100.r05.s012.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:39  <-  n100.r05.s012.Main.cp_out_file 291ffa71 ok   extern 0s 35.8MiB
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): promoting objects (try 0): started
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): retrieving diagnostic output (try 0): started
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): retrieving result (try 0): started
2021/07/08 17:04:39 scheduler task 65b5b36f (flow d2089de1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): transferring output (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): promoting objects (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): retrieving diagnostic output (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): retrieving result (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): transferring output (try 0): started
2021/07/08 17:04:40 scheduler task 6ebac118 (flow 38870a72): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:07f7f5095720c79f6d4919780c24b8cbc59615274fc92b6df443c143538b7a54 -> s3://niema-test/n100/r05/n100.r05.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:40  <-  n100.r05.s073.Main.cp_out_file 38870a72 ok   extern 0s 35.7MiB
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): promoting objects (try 0): started
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): retrieving diagnostic output (try 0): started
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloading (try 0): started
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloading list<val<.=0e8b38a3 35.7MiB> 35.7MiB>
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloading val<.=3d72fb01 35.4MiB>
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloading val<.=7f34a5fa 35.4MiB>
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): promoting objects (try 0): started
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): retrieving result (try 0): started
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloaded val<.=7f34a5fa 35.4MiB>
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloaded val<.=3d72fb01 35.4MiB>
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloaded list<val<.=0e8b38a3 35.7MiB> 35.7MiB>
2021/07/08 17:04:40 scheduler task 65b5b36f (flow d2089de1): unloading (try 0): successful, next state: complete
2021/07/08 17:04:40  <-  n100.r05.s065.Main.out_file d2089de1 ok     exec 4m57s 35.7MiB
2021/07/08 17:04:40 n100.r05.s065.Main.out_file d2089de1 n100/r05/n100.r05.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fff58496a3815ce03d6cfdd5c6a4d3e719fb75a0ca512e7d6a57ec040c26fc0a
	sha256:d2089de1f75cd90f6000cf53c53f310d95d56db9d348dc461de8b4f817d0236b
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/65b5b36fae56111839a2dfeb5251cb2a3e39232b490a1525db18068fe3e82786
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s065_output"
	    wget -O "n100.r05.s065_output/n100.r05.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s065_output/n100.r05.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s065_output/n100.r05.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s065_output/n100.r05.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s065_output/n100.r05.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s065_output/n100.r05.s065.reference.fas" "n100.r05.s065_output/n100.r05.s065.fq1.fastq" "n100.r05.s065_output/n100.r05.s065.fq2.fastq" | samtools view -bS - > "n100.r05.s065_output/n100.r05.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s065_output/n100.r05.s065.untrimmed.sorted.bam" "n100.r05.s065_output/n100.r05.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s065_output/n100.r05.s065.untrimmed.sorted.bam" -b "n100.r05.s065_output/n100.r05.s065.primers.bed" -p "n100.r05.s065_output/n100.r05.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" "n100.r05.s065_output/n100.r05.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s065_output/n100.r05.s065.reference.fas" "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" > "n100.r05.s065_output/n100.r05.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s065_output/n100.r05.s065.reference.fas" --call-indels "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" > "n100.r05.s065_output/n100.r05.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s065_output/n100.r05.s065.trimmed.sorted.bam" > "n100.r05.s065_output/n100.r05.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s065_output/n100.r05.s065.depth.txt" "n100.r05.s065_output/n100.r05.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s065_output/n100.r05.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s065_output/n100.r05.s065.reference.fas" | bcftools consensus -m "n100.r05.s065_output/n100.r05.s065.low_depth.tsv" tmp.vcf.gz > "n100.r05.s065_output/n100.r05.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0e8b38a3f19406cf3b16ef2a5211429b08425d447ddc033ad9c01772ba9bb745 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=129.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:40 scheduler task 382d7b26 (flow ca4e27fb): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s065.tar.gz resources {}
2021/07/08 17:04:40  ->  n100.r05.s065.Main.cp_out_file ca4e27fb exec extern s3://niema-test/n100/r05/n100.r05.s065.tar.gz 35.7MiB
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): retrieving diagnostic output (try 0): started
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:40 scheduler task a1c84a70 (flow be90496f): transferring output (try 0): started
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): retrieving result (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloading (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloading list<val<.=480caf24 35.7MiB> 35.7MiB>
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloading val<.=433a7818 35.4MiB>
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloading val<.=1158a130 35.4MiB>
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:40 scheduler task f9272175 (flow b087d69b): transferring output (try 0): started
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloaded val<.=433a7818 35.4MiB>
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloaded val<.=1158a130 35.4MiB>
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloaded list<val<.=480caf24 35.7MiB> 35.7MiB>
2021/07/08 17:04:40 scheduler task 7ee1dc12 (flow f84e5b81): unloading (try 0): successful, next state: complete
2021/07/08 17:04:40  <-  n100.r05.s025.Main.out_file f84e5b81 ok     exec 4m58s 35.7MiB
2021/07/08 17:04:40 n100.r05.s025.Main.out_file f84e5b81 n100/r05/n100.r05.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5d9c272a823dfe14b05f33e87609569faacd5d7f03af4f262fefdd8e270566c9
	sha256:f84e5b81afd9c2ac514d2f12ab315621621768f785cef27bbb1e269cbc0403c8
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ee1dc128dca6cc3a638c80f95f6f1ad7c8ae5642d53cea5698ca5a80b586cab
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s025_output"
	    wget -O "n100.r05.s025_output/n100.r05.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s025_output/n100.r05.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s025_output/n100.r05.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s025_output/n100.r05.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s025_output/n100.r05.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s025_output/n100.r05.s025.reference.fas" "n100.r05.s025_output/n100.r05.s025.fq1.fastq" "n100.r05.s025_output/n100.r05.s025.fq2.fastq" | samtools view -bS - > "n100.r05.s025_output/n100.r05.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s025_output/n100.r05.s025.untrimmed.sorted.bam" "n100.r05.s025_output/n100.r05.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s025_output/n100.r05.s025.untrimmed.sorted.bam" -b "n100.r05.s025_output/n100.r05.s025.primers.bed" -p "n100.r05.s025_output/n100.r05.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" "n100.r05.s025_output/n100.r05.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s025_output/n100.r05.s025.reference.fas" "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" > "n100.r05.s025_output/n100.r05.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s025_output/n100.r05.s025.reference.fas" --call-indels "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" > "n100.r05.s025_output/n100.r05.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s025_output/n100.r05.s025.trimmed.sorted.bam" > "n100.r05.s025_output/n100.r05.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s025_output/n100.r05.s025.depth.txt" "n100.r05.s025_output/n100.r05.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s025_output/n100.r05.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s025_output/n100.r05.s025.reference.fas" | bcftools consensus -m "n100.r05.s025_output/n100.r05.s025.low_depth.tsv" tmp.vcf.gz > "n100.r05.s025_output/n100.r05.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:480caf24e373d7b882d71a170dc92e3c23b73432417a9a3f88d81892e1f357ce 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.1MiB max=131.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:40 scheduler task 04b6de3e (flow 2bc546db): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s025.tar.gz resources {}
2021/07/08 17:04:40  ->  n100.r05.s025.Main.cp_out_file 2bc546db exec extern s3://niema-test/n100/r05/n100.r05.s025.tar.gz 35.7MiB
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): promoting objects (try 0): started
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:41 scheduler task 382d7b26 (flow ca4e27fb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0e8b38a3f19406cf3b16ef2a5211429b08425d447ddc033ad9c01772ba9bb745 -> s3://niema-test/n100/r05/n100.r05.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:41  <-  n100.r05.s065.Main.cp_out_file ca4e27fb ok   extern 0s 35.7MiB
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): retrieving diagnostic output (try 0): started
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloading (try 0): started
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloading list<val<.=5f29508e 35.8MiB> 35.8MiB>
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloading val<.=5b525d79 35.4MiB>
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloading val<.=ae2c6286 35.4MiB>
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloading (try 0): started
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloading list<val<.=92f62024 35.7MiB> 35.7MiB>
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloading val<.=1ff6ef9e 35.4MiB>
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloading val<.=0b94ff6b 35.4MiB>
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): promoting objects (try 0): started
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloaded list<val<.=5f29508e 35.8MiB> 35.8MiB>
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloaded val<.=5b525d79 35.4MiB>
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloaded val<.=ae2c6286 35.4MiB>
2021/07/08 17:04:41 scheduler task a1c84a70 (flow be90496f): unloading (try 0): successful, next state: complete
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): retrieving result (try 0): started
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloaded list<val<.=92f62024 35.7MiB> 35.7MiB>
2021/07/08 17:04:41  <-  n100.r05.s032.Main.out_file be90496f ok     exec 4m58s 35.8MiB
2021/07/08 17:04:41 n100.r05.s032.Main.out_file be90496f n100/r05/n100.r05.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:098c107011afa96348c7587d6c9b325d7deae20db0cf7b0f6231a7e25195ddb8
	sha256:be90496fe48d6b9645d325b20b3bb2264288eeaa73d5c1d1eff34c4cc83af1c5
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1c84a7094de9bc06e91920fee8c9ad9f67aa1eac111a42da1e0c047cd353f67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s032_output"
	    wget -O "n100.r05.s032_output/n100.r05.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s032_output/n100.r05.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s032_output/n100.r05.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s032_output/n100.r05.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s032_output/n100.r05.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s032_output/n100.r05.s032.reference.fas" "n100.r05.s032_output/n100.r05.s032.fq1.fastq" "n100.r05.s032_output/n100.r05.s032.fq2.fastq" | samtools view -bS - > "n100.r05.s032_output/n100.r05.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s032_output/n100.r05.s032.untrimmed.sorted.bam" "n100.r05.s032_output/n100.r05.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s032_output/n100.r05.s032.untrimmed.sorted.bam" -b "n100.r05.s032_output/n100.r05.s032.primers.bed" -p "n100.r05.s032_output/n100.r05.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" "n100.r05.s032_output/n100.r05.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s032_output/n100.r05.s032.reference.fas" "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" > "n100.r05.s032_output/n100.r05.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s032_output/n100.r05.s032.reference.fas" --call-indels "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" > "n100.r05.s032_output/n100.r05.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s032_output/n100.r05.s032.trimmed.sorted.bam" > "n100.r05.s032_output/n100.r05.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s032_output/n100.r05.s032.depth.txt" "n100.r05.s032_output/n100.r05.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s032_output/n100.r05.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s032_output/n100.r05.s032.reference.fas" | bcftools consensus -m "n100.r05.s032_output/n100.r05.s032.low_depth.tsv" tmp.vcf.gz > "n100.r05.s032_output/n100.r05.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5f29508ea833a1f8928c2f6b54f12f6c594ba942d8004fd77d9ca83934c3c71c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=126.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:41 scheduler task 823defc3 (flow 8e0cc6eb): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s032.tar.gz resources {}
2021/07/08 17:04:41  ->  n100.r05.s032.Main.cp_out_file 8e0cc6eb exec extern s3://niema-test/n100/r05/n100.r05.s032.tar.gz 35.8MiB
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloaded val<.=1ff6ef9e 35.4MiB>
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloaded val<.=0b94ff6b 35.4MiB>
2021/07/08 17:04:41 scheduler task f9272175 (flow b087d69b): unloading (try 0): successful, next state: complete
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): retrieving diagnostic output (try 0): started
2021/07/08 17:04:41  <-  n100.r05.s089.Main.out_file b087d69b ok     exec 4m59s 35.7MiB
2021/07/08 17:04:41 n100.r05.s089.Main.out_file b087d69b n100/r05/n100.r05.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:25fc188dfbf7470cb53a6e2ae42b40b2fd3dc8a02035673d8d2add99ae6c6d7b
	sha256:b087d69bc583d6a3f30091cfc2099263c5fc9334192171466d859b72f70780be
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f92721753f11f0c54c354f67eb325b5abeca215f4f43147f14f81984d08d94fa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s089_output"
	    wget -O "n100.r05.s089_output/n100.r05.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s089_output/n100.r05.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s089_output/n100.r05.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s089_output/n100.r05.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s089_output/n100.r05.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s089_output/n100.r05.s089.reference.fas" "n100.r05.s089_output/n100.r05.s089.fq1.fastq" "n100.r05.s089_output/n100.r05.s089.fq2.fastq" | samtools view -bS - > "n100.r05.s089_output/n100.r05.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s089_output/n100.r05.s089.untrimmed.sorted.bam" "n100.r05.s089_output/n100.r05.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s089_output/n100.r05.s089.untrimmed.sorted.bam" -b "n100.r05.s089_output/n100.r05.s089.primers.bed" -p "n100.r05.s089_output/n100.r05.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" "n100.r05.s089_output/n100.r05.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s089_output/n100.r05.s089.reference.fas" "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" > "n100.r05.s089_output/n100.r05.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s089_output/n100.r05.s089.reference.fas" --call-indels "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" > "n100.r05.s089_output/n100.r05.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s089_output/n100.r05.s089.trimmed.sorted.bam" > "n100.r05.s089_output/n100.r05.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s089_output/n100.r05.s089.depth.txt" "n100.r05.s089_output/n100.r05.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s089_output/n100.r05.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s089_output/n100.r05.s089.reference.fas" | bcftools consensus -m "n100.r05.s089_output/n100.r05.s089.low_depth.tsv" tmp.vcf.gz > "n100.r05.s089_output/n100.r05.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:92f6202495ce0e50869712f2103640c557a3c7619b4c97fa8db0057c1d5f048d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=132.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:41 scheduler task 9bb9e30c (flow 1db741b7): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s089.tar.gz resources {}
2021/07/08 17:04:41  ->  n100.r05.s089.Main.cp_out_file 1db741b7 exec extern s3://niema-test/n100/r05/n100.r05.s089.tar.gz 35.7MiB
2021/07/08 17:04:41 scheduler task 04b6de3e (flow 2bc546db): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:480caf24e373d7b882d71a170dc92e3c23b73432417a9a3f88d81892e1f357ce -> s3://niema-test/n100/r05/n100.r05.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:41  <-  n100.r05.s025.Main.cp_out_file 2bc546db ok   extern 0s 35.7MiB
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:41 scheduler task c24bee6e (flow 877da018): transferring output (try 0): started
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): retrieving result (try 0): started
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:41 scheduler task b8a3f011 (flow 81bfa0a3): transferring output (try 0): started
2021/07/08 17:04:41 scheduler task 2d6a723e (flow 0ca87758): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:41 scheduler task 2d6a723e (flow 0ca87758): promoting objects (try 0): started
2021/07/08 17:04:41 scheduler task 25b5d38e (flow b7cf4504): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): promoting objects (try 0): started
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): retrieving diagnostic output (try 0): started
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): retrieving diagnostic output (try 0): started
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): retrieving result (try 0): started
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): retrieving result (try 0): started
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloading (try 0): started
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloading list<val<.=0fad9d3a 35.7MiB> 35.7MiB>
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloading val<.=6ef34f12 35.4MiB>
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloading val<.=248a0a5c 35.4MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): transferring output (try 0): started
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): transferring output (try 0): started
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloaded val<.=248a0a5c 35.4MiB>
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloaded list<val<.=0fad9d3a 35.7MiB> 35.7MiB>
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloaded val<.=6ef34f12 35.4MiB>
2021/07/08 17:04:42 scheduler task c24bee6e (flow 877da018): unloading (try 0): successful, next state: complete
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloading (try 0): started
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloading list<val<.=594ef597 35.7MiB> 35.7MiB>
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloading val<.=9fe7f9a0 35.4MiB>
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloading val<.=c27e45cc 35.4MiB>
2021/07/08 17:04:42  <-  n100.r05.s084.Main.out_file 877da018 ok     exec 4m58s 35.7MiB
2021/07/08 17:04:42 n100.r05.s084.Main.out_file 877da018 n100/r05/n100.r05.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f57294c8e832f64a2288571e7b57bd5a4c8d1bc368bcbaa11c86e406a5935986
	sha256:877da01828d3e9c9f32648e66e19890075a40de3150da12c65edbfc6653742d3
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c24bee6edbfca5b6fb81fba51ffeeed5dd55ba908d88e0d86d60722eebdc5692
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s084_output"
	    wget -O "n100.r05.s084_output/n100.r05.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s084_output/n100.r05.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s084_output/n100.r05.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s084_output/n100.r05.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s084_output/n100.r05.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s084_output/n100.r05.s084.reference.fas" "n100.r05.s084_output/n100.r05.s084.fq1.fastq" "n100.r05.s084_output/n100.r05.s084.fq2.fastq" | samtools view -bS - > "n100.r05.s084_output/n100.r05.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s084_output/n100.r05.s084.untrimmed.sorted.bam" "n100.r05.s084_output/n100.r05.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s084_output/n100.r05.s084.untrimmed.sorted.bam" -b "n100.r05.s084_output/n100.r05.s084.primers.bed" -p "n100.r05.s084_output/n100.r05.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" "n100.r05.s084_output/n100.r05.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s084_output/n100.r05.s084.reference.fas" "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" > "n100.r05.s084_output/n100.r05.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s084_output/n100.r05.s084.reference.fas" --call-indels "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" > "n100.r05.s084_output/n100.r05.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s084_output/n100.r05.s084.trimmed.sorted.bam" > "n100.r05.s084_output/n100.r05.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s084_output/n100.r05.s084.depth.txt" "n100.r05.s084_output/n100.r05.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s084_output/n100.r05.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s084_output/n100.r05.s084.reference.fas" | bcftools consensus -m "n100.r05.s084_output/n100.r05.s084.low_depth.tsv" tmp.vcf.gz > "n100.r05.s084_output/n100.r05.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0fad9d3aa74c38add9b0e1bac82834fcb84b34b55b70fbd0f82e0e1ca2449b6f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=125.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:04:42 scheduler task 100c866b (flow 51a58b3b): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s084.tar.gz resources {}
2021/07/08 17:04:42  ->  n100.r05.s084.Main.cp_out_file 51a58b3b exec extern s3://niema-test/n100/r05/n100.r05.s084.tar.gz 35.7MiB
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloaded val<.=9fe7f9a0 35.4MiB>
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloaded list<val<.=594ef597 35.7MiB> 35.7MiB>
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloaded val<.=c27e45cc 35.4MiB>
2021/07/08 17:04:42 scheduler task b8a3f011 (flow 81bfa0a3): unloading (try 0): successful, next state: complete
2021/07/08 17:04:42  <-  n100.r05.s071.Main.out_file 81bfa0a3 ok     exec 5m0s 35.7MiB
2021/07/08 17:04:42 n100.r05.s071.Main.out_file 81bfa0a3 n100/r05/n100.r05.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7440b5238a5df1f0d7bb9c277c6919a92dbd9734bd037014b77b60b440c8b76c
	sha256:81bfa0a32a9012825867a3d44d67030045d99b3ec512a9d100b1730e36b722ec
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b8a3f01157a19ac5ea06a7d6d3e444e6565246e57d23d92d8308f624fe4ea2fa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s071_output"
	    wget -O "n100.r05.s071_output/n100.r05.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s071_output/n100.r05.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s071_output/n100.r05.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s071_output/n100.r05.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s071_output/n100.r05.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s071_output/n100.r05.s071.reference.fas" "n100.r05.s071_output/n100.r05.s071.fq1.fastq" "n100.r05.s071_output/n100.r05.s071.fq2.fastq" | samtools view -bS - > "n100.r05.s071_output/n100.r05.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s071_output/n100.r05.s071.untrimmed.sorted.bam" "n100.r05.s071_output/n100.r05.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s071_output/n100.r05.s071.untrimmed.sorted.bam" -b "n100.r05.s071_output/n100.r05.s071.primers.bed" -p "n100.r05.s071_output/n100.r05.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" "n100.r05.s071_output/n100.r05.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s071_output/n100.r05.s071.reference.fas" "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" > "n100.r05.s071_output/n100.r05.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s071_output/n100.r05.s071.reference.fas" --call-indels "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" > "n100.r05.s071_output/n100.r05.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s071_output/n100.r05.s071.trimmed.sorted.bam" > "n100.r05.s071_output/n100.r05.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s071_output/n100.r05.s071.depth.txt" "n100.r05.s071_output/n100.r05.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s071_output/n100.r05.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s071_output/n100.r05.s071.reference.fas" | bcftools consensus -m "n100.r05.s071_output/n100.r05.s071.low_depth.tsv" tmp.vcf.gz > "n100.r05.s071_output/n100.r05.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:594ef5979e8d6c26cdfd12ccc08e2315d8cb85a6211a6179d047cedb7520019d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=131.5MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:42 scheduler task 6fc175cd (flow 9a9c8293): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s071.tar.gz resources {}
2021/07/08 17:04:42  ->  n100.r05.s071.Main.cp_out_file 9a9c8293 exec extern s3://niema-test/n100/r05/n100.r05.s071.tar.gz 35.7MiB
2021/07/08 17:04:42 scheduler task 9bb9e30c (flow 1db741b7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:92f6202495ce0e50869712f2103640c557a3c7619b4c97fa8db0057c1d5f048d -> s3://niema-test/n100/r05/n100.r05.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:42  <-  n100.r05.s089.Main.cp_out_file 1db741b7 ok   extern 0s 35.7MiB
2021/07/08 17:04:42 scheduler task 823defc3 (flow 8e0cc6eb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5f29508ea833a1f8928c2f6b54f12f6c594ba942d8004fd77d9ca83934c3c71c -> s3://niema-test/n100/r05/n100.r05.s032.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:42  <-  n100.r05.s032.Main.cp_out_file 8e0cc6eb ok   extern 0s 35.8MiB
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloading (try 0): started
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloading list<val<.=51daddec 35.8MiB> 35.8MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloading val<.=f8489207 35.4MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloading val<.=b0970af2 35.4MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloaded list<val<.=51daddec 35.8MiB> 35.8MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloaded val<.=b0970af2 35.4MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloaded val<.=f8489207 35.4MiB>
2021/07/08 17:04:42 scheduler task 2d6a723e (flow 0ca87758): unloading (try 0): successful, next state: complete
2021/07/08 17:04:42  <-  n100.r05.s100.Main.out_file 0ca87758 ok     exec 5m0s 35.8MiB
2021/07/08 17:04:42 n100.r05.s100.Main.out_file 0ca87758 n100/r05/n100.r05.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:67b5942ee9f4d10ace44a1a386f6d9a7d862a269f6e91b7ff19ec57d861f6232
	sha256:0ca877583291be878d23289dccc4fa8fee62a5340c645330ac6a9e45c74df254
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2d6a723e27e54a9e1ca866ccf1b815bf817d2039180c5c41847a2cbdb8f3f2b6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s100_output"
	    wget -O "n100.r05.s100_output/n100.r05.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s100_output/n100.r05.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s100_output/n100.r05.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s100_output/n100.r05.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s100_output/n100.r05.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s100_output/n100.r05.s100.reference.fas" "n100.r05.s100_output/n100.r05.s100.fq1.fastq" "n100.r05.s100_output/n100.r05.s100.fq2.fastq" | samtools view -bS - > "n100.r05.s100_output/n100.r05.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s100_output/n100.r05.s100.untrimmed.sorted.bam" "n100.r05.s100_output/n100.r05.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s100_output/n100.r05.s100.untrimmed.sorted.bam" -b "n100.r05.s100_output/n100.r05.s100.primers.bed" -p "n100.r05.s100_output/n100.r05.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" "n100.r05.s100_output/n100.r05.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s100_output/n100.r05.s100.reference.fas" "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" > "n100.r05.s100_output/n100.r05.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s100_output/n100.r05.s100.reference.fas" --call-indels "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" > "n100.r05.s100_output/n100.r05.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s100_output/n100.r05.s100.trimmed.sorted.bam" > "n100.r05.s100_output/n100.r05.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s100_output/n100.r05.s100.depth.txt" "n100.r05.s100_output/n100.r05.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s100_output/n100.r05.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s100_output/n100.r05.s100.reference.fas" | bcftools consensus -m "n100.r05.s100_output/n100.r05.s100.low_depth.tsv" tmp.vcf.gz > "n100.r05.s100_output/n100.r05.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:51daddecc7670cb4168c7e27023b601a15fccf6ff02f1249456b62c03d3818f7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=127.1MiB
	    disk mean=9.1MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:42 scheduler task ae67c986 (flow c86b117f): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s100.tar.gz resources {}
2021/07/08 17:04:42  ->  n100.r05.s100.Main.cp_out_file c86b117f exec extern s3://niema-test/n100/r05/n100.r05.s100.tar.gz 35.8MiB
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloading (try 0): started
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloading val<.=790ad96e 35.4MiB>
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloading val<.=c619032b 35.4MiB>
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloading list<val<.=e32e9216 35.7MiB> 35.7MiB>
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloaded val<.=790ad96e 35.4MiB>
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloaded val<.=c619032b 35.4MiB>
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloaded list<val<.=e32e9216 35.7MiB> 35.7MiB>
2021/07/08 17:04:42 scheduler task 25b5d38e (flow b7cf4504): unloading (try 0): successful, next state: complete
2021/07/08 17:04:42  <-  n100.r05.s098.Main.out_file b7cf4504 ok     exec 4m59s 35.7MiB
2021/07/08 17:04:42 n100.r05.s098.Main.out_file b7cf4504 n100/r05/n100.r05.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b12f069235d81c85f7b9747f58991e12266abfeec73caa03f0c8ab3fda18d819
	sha256:b7cf45046d0bb31d73a81330e69754ecd7f94bb87b6a7839b3197a38639e52ac
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/25b5d38ea1a4f811c30290670e749656db7c25afe0fa6044cbfabcd6769241df
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s098_output"
	    wget -O "n100.r05.s098_output/n100.r05.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s098_output/n100.r05.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s098_output/n100.r05.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s098_output/n100.r05.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s098_output/n100.r05.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s098_output/n100.r05.s098.reference.fas" "n100.r05.s098_output/n100.r05.s098.fq1.fastq" "n100.r05.s098_output/n100.r05.s098.fq2.fastq" | samtools view -bS - > "n100.r05.s098_output/n100.r05.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s098_output/n100.r05.s098.untrimmed.sorted.bam" "n100.r05.s098_output/n100.r05.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s098_output/n100.r05.s098.untrimmed.sorted.bam" -b "n100.r05.s098_output/n100.r05.s098.primers.bed" -p "n100.r05.s098_output/n100.r05.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" "n100.r05.s098_output/n100.r05.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s098_output/n100.r05.s098.reference.fas" "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" > "n100.r05.s098_output/n100.r05.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s098_output/n100.r05.s098.reference.fas" --call-indels "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" > "n100.r05.s098_output/n100.r05.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s098_output/n100.r05.s098.trimmed.sorted.bam" > "n100.r05.s098_output/n100.r05.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s098_output/n100.r05.s098.depth.txt" "n100.r05.s098_output/n100.r05.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s098_output/n100.r05.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s098_output/n100.r05.s098.reference.fas" | bcftools consensus -m "n100.r05.s098_output/n100.r05.s098.low_depth.tsv" tmp.vcf.gz > "n100.r05.s098_output/n100.r05.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e32e9216c5d04f372a57fbf7b11552b39a21a4f0362226d651a6674e6234e9be 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=127.6MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:04:42 scheduler task 5a1ad6a5 (flow 306f02a8): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s098.tar.gz resources {}
2021/07/08 17:04:42  ->  n100.r05.s098.Main.cp_out_file 306f02a8 exec extern s3://niema-test/n100/r05/n100.r05.s098.tar.gz 35.7MiB
2021/07/08 17:04:42 scheduler task b2310ac6 (flow c488bfe1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:42 scheduler task b2310ac6 (flow c488bfe1): promoting objects (try 0): started
2021/07/08 17:04:43 scheduler task 100c866b (flow 51a58b3b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0fad9d3aa74c38add9b0e1bac82834fcb84b34b55b70fbd0f82e0e1ca2449b6f -> s3://niema-test/n100/r05/n100.r05.s084.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:43  <-  n100.r05.s084.Main.cp_out_file 51a58b3b ok   extern 0s 35.7MiB
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): retrieving diagnostic output (try 0): started
2021/07/08 17:04:43 scheduler task 6fc175cd (flow 9a9c8293): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:594ef5979e8d6c26cdfd12ccc08e2315d8cb85a6211a6179d047cedb7520019d -> s3://niema-test/n100/r05/n100.r05.s071.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:43  <-  n100.r05.s071.Main.cp_out_file 9a9c8293 ok   extern 0s 35.7MiB
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): retrieving result (try 0): started
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): transferring output (try 0): started
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): promoting objects (try 0): started
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): retrieving diagnostic output (try 0): started
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): retrieving result (try 0): started
2021/07/08 17:04:43 scheduler task ae67c986 (flow c86b117f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:51daddecc7670cb4168c7e27023b601a15fccf6ff02f1249456b62c03d3818f7 -> s3://niema-test/n100/r05/n100.r05.s100.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:43  <-  n100.r05.s100.Main.cp_out_file c86b117f ok   extern 0s 35.8MiB
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:43 scheduler task 9cf7175b (flow 03bf8a77): transferring output (try 0): started
2021/07/08 17:04:43 scheduler task 5a1ad6a5 (flow 306f02a8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e32e9216c5d04f372a57fbf7b11552b39a21a4f0362226d651a6674e6234e9be -> s3://niema-test/n100/r05/n100.r05.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:43  <-  n100.r05.s098.Main.cp_out_file 306f02a8 ok   extern 0s 35.7MiB
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloading (try 0): started
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloading list<val<.=a187baaa 35.8MiB> 35.8MiB>
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloading val<.=2f23cb38 35.4MiB>
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloading val<.=6d31bff4 35.4MiB>
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloaded val<.=6d31bff4 35.4MiB>
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloaded list<val<.=a187baaa 35.8MiB> 35.8MiB>
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloaded val<.=2f23cb38 35.4MiB>
2021/07/08 17:04:43 scheduler task b2310ac6 (flow c488bfe1): unloading (try 0): successful, next state: complete
2021/07/08 17:04:43  <-  n100.r05.s028.Main.out_file c488bfe1 ok     exec 5m9s 35.8MiB
2021/07/08 17:04:43 n100.r05.s028.Main.out_file c488bfe1 n100/r05/n100.r05.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cc7d12b3c64d40a9cb314bfea85c508cd0805c71fac83dce1f428d01c8afed6f
	sha256:c488bfe1d21add356d353e735a854eed4396bdb9344182365c66f6ff61085c09
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b2310ac690e12fb33c6a73dac401c5a66debe640496d6f0d0c7c2101f873dc17
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s028_output"
	    wget -O "n100.r05.s028_output/n100.r05.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s028_output/n100.r05.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s028_output/n100.r05.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s028_output/n100.r05.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s028_output/n100.r05.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s028_output/n100.r05.s028.reference.fas" "n100.r05.s028_output/n100.r05.s028.fq1.fastq" "n100.r05.s028_output/n100.r05.s028.fq2.fastq" | samtools view -bS - > "n100.r05.s028_output/n100.r05.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s028_output/n100.r05.s028.untrimmed.sorted.bam" "n100.r05.s028_output/n100.r05.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s028_output/n100.r05.s028.untrimmed.sorted.bam" -b "n100.r05.s028_output/n100.r05.s028.primers.bed" -p "n100.r05.s028_output/n100.r05.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" "n100.r05.s028_output/n100.r05.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s028_output/n100.r05.s028.reference.fas" "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" > "n100.r05.s028_output/n100.r05.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s028_output/n100.r05.s028.reference.fas" --call-indels "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" > "n100.r05.s028_output/n100.r05.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s028_output/n100.r05.s028.trimmed.sorted.bam" > "n100.r05.s028_output/n100.r05.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s028_output/n100.r05.s028.depth.txt" "n100.r05.s028_output/n100.r05.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s028_output/n100.r05.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s028_output/n100.r05.s028.reference.fas" | bcftools consensus -m "n100.r05.s028_output/n100.r05.s028.low_depth.tsv" tmp.vcf.gz > "n100.r05.s028_output/n100.r05.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a187baaa284dec5739cce8f4aa87709e980fed4f6bd65edea4e7f17884dc010d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.8MiB max=128.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:04:43 scheduler task 542f30ef (flow e6332bde): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s028.tar.gz resources {}
2021/07/08 17:04:43  ->  n100.r05.s028.Main.cp_out_file e6332bde exec extern s3://niema-test/n100/r05/n100.r05.s028.tar.gz 35.8MiB
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloading (try 0): started
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloading list<val<.=94afb11f 35.8MiB> 35.8MiB>
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloading val<.=08b96caa 35.4MiB>
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloading val<.=4a9370ab 35.4MiB>
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloaded val<.=08b96caa 35.4MiB>
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloaded val<.=4a9370ab 35.4MiB>
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloaded list<val<.=94afb11f 35.8MiB> 35.8MiB>
2021/07/08 17:04:44 scheduler task 9cf7175b (flow 03bf8a77): unloading (try 0): successful, next state: complete
2021/07/08 17:04:44  <-  n100.r05.s050.Main.out_file 03bf8a77 ok     exec 5m1s 35.8MiB
2021/07/08 17:04:44 n100.r05.s050.Main.out_file 03bf8a77 n100/r05/n100.r05.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:66bb1f30319af0efb4474bab9296adfef72c85eab16629e07b828e15485373dd
	sha256:03bf8a779d1ca9e17b77a9aba85ab92bd6b7d4a70d36f1a611aa531adddc9cfe
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9cf7175bca2ea1b2d6c5f15749337f3b7729061776c0d83ef4a3d2cc90a7041c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s050_output"
	    wget -O "n100.r05.s050_output/n100.r05.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s050_output/n100.r05.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s050_output/n100.r05.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s050_output/n100.r05.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s050_output/n100.r05.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s050_output/n100.r05.s050.reference.fas" "n100.r05.s050_output/n100.r05.s050.fq1.fastq" "n100.r05.s050_output/n100.r05.s050.fq2.fastq" | samtools view -bS - > "n100.r05.s050_output/n100.r05.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s050_output/n100.r05.s050.untrimmed.sorted.bam" "n100.r05.s050_output/n100.r05.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s050_output/n100.r05.s050.untrimmed.sorted.bam" -b "n100.r05.s050_output/n100.r05.s050.primers.bed" -p "n100.r05.s050_output/n100.r05.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" "n100.r05.s050_output/n100.r05.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s050_output/n100.r05.s050.reference.fas" "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" > "n100.r05.s050_output/n100.r05.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s050_output/n100.r05.s050.reference.fas" --call-indels "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" > "n100.r05.s050_output/n100.r05.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s050_output/n100.r05.s050.trimmed.sorted.bam" > "n100.r05.s050_output/n100.r05.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s050_output/n100.r05.s050.depth.txt" "n100.r05.s050_output/n100.r05.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s050_output/n100.r05.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s050_output/n100.r05.s050.reference.fas" | bcftools consensus -m "n100.r05.s050_output/n100.r05.s050.low_depth.tsv" tmp.vcf.gz > "n100.r05.s050_output/n100.r05.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:94afb11fa35ed472b580421c3a6edf0af65158d4030acbd8353234c2f2fa1ddc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=125.7MiB
	    disk mean=8.2MiB max=35.8MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 17:04:44 scheduler task aef13ee6 (flow 8b11d2b4): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s050.tar.gz resources {}
2021/07/08 17:04:44  ->  n100.r05.s050.Main.cp_out_file 8b11d2b4 exec extern s3://niema-test/n100/r05/n100.r05.s050.tar.gz 35.8MiB
2021/07/08 17:04:44 scheduler task 542f30ef (flow e6332bde): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a187baaa284dec5739cce8f4aa87709e980fed4f6bd65edea4e7f17884dc010d -> s3://niema-test/n100/r05/n100.r05.s028.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:44  <-  n100.r05.s028.Main.cp_out_file e6332bde ok   extern 0s 35.8MiB
2021/07/08 17:04:45 scheduler task aef13ee6 (flow 8b11d2b4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:94afb11fa35ed472b580421c3a6edf0af65158d4030acbd8353234c2f2fa1ddc -> s3://niema-test/n100/r05/n100.r05.s050.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:04:45  <-  n100.r05.s050.Main.cp_out_file 8b11d2b4 ok   extern 0s 35.8MiB
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): promoting objects (try 0): started
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): retrieving diagnostic output (try 0): started
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): retrieving result (try 0): started
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:04:46 scheduler task b81e3e3f (flow 7c2051b2): transferring output (try 0): started
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloading (try 0): started
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloading list<val<.=c0f579d7 35.7MiB> 35.7MiB>
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloading val<.=908bb4b5 35.4MiB>
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloading val<.=7e4775e9 35.4MiB>
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloaded list<val<.=c0f579d7 35.7MiB> 35.7MiB>
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloaded val<.=908bb4b5 35.4MiB>
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloaded val<.=7e4775e9 35.4MiB>
2021/07/08 17:04:47 scheduler task b81e3e3f (flow 7c2051b2): unloading (try 0): successful, next state: complete
2021/07/08 17:04:47  <-  n100.r05.s024.Main.out_file 7c2051b2 ok     exec 5m4s 35.7MiB
2021/07/08 17:04:47 n100.r05.s024.Main.out_file 7c2051b2 n100/r05/n100.r05.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3e56d92a496766105f55055b1241241094a8849c901f1087f47ed16686453ad0
	sha256:7c2051b2ada7dca1eff87b47fd014bd15cdc237dfa8000ee39c2d22625d03d9e
	ec2-18-116-10-201.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b81e3e3f58e088388de2a3c6d960e82ec59c9f3b21d5cab1cc634ce53f5db5cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r05.s024_output"
	    wget -O "n100.r05.s024_output/n100.r05.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r05.s024_output/n100.r05.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r05.s024_output/n100.r05.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r05.s024_output/n100.r05.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r05.s024_output/n100.r05.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r05.s024_output/n100.r05.s024.reference.fas" "n100.r05.s024_output/n100.r05.s024.fq1.fastq" "n100.r05.s024_output/n100.r05.s024.fq2.fastq" | samtools view -bS - > "n100.r05.s024_output/n100.r05.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s024_output/n100.r05.s024.untrimmed.sorted.bam" "n100.r05.s024_output/n100.r05.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r05.s024_output/n100.r05.s024.untrimmed.sorted.bam" -b "n100.r05.s024_output/n100.r05.s024.primers.bed" -p "n100.r05.s024_output/n100.r05.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" "n100.r05.s024_output/n100.r05.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r05.s024_output/n100.r05.s024.reference.fas" "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" > "n100.r05.s024_output/n100.r05.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r05.s024_output/n100.r05.s024.reference.fas" --call-indels "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" > "n100.r05.s024_output/n100.r05.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r05.s024_output/n100.r05.s024.trimmed.sorted.bam" > "n100.r05.s024_output/n100.r05.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r05.s024_output/n100.r05.s024.depth.txt" "n100.r05.s024_output/n100.r05.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r05.s024_output/n100.r05.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r05.s024_output/n100.r05.s024.reference.fas" | bcftools consensus -m "n100.r05.s024_output/n100.r05.s024.low_depth.tsv" tmp.vcf.gz > "n100.r05.s024_output/n100.r05.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r05.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c0f579d71e731cb26ea1c9fdf90c45ad528cc4929011835cf7e987ba16a66549 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=130.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:04:47 scheduler task 74fbc1df (flow 67b68c1a): submitted with execconfig extern url s3://niema-test/n100/r05/n100.r05.s024.tar.gz resources {}
2021/07/08 17:04:47  ->  n100.r05.s024.Main.cp_out_file 67b68c1a exec extern s3://niema-test/n100/r05/n100.r05.s024.tar.gz 35.7MiB
2021/07/08 17:04:47 scheduler task 74fbc1df (flow 67b68c1a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c0f579d71e731cb26ea1c9fdf90c45ad528cc4929011835cf7e987ba16a66549 -> s3://niema-test/n100/r05/n100.r05.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:04:47  <-  n100.r05.s024.Main.cp_out_file 67b68c1a ok   extern 0s 35.7MiB
2021/07/08 17:04:48 total n=400 time=6m39s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r05.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s001.Main.fq1         1   0      0B                                                      
	n100.r05.s001.Main.fq2         1   0      0B                                                      
	n100.r05.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s002.Main.fq1         1   0      0B                                                      
	n100.r05.s002.Main.fq2         1   0      0B                                                      
	n100.r05.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s003.Main.fq1         1   0      0B                                                      
	n100.r05.s003.Main.fq2         1   0      0B                                                      
	n100.r05.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s004.Main.fq1         1   0      0B                                                      
	n100.r05.s004.Main.fq2         1   0      0B                                                      
	n100.r05.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s005.Main.fq1         1   0      0B                                                      
	n100.r05.s005.Main.fq2         1   0      0B                                                      
	n100.r05.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s006.Main.fq1         1   0      0B                                                      
	n100.r05.s006.Main.fq2         1   0      0B                                                      
	n100.r05.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s007.Main.fq1         1   0      0B                                                      
	n100.r05.s007.Main.fq2         1   0      0B                                                      
	n100.r05.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s008.Main.fq1         1   0      0B                                                      
	n100.r05.s008.Main.fq2         1   0      0B                                                      
	n100.r05.s008.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s009.Main.fq1         1   0      0B                                                      
	n100.r05.s009.Main.fq2         1   0      0B                                                      
	n100.r05.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s010.Main.fq1         1   0      0B                                                      
	n100.r05.s010.Main.fq2         1   0      0B                                                      
	n100.r05.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s011.Main.fq1         1   0      0B                                                      
	n100.r05.s011.Main.fq2         1   0      0B                                                      
	n100.r05.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s012.Main.fq1         1   0      0B                                                      
	n100.r05.s012.Main.fq2         1   0      0B                                                      
	n100.r05.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s013.Main.fq1         1   0      0B                                                      
	n100.r05.s013.Main.fq2         1   0      0B                                                      
	n100.r05.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s014.Main.fq1         1   0      0B                                                      
	n100.r05.s014.Main.fq2         1   0      0B                                                      
	n100.r05.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s015.Main.fq1         1   0      0B                                                      
	n100.r05.s015.Main.fq2         1   0      0B                                                      
	n100.r05.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s016.Main.fq1         1   0      0B                                                      
	n100.r05.s016.Main.fq2         1   0      0B                                                      
	n100.r05.s016.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s017.Main.fq1         1   0      0B                                                      
	n100.r05.s017.Main.fq2         1   0      0B                                                      
	n100.r05.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s018.Main.fq1         1   0      0B                                                      
	n100.r05.s018.Main.fq2         1   0      0B                                                      
	n100.r05.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s019.Main.fq1         1   0      0B                                                      
	n100.r05.s019.Main.fq2         1   0      0B                                                      
	n100.r05.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s020.Main.fq1         1   0      0B                                                      
	n100.r05.s020.Main.fq2         1   0      0B                                                      
	n100.r05.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s021.Main.fq1         1   0      0B                                                      
	n100.r05.s021.Main.fq2         1   0      0B                                                      
	n100.r05.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s022.Main.fq1         1   0      0B                                                      
	n100.r05.s022.Main.fq2         1   0      0B                                                      
	n100.r05.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s023.Main.fq1         1   0      0B                                                      
	n100.r05.s023.Main.fq2         1   0      0B                                                      
	n100.r05.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s024.Main.fq1         1   0      0B                                                      
	n100.r05.s024.Main.fq2         1   0      0B                                                      
	n100.r05.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s025.Main.fq1         1   0      0B                                                      
	n100.r05.s025.Main.fq2         1   0      0B                                                      
	n100.r05.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s026.Main.fq1         1   0      0B                                                      
	n100.r05.s026.Main.fq2         1   0      0B                                                      
	n100.r05.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s027.Main.fq1         1   0      0B                                                      
	n100.r05.s027.Main.fq2         1   0      0B                                                      
	n100.r05.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s028.Main.fq1         1   0      0B                                                      
	n100.r05.s028.Main.fq2         1   0      0B                                                      
	n100.r05.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s029.Main.fq1         1   0      0B                                                      
	n100.r05.s029.Main.fq2         1   0      0B                                                      
	n100.r05.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s030.Main.fq1         1   0      0B                                                      
	n100.r05.s030.Main.fq2         1   0      0B                                                      
	n100.r05.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s031.Main.fq1         1   0      0B                                                      
	n100.r05.s031.Main.fq2         1   0      0B                                                      
	n100.r05.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s032.Main.fq1         1   0      0B                                                      
	n100.r05.s032.Main.fq2         1   0      0B                                                      
	n100.r05.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s033.Main.fq1         1   0      0B                                                      
	n100.r05.s033.Main.fq2         1   0      0B                                                      
	n100.r05.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s034.Main.fq1         1   0      0B                                                      
	n100.r05.s034.Main.fq2         1   0      0B                                                      
	n100.r05.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s035.Main.fq1         1   0      0B                                                      
	n100.r05.s035.Main.fq2         1   0      0B                                                      
	n100.r05.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s036.Main.fq1         1   0      0B                                                      
	n100.r05.s036.Main.fq2         1   0      0B                                                      
	n100.r05.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s037.Main.fq1         1   0      0B                                                      
	n100.r05.s037.Main.fq2         1   0      0B                                                      
	n100.r05.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s038.Main.fq1         1   0      0B                                                      
	n100.r05.s038.Main.fq2         1   0      0B                                                      
	n100.r05.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s039.Main.fq1         1   0      0B                                                      
	n100.r05.s039.Main.fq2         1   0      0B                                                      
	n100.r05.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s040.Main.fq1         1   0      0B                                                      
	n100.r05.s040.Main.fq2         1   0      0B                                                      
	n100.r05.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s041.Main.fq1         1   0      0B                                                      
	n100.r05.s041.Main.fq2         1   0      0B                                                      
	n100.r05.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s042.Main.fq1         1   0      0B                                                      
	n100.r05.s042.Main.fq2         1   0      0B                                                      
	n100.r05.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s043.Main.fq1         1   0      0B                                                      
	n100.r05.s043.Main.fq2         1   0      0B                                                      
	n100.r05.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s044.Main.fq1         1   0      0B                                                      
	n100.r05.s044.Main.fq2         1   0      0B                                                      
	n100.r05.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s045.Main.fq1         1   0      0B                                                      
	n100.r05.s045.Main.fq2         1   0      0B                                                      
	n100.r05.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s046.Main.fq1         1   0      0B                                                      
	n100.r05.s046.Main.fq2         1   0      0B                                                      
	n100.r05.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s047.Main.fq1         1   0      0B                                                      
	n100.r05.s047.Main.fq2         1   0      0B                                                      
	n100.r05.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s048.Main.fq1         1   0      0B                                                      
	n100.r05.s048.Main.fq2         1   0      0B                                                      
	n100.r05.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s049.Main.fq1         1   0      0B                                                      
	n100.r05.s049.Main.fq2         1   0      0B                                                      
	n100.r05.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s050.Main.fq1         1   0      0B                                                      
	n100.r05.s050.Main.fq2         1   0      0B                                                      
	n100.r05.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s051.Main.fq1         1   0      0B                                                      
	n100.r05.s051.Main.fq2         1   0      0B                                                      
	n100.r05.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s052.Main.fq1         1   0      0B                                                      
	n100.r05.s052.Main.fq2         1   0      0B                                                      
	n100.r05.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s053.Main.fq1         1   0      0B                                                      
	n100.r05.s053.Main.fq2         1   0      0B                                                      
	n100.r05.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s054.Main.fq1         1   0      0B                                                      
	n100.r05.s054.Main.fq2         1   0      0B                                                      
	n100.r05.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s055.Main.fq1         1   0      0B                                                      
	n100.r05.s055.Main.fq2         1   0      0B                                                      
	n100.r05.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s056.Main.fq1         1   0      0B                                                      
	n100.r05.s056.Main.fq2         1   0      0B                                                      
	n100.r05.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s057.Main.fq1         1   0      0B                                                      
	n100.r05.s057.Main.fq2         1   0      0B                                                      
	n100.r05.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s058.Main.fq1         1   0      0B                                                      
	n100.r05.s058.Main.fq2         1   0      0B                                                      
	n100.r05.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s059.Main.fq1         1   0      0B                                                      
	n100.r05.s059.Main.fq2         1   0      0B                                                      
	n100.r05.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s060.Main.fq1         1   0      0B                                                      
	n100.r05.s060.Main.fq2         1   0      0B                                                      
	n100.r05.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s061.Main.fq1         1   0      0B                                                      
	n100.r05.s061.Main.fq2         1   0      0B                                                      
	n100.r05.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s062.Main.fq1         1   0      0B                                                      
	n100.r05.s062.Main.fq2         1   0      0B                                                      
	n100.r05.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s063.Main.fq1         1   0      0B                                                      
	n100.r05.s063.Main.fq2         1   0      0B                                                      
	n100.r05.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s064.Main.fq1         1   0      0B                                                      
	n100.r05.s064.Main.fq2         1   0      0B                                                      
	n100.r05.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s065.Main.fq1         1   0      0B                                                      
	n100.r05.s065.Main.fq2         1   0      0B                                                      
	n100.r05.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s066.Main.fq1         1   0      0B                                                      
	n100.r05.s066.Main.fq2         1   0      0B                                                      
	n100.r05.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s067.Main.fq1         1   0      0B                                                      
	n100.r05.s067.Main.fq2         1   0      0B                                                      
	n100.r05.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s068.Main.fq1         1   0      0B                                                      
	n100.r05.s068.Main.fq2         1   0      0B                                                      
	n100.r05.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s069.Main.fq1         1   0      0B                                                      
	n100.r05.s069.Main.fq2         1   0      0B                                                      
	n100.r05.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s070.Main.fq1         1   0      0B                                                      
	n100.r05.s070.Main.fq2         1   0      0B                                                      
	n100.r05.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s071.Main.fq1         1   0      0B                                                      
	n100.r05.s071.Main.fq2         1   0      0B                                                      
	n100.r05.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s072.Main.fq1         1   0      0B                                                      
	n100.r05.s072.Main.fq2         1   0      0B                                                      
	n100.r05.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s073.Main.fq1         1   0      0B                                                      
	n100.r05.s073.Main.fq2         1   0      0B                                                      
	n100.r05.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s074.Main.fq1         1   0      0B                                                      
	n100.r05.s074.Main.fq2         1   0      0B                                                      
	n100.r05.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s075.Main.fq1         1   0      0B                                                      
	n100.r05.s075.Main.fq2         1   0      0B                                                      
	n100.r05.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s076.Main.fq1         1   0      0B                                                      
	n100.r05.s076.Main.fq2         1   0      0B                                                      
	n100.r05.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s077.Main.fq1         1   0      0B                                                      
	n100.r05.s077.Main.fq2         1   0      0B                                                      
	n100.r05.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s078.Main.fq1         1   0      0B                                                      
	n100.r05.s078.Main.fq2         1   0      0B                                                      
	n100.r05.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s079.Main.fq1         1   0      0B                                                      
	n100.r05.s079.Main.fq2         1   0      0B                                                      
	n100.r05.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s080.Main.fq1         1   0      0B                                                      
	n100.r05.s080.Main.fq2         1   0      0B                                                      
	n100.r05.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s081.Main.fq1         1   0      0B                                                      
	n100.r05.s081.Main.fq2         1   0      0B                                                      
	n100.r05.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s082.Main.fq1         1   0      0B                                                      
	n100.r05.s082.Main.fq2         1   0      0B                                                      
	n100.r05.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s083.Main.fq1         1   0      0B                                                      
	n100.r05.s083.Main.fq2         1   0      0B                                                      
	n100.r05.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s084.Main.fq1         1   0      0B                                                      
	n100.r05.s084.Main.fq2         1   0      0B                                                      
	n100.r05.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s085.Main.fq1         1   0      0B                                                      
	n100.r05.s085.Main.fq2         1   0      0B                                                      
	n100.r05.s085.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s086.Main.fq1         1   0      0B                                                      
	n100.r05.s086.Main.fq2         1   0      0B                                                      
	n100.r05.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s087.Main.fq1         1   0      0B                                                      
	n100.r05.s087.Main.fq2         1   0      0B                                                      
	n100.r05.s087.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s088.Main.fq1         1   0      0B                                                      
	n100.r05.s088.Main.fq2         1   0      0B                                                      
	n100.r05.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s089.Main.fq1         1   0      0B                                                      
	n100.r05.s089.Main.fq2         1   0      0B                                                      
	n100.r05.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s090.Main.fq1         1   0      0B                                                      
	n100.r05.s090.Main.fq2         1   0      0B                                                      
	n100.r05.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s091.Main.fq1         1   0      0B                                                      
	n100.r05.s091.Main.fq2         1   0      0B                                                      
	n100.r05.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s092.Main.fq1         1   0      0B                                                      
	n100.r05.s092.Main.fq2         1   0      0B                                                      
	n100.r05.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s093.Main.fq1         1   0      0B                                                      
	n100.r05.s093.Main.fq2         1   0      0B                                                      
	n100.r05.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s094.Main.fq1         1   0      0B                                                      
	n100.r05.s094.Main.fq2         1   0      0B                                                      
	n100.r05.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s095.Main.fq1         1   0      0B                                                      
	n100.r05.s095.Main.fq2         1   0      0B                                                      
	n100.r05.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s096.Main.fq1         1   0      0B                                                      
	n100.r05.s096.Main.fq2         1   0      0B                                                      
	n100.r05.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s097.Main.fq1         1   0      0B                                                      
	n100.r05.s097.Main.fq2         1   0      0B                                                      
	n100.r05.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s098.Main.fq1         1   0      0B                                                      
	n100.r05.s098.Main.fq2         1   0      0B                                                      
	n100.r05.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s099.Main.fq1         1   0      0B                                                      
	n100.r05.s099.Main.fq2         1   0      0B                                                      
	n100.r05.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r05.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r05.s100.Main.fq1         1   0      0B                                                      
	n100.r05.s100.Main.fq2         1   0      0B                                                      
	n100.r05.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r05.s001.Main.out_file, n100.r05.s002.Main.out_file, n100.r05.s003.Main.out_file, n100.r05.s004.Main.out_file, n100.r05.s005.Main.out_file, n100.r05.s006.Main.out_file, n100.r05.s007.Main.out_file, n100.r05.s008.Main.out_file, n100.r05.s009.Main.out_file, n100.r05.s010.Main.out_file, n100.r05.s011.Main.out_file, n100.r05.s012.Main.out_file, n100.r05.s013.Main.out_file, n100.r05.s014.Main.out_file, n100.r05.s015.Main.out_file, n100.r05.s016.Main.out_file, n100.r05.s017.Main.out_file, n100.r05.s018.Main.out_file, n100.r05.s019.Main.out_file, n100.r05.s020.Main.out_file, n100.r05.s021.Main.out_file, n100.r05.s022.Main.out_file, n100.r05.s023.Main.out_file, n100.r05.s024.Main.out_file, n100.r05.s025.Main.out_file, n100.r05.s026.Main.out_file, n100.r05.s027.Main.out_file, n100.r05.s028.Main.out_file, n100.r05.s029.Main.out_file, n100.r05.s030.Main.out_file, n100.r05.s031.Main.out_file, n100.r05.s032.Main.out_file, n100.r05.s033.Main.out_file, n100.r05.s034.Main.out_file, n100.r05.s035.Main.out_file, n100.r05.s036.Main.out_file, n100.r05.s037.Main.out_file, n100.r05.s038.Main.out_file, n100.r05.s039.Main.out_file, n100.r05.s040.Main.out_file, n100.r05.s041.Main.out_file, n100.r05.s042.Main.out_file, n100.r05.s043.Main.out_file, n100.r05.s044.Main.out_file, n100.r05.s045.Main.out_file, n100.r05.s046.Main.out_file, n100.r05.s047.Main.out_file, n100.r05.s048.Main.out_file, n100.r05.s049.Main.out_file, n100.r05.s050.Main.out_file, n100.r05.s051.Main.out_file, n100.r05.s052.Main.out_file, n100.r05.s053.Main.out_file, n100.r05.s054.Main.out_file, n100.r05.s055.Main.out_file, n100.r05.s056.Main.out_file, n100.r05.s057.Main.out_file, n100.r05.s058.Main.out_file, n100.r05.s059.Main.out_file, n100.r05.s060.Main.out_file, n100.r05.s061.Main.out_file, n100.r05.s062.Main.out_file, n100.r05.s063.Main.out_file, n100.r05.s064.Main.out_file, n100.r05.s065.Main.out_file, n100.r05.s066.Main.out_file, n100.r05.s067.Main.out_file, n100.r05.s068.Main.out_file, n100.r05.s069.Main.out_file, n100.r05.s070.Main.out_file, n100.r05.s071.Main.out_file, n100.r05.s072.Main.out_file, n100.r05.s073.Main.out_file, n100.r05.s074.Main.out_file, n100.r05.s075.Main.out_file, n100.r05.s076.Main.out_file, n100.r05.s077.Main.out_file, n100.r05.s078.Main.out_file, n100.r05.s079.Main.out_file, n100.r05.s080.Main.out_file, n100.r05.s081.Main.out_file, n100.r05.s082.Main.out_file, n100.r05.s083.Main.out_file, n100.r05.s084.Main.out_file, n100.r05.s085.Main.out_file, n100.r05.s086.Main.out_file, n100.r05.s087.Main.out_file, n100.r05.s088.Main.out_file, n100.r05.s089.Main.out_file, n100.r05.s090.Main.out_file, n100.r05.s091.Main.out_file, n100.r05.s092.Main.out_file, n100.r05.s093.Main.out_file, n100.r05.s094.Main.out_file, n100.r05.s095.Main.out_file, n100.r05.s096.Main.out_file, n100.r05.s097.Main.out_file, n100.r05.s098.Main.out_file, n100.r05.s099.Main.out_file, n100.r05.s100.Main.out_file
2021/07/08 17:04:48 result: [val<.=bb63e023 35.7MiB>, val<.=91aa0751 35.7MiB>, val<.=8af3a8f1 35.7MiB>, val<.=3dacec89 35.7MiB>, val<.=68388ec8 35.7MiB>, val<.=98e3266b 35.7MiB>, val<.=2a342892 35.8MiB>, val<.=b0c6bff9 35.7MiB>, val<.=9a98be3a 35.8MiB>, val<.=9c5fce16 35.8MiB>, val<.=8efa81b8 35.7MiB>, val<.=ffe798f7 35.8MiB>, val<.=5930f40e 35.8MiB>, val<.=85717843 35.7MiB>, val<.=d3ea8acb 35.7MiB>, val<.=f8e7ac21 35.7MiB>, val<.=4b74f43f 35.7MiB>, val<.=fdd88953 35.7MiB>, val<.=599bc3d0 35.7MiB>, val<.=559e8720 35.8MiB>, val<.=d69e431b 35.7MiB>, val<.=ed532d94 35.8MiB>, val<.=e7cb6f81 35.7MiB>, val<.=c0f579d7 35.7MiB>, val<.=480caf24 35.7MiB>, val<.=2e4e8582 35.7MiB>, val<.=ba74b4c1 35.7MiB>, val<.=a187baaa 35.8MiB>, val<.=53aa970e 35.7MiB>, val<.=9804db59 35.7MiB>, val<.=a2b45a17 35.8MiB>, val<.=5f29508e 35.8MiB>, val<.=b0fccbd1 35.7MiB>, val<.=d7fe5fc7 35.7MiB>, val<.=35304939 35.7MiB>, val<.=8868beda 35.7MiB>, val<.=70f261f4 35.7MiB>, val<.=4ff7c931 35.7MiB>, val<.=5fa37818 35.8MiB>, val<.=c68a2819 35.7MiB>, val<.=5e6fe0a6 35.7MiB>, val<.=396d4eae 35.8MiB>, val<.=2f096043 35.7MiB>, val<.=170eb531 35.8MiB>, val<.=799491fa 35.8MiB>, val<.=d88906c9 35.8MiB>, val<.=24288298 35.8MiB>, val<.=34679790 35.7MiB>, val<.=f92cf09f 35.8MiB>, val<.=94afb11f 35.8MiB>, val<.=083b85fb 35.7MiB>, val<.=5896b80a 35.7MiB>, val<.=9c2bc08c 35.8MiB>, val<.=2bd7073b 35.7MiB>, val<.=a259118a 35.8MiB>, val<.=c1b8d296 35.8MiB>, val<.=08629030 35.8MiB>, val<.=d6be1d00 35.7MiB>, val<.=eeae43df 35.8MiB>, val<.=65140c4b 35.7MiB>, val<.=7a3d4592 35.7MiB>, val<.=686f933f 35.7MiB>, val<.=eedf5bb4 35.7MiB>, val<.=175073e2 35.8MiB>, val<.=0e8b38a3 35.7MiB>, val<.=873dff66 35.8MiB>, val<.=9f11e2ec 35.7MiB>, val<.=f69d896e 35.7MiB>, val<.=404ce038 35.7MiB>, val<.=71fbdb89 35.7MiB>, val<.=594ef597 35.7MiB>, val<.=6cdf66d2 35.7MiB>, val<.=07f7f509 35.7MiB>, val<.=d8426055 35.7MiB>, val<.=05d20d52 35.7MiB>, val<.=addf1e55 35.7MiB>, val<.=cc78b609 35.8MiB>, val<.=d0f22df3 35.8MiB>, val<.=adb3d6e0 35.8MiB>, val<.=7bd6c253 35.8MiB>, val<.=e145fb7b 35.7MiB>, val<.=b39010ef 35.7MiB>, val<.=76f25bb6 35.8MiB>, val<.=0fad9d3a 35.7MiB>, val<.=28abd702 35.7MiB>, val<.=eae9dd42 35.7MiB>, val<.=474cc708 35.7MiB>, val<.=af617970 35.7MiB>, val<.=92f62024 35.7MiB>, val<.=fbd7cb3f 35.7MiB>, val<.=8dc9aeea 35.7MiB>, val<.=f0b64cde 35.7MiB>, val<.=8ae7d7d5 35.7MiB>, val<.=a69d3727 35.7MiB>, val<.=45c4ba20 35.7MiB>, val<.=e4ee8d88 35.8MiB>, val<.=ba4c88a4 35.7MiB>, val<.=e32e9216 35.7MiB>, val<.=8c50bde9 35.7MiB>, val<.=51daddec 35.8MiB>]
2021/07/08 17:04:48 waiting for 1 background tasks to complete
