2021/07/08 16:35:51 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 16:35:51 run ID: a1d04ea2
2021/07/08 16:35:51 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r02.rf
	(no params)
	(no arguments)
2021/07/08 16:35:51 Trace: /home/niema/.reflow/runs/a1d04ea28fd39a5f8158b250cf73affdf84e4d40350e97274605b119e851b18b.trace
2021/07/08 16:35:51 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 16:35:51 scheduler task 9bffd4af (flow 8c3fef49): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s065_output\"\n        wget -O \"n100.r02.s065_output/n100.r02.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s065_output/n100.r02.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s065_output/n100.r02.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s065_output/n100.r02.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s065_output/n100.r02.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s065_output/n100.r02.s065.reference.fas\" \"n100.r02.s065_output/n100.r02.s065.fq1.fastq\" \"n100.r02.s065_output/n100.r02.s065.fq2.fastq\" | samtools view -bS - > \"n100.r02.s065_output/n100.r02.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s065_output/n100.r02.s065.untrimmed.sorted.bam\" \"n100.r02.s065_output/n100.r02.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s065_output/n100.r02.s065.untrimmed.sorted.bam\" -b \"n100.r02.s065_output/n100.r02.s065.primers.bed\" -p \"n100.r02.s065_output/n100.r02.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam\" \"n100.r02.s065_output/n100.r02.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s065_output/n100.r02.s065.reference.fas\" \"n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam\" > \"n100.r02.s065_output/n100.r02.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s065_output/n100.r02.s065.reference.fas\" --call-indels \"n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam\" > \"n100.r02.s065_output/n100.r02.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam\" > \"n100.r02.s065_output/n100.r02.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s065_output/n100.r02.s065.depth.txt\" \"n100.r02.s065_output/n100.r02.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s065_output/n100.r02.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s065_output/n100.r02.s065.reference.fas\" | bcftools consensus -m \"n100.r02.s065_output/n100.r02.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s065_output/n100.r02.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 055d7a57 (flow 2ca4d3a5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s064_output\"\n        wget -O \"n100.r02.s064_output/n100.r02.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s064_output/n100.r02.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s064_output/n100.r02.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s064_output/n100.r02.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s064_output/n100.r02.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s064_output/n100.r02.s064.reference.fas\" \"n100.r02.s064_output/n100.r02.s064.fq1.fastq\" \"n100.r02.s064_output/n100.r02.s064.fq2.fastq\" | samtools view -bS - > \"n100.r02.s064_output/n100.r02.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s064_output/n100.r02.s064.untrimmed.sorted.bam\" \"n100.r02.s064_output/n100.r02.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s064_output/n100.r02.s064.untrimmed.sorted.bam\" -b \"n100.r02.s064_output/n100.r02.s064.primers.bed\" -p \"n100.r02.s064_output/n100.r02.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam\" \"n100.r02.s064_output/n100.r02.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s064_output/n100.r02.s064.reference.fas\" \"n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam\" > \"n100.r02.s064_output/n100.r02.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s064_output/n100.r02.s064.reference.fas\" --call-indels \"n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam\" > \"n100.r02.s064_output/n100.r02.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam\" > \"n100.r02.s064_output/n100.r02.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s064_output/n100.r02.s064.depth.txt\" \"n100.r02.s064_output/n100.r02.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s064_output/n100.r02.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s064_output/n100.r02.s064.reference.fas\" | bcftools consensus -m \"n100.r02.s064_output/n100.r02.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s064_output/n100.r02.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 73f9bb6c (flow 958202cb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s036_output\"\n        wget -O \"n100.r02.s036_output/n100.r02.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s036_output/n100.r02.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s036_output/n100.r02.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s036_output/n100.r02.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s036_output/n100.r02.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s036_output/n100.r02.s036.reference.fas\" \"n100.r02.s036_output/n100.r02.s036.fq1.fastq\" \"n100.r02.s036_output/n100.r02.s036.fq2.fastq\" | samtools view -bS - > \"n100.r02.s036_output/n100.r02.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s036_output/n100.r02.s036.untrimmed.sorted.bam\" \"n100.r02.s036_output/n100.r02.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s036_output/n100.r02.s036.untrimmed.sorted.bam\" -b \"n100.r02.s036_output/n100.r02.s036.primers.bed\" -p \"n100.r02.s036_output/n100.r02.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam\" \"n100.r02.s036_output/n100.r02.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s036_output/n100.r02.s036.reference.fas\" \"n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam\" > \"n100.r02.s036_output/n100.r02.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s036_output/n100.r02.s036.reference.fas\" --call-indels \"n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam\" > \"n100.r02.s036_output/n100.r02.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam\" > \"n100.r02.s036_output/n100.r02.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s036_output/n100.r02.s036.depth.txt\" \"n100.r02.s036_output/n100.r02.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s036_output/n100.r02.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s036_output/n100.r02.s036.reference.fas\" | bcftools consensus -m \"n100.r02.s036_output/n100.r02.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s036_output/n100.r02.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 4e6261f7 (flow 31db7c1d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s043_output\"\n        wget -O \"n100.r02.s043_output/n100.r02.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s043_output/n100.r02.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s043_output/n100.r02.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s043_output/n100.r02.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s043_output/n100.r02.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s043_output/n100.r02.s043.reference.fas\" \"n100.r02.s043_output/n100.r02.s043.fq1.fastq\" \"n100.r02.s043_output/n100.r02.s043.fq2.fastq\" | samtools view -bS - > \"n100.r02.s043_output/n100.r02.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s043_output/n100.r02.s043.untrimmed.sorted.bam\" \"n100.r02.s043_output/n100.r02.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s043_output/n100.r02.s043.untrimmed.sorted.bam\" -b \"n100.r02.s043_output/n100.r02.s043.primers.bed\" -p \"n100.r02.s043_output/n100.r02.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam\" \"n100.r02.s043_output/n100.r02.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s043_output/n100.r02.s043.reference.fas\" \"n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam\" > \"n100.r02.s043_output/n100.r02.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s043_output/n100.r02.s043.reference.fas\" --call-indels \"n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam\" > \"n100.r02.s043_output/n100.r02.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam\" > \"n100.r02.s043_output/n100.r02.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s043_output/n100.r02.s043.depth.txt\" \"n100.r02.s043_output/n100.r02.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s043_output/n100.r02.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s043_output/n100.r02.s043.reference.fas\" | bcftools consensus -m \"n100.r02.s043_output/n100.r02.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s043_output/n100.r02.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 79554f4f (flow 08173ef0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s008_output\"\n        wget -O \"n100.r02.s008_output/n100.r02.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s008_output/n100.r02.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s008_output/n100.r02.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s008_output/n100.r02.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s008_output/n100.r02.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s008_output/n100.r02.s008.reference.fas\" \"n100.r02.s008_output/n100.r02.s008.fq1.fastq\" \"n100.r02.s008_output/n100.r02.s008.fq2.fastq\" | samtools view -bS - > \"n100.r02.s008_output/n100.r02.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s008_output/n100.r02.s008.untrimmed.sorted.bam\" \"n100.r02.s008_output/n100.r02.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s008_output/n100.r02.s008.untrimmed.sorted.bam\" -b \"n100.r02.s008_output/n100.r02.s008.primers.bed\" -p \"n100.r02.s008_output/n100.r02.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam\" \"n100.r02.s008_output/n100.r02.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s008_output/n100.r02.s008.reference.fas\" \"n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam\" > \"n100.r02.s008_output/n100.r02.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s008_output/n100.r02.s008.reference.fas\" --call-indels \"n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam\" > \"n100.r02.s008_output/n100.r02.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam\" > \"n100.r02.s008_output/n100.r02.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s008_output/n100.r02.s008.depth.txt\" \"n100.r02.s008_output/n100.r02.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s008_output/n100.r02.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s008_output/n100.r02.s008.reference.fas\" | bcftools consensus -m \"n100.r02.s008_output/n100.r02.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s008_output/n100.r02.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 3dadedef (flow 9abe98a2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s014_output\"\n        wget -O \"n100.r02.s014_output/n100.r02.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s014_output/n100.r02.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s014_output/n100.r02.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s014_output/n100.r02.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s014_output/n100.r02.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s014_output/n100.r02.s014.reference.fas\" \"n100.r02.s014_output/n100.r02.s014.fq1.fastq\" \"n100.r02.s014_output/n100.r02.s014.fq2.fastq\" | samtools view -bS - > \"n100.r02.s014_output/n100.r02.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s014_output/n100.r02.s014.untrimmed.sorted.bam\" \"n100.r02.s014_output/n100.r02.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s014_output/n100.r02.s014.untrimmed.sorted.bam\" -b \"n100.r02.s014_output/n100.r02.s014.primers.bed\" -p \"n100.r02.s014_output/n100.r02.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam\" \"n100.r02.s014_output/n100.r02.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s014_output/n100.r02.s014.reference.fas\" \"n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam\" > \"n100.r02.s014_output/n100.r02.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s014_output/n100.r02.s014.reference.fas\" --call-indels \"n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam\" > \"n100.r02.s014_output/n100.r02.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam\" > \"n100.r02.s014_output/n100.r02.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s014_output/n100.r02.s014.depth.txt\" \"n100.r02.s014_output/n100.r02.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s014_output/n100.r02.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s014_output/n100.r02.s014.reference.fas\" | bcftools consensus -m \"n100.r02.s014_output/n100.r02.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s014_output/n100.r02.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task d3ed6aad (flow dcb88340): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s057_output\"\n        wget -O \"n100.r02.s057_output/n100.r02.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s057_output/n100.r02.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s057_output/n100.r02.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s057_output/n100.r02.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s057_output/n100.r02.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s057_output/n100.r02.s057.reference.fas\" \"n100.r02.s057_output/n100.r02.s057.fq1.fastq\" \"n100.r02.s057_output/n100.r02.s057.fq2.fastq\" | samtools view -bS - > \"n100.r02.s057_output/n100.r02.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s057_output/n100.r02.s057.untrimmed.sorted.bam\" \"n100.r02.s057_output/n100.r02.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s057_output/n100.r02.s057.untrimmed.sorted.bam\" -b \"n100.r02.s057_output/n100.r02.s057.primers.bed\" -p \"n100.r02.s057_output/n100.r02.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam\" \"n100.r02.s057_output/n100.r02.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s057_output/n100.r02.s057.reference.fas\" \"n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam\" > \"n100.r02.s057_output/n100.r02.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s057_output/n100.r02.s057.reference.fas\" --call-indels \"n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam\" > \"n100.r02.s057_output/n100.r02.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam\" > \"n100.r02.s057_output/n100.r02.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s057_output/n100.r02.s057.depth.txt\" \"n100.r02.s057_output/n100.r02.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s057_output/n100.r02.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s057_output/n100.r02.s057.reference.fas\" | bcftools consensus -m \"n100.r02.s057_output/n100.r02.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s057_output/n100.r02.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 5ed6a8f0 (flow d1a20a99): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s075_output\"\n        wget -O \"n100.r02.s075_output/n100.r02.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s075_output/n100.r02.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s075_output/n100.r02.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s075_output/n100.r02.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s075_output/n100.r02.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s075_output/n100.r02.s075.reference.fas\" \"n100.r02.s075_output/n100.r02.s075.fq1.fastq\" \"n100.r02.s075_output/n100.r02.s075.fq2.fastq\" | samtools view -bS - > \"n100.r02.s075_output/n100.r02.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s075_output/n100.r02.s075.untrimmed.sorted.bam\" \"n100.r02.s075_output/n100.r02.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s075_output/n100.r02.s075.untrimmed.sorted.bam\" -b \"n100.r02.s075_output/n100.r02.s075.primers.bed\" -p \"n100.r02.s075_output/n100.r02.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam\" \"n100.r02.s075_output/n100.r02.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s075_output/n100.r02.s075.reference.fas\" \"n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam\" > \"n100.r02.s075_output/n100.r02.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s075_output/n100.r02.s075.reference.fas\" --call-indels \"n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam\" > \"n100.r02.s075_output/n100.r02.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam\" > \"n100.r02.s075_output/n100.r02.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s075_output/n100.r02.s075.depth.txt\" \"n100.r02.s075_output/n100.r02.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s075_output/n100.r02.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s075_output/n100.r02.s075.reference.fas\" | bcftools consensus -m \"n100.r02.s075_output/n100.r02.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s075_output/n100.r02.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 67f058e0 (flow 5ea8511d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s026_output\"\n        wget -O \"n100.r02.s026_output/n100.r02.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s026_output/n100.r02.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s026_output/n100.r02.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s026_output/n100.r02.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s026_output/n100.r02.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s026_output/n100.r02.s026.reference.fas\" \"n100.r02.s026_output/n100.r02.s026.fq1.fastq\" \"n100.r02.s026_output/n100.r02.s026.fq2.fastq\" | samtools view -bS - > \"n100.r02.s026_output/n100.r02.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s026_output/n100.r02.s026.untrimmed.sorted.bam\" \"n100.r02.s026_output/n100.r02.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s026_output/n100.r02.s026.untrimmed.sorted.bam\" -b \"n100.r02.s026_output/n100.r02.s026.primers.bed\" -p \"n100.r02.s026_output/n100.r02.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam\" \"n100.r02.s026_output/n100.r02.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s026_output/n100.r02.s026.reference.fas\" \"n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam\" > \"n100.r02.s026_output/n100.r02.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s026_output/n100.r02.s026.reference.fas\" --call-indels \"n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam\" > \"n100.r02.s026_output/n100.r02.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam\" > \"n100.r02.s026_output/n100.r02.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s026_output/n100.r02.s026.depth.txt\" \"n100.r02.s026_output/n100.r02.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s026_output/n100.r02.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s026_output/n100.r02.s026.reference.fas\" | bcftools consensus -m \"n100.r02.s026_output/n100.r02.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s026_output/n100.r02.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 04f3dd11 (flow 9cfb1911): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s025_output\"\n        wget -O \"n100.r02.s025_output/n100.r02.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s025_output/n100.r02.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s025_output/n100.r02.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s025_output/n100.r02.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s025_output/n100.r02.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s025_output/n100.r02.s025.reference.fas\" \"n100.r02.s025_output/n100.r02.s025.fq1.fastq\" \"n100.r02.s025_output/n100.r02.s025.fq2.fastq\" | samtools view -bS - > \"n100.r02.s025_output/n100.r02.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s025_output/n100.r02.s025.untrimmed.sorted.bam\" \"n100.r02.s025_output/n100.r02.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s025_output/n100.r02.s025.untrimmed.sorted.bam\" -b \"n100.r02.s025_output/n100.r02.s025.primers.bed\" -p \"n100.r02.s025_output/n100.r02.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam\" \"n100.r02.s025_output/n100.r02.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s025_output/n100.r02.s025.reference.fas\" \"n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam\" > \"n100.r02.s025_output/n100.r02.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s025_output/n100.r02.s025.reference.fas\" --call-indels \"n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam\" > \"n100.r02.s025_output/n100.r02.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam\" > \"n100.r02.s025_output/n100.r02.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s025_output/n100.r02.s025.depth.txt\" \"n100.r02.s025_output/n100.r02.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s025_output/n100.r02.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s025_output/n100.r02.s025.reference.fas\" | bcftools consensus -m \"n100.r02.s025_output/n100.r02.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s025_output/n100.r02.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task c73cacdd (flow c37abb9e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s012_output\"\n        wget -O \"n100.r02.s012_output/n100.r02.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s012_output/n100.r02.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s012_output/n100.r02.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s012_output/n100.r02.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s012_output/n100.r02.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s012_output/n100.r02.s012.reference.fas\" \"n100.r02.s012_output/n100.r02.s012.fq1.fastq\" \"n100.r02.s012_output/n100.r02.s012.fq2.fastq\" | samtools view -bS - > \"n100.r02.s012_output/n100.r02.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s012_output/n100.r02.s012.untrimmed.sorted.bam\" \"n100.r02.s012_output/n100.r02.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s012_output/n100.r02.s012.untrimmed.sorted.bam\" -b \"n100.r02.s012_output/n100.r02.s012.primers.bed\" -p \"n100.r02.s012_output/n100.r02.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam\" \"n100.r02.s012_output/n100.r02.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s012_output/n100.r02.s012.reference.fas\" \"n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam\" > \"n100.r02.s012_output/n100.r02.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s012_output/n100.r02.s012.reference.fas\" --call-indels \"n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam\" > \"n100.r02.s012_output/n100.r02.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam\" > \"n100.r02.s012_output/n100.r02.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s012_output/n100.r02.s012.depth.txt\" \"n100.r02.s012_output/n100.r02.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s012_output/n100.r02.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s012_output/n100.r02.s012.reference.fas\" | bcftools consensus -m \"n100.r02.s012_output/n100.r02.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s012_output/n100.r02.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task cafad4ba (flow 5063d2f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s011_output\"\n        wget -O \"n100.r02.s011_output/n100.r02.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s011_output/n100.r02.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s011_output/n100.r02.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s011_output/n100.r02.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s011_output/n100.r02.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s011_output/n100.r02.s011.reference.fas\" \"n100.r02.s011_output/n100.r02.s011.fq1.fastq\" \"n100.r02.s011_output/n100.r02.s011.fq2.fastq\" | samtools view -bS - > \"n100.r02.s011_output/n100.r02.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s011_output/n100.r02.s011.untrimmed.sorted.bam\" \"n100.r02.s011_output/n100.r02.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s011_output/n100.r02.s011.untrimmed.sorted.bam\" -b \"n100.r02.s011_output/n100.r02.s011.primers.bed\" -p \"n100.r02.s011_output/n100.r02.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam\" \"n100.r02.s011_output/n100.r02.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s011_output/n100.r02.s011.reference.fas\" \"n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam\" > \"n100.r02.s011_output/n100.r02.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s011_output/n100.r02.s011.reference.fas\" --call-indels \"n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam\" > \"n100.r02.s011_output/n100.r02.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam\" > \"n100.r02.s011_output/n100.r02.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s011_output/n100.r02.s011.depth.txt\" \"n100.r02.s011_output/n100.r02.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s011_output/n100.r02.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s011_output/n100.r02.s011.reference.fas\" | bcftools consensus -m \"n100.r02.s011_output/n100.r02.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s011_output/n100.r02.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task d8e5f7d3 (flow 7ba184b6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s029_output\"\n        wget -O \"n100.r02.s029_output/n100.r02.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s029_output/n100.r02.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s029_output/n100.r02.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s029_output/n100.r02.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s029_output/n100.r02.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s029_output/n100.r02.s029.reference.fas\" \"n100.r02.s029_output/n100.r02.s029.fq1.fastq\" \"n100.r02.s029_output/n100.r02.s029.fq2.fastq\" | samtools view -bS - > \"n100.r02.s029_output/n100.r02.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s029_output/n100.r02.s029.untrimmed.sorted.bam\" \"n100.r02.s029_output/n100.r02.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s029_output/n100.r02.s029.untrimmed.sorted.bam\" -b \"n100.r02.s029_output/n100.r02.s029.primers.bed\" -p \"n100.r02.s029_output/n100.r02.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam\" \"n100.r02.s029_output/n100.r02.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s029_output/n100.r02.s029.reference.fas\" \"n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam\" > \"n100.r02.s029_output/n100.r02.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s029_output/n100.r02.s029.reference.fas\" --call-indels \"n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam\" > \"n100.r02.s029_output/n100.r02.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam\" > \"n100.r02.s029_output/n100.r02.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s029_output/n100.r02.s029.depth.txt\" \"n100.r02.s029_output/n100.r02.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s029_output/n100.r02.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s029_output/n100.r02.s029.reference.fas\" | bcftools consensus -m \"n100.r02.s029_output/n100.r02.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s029_output/n100.r02.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 83ad0a3c (flow 244ee460): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s067_output\"\n        wget -O \"n100.r02.s067_output/n100.r02.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s067_output/n100.r02.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s067_output/n100.r02.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s067_output/n100.r02.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s067_output/n100.r02.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s067_output/n100.r02.s067.reference.fas\" \"n100.r02.s067_output/n100.r02.s067.fq1.fastq\" \"n100.r02.s067_output/n100.r02.s067.fq2.fastq\" | samtools view -bS - > \"n100.r02.s067_output/n100.r02.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s067_output/n100.r02.s067.untrimmed.sorted.bam\" \"n100.r02.s067_output/n100.r02.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s067_output/n100.r02.s067.untrimmed.sorted.bam\" -b \"n100.r02.s067_output/n100.r02.s067.primers.bed\" -p \"n100.r02.s067_output/n100.r02.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam\" \"n100.r02.s067_output/n100.r02.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s067_output/n100.r02.s067.reference.fas\" \"n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam\" > \"n100.r02.s067_output/n100.r02.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s067_output/n100.r02.s067.reference.fas\" --call-indels \"n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam\" > \"n100.r02.s067_output/n100.r02.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam\" > \"n100.r02.s067_output/n100.r02.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s067_output/n100.r02.s067.depth.txt\" \"n100.r02.s067_output/n100.r02.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s067_output/n100.r02.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s067_output/n100.r02.s067.reference.fas\" | bcftools consensus -m \"n100.r02.s067_output/n100.r02.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s067_output/n100.r02.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 080dc6e3 (flow a028a3dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s006_output\"\n        wget -O \"n100.r02.s006_output/n100.r02.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s006_output/n100.r02.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s006_output/n100.r02.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s006_output/n100.r02.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s006_output/n100.r02.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s006_output/n100.r02.s006.reference.fas\" \"n100.r02.s006_output/n100.r02.s006.fq1.fastq\" \"n100.r02.s006_output/n100.r02.s006.fq2.fastq\" | samtools view -bS - > \"n100.r02.s006_output/n100.r02.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s006_output/n100.r02.s006.untrimmed.sorted.bam\" \"n100.r02.s006_output/n100.r02.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s006_output/n100.r02.s006.untrimmed.sorted.bam\" -b \"n100.r02.s006_output/n100.r02.s006.primers.bed\" -p \"n100.r02.s006_output/n100.r02.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam\" \"n100.r02.s006_output/n100.r02.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s006_output/n100.r02.s006.reference.fas\" \"n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam\" > \"n100.r02.s006_output/n100.r02.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s006_output/n100.r02.s006.reference.fas\" --call-indels \"n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam\" > \"n100.r02.s006_output/n100.r02.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam\" > \"n100.r02.s006_output/n100.r02.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s006_output/n100.r02.s006.depth.txt\" \"n100.r02.s006_output/n100.r02.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s006_output/n100.r02.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s006_output/n100.r02.s006.reference.fas\" | bcftools consensus -m \"n100.r02.s006_output/n100.r02.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s006_output/n100.r02.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8e4c2298 (flow 95b427ce): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s077_output\"\n        wget -O \"n100.r02.s077_output/n100.r02.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s077_output/n100.r02.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s077_output/n100.r02.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s077_output/n100.r02.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s077_output/n100.r02.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s077_output/n100.r02.s077.reference.fas\" \"n100.r02.s077_output/n100.r02.s077.fq1.fastq\" \"n100.r02.s077_output/n100.r02.s077.fq2.fastq\" | samtools view -bS - > \"n100.r02.s077_output/n100.r02.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s077_output/n100.r02.s077.untrimmed.sorted.bam\" \"n100.r02.s077_output/n100.r02.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s077_output/n100.r02.s077.untrimmed.sorted.bam\" -b \"n100.r02.s077_output/n100.r02.s077.primers.bed\" -p \"n100.r02.s077_output/n100.r02.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam\" \"n100.r02.s077_output/n100.r02.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s077_output/n100.r02.s077.reference.fas\" \"n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam\" > \"n100.r02.s077_output/n100.r02.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s077_output/n100.r02.s077.reference.fas\" --call-indels \"n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam\" > \"n100.r02.s077_output/n100.r02.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam\" > \"n100.r02.s077_output/n100.r02.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s077_output/n100.r02.s077.depth.txt\" \"n100.r02.s077_output/n100.r02.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s077_output/n100.r02.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s077_output/n100.r02.s077.reference.fas\" | bcftools consensus -m \"n100.r02.s077_output/n100.r02.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s077_output/n100.r02.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task bb81e9dc (flow ce74ed16): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s035_output\"\n        wget -O \"n100.r02.s035_output/n100.r02.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s035_output/n100.r02.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s035_output/n100.r02.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s035_output/n100.r02.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s035_output/n100.r02.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s035_output/n100.r02.s035.reference.fas\" \"n100.r02.s035_output/n100.r02.s035.fq1.fastq\" \"n100.r02.s035_output/n100.r02.s035.fq2.fastq\" | samtools view -bS - > \"n100.r02.s035_output/n100.r02.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s035_output/n100.r02.s035.untrimmed.sorted.bam\" \"n100.r02.s035_output/n100.r02.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s035_output/n100.r02.s035.untrimmed.sorted.bam\" -b \"n100.r02.s035_output/n100.r02.s035.primers.bed\" -p \"n100.r02.s035_output/n100.r02.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam\" \"n100.r02.s035_output/n100.r02.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s035_output/n100.r02.s035.reference.fas\" \"n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam\" > \"n100.r02.s035_output/n100.r02.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s035_output/n100.r02.s035.reference.fas\" --call-indels \"n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam\" > \"n100.r02.s035_output/n100.r02.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam\" > \"n100.r02.s035_output/n100.r02.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s035_output/n100.r02.s035.depth.txt\" \"n100.r02.s035_output/n100.r02.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s035_output/n100.r02.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s035_output/n100.r02.s035.reference.fas\" | bcftools consensus -m \"n100.r02.s035_output/n100.r02.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s035_output/n100.r02.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8c914f7e (flow 56fb7d44): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s074_output\"\n        wget -O \"n100.r02.s074_output/n100.r02.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s074_output/n100.r02.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s074_output/n100.r02.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s074_output/n100.r02.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s074_output/n100.r02.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s074_output/n100.r02.s074.reference.fas\" \"n100.r02.s074_output/n100.r02.s074.fq1.fastq\" \"n100.r02.s074_output/n100.r02.s074.fq2.fastq\" | samtools view -bS - > \"n100.r02.s074_output/n100.r02.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s074_output/n100.r02.s074.untrimmed.sorted.bam\" \"n100.r02.s074_output/n100.r02.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s074_output/n100.r02.s074.untrimmed.sorted.bam\" -b \"n100.r02.s074_output/n100.r02.s074.primers.bed\" -p \"n100.r02.s074_output/n100.r02.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam\" \"n100.r02.s074_output/n100.r02.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s074_output/n100.r02.s074.reference.fas\" \"n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam\" > \"n100.r02.s074_output/n100.r02.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s074_output/n100.r02.s074.reference.fas\" --call-indels \"n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam\" > \"n100.r02.s074_output/n100.r02.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam\" > \"n100.r02.s074_output/n100.r02.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s074_output/n100.r02.s074.depth.txt\" \"n100.r02.s074_output/n100.r02.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s074_output/n100.r02.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s074_output/n100.r02.s074.reference.fas\" | bcftools consensus -m \"n100.r02.s074_output/n100.r02.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s074_output/n100.r02.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task b5b0895c (flow 5e121a68): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s032_output\"\n        wget -O \"n100.r02.s032_output/n100.r02.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s032_output/n100.r02.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s032_output/n100.r02.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s032_output/n100.r02.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s032_output/n100.r02.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s032_output/n100.r02.s032.reference.fas\" \"n100.r02.s032_output/n100.r02.s032.fq1.fastq\" \"n100.r02.s032_output/n100.r02.s032.fq2.fastq\" | samtools view -bS - > \"n100.r02.s032_output/n100.r02.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s032_output/n100.r02.s032.untrimmed.sorted.bam\" \"n100.r02.s032_output/n100.r02.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s032_output/n100.r02.s032.untrimmed.sorted.bam\" -b \"n100.r02.s032_output/n100.r02.s032.primers.bed\" -p \"n100.r02.s032_output/n100.r02.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam\" \"n100.r02.s032_output/n100.r02.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s032_output/n100.r02.s032.reference.fas\" \"n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam\" > \"n100.r02.s032_output/n100.r02.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s032_output/n100.r02.s032.reference.fas\" --call-indels \"n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam\" > \"n100.r02.s032_output/n100.r02.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam\" > \"n100.r02.s032_output/n100.r02.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s032_output/n100.r02.s032.depth.txt\" \"n100.r02.s032_output/n100.r02.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s032_output/n100.r02.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s032_output/n100.r02.s032.reference.fas\" | bcftools consensus -m \"n100.r02.s032_output/n100.r02.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s032_output/n100.r02.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 227b4998 (flow 498981df): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s005_output\"\n        wget -O \"n100.r02.s005_output/n100.r02.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s005_output/n100.r02.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s005_output/n100.r02.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s005_output/n100.r02.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s005_output/n100.r02.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s005_output/n100.r02.s005.reference.fas\" \"n100.r02.s005_output/n100.r02.s005.fq1.fastq\" \"n100.r02.s005_output/n100.r02.s005.fq2.fastq\" | samtools view -bS - > \"n100.r02.s005_output/n100.r02.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s005_output/n100.r02.s005.untrimmed.sorted.bam\" \"n100.r02.s005_output/n100.r02.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s005_output/n100.r02.s005.untrimmed.sorted.bam\" -b \"n100.r02.s005_output/n100.r02.s005.primers.bed\" -p \"n100.r02.s005_output/n100.r02.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam\" \"n100.r02.s005_output/n100.r02.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s005_output/n100.r02.s005.reference.fas\" \"n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam\" > \"n100.r02.s005_output/n100.r02.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s005_output/n100.r02.s005.reference.fas\" --call-indels \"n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam\" > \"n100.r02.s005_output/n100.r02.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam\" > \"n100.r02.s005_output/n100.r02.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s005_output/n100.r02.s005.depth.txt\" \"n100.r02.s005_output/n100.r02.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s005_output/n100.r02.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s005_output/n100.r02.s005.reference.fas\" | bcftools consensus -m \"n100.r02.s005_output/n100.r02.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s005_output/n100.r02.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task c2690bb6 (flow c8530bd3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s071_output\"\n        wget -O \"n100.r02.s071_output/n100.r02.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s071_output/n100.r02.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s071_output/n100.r02.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s071_output/n100.r02.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s071_output/n100.r02.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s071_output/n100.r02.s071.reference.fas\" \"n100.r02.s071_output/n100.r02.s071.fq1.fastq\" \"n100.r02.s071_output/n100.r02.s071.fq2.fastq\" | samtools view -bS - > \"n100.r02.s071_output/n100.r02.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s071_output/n100.r02.s071.untrimmed.sorted.bam\" \"n100.r02.s071_output/n100.r02.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s071_output/n100.r02.s071.untrimmed.sorted.bam\" -b \"n100.r02.s071_output/n100.r02.s071.primers.bed\" -p \"n100.r02.s071_output/n100.r02.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam\" \"n100.r02.s071_output/n100.r02.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s071_output/n100.r02.s071.reference.fas\" \"n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam\" > \"n100.r02.s071_output/n100.r02.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s071_output/n100.r02.s071.reference.fas\" --call-indels \"n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam\" > \"n100.r02.s071_output/n100.r02.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam\" > \"n100.r02.s071_output/n100.r02.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s071_output/n100.r02.s071.depth.txt\" \"n100.r02.s071_output/n100.r02.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s071_output/n100.r02.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s071_output/n100.r02.s071.reference.fas\" | bcftools consensus -m \"n100.r02.s071_output/n100.r02.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s071_output/n100.r02.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 134a0558 (flow 0f99a469): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s033_output\"\n        wget -O \"n100.r02.s033_output/n100.r02.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s033_output/n100.r02.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s033_output/n100.r02.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s033_output/n100.r02.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s033_output/n100.r02.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s033_output/n100.r02.s033.reference.fas\" \"n100.r02.s033_output/n100.r02.s033.fq1.fastq\" \"n100.r02.s033_output/n100.r02.s033.fq2.fastq\" | samtools view -bS - > \"n100.r02.s033_output/n100.r02.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s033_output/n100.r02.s033.untrimmed.sorted.bam\" \"n100.r02.s033_output/n100.r02.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s033_output/n100.r02.s033.untrimmed.sorted.bam\" -b \"n100.r02.s033_output/n100.r02.s033.primers.bed\" -p \"n100.r02.s033_output/n100.r02.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam\" \"n100.r02.s033_output/n100.r02.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s033_output/n100.r02.s033.reference.fas\" \"n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam\" > \"n100.r02.s033_output/n100.r02.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s033_output/n100.r02.s033.reference.fas\" --call-indels \"n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam\" > \"n100.r02.s033_output/n100.r02.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam\" > \"n100.r02.s033_output/n100.r02.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s033_output/n100.r02.s033.depth.txt\" \"n100.r02.s033_output/n100.r02.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s033_output/n100.r02.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s033_output/n100.r02.s033.reference.fas\" | bcftools consensus -m \"n100.r02.s033_output/n100.r02.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s033_output/n100.r02.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task ba37caf2 (flow 609775f9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s004_output\"\n        wget -O \"n100.r02.s004_output/n100.r02.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s004_output/n100.r02.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s004_output/n100.r02.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s004_output/n100.r02.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s004_output/n100.r02.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s004_output/n100.r02.s004.reference.fas\" \"n100.r02.s004_output/n100.r02.s004.fq1.fastq\" \"n100.r02.s004_output/n100.r02.s004.fq2.fastq\" | samtools view -bS - > \"n100.r02.s004_output/n100.r02.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s004_output/n100.r02.s004.untrimmed.sorted.bam\" \"n100.r02.s004_output/n100.r02.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s004_output/n100.r02.s004.untrimmed.sorted.bam\" -b \"n100.r02.s004_output/n100.r02.s004.primers.bed\" -p \"n100.r02.s004_output/n100.r02.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam\" \"n100.r02.s004_output/n100.r02.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s004_output/n100.r02.s004.reference.fas\" \"n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam\" > \"n100.r02.s004_output/n100.r02.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s004_output/n100.r02.s004.reference.fas\" --call-indels \"n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam\" > \"n100.r02.s004_output/n100.r02.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam\" > \"n100.r02.s004_output/n100.r02.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s004_output/n100.r02.s004.depth.txt\" \"n100.r02.s004_output/n100.r02.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s004_output/n100.r02.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s004_output/n100.r02.s004.reference.fas\" | bcftools consensus -m \"n100.r02.s004_output/n100.r02.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s004_output/n100.r02.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task aca0b7cc (flow 3d43c667): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s072_output\"\n        wget -O \"n100.r02.s072_output/n100.r02.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s072_output/n100.r02.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s072_output/n100.r02.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s072_output/n100.r02.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s072_output/n100.r02.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s072_output/n100.r02.s072.reference.fas\" \"n100.r02.s072_output/n100.r02.s072.fq1.fastq\" \"n100.r02.s072_output/n100.r02.s072.fq2.fastq\" | samtools view -bS - > \"n100.r02.s072_output/n100.r02.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s072_output/n100.r02.s072.untrimmed.sorted.bam\" \"n100.r02.s072_output/n100.r02.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s072_output/n100.r02.s072.untrimmed.sorted.bam\" -b \"n100.r02.s072_output/n100.r02.s072.primers.bed\" -p \"n100.r02.s072_output/n100.r02.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam\" \"n100.r02.s072_output/n100.r02.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s072_output/n100.r02.s072.reference.fas\" \"n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam\" > \"n100.r02.s072_output/n100.r02.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s072_output/n100.r02.s072.reference.fas\" --call-indels \"n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam\" > \"n100.r02.s072_output/n100.r02.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam\" > \"n100.r02.s072_output/n100.r02.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s072_output/n100.r02.s072.depth.txt\" \"n100.r02.s072_output/n100.r02.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s072_output/n100.r02.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s072_output/n100.r02.s072.reference.fas\" | bcftools consensus -m \"n100.r02.s072_output/n100.r02.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s072_output/n100.r02.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0b440a13 (flow 4a266829): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s066_output\"\n        wget -O \"n100.r02.s066_output/n100.r02.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s066_output/n100.r02.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s066_output/n100.r02.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s066_output/n100.r02.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s066_output/n100.r02.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s066_output/n100.r02.s066.reference.fas\" \"n100.r02.s066_output/n100.r02.s066.fq1.fastq\" \"n100.r02.s066_output/n100.r02.s066.fq2.fastq\" | samtools view -bS - > \"n100.r02.s066_output/n100.r02.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s066_output/n100.r02.s066.untrimmed.sorted.bam\" \"n100.r02.s066_output/n100.r02.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s066_output/n100.r02.s066.untrimmed.sorted.bam\" -b \"n100.r02.s066_output/n100.r02.s066.primers.bed\" -p \"n100.r02.s066_output/n100.r02.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam\" \"n100.r02.s066_output/n100.r02.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s066_output/n100.r02.s066.reference.fas\" \"n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam\" > \"n100.r02.s066_output/n100.r02.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s066_output/n100.r02.s066.reference.fas\" --call-indels \"n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam\" > \"n100.r02.s066_output/n100.r02.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam\" > \"n100.r02.s066_output/n100.r02.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s066_output/n100.r02.s066.depth.txt\" \"n100.r02.s066_output/n100.r02.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s066_output/n100.r02.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s066_output/n100.r02.s066.reference.fas\" | bcftools consensus -m \"n100.r02.s066_output/n100.r02.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s066_output/n100.r02.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 1c084c9f (flow 8b1babe2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s001_output\"\n        wget -O \"n100.r02.s001_output/n100.r02.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s001_output/n100.r02.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s001_output/n100.r02.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s001_output/n100.r02.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s001_output/n100.r02.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s001_output/n100.r02.s001.reference.fas\" \"n100.r02.s001_output/n100.r02.s001.fq1.fastq\" \"n100.r02.s001_output/n100.r02.s001.fq2.fastq\" | samtools view -bS - > \"n100.r02.s001_output/n100.r02.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s001_output/n100.r02.s001.untrimmed.sorted.bam\" \"n100.r02.s001_output/n100.r02.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s001_output/n100.r02.s001.untrimmed.sorted.bam\" -b \"n100.r02.s001_output/n100.r02.s001.primers.bed\" -p \"n100.r02.s001_output/n100.r02.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam\" \"n100.r02.s001_output/n100.r02.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s001_output/n100.r02.s001.reference.fas\" \"n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam\" > \"n100.r02.s001_output/n100.r02.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s001_output/n100.r02.s001.reference.fas\" --call-indels \"n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam\" > \"n100.r02.s001_output/n100.r02.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam\" > \"n100.r02.s001_output/n100.r02.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s001_output/n100.r02.s001.depth.txt\" \"n100.r02.s001_output/n100.r02.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s001_output/n100.r02.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s001_output/n100.r02.s001.reference.fas\" | bcftools consensus -m \"n100.r02.s001_output/n100.r02.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s001_output/n100.r02.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 2154d467 (flow 0ea2123a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s081_output\"\n        wget -O \"n100.r02.s081_output/n100.r02.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s081_output/n100.r02.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s081_output/n100.r02.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s081_output/n100.r02.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s081_output/n100.r02.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s081_output/n100.r02.s081.reference.fas\" \"n100.r02.s081_output/n100.r02.s081.fq1.fastq\" \"n100.r02.s081_output/n100.r02.s081.fq2.fastq\" | samtools view -bS - > \"n100.r02.s081_output/n100.r02.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s081_output/n100.r02.s081.untrimmed.sorted.bam\" \"n100.r02.s081_output/n100.r02.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s081_output/n100.r02.s081.untrimmed.sorted.bam\" -b \"n100.r02.s081_output/n100.r02.s081.primers.bed\" -p \"n100.r02.s081_output/n100.r02.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam\" \"n100.r02.s081_output/n100.r02.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s081_output/n100.r02.s081.reference.fas\" \"n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam\" > \"n100.r02.s081_output/n100.r02.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s081_output/n100.r02.s081.reference.fas\" --call-indels \"n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam\" > \"n100.r02.s081_output/n100.r02.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam\" > \"n100.r02.s081_output/n100.r02.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s081_output/n100.r02.s081.depth.txt\" \"n100.r02.s081_output/n100.r02.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s081_output/n100.r02.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s081_output/n100.r02.s081.reference.fas\" | bcftools consensus -m \"n100.r02.s081_output/n100.r02.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s081_output/n100.r02.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 5100a091 (flow 92c090c3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s086_output\"\n        wget -O \"n100.r02.s086_output/n100.r02.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s086_output/n100.r02.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s086_output/n100.r02.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s086_output/n100.r02.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s086_output/n100.r02.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s086_output/n100.r02.s086.reference.fas\" \"n100.r02.s086_output/n100.r02.s086.fq1.fastq\" \"n100.r02.s086_output/n100.r02.s086.fq2.fastq\" | samtools view -bS - > \"n100.r02.s086_output/n100.r02.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s086_output/n100.r02.s086.untrimmed.sorted.bam\" \"n100.r02.s086_output/n100.r02.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s086_output/n100.r02.s086.untrimmed.sorted.bam\" -b \"n100.r02.s086_output/n100.r02.s086.primers.bed\" -p \"n100.r02.s086_output/n100.r02.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam\" \"n100.r02.s086_output/n100.r02.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s086_output/n100.r02.s086.reference.fas\" \"n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam\" > \"n100.r02.s086_output/n100.r02.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s086_output/n100.r02.s086.reference.fas\" --call-indels \"n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam\" > \"n100.r02.s086_output/n100.r02.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam\" > \"n100.r02.s086_output/n100.r02.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s086_output/n100.r02.s086.depth.txt\" \"n100.r02.s086_output/n100.r02.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s086_output/n100.r02.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s086_output/n100.r02.s086.reference.fas\" | bcftools consensus -m \"n100.r02.s086_output/n100.r02.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s086_output/n100.r02.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task f6b05f5e (flow 64781829): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s061_output\"\n        wget -O \"n100.r02.s061_output/n100.r02.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s061_output/n100.r02.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s061_output/n100.r02.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s061_output/n100.r02.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s061_output/n100.r02.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s061_output/n100.r02.s061.reference.fas\" \"n100.r02.s061_output/n100.r02.s061.fq1.fastq\" \"n100.r02.s061_output/n100.r02.s061.fq2.fastq\" | samtools view -bS - > \"n100.r02.s061_output/n100.r02.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s061_output/n100.r02.s061.untrimmed.sorted.bam\" \"n100.r02.s061_output/n100.r02.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s061_output/n100.r02.s061.untrimmed.sorted.bam\" -b \"n100.r02.s061_output/n100.r02.s061.primers.bed\" -p \"n100.r02.s061_output/n100.r02.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam\" \"n100.r02.s061_output/n100.r02.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s061_output/n100.r02.s061.reference.fas\" \"n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam\" > \"n100.r02.s061_output/n100.r02.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s061_output/n100.r02.s061.reference.fas\" --call-indels \"n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam\" > \"n100.r02.s061_output/n100.r02.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam\" > \"n100.r02.s061_output/n100.r02.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s061_output/n100.r02.s061.depth.txt\" \"n100.r02.s061_output/n100.r02.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s061_output/n100.r02.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s061_output/n100.r02.s061.reference.fas\" | bcftools consensus -m \"n100.r02.s061_output/n100.r02.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s061_output/n100.r02.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task c88b5c52 (flow 7f934c83): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s070_output\"\n        wget -O \"n100.r02.s070_output/n100.r02.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s070_output/n100.r02.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s070_output/n100.r02.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s070_output/n100.r02.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s070_output/n100.r02.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s070_output/n100.r02.s070.reference.fas\" \"n100.r02.s070_output/n100.r02.s070.fq1.fastq\" \"n100.r02.s070_output/n100.r02.s070.fq2.fastq\" | samtools view -bS - > \"n100.r02.s070_output/n100.r02.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s070_output/n100.r02.s070.untrimmed.sorted.bam\" \"n100.r02.s070_output/n100.r02.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s070_output/n100.r02.s070.untrimmed.sorted.bam\" -b \"n100.r02.s070_output/n100.r02.s070.primers.bed\" -p \"n100.r02.s070_output/n100.r02.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam\" \"n100.r02.s070_output/n100.r02.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s070_output/n100.r02.s070.reference.fas\" \"n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam\" > \"n100.r02.s070_output/n100.r02.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s070_output/n100.r02.s070.reference.fas\" --call-indels \"n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam\" > \"n100.r02.s070_output/n100.r02.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam\" > \"n100.r02.s070_output/n100.r02.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s070_output/n100.r02.s070.depth.txt\" \"n100.r02.s070_output/n100.r02.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s070_output/n100.r02.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s070_output/n100.r02.s070.reference.fas\" | bcftools consensus -m \"n100.r02.s070_output/n100.r02.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s070_output/n100.r02.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8273013c (flow d3ff6df9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s056_output\"\n        wget -O \"n100.r02.s056_output/n100.r02.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s056_output/n100.r02.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s056_output/n100.r02.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s056_output/n100.r02.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s056_output/n100.r02.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s056_output/n100.r02.s056.reference.fas\" \"n100.r02.s056_output/n100.r02.s056.fq1.fastq\" \"n100.r02.s056_output/n100.r02.s056.fq2.fastq\" | samtools view -bS - > \"n100.r02.s056_output/n100.r02.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s056_output/n100.r02.s056.untrimmed.sorted.bam\" \"n100.r02.s056_output/n100.r02.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s056_output/n100.r02.s056.untrimmed.sorted.bam\" -b \"n100.r02.s056_output/n100.r02.s056.primers.bed\" -p \"n100.r02.s056_output/n100.r02.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam\" \"n100.r02.s056_output/n100.r02.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s056_output/n100.r02.s056.reference.fas\" \"n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam\" > \"n100.r02.s056_output/n100.r02.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s056_output/n100.r02.s056.reference.fas\" --call-indels \"n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam\" > \"n100.r02.s056_output/n100.r02.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam\" > \"n100.r02.s056_output/n100.r02.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s056_output/n100.r02.s056.depth.txt\" \"n100.r02.s056_output/n100.r02.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s056_output/n100.r02.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s056_output/n100.r02.s056.reference.fas\" | bcftools consensus -m \"n100.r02.s056_output/n100.r02.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s056_output/n100.r02.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task c9165e2e (flow e2043d0a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s053_output\"\n        wget -O \"n100.r02.s053_output/n100.r02.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s053_output/n100.r02.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s053_output/n100.r02.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s053_output/n100.r02.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s053_output/n100.r02.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s053_output/n100.r02.s053.reference.fas\" \"n100.r02.s053_output/n100.r02.s053.fq1.fastq\" \"n100.r02.s053_output/n100.r02.s053.fq2.fastq\" | samtools view -bS - > \"n100.r02.s053_output/n100.r02.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s053_output/n100.r02.s053.untrimmed.sorted.bam\" \"n100.r02.s053_output/n100.r02.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s053_output/n100.r02.s053.untrimmed.sorted.bam\" -b \"n100.r02.s053_output/n100.r02.s053.primers.bed\" -p \"n100.r02.s053_output/n100.r02.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam\" \"n100.r02.s053_output/n100.r02.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s053_output/n100.r02.s053.reference.fas\" \"n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam\" > \"n100.r02.s053_output/n100.r02.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s053_output/n100.r02.s053.reference.fas\" --call-indels \"n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam\" > \"n100.r02.s053_output/n100.r02.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam\" > \"n100.r02.s053_output/n100.r02.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s053_output/n100.r02.s053.depth.txt\" \"n100.r02.s053_output/n100.r02.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s053_output/n100.r02.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s053_output/n100.r02.s053.reference.fas\" | bcftools consensus -m \"n100.r02.s053_output/n100.r02.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s053_output/n100.r02.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 557dccf8 (flow dcf397bd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s027_output\"\n        wget -O \"n100.r02.s027_output/n100.r02.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s027_output/n100.r02.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s027_output/n100.r02.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s027_output/n100.r02.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s027_output/n100.r02.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s027_output/n100.r02.s027.reference.fas\" \"n100.r02.s027_output/n100.r02.s027.fq1.fastq\" \"n100.r02.s027_output/n100.r02.s027.fq2.fastq\" | samtools view -bS - > \"n100.r02.s027_output/n100.r02.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s027_output/n100.r02.s027.untrimmed.sorted.bam\" \"n100.r02.s027_output/n100.r02.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s027_output/n100.r02.s027.untrimmed.sorted.bam\" -b \"n100.r02.s027_output/n100.r02.s027.primers.bed\" -p \"n100.r02.s027_output/n100.r02.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam\" \"n100.r02.s027_output/n100.r02.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s027_output/n100.r02.s027.reference.fas\" \"n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam\" > \"n100.r02.s027_output/n100.r02.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s027_output/n100.r02.s027.reference.fas\" --call-indels \"n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam\" > \"n100.r02.s027_output/n100.r02.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam\" > \"n100.r02.s027_output/n100.r02.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s027_output/n100.r02.s027.depth.txt\" \"n100.r02.s027_output/n100.r02.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s027_output/n100.r02.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s027_output/n100.r02.s027.reference.fas\" | bcftools consensus -m \"n100.r02.s027_output/n100.r02.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s027_output/n100.r02.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 9b70412c (flow e085395a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s089_output\"\n        wget -O \"n100.r02.s089_output/n100.r02.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s089_output/n100.r02.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s089_output/n100.r02.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s089_output/n100.r02.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s089_output/n100.r02.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s089_output/n100.r02.s089.reference.fas\" \"n100.r02.s089_output/n100.r02.s089.fq1.fastq\" \"n100.r02.s089_output/n100.r02.s089.fq2.fastq\" | samtools view -bS - > \"n100.r02.s089_output/n100.r02.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s089_output/n100.r02.s089.untrimmed.sorted.bam\" \"n100.r02.s089_output/n100.r02.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s089_output/n100.r02.s089.untrimmed.sorted.bam\" -b \"n100.r02.s089_output/n100.r02.s089.primers.bed\" -p \"n100.r02.s089_output/n100.r02.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam\" \"n100.r02.s089_output/n100.r02.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s089_output/n100.r02.s089.reference.fas\" \"n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam\" > \"n100.r02.s089_output/n100.r02.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s089_output/n100.r02.s089.reference.fas\" --call-indels \"n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam\" > \"n100.r02.s089_output/n100.r02.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam\" > \"n100.r02.s089_output/n100.r02.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s089_output/n100.r02.s089.depth.txt\" \"n100.r02.s089_output/n100.r02.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s089_output/n100.r02.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s089_output/n100.r02.s089.reference.fas\" | bcftools consensus -m \"n100.r02.s089_output/n100.r02.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s089_output/n100.r02.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 57d5d876 (flow fceac23c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s098_output\"\n        wget -O \"n100.r02.s098_output/n100.r02.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s098_output/n100.r02.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s098_output/n100.r02.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s098_output/n100.r02.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s098_output/n100.r02.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s098_output/n100.r02.s098.reference.fas\" \"n100.r02.s098_output/n100.r02.s098.fq1.fastq\" \"n100.r02.s098_output/n100.r02.s098.fq2.fastq\" | samtools view -bS - > \"n100.r02.s098_output/n100.r02.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s098_output/n100.r02.s098.untrimmed.sorted.bam\" \"n100.r02.s098_output/n100.r02.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s098_output/n100.r02.s098.untrimmed.sorted.bam\" -b \"n100.r02.s098_output/n100.r02.s098.primers.bed\" -p \"n100.r02.s098_output/n100.r02.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam\" \"n100.r02.s098_output/n100.r02.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s098_output/n100.r02.s098.reference.fas\" \"n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam\" > \"n100.r02.s098_output/n100.r02.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s098_output/n100.r02.s098.reference.fas\" --call-indels \"n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam\" > \"n100.r02.s098_output/n100.r02.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam\" > \"n100.r02.s098_output/n100.r02.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s098_output/n100.r02.s098.depth.txt\" \"n100.r02.s098_output/n100.r02.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s098_output/n100.r02.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s098_output/n100.r02.s098.reference.fas\" | bcftools consensus -m \"n100.r02.s098_output/n100.r02.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s098_output/n100.r02.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task a8a30cc1 (flow 7b9af5ba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s015_output\"\n        wget -O \"n100.r02.s015_output/n100.r02.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s015_output/n100.r02.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s015_output/n100.r02.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s015_output/n100.r02.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s015_output/n100.r02.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s015_output/n100.r02.s015.reference.fas\" \"n100.r02.s015_output/n100.r02.s015.fq1.fastq\" \"n100.r02.s015_output/n100.r02.s015.fq2.fastq\" | samtools view -bS - > \"n100.r02.s015_output/n100.r02.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s015_output/n100.r02.s015.untrimmed.sorted.bam\" \"n100.r02.s015_output/n100.r02.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s015_output/n100.r02.s015.untrimmed.sorted.bam\" -b \"n100.r02.s015_output/n100.r02.s015.primers.bed\" -p \"n100.r02.s015_output/n100.r02.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam\" \"n100.r02.s015_output/n100.r02.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s015_output/n100.r02.s015.reference.fas\" \"n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam\" > \"n100.r02.s015_output/n100.r02.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s015_output/n100.r02.s015.reference.fas\" --call-indels \"n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam\" > \"n100.r02.s015_output/n100.r02.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam\" > \"n100.r02.s015_output/n100.r02.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s015_output/n100.r02.s015.depth.txt\" \"n100.r02.s015_output/n100.r02.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s015_output/n100.r02.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s015_output/n100.r02.s015.reference.fas\" | bcftools consensus -m \"n100.r02.s015_output/n100.r02.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s015_output/n100.r02.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 3e9c9b76 (flow f2f62b67): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s042_output\"\n        wget -O \"n100.r02.s042_output/n100.r02.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s042_output/n100.r02.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s042_output/n100.r02.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s042_output/n100.r02.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s042_output/n100.r02.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s042_output/n100.r02.s042.reference.fas\" \"n100.r02.s042_output/n100.r02.s042.fq1.fastq\" \"n100.r02.s042_output/n100.r02.s042.fq2.fastq\" | samtools view -bS - > \"n100.r02.s042_output/n100.r02.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s042_output/n100.r02.s042.untrimmed.sorted.bam\" \"n100.r02.s042_output/n100.r02.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s042_output/n100.r02.s042.untrimmed.sorted.bam\" -b \"n100.r02.s042_output/n100.r02.s042.primers.bed\" -p \"n100.r02.s042_output/n100.r02.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam\" \"n100.r02.s042_output/n100.r02.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s042_output/n100.r02.s042.reference.fas\" \"n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam\" > \"n100.r02.s042_output/n100.r02.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s042_output/n100.r02.s042.reference.fas\" --call-indels \"n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam\" > \"n100.r02.s042_output/n100.r02.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam\" > \"n100.r02.s042_output/n100.r02.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s042_output/n100.r02.s042.depth.txt\" \"n100.r02.s042_output/n100.r02.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s042_output/n100.r02.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s042_output/n100.r02.s042.reference.fas\" | bcftools consensus -m \"n100.r02.s042_output/n100.r02.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s042_output/n100.r02.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8f000427 (flow 2bf052bb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s021_output\"\n        wget -O \"n100.r02.s021_output/n100.r02.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s021_output/n100.r02.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s021_output/n100.r02.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s021_output/n100.r02.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s021_output/n100.r02.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s021_output/n100.r02.s021.reference.fas\" \"n100.r02.s021_output/n100.r02.s021.fq1.fastq\" \"n100.r02.s021_output/n100.r02.s021.fq2.fastq\" | samtools view -bS - > \"n100.r02.s021_output/n100.r02.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s021_output/n100.r02.s021.untrimmed.sorted.bam\" \"n100.r02.s021_output/n100.r02.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s021_output/n100.r02.s021.untrimmed.sorted.bam\" -b \"n100.r02.s021_output/n100.r02.s021.primers.bed\" -p \"n100.r02.s021_output/n100.r02.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam\" \"n100.r02.s021_output/n100.r02.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s021_output/n100.r02.s021.reference.fas\" \"n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam\" > \"n100.r02.s021_output/n100.r02.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s021_output/n100.r02.s021.reference.fas\" --call-indels \"n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam\" > \"n100.r02.s021_output/n100.r02.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam\" > \"n100.r02.s021_output/n100.r02.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s021_output/n100.r02.s021.depth.txt\" \"n100.r02.s021_output/n100.r02.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s021_output/n100.r02.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s021_output/n100.r02.s021.reference.fas\" | bcftools consensus -m \"n100.r02.s021_output/n100.r02.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s021_output/n100.r02.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 6f0ba86a (flow 16e41ecb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s013_output\"\n        wget -O \"n100.r02.s013_output/n100.r02.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s013_output/n100.r02.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s013_output/n100.r02.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s013_output/n100.r02.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s013_output/n100.r02.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s013_output/n100.r02.s013.reference.fas\" \"n100.r02.s013_output/n100.r02.s013.fq1.fastq\" \"n100.r02.s013_output/n100.r02.s013.fq2.fastq\" | samtools view -bS - > \"n100.r02.s013_output/n100.r02.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s013_output/n100.r02.s013.untrimmed.sorted.bam\" \"n100.r02.s013_output/n100.r02.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s013_output/n100.r02.s013.untrimmed.sorted.bam\" -b \"n100.r02.s013_output/n100.r02.s013.primers.bed\" -p \"n100.r02.s013_output/n100.r02.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam\" \"n100.r02.s013_output/n100.r02.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s013_output/n100.r02.s013.reference.fas\" \"n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam\" > \"n100.r02.s013_output/n100.r02.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s013_output/n100.r02.s013.reference.fas\" --call-indels \"n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam\" > \"n100.r02.s013_output/n100.r02.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam\" > \"n100.r02.s013_output/n100.r02.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s013_output/n100.r02.s013.depth.txt\" \"n100.r02.s013_output/n100.r02.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s013_output/n100.r02.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s013_output/n100.r02.s013.reference.fas\" | bcftools consensus -m \"n100.r02.s013_output/n100.r02.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s013_output/n100.r02.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 507f546b (flow 338fe8dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s062_output\"\n        wget -O \"n100.r02.s062_output/n100.r02.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s062_output/n100.r02.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s062_output/n100.r02.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s062_output/n100.r02.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s062_output/n100.r02.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s062_output/n100.r02.s062.reference.fas\" \"n100.r02.s062_output/n100.r02.s062.fq1.fastq\" \"n100.r02.s062_output/n100.r02.s062.fq2.fastq\" | samtools view -bS - > \"n100.r02.s062_output/n100.r02.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s062_output/n100.r02.s062.untrimmed.sorted.bam\" \"n100.r02.s062_output/n100.r02.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s062_output/n100.r02.s062.untrimmed.sorted.bam\" -b \"n100.r02.s062_output/n100.r02.s062.primers.bed\" -p \"n100.r02.s062_output/n100.r02.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam\" \"n100.r02.s062_output/n100.r02.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s062_output/n100.r02.s062.reference.fas\" \"n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam\" > \"n100.r02.s062_output/n100.r02.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s062_output/n100.r02.s062.reference.fas\" --call-indels \"n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam\" > \"n100.r02.s062_output/n100.r02.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam\" > \"n100.r02.s062_output/n100.r02.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s062_output/n100.r02.s062.depth.txt\" \"n100.r02.s062_output/n100.r02.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s062_output/n100.r02.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s062_output/n100.r02.s062.reference.fas\" | bcftools consensus -m \"n100.r02.s062_output/n100.r02.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s062_output/n100.r02.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 506303dc (flow 1e4c353c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s016_output\"\n        wget -O \"n100.r02.s016_output/n100.r02.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s016_output/n100.r02.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s016_output/n100.r02.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s016_output/n100.r02.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s016_output/n100.r02.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s016_output/n100.r02.s016.reference.fas\" \"n100.r02.s016_output/n100.r02.s016.fq1.fastq\" \"n100.r02.s016_output/n100.r02.s016.fq2.fastq\" | samtools view -bS - > \"n100.r02.s016_output/n100.r02.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s016_output/n100.r02.s016.untrimmed.sorted.bam\" \"n100.r02.s016_output/n100.r02.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s016_output/n100.r02.s016.untrimmed.sorted.bam\" -b \"n100.r02.s016_output/n100.r02.s016.primers.bed\" -p \"n100.r02.s016_output/n100.r02.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam\" \"n100.r02.s016_output/n100.r02.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s016_output/n100.r02.s016.reference.fas\" \"n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam\" > \"n100.r02.s016_output/n100.r02.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s016_output/n100.r02.s016.reference.fas\" --call-indels \"n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam\" > \"n100.r02.s016_output/n100.r02.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam\" > \"n100.r02.s016_output/n100.r02.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s016_output/n100.r02.s016.depth.txt\" \"n100.r02.s016_output/n100.r02.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s016_output/n100.r02.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s016_output/n100.r02.s016.reference.fas\" | bcftools consensus -m \"n100.r02.s016_output/n100.r02.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s016_output/n100.r02.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 45825593 (flow 6b3eb25c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s078_output\"\n        wget -O \"n100.r02.s078_output/n100.r02.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s078_output/n100.r02.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s078_output/n100.r02.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s078_output/n100.r02.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s078_output/n100.r02.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s078_output/n100.r02.s078.reference.fas\" \"n100.r02.s078_output/n100.r02.s078.fq1.fastq\" \"n100.r02.s078_output/n100.r02.s078.fq2.fastq\" | samtools view -bS - > \"n100.r02.s078_output/n100.r02.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s078_output/n100.r02.s078.untrimmed.sorted.bam\" \"n100.r02.s078_output/n100.r02.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s078_output/n100.r02.s078.untrimmed.sorted.bam\" -b \"n100.r02.s078_output/n100.r02.s078.primers.bed\" -p \"n100.r02.s078_output/n100.r02.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam\" \"n100.r02.s078_output/n100.r02.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s078_output/n100.r02.s078.reference.fas\" \"n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam\" > \"n100.r02.s078_output/n100.r02.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s078_output/n100.r02.s078.reference.fas\" --call-indels \"n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam\" > \"n100.r02.s078_output/n100.r02.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam\" > \"n100.r02.s078_output/n100.r02.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s078_output/n100.r02.s078.depth.txt\" \"n100.r02.s078_output/n100.r02.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s078_output/n100.r02.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s078_output/n100.r02.s078.reference.fas\" | bcftools consensus -m \"n100.r02.s078_output/n100.r02.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s078_output/n100.r02.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 7d3bc912 (flow e2236b63): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s052_output\"\n        wget -O \"n100.r02.s052_output/n100.r02.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s052_output/n100.r02.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s052_output/n100.r02.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s052_output/n100.r02.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s052_output/n100.r02.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s052_output/n100.r02.s052.reference.fas\" \"n100.r02.s052_output/n100.r02.s052.fq1.fastq\" \"n100.r02.s052_output/n100.r02.s052.fq2.fastq\" | samtools view -bS - > \"n100.r02.s052_output/n100.r02.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s052_output/n100.r02.s052.untrimmed.sorted.bam\" \"n100.r02.s052_output/n100.r02.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s052_output/n100.r02.s052.untrimmed.sorted.bam\" -b \"n100.r02.s052_output/n100.r02.s052.primers.bed\" -p \"n100.r02.s052_output/n100.r02.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam\" \"n100.r02.s052_output/n100.r02.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s052_output/n100.r02.s052.reference.fas\" \"n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam\" > \"n100.r02.s052_output/n100.r02.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s052_output/n100.r02.s052.reference.fas\" --call-indels \"n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam\" > \"n100.r02.s052_output/n100.r02.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam\" > \"n100.r02.s052_output/n100.r02.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s052_output/n100.r02.s052.depth.txt\" \"n100.r02.s052_output/n100.r02.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s052_output/n100.r02.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s052_output/n100.r02.s052.reference.fas\" | bcftools consensus -m \"n100.r02.s052_output/n100.r02.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s052_output/n100.r02.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 2e1a4452 (flow 4573c8de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s085_output\"\n        wget -O \"n100.r02.s085_output/n100.r02.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s085_output/n100.r02.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s085_output/n100.r02.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s085_output/n100.r02.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s085_output/n100.r02.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s085_output/n100.r02.s085.reference.fas\" \"n100.r02.s085_output/n100.r02.s085.fq1.fastq\" \"n100.r02.s085_output/n100.r02.s085.fq2.fastq\" | samtools view -bS - > \"n100.r02.s085_output/n100.r02.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s085_output/n100.r02.s085.untrimmed.sorted.bam\" \"n100.r02.s085_output/n100.r02.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s085_output/n100.r02.s085.untrimmed.sorted.bam\" -b \"n100.r02.s085_output/n100.r02.s085.primers.bed\" -p \"n100.r02.s085_output/n100.r02.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam\" \"n100.r02.s085_output/n100.r02.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s085_output/n100.r02.s085.reference.fas\" \"n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam\" > \"n100.r02.s085_output/n100.r02.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s085_output/n100.r02.s085.reference.fas\" --call-indels \"n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam\" > \"n100.r02.s085_output/n100.r02.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam\" > \"n100.r02.s085_output/n100.r02.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s085_output/n100.r02.s085.depth.txt\" \"n100.r02.s085_output/n100.r02.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s085_output/n100.r02.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s085_output/n100.r02.s085.reference.fas\" | bcftools consensus -m \"n100.r02.s085_output/n100.r02.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s085_output/n100.r02.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0a7969ad (flow 678c0cb0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s059_output\"\n        wget -O \"n100.r02.s059_output/n100.r02.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s059_output/n100.r02.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s059_output/n100.r02.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s059_output/n100.r02.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s059_output/n100.r02.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s059_output/n100.r02.s059.reference.fas\" \"n100.r02.s059_output/n100.r02.s059.fq1.fastq\" \"n100.r02.s059_output/n100.r02.s059.fq2.fastq\" | samtools view -bS - > \"n100.r02.s059_output/n100.r02.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s059_output/n100.r02.s059.untrimmed.sorted.bam\" \"n100.r02.s059_output/n100.r02.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s059_output/n100.r02.s059.untrimmed.sorted.bam\" -b \"n100.r02.s059_output/n100.r02.s059.primers.bed\" -p \"n100.r02.s059_output/n100.r02.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam\" \"n100.r02.s059_output/n100.r02.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s059_output/n100.r02.s059.reference.fas\" \"n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam\" > \"n100.r02.s059_output/n100.r02.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s059_output/n100.r02.s059.reference.fas\" --call-indels \"n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam\" > \"n100.r02.s059_output/n100.r02.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam\" > \"n100.r02.s059_output/n100.r02.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s059_output/n100.r02.s059.depth.txt\" \"n100.r02.s059_output/n100.r02.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s059_output/n100.r02.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s059_output/n100.r02.s059.reference.fas\" | bcftools consensus -m \"n100.r02.s059_output/n100.r02.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s059_output/n100.r02.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 6dbd0fd3 (flow 4574c5bb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s073_output\"\n        wget -O \"n100.r02.s073_output/n100.r02.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s073_output/n100.r02.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s073_output/n100.r02.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s073_output/n100.r02.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s073_output/n100.r02.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s073_output/n100.r02.s073.reference.fas\" \"n100.r02.s073_output/n100.r02.s073.fq1.fastq\" \"n100.r02.s073_output/n100.r02.s073.fq2.fastq\" | samtools view -bS - > \"n100.r02.s073_output/n100.r02.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s073_output/n100.r02.s073.untrimmed.sorted.bam\" \"n100.r02.s073_output/n100.r02.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s073_output/n100.r02.s073.untrimmed.sorted.bam\" -b \"n100.r02.s073_output/n100.r02.s073.primers.bed\" -p \"n100.r02.s073_output/n100.r02.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam\" \"n100.r02.s073_output/n100.r02.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s073_output/n100.r02.s073.reference.fas\" \"n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam\" > \"n100.r02.s073_output/n100.r02.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s073_output/n100.r02.s073.reference.fas\" --call-indels \"n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam\" > \"n100.r02.s073_output/n100.r02.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam\" > \"n100.r02.s073_output/n100.r02.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s073_output/n100.r02.s073.depth.txt\" \"n100.r02.s073_output/n100.r02.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s073_output/n100.r02.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s073_output/n100.r02.s073.reference.fas\" | bcftools consensus -m \"n100.r02.s073_output/n100.r02.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s073_output/n100.r02.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task da6be570 (flow aae2ca1c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s084_output\"\n        wget -O \"n100.r02.s084_output/n100.r02.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s084_output/n100.r02.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s084_output/n100.r02.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s084_output/n100.r02.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s084_output/n100.r02.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s084_output/n100.r02.s084.reference.fas\" \"n100.r02.s084_output/n100.r02.s084.fq1.fastq\" \"n100.r02.s084_output/n100.r02.s084.fq2.fastq\" | samtools view -bS - > \"n100.r02.s084_output/n100.r02.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s084_output/n100.r02.s084.untrimmed.sorted.bam\" \"n100.r02.s084_output/n100.r02.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s084_output/n100.r02.s084.untrimmed.sorted.bam\" -b \"n100.r02.s084_output/n100.r02.s084.primers.bed\" -p \"n100.r02.s084_output/n100.r02.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam\" \"n100.r02.s084_output/n100.r02.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s084_output/n100.r02.s084.reference.fas\" \"n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam\" > \"n100.r02.s084_output/n100.r02.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s084_output/n100.r02.s084.reference.fas\" --call-indels \"n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam\" > \"n100.r02.s084_output/n100.r02.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam\" > \"n100.r02.s084_output/n100.r02.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s084_output/n100.r02.s084.depth.txt\" \"n100.r02.s084_output/n100.r02.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s084_output/n100.r02.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s084_output/n100.r02.s084.reference.fas\" | bcftools consensus -m \"n100.r02.s084_output/n100.r02.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s084_output/n100.r02.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 6628d1b5 (flow 77fde731): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s045_output\"\n        wget -O \"n100.r02.s045_output/n100.r02.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s045_output/n100.r02.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s045_output/n100.r02.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s045_output/n100.r02.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s045_output/n100.r02.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s045_output/n100.r02.s045.reference.fas\" \"n100.r02.s045_output/n100.r02.s045.fq1.fastq\" \"n100.r02.s045_output/n100.r02.s045.fq2.fastq\" | samtools view -bS - > \"n100.r02.s045_output/n100.r02.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s045_output/n100.r02.s045.untrimmed.sorted.bam\" \"n100.r02.s045_output/n100.r02.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s045_output/n100.r02.s045.untrimmed.sorted.bam\" -b \"n100.r02.s045_output/n100.r02.s045.primers.bed\" -p \"n100.r02.s045_output/n100.r02.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam\" \"n100.r02.s045_output/n100.r02.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s045_output/n100.r02.s045.reference.fas\" \"n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam\" > \"n100.r02.s045_output/n100.r02.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s045_output/n100.r02.s045.reference.fas\" --call-indels \"n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam\" > \"n100.r02.s045_output/n100.r02.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam\" > \"n100.r02.s045_output/n100.r02.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s045_output/n100.r02.s045.depth.txt\" \"n100.r02.s045_output/n100.r02.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s045_output/n100.r02.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s045_output/n100.r02.s045.reference.fas\" | bcftools consensus -m \"n100.r02.s045_output/n100.r02.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s045_output/n100.r02.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8654fc3f (flow c91904a4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s094_output\"\n        wget -O \"n100.r02.s094_output/n100.r02.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s094_output/n100.r02.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s094_output/n100.r02.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s094_output/n100.r02.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s094_output/n100.r02.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s094_output/n100.r02.s094.reference.fas\" \"n100.r02.s094_output/n100.r02.s094.fq1.fastq\" \"n100.r02.s094_output/n100.r02.s094.fq2.fastq\" | samtools view -bS - > \"n100.r02.s094_output/n100.r02.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s094_output/n100.r02.s094.untrimmed.sorted.bam\" \"n100.r02.s094_output/n100.r02.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s094_output/n100.r02.s094.untrimmed.sorted.bam\" -b \"n100.r02.s094_output/n100.r02.s094.primers.bed\" -p \"n100.r02.s094_output/n100.r02.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam\" \"n100.r02.s094_output/n100.r02.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s094_output/n100.r02.s094.reference.fas\" \"n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam\" > \"n100.r02.s094_output/n100.r02.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s094_output/n100.r02.s094.reference.fas\" --call-indels \"n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam\" > \"n100.r02.s094_output/n100.r02.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam\" > \"n100.r02.s094_output/n100.r02.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s094_output/n100.r02.s094.depth.txt\" \"n100.r02.s094_output/n100.r02.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s094_output/n100.r02.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s094_output/n100.r02.s094.reference.fas\" | bcftools consensus -m \"n100.r02.s094_output/n100.r02.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s094_output/n100.r02.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 591fadf3 (flow 9edef856): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s087_output\"\n        wget -O \"n100.r02.s087_output/n100.r02.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s087_output/n100.r02.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s087_output/n100.r02.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s087_output/n100.r02.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s087_output/n100.r02.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s087_output/n100.r02.s087.reference.fas\" \"n100.r02.s087_output/n100.r02.s087.fq1.fastq\" \"n100.r02.s087_output/n100.r02.s087.fq2.fastq\" | samtools view -bS - > \"n100.r02.s087_output/n100.r02.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s087_output/n100.r02.s087.untrimmed.sorted.bam\" \"n100.r02.s087_output/n100.r02.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s087_output/n100.r02.s087.untrimmed.sorted.bam\" -b \"n100.r02.s087_output/n100.r02.s087.primers.bed\" -p \"n100.r02.s087_output/n100.r02.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam\" \"n100.r02.s087_output/n100.r02.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s087_output/n100.r02.s087.reference.fas\" \"n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam\" > \"n100.r02.s087_output/n100.r02.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s087_output/n100.r02.s087.reference.fas\" --call-indels \"n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam\" > \"n100.r02.s087_output/n100.r02.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam\" > \"n100.r02.s087_output/n100.r02.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s087_output/n100.r02.s087.depth.txt\" \"n100.r02.s087_output/n100.r02.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s087_output/n100.r02.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s087_output/n100.r02.s087.reference.fas\" | bcftools consensus -m \"n100.r02.s087_output/n100.r02.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s087_output/n100.r02.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 56e751ca (flow 4e926108): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s037_output\"\n        wget -O \"n100.r02.s037_output/n100.r02.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s037_output/n100.r02.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s037_output/n100.r02.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s037_output/n100.r02.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s037_output/n100.r02.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s037_output/n100.r02.s037.reference.fas\" \"n100.r02.s037_output/n100.r02.s037.fq1.fastq\" \"n100.r02.s037_output/n100.r02.s037.fq2.fastq\" | samtools view -bS - > \"n100.r02.s037_output/n100.r02.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s037_output/n100.r02.s037.untrimmed.sorted.bam\" \"n100.r02.s037_output/n100.r02.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s037_output/n100.r02.s037.untrimmed.sorted.bam\" -b \"n100.r02.s037_output/n100.r02.s037.primers.bed\" -p \"n100.r02.s037_output/n100.r02.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam\" \"n100.r02.s037_output/n100.r02.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s037_output/n100.r02.s037.reference.fas\" \"n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam\" > \"n100.r02.s037_output/n100.r02.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s037_output/n100.r02.s037.reference.fas\" --call-indels \"n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam\" > \"n100.r02.s037_output/n100.r02.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam\" > \"n100.r02.s037_output/n100.r02.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s037_output/n100.r02.s037.depth.txt\" \"n100.r02.s037_output/n100.r02.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s037_output/n100.r02.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s037_output/n100.r02.s037.reference.fas\" | bcftools consensus -m \"n100.r02.s037_output/n100.r02.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s037_output/n100.r02.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task f1d0e2d0 (flow 37b5e302): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s088_output\"\n        wget -O \"n100.r02.s088_output/n100.r02.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s088_output/n100.r02.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s088_output/n100.r02.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s088_output/n100.r02.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s088_output/n100.r02.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s088_output/n100.r02.s088.reference.fas\" \"n100.r02.s088_output/n100.r02.s088.fq1.fastq\" \"n100.r02.s088_output/n100.r02.s088.fq2.fastq\" | samtools view -bS - > \"n100.r02.s088_output/n100.r02.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s088_output/n100.r02.s088.untrimmed.sorted.bam\" \"n100.r02.s088_output/n100.r02.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s088_output/n100.r02.s088.untrimmed.sorted.bam\" -b \"n100.r02.s088_output/n100.r02.s088.primers.bed\" -p \"n100.r02.s088_output/n100.r02.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam\" \"n100.r02.s088_output/n100.r02.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s088_output/n100.r02.s088.reference.fas\" \"n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam\" > \"n100.r02.s088_output/n100.r02.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s088_output/n100.r02.s088.reference.fas\" --call-indels \"n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam\" > \"n100.r02.s088_output/n100.r02.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam\" > \"n100.r02.s088_output/n100.r02.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s088_output/n100.r02.s088.depth.txt\" \"n100.r02.s088_output/n100.r02.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s088_output/n100.r02.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s088_output/n100.r02.s088.reference.fas\" | bcftools consensus -m \"n100.r02.s088_output/n100.r02.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s088_output/n100.r02.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0e177187 (flow ce3a6617): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s055_output\"\n        wget -O \"n100.r02.s055_output/n100.r02.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s055_output/n100.r02.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s055_output/n100.r02.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s055_output/n100.r02.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s055_output/n100.r02.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s055_output/n100.r02.s055.reference.fas\" \"n100.r02.s055_output/n100.r02.s055.fq1.fastq\" \"n100.r02.s055_output/n100.r02.s055.fq2.fastq\" | samtools view -bS - > \"n100.r02.s055_output/n100.r02.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s055_output/n100.r02.s055.untrimmed.sorted.bam\" \"n100.r02.s055_output/n100.r02.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s055_output/n100.r02.s055.untrimmed.sorted.bam\" -b \"n100.r02.s055_output/n100.r02.s055.primers.bed\" -p \"n100.r02.s055_output/n100.r02.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam\" \"n100.r02.s055_output/n100.r02.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s055_output/n100.r02.s055.reference.fas\" \"n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam\" > \"n100.r02.s055_output/n100.r02.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s055_output/n100.r02.s055.reference.fas\" --call-indels \"n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam\" > \"n100.r02.s055_output/n100.r02.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam\" > \"n100.r02.s055_output/n100.r02.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s055_output/n100.r02.s055.depth.txt\" \"n100.r02.s055_output/n100.r02.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s055_output/n100.r02.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s055_output/n100.r02.s055.reference.fas\" | bcftools consensus -m \"n100.r02.s055_output/n100.r02.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s055_output/n100.r02.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8c10b81b (flow ef286eca): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s063_output\"\n        wget -O \"n100.r02.s063_output/n100.r02.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s063_output/n100.r02.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s063_output/n100.r02.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s063_output/n100.r02.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s063_output/n100.r02.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s063_output/n100.r02.s063.reference.fas\" \"n100.r02.s063_output/n100.r02.s063.fq1.fastq\" \"n100.r02.s063_output/n100.r02.s063.fq2.fastq\" | samtools view -bS - > \"n100.r02.s063_output/n100.r02.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s063_output/n100.r02.s063.untrimmed.sorted.bam\" \"n100.r02.s063_output/n100.r02.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s063_output/n100.r02.s063.untrimmed.sorted.bam\" -b \"n100.r02.s063_output/n100.r02.s063.primers.bed\" -p \"n100.r02.s063_output/n100.r02.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam\" \"n100.r02.s063_output/n100.r02.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s063_output/n100.r02.s063.reference.fas\" \"n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam\" > \"n100.r02.s063_output/n100.r02.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s063_output/n100.r02.s063.reference.fas\" --call-indels \"n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam\" > \"n100.r02.s063_output/n100.r02.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam\" > \"n100.r02.s063_output/n100.r02.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s063_output/n100.r02.s063.depth.txt\" \"n100.r02.s063_output/n100.r02.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s063_output/n100.r02.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s063_output/n100.r02.s063.reference.fas\" | bcftools consensus -m \"n100.r02.s063_output/n100.r02.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s063_output/n100.r02.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 5a1a8dc5 (flow 7e2f5b09): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s090_output\"\n        wget -O \"n100.r02.s090_output/n100.r02.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s090_output/n100.r02.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s090_output/n100.r02.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s090_output/n100.r02.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s090_output/n100.r02.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s090_output/n100.r02.s090.reference.fas\" \"n100.r02.s090_output/n100.r02.s090.fq1.fastq\" \"n100.r02.s090_output/n100.r02.s090.fq2.fastq\" | samtools view -bS - > \"n100.r02.s090_output/n100.r02.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s090_output/n100.r02.s090.untrimmed.sorted.bam\" \"n100.r02.s090_output/n100.r02.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s090_output/n100.r02.s090.untrimmed.sorted.bam\" -b \"n100.r02.s090_output/n100.r02.s090.primers.bed\" -p \"n100.r02.s090_output/n100.r02.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam\" \"n100.r02.s090_output/n100.r02.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s090_output/n100.r02.s090.reference.fas\" \"n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam\" > \"n100.r02.s090_output/n100.r02.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s090_output/n100.r02.s090.reference.fas\" --call-indels \"n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam\" > \"n100.r02.s090_output/n100.r02.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam\" > \"n100.r02.s090_output/n100.r02.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s090_output/n100.r02.s090.depth.txt\" \"n100.r02.s090_output/n100.r02.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s090_output/n100.r02.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s090_output/n100.r02.s090.reference.fas\" | bcftools consensus -m \"n100.r02.s090_output/n100.r02.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s090_output/n100.r02.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8062f0aa (flow 1d767038): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s003_output\"\n        wget -O \"n100.r02.s003_output/n100.r02.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s003_output/n100.r02.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s003_output/n100.r02.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s003_output/n100.r02.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s003_output/n100.r02.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s003_output/n100.r02.s003.reference.fas\" \"n100.r02.s003_output/n100.r02.s003.fq1.fastq\" \"n100.r02.s003_output/n100.r02.s003.fq2.fastq\" | samtools view -bS - > \"n100.r02.s003_output/n100.r02.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s003_output/n100.r02.s003.untrimmed.sorted.bam\" \"n100.r02.s003_output/n100.r02.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s003_output/n100.r02.s003.untrimmed.sorted.bam\" -b \"n100.r02.s003_output/n100.r02.s003.primers.bed\" -p \"n100.r02.s003_output/n100.r02.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam\" \"n100.r02.s003_output/n100.r02.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s003_output/n100.r02.s003.reference.fas\" \"n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam\" > \"n100.r02.s003_output/n100.r02.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s003_output/n100.r02.s003.reference.fas\" --call-indels \"n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam\" > \"n100.r02.s003_output/n100.r02.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam\" > \"n100.r02.s003_output/n100.r02.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s003_output/n100.r02.s003.depth.txt\" \"n100.r02.s003_output/n100.r02.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s003_output/n100.r02.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s003_output/n100.r02.s003.reference.fas\" | bcftools consensus -m \"n100.r02.s003_output/n100.r02.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s003_output/n100.r02.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0d3f8ca3 (flow a2df0a88): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s018_output\"\n        wget -O \"n100.r02.s018_output/n100.r02.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s018_output/n100.r02.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s018_output/n100.r02.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s018_output/n100.r02.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s018_output/n100.r02.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s018_output/n100.r02.s018.reference.fas\" \"n100.r02.s018_output/n100.r02.s018.fq1.fastq\" \"n100.r02.s018_output/n100.r02.s018.fq2.fastq\" | samtools view -bS - > \"n100.r02.s018_output/n100.r02.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s018_output/n100.r02.s018.untrimmed.sorted.bam\" \"n100.r02.s018_output/n100.r02.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s018_output/n100.r02.s018.untrimmed.sorted.bam\" -b \"n100.r02.s018_output/n100.r02.s018.primers.bed\" -p \"n100.r02.s018_output/n100.r02.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam\" \"n100.r02.s018_output/n100.r02.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s018_output/n100.r02.s018.reference.fas\" \"n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam\" > \"n100.r02.s018_output/n100.r02.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s018_output/n100.r02.s018.reference.fas\" --call-indels \"n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam\" > \"n100.r02.s018_output/n100.r02.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam\" > \"n100.r02.s018_output/n100.r02.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s018_output/n100.r02.s018.depth.txt\" \"n100.r02.s018_output/n100.r02.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s018_output/n100.r02.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s018_output/n100.r02.s018.reference.fas\" | bcftools consensus -m \"n100.r02.s018_output/n100.r02.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s018_output/n100.r02.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 68d632e0 (flow e0a7fa8c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s060_output\"\n        wget -O \"n100.r02.s060_output/n100.r02.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s060_output/n100.r02.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s060_output/n100.r02.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s060_output/n100.r02.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s060_output/n100.r02.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s060_output/n100.r02.s060.reference.fas\" \"n100.r02.s060_output/n100.r02.s060.fq1.fastq\" \"n100.r02.s060_output/n100.r02.s060.fq2.fastq\" | samtools view -bS - > \"n100.r02.s060_output/n100.r02.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s060_output/n100.r02.s060.untrimmed.sorted.bam\" \"n100.r02.s060_output/n100.r02.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s060_output/n100.r02.s060.untrimmed.sorted.bam\" -b \"n100.r02.s060_output/n100.r02.s060.primers.bed\" -p \"n100.r02.s060_output/n100.r02.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam\" \"n100.r02.s060_output/n100.r02.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s060_output/n100.r02.s060.reference.fas\" \"n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam\" > \"n100.r02.s060_output/n100.r02.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s060_output/n100.r02.s060.reference.fas\" --call-indels \"n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam\" > \"n100.r02.s060_output/n100.r02.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam\" > \"n100.r02.s060_output/n100.r02.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s060_output/n100.r02.s060.depth.txt\" \"n100.r02.s060_output/n100.r02.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s060_output/n100.r02.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s060_output/n100.r02.s060.reference.fas\" | bcftools consensus -m \"n100.r02.s060_output/n100.r02.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s060_output/n100.r02.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task e6c82ca0 (flow 2f81b13d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s091_output\"\n        wget -O \"n100.r02.s091_output/n100.r02.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s091_output/n100.r02.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s091_output/n100.r02.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s091_output/n100.r02.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s091_output/n100.r02.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s091_output/n100.r02.s091.reference.fas\" \"n100.r02.s091_output/n100.r02.s091.fq1.fastq\" \"n100.r02.s091_output/n100.r02.s091.fq2.fastq\" | samtools view -bS - > \"n100.r02.s091_output/n100.r02.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s091_output/n100.r02.s091.untrimmed.sorted.bam\" \"n100.r02.s091_output/n100.r02.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s091_output/n100.r02.s091.untrimmed.sorted.bam\" -b \"n100.r02.s091_output/n100.r02.s091.primers.bed\" -p \"n100.r02.s091_output/n100.r02.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam\" \"n100.r02.s091_output/n100.r02.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s091_output/n100.r02.s091.reference.fas\" \"n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam\" > \"n100.r02.s091_output/n100.r02.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s091_output/n100.r02.s091.reference.fas\" --call-indels \"n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam\" > \"n100.r02.s091_output/n100.r02.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam\" > \"n100.r02.s091_output/n100.r02.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s091_output/n100.r02.s091.depth.txt\" \"n100.r02.s091_output/n100.r02.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s091_output/n100.r02.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s091_output/n100.r02.s091.reference.fas\" | bcftools consensus -m \"n100.r02.s091_output/n100.r02.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s091_output/n100.r02.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 1e604ca0 (flow 35fb25c1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s079_output\"\n        wget -O \"n100.r02.s079_output/n100.r02.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s079_output/n100.r02.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s079_output/n100.r02.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s079_output/n100.r02.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s079_output/n100.r02.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s079_output/n100.r02.s079.reference.fas\" \"n100.r02.s079_output/n100.r02.s079.fq1.fastq\" \"n100.r02.s079_output/n100.r02.s079.fq2.fastq\" | samtools view -bS - > \"n100.r02.s079_output/n100.r02.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s079_output/n100.r02.s079.untrimmed.sorted.bam\" \"n100.r02.s079_output/n100.r02.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s079_output/n100.r02.s079.untrimmed.sorted.bam\" -b \"n100.r02.s079_output/n100.r02.s079.primers.bed\" -p \"n100.r02.s079_output/n100.r02.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam\" \"n100.r02.s079_output/n100.r02.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s079_output/n100.r02.s079.reference.fas\" \"n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam\" > \"n100.r02.s079_output/n100.r02.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s079_output/n100.r02.s079.reference.fas\" --call-indels \"n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam\" > \"n100.r02.s079_output/n100.r02.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam\" > \"n100.r02.s079_output/n100.r02.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s079_output/n100.r02.s079.depth.txt\" \"n100.r02.s079_output/n100.r02.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s079_output/n100.r02.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s079_output/n100.r02.s079.reference.fas\" | bcftools consensus -m \"n100.r02.s079_output/n100.r02.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s079_output/n100.r02.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8b7410bb (flow 51541ca9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s017_output\"\n        wget -O \"n100.r02.s017_output/n100.r02.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s017_output/n100.r02.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s017_output/n100.r02.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s017_output/n100.r02.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s017_output/n100.r02.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s017_output/n100.r02.s017.reference.fas\" \"n100.r02.s017_output/n100.r02.s017.fq1.fastq\" \"n100.r02.s017_output/n100.r02.s017.fq2.fastq\" | samtools view -bS - > \"n100.r02.s017_output/n100.r02.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s017_output/n100.r02.s017.untrimmed.sorted.bam\" \"n100.r02.s017_output/n100.r02.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s017_output/n100.r02.s017.untrimmed.sorted.bam\" -b \"n100.r02.s017_output/n100.r02.s017.primers.bed\" -p \"n100.r02.s017_output/n100.r02.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam\" \"n100.r02.s017_output/n100.r02.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s017_output/n100.r02.s017.reference.fas\" \"n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam\" > \"n100.r02.s017_output/n100.r02.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s017_output/n100.r02.s017.reference.fas\" --call-indels \"n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam\" > \"n100.r02.s017_output/n100.r02.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam\" > \"n100.r02.s017_output/n100.r02.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s017_output/n100.r02.s017.depth.txt\" \"n100.r02.s017_output/n100.r02.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s017_output/n100.r02.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s017_output/n100.r02.s017.reference.fas\" | bcftools consensus -m \"n100.r02.s017_output/n100.r02.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s017_output/n100.r02.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 28e75581 (flow e654e99d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s009_output\"\n        wget -O \"n100.r02.s009_output/n100.r02.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s009_output/n100.r02.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s009_output/n100.r02.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s009_output/n100.r02.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s009_output/n100.r02.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s009_output/n100.r02.s009.reference.fas\" \"n100.r02.s009_output/n100.r02.s009.fq1.fastq\" \"n100.r02.s009_output/n100.r02.s009.fq2.fastq\" | samtools view -bS - > \"n100.r02.s009_output/n100.r02.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s009_output/n100.r02.s009.untrimmed.sorted.bam\" \"n100.r02.s009_output/n100.r02.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s009_output/n100.r02.s009.untrimmed.sorted.bam\" -b \"n100.r02.s009_output/n100.r02.s009.primers.bed\" -p \"n100.r02.s009_output/n100.r02.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam\" \"n100.r02.s009_output/n100.r02.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s009_output/n100.r02.s009.reference.fas\" \"n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam\" > \"n100.r02.s009_output/n100.r02.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s009_output/n100.r02.s009.reference.fas\" --call-indels \"n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam\" > \"n100.r02.s009_output/n100.r02.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam\" > \"n100.r02.s009_output/n100.r02.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s009_output/n100.r02.s009.depth.txt\" \"n100.r02.s009_output/n100.r02.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s009_output/n100.r02.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s009_output/n100.r02.s009.reference.fas\" | bcftools consensus -m \"n100.r02.s009_output/n100.r02.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s009_output/n100.r02.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0d089343 (flow e6ad34ee): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s038_output\"\n        wget -O \"n100.r02.s038_output/n100.r02.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s038_output/n100.r02.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s038_output/n100.r02.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s038_output/n100.r02.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s038_output/n100.r02.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s038_output/n100.r02.s038.reference.fas\" \"n100.r02.s038_output/n100.r02.s038.fq1.fastq\" \"n100.r02.s038_output/n100.r02.s038.fq2.fastq\" | samtools view -bS - > \"n100.r02.s038_output/n100.r02.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s038_output/n100.r02.s038.untrimmed.sorted.bam\" \"n100.r02.s038_output/n100.r02.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s038_output/n100.r02.s038.untrimmed.sorted.bam\" -b \"n100.r02.s038_output/n100.r02.s038.primers.bed\" -p \"n100.r02.s038_output/n100.r02.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam\" \"n100.r02.s038_output/n100.r02.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s038_output/n100.r02.s038.reference.fas\" \"n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam\" > \"n100.r02.s038_output/n100.r02.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s038_output/n100.r02.s038.reference.fas\" --call-indels \"n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam\" > \"n100.r02.s038_output/n100.r02.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam\" > \"n100.r02.s038_output/n100.r02.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s038_output/n100.r02.s038.depth.txt\" \"n100.r02.s038_output/n100.r02.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s038_output/n100.r02.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s038_output/n100.r02.s038.reference.fas\" | bcftools consensus -m \"n100.r02.s038_output/n100.r02.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s038_output/n100.r02.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 5f52d829 (flow 23c21f0f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s092_output\"\n        wget -O \"n100.r02.s092_output/n100.r02.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s092_output/n100.r02.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s092_output/n100.r02.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s092_output/n100.r02.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s092_output/n100.r02.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s092_output/n100.r02.s092.reference.fas\" \"n100.r02.s092_output/n100.r02.s092.fq1.fastq\" \"n100.r02.s092_output/n100.r02.s092.fq2.fastq\" | samtools view -bS - > \"n100.r02.s092_output/n100.r02.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s092_output/n100.r02.s092.untrimmed.sorted.bam\" \"n100.r02.s092_output/n100.r02.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s092_output/n100.r02.s092.untrimmed.sorted.bam\" -b \"n100.r02.s092_output/n100.r02.s092.primers.bed\" -p \"n100.r02.s092_output/n100.r02.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam\" \"n100.r02.s092_output/n100.r02.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s092_output/n100.r02.s092.reference.fas\" \"n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam\" > \"n100.r02.s092_output/n100.r02.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s092_output/n100.r02.s092.reference.fas\" --call-indels \"n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam\" > \"n100.r02.s092_output/n100.r02.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam\" > \"n100.r02.s092_output/n100.r02.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s092_output/n100.r02.s092.depth.txt\" \"n100.r02.s092_output/n100.r02.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s092_output/n100.r02.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s092_output/n100.r02.s092.reference.fas\" | bcftools consensus -m \"n100.r02.s092_output/n100.r02.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s092_output/n100.r02.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 2feb3f25 (flow 26422009): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s097_output\"\n        wget -O \"n100.r02.s097_output/n100.r02.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s097_output/n100.r02.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s097_output/n100.r02.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s097_output/n100.r02.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s097_output/n100.r02.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s097_output/n100.r02.s097.reference.fas\" \"n100.r02.s097_output/n100.r02.s097.fq1.fastq\" \"n100.r02.s097_output/n100.r02.s097.fq2.fastq\" | samtools view -bS - > \"n100.r02.s097_output/n100.r02.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s097_output/n100.r02.s097.untrimmed.sorted.bam\" \"n100.r02.s097_output/n100.r02.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s097_output/n100.r02.s097.untrimmed.sorted.bam\" -b \"n100.r02.s097_output/n100.r02.s097.primers.bed\" -p \"n100.r02.s097_output/n100.r02.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam\" \"n100.r02.s097_output/n100.r02.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s097_output/n100.r02.s097.reference.fas\" \"n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam\" > \"n100.r02.s097_output/n100.r02.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s097_output/n100.r02.s097.reference.fas\" --call-indels \"n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam\" > \"n100.r02.s097_output/n100.r02.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam\" > \"n100.r02.s097_output/n100.r02.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s097_output/n100.r02.s097.depth.txt\" \"n100.r02.s097_output/n100.r02.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s097_output/n100.r02.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s097_output/n100.r02.s097.reference.fas\" | bcftools consensus -m \"n100.r02.s097_output/n100.r02.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s097_output/n100.r02.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 7018ad68 (flow 0cad19f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s099_output\"\n        wget -O \"n100.r02.s099_output/n100.r02.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s099_output/n100.r02.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s099_output/n100.r02.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s099_output/n100.r02.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s099_output/n100.r02.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s099_output/n100.r02.s099.reference.fas\" \"n100.r02.s099_output/n100.r02.s099.fq1.fastq\" \"n100.r02.s099_output/n100.r02.s099.fq2.fastq\" | samtools view -bS - > \"n100.r02.s099_output/n100.r02.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s099_output/n100.r02.s099.untrimmed.sorted.bam\" \"n100.r02.s099_output/n100.r02.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s099_output/n100.r02.s099.untrimmed.sorted.bam\" -b \"n100.r02.s099_output/n100.r02.s099.primers.bed\" -p \"n100.r02.s099_output/n100.r02.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam\" \"n100.r02.s099_output/n100.r02.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s099_output/n100.r02.s099.reference.fas\" \"n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam\" > \"n100.r02.s099_output/n100.r02.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s099_output/n100.r02.s099.reference.fas\" --call-indels \"n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam\" > \"n100.r02.s099_output/n100.r02.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam\" > \"n100.r02.s099_output/n100.r02.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s099_output/n100.r02.s099.depth.txt\" \"n100.r02.s099_output/n100.r02.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s099_output/n100.r02.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s099_output/n100.r02.s099.reference.fas\" | bcftools consensus -m \"n100.r02.s099_output/n100.r02.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s099_output/n100.r02.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 9b94a5e4 (flow 834f80b2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s030_output\"\n        wget -O \"n100.r02.s030_output/n100.r02.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s030_output/n100.r02.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s030_output/n100.r02.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s030_output/n100.r02.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s030_output/n100.r02.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s030_output/n100.r02.s030.reference.fas\" \"n100.r02.s030_output/n100.r02.s030.fq1.fastq\" \"n100.r02.s030_output/n100.r02.s030.fq2.fastq\" | samtools view -bS - > \"n100.r02.s030_output/n100.r02.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s030_output/n100.r02.s030.untrimmed.sorted.bam\" \"n100.r02.s030_output/n100.r02.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s030_output/n100.r02.s030.untrimmed.sorted.bam\" -b \"n100.r02.s030_output/n100.r02.s030.primers.bed\" -p \"n100.r02.s030_output/n100.r02.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam\" \"n100.r02.s030_output/n100.r02.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s030_output/n100.r02.s030.reference.fas\" \"n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam\" > \"n100.r02.s030_output/n100.r02.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s030_output/n100.r02.s030.reference.fas\" --call-indels \"n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam\" > \"n100.r02.s030_output/n100.r02.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam\" > \"n100.r02.s030_output/n100.r02.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s030_output/n100.r02.s030.depth.txt\" \"n100.r02.s030_output/n100.r02.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s030_output/n100.r02.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s030_output/n100.r02.s030.reference.fas\" | bcftools consensus -m \"n100.r02.s030_output/n100.r02.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s030_output/n100.r02.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 44851b9f (flow 47ed53a8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s050_output\"\n        wget -O \"n100.r02.s050_output/n100.r02.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s050_output/n100.r02.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s050_output/n100.r02.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s050_output/n100.r02.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s050_output/n100.r02.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s050_output/n100.r02.s050.reference.fas\" \"n100.r02.s050_output/n100.r02.s050.fq1.fastq\" \"n100.r02.s050_output/n100.r02.s050.fq2.fastq\" | samtools view -bS - > \"n100.r02.s050_output/n100.r02.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s050_output/n100.r02.s050.untrimmed.sorted.bam\" \"n100.r02.s050_output/n100.r02.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s050_output/n100.r02.s050.untrimmed.sorted.bam\" -b \"n100.r02.s050_output/n100.r02.s050.primers.bed\" -p \"n100.r02.s050_output/n100.r02.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam\" \"n100.r02.s050_output/n100.r02.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s050_output/n100.r02.s050.reference.fas\" \"n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam\" > \"n100.r02.s050_output/n100.r02.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s050_output/n100.r02.s050.reference.fas\" --call-indels \"n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam\" > \"n100.r02.s050_output/n100.r02.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam\" > \"n100.r02.s050_output/n100.r02.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s050_output/n100.r02.s050.depth.txt\" \"n100.r02.s050_output/n100.r02.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s050_output/n100.r02.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s050_output/n100.r02.s050.reference.fas\" | bcftools consensus -m \"n100.r02.s050_output/n100.r02.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s050_output/n100.r02.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 47667179 (flow cca7236b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s068_output\"\n        wget -O \"n100.r02.s068_output/n100.r02.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s068_output/n100.r02.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s068_output/n100.r02.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s068_output/n100.r02.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s068_output/n100.r02.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s068_output/n100.r02.s068.reference.fas\" \"n100.r02.s068_output/n100.r02.s068.fq1.fastq\" \"n100.r02.s068_output/n100.r02.s068.fq2.fastq\" | samtools view -bS - > \"n100.r02.s068_output/n100.r02.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s068_output/n100.r02.s068.untrimmed.sorted.bam\" \"n100.r02.s068_output/n100.r02.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s068_output/n100.r02.s068.untrimmed.sorted.bam\" -b \"n100.r02.s068_output/n100.r02.s068.primers.bed\" -p \"n100.r02.s068_output/n100.r02.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam\" \"n100.r02.s068_output/n100.r02.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s068_output/n100.r02.s068.reference.fas\" \"n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam\" > \"n100.r02.s068_output/n100.r02.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s068_output/n100.r02.s068.reference.fas\" --call-indels \"n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam\" > \"n100.r02.s068_output/n100.r02.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam\" > \"n100.r02.s068_output/n100.r02.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s068_output/n100.r02.s068.depth.txt\" \"n100.r02.s068_output/n100.r02.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s068_output/n100.r02.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s068_output/n100.r02.s068.reference.fas\" | bcftools consensus -m \"n100.r02.s068_output/n100.r02.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s068_output/n100.r02.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 4bda52eb (flow b3c6f94e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s100_output\"\n        wget -O \"n100.r02.s100_output/n100.r02.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s100_output/n100.r02.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s100_output/n100.r02.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s100_output/n100.r02.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s100_output/n100.r02.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s100_output/n100.r02.s100.reference.fas\" \"n100.r02.s100_output/n100.r02.s100.fq1.fastq\" \"n100.r02.s100_output/n100.r02.s100.fq2.fastq\" | samtools view -bS - > \"n100.r02.s100_output/n100.r02.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s100_output/n100.r02.s100.untrimmed.sorted.bam\" \"n100.r02.s100_output/n100.r02.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s100_output/n100.r02.s100.untrimmed.sorted.bam\" -b \"n100.r02.s100_output/n100.r02.s100.primers.bed\" -p \"n100.r02.s100_output/n100.r02.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam\" \"n100.r02.s100_output/n100.r02.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s100_output/n100.r02.s100.reference.fas\" \"n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam\" > \"n100.r02.s100_output/n100.r02.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s100_output/n100.r02.s100.reference.fas\" --call-indels \"n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam\" > \"n100.r02.s100_output/n100.r02.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam\" > \"n100.r02.s100_output/n100.r02.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s100_output/n100.r02.s100.depth.txt\" \"n100.r02.s100_output/n100.r02.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s100_output/n100.r02.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s100_output/n100.r02.s100.reference.fas\" | bcftools consensus -m \"n100.r02.s100_output/n100.r02.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s100_output/n100.r02.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task d06e59c3 (flow 57bcabea): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s007_output\"\n        wget -O \"n100.r02.s007_output/n100.r02.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s007_output/n100.r02.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s007_output/n100.r02.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s007_output/n100.r02.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s007_output/n100.r02.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s007_output/n100.r02.s007.reference.fas\" \"n100.r02.s007_output/n100.r02.s007.fq1.fastq\" \"n100.r02.s007_output/n100.r02.s007.fq2.fastq\" | samtools view -bS - > \"n100.r02.s007_output/n100.r02.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s007_output/n100.r02.s007.untrimmed.sorted.bam\" \"n100.r02.s007_output/n100.r02.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s007_output/n100.r02.s007.untrimmed.sorted.bam\" -b \"n100.r02.s007_output/n100.r02.s007.primers.bed\" -p \"n100.r02.s007_output/n100.r02.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam\" \"n100.r02.s007_output/n100.r02.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s007_output/n100.r02.s007.reference.fas\" \"n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam\" > \"n100.r02.s007_output/n100.r02.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s007_output/n100.r02.s007.reference.fas\" --call-indels \"n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam\" > \"n100.r02.s007_output/n100.r02.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam\" > \"n100.r02.s007_output/n100.r02.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s007_output/n100.r02.s007.depth.txt\" \"n100.r02.s007_output/n100.r02.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s007_output/n100.r02.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s007_output/n100.r02.s007.reference.fas\" | bcftools consensus -m \"n100.r02.s007_output/n100.r02.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s007_output/n100.r02.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task f748f409 (flow 46797130): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s019_output\"\n        wget -O \"n100.r02.s019_output/n100.r02.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s019_output/n100.r02.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s019_output/n100.r02.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s019_output/n100.r02.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s019_output/n100.r02.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s019_output/n100.r02.s019.reference.fas\" \"n100.r02.s019_output/n100.r02.s019.fq1.fastq\" \"n100.r02.s019_output/n100.r02.s019.fq2.fastq\" | samtools view -bS - > \"n100.r02.s019_output/n100.r02.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s019_output/n100.r02.s019.untrimmed.sorted.bam\" \"n100.r02.s019_output/n100.r02.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s019_output/n100.r02.s019.untrimmed.sorted.bam\" -b \"n100.r02.s019_output/n100.r02.s019.primers.bed\" -p \"n100.r02.s019_output/n100.r02.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam\" \"n100.r02.s019_output/n100.r02.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s019_output/n100.r02.s019.reference.fas\" \"n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam\" > \"n100.r02.s019_output/n100.r02.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s019_output/n100.r02.s019.reference.fas\" --call-indels \"n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam\" > \"n100.r02.s019_output/n100.r02.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam\" > \"n100.r02.s019_output/n100.r02.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s019_output/n100.r02.s019.depth.txt\" \"n100.r02.s019_output/n100.r02.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s019_output/n100.r02.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s019_output/n100.r02.s019.reference.fas\" | bcftools consensus -m \"n100.r02.s019_output/n100.r02.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s019_output/n100.r02.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task fd672bab (flow d90e3629): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s049_output\"\n        wget -O \"n100.r02.s049_output/n100.r02.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s049_output/n100.r02.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s049_output/n100.r02.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s049_output/n100.r02.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s049_output/n100.r02.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s049_output/n100.r02.s049.reference.fas\" \"n100.r02.s049_output/n100.r02.s049.fq1.fastq\" \"n100.r02.s049_output/n100.r02.s049.fq2.fastq\" | samtools view -bS - > \"n100.r02.s049_output/n100.r02.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s049_output/n100.r02.s049.untrimmed.sorted.bam\" \"n100.r02.s049_output/n100.r02.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s049_output/n100.r02.s049.untrimmed.sorted.bam\" -b \"n100.r02.s049_output/n100.r02.s049.primers.bed\" -p \"n100.r02.s049_output/n100.r02.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam\" \"n100.r02.s049_output/n100.r02.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s049_output/n100.r02.s049.reference.fas\" \"n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam\" > \"n100.r02.s049_output/n100.r02.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s049_output/n100.r02.s049.reference.fas\" --call-indels \"n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam\" > \"n100.r02.s049_output/n100.r02.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam\" > \"n100.r02.s049_output/n100.r02.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s049_output/n100.r02.s049.depth.txt\" \"n100.r02.s049_output/n100.r02.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s049_output/n100.r02.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s049_output/n100.r02.s049.reference.fas\" | bcftools consensus -m \"n100.r02.s049_output/n100.r02.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s049_output/n100.r02.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 7a765bf2 (flow cde5ab27): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s044_output\"\n        wget -O \"n100.r02.s044_output/n100.r02.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s044_output/n100.r02.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s044_output/n100.r02.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s044_output/n100.r02.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s044_output/n100.r02.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s044_output/n100.r02.s044.reference.fas\" \"n100.r02.s044_output/n100.r02.s044.fq1.fastq\" \"n100.r02.s044_output/n100.r02.s044.fq2.fastq\" | samtools view -bS - > \"n100.r02.s044_output/n100.r02.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s044_output/n100.r02.s044.untrimmed.sorted.bam\" \"n100.r02.s044_output/n100.r02.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s044_output/n100.r02.s044.untrimmed.sorted.bam\" -b \"n100.r02.s044_output/n100.r02.s044.primers.bed\" -p \"n100.r02.s044_output/n100.r02.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam\" \"n100.r02.s044_output/n100.r02.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s044_output/n100.r02.s044.reference.fas\" \"n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam\" > \"n100.r02.s044_output/n100.r02.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s044_output/n100.r02.s044.reference.fas\" --call-indels \"n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam\" > \"n100.r02.s044_output/n100.r02.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam\" > \"n100.r02.s044_output/n100.r02.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s044_output/n100.r02.s044.depth.txt\" \"n100.r02.s044_output/n100.r02.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s044_output/n100.r02.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s044_output/n100.r02.s044.reference.fas\" | bcftools consensus -m \"n100.r02.s044_output/n100.r02.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s044_output/n100.r02.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0e861905 (flow 7a724582): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s069_output\"\n        wget -O \"n100.r02.s069_output/n100.r02.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s069_output/n100.r02.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s069_output/n100.r02.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s069_output/n100.r02.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s069_output/n100.r02.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s069_output/n100.r02.s069.reference.fas\" \"n100.r02.s069_output/n100.r02.s069.fq1.fastq\" \"n100.r02.s069_output/n100.r02.s069.fq2.fastq\" | samtools view -bS - > \"n100.r02.s069_output/n100.r02.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s069_output/n100.r02.s069.untrimmed.sorted.bam\" \"n100.r02.s069_output/n100.r02.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s069_output/n100.r02.s069.untrimmed.sorted.bam\" -b \"n100.r02.s069_output/n100.r02.s069.primers.bed\" -p \"n100.r02.s069_output/n100.r02.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam\" \"n100.r02.s069_output/n100.r02.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s069_output/n100.r02.s069.reference.fas\" \"n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam\" > \"n100.r02.s069_output/n100.r02.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s069_output/n100.r02.s069.reference.fas\" --call-indels \"n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam\" > \"n100.r02.s069_output/n100.r02.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam\" > \"n100.r02.s069_output/n100.r02.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s069_output/n100.r02.s069.depth.txt\" \"n100.r02.s069_output/n100.r02.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s069_output/n100.r02.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s069_output/n100.r02.s069.reference.fas\" | bcftools consensus -m \"n100.r02.s069_output/n100.r02.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s069_output/n100.r02.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 69a372ec (flow c6cdb5ad): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s095_output\"\n        wget -O \"n100.r02.s095_output/n100.r02.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s095_output/n100.r02.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s095_output/n100.r02.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s095_output/n100.r02.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s095_output/n100.r02.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s095_output/n100.r02.s095.reference.fas\" \"n100.r02.s095_output/n100.r02.s095.fq1.fastq\" \"n100.r02.s095_output/n100.r02.s095.fq2.fastq\" | samtools view -bS - > \"n100.r02.s095_output/n100.r02.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s095_output/n100.r02.s095.untrimmed.sorted.bam\" \"n100.r02.s095_output/n100.r02.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s095_output/n100.r02.s095.untrimmed.sorted.bam\" -b \"n100.r02.s095_output/n100.r02.s095.primers.bed\" -p \"n100.r02.s095_output/n100.r02.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam\" \"n100.r02.s095_output/n100.r02.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s095_output/n100.r02.s095.reference.fas\" \"n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam\" > \"n100.r02.s095_output/n100.r02.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s095_output/n100.r02.s095.reference.fas\" --call-indels \"n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam\" > \"n100.r02.s095_output/n100.r02.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam\" > \"n100.r02.s095_output/n100.r02.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s095_output/n100.r02.s095.depth.txt\" \"n100.r02.s095_output/n100.r02.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s095_output/n100.r02.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s095_output/n100.r02.s095.reference.fas\" | bcftools consensus -m \"n100.r02.s095_output/n100.r02.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s095_output/n100.r02.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task fbd9cfd4 (flow f8af3684): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s020_output\"\n        wget -O \"n100.r02.s020_output/n100.r02.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s020_output/n100.r02.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s020_output/n100.r02.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s020_output/n100.r02.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s020_output/n100.r02.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s020_output/n100.r02.s020.reference.fas\" \"n100.r02.s020_output/n100.r02.s020.fq1.fastq\" \"n100.r02.s020_output/n100.r02.s020.fq2.fastq\" | samtools view -bS - > \"n100.r02.s020_output/n100.r02.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s020_output/n100.r02.s020.untrimmed.sorted.bam\" \"n100.r02.s020_output/n100.r02.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s020_output/n100.r02.s020.untrimmed.sorted.bam\" -b \"n100.r02.s020_output/n100.r02.s020.primers.bed\" -p \"n100.r02.s020_output/n100.r02.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam\" \"n100.r02.s020_output/n100.r02.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s020_output/n100.r02.s020.reference.fas\" \"n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam\" > \"n100.r02.s020_output/n100.r02.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s020_output/n100.r02.s020.reference.fas\" --call-indels \"n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam\" > \"n100.r02.s020_output/n100.r02.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam\" > \"n100.r02.s020_output/n100.r02.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s020_output/n100.r02.s020.depth.txt\" \"n100.r02.s020_output/n100.r02.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s020_output/n100.r02.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s020_output/n100.r02.s020.reference.fas\" | bcftools consensus -m \"n100.r02.s020_output/n100.r02.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s020_output/n100.r02.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task bb6c2cd9 (flow 2f6e45f8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s058_output\"\n        wget -O \"n100.r02.s058_output/n100.r02.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s058_output/n100.r02.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s058_output/n100.r02.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s058_output/n100.r02.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s058_output/n100.r02.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s058_output/n100.r02.s058.reference.fas\" \"n100.r02.s058_output/n100.r02.s058.fq1.fastq\" \"n100.r02.s058_output/n100.r02.s058.fq2.fastq\" | samtools view -bS - > \"n100.r02.s058_output/n100.r02.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s058_output/n100.r02.s058.untrimmed.sorted.bam\" \"n100.r02.s058_output/n100.r02.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s058_output/n100.r02.s058.untrimmed.sorted.bam\" -b \"n100.r02.s058_output/n100.r02.s058.primers.bed\" -p \"n100.r02.s058_output/n100.r02.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam\" \"n100.r02.s058_output/n100.r02.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s058_output/n100.r02.s058.reference.fas\" \"n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam\" > \"n100.r02.s058_output/n100.r02.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s058_output/n100.r02.s058.reference.fas\" --call-indels \"n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam\" > \"n100.r02.s058_output/n100.r02.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam\" > \"n100.r02.s058_output/n100.r02.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s058_output/n100.r02.s058.depth.txt\" \"n100.r02.s058_output/n100.r02.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s058_output/n100.r02.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s058_output/n100.r02.s058.reference.fas\" | bcftools consensus -m \"n100.r02.s058_output/n100.r02.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s058_output/n100.r02.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task fc432408 (flow 28e5d9c6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s083_output\"\n        wget -O \"n100.r02.s083_output/n100.r02.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s083_output/n100.r02.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s083_output/n100.r02.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s083_output/n100.r02.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s083_output/n100.r02.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s083_output/n100.r02.s083.reference.fas\" \"n100.r02.s083_output/n100.r02.s083.fq1.fastq\" \"n100.r02.s083_output/n100.r02.s083.fq2.fastq\" | samtools view -bS - > \"n100.r02.s083_output/n100.r02.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s083_output/n100.r02.s083.untrimmed.sorted.bam\" \"n100.r02.s083_output/n100.r02.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s083_output/n100.r02.s083.untrimmed.sorted.bam\" -b \"n100.r02.s083_output/n100.r02.s083.primers.bed\" -p \"n100.r02.s083_output/n100.r02.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam\" \"n100.r02.s083_output/n100.r02.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s083_output/n100.r02.s083.reference.fas\" \"n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam\" > \"n100.r02.s083_output/n100.r02.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s083_output/n100.r02.s083.reference.fas\" --call-indels \"n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam\" > \"n100.r02.s083_output/n100.r02.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam\" > \"n100.r02.s083_output/n100.r02.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s083_output/n100.r02.s083.depth.txt\" \"n100.r02.s083_output/n100.r02.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s083_output/n100.r02.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s083_output/n100.r02.s083.reference.fas\" | bcftools consensus -m \"n100.r02.s083_output/n100.r02.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s083_output/n100.r02.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 2af220b8 (flow f94e4acc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s022_output\"\n        wget -O \"n100.r02.s022_output/n100.r02.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s022_output/n100.r02.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s022_output/n100.r02.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s022_output/n100.r02.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s022_output/n100.r02.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s022_output/n100.r02.s022.reference.fas\" \"n100.r02.s022_output/n100.r02.s022.fq1.fastq\" \"n100.r02.s022_output/n100.r02.s022.fq2.fastq\" | samtools view -bS - > \"n100.r02.s022_output/n100.r02.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s022_output/n100.r02.s022.untrimmed.sorted.bam\" \"n100.r02.s022_output/n100.r02.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s022_output/n100.r02.s022.untrimmed.sorted.bam\" -b \"n100.r02.s022_output/n100.r02.s022.primers.bed\" -p \"n100.r02.s022_output/n100.r02.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam\" \"n100.r02.s022_output/n100.r02.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s022_output/n100.r02.s022.reference.fas\" \"n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam\" > \"n100.r02.s022_output/n100.r02.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s022_output/n100.r02.s022.reference.fas\" --call-indels \"n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam\" > \"n100.r02.s022_output/n100.r02.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam\" > \"n100.r02.s022_output/n100.r02.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s022_output/n100.r02.s022.depth.txt\" \"n100.r02.s022_output/n100.r02.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s022_output/n100.r02.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s022_output/n100.r02.s022.reference.fas\" | bcftools consensus -m \"n100.r02.s022_output/n100.r02.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s022_output/n100.r02.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 87971b75 (flow f98fa6a9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s041_output\"\n        wget -O \"n100.r02.s041_output/n100.r02.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s041_output/n100.r02.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s041_output/n100.r02.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s041_output/n100.r02.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s041_output/n100.r02.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s041_output/n100.r02.s041.reference.fas\" \"n100.r02.s041_output/n100.r02.s041.fq1.fastq\" \"n100.r02.s041_output/n100.r02.s041.fq2.fastq\" | samtools view -bS - > \"n100.r02.s041_output/n100.r02.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s041_output/n100.r02.s041.untrimmed.sorted.bam\" \"n100.r02.s041_output/n100.r02.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s041_output/n100.r02.s041.untrimmed.sorted.bam\" -b \"n100.r02.s041_output/n100.r02.s041.primers.bed\" -p \"n100.r02.s041_output/n100.r02.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam\" \"n100.r02.s041_output/n100.r02.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s041_output/n100.r02.s041.reference.fas\" \"n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam\" > \"n100.r02.s041_output/n100.r02.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s041_output/n100.r02.s041.reference.fas\" --call-indels \"n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam\" > \"n100.r02.s041_output/n100.r02.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam\" > \"n100.r02.s041_output/n100.r02.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s041_output/n100.r02.s041.depth.txt\" \"n100.r02.s041_output/n100.r02.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s041_output/n100.r02.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s041_output/n100.r02.s041.reference.fas\" | bcftools consensus -m \"n100.r02.s041_output/n100.r02.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s041_output/n100.r02.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 7c966493 (flow 0819d118): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s010_output\"\n        wget -O \"n100.r02.s010_output/n100.r02.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s010_output/n100.r02.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s010_output/n100.r02.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s010_output/n100.r02.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s010_output/n100.r02.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s010_output/n100.r02.s010.reference.fas\" \"n100.r02.s010_output/n100.r02.s010.fq1.fastq\" \"n100.r02.s010_output/n100.r02.s010.fq2.fastq\" | samtools view -bS - > \"n100.r02.s010_output/n100.r02.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s010_output/n100.r02.s010.untrimmed.sorted.bam\" \"n100.r02.s010_output/n100.r02.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s010_output/n100.r02.s010.untrimmed.sorted.bam\" -b \"n100.r02.s010_output/n100.r02.s010.primers.bed\" -p \"n100.r02.s010_output/n100.r02.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam\" \"n100.r02.s010_output/n100.r02.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s010_output/n100.r02.s010.reference.fas\" \"n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam\" > \"n100.r02.s010_output/n100.r02.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s010_output/n100.r02.s010.reference.fas\" --call-indels \"n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam\" > \"n100.r02.s010_output/n100.r02.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam\" > \"n100.r02.s010_output/n100.r02.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s010_output/n100.r02.s010.depth.txt\" \"n100.r02.s010_output/n100.r02.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s010_output/n100.r02.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s010_output/n100.r02.s010.reference.fas\" | bcftools consensus -m \"n100.r02.s010_output/n100.r02.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s010_output/n100.r02.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task fde90f32 (flow 470f3008): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s076_output\"\n        wget -O \"n100.r02.s076_output/n100.r02.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s076_output/n100.r02.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s076_output/n100.r02.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s076_output/n100.r02.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s076_output/n100.r02.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s076_output/n100.r02.s076.reference.fas\" \"n100.r02.s076_output/n100.r02.s076.fq1.fastq\" \"n100.r02.s076_output/n100.r02.s076.fq2.fastq\" | samtools view -bS - > \"n100.r02.s076_output/n100.r02.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s076_output/n100.r02.s076.untrimmed.sorted.bam\" \"n100.r02.s076_output/n100.r02.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s076_output/n100.r02.s076.untrimmed.sorted.bam\" -b \"n100.r02.s076_output/n100.r02.s076.primers.bed\" -p \"n100.r02.s076_output/n100.r02.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam\" \"n100.r02.s076_output/n100.r02.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s076_output/n100.r02.s076.reference.fas\" \"n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam\" > \"n100.r02.s076_output/n100.r02.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s076_output/n100.r02.s076.reference.fas\" --call-indels \"n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam\" > \"n100.r02.s076_output/n100.r02.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam\" > \"n100.r02.s076_output/n100.r02.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s076_output/n100.r02.s076.depth.txt\" \"n100.r02.s076_output/n100.r02.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s076_output/n100.r02.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s076_output/n100.r02.s076.reference.fas\" | bcftools consensus -m \"n100.r02.s076_output/n100.r02.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s076_output/n100.r02.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0b7fb97b (flow 874b9577): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s082_output\"\n        wget -O \"n100.r02.s082_output/n100.r02.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s082_output/n100.r02.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s082_output/n100.r02.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s082_output/n100.r02.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s082_output/n100.r02.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s082_output/n100.r02.s082.reference.fas\" \"n100.r02.s082_output/n100.r02.s082.fq1.fastq\" \"n100.r02.s082_output/n100.r02.s082.fq2.fastq\" | samtools view -bS - > \"n100.r02.s082_output/n100.r02.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s082_output/n100.r02.s082.untrimmed.sorted.bam\" \"n100.r02.s082_output/n100.r02.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s082_output/n100.r02.s082.untrimmed.sorted.bam\" -b \"n100.r02.s082_output/n100.r02.s082.primers.bed\" -p \"n100.r02.s082_output/n100.r02.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam\" \"n100.r02.s082_output/n100.r02.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s082_output/n100.r02.s082.reference.fas\" \"n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam\" > \"n100.r02.s082_output/n100.r02.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s082_output/n100.r02.s082.reference.fas\" --call-indels \"n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam\" > \"n100.r02.s082_output/n100.r02.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam\" > \"n100.r02.s082_output/n100.r02.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s082_output/n100.r02.s082.depth.txt\" \"n100.r02.s082_output/n100.r02.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s082_output/n100.r02.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s082_output/n100.r02.s082.reference.fas\" | bcftools consensus -m \"n100.r02.s082_output/n100.r02.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s082_output/n100.r02.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 94dedf3c (flow d1fb7eba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s023_output\"\n        wget -O \"n100.r02.s023_output/n100.r02.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s023_output/n100.r02.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s023_output/n100.r02.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s023_output/n100.r02.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s023_output/n100.r02.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s023_output/n100.r02.s023.reference.fas\" \"n100.r02.s023_output/n100.r02.s023.fq1.fastq\" \"n100.r02.s023_output/n100.r02.s023.fq2.fastq\" | samtools view -bS - > \"n100.r02.s023_output/n100.r02.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s023_output/n100.r02.s023.untrimmed.sorted.bam\" \"n100.r02.s023_output/n100.r02.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s023_output/n100.r02.s023.untrimmed.sorted.bam\" -b \"n100.r02.s023_output/n100.r02.s023.primers.bed\" -p \"n100.r02.s023_output/n100.r02.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam\" \"n100.r02.s023_output/n100.r02.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s023_output/n100.r02.s023.reference.fas\" \"n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam\" > \"n100.r02.s023_output/n100.r02.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s023_output/n100.r02.s023.reference.fas\" --call-indels \"n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam\" > \"n100.r02.s023_output/n100.r02.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam\" > \"n100.r02.s023_output/n100.r02.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s023_output/n100.r02.s023.depth.txt\" \"n100.r02.s023_output/n100.r02.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s023_output/n100.r02.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s023_output/n100.r02.s023.reference.fas\" | bcftools consensus -m \"n100.r02.s023_output/n100.r02.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s023_output/n100.r02.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 5b2e9034 (flow 63c5e72c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s028_output\"\n        wget -O \"n100.r02.s028_output/n100.r02.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s028_output/n100.r02.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s028_output/n100.r02.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s028_output/n100.r02.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s028_output/n100.r02.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s028_output/n100.r02.s028.reference.fas\" \"n100.r02.s028_output/n100.r02.s028.fq1.fastq\" \"n100.r02.s028_output/n100.r02.s028.fq2.fastq\" | samtools view -bS - > \"n100.r02.s028_output/n100.r02.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s028_output/n100.r02.s028.untrimmed.sorted.bam\" \"n100.r02.s028_output/n100.r02.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s028_output/n100.r02.s028.untrimmed.sorted.bam\" -b \"n100.r02.s028_output/n100.r02.s028.primers.bed\" -p \"n100.r02.s028_output/n100.r02.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam\" \"n100.r02.s028_output/n100.r02.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s028_output/n100.r02.s028.reference.fas\" \"n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam\" > \"n100.r02.s028_output/n100.r02.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s028_output/n100.r02.s028.reference.fas\" --call-indels \"n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam\" > \"n100.r02.s028_output/n100.r02.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam\" > \"n100.r02.s028_output/n100.r02.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s028_output/n100.r02.s028.depth.txt\" \"n100.r02.s028_output/n100.r02.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s028_output/n100.r02.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s028_output/n100.r02.s028.reference.fas\" | bcftools consensus -m \"n100.r02.s028_output/n100.r02.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s028_output/n100.r02.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task bb07980b (flow b78d6362): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s002_output\"\n        wget -O \"n100.r02.s002_output/n100.r02.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s002_output/n100.r02.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s002_output/n100.r02.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s002_output/n100.r02.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s002_output/n100.r02.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s002_output/n100.r02.s002.reference.fas\" \"n100.r02.s002_output/n100.r02.s002.fq1.fastq\" \"n100.r02.s002_output/n100.r02.s002.fq2.fastq\" | samtools view -bS - > \"n100.r02.s002_output/n100.r02.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s002_output/n100.r02.s002.untrimmed.sorted.bam\" \"n100.r02.s002_output/n100.r02.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s002_output/n100.r02.s002.untrimmed.sorted.bam\" -b \"n100.r02.s002_output/n100.r02.s002.primers.bed\" -p \"n100.r02.s002_output/n100.r02.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam\" \"n100.r02.s002_output/n100.r02.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s002_output/n100.r02.s002.reference.fas\" \"n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam\" > \"n100.r02.s002_output/n100.r02.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s002_output/n100.r02.s002.reference.fas\" --call-indels \"n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam\" > \"n100.r02.s002_output/n100.r02.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam\" > \"n100.r02.s002_output/n100.r02.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s002_output/n100.r02.s002.depth.txt\" \"n100.r02.s002_output/n100.r02.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s002_output/n100.r02.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s002_output/n100.r02.s002.reference.fas\" | bcftools consensus -m \"n100.r02.s002_output/n100.r02.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s002_output/n100.r02.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 3b6becc8 (flow 3d8a8283): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s031_output\"\n        wget -O \"n100.r02.s031_output/n100.r02.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s031_output/n100.r02.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s031_output/n100.r02.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s031_output/n100.r02.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s031_output/n100.r02.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s031_output/n100.r02.s031.reference.fas\" \"n100.r02.s031_output/n100.r02.s031.fq1.fastq\" \"n100.r02.s031_output/n100.r02.s031.fq2.fastq\" | samtools view -bS - > \"n100.r02.s031_output/n100.r02.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s031_output/n100.r02.s031.untrimmed.sorted.bam\" \"n100.r02.s031_output/n100.r02.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s031_output/n100.r02.s031.untrimmed.sorted.bam\" -b \"n100.r02.s031_output/n100.r02.s031.primers.bed\" -p \"n100.r02.s031_output/n100.r02.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam\" \"n100.r02.s031_output/n100.r02.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s031_output/n100.r02.s031.reference.fas\" \"n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam\" > \"n100.r02.s031_output/n100.r02.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s031_output/n100.r02.s031.reference.fas\" --call-indels \"n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam\" > \"n100.r02.s031_output/n100.r02.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam\" > \"n100.r02.s031_output/n100.r02.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s031_output/n100.r02.s031.depth.txt\" \"n100.r02.s031_output/n100.r02.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s031_output/n100.r02.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s031_output/n100.r02.s031.reference.fas\" | bcftools consensus -m \"n100.r02.s031_output/n100.r02.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s031_output/n100.r02.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 0ead9da7 (flow b4466c12): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s093_output\"\n        wget -O \"n100.r02.s093_output/n100.r02.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s093_output/n100.r02.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s093_output/n100.r02.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s093_output/n100.r02.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s093_output/n100.r02.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s093_output/n100.r02.s093.reference.fas\" \"n100.r02.s093_output/n100.r02.s093.fq1.fastq\" \"n100.r02.s093_output/n100.r02.s093.fq2.fastq\" | samtools view -bS - > \"n100.r02.s093_output/n100.r02.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s093_output/n100.r02.s093.untrimmed.sorted.bam\" \"n100.r02.s093_output/n100.r02.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s093_output/n100.r02.s093.untrimmed.sorted.bam\" -b \"n100.r02.s093_output/n100.r02.s093.primers.bed\" -p \"n100.r02.s093_output/n100.r02.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam\" \"n100.r02.s093_output/n100.r02.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s093_output/n100.r02.s093.reference.fas\" \"n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam\" > \"n100.r02.s093_output/n100.r02.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s093_output/n100.r02.s093.reference.fas\" --call-indels \"n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam\" > \"n100.r02.s093_output/n100.r02.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam\" > \"n100.r02.s093_output/n100.r02.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s093_output/n100.r02.s093.depth.txt\" \"n100.r02.s093_output/n100.r02.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s093_output/n100.r02.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s093_output/n100.r02.s093.reference.fas\" | bcftools consensus -m \"n100.r02.s093_output/n100.r02.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s093_output/n100.r02.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task a24d412d (flow fedce965): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s047_output\"\n        wget -O \"n100.r02.s047_output/n100.r02.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s047_output/n100.r02.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s047_output/n100.r02.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s047_output/n100.r02.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s047_output/n100.r02.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s047_output/n100.r02.s047.reference.fas\" \"n100.r02.s047_output/n100.r02.s047.fq1.fastq\" \"n100.r02.s047_output/n100.r02.s047.fq2.fastq\" | samtools view -bS - > \"n100.r02.s047_output/n100.r02.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s047_output/n100.r02.s047.untrimmed.sorted.bam\" \"n100.r02.s047_output/n100.r02.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s047_output/n100.r02.s047.untrimmed.sorted.bam\" -b \"n100.r02.s047_output/n100.r02.s047.primers.bed\" -p \"n100.r02.s047_output/n100.r02.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam\" \"n100.r02.s047_output/n100.r02.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s047_output/n100.r02.s047.reference.fas\" \"n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam\" > \"n100.r02.s047_output/n100.r02.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s047_output/n100.r02.s047.reference.fas\" --call-indels \"n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam\" > \"n100.r02.s047_output/n100.r02.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam\" > \"n100.r02.s047_output/n100.r02.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s047_output/n100.r02.s047.depth.txt\" \"n100.r02.s047_output/n100.r02.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s047_output/n100.r02.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s047_output/n100.r02.s047.reference.fas\" | bcftools consensus -m \"n100.r02.s047_output/n100.r02.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s047_output/n100.r02.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 8b35b6a1 (flow 29709fad): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s048_output\"\n        wget -O \"n100.r02.s048_output/n100.r02.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s048_output/n100.r02.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s048_output/n100.r02.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s048_output/n100.r02.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s048_output/n100.r02.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s048_output/n100.r02.s048.reference.fas\" \"n100.r02.s048_output/n100.r02.s048.fq1.fastq\" \"n100.r02.s048_output/n100.r02.s048.fq2.fastq\" | samtools view -bS - > \"n100.r02.s048_output/n100.r02.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s048_output/n100.r02.s048.untrimmed.sorted.bam\" \"n100.r02.s048_output/n100.r02.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s048_output/n100.r02.s048.untrimmed.sorted.bam\" -b \"n100.r02.s048_output/n100.r02.s048.primers.bed\" -p \"n100.r02.s048_output/n100.r02.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam\" \"n100.r02.s048_output/n100.r02.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s048_output/n100.r02.s048.reference.fas\" \"n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam\" > \"n100.r02.s048_output/n100.r02.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s048_output/n100.r02.s048.reference.fas\" --call-indels \"n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam\" > \"n100.r02.s048_output/n100.r02.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam\" > \"n100.r02.s048_output/n100.r02.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s048_output/n100.r02.s048.depth.txt\" \"n100.r02.s048_output/n100.r02.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s048_output/n100.r02.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s048_output/n100.r02.s048.reference.fas\" | bcftools consensus -m \"n100.r02.s048_output/n100.r02.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s048_output/n100.r02.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 40ee7582 (flow 461731e4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s080_output\"\n        wget -O \"n100.r02.s080_output/n100.r02.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s080_output/n100.r02.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s080_output/n100.r02.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s080_output/n100.r02.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s080_output/n100.r02.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s080_output/n100.r02.s080.reference.fas\" \"n100.r02.s080_output/n100.r02.s080.fq1.fastq\" \"n100.r02.s080_output/n100.r02.s080.fq2.fastq\" | samtools view -bS - > \"n100.r02.s080_output/n100.r02.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s080_output/n100.r02.s080.untrimmed.sorted.bam\" \"n100.r02.s080_output/n100.r02.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s080_output/n100.r02.s080.untrimmed.sorted.bam\" -b \"n100.r02.s080_output/n100.r02.s080.primers.bed\" -p \"n100.r02.s080_output/n100.r02.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam\" \"n100.r02.s080_output/n100.r02.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s080_output/n100.r02.s080.reference.fas\" \"n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam\" > \"n100.r02.s080_output/n100.r02.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s080_output/n100.r02.s080.reference.fas\" --call-indels \"n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam\" > \"n100.r02.s080_output/n100.r02.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam\" > \"n100.r02.s080_output/n100.r02.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s080_output/n100.r02.s080.depth.txt\" \"n100.r02.s080_output/n100.r02.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s080_output/n100.r02.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s080_output/n100.r02.s080.reference.fas\" | bcftools consensus -m \"n100.r02.s080_output/n100.r02.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s080_output/n100.r02.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 4c496130 (flow 7f73ff4a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s051_output\"\n        wget -O \"n100.r02.s051_output/n100.r02.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s051_output/n100.r02.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s051_output/n100.r02.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s051_output/n100.r02.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s051_output/n100.r02.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s051_output/n100.r02.s051.reference.fas\" \"n100.r02.s051_output/n100.r02.s051.fq1.fastq\" \"n100.r02.s051_output/n100.r02.s051.fq2.fastq\" | samtools view -bS - > \"n100.r02.s051_output/n100.r02.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s051_output/n100.r02.s051.untrimmed.sorted.bam\" \"n100.r02.s051_output/n100.r02.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s051_output/n100.r02.s051.untrimmed.sorted.bam\" -b \"n100.r02.s051_output/n100.r02.s051.primers.bed\" -p \"n100.r02.s051_output/n100.r02.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam\" \"n100.r02.s051_output/n100.r02.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s051_output/n100.r02.s051.reference.fas\" \"n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam\" > \"n100.r02.s051_output/n100.r02.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s051_output/n100.r02.s051.reference.fas\" --call-indels \"n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam\" > \"n100.r02.s051_output/n100.r02.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam\" > \"n100.r02.s051_output/n100.r02.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s051_output/n100.r02.s051.depth.txt\" \"n100.r02.s051_output/n100.r02.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s051_output/n100.r02.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s051_output/n100.r02.s051.reference.fas\" | bcftools consensus -m \"n100.r02.s051_output/n100.r02.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s051_output/n100.r02.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 7e9cd126 (flow ac5dc48d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s096_output\"\n        wget -O \"n100.r02.s096_output/n100.r02.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s096_output/n100.r02.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s096_output/n100.r02.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s096_output/n100.r02.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s096_output/n100.r02.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s096_output/n100.r02.s096.reference.fas\" \"n100.r02.s096_output/n100.r02.s096.fq1.fastq\" \"n100.r02.s096_output/n100.r02.s096.fq2.fastq\" | samtools view -bS - > \"n100.r02.s096_output/n100.r02.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s096_output/n100.r02.s096.untrimmed.sorted.bam\" \"n100.r02.s096_output/n100.r02.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s096_output/n100.r02.s096.untrimmed.sorted.bam\" -b \"n100.r02.s096_output/n100.r02.s096.primers.bed\" -p \"n100.r02.s096_output/n100.r02.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam\" \"n100.r02.s096_output/n100.r02.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s096_output/n100.r02.s096.reference.fas\" \"n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam\" > \"n100.r02.s096_output/n100.r02.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s096_output/n100.r02.s096.reference.fas\" --call-indels \"n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam\" > \"n100.r02.s096_output/n100.r02.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam\" > \"n100.r02.s096_output/n100.r02.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s096_output/n100.r02.s096.depth.txt\" \"n100.r02.s096_output/n100.r02.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s096_output/n100.r02.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s096_output/n100.r02.s096.reference.fas\" | bcftools consensus -m \"n100.r02.s096_output/n100.r02.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s096_output/n100.r02.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 27e90d8b (flow d66c2225): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s046_output\"\n        wget -O \"n100.r02.s046_output/n100.r02.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s046_output/n100.r02.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s046_output/n100.r02.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s046_output/n100.r02.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s046_output/n100.r02.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s046_output/n100.r02.s046.reference.fas\" \"n100.r02.s046_output/n100.r02.s046.fq1.fastq\" \"n100.r02.s046_output/n100.r02.s046.fq2.fastq\" | samtools view -bS - > \"n100.r02.s046_output/n100.r02.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s046_output/n100.r02.s046.untrimmed.sorted.bam\" \"n100.r02.s046_output/n100.r02.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s046_output/n100.r02.s046.untrimmed.sorted.bam\" -b \"n100.r02.s046_output/n100.r02.s046.primers.bed\" -p \"n100.r02.s046_output/n100.r02.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam\" \"n100.r02.s046_output/n100.r02.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s046_output/n100.r02.s046.reference.fas\" \"n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam\" > \"n100.r02.s046_output/n100.r02.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s046_output/n100.r02.s046.reference.fas\" --call-indels \"n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam\" > \"n100.r02.s046_output/n100.r02.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam\" > \"n100.r02.s046_output/n100.r02.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s046_output/n100.r02.s046.depth.txt\" \"n100.r02.s046_output/n100.r02.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s046_output/n100.r02.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s046_output/n100.r02.s046.reference.fas\" | bcftools consensus -m \"n100.r02.s046_output/n100.r02.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s046_output/n100.r02.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 83e3fcac (flow e3dae658): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s040_output\"\n        wget -O \"n100.r02.s040_output/n100.r02.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s040_output/n100.r02.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s040_output/n100.r02.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s040_output/n100.r02.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s040_output/n100.r02.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s040_output/n100.r02.s040.reference.fas\" \"n100.r02.s040_output/n100.r02.s040.fq1.fastq\" \"n100.r02.s040_output/n100.r02.s040.fq2.fastq\" | samtools view -bS - > \"n100.r02.s040_output/n100.r02.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s040_output/n100.r02.s040.untrimmed.sorted.bam\" \"n100.r02.s040_output/n100.r02.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s040_output/n100.r02.s040.untrimmed.sorted.bam\" -b \"n100.r02.s040_output/n100.r02.s040.primers.bed\" -p \"n100.r02.s040_output/n100.r02.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam\" \"n100.r02.s040_output/n100.r02.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s040_output/n100.r02.s040.reference.fas\" \"n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam\" > \"n100.r02.s040_output/n100.r02.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s040_output/n100.r02.s040.reference.fas\" --call-indels \"n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam\" > \"n100.r02.s040_output/n100.r02.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam\" > \"n100.r02.s040_output/n100.r02.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s040_output/n100.r02.s040.depth.txt\" \"n100.r02.s040_output/n100.r02.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s040_output/n100.r02.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s040_output/n100.r02.s040.reference.fas\" | bcftools consensus -m \"n100.r02.s040_output/n100.r02.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s040_output/n100.r02.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task e81d51f7 (flow 01aa42bd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s034_output\"\n        wget -O \"n100.r02.s034_output/n100.r02.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s034_output/n100.r02.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s034_output/n100.r02.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s034_output/n100.r02.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s034_output/n100.r02.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s034_output/n100.r02.s034.reference.fas\" \"n100.r02.s034_output/n100.r02.s034.fq1.fastq\" \"n100.r02.s034_output/n100.r02.s034.fq2.fastq\" | samtools view -bS - > \"n100.r02.s034_output/n100.r02.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s034_output/n100.r02.s034.untrimmed.sorted.bam\" \"n100.r02.s034_output/n100.r02.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s034_output/n100.r02.s034.untrimmed.sorted.bam\" -b \"n100.r02.s034_output/n100.r02.s034.primers.bed\" -p \"n100.r02.s034_output/n100.r02.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam\" \"n100.r02.s034_output/n100.r02.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s034_output/n100.r02.s034.reference.fas\" \"n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam\" > \"n100.r02.s034_output/n100.r02.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s034_output/n100.r02.s034.reference.fas\" --call-indels \"n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam\" > \"n100.r02.s034_output/n100.r02.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam\" > \"n100.r02.s034_output/n100.r02.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s034_output/n100.r02.s034.depth.txt\" \"n100.r02.s034_output/n100.r02.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s034_output/n100.r02.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s034_output/n100.r02.s034.reference.fas\" | bcftools consensus -m \"n100.r02.s034_output/n100.r02.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s034_output/n100.r02.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task 5cff974b (flow c1923de0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s024_output\"\n        wget -O \"n100.r02.s024_output/n100.r02.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s024_output/n100.r02.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s024_output/n100.r02.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s024_output/n100.r02.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s024_output/n100.r02.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s024_output/n100.r02.s024.reference.fas\" \"n100.r02.s024_output/n100.r02.s024.fq1.fastq\" \"n100.r02.s024_output/n100.r02.s024.fq2.fastq\" | samtools view -bS - > \"n100.r02.s024_output/n100.r02.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s024_output/n100.r02.s024.untrimmed.sorted.bam\" \"n100.r02.s024_output/n100.r02.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s024_output/n100.r02.s024.untrimmed.sorted.bam\" -b \"n100.r02.s024_output/n100.r02.s024.primers.bed\" -p \"n100.r02.s024_output/n100.r02.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam\" \"n100.r02.s024_output/n100.r02.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s024_output/n100.r02.s024.reference.fas\" \"n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam\" > \"n100.r02.s024_output/n100.r02.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s024_output/n100.r02.s024.reference.fas\" --call-indels \"n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam\" > \"n100.r02.s024_output/n100.r02.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam\" > \"n100.r02.s024_output/n100.r02.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s024_output/n100.r02.s024.depth.txt\" \"n100.r02.s024_output/n100.r02.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s024_output/n100.r02.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s024_output/n100.r02.s024.reference.fas\" | bcftools consensus -m \"n100.r02.s024_output/n100.r02.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s024_output/n100.r02.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task ae7d5490 (flow 75bdf269): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s039_output\"\n        wget -O \"n100.r02.s039_output/n100.r02.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s039_output/n100.r02.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s039_output/n100.r02.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s039_output/n100.r02.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s039_output/n100.r02.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s039_output/n100.r02.s039.reference.fas\" \"n100.r02.s039_output/n100.r02.s039.fq1.fastq\" \"n100.r02.s039_output/n100.r02.s039.fq2.fastq\" | samtools view -bS - > \"n100.r02.s039_output/n100.r02.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s039_output/n100.r02.s039.untrimmed.sorted.bam\" \"n100.r02.s039_output/n100.r02.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s039_output/n100.r02.s039.untrimmed.sorted.bam\" -b \"n100.r02.s039_output/n100.r02.s039.primers.bed\" -p \"n100.r02.s039_output/n100.r02.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam\" \"n100.r02.s039_output/n100.r02.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s039_output/n100.r02.s039.reference.fas\" \"n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam\" > \"n100.r02.s039_output/n100.r02.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s039_output/n100.r02.s039.reference.fas\" --call-indels \"n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam\" > \"n100.r02.s039_output/n100.r02.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam\" > \"n100.r02.s039_output/n100.r02.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s039_output/n100.r02.s039.depth.txt\" \"n100.r02.s039_output/n100.r02.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s039_output/n100.r02.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s039_output/n100.r02.s039.reference.fas\" | bcftools consensus -m \"n100.r02.s039_output/n100.r02.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s039_output/n100.r02.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:35:51 scheduler task b09fb5d7 (flow 18c048b9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r02.s054_output\"\n        wget -O \"n100.r02.s054_output/n100.r02.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r02.s054_output/n100.r02.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r02.s054_output/n100.r02.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r02.s054_output/n100.r02.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r02.s054_output/n100.r02.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r02.s054_output/n100.r02.s054.reference.fas\" \"n100.r02.s054_output/n100.r02.s054.fq1.fastq\" \"n100.r02.s054_output/n100.r02.s054.fq2.fastq\" | samtools view -bS - > \"n100.r02.s054_output/n100.r02.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s054_output/n100.r02.s054.untrimmed.sorted.bam\" \"n100.r02.s054_output/n100.r02.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r02.s054_output/n100.r02.s054.untrimmed.sorted.bam\" -b \"n100.r02.s054_output/n100.r02.s054.primers.bed\" -p \"n100.r02.s054_output/n100.r02.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam\" \"n100.r02.s054_output/n100.r02.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r02.s054_output/n100.r02.s054.reference.fas\" \"n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam\" > \"n100.r02.s054_output/n100.r02.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r02.s054_output/n100.r02.s054.reference.fas\" --call-indels \"n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam\" > \"n100.r02.s054_output/n100.r02.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam\" > \"n100.r02.s054_output/n100.r02.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r02.s054_output/n100.r02.s054.depth.txt\" \"n100.r02.s054_output/n100.r02.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r02.s054_output/n100.r02.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r02.s054_output/n100.r02.s054.reference.fas\" | bcftools consensus -m \"n100.r02.s054_output/n100.r02.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r02.s054_output/n100.r02.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r02.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r02/n100.r02.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r02/n100.r02.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:36:34 scheduler task 9bffd4af (flow 8c3fef49): assigning to alloc ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:36:34 scheduler task b09fb5d7 (flow 18c048b9): assigning to alloc ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:36:34 scheduler task ae7d5490 (flow 75bdf269): assigning to alloc ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:36:34 scheduler task 5cff974b (flow c1923de0): assigning to alloc ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:36:34 scheduler task 9bffd4af (flow 8c3fef49): loading (try 0): started
2021/07/08 16:36:34 scheduler task 9bffd4af (flow 8c3fef49): loading val<.=s3://niema-test/n100/r02/n100.r02.s065_R2.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task 5cff974b (flow c1923de0): loading (try 0): started
2021/07/08 16:36:34 scheduler task 5cff974b (flow c1923de0): loading val<.=s3://niema-test/n100/r02/n100.r02.s024_R2.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task b09fb5d7 (flow 18c048b9): loading (try 0): started
2021/07/08 16:36:34 scheduler task b09fb5d7 (flow 18c048b9): loading val<.=s3://niema-test/n100/r02/n100.r02.s054_R1.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task 9bffd4af (flow 8c3fef49): loading val<.=s3://niema-test/n100/r02/n100.r02.s065_R1.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task b09fb5d7 (flow 18c048b9): loading val<.=s3://niema-test/n100/r02/n100.r02.s054_R2.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task ae7d5490 (flow 75bdf269): loading (try 0): started
2021/07/08 16:36:34 scheduler task ae7d5490 (flow 75bdf269): loading val<.=s3://niema-test/n100/r02/n100.r02.s039_R2.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task 5cff974b (flow c1923de0): loading val<.=s3://niema-test/n100/r02/n100.r02.s024_R1.fastq 35.4MiB>
2021/07/08 16:36:34 scheduler task ae7d5490 (flow 75bdf269): loading val<.=s3://niema-test/n100/r02/n100.r02.s039_R1.fastq 35.4MiB>
2021/07/08 16:36:35 scheduler task ae7d5490 (flow 75bdf269): loaded val<.=380ddd3d 35.4MiB>
2021/07/08 16:36:35 scheduler task b09fb5d7 (flow 18c048b9): loaded val<.=5c20e4e5 35.4MiB>
2021/07/08 16:36:35 scheduler task 9bffd4af (flow 8c3fef49): loaded val<.=e697ce1a 35.4MiB>
2021/07/08 16:36:35 scheduler task b09fb5d7 (flow 18c048b9): loaded val<.=f52ddb57 35.4MiB>
2021/07/08 16:36:35 scheduler task 5cff974b (flow c1923de0): loaded val<.=b30b2230 35.4MiB>
2021/07/08 16:36:35 scheduler task b09fb5d7 (flow 18c048b9): loading (try 0): successful, next state: submitting
2021/07/08 16:36:35 scheduler task b09fb5d7 (flow 18c048b9): submitting (try 0): started
2021/07/08 16:36:35 scheduler task 9bffd4af (flow 8c3fef49): loaded val<.=0e99a084 35.4MiB>
2021/07/08 16:36:35 scheduler task 9bffd4af (flow 8c3fef49): loading (try 0): successful, next state: submitting
2021/07/08 16:36:35 scheduler task 9bffd4af (flow 8c3fef49): submitting (try 0): started
2021/07/08 16:36:35 scheduler task ae7d5490 (flow 75bdf269): loaded val<.=2b318ba8 35.4MiB>
2021/07/08 16:36:35 scheduler task ae7d5490 (flow 75bdf269): loading (try 0): successful, next state: submitting
2021/07/08 16:36:35 scheduler task ae7d5490 (flow 75bdf269): submitting (try 0): started
2021/07/08 16:36:35 scheduler task 5cff974b (flow c1923de0): loaded val<.=a3a2c1f7 35.4MiB>
2021/07/08 16:36:35 scheduler task 5cff974b (flow c1923de0): loading (try 0): successful, next state: submitting
2021/07/08 16:36:35 scheduler task 5cff974b (flow c1923de0): submitting (try 0): started
2021/07/08 16:36:35 scheduler task b09fb5d7 (flow 18c048b9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:35 scheduler task b09fb5d7 (flow 18c048b9): waiting for completion (try 0): started
2021/07/08 16:36:35  ->  n100.r02.s054.Main.out_file 18c048b9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:35 n100.r02.s054.Main.out_file 18c048b9 n100/r02/n100.r02.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f2e78408b7520a905f10e28709d7659d071033b98efbfbfa12382b4241c3cbd4
	sha256:18c048b9f4dd52f617155dd9fbcddfaee34327e290106d34062d7cf66b60e672
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b09fb5d7d900dbd31b6023970a7ff88df6573c2040d02229a4796053ada82bd4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s054_output"
	    wget -O "n100.r02.s054_output/n100.r02.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s054_output/n100.r02.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s054_output/n100.r02.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s054_output/n100.r02.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s054_output/n100.r02.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s054_output/n100.r02.s054.reference.fas" "n100.r02.s054_output/n100.r02.s054.fq1.fastq" "n100.r02.s054_output/n100.r02.s054.fq2.fastq" | samtools view -bS - > "n100.r02.s054_output/n100.r02.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s054_output/n100.r02.s054.untrimmed.sorted.bam" "n100.r02.s054_output/n100.r02.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s054_output/n100.r02.s054.untrimmed.sorted.bam" -b "n100.r02.s054_output/n100.r02.s054.primers.bed" -p "n100.r02.s054_output/n100.r02.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" "n100.r02.s054_output/n100.r02.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s054_output/n100.r02.s054.reference.fas" "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" > "n100.r02.s054_output/n100.r02.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s054_output/n100.r02.s054.reference.fas" --call-indels "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" > "n100.r02.s054_output/n100.r02.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" > "n100.r02.s054_output/n100.r02.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s054_output/n100.r02.s054.depth.txt" "n100.r02.s054_output/n100.r02.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s054_output/n100.r02.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s054_output/n100.r02.s054.reference.fas" | bcftools consensus -m "n100.r02.s054_output/n100.r02.s054.low_depth.tsv" tmp.vcf.gz > "n100.r02.s054_output/n100.r02.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:35 scheduler task 9bffd4af (flow 8c3fef49): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:35 scheduler task 9bffd4af (flow 8c3fef49): waiting for completion (try 0): started
2021/07/08 16:36:35  ->  n100.r02.s065.Main.out_file 8c3fef49 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:35 n100.r02.s065.Main.out_file 8c3fef49 n100/r02/n100.r02.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cfe8f3e3fb22f064bf6044114ec885cdda956b54c45ccb35b63f63b70768d697
	sha256:8c3fef49aa73c3ce561cf6262650651d4812da36fdbec3d9cffde093f50fe74a
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9bffd4aff445c7a8995c355869a156aed6cb6139e5970dfc5215fd41fa4ec646
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s065_output"
	    wget -O "n100.r02.s065_output/n100.r02.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s065_output/n100.r02.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s065_output/n100.r02.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s065_output/n100.r02.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s065_output/n100.r02.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s065_output/n100.r02.s065.reference.fas" "n100.r02.s065_output/n100.r02.s065.fq1.fastq" "n100.r02.s065_output/n100.r02.s065.fq2.fastq" | samtools view -bS - > "n100.r02.s065_output/n100.r02.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s065_output/n100.r02.s065.untrimmed.sorted.bam" "n100.r02.s065_output/n100.r02.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s065_output/n100.r02.s065.untrimmed.sorted.bam" -b "n100.r02.s065_output/n100.r02.s065.primers.bed" -p "n100.r02.s065_output/n100.r02.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" "n100.r02.s065_output/n100.r02.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s065_output/n100.r02.s065.reference.fas" "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" > "n100.r02.s065_output/n100.r02.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s065_output/n100.r02.s065.reference.fas" --call-indels "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" > "n100.r02.s065_output/n100.r02.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" > "n100.r02.s065_output/n100.r02.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s065_output/n100.r02.s065.depth.txt" "n100.r02.s065_output/n100.r02.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s065_output/n100.r02.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s065_output/n100.r02.s065.reference.fas" | bcftools consensus -m "n100.r02.s065_output/n100.r02.s065.low_depth.tsv" tmp.vcf.gz > "n100.r02.s065_output/n100.r02.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:36 scheduler task ae7d5490 (flow 75bdf269): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:36 scheduler task ae7d5490 (flow 75bdf269): waiting for completion (try 0): started
2021/07/08 16:36:36  ->  n100.r02.s039.Main.out_file 75bdf269 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:36 n100.r02.s039.Main.out_file 75bdf269 n100/r02/n100.r02.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b2b85be4c229e3c70e4ab3d3c912f7c1b03fb9c9a66a263a4a003e796c07ebb6
	sha256:75bdf269b3399302cf0626348388a80582ccf1ba630c02533411ca477875f2c0
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ae7d549012072a20c2736680a83baa46f9a4e237fa62e0f56e8baaa55a6f8726
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s039_output"
	    wget -O "n100.r02.s039_output/n100.r02.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s039_output/n100.r02.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s039_output/n100.r02.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s039_output/n100.r02.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s039_output/n100.r02.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s039_output/n100.r02.s039.reference.fas" "n100.r02.s039_output/n100.r02.s039.fq1.fastq" "n100.r02.s039_output/n100.r02.s039.fq2.fastq" | samtools view -bS - > "n100.r02.s039_output/n100.r02.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s039_output/n100.r02.s039.untrimmed.sorted.bam" "n100.r02.s039_output/n100.r02.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s039_output/n100.r02.s039.untrimmed.sorted.bam" -b "n100.r02.s039_output/n100.r02.s039.primers.bed" -p "n100.r02.s039_output/n100.r02.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" "n100.r02.s039_output/n100.r02.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s039_output/n100.r02.s039.reference.fas" "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" > "n100.r02.s039_output/n100.r02.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s039_output/n100.r02.s039.reference.fas" --call-indels "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" > "n100.r02.s039_output/n100.r02.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" > "n100.r02.s039_output/n100.r02.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s039_output/n100.r02.s039.depth.txt" "n100.r02.s039_output/n100.r02.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s039_output/n100.r02.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s039_output/n100.r02.s039.reference.fas" | bcftools consensus -m "n100.r02.s039_output/n100.r02.s039.low_depth.tsv" tmp.vcf.gz > "n100.r02.s039_output/n100.r02.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:36 scheduler task 5cff974b (flow c1923de0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:36 scheduler task 5cff974b (flow c1923de0): waiting for completion (try 0): started
2021/07/08 16:36:36  ->  n100.r02.s024.Main.out_file c1923de0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:36 n100.r02.s024.Main.out_file c1923de0 n100/r02/n100.r02.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42291f4367e777fa85af20f07e3c9ffca1cff1aaaa11d89d249f620bf0a69f2b
	sha256:c1923de0380970a460c0d3d96e133ae9def42895f674fa8296370e939140b9ce
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5cff974b72ba7e98795ab5cb4e3af99a9b4c8aa7aa3e7f2e5b9a2f36f0c1ad5d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s024_output"
	    wget -O "n100.r02.s024_output/n100.r02.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s024_output/n100.r02.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s024_output/n100.r02.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s024_output/n100.r02.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s024_output/n100.r02.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s024_output/n100.r02.s024.reference.fas" "n100.r02.s024_output/n100.r02.s024.fq1.fastq" "n100.r02.s024_output/n100.r02.s024.fq2.fastq" | samtools view -bS - > "n100.r02.s024_output/n100.r02.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s024_output/n100.r02.s024.untrimmed.sorted.bam" "n100.r02.s024_output/n100.r02.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s024_output/n100.r02.s024.untrimmed.sorted.bam" -b "n100.r02.s024_output/n100.r02.s024.primers.bed" -p "n100.r02.s024_output/n100.r02.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" "n100.r02.s024_output/n100.r02.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s024_output/n100.r02.s024.reference.fas" "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" > "n100.r02.s024_output/n100.r02.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s024_output/n100.r02.s024.reference.fas" --call-indels "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" > "n100.r02.s024_output/n100.r02.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" > "n100.r02.s024_output/n100.r02.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s024_output/n100.r02.s024.depth.txt" "n100.r02.s024_output/n100.r02.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s024_output/n100.r02.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s024_output/n100.r02.s024.reference.fas" | bcftools consensus -m "n100.r02.s024_output/n100.r02.s024.low_depth.tsv" tmp.vcf.gz > "n100.r02.s024_output/n100.r02.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:41 scheduler task e81d51f7 (flow 01aa42bd): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 83e3fcac (flow e3dae658): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 27e90d8b (flow d66c2225): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 7e9cd126 (flow ac5dc48d): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 4c496130 (flow 7f73ff4a): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 40ee7582 (flow 461731e4): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8b35b6a1 (flow 29709fad): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task a24d412d (flow fedce965): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0ead9da7 (flow b4466c12): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 3b6becc8 (flow 3d8a8283): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task bb07980b (flow b78d6362): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 5b2e9034 (flow 63c5e72c): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 94dedf3c (flow d1fb7eba): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0b7fb97b (flow 874b9577): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task fde90f32 (flow 470f3008): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 7c966493 (flow 0819d118): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 87971b75 (flow f98fa6a9): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 2af220b8 (flow f94e4acc): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task fc432408 (flow 28e5d9c6): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task bb6c2cd9 (flow 2f6e45f8): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task fbd9cfd4 (flow f8af3684): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 69a372ec (flow c6cdb5ad): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0e861905 (flow 7a724582): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 7a765bf2 (flow cde5ab27): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task fd672bab (flow d90e3629): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task f748f409 (flow 46797130): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task d06e59c3 (flow 57bcabea): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 4bda52eb (flow b3c6f94e): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 47667179 (flow cca7236b): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 44851b9f (flow 47ed53a8): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 9b94a5e4 (flow 834f80b2): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 7018ad68 (flow 0cad19f3): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 2feb3f25 (flow 26422009): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 5f52d829 (flow 23c21f0f): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0d089343 (flow e6ad34ee): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 28e75581 (flow e654e99d): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8b7410bb (flow 51541ca9): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 1e604ca0 (flow 35fb25c1): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task e6c82ca0 (flow 2f81b13d): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 68d632e0 (flow e0a7fa8c): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0d3f8ca3 (flow a2df0a88): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8062f0aa (flow 1d767038): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 5a1a8dc5 (flow 7e2f5b09): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8c10b81b (flow ef286eca): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0e177187 (flow ce3a6617): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task f1d0e2d0 (flow 37b5e302): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 56e751ca (flow 4e926108): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 591fadf3 (flow 9edef856): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8654fc3f (flow c91904a4): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 6628d1b5 (flow 77fde731): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task da6be570 (flow aae2ca1c): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 6dbd0fd3 (flow 4574c5bb): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0a7969ad (flow 678c0cb0): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 2e1a4452 (flow 4573c8de): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 7d3bc912 (flow e2236b63): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 45825593 (flow 6b3eb25c): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 506303dc (flow 1e4c353c): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 507f546b (flow 338fe8dc): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 6f0ba86a (flow 16e41ecb): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8f000427 (flow 2bf052bb): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 3e9c9b76 (flow f2f62b67): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task a8a30cc1 (flow 7b9af5ba): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 57d5d876 (flow fceac23c): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 9b70412c (flow e085395a): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 557dccf8 (flow dcf397bd): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task c9165e2e (flow e2043d0a): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8273013c (flow d3ff6df9): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task c88b5c52 (flow 7f934c83): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task f6b05f5e (flow 64781829): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 5100a091 (flow 92c090c3): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 2154d467 (flow 0ea2123a): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 1c084c9f (flow 8b1babe2): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 0b440a13 (flow 4a266829): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 5f52d829 (flow 23c21f0f): loading (try 0): started
2021/07/08 16:36:41 scheduler task e81d51f7 (flow 01aa42bd): loading (try 0): started
2021/07/08 16:36:41 scheduler task fde90f32 (flow 470f3008): loading (try 0): started
2021/07/08 16:36:41 scheduler task 2e1a4452 (flow 4573c8de): loading (try 0): started
2021/07/08 16:36:41 scheduler task bb6c2cd9 (flow 2f6e45f8): loading (try 0): started
2021/07/08 16:36:41 scheduler task 9b94a5e4 (flow 834f80b2): loading (try 0): started
2021/07/08 16:36:41 scheduler task fde90f32 (flow 470f3008): loading val<.=s3://niema-test/n100/r02/n100.r02.s076_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7d3bc912 (flow e2236b63): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8062f0aa (flow 1d767038): loading (try 0): started
2021/07/08 16:36:41 scheduler task 7d3bc912 (flow e2236b63): loading val<.=s3://niema-test/n100/r02/n100.r02.s052_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 2feb3f25 (flow 26422009): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8062f0aa (flow 1d767038): loading val<.=s3://niema-test/n100/r02/n100.r02.s003_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task d06e59c3 (flow 57bcabea): loading (try 0): started
2021/07/08 16:36:41 scheduler task e81d51f7 (flow 01aa42bd): loading val<.=s3://niema-test/n100/r02/n100.r02.s034_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task fd672bab (flow d90e3629): loading (try 0): started
2021/07/08 16:36:41 scheduler task 507f546b (flow 338fe8dc): loading (try 0): started
2021/07/08 16:36:41 scheduler task d06e59c3 (flow 57bcabea): loading val<.=s3://niema-test/n100/r02/n100.r02.s007_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 28e75581 (flow e654e99d): loading (try 0): started
2021/07/08 16:36:41 scheduler task 6628d1b5 (flow 77fde731): loading (try 0): started
2021/07/08 16:36:41 scheduler task bb6c2cd9 (flow 2f6e45f8): loading val<.=s3://niema-test/n100/r02/n100.r02.s058_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 507f546b (flow 338fe8dc): loading val<.=s3://niema-test/n100/r02/n100.r02.s062_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7a765bf2 (flow cde5ab27): loading (try 0): started
2021/07/08 16:36:41 scheduler task 56e751ca (flow 4e926108): loading (try 0): started
2021/07/08 16:36:41 scheduler task 28e75581 (flow e654e99d): loading val<.=s3://niema-test/n100/r02/n100.r02.s009_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task fd672bab (flow d90e3629): loading val<.=s3://niema-test/n100/r02/n100.r02.s049_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7a765bf2 (flow cde5ab27): loading val<.=s3://niema-test/n100/r02/n100.r02.s044_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task a8a30cc1 (flow 7b9af5ba): loading (try 0): started
2021/07/08 16:36:41 scheduler task a8a30cc1 (flow 7b9af5ba): loading val<.=s3://niema-test/n100/r02/n100.r02.s015_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 1e604ca0 (flow 35fb25c1): loading (try 0): started
2021/07/08 16:36:41 scheduler task 1e604ca0 (flow 35fb25c1): loading val<.=s3://niema-test/n100/r02/n100.r02.s079_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0b440a13 (flow 4a266829): loading (try 0): started
2021/07/08 16:36:41 scheduler task 0b440a13 (flow 4a266829): loading val<.=s3://niema-test/n100/r02/n100.r02.s066_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 1e604ca0 (flow 35fb25c1): loading val<.=s3://niema-test/n100/r02/n100.r02.s079_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 591fadf3 (flow 9edef856): loading (try 0): started
2021/07/08 16:36:41 scheduler task 591fadf3 (flow 9edef856): loading val<.=s3://niema-test/n100/r02/n100.r02.s087_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0b440a13 (flow 4a266829): loading val<.=s3://niema-test/n100/r02/n100.r02.s066_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 2e1a4452 (flow 4573c8de): loading val<.=s3://niema-test/n100/r02/n100.r02.s085_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8f000427 (flow 2bf052bb): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8f000427 (flow 2bf052bb): loading val<.=s3://niema-test/n100/r02/n100.r02.s021_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 591fadf3 (flow 9edef856): loading val<.=s3://niema-test/n100/r02/n100.r02.s087_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8273013c (flow d3ff6df9): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8273013c (flow d3ff6df9): loading val<.=s3://niema-test/n100/r02/n100.r02.s056_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8f000427 (flow 2bf052bb): loading val<.=s3://niema-test/n100/r02/n100.r02.s021_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task f748f409 (flow 46797130): loading (try 0): started
2021/07/08 16:36:41 scheduler task f748f409 (flow 46797130): loading val<.=s3://niema-test/n100/r02/n100.r02.s019_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8273013c (flow d3ff6df9): loading val<.=s3://niema-test/n100/r02/n100.r02.s056_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task d06e59c3 (flow 57bcabea): loading val<.=s3://niema-test/n100/r02/n100.r02.s007_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5f52d829 (flow 23c21f0f): loading val<.=s3://niema-test/n100/r02/n100.r02.s092_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3e9c9b76 (flow f2f62b67): loading (try 0): started
2021/07/08 16:36:41 scheduler task f748f409 (flow 46797130): loading val<.=s3://niema-test/n100/r02/n100.r02.s019_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3e9c9b76 (flow f2f62b67): loading val<.=s3://niema-test/n100/r02/n100.r02.s042_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 57d5d876 (flow fceac23c): loading (try 0): started
2021/07/08 16:36:41 scheduler task 57d5d876 (flow fceac23c): loading val<.=s3://niema-test/n100/r02/n100.r02.s098_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task a24d412d (flow fedce965): loading (try 0): started
2021/07/08 16:36:41 scheduler task a24d412d (flow fedce965): loading val<.=s3://niema-test/n100/r02/n100.r02.s047_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 57d5d876 (flow fceac23c): loading val<.=s3://niema-test/n100/r02/n100.r02.s098_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 94dedf3c (flow d1fb7eba): loading (try 0): started
2021/07/08 16:36:41 scheduler task 94dedf3c (flow d1fb7eba): loading val<.=s3://niema-test/n100/r02/n100.r02.s023_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task a24d412d (flow fedce965): loading val<.=s3://niema-test/n100/r02/n100.r02.s047_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3b6becc8 (flow 3d8a8283): loading (try 0): started
2021/07/08 16:36:41 scheduler task 3b6becc8 (flow 3d8a8283): loading val<.=s3://niema-test/n100/r02/n100.r02.s031_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 94dedf3c (flow d1fb7eba): loading val<.=s3://niema-test/n100/r02/n100.r02.s023_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7c966493 (flow 0819d118): loading (try 0): started
2021/07/08 16:36:41 scheduler task 7c966493 (flow 0819d118): loading val<.=s3://niema-test/n100/r02/n100.r02.s010_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3b6becc8 (flow 3d8a8283): loading val<.=s3://niema-test/n100/r02/n100.r02.s031_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task bb07980b (flow b78d6362): loading (try 0): started
2021/07/08 16:36:41 scheduler task bb07980b (flow b78d6362): loading val<.=s3://niema-test/n100/r02/n100.r02.s002_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7c966493 (flow 0819d118): loading val<.=s3://niema-test/n100/r02/n100.r02.s010_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0ead9da7 (flow b4466c12): loading (try 0): started
2021/07/08 16:36:41 scheduler task 5f52d829 (flow 23c21f0f): loading val<.=s3://niema-test/n100/r02/n100.r02.s092_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0ead9da7 (flow b4466c12): loading val<.=s3://niema-test/n100/r02/n100.r02.s093_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5b2e9034 (flow 63c5e72c): loading (try 0): started
2021/07/08 16:36:41 scheduler task 5b2e9034 (flow 63c5e72c): loading val<.=s3://niema-test/n100/r02/n100.r02.s028_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8b7410bb (flow 51541ca9): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8b7410bb (flow 51541ca9): loading val<.=s3://niema-test/n100/r02/n100.r02.s017_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0b7fb97b (flow 874b9577): loading (try 0): started
2021/07/08 16:36:41 scheduler task 0b7fb97b (flow 874b9577): loading val<.=s3://niema-test/n100/r02/n100.r02.s082_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5b2e9034 (flow 63c5e72c): loading val<.=s3://niema-test/n100/r02/n100.r02.s028_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8b7410bb (flow 51541ca9): loading val<.=s3://niema-test/n100/r02/n100.r02.s017_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 9b70412c (flow e085395a): loading (try 0): started
2021/07/08 16:36:41 scheduler task 9b70412c (flow e085395a): loading val<.=s3://niema-test/n100/r02/n100.r02.s089_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 4bda52eb (flow b3c6f94e): loading (try 0): started
2021/07/08 16:36:41 scheduler task 4bda52eb (flow b3c6f94e): loading val<.=s3://niema-test/n100/r02/n100.r02.s100_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 9b70412c (flow e085395a): loading val<.=s3://niema-test/n100/r02/n100.r02.s089_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0b7fb97b (flow 874b9577): loading val<.=s3://niema-test/n100/r02/n100.r02.s082_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c9165e2e (flow e2043d0a): loading (try 0): started
2021/07/08 16:36:41 scheduler task 4bda52eb (flow b3c6f94e): loading val<.=s3://niema-test/n100/r02/n100.r02.s100_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c9165e2e (flow e2043d0a): loading val<.=s3://niema-test/n100/r02/n100.r02.s053_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task e81d51f7 (flow 01aa42bd): loading val<.=s3://niema-test/n100/r02/n100.r02.s034_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 506303dc (flow 1e4c353c): loading (try 0): started
2021/07/08 16:36:41 scheduler task 83e3fcac (flow e3dae658): loading (try 0): started
2021/07/08 16:36:41 scheduler task fde90f32 (flow 470f3008): loading val<.=s3://niema-test/n100/r02/n100.r02.s076_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 68d632e0 (flow e0a7fa8c): loading (try 0): started
2021/07/08 16:36:41 scheduler task 6f0ba86a (flow 16e41ecb): loading (try 0): started
2021/07/08 16:36:41 scheduler task 27e90d8b (flow d66c2225): loading (try 0): started
2021/07/08 16:36:41 scheduler task c88b5c52 (flow 7f934c83): loading (try 0): started
2021/07/08 16:36:41 scheduler task fc432408 (flow 28e5d9c6): loading (try 0): started
2021/07/08 16:36:41 scheduler task 0d3f8ca3 (flow a2df0a88): loading (try 0): started
2021/07/08 16:36:41 scheduler task bb6c2cd9 (flow 2f6e45f8): loading val<.=s3://niema-test/n100/r02/n100.r02.s058_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7e9cd126 (flow ac5dc48d): loading (try 0): started
2021/07/08 16:36:41 scheduler task 9b94a5e4 (flow 834f80b2): loading val<.=s3://niema-test/n100/r02/n100.r02.s030_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5100a091 (flow 92c090c3): loading (try 0): started
2021/07/08 16:36:41 scheduler task fbd9cfd4 (flow f8af3684): loading (try 0): started
2021/07/08 16:36:41 scheduler task 7018ad68 (flow 0cad19f3): loading (try 0): started
2021/07/08 16:36:41 scheduler task 44851b9f (flow 47ed53a8): loading (try 0): started
2021/07/08 16:36:41 scheduler task 40ee7582 (flow 461731e4): loading (try 0): started
2021/07/08 16:36:41 scheduler task 2154d467 (flow 0ea2123a): loading (try 0): started
2021/07/08 16:36:41 scheduler task 69a372ec (flow c6cdb5ad): loading (try 0): started
2021/07/08 16:36:41 scheduler task 1c084c9f (flow 8b1babe2): loading (try 0): started
2021/07/08 16:36:41 scheduler task 2feb3f25 (flow 26422009): loading val<.=s3://niema-test/n100/r02/n100.r02.s097_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 87971b75 (flow f98fa6a9): loading (try 0): started
2021/07/08 16:36:41 scheduler task f6b05f5e (flow 64781829): loading (try 0): started
2021/07/08 16:36:41 scheduler task 2af220b8 (flow f94e4acc): loading (try 0): started
2021/07/08 16:36:41 scheduler task 4c496130 (flow 7f73ff4a): loading (try 0): started
2021/07/08 16:36:41 scheduler task 2e1a4452 (flow 4573c8de): loading val<.=s3://niema-test/n100/r02/n100.r02.s085_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 9b94a5e4 (flow 834f80b2): loading val<.=s3://niema-test/n100/r02/n100.r02.s030_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task aca0b7cc (flow 3d43c667): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 45825593 (flow 6b3eb25c): loading (try 0): started
2021/07/08 16:36:41 scheduler task e6c82ca0 (flow 2f81b13d): loading (try 0): started
2021/07/08 16:36:41 scheduler task fd672bab (flow d90e3629): loading val<.=s3://niema-test/n100/r02/n100.r02.s049_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5a1a8dc5 (flow 7e2f5b09): loading (try 0): started
2021/07/08 16:36:41 scheduler task 2feb3f25 (flow 26422009): loading val<.=s3://niema-test/n100/r02/n100.r02.s097_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7d3bc912 (flow e2236b63): loading val<.=s3://niema-test/n100/r02/n100.r02.s052_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task f1d0e2d0 (flow 37b5e302): loading (try 0): started
2021/07/08 16:36:41 scheduler task 507f546b (flow 338fe8dc): loading val<.=s3://niema-test/n100/r02/n100.r02.s062_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0d089343 (flow e6ad34ee): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8b35b6a1 (flow 29709fad): loading (try 0): started
2021/07/08 16:36:41 scheduler task 28e75581 (flow e654e99d): loading val<.=s3://niema-test/n100/r02/n100.r02.s009_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0e861905 (flow 7a724582): loading (try 0): started
2021/07/08 16:36:41 scheduler task da6be570 (flow aae2ca1c): loading (try 0): started
2021/07/08 16:36:41 scheduler task 6628d1b5 (flow 77fde731): loading val<.=s3://niema-test/n100/r02/n100.r02.s045_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8c10b81b (flow ef286eca): loading (try 0): started
2021/07/08 16:36:41 scheduler task 6dbd0fd3 (flow 4574c5bb): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8062f0aa (flow 1d767038): loading val<.=s3://niema-test/n100/r02/n100.r02.s003_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0e177187 (flow ce3a6617): loading (try 0): started
2021/07/08 16:36:41 scheduler task 557dccf8 (flow dcf397bd): loading (try 0): started
2021/07/08 16:36:41 scheduler task 7a765bf2 (flow cde5ab27): loading val<.=s3://niema-test/n100/r02/n100.r02.s044_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 47667179 (flow cca7236b): loading (try 0): started
2021/07/08 16:36:41 scheduler task 0a7969ad (flow 678c0cb0): loading (try 0): started
2021/07/08 16:36:41 scheduler task 56e751ca (flow 4e926108): loading val<.=s3://niema-test/n100/r02/n100.r02.s037_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 6628d1b5 (flow 77fde731): loading val<.=s3://niema-test/n100/r02/n100.r02.s045_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 56e751ca (flow 4e926108): loading val<.=s3://niema-test/n100/r02/n100.r02.s037_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8654fc3f (flow c91904a4): loading (try 0): started
2021/07/08 16:36:41 scheduler task a8a30cc1 (flow 7b9af5ba): loading val<.=s3://niema-test/n100/r02/n100.r02.s015_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3e9c9b76 (flow f2f62b67): loading val<.=s3://niema-test/n100/r02/n100.r02.s042_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0ead9da7 (flow b4466c12): loading val<.=s3://niema-test/n100/r02/n100.r02.s093_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task bb07980b (flow b78d6362): loading val<.=s3://niema-test/n100/r02/n100.r02.s002_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c9165e2e (flow e2043d0a): loading val<.=s3://niema-test/n100/r02/n100.r02.s053_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 506303dc (flow 1e4c353c): loading val<.=s3://niema-test/n100/r02/n100.r02.s016_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 83e3fcac (flow e3dae658): loading val<.=s3://niema-test/n100/r02/n100.r02.s040_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 506303dc (flow 1e4c353c): loading val<.=s3://niema-test/n100/r02/n100.r02.s016_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 68d632e0 (flow e0a7fa8c): loading val<.=s3://niema-test/n100/r02/n100.r02.s060_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 83e3fcac (flow e3dae658): loading val<.=s3://niema-test/n100/r02/n100.r02.s040_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 6f0ba86a (flow 16e41ecb): loading val<.=s3://niema-test/n100/r02/n100.r02.s013_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 68d632e0 (flow e0a7fa8c): loading val<.=s3://niema-test/n100/r02/n100.r02.s060_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 6f0ba86a (flow 16e41ecb): loading val<.=s3://niema-test/n100/r02/n100.r02.s013_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 27e90d8b (flow d66c2225): loading val<.=s3://niema-test/n100/r02/n100.r02.s046_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c88b5c52 (flow 7f934c83): loading val<.=s3://niema-test/n100/r02/n100.r02.s070_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 27e90d8b (flow d66c2225): loading val<.=s3://niema-test/n100/r02/n100.r02.s046_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task fc432408 (flow 28e5d9c6): loading val<.=s3://niema-test/n100/r02/n100.r02.s083_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c88b5c52 (flow 7f934c83): loading val<.=s3://niema-test/n100/r02/n100.r02.s070_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0d3f8ca3 (flow a2df0a88): loading val<.=s3://niema-test/n100/r02/n100.r02.s018_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task fc432408 (flow 28e5d9c6): loading val<.=s3://niema-test/n100/r02/n100.r02.s083_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7e9cd126 (flow ac5dc48d): loading val<.=s3://niema-test/n100/r02/n100.r02.s096_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0d3f8ca3 (flow a2df0a88): loading val<.=s3://niema-test/n100/r02/n100.r02.s018_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5100a091 (flow 92c090c3): loading val<.=s3://niema-test/n100/r02/n100.r02.s086_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7e9cd126 (flow ac5dc48d): loading val<.=s3://niema-test/n100/r02/n100.r02.s096_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task fbd9cfd4 (flow f8af3684): loading val<.=s3://niema-test/n100/r02/n100.r02.s020_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5100a091 (flow 92c090c3): loading val<.=s3://niema-test/n100/r02/n100.r02.s086_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7018ad68 (flow 0cad19f3): loading val<.=s3://niema-test/n100/r02/n100.r02.s099_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task fbd9cfd4 (flow f8af3684): loading val<.=s3://niema-test/n100/r02/n100.r02.s020_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 44851b9f (flow 47ed53a8): loading val<.=s3://niema-test/n100/r02/n100.r02.s050_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 7018ad68 (flow 0cad19f3): loading val<.=s3://niema-test/n100/r02/n100.r02.s099_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 40ee7582 (flow 461731e4): loading val<.=s3://niema-test/n100/r02/n100.r02.s080_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 44851b9f (flow 47ed53a8): loading val<.=s3://niema-test/n100/r02/n100.r02.s050_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 2154d467 (flow 0ea2123a): loading val<.=s3://niema-test/n100/r02/n100.r02.s081_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 40ee7582 (flow 461731e4): loading val<.=s3://niema-test/n100/r02/n100.r02.s080_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 69a372ec (flow c6cdb5ad): loading val<.=s3://niema-test/n100/r02/n100.r02.s095_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 2154d467 (flow 0ea2123a): loading val<.=s3://niema-test/n100/r02/n100.r02.s081_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 1c084c9f (flow 8b1babe2): loading val<.=s3://niema-test/n100/r02/n100.r02.s001_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 69a372ec (flow c6cdb5ad): loading val<.=s3://niema-test/n100/r02/n100.r02.s095_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 87971b75 (flow f98fa6a9): loading val<.=s3://niema-test/n100/r02/n100.r02.s041_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 1c084c9f (flow 8b1babe2): loading val<.=s3://niema-test/n100/r02/n100.r02.s001_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task f6b05f5e (flow 64781829): loading val<.=s3://niema-test/n100/r02/n100.r02.s061_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 87971b75 (flow f98fa6a9): loading val<.=s3://niema-test/n100/r02/n100.r02.s041_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 2af220b8 (flow f94e4acc): loading val<.=s3://niema-test/n100/r02/n100.r02.s022_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task f6b05f5e (flow 64781829): loading val<.=s3://niema-test/n100/r02/n100.r02.s061_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 4c496130 (flow 7f73ff4a): loading val<.=s3://niema-test/n100/r02/n100.r02.s051_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 2af220b8 (flow f94e4acc): loading val<.=s3://niema-test/n100/r02/n100.r02.s022_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 4c496130 (flow 7f73ff4a): loading val<.=s3://niema-test/n100/r02/n100.r02.s051_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task ba37caf2 (flow 609775f9): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task aca0b7cc (flow 3d43c667): loading (try 0): started
2021/07/08 16:36:41 scheduler task 45825593 (flow 6b3eb25c): loading val<.=s3://niema-test/n100/r02/n100.r02.s078_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task e6c82ca0 (flow 2f81b13d): loading val<.=s3://niema-test/n100/r02/n100.r02.s091_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 45825593 (flow 6b3eb25c): loading val<.=s3://niema-test/n100/r02/n100.r02.s078_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5a1a8dc5 (flow 7e2f5b09): loading val<.=s3://niema-test/n100/r02/n100.r02.s090_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task e6c82ca0 (flow 2f81b13d): loading val<.=s3://niema-test/n100/r02/n100.r02.s091_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task f1d0e2d0 (flow 37b5e302): loading val<.=s3://niema-test/n100/r02/n100.r02.s088_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5a1a8dc5 (flow 7e2f5b09): loading val<.=s3://niema-test/n100/r02/n100.r02.s090_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0d089343 (flow e6ad34ee): loading val<.=s3://niema-test/n100/r02/n100.r02.s038_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task f1d0e2d0 (flow 37b5e302): loading val<.=s3://niema-test/n100/r02/n100.r02.s088_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8b35b6a1 (flow 29709fad): loading val<.=s3://niema-test/n100/r02/n100.r02.s048_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0d089343 (flow e6ad34ee): loading val<.=s3://niema-test/n100/r02/n100.r02.s038_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0e861905 (flow 7a724582): loading val<.=s3://niema-test/n100/r02/n100.r02.s069_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8b35b6a1 (flow 29709fad): loading val<.=s3://niema-test/n100/r02/n100.r02.s048_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task da6be570 (flow aae2ca1c): loading val<.=s3://niema-test/n100/r02/n100.r02.s084_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0e861905 (flow 7a724582): loading val<.=s3://niema-test/n100/r02/n100.r02.s069_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8c10b81b (flow ef286eca): loading val<.=s3://niema-test/n100/r02/n100.r02.s063_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task da6be570 (flow aae2ca1c): loading val<.=s3://niema-test/n100/r02/n100.r02.s084_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 6dbd0fd3 (flow 4574c5bb): loading val<.=s3://niema-test/n100/r02/n100.r02.s073_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8c10b81b (flow ef286eca): loading val<.=s3://niema-test/n100/r02/n100.r02.s063_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0e177187 (flow ce3a6617): loading val<.=s3://niema-test/n100/r02/n100.r02.s055_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 6dbd0fd3 (flow 4574c5bb): loading val<.=s3://niema-test/n100/r02/n100.r02.s073_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 557dccf8 (flow dcf397bd): loading val<.=s3://niema-test/n100/r02/n100.r02.s027_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0e177187 (flow ce3a6617): loading val<.=s3://niema-test/n100/r02/n100.r02.s055_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 47667179 (flow cca7236b): loading val<.=s3://niema-test/n100/r02/n100.r02.s068_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 557dccf8 (flow dcf397bd): loading val<.=s3://niema-test/n100/r02/n100.r02.s027_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0a7969ad (flow 678c0cb0): loading val<.=s3://niema-test/n100/r02/n100.r02.s059_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 47667179 (flow cca7236b): loading val<.=s3://niema-test/n100/r02/n100.r02.s068_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 0a7969ad (flow 678c0cb0): loading val<.=s3://niema-test/n100/r02/n100.r02.s059_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8654fc3f (flow c91904a4): loading val<.=s3://niema-test/n100/r02/n100.r02.s094_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8654fc3f (flow c91904a4): loading val<.=s3://niema-test/n100/r02/n100.r02.s094_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 134a0558 (flow 0f99a469): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task c2690bb6 (flow c8530bd3): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 227b4998 (flow 498981df): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task b5b0895c (flow 5e121a68): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8c914f7e (flow 56fb7d44): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task bb81e9dc (flow ce74ed16): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 8e4c2298 (flow 95b427ce): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 080dc6e3 (flow a028a3dc): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 83ad0a3c (flow 244ee460): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task d8e5f7d3 (flow 7ba184b6): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task cafad4ba (flow 5063d2f3): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task c73cacdd (flow c37abb9e): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 04f3dd11 (flow 9cfb1911): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 67f058e0 (flow 5ea8511d): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 5ed6a8f0 (flow d1a20a99): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task d3ed6aad (flow dcb88340): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 3dadedef (flow 9abe98a2): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 79554f4f (flow 08173ef0): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 4e6261f7 (flow 31db7c1d): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 73f9bb6c (flow 958202cb): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 055d7a57 (flow 2ca4d3a5): assigning to alloc ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:36:41 scheduler task 055d7a57 (flow 2ca4d3a5): loading (try 0): started
2021/07/08 16:36:41 scheduler task 055d7a57 (flow 2ca4d3a5): loading val<.=s3://niema-test/n100/r02/n100.r02.s064_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task ba37caf2 (flow 609775f9): loading (try 0): started
2021/07/08 16:36:41 scheduler task ba37caf2 (flow 609775f9): loading val<.=s3://niema-test/n100/r02/n100.r02.s004_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 134a0558 (flow 0f99a469): loading (try 0): started
2021/07/08 16:36:41 scheduler task 134a0558 (flow 0f99a469): loading val<.=s3://niema-test/n100/r02/n100.r02.s033_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c2690bb6 (flow c8530bd3): loading (try 0): started
2021/07/08 16:36:41 scheduler task c2690bb6 (flow c8530bd3): loading val<.=s3://niema-test/n100/r02/n100.r02.s071_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 227b4998 (flow 498981df): loading (try 0): started
2021/07/08 16:36:41 scheduler task 227b4998 (flow 498981df): loading val<.=s3://niema-test/n100/r02/n100.r02.s005_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task b5b0895c (flow 5e121a68): loading (try 0): started
2021/07/08 16:36:41 scheduler task b5b0895c (flow 5e121a68): loading val<.=s3://niema-test/n100/r02/n100.r02.s032_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8c914f7e (flow 56fb7d44): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8c914f7e (flow 56fb7d44): loading val<.=s3://niema-test/n100/r02/n100.r02.s074_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task bb81e9dc (flow ce74ed16): loading (try 0): started
2021/07/08 16:36:41 scheduler task bb81e9dc (flow ce74ed16): loading val<.=s3://niema-test/n100/r02/n100.r02.s035_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8e4c2298 (flow 95b427ce): loading (try 0): started
2021/07/08 16:36:41 scheduler task 8e4c2298 (flow 95b427ce): loading val<.=s3://niema-test/n100/r02/n100.r02.s077_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 080dc6e3 (flow a028a3dc): loading (try 0): started
2021/07/08 16:36:41 scheduler task 080dc6e3 (flow a028a3dc): loading val<.=s3://niema-test/n100/r02/n100.r02.s006_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task ba37caf2 (flow 609775f9): loading val<.=s3://niema-test/n100/r02/n100.r02.s004_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 04f3dd11 (flow 9cfb1911): loading (try 0): started
2021/07/08 16:36:41 scheduler task 5ed6a8f0 (flow d1a20a99): loading (try 0): started
2021/07/08 16:36:41 scheduler task 4e6261f7 (flow 31db7c1d): loading (try 0): started
2021/07/08 16:36:41 scheduler task 055d7a57 (flow 2ca4d3a5): loading val<.=s3://niema-test/n100/r02/n100.r02.s064_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task b5b0895c (flow 5e121a68): loading val<.=s3://niema-test/n100/r02/n100.r02.s032_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 4e6261f7 (flow 31db7c1d): loading val<.=s3://niema-test/n100/r02/n100.r02.s043_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5ed6a8f0 (flow d1a20a99): loading val<.=s3://niema-test/n100/r02/n100.r02.s075_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task d3ed6aad (flow dcb88340): loading (try 0): started
2021/07/08 16:36:41 scheduler task d3ed6aad (flow dcb88340): loading val<.=s3://niema-test/n100/r02/n100.r02.s057_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 83ad0a3c (flow 244ee460): loading (try 0): started
2021/07/08 16:36:41 scheduler task 83ad0a3c (flow 244ee460): loading val<.=s3://niema-test/n100/r02/n100.r02.s067_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task d3ed6aad (flow dcb88340): loading val<.=s3://niema-test/n100/r02/n100.r02.s057_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task aca0b7cc (flow 3d43c667): loading val<.=s3://niema-test/n100/r02/n100.r02.s072_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c73cacdd (flow c37abb9e): loading (try 0): started
2021/07/08 16:36:41 scheduler task c73cacdd (flow c37abb9e): loading val<.=s3://niema-test/n100/r02/n100.r02.s012_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 83ad0a3c (flow 244ee460): loading val<.=s3://niema-test/n100/r02/n100.r02.s067_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task d8e5f7d3 (flow 7ba184b6): loading (try 0): started
2021/07/08 16:36:41 scheduler task d8e5f7d3 (flow 7ba184b6): loading val<.=s3://niema-test/n100/r02/n100.r02.s029_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c73cacdd (flow c37abb9e): loading val<.=s3://niema-test/n100/r02/n100.r02.s012_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task cafad4ba (flow 5063d2f3): loading (try 0): started
2021/07/08 16:36:41 scheduler task d8e5f7d3 (flow 7ba184b6): loading val<.=s3://niema-test/n100/r02/n100.r02.s029_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 134a0558 (flow 0f99a469): loading val<.=s3://niema-test/n100/r02/n100.r02.s033_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 67f058e0 (flow 5ea8511d): loading (try 0): started
2021/07/08 16:36:41 scheduler task 67f058e0 (flow 5ea8511d): loading val<.=s3://niema-test/n100/r02/n100.r02.s026_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8c914f7e (flow 56fb7d44): loading val<.=s3://niema-test/n100/r02/n100.r02.s074_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task bb81e9dc (flow ce74ed16): loading val<.=s3://niema-test/n100/r02/n100.r02.s035_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3dadedef (flow 9abe98a2): loading (try 0): started
2021/07/08 16:36:41 scheduler task 3dadedef (flow 9abe98a2): loading val<.=s3://niema-test/n100/r02/n100.r02.s014_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 73f9bb6c (flow 958202cb): loading (try 0): started
2021/07/08 16:36:41 scheduler task 73f9bb6c (flow 958202cb): loading val<.=s3://niema-test/n100/r02/n100.r02.s036_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 3dadedef (flow 9abe98a2): loading val<.=s3://niema-test/n100/r02/n100.r02.s014_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task c2690bb6 (flow c8530bd3): loading val<.=s3://niema-test/n100/r02/n100.r02.s071_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 79554f4f (flow 08173ef0): loading (try 0): started
2021/07/08 16:36:41 scheduler task 79554f4f (flow 08173ef0): loading val<.=s3://niema-test/n100/r02/n100.r02.s008_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 73f9bb6c (flow 958202cb): loading val<.=s3://niema-test/n100/r02/n100.r02.s036_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 04f3dd11 (flow 9cfb1911): loading val<.=s3://niema-test/n100/r02/n100.r02.s025_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 227b4998 (flow 498981df): loading val<.=s3://niema-test/n100/r02/n100.r02.s005_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 8e4c2298 (flow 95b427ce): loading val<.=s3://niema-test/n100/r02/n100.r02.s077_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task aca0b7cc (flow 3d43c667): loading val<.=s3://niema-test/n100/r02/n100.r02.s072_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 5ed6a8f0 (flow d1a20a99): loading val<.=s3://niema-test/n100/r02/n100.r02.s075_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 04f3dd11 (flow 9cfb1911): loading val<.=s3://niema-test/n100/r02/n100.r02.s025_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 080dc6e3 (flow a028a3dc): loading val<.=s3://niema-test/n100/r02/n100.r02.s006_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 4e6261f7 (flow 31db7c1d): loading val<.=s3://niema-test/n100/r02/n100.r02.s043_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task cafad4ba (flow 5063d2f3): loading val<.=s3://niema-test/n100/r02/n100.r02.s011_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task cafad4ba (flow 5063d2f3): loading val<.=s3://niema-test/n100/r02/n100.r02.s011_R1.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 67f058e0 (flow 5ea8511d): loading val<.=s3://niema-test/n100/r02/n100.r02.s026_R2.fastq 35.4MiB>
2021/07/08 16:36:41 scheduler task 79554f4f (flow 08173ef0): loading val<.=s3://niema-test/n100/r02/n100.r02.s008_R1.fastq 35.4MiB>
2021/07/08 16:36:42 scheduler task 28e75581 (flow e654e99d): loaded val<.=3db6b91d 35.4MiB>
2021/07/08 16:36:42 scheduler task f748f409 (flow 46797130): loaded val<.=251e0525 35.4MiB>
2021/07/08 16:36:42 scheduler task 7a765bf2 (flow cde5ab27): loaded val<.=054e01fc 35.4MiB>
2021/07/08 16:36:42 scheduler task 507f546b (flow 338fe8dc): loaded val<.=90b7ab6d 35.4MiB>
2021/07/08 16:36:42 scheduler task bb6c2cd9 (flow 2f6e45f8): loaded val<.=9fbad7da 35.4MiB>
2021/07/08 16:36:42 scheduler task 591fadf3 (flow 9edef856): loaded val<.=3f995b9e 35.4MiB>
2021/07/08 16:36:42 scheduler task 0ead9da7 (flow b4466c12): loaded val<.=f1eaf97b 35.4MiB>
2021/07/08 16:36:42 scheduler task 2feb3f25 (flow 26422009): loaded val<.=5ecdce26 35.4MiB>
2021/07/08 16:36:42 scheduler task 591fadf3 (flow 9edef856): loaded val<.=2489b0ab 35.4MiB>
2021/07/08 16:36:42 scheduler task fde90f32 (flow 470f3008): loaded val<.=9e2ff304 35.4MiB>
2021/07/08 16:36:42 scheduler task 591fadf3 (flow 9edef856): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 8062f0aa (flow 1d767038): loaded val<.=1d292df8 35.4MiB>
2021/07/08 16:36:42 scheduler task 591fadf3 (flow 9edef856): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 5b2e9034 (flow 63c5e72c): loaded val<.=e19fc148 35.4MiB>
2021/07/08 16:36:42 scheduler task 8b7410bb (flow 51541ca9): loaded val<.=f119c1e0 35.4MiB>
2021/07/08 16:36:42 scheduler task 57d5d876 (flow fceac23c): loaded val<.=f552282b 35.4MiB>
2021/07/08 16:36:42 scheduler task bb6c2cd9 (flow 2f6e45f8): loaded val<.=4e95038b 35.4MiB>
2021/07/08 16:36:42 scheduler task bb6c2cd9 (flow 2f6e45f8): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task bb6c2cd9 (flow 2f6e45f8): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 2e1a4452 (flow 4573c8de): loaded val<.=b9f38467 35.4MiB>
2021/07/08 16:36:42 scheduler task 0b440a13 (flow 4a266829): loaded val<.=80871512 35.4MiB>
2021/07/08 16:36:42 scheduler task 7c966493 (flow 0819d118): loaded val<.=07e33f75 35.4MiB>
2021/07/08 16:36:42 scheduler task 5b2e9034 (flow 63c5e72c): loaded val<.=69e7ac60 35.4MiB>
2021/07/08 16:36:42 scheduler task 8f000427 (flow 2bf052bb): loaded val<.=b5b72843 35.4MiB>
2021/07/08 16:36:42 scheduler task 8273013c (flow d3ff6df9): loaded val<.=b65eebd6 35.4MiB>
2021/07/08 16:36:42 scheduler task 5b2e9034 (flow 63c5e72c): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 0b7fb97b (flow 874b9577): loaded val<.=d4353fed 35.4MiB>
2021/07/08 16:36:42 scheduler task 2e1a4452 (flow 4573c8de): loaded val<.=0c2bde4a 35.4MiB>
2021/07/08 16:36:42 scheduler task 2e1a4452 (flow 4573c8de): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task fde90f32 (flow 470f3008): loaded val<.=4be156ec 35.4MiB>
2021/07/08 16:36:42 scheduler task 56e751ca (flow 4e926108): loaded val<.=97059e57 35.4MiB>
2021/07/08 16:36:42 scheduler task fde90f32 (flow 470f3008): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task c9165e2e (flow e2043d0a): loaded val<.=e5d21aef 35.4MiB>
2021/07/08 16:36:42 scheduler task 5b2e9034 (flow 63c5e72c): submitting (try 0): started
2021/07/08 16:36:42 scheduler task fd672bab (flow d90e3629): loaded val<.=25db5dd9 35.4MiB>
2021/07/08 16:36:42 scheduler task 9b94a5e4 (flow 834f80b2): loaded val<.=ebf1d370 35.4MiB>
2021/07/08 16:36:42 scheduler task 3e9c9b76 (flow f2f62b67): loaded val<.=7e7355f0 35.4MiB>
2021/07/08 16:36:42 scheduler task 2e1a4452 (flow 4573c8de): submitting (try 0): started
2021/07/08 16:36:42 scheduler task fde90f32 (flow 470f3008): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 4bda52eb (flow b3c6f94e): loaded val<.=ab36b104 35.4MiB>
2021/07/08 16:36:42 scheduler task 9b94a5e4 (flow 834f80b2): loaded val<.=70b47718 35.4MiB>
2021/07/08 16:36:42 scheduler task a24d412d (flow fedce965): loaded val<.=45fb6ccc 35.4MiB>
2021/07/08 16:36:42 scheduler task 6628d1b5 (flow 77fde731): loaded val<.=38616b23 35.4MiB>
2021/07/08 16:36:42 scheduler task 9b94a5e4 (flow 834f80b2): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 8b7410bb (flow 51541ca9): loaded val<.=21b44154 35.4MiB>
2021/07/08 16:36:42 scheduler task 8b7410bb (flow 51541ca9): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 1e604ca0 (flow 35fb25c1): loaded val<.=8d265d5e 35.4MiB>
2021/07/08 16:36:42 scheduler task 9b94a5e4 (flow 834f80b2): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 5f52d829 (flow 23c21f0f): loaded val<.=6e8776f6 35.4MiB>
2021/07/08 16:36:42 scheduler task 8b7410bb (flow 51541ca9): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 8f000427 (flow 2bf052bb): loaded val<.=444e8f40 35.4MiB>
2021/07/08 16:36:42 scheduler task 8f000427 (flow 2bf052bb): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task a8a30cc1 (flow 7b9af5ba): loaded val<.=65ea43bf 35.4MiB>
2021/07/08 16:36:42 scheduler task 8f000427 (flow 2bf052bb): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 3b6becc8 (flow 3d8a8283): loaded val<.=e1062971 35.4MiB>
2021/07/08 16:36:42 scheduler task 9b70412c (flow e085395a): loaded val<.=494366c7 35.4MiB>
2021/07/08 16:36:42 scheduler task 0b440a13 (flow 4a266829): loaded val<.=13c375ce 35.4MiB>
2021/07/08 16:36:42 scheduler task 0b440a13 (flow 4a266829): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 0b440a13 (flow 4a266829): submitting (try 0): started
2021/07/08 16:36:42 scheduler task e81d51f7 (flow 01aa42bd): loaded val<.=4d9d3eff 35.4MiB>
2021/07/08 16:36:42 scheduler task d06e59c3 (flow 57bcabea): loaded val<.=c6a201d7 35.4MiB>
2021/07/08 16:36:42 scheduler task 2feb3f25 (flow 26422009): loaded val<.=40e5ebcb 35.4MiB>
2021/07/08 16:36:42 scheduler task 2feb3f25 (flow 26422009): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 7c966493 (flow 0819d118): loaded val<.=b2ea6781 35.4MiB>
2021/07/08 16:36:42 scheduler task 7c966493 (flow 0819d118): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 2feb3f25 (flow 26422009): submitting (try 0): started
2021/07/08 16:36:42 scheduler task fd672bab (flow d90e3629): loaded val<.=0b593648 35.4MiB>
2021/07/08 16:36:42 scheduler task fd672bab (flow d90e3629): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 7c966493 (flow 0819d118): submitting (try 0): started
2021/07/08 16:36:42 scheduler task e81d51f7 (flow 01aa42bd): loaded val<.=e0c9df43 35.4MiB>
2021/07/08 16:36:42 scheduler task e81d51f7 (flow 01aa42bd): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task fd672bab (flow d90e3629): submitting (try 0): started
2021/07/08 16:36:42 scheduler task e81d51f7 (flow 01aa42bd): submitting (try 0): started
2021/07/08 16:36:42 scheduler task 57d5d876 (flow fceac23c): loaded val<.=31bca599 35.4MiB>
2021/07/08 16:36:42 scheduler task 57d5d876 (flow fceac23c): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task 57d5d876 (flow fceac23c): submitting (try 0): started
2021/07/08 16:36:42 scheduler task f748f409 (flow 46797130): loaded val<.=7376e524 35.4MiB>
2021/07/08 16:36:42 scheduler task f748f409 (flow 46797130): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task f748f409 (flow 46797130): submitting (try 0): started
2021/07/08 16:36:42 scheduler task c9165e2e (flow e2043d0a): loaded val<.=c6e54f27 35.4MiB>
2021/07/08 16:36:42 scheduler task c9165e2e (flow e2043d0a): loading (try 0): successful, next state: submitting
2021/07/08 16:36:42 scheduler task c9165e2e (flow e2043d0a): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 591fadf3 (flow 9edef856): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:43 scheduler task 591fadf3 (flow 9edef856): waiting for completion (try 0): started
2021/07/08 16:36:43  ->  n100.r02.s087.Main.out_file 9edef856 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:43 n100.r02.s087.Main.out_file 9edef856 n100/r02/n100.r02.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1ce95f53f7ce927286b24742fc588103328602394d9abf227c62160f6747bc89
	sha256:9edef8560ef9d6825ec11af53836905d70b969f9db20241402ea80062feac7a8
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/591fadf363b0aa39f5dd90d0856de075c43a9a486b4238e691101f10f8c0fd41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s087_output"
	    wget -O "n100.r02.s087_output/n100.r02.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s087_output/n100.r02.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s087_output/n100.r02.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s087_output/n100.r02.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s087_output/n100.r02.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s087_output/n100.r02.s087.reference.fas" "n100.r02.s087_output/n100.r02.s087.fq1.fastq" "n100.r02.s087_output/n100.r02.s087.fq2.fastq" | samtools view -bS - > "n100.r02.s087_output/n100.r02.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s087_output/n100.r02.s087.untrimmed.sorted.bam" "n100.r02.s087_output/n100.r02.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s087_output/n100.r02.s087.untrimmed.sorted.bam" -b "n100.r02.s087_output/n100.r02.s087.primers.bed" -p "n100.r02.s087_output/n100.r02.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" "n100.r02.s087_output/n100.r02.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s087_output/n100.r02.s087.reference.fas" "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" > "n100.r02.s087_output/n100.r02.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s087_output/n100.r02.s087.reference.fas" --call-indels "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" > "n100.r02.s087_output/n100.r02.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" > "n100.r02.s087_output/n100.r02.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s087_output/n100.r02.s087.depth.txt" "n100.r02.s087_output/n100.r02.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s087_output/n100.r02.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s087_output/n100.r02.s087.reference.fas" | bcftools consensus -m "n100.r02.s087_output/n100.r02.s087.low_depth.tsv" tmp.vcf.gz > "n100.r02.s087_output/n100.r02.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:43 scheduler task bb6c2cd9 (flow 2f6e45f8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:43 scheduler task 134a0558 (flow 0f99a469): loaded val<.=b97aa430 35.4MiB>
2021/07/08 16:36:43 scheduler task bb6c2cd9 (flow 2f6e45f8): waiting for completion (try 0): started
2021/07/08 16:36:43  ->  n100.r02.s058.Main.out_file 2f6e45f8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:43 n100.r02.s058.Main.out_file 2f6e45f8 n100/r02/n100.r02.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a78c58b0b5d4e0253ce60ce5f2d887120bfaa40b95321b9af8d58134dc476eb5
	sha256:2f6e45f88533d49ec8dd32664624a572df5f367bbe27d56ac7704945d280ff94
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb6c2cd989554e891928e9f0b7b69468b484ed45f5e28ebdee01d99e8325aa4f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s058_output"
	    wget -O "n100.r02.s058_output/n100.r02.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s058_output/n100.r02.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s058_output/n100.r02.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s058_output/n100.r02.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s058_output/n100.r02.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s058_output/n100.r02.s058.reference.fas" "n100.r02.s058_output/n100.r02.s058.fq1.fastq" "n100.r02.s058_output/n100.r02.s058.fq2.fastq" | samtools view -bS - > "n100.r02.s058_output/n100.r02.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s058_output/n100.r02.s058.untrimmed.sorted.bam" "n100.r02.s058_output/n100.r02.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s058_output/n100.r02.s058.untrimmed.sorted.bam" -b "n100.r02.s058_output/n100.r02.s058.primers.bed" -p "n100.r02.s058_output/n100.r02.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" "n100.r02.s058_output/n100.r02.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s058_output/n100.r02.s058.reference.fas" "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" > "n100.r02.s058_output/n100.r02.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s058_output/n100.r02.s058.reference.fas" --call-indels "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" > "n100.r02.s058_output/n100.r02.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" > "n100.r02.s058_output/n100.r02.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s058_output/n100.r02.s058.depth.txt" "n100.r02.s058_output/n100.r02.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s058_output/n100.r02.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s058_output/n100.r02.s058.reference.fas" | bcftools consensus -m "n100.r02.s058_output/n100.r02.s058.low_depth.tsv" tmp.vcf.gz > "n100.r02.s058_output/n100.r02.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:43 scheduler task 8b35b6a1 (flow 29709fad): loaded val<.=edca195b 35.4MiB>
2021/07/08 16:36:43 scheduler task 1c084c9f (flow 8b1babe2): loaded val<.=fc765430 35.4MiB>
2021/07/08 16:36:43 scheduler task 0e177187 (flow ce3a6617): loaded val<.=66512a75 35.4MiB>
2021/07/08 16:36:43 scheduler task 7018ad68 (flow 0cad19f3): loaded val<.=7f5dc07b 35.4MiB>
2021/07/08 16:36:43 scheduler task 87971b75 (flow f98fa6a9): loaded val<.=43ee109a 35.4MiB>
2021/07/08 16:36:43 scheduler task 055d7a57 (flow 2ca4d3a5): loaded val<.=972c455a 35.4MiB>
2021/07/08 16:36:43 scheduler task aca0b7cc (flow 3d43c667): loaded val<.=57ab4c6a 35.4MiB>
2021/07/08 16:36:43 scheduler task 7a765bf2 (flow cde5ab27): loaded val<.=b211cae2 35.4MiB>
2021/07/08 16:36:43 scheduler task 7a765bf2 (flow cde5ab27): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 8e4c2298 (flow 95b427ce): loaded val<.=9df21bfa 35.4MiB>
2021/07/08 16:36:43 scheduler task 69a372ec (flow c6cdb5ad): loaded val<.=580f8665 35.4MiB>
2021/07/08 16:36:43 scheduler task 4e6261f7 (flow 31db7c1d): loaded val<.=c087119d 35.4MiB>
2021/07/08 16:36:43 scheduler task 7a765bf2 (flow cde5ab27): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 134a0558 (flow 0f99a469): loaded val<.=7cf01715 35.4MiB>
2021/07/08 16:36:43 scheduler task 69a372ec (flow c6cdb5ad): loaded val<.=9bb28058 35.4MiB>
2021/07/08 16:36:43 scheduler task 69a372ec (flow c6cdb5ad): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 134a0558 (flow 0f99a469): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 67f058e0 (flow 5ea8511d): loaded val<.=a40acfa0 35.4MiB>
2021/07/08 16:36:43 scheduler task 83ad0a3c (flow 244ee460): loaded val<.=2dbcf07a 35.4MiB>
2021/07/08 16:36:43 scheduler task 69a372ec (flow c6cdb5ad): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 134a0558 (flow 0f99a469): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 47667179 (flow cca7236b): loaded val<.=3fab4053 35.4MiB>
2021/07/08 16:36:43 scheduler task fc432408 (flow 28e5d9c6): loaded val<.=468f8890 35.4MiB>
2021/07/08 16:36:43 scheduler task 8c914f7e (flow 56fb7d44): loaded val<.=29b674bf 35.4MiB>
2021/07/08 16:36:43 scheduler task 87971b75 (flow f98fa6a9): loaded val<.=631d75fd 35.4MiB>
2021/07/08 16:36:43 scheduler task fbd9cfd4 (flow f8af3684): loaded val<.=5be4c580 35.4MiB>
2021/07/08 16:36:43 scheduler task 8654fc3f (flow c91904a4): loaded val<.=3e23995a 35.4MiB>
2021/07/08 16:36:43 scheduler task 87971b75 (flow f98fa6a9): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 6f0ba86a (flow 16e41ecb): loaded val<.=104fbce7 35.4MiB>
2021/07/08 16:36:43 scheduler task 27e90d8b (flow d66c2225): loaded val<.=760c07ff 35.4MiB>
2021/07/08 16:36:43 scheduler task ba37caf2 (flow 609775f9): loaded val<.=f18090a8 35.4MiB>
2021/07/08 16:36:43 scheduler task 6dbd0fd3 (flow 4574c5bb): loaded val<.=86630494 35.4MiB>
2021/07/08 16:36:43 scheduler task 04f3dd11 (flow 9cfb1911): loaded val<.=dda191c2 35.4MiB>
2021/07/08 16:36:43 scheduler task 4c496130 (flow 7f73ff4a): loaded val<.=b0d209a5 35.4MiB>
2021/07/08 16:36:43 scheduler task 506303dc (flow 1e4c353c): loaded val<.=cc88be47 35.4MiB>
2021/07/08 16:36:43 scheduler task d8e5f7d3 (flow 7ba184b6): loaded val<.=38327f52 35.4MiB>
2021/07/08 16:36:43 scheduler task 40ee7582 (flow 461731e4): loaded val<.=75dc69e1 35.4MiB>
2021/07/08 16:36:43 scheduler task 5b2e9034 (flow 63c5e72c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:43 scheduler task 87971b75 (flow f98fa6a9): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 5b2e9034 (flow 63c5e72c): waiting for completion (try 0): started
2021/07/08 16:36:43  ->  n100.r02.s028.Main.out_file 63c5e72c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:43 n100.r02.s028.Main.out_file 63c5e72c n100/r02/n100.r02.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cd041dc146d9ee319b9c1abf88fcbc0436ff70c9127f781a858eef8c6a26696
	sha256:63c5e72cf24924abb07e1bb7148e4c4bd0357f1eb66f4f15ad81c4b91d061ee2
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5b2e90340d8f671474100cd001adf55001357835c79d2d453ce26c3c2dea2a63
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s028_output"
	    wget -O "n100.r02.s028_output/n100.r02.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s028_output/n100.r02.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s028_output/n100.r02.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s028_output/n100.r02.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s028_output/n100.r02.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s028_output/n100.r02.s028.reference.fas" "n100.r02.s028_output/n100.r02.s028.fq1.fastq" "n100.r02.s028_output/n100.r02.s028.fq2.fastq" | samtools view -bS - > "n100.r02.s028_output/n100.r02.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s028_output/n100.r02.s028.untrimmed.sorted.bam" "n100.r02.s028_output/n100.r02.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s028_output/n100.r02.s028.untrimmed.sorted.bam" -b "n100.r02.s028_output/n100.r02.s028.primers.bed" -p "n100.r02.s028_output/n100.r02.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" "n100.r02.s028_output/n100.r02.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s028_output/n100.r02.s028.reference.fas" "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" > "n100.r02.s028_output/n100.r02.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s028_output/n100.r02.s028.reference.fas" --call-indels "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" > "n100.r02.s028_output/n100.r02.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" > "n100.r02.s028_output/n100.r02.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s028_output/n100.r02.s028.depth.txt" "n100.r02.s028_output/n100.r02.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s028_output/n100.r02.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s028_output/n100.r02.s028.reference.fas" | bcftools consensus -m "n100.r02.s028_output/n100.r02.s028.low_depth.tsv" tmp.vcf.gz > "n100.r02.s028_output/n100.r02.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:43 scheduler task 2e1a4452 (flow 4573c8de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:43 scheduler task 2e1a4452 (flow 4573c8de): waiting for completion (try 0): started
2021/07/08 16:36:43  ->  n100.r02.s085.Main.out_file 4573c8de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:43 n100.r02.s085.Main.out_file 4573c8de n100/r02/n100.r02.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2bf9924742b9fb5b795a74a464275d206924556473f9436b4b3c63ea21a86e69
	sha256:4573c8de1b652f7be959dd53380a4edd79c0672356c06171379d526af63335ba
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2e1a4452eb3cf88d99048a3a81c07f05236216ab24c9157201dd015c89cea48d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s085_output"
	    wget -O "n100.r02.s085_output/n100.r02.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s085_output/n100.r02.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s085_output/n100.r02.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s085_output/n100.r02.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s085_output/n100.r02.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s085_output/n100.r02.s085.reference.fas" "n100.r02.s085_output/n100.r02.s085.fq1.fastq" "n100.r02.s085_output/n100.r02.s085.fq2.fastq" | samtools view -bS - > "n100.r02.s085_output/n100.r02.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s085_output/n100.r02.s085.untrimmed.sorted.bam" "n100.r02.s085_output/n100.r02.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s085_output/n100.r02.s085.untrimmed.sorted.bam" -b "n100.r02.s085_output/n100.r02.s085.primers.bed" -p "n100.r02.s085_output/n100.r02.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" "n100.r02.s085_output/n100.r02.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s085_output/n100.r02.s085.reference.fas" "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" > "n100.r02.s085_output/n100.r02.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s085_output/n100.r02.s085.reference.fas" --call-indels "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" > "n100.r02.s085_output/n100.r02.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" > "n100.r02.s085_output/n100.r02.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s085_output/n100.r02.s085.depth.txt" "n100.r02.s085_output/n100.r02.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s085_output/n100.r02.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s085_output/n100.r02.s085.reference.fas" | bcftools consensus -m "n100.r02.s085_output/n100.r02.s085.low_depth.tsv" tmp.vcf.gz > "n100.r02.s085_output/n100.r02.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:43 scheduler task fde90f32 (flow 470f3008): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:43 scheduler task fde90f32 (flow 470f3008): waiting for completion (try 0): started
2021/07/08 16:36:43  ->  n100.r02.s076.Main.out_file 470f3008 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:43 n100.r02.s076.Main.out_file 470f3008 n100/r02/n100.r02.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cb4d99ab36abecd33ba31a413cc1731e1a5ca0442a6dbfaeb362198cd6a9a5ab
	sha256:470f30086805c1b10e2e48d5f9da9238f0a2bb580711703aedc39b719d0e2865
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fde90f3265cb60d9604dea8605028088afb20098a820d8abcff5c4d4c434ddd7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s076_output"
	    wget -O "n100.r02.s076_output/n100.r02.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s076_output/n100.r02.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s076_output/n100.r02.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s076_output/n100.r02.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s076_output/n100.r02.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s076_output/n100.r02.s076.reference.fas" "n100.r02.s076_output/n100.r02.s076.fq1.fastq" "n100.r02.s076_output/n100.r02.s076.fq2.fastq" | samtools view -bS - > "n100.r02.s076_output/n100.r02.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s076_output/n100.r02.s076.untrimmed.sorted.bam" "n100.r02.s076_output/n100.r02.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s076_output/n100.r02.s076.untrimmed.sorted.bam" -b "n100.r02.s076_output/n100.r02.s076.primers.bed" -p "n100.r02.s076_output/n100.r02.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" "n100.r02.s076_output/n100.r02.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s076_output/n100.r02.s076.reference.fas" "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" > "n100.r02.s076_output/n100.r02.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s076_output/n100.r02.s076.reference.fas" --call-indels "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" > "n100.r02.s076_output/n100.r02.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" > "n100.r02.s076_output/n100.r02.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s076_output/n100.r02.s076.depth.txt" "n100.r02.s076_output/n100.r02.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s076_output/n100.r02.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s076_output/n100.r02.s076.reference.fas" | bcftools consensus -m "n100.r02.s076_output/n100.r02.s076.low_depth.tsv" tmp.vcf.gz > "n100.r02.s076_output/n100.r02.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:43 scheduler task 7d3bc912 (flow e2236b63): loaded val<.=fec726a3 35.4MiB>
2021/07/08 16:36:43 scheduler task 5a1a8dc5 (flow 7e2f5b09): loaded val<.=008b2fee 35.4MiB>
2021/07/08 16:36:43 scheduler task cafad4ba (flow 5063d2f3): loaded val<.=35489571 35.4MiB>
2021/07/08 16:36:43 scheduler task c88b5c52 (flow 7f934c83): loaded val<.=94056f4b 35.4MiB>
2021/07/08 16:36:43 scheduler task 4c496130 (flow 7f73ff4a): loaded val<.=73c01a8e 35.4MiB>
2021/07/08 16:36:43 scheduler task 4c496130 (flow 7f73ff4a): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task c2690bb6 (flow c8530bd3): loaded val<.=f987a7c2 35.4MiB>
2021/07/08 16:36:43 scheduler task 4c496130 (flow 7f73ff4a): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 45825593 (flow 6b3eb25c): loaded val<.=786f027d 35.4MiB>
2021/07/08 16:36:43 scheduler task 0d3f8ca3 (flow a2df0a88): loaded val<.=df8c6416 35.4MiB>
2021/07/08 16:36:43 scheduler task f6b05f5e (flow 64781829): loaded val<.=0b47c144 35.4MiB>
2021/07/08 16:36:43 scheduler task 79554f4f (flow 08173ef0): loaded val<.=4eed4185 35.4MiB>
2021/07/08 16:36:43 scheduler task 3dadedef (flow 9abe98a2): loaded val<.=104b40e6 35.4MiB>
2021/07/08 16:36:43 scheduler task 83ad0a3c (flow 244ee460): loaded val<.=9c41b259 35.4MiB>
2021/07/08 16:36:43 scheduler task 83ad0a3c (flow 244ee460): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 67f058e0 (flow 5ea8511d): loaded val<.=c6cd6b18 35.4MiB>
2021/07/08 16:36:43 scheduler task 67f058e0 (flow 5ea8511d): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 83ad0a3c (flow 244ee460): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 67f058e0 (flow 5ea8511d): submitting (try 0): started
2021/07/08 16:36:43 scheduler task c73cacdd (flow c37abb9e): loaded val<.=ec37acfc 35.4MiB>
2021/07/08 16:36:43 scheduler task 45825593 (flow 6b3eb25c): loaded val<.=2519469e 35.4MiB>
2021/07/08 16:36:43 scheduler task 45825593 (flow 6b3eb25c): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 83e3fcac (flow e3dae658): loaded val<.=12fd30ce 35.4MiB>
2021/07/08 16:36:43 scheduler task 055d7a57 (flow 2ca4d3a5): loaded val<.=4a3778df 35.4MiB>
2021/07/08 16:36:43 scheduler task 055d7a57 (flow 2ca4d3a5): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 0ead9da7 (flow b4466c12): loaded val<.=b7c8394c 35.4MiB>
2021/07/08 16:36:43 scheduler task 0ead9da7 (flow b4466c12): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task bb07980b (flow b78d6362): loaded val<.=995e633f 35.4MiB>
2021/07/08 16:36:43 scheduler task 45825593 (flow 6b3eb25c): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 055d7a57 (flow 2ca4d3a5): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 0ead9da7 (flow b4466c12): submitting (try 0): started
2021/07/08 16:36:43 scheduler task aca0b7cc (flow 3d43c667): loaded val<.=d411fe58 35.4MiB>
2021/07/08 16:36:43 scheduler task aca0b7cc (flow 3d43c667): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 7e9cd126 (flow ac5dc48d): loaded val<.=7df20284 35.4MiB>
2021/07/08 16:36:43 scheduler task 73f9bb6c (flow 958202cb): loaded val<.=6998278f 35.4MiB>
2021/07/08 16:36:43 scheduler task e6c82ca0 (flow 2f81b13d): loaded val<.=09c98945 35.4MiB>
2021/07/08 16:36:43 scheduler task aca0b7cc (flow 3d43c667): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 9b94a5e4 (flow 834f80b2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:43 scheduler task 9b94a5e4 (flow 834f80b2): waiting for completion (try 0): started
2021/07/08 16:36:43  ->  n100.r02.s030.Main.out_file 834f80b2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:43 n100.r02.s030.Main.out_file 834f80b2 n100/r02/n100.r02.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:676193a7b3b11277bdba173fdd4dc934f1c99d9f8391cb9f60eee1457bdeee11
	sha256:834f80b2d32cc5c72b0e6d7c9c67c79234be7b3db561db3988abc214b1035f3f
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9b94a5e42f035d783818627d252777ff1fc85cbf3a507830bbfdc04a658d8d18
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s030_output"
	    wget -O "n100.r02.s030_output/n100.r02.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s030_output/n100.r02.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s030_output/n100.r02.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s030_output/n100.r02.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s030_output/n100.r02.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s030_output/n100.r02.s030.reference.fas" "n100.r02.s030_output/n100.r02.s030.fq1.fastq" "n100.r02.s030_output/n100.r02.s030.fq2.fastq" | samtools view -bS - > "n100.r02.s030_output/n100.r02.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s030_output/n100.r02.s030.untrimmed.sorted.bam" "n100.r02.s030_output/n100.r02.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s030_output/n100.r02.s030.untrimmed.sorted.bam" -b "n100.r02.s030_output/n100.r02.s030.primers.bed" -p "n100.r02.s030_output/n100.r02.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" "n100.r02.s030_output/n100.r02.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s030_output/n100.r02.s030.reference.fas" "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" > "n100.r02.s030_output/n100.r02.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s030_output/n100.r02.s030.reference.fas" --call-indels "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" > "n100.r02.s030_output/n100.r02.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" > "n100.r02.s030_output/n100.r02.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s030_output/n100.r02.s030.depth.txt" "n100.r02.s030_output/n100.r02.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s030_output/n100.r02.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s030_output/n100.r02.s030.reference.fas" | bcftools consensus -m "n100.r02.s030_output/n100.r02.s030.low_depth.tsv" tmp.vcf.gz > "n100.r02.s030_output/n100.r02.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:43 scheduler task 1c084c9f (flow 8b1babe2): loaded val<.=e647df16 35.4MiB>
2021/07/08 16:36:43 scheduler task 1c084c9f (flow 8b1babe2): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 68d632e0 (flow e0a7fa8c): loaded val<.=ef08df5f 35.4MiB>
2021/07/08 16:36:43 scheduler task 080dc6e3 (flow a028a3dc): loaded val<.=bd905591 35.4MiB>
2021/07/08 16:36:43 scheduler task 1c084c9f (flow 8b1babe2): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 2af220b8 (flow f94e4acc): loaded val<.=44b4ceb3 35.4MiB>
2021/07/08 16:36:43 scheduler task 3b6becc8 (flow 3d8a8283): loaded val<.=c23c28fe 35.4MiB>
2021/07/08 16:36:43 scheduler task 3b6becc8 (flow 3d8a8283): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 0d3f8ca3 (flow a2df0a88): loaded val<.=bf115a60 35.4MiB>
2021/07/08 16:36:43 scheduler task 0d3f8ca3 (flow a2df0a88): loading (try 0): successful, next state: submitting
2021/07/08 16:36:43 scheduler task 3b6becc8 (flow 3d8a8283): submitting (try 0): started
2021/07/08 16:36:43 scheduler task 0d3f8ca3 (flow a2df0a88): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 94dedf3c (flow d1fb7eba): loaded val<.=7e54c511 35.4MiB>
2021/07/08 16:36:44 scheduler task 8b7410bb (flow 51541ca9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task 8b7410bb (flow 51541ca9): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s017.Main.out_file 51541ca9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s017.Main.out_file 51541ca9 n100/r02/n100.r02.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e872f35a454f578ad9cc8dff5beddf399f0ffb89d71183fc55491583ddde5ee
	sha256:51541ca9f72300d985054dca32a7b3efb883042d4be32efab2cf261587f12bcd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b7410bb38afe1d3e824de27458bd7141dc8aff84a13b62dad861e47abf27d62
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s017_output"
	    wget -O "n100.r02.s017_output/n100.r02.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s017_output/n100.r02.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s017_output/n100.r02.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s017_output/n100.r02.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s017_output/n100.r02.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s017_output/n100.r02.s017.reference.fas" "n100.r02.s017_output/n100.r02.s017.fq1.fastq" "n100.r02.s017_output/n100.r02.s017.fq2.fastq" | samtools view -bS - > "n100.r02.s017_output/n100.r02.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s017_output/n100.r02.s017.untrimmed.sorted.bam" "n100.r02.s017_output/n100.r02.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s017_output/n100.r02.s017.untrimmed.sorted.bam" -b "n100.r02.s017_output/n100.r02.s017.primers.bed" -p "n100.r02.s017_output/n100.r02.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" "n100.r02.s017_output/n100.r02.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s017_output/n100.r02.s017.reference.fas" "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" > "n100.r02.s017_output/n100.r02.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s017_output/n100.r02.s017.reference.fas" --call-indels "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" > "n100.r02.s017_output/n100.r02.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" > "n100.r02.s017_output/n100.r02.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s017_output/n100.r02.s017.depth.txt" "n100.r02.s017_output/n100.r02.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s017_output/n100.r02.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s017_output/n100.r02.s017.reference.fas" | bcftools consensus -m "n100.r02.s017_output/n100.r02.s017.low_depth.tsv" tmp.vcf.gz > "n100.r02.s017_output/n100.r02.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:44 scheduler task 79554f4f (flow 08173ef0): loaded val<.=c20f3a57 35.4MiB>
2021/07/08 16:36:44 scheduler task 79554f4f (flow 08173ef0): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 8273013c (flow d3ff6df9): loaded val<.=a6ca8e27 35.4MiB>
2021/07/08 16:36:44 scheduler task 8273013c (flow d3ff6df9): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 79554f4f (flow 08173ef0): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 5ed6a8f0 (flow d1a20a99): loaded val<.=f5c66a08 35.4MiB>
2021/07/08 16:36:44 scheduler task 8273013c (flow d3ff6df9): submitting (try 0): started
2021/07/08 16:36:44 scheduler task e6c82ca0 (flow 2f81b13d): loaded val<.=8c655cab 35.4MiB>
2021/07/08 16:36:44 scheduler task e6c82ca0 (flow 2f81b13d): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 8c914f7e (flow 56fb7d44): loaded val<.=0c9eb3ab 35.4MiB>
2021/07/08 16:36:44 scheduler task 8c914f7e (flow 56fb7d44): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task e6c82ca0 (flow 2f81b13d): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8c914f7e (flow 56fb7d44): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 5f52d829 (flow 23c21f0f): loaded val<.=581972d9 35.4MiB>
2021/07/08 16:36:44 scheduler task 5f52d829 (flow 23c21f0f): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 1e604ca0 (flow 35fb25c1): loaded val<.=fc0301eb 35.4MiB>
2021/07/08 16:36:44 scheduler task 1e604ca0 (flow 35fb25c1): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 5f52d829 (flow 23c21f0f): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 1e604ca0 (flow 35fb25c1): submitting (try 0): started
2021/07/08 16:36:44 scheduler task f6b05f5e (flow 64781829): loaded val<.=3a82292b 35.4MiB>
2021/07/08 16:36:44 scheduler task f6b05f5e (flow 64781829): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task f6b05f5e (flow 64781829): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 0b7fb97b (flow 874b9577): loaded val<.=95dcbea9 35.4MiB>
2021/07/08 16:36:44 scheduler task 0b7fb97b (flow 874b9577): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0b7fb97b (flow 874b9577): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8f000427 (flow 2bf052bb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task 8f000427 (flow 2bf052bb): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s021.Main.out_file 2bf052bb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s021.Main.out_file 2bf052bb n100/r02/n100.r02.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:21b73f38de78e63fb0fed01bb5c9db6d7bb0b4fe968f2923f574763c43ec04bc
	sha256:2bf052bb7d41b8101d22ca9145d70a8c564290e2240edaf228f3d98ef30efe9e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f000427dba4a0ad0c0c3f62e3b4a5ce5a24e27ae64725b51e23664e06e63af6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s021_output"
	    wget -O "n100.r02.s021_output/n100.r02.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s021_output/n100.r02.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s021_output/n100.r02.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s021_output/n100.r02.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s021_output/n100.r02.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s021_output/n100.r02.s021.reference.fas" "n100.r02.s021_output/n100.r02.s021.fq1.fastq" "n100.r02.s021_output/n100.r02.s021.fq2.fastq" | samtools view -bS - > "n100.r02.s021_output/n100.r02.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s021_output/n100.r02.s021.untrimmed.sorted.bam" "n100.r02.s021_output/n100.r02.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s021_output/n100.r02.s021.untrimmed.sorted.bam" -b "n100.r02.s021_output/n100.r02.s021.primers.bed" -p "n100.r02.s021_output/n100.r02.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" "n100.r02.s021_output/n100.r02.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s021_output/n100.r02.s021.reference.fas" "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" > "n100.r02.s021_output/n100.r02.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s021_output/n100.r02.s021.reference.fas" --call-indels "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" > "n100.r02.s021_output/n100.r02.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" > "n100.r02.s021_output/n100.r02.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s021_output/n100.r02.s021.depth.txt" "n100.r02.s021_output/n100.r02.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s021_output/n100.r02.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s021_output/n100.r02.s021.reference.fas" | bcftools consensus -m "n100.r02.s021_output/n100.r02.s021.low_depth.tsv" tmp.vcf.gz > "n100.r02.s021_output/n100.r02.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:44 scheduler task 40ee7582 (flow 461731e4): loaded val<.=f3660a07 35.4MiB>
2021/07/08 16:36:44 scheduler task 40ee7582 (flow 461731e4): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 40ee7582 (flow 461731e4): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 6f0ba86a (flow 16e41ecb): loaded val<.=dd473633 35.4MiB>
2021/07/08 16:36:44 scheduler task 6f0ba86a (flow 16e41ecb): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task d06e59c3 (flow 57bcabea): loaded val<.=e829e05a 35.4MiB>
2021/07/08 16:36:44 scheduler task d06e59c3 (flow 57bcabea): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 6f0ba86a (flow 16e41ecb): submitting (try 0): started
2021/07/08 16:36:44 scheduler task d06e59c3 (flow 57bcabea): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 4bda52eb (flow b3c6f94e): loaded val<.=1d16d152 35.4MiB>
2021/07/08 16:36:44 scheduler task 4bda52eb (flow b3c6f94e): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 4bda52eb (flow b3c6f94e): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 94dedf3c (flow d1fb7eba): loaded val<.=8e35ad2b 35.4MiB>
2021/07/08 16:36:44 scheduler task 94dedf3c (flow d1fb7eba): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 94dedf3c (flow d1fb7eba): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 6dbd0fd3 (flow 4574c5bb): loaded val<.=ea4a7f62 35.4MiB>
2021/07/08 16:36:44 scheduler task 6dbd0fd3 (flow 4574c5bb): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 6dbd0fd3 (flow 4574c5bb): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 44851b9f (flow 47ed53a8): loaded val<.=bdc97374 35.4MiB>
2021/07/08 16:36:44 scheduler task fc432408 (flow 28e5d9c6): loaded val<.=6262d39d 35.4MiB>
2021/07/08 16:36:44 scheduler task fc432408 (flow 28e5d9c6): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0a7969ad (flow 678c0cb0): loaded val<.=2531b375 35.4MiB>
2021/07/08 16:36:44 scheduler task 83e3fcac (flow e3dae658): loaded val<.=de85f507 35.4MiB>
2021/07/08 16:36:44 scheduler task 83e3fcac (flow e3dae658): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0e861905 (flow 7a724582): loaded val<.=511245a7 35.4MiB>
2021/07/08 16:36:44 scheduler task 2154d467 (flow 0ea2123a): loaded val<.=c6025fad 35.4MiB>
2021/07/08 16:36:44 scheduler task f1d0e2d0 (flow 37b5e302): loaded val<.=7edfd579 35.4MiB>
2021/07/08 16:36:44 scheduler task 4e6261f7 (flow 31db7c1d): loaded val<.=ef957844 35.4MiB>
2021/07/08 16:36:44 scheduler task 4e6261f7 (flow 31db7c1d): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task fc432408 (flow 28e5d9c6): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 0b440a13 (flow 4a266829): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task 83e3fcac (flow e3dae658): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 0d089343 (flow e6ad34ee): loaded val<.=409cd52a 35.4MiB>
2021/07/08 16:36:44 scheduler task 4e6261f7 (flow 31db7c1d): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 0e861905 (flow 7a724582): loaded val<.=794a2d54 35.4MiB>
2021/07/08 16:36:44 scheduler task 0e861905 (flow 7a724582): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 8c10b81b (flow ef286eca): loaded val<.=00fba486 35.4MiB>
2021/07/08 16:36:44 scheduler task 5100a091 (flow 92c090c3): loaded val<.=d07ff5d5 35.4MiB>
2021/07/08 16:36:44 scheduler task 0b440a13 (flow 4a266829): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s066.Main.out_file 4a266829 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s066.Main.out_file 4a266829 n100/r02/n100.r02.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d4a61b2bab6ae849996b29158dae17017d499ee4fde9b09221e0246943c3a0a5
	sha256:4a266829434cf5a04e9317bfe696aeb27e04a9b698316887a7c2583ec2221039
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b440a1342477cd23abf1d62afb5aa917be73e5b3ba777ad281d5411a349a564
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s066_output"
	    wget -O "n100.r02.s066_output/n100.r02.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s066_output/n100.r02.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s066_output/n100.r02.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s066_output/n100.r02.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s066_output/n100.r02.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s066_output/n100.r02.s066.reference.fas" "n100.r02.s066_output/n100.r02.s066.fq1.fastq" "n100.r02.s066_output/n100.r02.s066.fq2.fastq" | samtools view -bS - > "n100.r02.s066_output/n100.r02.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s066_output/n100.r02.s066.untrimmed.sorted.bam" "n100.r02.s066_output/n100.r02.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s066_output/n100.r02.s066.untrimmed.sorted.bam" -b "n100.r02.s066_output/n100.r02.s066.primers.bed" -p "n100.r02.s066_output/n100.r02.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" "n100.r02.s066_output/n100.r02.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s066_output/n100.r02.s066.reference.fas" "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" > "n100.r02.s066_output/n100.r02.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s066_output/n100.r02.s066.reference.fas" --call-indels "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" > "n100.r02.s066_output/n100.r02.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" > "n100.r02.s066_output/n100.r02.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s066_output/n100.r02.s066.depth.txt" "n100.r02.s066_output/n100.r02.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s066_output/n100.r02.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s066_output/n100.r02.s066.reference.fas" | bcftools consensus -m "n100.r02.s066_output/n100.r02.s066.low_depth.tsv" tmp.vcf.gz > "n100.r02.s066_output/n100.r02.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:44 scheduler task 0e861905 (flow 7a724582): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 506303dc (flow 1e4c353c): loaded val<.=543dbfd2 35.4MiB>
2021/07/08 16:36:44 scheduler task 506303dc (flow 1e4c353c): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 506303dc (flow 1e4c353c): submitting (try 0): started
2021/07/08 16:36:44 scheduler task d3ed6aad (flow dcb88340): loaded val<.=718b47a2 35.4MiB>
2021/07/08 16:36:44 scheduler task cafad4ba (flow 5063d2f3): loaded val<.=d9243339 35.4MiB>
2021/07/08 16:36:44 scheduler task cafad4ba (flow 5063d2f3): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0a7969ad (flow 678c0cb0): loaded val<.=18addfef 35.4MiB>
2021/07/08 16:36:44 scheduler task 0a7969ad (flow 678c0cb0): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task cafad4ba (flow 5063d2f3): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8b35b6a1 (flow 29709fad): loaded val<.=eec577e9 35.4MiB>
2021/07/08 16:36:44 scheduler task bb81e9dc (flow ce74ed16): loaded val<.=5c076656 35.4MiB>
2021/07/08 16:36:44 scheduler task 8b35b6a1 (flow 29709fad): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 5100a091 (flow 92c090c3): loaded val<.=30d95110 35.4MiB>
2021/07/08 16:36:44 scheduler task 5100a091 (flow 92c090c3): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0a7969ad (flow 678c0cb0): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8b35b6a1 (flow 29709fad): submitting (try 0): started
2021/07/08 16:36:44 scheduler task f1d0e2d0 (flow 37b5e302): loaded val<.=0a7a3108 35.4MiB>
2021/07/08 16:36:44 scheduler task f1d0e2d0 (flow 37b5e302): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 5100a091 (flow 92c090c3): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 28e75581 (flow e654e99d): loaded val<.=277fe83e 35.4MiB>
2021/07/08 16:36:44 scheduler task 28e75581 (flow e654e99d): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task c88b5c52 (flow 7f934c83): loaded val<.=eebd21ba 35.4MiB>
2021/07/08 16:36:44 scheduler task c88b5c52 (flow 7f934c83): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task f1d0e2d0 (flow 37b5e302): submitting (try 0): started
2021/07/08 16:36:44 scheduler task da6be570 (flow aae2ca1c): loaded val<.=806f1a18 35.4MiB>
2021/07/08 16:36:44 scheduler task a24d412d (flow fedce965): loaded val<.=0388514c 35.4MiB>
2021/07/08 16:36:44 scheduler task a24d412d (flow fedce965): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task b5b0895c (flow 5e121a68): loaded val<.=3a62aed2 35.4MiB>
2021/07/08 16:36:44 scheduler task d3ed6aad (flow dcb88340): loaded val<.=a016c30a 35.4MiB>
2021/07/08 16:36:44 scheduler task d3ed6aad (flow dcb88340): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 28e75581 (flow e654e99d): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 557dccf8 (flow dcf397bd): loaded val<.=ba1c4dce 35.4MiB>
2021/07/08 16:36:44 scheduler task c88b5c52 (flow 7f934c83): submitting (try 0): started
2021/07/08 16:36:44 scheduler task a24d412d (flow fedce965): submitting (try 0): started
2021/07/08 16:36:44 scheduler task d3ed6aad (flow dcb88340): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 3dadedef (flow 9abe98a2): loaded val<.=001942ae 35.4MiB>
2021/07/08 16:36:44 scheduler task 3dadedef (flow 9abe98a2): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 27e90d8b (flow d66c2225): loaded val<.=19d86a62 35.4MiB>
2021/07/08 16:36:44 scheduler task 27e90d8b (flow d66c2225): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 3dadedef (flow 9abe98a2): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 27e90d8b (flow d66c2225): submitting (try 0): started
2021/07/08 16:36:44 scheduler task b5b0895c (flow 5e121a68): loaded val<.=aa85d007 35.4MiB>
2021/07/08 16:36:44 scheduler task b5b0895c (flow 5e121a68): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task c2690bb6 (flow c8530bd3): loaded val<.=dc48d3b6 35.4MiB>
2021/07/08 16:36:44 scheduler task c2690bb6 (flow c8530bd3): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 7018ad68 (flow 0cad19f3): loaded val<.=f0b62894 35.4MiB>
2021/07/08 16:36:44 scheduler task 7018ad68 (flow 0cad19f3): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task b5b0895c (flow 5e121a68): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8062f0aa (flow 1d767038): loaded val<.=ea262d91 35.4MiB>
2021/07/08 16:36:44 scheduler task 8062f0aa (flow 1d767038): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task c2690bb6 (flow c8530bd3): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 56e751ca (flow 4e926108): loaded val<.=eea41153 35.4MiB>
2021/07/08 16:36:44 scheduler task 56e751ca (flow 4e926108): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 7018ad68 (flow 0cad19f3): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 68d632e0 (flow e0a7fa8c): loaded val<.=e65db8ee 35.4MiB>
2021/07/08 16:36:44 scheduler task 68d632e0 (flow e0a7fa8c): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 8062f0aa (flow 1d767038): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 56e751ca (flow 4e926108): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 68d632e0 (flow e0a7fa8c): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 3e9c9b76 (flow f2f62b67): loaded val<.=4d3fdb31 35.4MiB>
2021/07/08 16:36:44 scheduler task 3e9c9b76 (flow f2f62b67): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 3e9c9b76 (flow f2f62b67): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8e4c2298 (flow 95b427ce): loaded val<.=036a9071 35.4MiB>
2021/07/08 16:36:44 scheduler task 8e4c2298 (flow 95b427ce): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 8e4c2298 (flow 95b427ce): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 2feb3f25 (flow 26422009): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task 7e9cd126 (flow ac5dc48d): loaded val<.=0b9c7c8a 35.4MiB>
2021/07/08 16:36:44 scheduler task 7e9cd126 (flow ac5dc48d): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task fbd9cfd4 (flow f8af3684): loaded val<.=b835fc30 35.4MiB>
2021/07/08 16:36:44 scheduler task fbd9cfd4 (flow f8af3684): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 227b4998 (flow 498981df): loaded val<.=813a889c 35.4MiB>
2021/07/08 16:36:44 scheduler task 2feb3f25 (flow 26422009): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s097.Main.out_file 26422009 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s097.Main.out_file 26422009 n100/r02/n100.r02.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:534717647de871fdd975393c31a823fd77568a121445cd91bf6204e62c4398be
	sha256:26422009eac38557cf1901ea9872c2f462ee04ed9f8251411bfe43abc2a845bb
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2feb3f251c5c2f89ace59a1c7302f9b33326235eb9ed41bb5afa737e2d70dcd4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s097_output"
	    wget -O "n100.r02.s097_output/n100.r02.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s097_output/n100.r02.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s097_output/n100.r02.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s097_output/n100.r02.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s097_output/n100.r02.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s097_output/n100.r02.s097.reference.fas" "n100.r02.s097_output/n100.r02.s097.fq1.fastq" "n100.r02.s097_output/n100.r02.s097.fq2.fastq" | samtools view -bS - > "n100.r02.s097_output/n100.r02.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s097_output/n100.r02.s097.untrimmed.sorted.bam" "n100.r02.s097_output/n100.r02.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s097_output/n100.r02.s097.untrimmed.sorted.bam" -b "n100.r02.s097_output/n100.r02.s097.primers.bed" -p "n100.r02.s097_output/n100.r02.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" "n100.r02.s097_output/n100.r02.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s097_output/n100.r02.s097.reference.fas" "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" > "n100.r02.s097_output/n100.r02.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s097_output/n100.r02.s097.reference.fas" --call-indels "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" > "n100.r02.s097_output/n100.r02.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" > "n100.r02.s097_output/n100.r02.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s097_output/n100.r02.s097.depth.txt" "n100.r02.s097_output/n100.r02.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s097_output/n100.r02.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s097_output/n100.r02.s097.reference.fas" | bcftools consensus -m "n100.r02.s097_output/n100.r02.s097.low_depth.tsv" tmp.vcf.gz > "n100.r02.s097_output/n100.r02.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:44 scheduler task 7e9cd126 (flow ac5dc48d): submitting (try 0): started
2021/07/08 16:36:44 scheduler task fbd9cfd4 (flow f8af3684): submitting (try 0): started
2021/07/08 16:36:44 scheduler task c73cacdd (flow c37abb9e): loaded val<.=877cdb45 35.4MiB>
2021/07/08 16:36:44 scheduler task c73cacdd (flow c37abb9e): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task d8e5f7d3 (flow 7ba184b6): loaded val<.=faa2c116 35.4MiB>
2021/07/08 16:36:44 scheduler task d8e5f7d3 (flow 7ba184b6): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task c73cacdd (flow c37abb9e): submitting (try 0): started
2021/07/08 16:36:44 scheduler task d8e5f7d3 (flow 7ba184b6): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 5ed6a8f0 (flow d1a20a99): loaded val<.=33e07a6a 35.4MiB>
2021/07/08 16:36:44 scheduler task 5ed6a8f0 (flow d1a20a99): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 5ed6a8f0 (flow d1a20a99): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 9b70412c (flow e085395a): loaded val<.=37549027 35.4MiB>
2021/07/08 16:36:44 scheduler task 9b70412c (flow e085395a): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 080dc6e3 (flow a028a3dc): loaded val<.=67a08622 35.4MiB>
2021/07/08 16:36:44 scheduler task 080dc6e3 (flow a028a3dc): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 9b70412c (flow e085395a): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 080dc6e3 (flow a028a3dc): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 7d3bc912 (flow e2236b63): loaded val<.=15b4bb5e 35.4MiB>
2021/07/08 16:36:44 scheduler task 7d3bc912 (flow e2236b63): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0d089343 (flow e6ad34ee): loaded val<.=eeedef1c 35.4MiB>
2021/07/08 16:36:44 scheduler task 0d089343 (flow e6ad34ee): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 7d3bc912 (flow e2236b63): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 0d089343 (flow e6ad34ee): submitting (try 0): started
2021/07/08 16:36:44 scheduler task da6be570 (flow aae2ca1c): loaded val<.=45eb82b7 35.4MiB>
2021/07/08 16:36:44 scheduler task da6be570 (flow aae2ca1c): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task da6be570 (flow aae2ca1c): submitting (try 0): started
2021/07/08 16:36:44 scheduler task bb07980b (flow b78d6362): loaded val<.=cf33beeb 35.4MiB>
2021/07/08 16:36:44 scheduler task bb07980b (flow b78d6362): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task bb07980b (flow b78d6362): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 7c966493 (flow 0819d118): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task 7c966493 (flow 0819d118): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s010.Main.out_file 0819d118 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s010.Main.out_file 0819d118 n100/r02/n100.r02.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac278de560b74b14a57c0dffb90d0aebf6332d18e46fdb297e9c8535befd824e
	sha256:0819d1189c03548abaf7bad32d00a29bd1a417518f4394551e43993e966c91d2
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7c9664937fac6f32c5da144636725636b2c24b62064c651012959edcddfc586d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s010_output"
	    wget -O "n100.r02.s010_output/n100.r02.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s010_output/n100.r02.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s010_output/n100.r02.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s010_output/n100.r02.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s010_output/n100.r02.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s010_output/n100.r02.s010.reference.fas" "n100.r02.s010_output/n100.r02.s010.fq1.fastq" "n100.r02.s010_output/n100.r02.s010.fq2.fastq" | samtools view -bS - > "n100.r02.s010_output/n100.r02.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s010_output/n100.r02.s010.untrimmed.sorted.bam" "n100.r02.s010_output/n100.r02.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s010_output/n100.r02.s010.untrimmed.sorted.bam" -b "n100.r02.s010_output/n100.r02.s010.primers.bed" -p "n100.r02.s010_output/n100.r02.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" "n100.r02.s010_output/n100.r02.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s010_output/n100.r02.s010.reference.fas" "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" > "n100.r02.s010_output/n100.r02.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s010_output/n100.r02.s010.reference.fas" --call-indels "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" > "n100.r02.s010_output/n100.r02.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" > "n100.r02.s010_output/n100.r02.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s010_output/n100.r02.s010.depth.txt" "n100.r02.s010_output/n100.r02.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s010_output/n100.r02.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s010_output/n100.r02.s010.reference.fas" | bcftools consensus -m "n100.r02.s010_output/n100.r02.s010.low_depth.tsv" tmp.vcf.gz > "n100.r02.s010_output/n100.r02.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:44 scheduler task 227b4998 (flow 498981df): loaded val<.=1b5d8cec 35.4MiB>
2021/07/08 16:36:44 scheduler task 227b4998 (flow 498981df): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 227b4998 (flow 498981df): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 2af220b8 (flow f94e4acc): loaded val<.=820b6fe9 35.4MiB>
2021/07/08 16:36:44 scheduler task 2af220b8 (flow f94e4acc): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 2af220b8 (flow f94e4acc): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 557dccf8 (flow dcf397bd): loaded val<.=d0f87797 35.4MiB>
2021/07/08 16:36:44 scheduler task 557dccf8 (flow dcf397bd): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task bb81e9dc (flow ce74ed16): loaded val<.=08adb1e3 35.4MiB>
2021/07/08 16:36:44 scheduler task bb81e9dc (flow ce74ed16): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 557dccf8 (flow dcf397bd): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8654fc3f (flow c91904a4): loaded val<.=2ed23659 35.4MiB>
2021/07/08 16:36:44 scheduler task 8654fc3f (flow c91904a4): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task bb81e9dc (flow ce74ed16): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8654fc3f (flow c91904a4): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 73f9bb6c (flow 958202cb): loaded val<.=64706791 35.4MiB>
2021/07/08 16:36:44 scheduler task 2154d467 (flow 0ea2123a): loaded val<.=17a5d639 35.4MiB>
2021/07/08 16:36:44 scheduler task 2154d467 (flow 0ea2123a): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 73f9bb6c (flow 958202cb): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 2154d467 (flow 0ea2123a): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 44851b9f (flow 47ed53a8): loaded val<.=c2ed11bb 35.4MiB>
2021/07/08 16:36:44 scheduler task 44851b9f (flow 47ed53a8): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 73f9bb6c (flow 958202cb): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 44851b9f (flow 47ed53a8): submitting (try 0): started
2021/07/08 16:36:44 scheduler task a8a30cc1 (flow 7b9af5ba): loaded val<.=9fc3df8a 35.4MiB>
2021/07/08 16:36:44 scheduler task a8a30cc1 (flow 7b9af5ba): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task a8a30cc1 (flow 7b9af5ba): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 5a1a8dc5 (flow 7e2f5b09): loaded val<.=cddb0e4a 35.4MiB>
2021/07/08 16:36:44 scheduler task 5a1a8dc5 (flow 7e2f5b09): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 5a1a8dc5 (flow 7e2f5b09): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 04f3dd11 (flow 9cfb1911): loaded val<.=9476af0a 35.4MiB>
2021/07/08 16:36:44 scheduler task 04f3dd11 (flow 9cfb1911): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 0e177187 (flow ce3a6617): loaded val<.=d99d164a 35.4MiB>
2021/07/08 16:36:44 scheduler task 0e177187 (flow ce3a6617): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 04f3dd11 (flow 9cfb1911): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 0e177187 (flow ce3a6617): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 8c10b81b (flow ef286eca): loaded val<.=05121949 35.4MiB>
2021/07/08 16:36:44 scheduler task 8c10b81b (flow ef286eca): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 8c10b81b (flow ef286eca): submitting (try 0): started
2021/07/08 16:36:44 scheduler task ba37caf2 (flow 609775f9): loaded val<.=89a9296c 35.4MiB>
2021/07/08 16:36:44 scheduler task ba37caf2 (flow 609775f9): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task ba37caf2 (flow 609775f9): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 6628d1b5 (flow 77fde731): loaded val<.=a2509ea2 35.4MiB>
2021/07/08 16:36:44 scheduler task 6628d1b5 (flow 77fde731): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 6628d1b5 (flow 77fde731): submitting (try 0): started
2021/07/08 16:36:44 scheduler task fd672bab (flow d90e3629): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task fd672bab (flow d90e3629): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s049.Main.out_file d90e3629 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s049.Main.out_file d90e3629 n100/r02/n100.r02.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c05954518e517165f0322c29270c70da72cac11ffa4419556de04f6245d905ef
	sha256:d90e36298eb02f65aa497578c200662fbc9ad367987e24eaa81afb02108f0a19
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd672bab5385bd50b3bb1a9d4c688848fe191cbf66bb5eb9363ac5cd4c8ed87e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s049_output"
	    wget -O "n100.r02.s049_output/n100.r02.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s049_output/n100.r02.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s049_output/n100.r02.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s049_output/n100.r02.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s049_output/n100.r02.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s049_output/n100.r02.s049.reference.fas" "n100.r02.s049_output/n100.r02.s049.fq1.fastq" "n100.r02.s049_output/n100.r02.s049.fq2.fastq" | samtools view -bS - > "n100.r02.s049_output/n100.r02.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s049_output/n100.r02.s049.untrimmed.sorted.bam" "n100.r02.s049_output/n100.r02.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s049_output/n100.r02.s049.untrimmed.sorted.bam" -b "n100.r02.s049_output/n100.r02.s049.primers.bed" -p "n100.r02.s049_output/n100.r02.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" "n100.r02.s049_output/n100.r02.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s049_output/n100.r02.s049.reference.fas" "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" > "n100.r02.s049_output/n100.r02.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s049_output/n100.r02.s049.reference.fas" --call-indels "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" > "n100.r02.s049_output/n100.r02.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" > "n100.r02.s049_output/n100.r02.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s049_output/n100.r02.s049.depth.txt" "n100.r02.s049_output/n100.r02.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s049_output/n100.r02.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s049_output/n100.r02.s049.reference.fas" | bcftools consensus -m "n100.r02.s049_output/n100.r02.s049.low_depth.tsv" tmp.vcf.gz > "n100.r02.s049_output/n100.r02.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:44 scheduler task 507f546b (flow 338fe8dc): loaded val<.=0a142edb 35.4MiB>
2021/07/08 16:36:44 scheduler task 507f546b (flow 338fe8dc): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 47667179 (flow cca7236b): loaded val<.=9ff63b1b 35.4MiB>
2021/07/08 16:36:44 scheduler task 47667179 (flow cca7236b): loading (try 0): successful, next state: submitting
2021/07/08 16:36:44 scheduler task 507f546b (flow 338fe8dc): submitting (try 0): started
2021/07/08 16:36:44 scheduler task 47667179 (flow cca7236b): submitting (try 0): started
2021/07/08 16:36:44 scheduler task e81d51f7 (flow 01aa42bd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:44 scheduler task e81d51f7 (flow 01aa42bd): waiting for completion (try 0): started
2021/07/08 16:36:44  ->  n100.r02.s034.Main.out_file 01aa42bd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:44 n100.r02.s034.Main.out_file 01aa42bd n100/r02/n100.r02.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e260b51cfb4bc05012e101f9d9c15b9568a503511c72f30ffd1520f8aed989c5
	sha256:01aa42bd2cca741c256804db26995e03068def79dbb065dcc4376c9d69677b03
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e81d51f7ae7304db29db4f7ad1abcb1fcea8af507411999c8e61d9f5cf1f9eeb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s034_output"
	    wget -O "n100.r02.s034_output/n100.r02.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s034_output/n100.r02.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s034_output/n100.r02.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s034_output/n100.r02.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s034_output/n100.r02.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s034_output/n100.r02.s034.reference.fas" "n100.r02.s034_output/n100.r02.s034.fq1.fastq" "n100.r02.s034_output/n100.r02.s034.fq2.fastq" | samtools view -bS - > "n100.r02.s034_output/n100.r02.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s034_output/n100.r02.s034.untrimmed.sorted.bam" "n100.r02.s034_output/n100.r02.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s034_output/n100.r02.s034.untrimmed.sorted.bam" -b "n100.r02.s034_output/n100.r02.s034.primers.bed" -p "n100.r02.s034_output/n100.r02.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" "n100.r02.s034_output/n100.r02.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s034_output/n100.r02.s034.reference.fas" "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" > "n100.r02.s034_output/n100.r02.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s034_output/n100.r02.s034.reference.fas" --call-indels "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" > "n100.r02.s034_output/n100.r02.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" > "n100.r02.s034_output/n100.r02.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s034_output/n100.r02.s034.depth.txt" "n100.r02.s034_output/n100.r02.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s034_output/n100.r02.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s034_output/n100.r02.s034.reference.fas" | bcftools consensus -m "n100.r02.s034_output/n100.r02.s034.low_depth.tsv" tmp.vcf.gz > "n100.r02.s034_output/n100.r02.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:45 scheduler task 57d5d876 (flow fceac23c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:45 scheduler task 57d5d876 (flow fceac23c): waiting for completion (try 0): started
2021/07/08 16:36:45  ->  n100.r02.s098.Main.out_file fceac23c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:45 n100.r02.s098.Main.out_file fceac23c n100/r02/n100.r02.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27a03cc0e6950f50ec52a4d0825c91ccb15d591dbbdd9fd1a41ff71d7e1044af
	sha256:fceac23c776b09c083e4ddd2c8a7c0bb62b72881f1c00f376b1aee3567c50e2e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/57d5d87649feeb8fb947516bd789310fb1fb4dbc4c714080479a7ecf4abae749
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s098_output"
	    wget -O "n100.r02.s098_output/n100.r02.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s098_output/n100.r02.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s098_output/n100.r02.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s098_output/n100.r02.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s098_output/n100.r02.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s098_output/n100.r02.s098.reference.fas" "n100.r02.s098_output/n100.r02.s098.fq1.fastq" "n100.r02.s098_output/n100.r02.s098.fq2.fastq" | samtools view -bS - > "n100.r02.s098_output/n100.r02.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s098_output/n100.r02.s098.untrimmed.sorted.bam" "n100.r02.s098_output/n100.r02.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s098_output/n100.r02.s098.untrimmed.sorted.bam" -b "n100.r02.s098_output/n100.r02.s098.primers.bed" -p "n100.r02.s098_output/n100.r02.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" "n100.r02.s098_output/n100.r02.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s098_output/n100.r02.s098.reference.fas" "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" > "n100.r02.s098_output/n100.r02.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s098_output/n100.r02.s098.reference.fas" --call-indels "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" > "n100.r02.s098_output/n100.r02.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" > "n100.r02.s098_output/n100.r02.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s098_output/n100.r02.s098.depth.txt" "n100.r02.s098_output/n100.r02.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s098_output/n100.r02.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s098_output/n100.r02.s098.reference.fas" | bcftools consensus -m "n100.r02.s098_output/n100.r02.s098.low_depth.tsv" tmp.vcf.gz > "n100.r02.s098_output/n100.r02.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:45 scheduler task f748f409 (flow 46797130): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:45 scheduler task f748f409 (flow 46797130): waiting for completion (try 0): started
2021/07/08 16:36:45  ->  n100.r02.s019.Main.out_file 46797130 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:45 n100.r02.s019.Main.out_file 46797130 n100/r02/n100.r02.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8d734c84b7b5129d27b3845398c7713f06530bf8895c0f8045a2f60b5b838f9
	sha256:467971303631e3dc41b0d85d1f00bc36942e6b488448cfbd4526c5b632d43992
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f748f409875712b07df8a270738129613408c2d59eef18379c731c2c190bdb86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s019_output"
	    wget -O "n100.r02.s019_output/n100.r02.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s019_output/n100.r02.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s019_output/n100.r02.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s019_output/n100.r02.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s019_output/n100.r02.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s019_output/n100.r02.s019.reference.fas" "n100.r02.s019_output/n100.r02.s019.fq1.fastq" "n100.r02.s019_output/n100.r02.s019.fq2.fastq" | samtools view -bS - > "n100.r02.s019_output/n100.r02.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s019_output/n100.r02.s019.untrimmed.sorted.bam" "n100.r02.s019_output/n100.r02.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s019_output/n100.r02.s019.untrimmed.sorted.bam" -b "n100.r02.s019_output/n100.r02.s019.primers.bed" -p "n100.r02.s019_output/n100.r02.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" "n100.r02.s019_output/n100.r02.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s019_output/n100.r02.s019.reference.fas" "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" > "n100.r02.s019_output/n100.r02.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s019_output/n100.r02.s019.reference.fas" --call-indels "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" > "n100.r02.s019_output/n100.r02.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" > "n100.r02.s019_output/n100.r02.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s019_output/n100.r02.s019.depth.txt" "n100.r02.s019_output/n100.r02.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s019_output/n100.r02.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s019_output/n100.r02.s019.reference.fas" | bcftools consensus -m "n100.r02.s019_output/n100.r02.s019.low_depth.tsv" tmp.vcf.gz > "n100.r02.s019_output/n100.r02.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:45 scheduler task c9165e2e (flow e2043d0a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:45 scheduler task c9165e2e (flow e2043d0a): waiting for completion (try 0): started
2021/07/08 16:36:45  ->  n100.r02.s053.Main.out_file e2043d0a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:45 n100.r02.s053.Main.out_file e2043d0a n100/r02/n100.r02.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b172dd308d6a6aca09ee92aaf03c046ea98541a93fbb53ac296ed19e0eead766
	sha256:e2043d0aaf02af06fb7fe698e4c3171c4dfb81f4659f187ce1293fc462345ce1
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c9165e2e21573f87844bd446e05381f3cd18b201c40528301e4d3dd88fb810e9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s053_output"
	    wget -O "n100.r02.s053_output/n100.r02.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s053_output/n100.r02.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s053_output/n100.r02.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s053_output/n100.r02.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s053_output/n100.r02.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s053_output/n100.r02.s053.reference.fas" "n100.r02.s053_output/n100.r02.s053.fq1.fastq" "n100.r02.s053_output/n100.r02.s053.fq2.fastq" | samtools view -bS - > "n100.r02.s053_output/n100.r02.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s053_output/n100.r02.s053.untrimmed.sorted.bam" "n100.r02.s053_output/n100.r02.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s053_output/n100.r02.s053.untrimmed.sorted.bam" -b "n100.r02.s053_output/n100.r02.s053.primers.bed" -p "n100.r02.s053_output/n100.r02.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" "n100.r02.s053_output/n100.r02.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s053_output/n100.r02.s053.reference.fas" "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" > "n100.r02.s053_output/n100.r02.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s053_output/n100.r02.s053.reference.fas" --call-indels "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" > "n100.r02.s053_output/n100.r02.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" > "n100.r02.s053_output/n100.r02.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s053_output/n100.r02.s053.depth.txt" "n100.r02.s053_output/n100.r02.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s053_output/n100.r02.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s053_output/n100.r02.s053.reference.fas" | bcftools consensus -m "n100.r02.s053_output/n100.r02.s053.low_depth.tsv" tmp.vcf.gz > "n100.r02.s053_output/n100.r02.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:45 scheduler task 7a765bf2 (flow cde5ab27): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:45 scheduler task 7a765bf2 (flow cde5ab27): waiting for completion (try 0): started
2021/07/08 16:36:45  ->  n100.r02.s044.Main.out_file cde5ab27 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:45 n100.r02.s044.Main.out_file cde5ab27 n100/r02/n100.r02.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a12a7852afe10517278f690c09d01dca73714d168c9d91a35286d066210934f8
	sha256:cde5ab27e90b65b7b0d60f240b06f170c075e520d6a2946a99057fcccd5a0d1a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a765bf21fad5107042631e3e83959336152b93f303a9246bf77376ddcb991e1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s044_output"
	    wget -O "n100.r02.s044_output/n100.r02.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s044_output/n100.r02.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s044_output/n100.r02.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s044_output/n100.r02.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s044_output/n100.r02.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s044_output/n100.r02.s044.reference.fas" "n100.r02.s044_output/n100.r02.s044.fq1.fastq" "n100.r02.s044_output/n100.r02.s044.fq2.fastq" | samtools view -bS - > "n100.r02.s044_output/n100.r02.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s044_output/n100.r02.s044.untrimmed.sorted.bam" "n100.r02.s044_output/n100.r02.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s044_output/n100.r02.s044.untrimmed.sorted.bam" -b "n100.r02.s044_output/n100.r02.s044.primers.bed" -p "n100.r02.s044_output/n100.r02.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" "n100.r02.s044_output/n100.r02.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s044_output/n100.r02.s044.reference.fas" "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" > "n100.r02.s044_output/n100.r02.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s044_output/n100.r02.s044.reference.fas" --call-indels "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" > "n100.r02.s044_output/n100.r02.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" > "n100.r02.s044_output/n100.r02.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s044_output/n100.r02.s044.depth.txt" "n100.r02.s044_output/n100.r02.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s044_output/n100.r02.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s044_output/n100.r02.s044.reference.fas" | bcftools consensus -m "n100.r02.s044_output/n100.r02.s044.low_depth.tsv" tmp.vcf.gz > "n100.r02.s044_output/n100.r02.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:45 scheduler task 69a372ec (flow c6cdb5ad): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:45 scheduler task 69a372ec (flow c6cdb5ad): waiting for completion (try 0): started
2021/07/08 16:36:45  ->  n100.r02.s095.Main.out_file c6cdb5ad exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:45 n100.r02.s095.Main.out_file c6cdb5ad n100/r02/n100.r02.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55ae0b2d564ccb2d187c5bf968b6a2db68a0dc39964c7f320a21343ced7093ff
	sha256:c6cdb5adc7a72cc5b002c1e44bcb4c49c3ef42fc50f96535a624aeb16d488869
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/69a372ec9f608138178977d39a0a8f1ac0356debf8261ecb6f027a1c6c727e9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s095_output"
	    wget -O "n100.r02.s095_output/n100.r02.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s095_output/n100.r02.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s095_output/n100.r02.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s095_output/n100.r02.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s095_output/n100.r02.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s095_output/n100.r02.s095.reference.fas" "n100.r02.s095_output/n100.r02.s095.fq1.fastq" "n100.r02.s095_output/n100.r02.s095.fq2.fastq" | samtools view -bS - > "n100.r02.s095_output/n100.r02.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s095_output/n100.r02.s095.untrimmed.sorted.bam" "n100.r02.s095_output/n100.r02.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s095_output/n100.r02.s095.untrimmed.sorted.bam" -b "n100.r02.s095_output/n100.r02.s095.primers.bed" -p "n100.r02.s095_output/n100.r02.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" "n100.r02.s095_output/n100.r02.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s095_output/n100.r02.s095.reference.fas" "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" > "n100.r02.s095_output/n100.r02.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s095_output/n100.r02.s095.reference.fas" --call-indels "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" > "n100.r02.s095_output/n100.r02.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" > "n100.r02.s095_output/n100.r02.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s095_output/n100.r02.s095.depth.txt" "n100.r02.s095_output/n100.r02.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s095_output/n100.r02.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s095_output/n100.r02.s095.reference.fas" | bcftools consensus -m "n100.r02.s095_output/n100.r02.s095.low_depth.tsv" tmp.vcf.gz > "n100.r02.s095_output/n100.r02.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:45 scheduler task 134a0558 (flow 0f99a469): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:45 scheduler task 134a0558 (flow 0f99a469): waiting for completion (try 0): started
2021/07/08 16:36:45  ->  n100.r02.s033.Main.out_file 0f99a469 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:45 n100.r02.s033.Main.out_file 0f99a469 n100/r02/n100.r02.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:207a831e7e18f4274312325c55750292ed177b01ac79c652dca5d0cbf156be74
	sha256:0f99a469d82b6be4604c1de97728f683ddb3ad9e7bdee3ac54f8a55267642dc7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/134a055861d4a8a6955153bc8c0d82784ca5351c3a0feee217d95dc06f8bd1fd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s033_output"
	    wget -O "n100.r02.s033_output/n100.r02.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s033_output/n100.r02.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s033_output/n100.r02.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s033_output/n100.r02.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s033_output/n100.r02.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s033_output/n100.r02.s033.reference.fas" "n100.r02.s033_output/n100.r02.s033.fq1.fastq" "n100.r02.s033_output/n100.r02.s033.fq2.fastq" | samtools view -bS - > "n100.r02.s033_output/n100.r02.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s033_output/n100.r02.s033.untrimmed.sorted.bam" "n100.r02.s033_output/n100.r02.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s033_output/n100.r02.s033.untrimmed.sorted.bam" -b "n100.r02.s033_output/n100.r02.s033.primers.bed" -p "n100.r02.s033_output/n100.r02.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" "n100.r02.s033_output/n100.r02.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s033_output/n100.r02.s033.reference.fas" "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" > "n100.r02.s033_output/n100.r02.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s033_output/n100.r02.s033.reference.fas" --call-indels "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" > "n100.r02.s033_output/n100.r02.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" > "n100.r02.s033_output/n100.r02.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s033_output/n100.r02.s033.depth.txt" "n100.r02.s033_output/n100.r02.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s033_output/n100.r02.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s033_output/n100.r02.s033.reference.fas" | bcftools consensus -m "n100.r02.s033_output/n100.r02.s033.low_depth.tsv" tmp.vcf.gz > "n100.r02.s033_output/n100.r02.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:46 scheduler task 87971b75 (flow f98fa6a9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:46 scheduler task 87971b75 (flow f98fa6a9): waiting for completion (try 0): started
2021/07/08 16:36:46  ->  n100.r02.s041.Main.out_file f98fa6a9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:46 n100.r02.s041.Main.out_file f98fa6a9 n100/r02/n100.r02.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d7664d300f7e50419201a1ced48a86645c1ee867e3add351b9bddeaf15effdcd
	sha256:f98fa6a9613d4c4ceb17f6d2854f6926f1ebd93c637a3639ad81111542896fc3
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/87971b75e0ae3456e71de2509e6e808fb79e8346e00209517ad0374e46061819
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s041_output"
	    wget -O "n100.r02.s041_output/n100.r02.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s041_output/n100.r02.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s041_output/n100.r02.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s041_output/n100.r02.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s041_output/n100.r02.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s041_output/n100.r02.s041.reference.fas" "n100.r02.s041_output/n100.r02.s041.fq1.fastq" "n100.r02.s041_output/n100.r02.s041.fq2.fastq" | samtools view -bS - > "n100.r02.s041_output/n100.r02.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s041_output/n100.r02.s041.untrimmed.sorted.bam" "n100.r02.s041_output/n100.r02.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s041_output/n100.r02.s041.untrimmed.sorted.bam" -b "n100.r02.s041_output/n100.r02.s041.primers.bed" -p "n100.r02.s041_output/n100.r02.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" "n100.r02.s041_output/n100.r02.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s041_output/n100.r02.s041.reference.fas" "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" > "n100.r02.s041_output/n100.r02.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s041_output/n100.r02.s041.reference.fas" --call-indels "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" > "n100.r02.s041_output/n100.r02.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" > "n100.r02.s041_output/n100.r02.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s041_output/n100.r02.s041.depth.txt" "n100.r02.s041_output/n100.r02.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s041_output/n100.r02.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s041_output/n100.r02.s041.reference.fas" | bcftools consensus -m "n100.r02.s041_output/n100.r02.s041.low_depth.tsv" tmp.vcf.gz > "n100.r02.s041_output/n100.r02.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:46 scheduler task 4c496130 (flow 7f73ff4a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:46 scheduler task 4c496130 (flow 7f73ff4a): waiting for completion (try 0): started
2021/07/08 16:36:46  ->  n100.r02.s051.Main.out_file 7f73ff4a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:46 n100.r02.s051.Main.out_file 7f73ff4a n100/r02/n100.r02.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:93386bdaa0ea1a603792b217664e035c2d4996062b7cfed1da83e92043a0d104
	sha256:7f73ff4a43a7f40002c5b4a392f3364bead5bddd3ed3720d118f4bf7d3f11f6b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4c4961307b36b23a29fc35af7277b712735da8650637f1d67f8fb0753573c84a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s051_output"
	    wget -O "n100.r02.s051_output/n100.r02.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s051_output/n100.r02.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s051_output/n100.r02.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s051_output/n100.r02.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s051_output/n100.r02.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s051_output/n100.r02.s051.reference.fas" "n100.r02.s051_output/n100.r02.s051.fq1.fastq" "n100.r02.s051_output/n100.r02.s051.fq2.fastq" | samtools view -bS - > "n100.r02.s051_output/n100.r02.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s051_output/n100.r02.s051.untrimmed.sorted.bam" "n100.r02.s051_output/n100.r02.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s051_output/n100.r02.s051.untrimmed.sorted.bam" -b "n100.r02.s051_output/n100.r02.s051.primers.bed" -p "n100.r02.s051_output/n100.r02.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" "n100.r02.s051_output/n100.r02.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s051_output/n100.r02.s051.reference.fas" "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" > "n100.r02.s051_output/n100.r02.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s051_output/n100.r02.s051.reference.fas" --call-indels "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" > "n100.r02.s051_output/n100.r02.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" > "n100.r02.s051_output/n100.r02.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s051_output/n100.r02.s051.depth.txt" "n100.r02.s051_output/n100.r02.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s051_output/n100.r02.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s051_output/n100.r02.s051.reference.fas" | bcftools consensus -m "n100.r02.s051_output/n100.r02.s051.low_depth.tsv" tmp.vcf.gz > "n100.r02.s051_output/n100.r02.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:46 scheduler task 83ad0a3c (flow 244ee460): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:46 scheduler task 83ad0a3c (flow 244ee460): waiting for completion (try 0): started
2021/07/08 16:36:46  ->  n100.r02.s067.Main.out_file 244ee460 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:46 n100.r02.s067.Main.out_file 244ee460 n100/r02/n100.r02.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:336880b30c3a9bbfebbbc4ef34e31376966982de09c6419e82571b5eaaba2d15
	sha256:244ee4603eb17891504a253b6fdae456ae4754280c5249338055e7dcc717b245
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83ad0a3c9529353efe201a368107f144a67f1a827d57c0307892b4c0298a2dea
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s067_output"
	    wget -O "n100.r02.s067_output/n100.r02.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s067_output/n100.r02.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s067_output/n100.r02.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s067_output/n100.r02.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s067_output/n100.r02.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s067_output/n100.r02.s067.reference.fas" "n100.r02.s067_output/n100.r02.s067.fq1.fastq" "n100.r02.s067_output/n100.r02.s067.fq2.fastq" | samtools view -bS - > "n100.r02.s067_output/n100.r02.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s067_output/n100.r02.s067.untrimmed.sorted.bam" "n100.r02.s067_output/n100.r02.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s067_output/n100.r02.s067.untrimmed.sorted.bam" -b "n100.r02.s067_output/n100.r02.s067.primers.bed" -p "n100.r02.s067_output/n100.r02.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" "n100.r02.s067_output/n100.r02.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s067_output/n100.r02.s067.reference.fas" "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" > "n100.r02.s067_output/n100.r02.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s067_output/n100.r02.s067.reference.fas" --call-indels "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" > "n100.r02.s067_output/n100.r02.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" > "n100.r02.s067_output/n100.r02.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s067_output/n100.r02.s067.depth.txt" "n100.r02.s067_output/n100.r02.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s067_output/n100.r02.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s067_output/n100.r02.s067.reference.fas" | bcftools consensus -m "n100.r02.s067_output/n100.r02.s067.low_depth.tsv" tmp.vcf.gz > "n100.r02.s067_output/n100.r02.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:46 scheduler task 67f058e0 (flow 5ea8511d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:46 scheduler task 67f058e0 (flow 5ea8511d): waiting for completion (try 0): started
2021/07/08 16:36:46  ->  n100.r02.s026.Main.out_file 5ea8511d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:46 n100.r02.s026.Main.out_file 5ea8511d n100/r02/n100.r02.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8461f9755c94b3fca9d1c913d7b02bbedf77ea2ba7f4de5192a24c52a069e32
	sha256:5ea8511dafc8c7c1b37dc3eae71aae9255d8679c5d7eafcb9be5b1aaa550fedd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67f058e0588baf863e9ffaf12ae9cc7d86fd34808827492c00c3c5b833409fce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s026_output"
	    wget -O "n100.r02.s026_output/n100.r02.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s026_output/n100.r02.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s026_output/n100.r02.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s026_output/n100.r02.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s026_output/n100.r02.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s026_output/n100.r02.s026.reference.fas" "n100.r02.s026_output/n100.r02.s026.fq1.fastq" "n100.r02.s026_output/n100.r02.s026.fq2.fastq" | samtools view -bS - > "n100.r02.s026_output/n100.r02.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s026_output/n100.r02.s026.untrimmed.sorted.bam" "n100.r02.s026_output/n100.r02.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s026_output/n100.r02.s026.untrimmed.sorted.bam" -b "n100.r02.s026_output/n100.r02.s026.primers.bed" -p "n100.r02.s026_output/n100.r02.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" "n100.r02.s026_output/n100.r02.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s026_output/n100.r02.s026.reference.fas" "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" > "n100.r02.s026_output/n100.r02.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s026_output/n100.r02.s026.reference.fas" --call-indels "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" > "n100.r02.s026_output/n100.r02.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" > "n100.r02.s026_output/n100.r02.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s026_output/n100.r02.s026.depth.txt" "n100.r02.s026_output/n100.r02.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s026_output/n100.r02.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s026_output/n100.r02.s026.reference.fas" | bcftools consensus -m "n100.r02.s026_output/n100.r02.s026.low_depth.tsv" tmp.vcf.gz > "n100.r02.s026_output/n100.r02.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:46 scheduler task 45825593 (flow 6b3eb25c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:46 scheduler task 45825593 (flow 6b3eb25c): waiting for completion (try 0): started
2021/07/08 16:36:46  ->  n100.r02.s078.Main.out_file 6b3eb25c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:46 n100.r02.s078.Main.out_file 6b3eb25c n100/r02/n100.r02.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9de75b18b914291d1bcbc6baaf7bc98ae0a81d6f160b5f133250834776329eaf
	sha256:6b3eb25c7a971ccdf5032cf089eee073c47636d40f6d31ec883a784761a8c15f
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/45825593555a76a3f8e4d4ab9ff12c80b63c112779b6b53e3dbecc7e46b4b33a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s078_output"
	    wget -O "n100.r02.s078_output/n100.r02.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s078_output/n100.r02.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s078_output/n100.r02.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s078_output/n100.r02.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s078_output/n100.r02.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s078_output/n100.r02.s078.reference.fas" "n100.r02.s078_output/n100.r02.s078.fq1.fastq" "n100.r02.s078_output/n100.r02.s078.fq2.fastq" | samtools view -bS - > "n100.r02.s078_output/n100.r02.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s078_output/n100.r02.s078.untrimmed.sorted.bam" "n100.r02.s078_output/n100.r02.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s078_output/n100.r02.s078.untrimmed.sorted.bam" -b "n100.r02.s078_output/n100.r02.s078.primers.bed" -p "n100.r02.s078_output/n100.r02.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" "n100.r02.s078_output/n100.r02.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s078_output/n100.r02.s078.reference.fas" "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" > "n100.r02.s078_output/n100.r02.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s078_output/n100.r02.s078.reference.fas" --call-indels "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" > "n100.r02.s078_output/n100.r02.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" > "n100.r02.s078_output/n100.r02.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s078_output/n100.r02.s078.depth.txt" "n100.r02.s078_output/n100.r02.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s078_output/n100.r02.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s078_output/n100.r02.s078.reference.fas" | bcftools consensus -m "n100.r02.s078_output/n100.r02.s078.low_depth.tsv" tmp.vcf.gz > "n100.r02.s078_output/n100.r02.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:46 scheduler task 055d7a57 (flow 2ca4d3a5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:46 scheduler task 055d7a57 (flow 2ca4d3a5): waiting for completion (try 0): started
2021/07/08 16:36:46  ->  n100.r02.s064.Main.out_file 2ca4d3a5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:46 n100.r02.s064.Main.out_file 2ca4d3a5 n100/r02/n100.r02.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dbcbf8a932bc8501b62a9c2cc25172e577ef66992ed9e4da09e05c297195d7f3
	sha256:2ca4d3a568d0deb39895383230c1655a675855a081b258e0c098f53716cea12b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/055d7a57dee9eb950b5bc8f82e3c006bb91b22b6e8c66c13427ec096871c1652
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s064_output"
	    wget -O "n100.r02.s064_output/n100.r02.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s064_output/n100.r02.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s064_output/n100.r02.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s064_output/n100.r02.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s064_output/n100.r02.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s064_output/n100.r02.s064.reference.fas" "n100.r02.s064_output/n100.r02.s064.fq1.fastq" "n100.r02.s064_output/n100.r02.s064.fq2.fastq" | samtools view -bS - > "n100.r02.s064_output/n100.r02.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s064_output/n100.r02.s064.untrimmed.sorted.bam" "n100.r02.s064_output/n100.r02.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s064_output/n100.r02.s064.untrimmed.sorted.bam" -b "n100.r02.s064_output/n100.r02.s064.primers.bed" -p "n100.r02.s064_output/n100.r02.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" "n100.r02.s064_output/n100.r02.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s064_output/n100.r02.s064.reference.fas" "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" > "n100.r02.s064_output/n100.r02.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s064_output/n100.r02.s064.reference.fas" --call-indels "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" > "n100.r02.s064_output/n100.r02.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" > "n100.r02.s064_output/n100.r02.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s064_output/n100.r02.s064.depth.txt" "n100.r02.s064_output/n100.r02.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s064_output/n100.r02.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s064_output/n100.r02.s064.reference.fas" | bcftools consensus -m "n100.r02.s064_output/n100.r02.s064.low_depth.tsv" tmp.vcf.gz > "n100.r02.s064_output/n100.r02.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:47 scheduler task 0ead9da7 (flow b4466c12): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:47 scheduler task 0ead9da7 (flow b4466c12): waiting for completion (try 0): started
2021/07/08 16:36:47  ->  n100.r02.s093.Main.out_file b4466c12 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:47 n100.r02.s093.Main.out_file b4466c12 n100/r02/n100.r02.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9982e03c9099722055d9bfd48b26842e89248f219e5e6aed2494392abf54397e
	sha256:b4466c12367cb019b6b8d53de62b7e2ee3ccc793348668cc35d1e49e3af8eb6c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0ead9da70e743bc3f4b34c2cbd2cd62e5a3e9d2226a5d62b397a616eebe27f28
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s093_output"
	    wget -O "n100.r02.s093_output/n100.r02.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s093_output/n100.r02.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s093_output/n100.r02.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s093_output/n100.r02.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s093_output/n100.r02.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s093_output/n100.r02.s093.reference.fas" "n100.r02.s093_output/n100.r02.s093.fq1.fastq" "n100.r02.s093_output/n100.r02.s093.fq2.fastq" | samtools view -bS - > "n100.r02.s093_output/n100.r02.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s093_output/n100.r02.s093.untrimmed.sorted.bam" "n100.r02.s093_output/n100.r02.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s093_output/n100.r02.s093.untrimmed.sorted.bam" -b "n100.r02.s093_output/n100.r02.s093.primers.bed" -p "n100.r02.s093_output/n100.r02.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" "n100.r02.s093_output/n100.r02.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s093_output/n100.r02.s093.reference.fas" "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" > "n100.r02.s093_output/n100.r02.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s093_output/n100.r02.s093.reference.fas" --call-indels "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" > "n100.r02.s093_output/n100.r02.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" > "n100.r02.s093_output/n100.r02.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s093_output/n100.r02.s093.depth.txt" "n100.r02.s093_output/n100.r02.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s093_output/n100.r02.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s093_output/n100.r02.s093.reference.fas" | bcftools consensus -m "n100.r02.s093_output/n100.r02.s093.low_depth.tsv" tmp.vcf.gz > "n100.r02.s093_output/n100.r02.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:47 scheduler task aca0b7cc (flow 3d43c667): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:47 scheduler task aca0b7cc (flow 3d43c667): waiting for completion (try 0): started
2021/07/08 16:36:47  ->  n100.r02.s072.Main.out_file 3d43c667 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:47 n100.r02.s072.Main.out_file 3d43c667 n100/r02/n100.r02.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b47452e3cf479acd25765f1a7b1d09224604ef25b7f8c5df98418fc52535e928
	sha256:3d43c667c60681511207cd5fac40c0ecbd7e2a590781307259d3390ae9de190e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aca0b7cc5593045bb268ebedd01e3d56b490139606de9e3453907858c99eff87
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s072_output"
	    wget -O "n100.r02.s072_output/n100.r02.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s072_output/n100.r02.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s072_output/n100.r02.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s072_output/n100.r02.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s072_output/n100.r02.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s072_output/n100.r02.s072.reference.fas" "n100.r02.s072_output/n100.r02.s072.fq1.fastq" "n100.r02.s072_output/n100.r02.s072.fq2.fastq" | samtools view -bS - > "n100.r02.s072_output/n100.r02.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s072_output/n100.r02.s072.untrimmed.sorted.bam" "n100.r02.s072_output/n100.r02.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s072_output/n100.r02.s072.untrimmed.sorted.bam" -b "n100.r02.s072_output/n100.r02.s072.primers.bed" -p "n100.r02.s072_output/n100.r02.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" "n100.r02.s072_output/n100.r02.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s072_output/n100.r02.s072.reference.fas" "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" > "n100.r02.s072_output/n100.r02.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s072_output/n100.r02.s072.reference.fas" --call-indels "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" > "n100.r02.s072_output/n100.r02.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" > "n100.r02.s072_output/n100.r02.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s072_output/n100.r02.s072.depth.txt" "n100.r02.s072_output/n100.r02.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s072_output/n100.r02.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s072_output/n100.r02.s072.reference.fas" | bcftools consensus -m "n100.r02.s072_output/n100.r02.s072.low_depth.tsv" tmp.vcf.gz > "n100.r02.s072_output/n100.r02.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:47 scheduler task 1c084c9f (flow 8b1babe2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:47 scheduler task 1c084c9f (flow 8b1babe2): waiting for completion (try 0): started
2021/07/08 16:36:47  ->  n100.r02.s001.Main.out_file 8b1babe2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:47 n100.r02.s001.Main.out_file 8b1babe2 n100/r02/n100.r02.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6cbcac444f85e0f4990d2bb435014df8794851e55604ca3f4c84e576472d9a61
	sha256:8b1babe2378c782284931131b37fd24333a727817b776bae3d5cff072e41345a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1c084c9f1886599f6b61762d75d28f39e9485b7a2bcbabc0314a3be6191081e5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s001_output"
	    wget -O "n100.r02.s001_output/n100.r02.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s001_output/n100.r02.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s001_output/n100.r02.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s001_output/n100.r02.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s001_output/n100.r02.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s001_output/n100.r02.s001.reference.fas" "n100.r02.s001_output/n100.r02.s001.fq1.fastq" "n100.r02.s001_output/n100.r02.s001.fq2.fastq" | samtools view -bS - > "n100.r02.s001_output/n100.r02.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s001_output/n100.r02.s001.untrimmed.sorted.bam" "n100.r02.s001_output/n100.r02.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s001_output/n100.r02.s001.untrimmed.sorted.bam" -b "n100.r02.s001_output/n100.r02.s001.primers.bed" -p "n100.r02.s001_output/n100.r02.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" "n100.r02.s001_output/n100.r02.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s001_output/n100.r02.s001.reference.fas" "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" > "n100.r02.s001_output/n100.r02.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s001_output/n100.r02.s001.reference.fas" --call-indels "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" > "n100.r02.s001_output/n100.r02.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" > "n100.r02.s001_output/n100.r02.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s001_output/n100.r02.s001.depth.txt" "n100.r02.s001_output/n100.r02.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s001_output/n100.r02.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s001_output/n100.r02.s001.reference.fas" | bcftools consensus -m "n100.r02.s001_output/n100.r02.s001.low_depth.tsv" tmp.vcf.gz > "n100.r02.s001_output/n100.r02.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:47 scheduler task 3b6becc8 (flow 3d8a8283): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:47 scheduler task 3b6becc8 (flow 3d8a8283): waiting for completion (try 0): started
2021/07/08 16:36:47  ->  n100.r02.s031.Main.out_file 3d8a8283 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:47 n100.r02.s031.Main.out_file 3d8a8283 n100/r02/n100.r02.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df71eab6622b6da34f66f6a4a1d0ec4f56fc0795d82ac7b38fbc9aa157e45b8a
	sha256:3d8a8283732e37a3bc1a5b2e9c3ee4126acc6abaf4448f16cf9a2fdd403c005a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3b6becc8fdb57515e0fef9b18bb14786f14abd0230735aeb6802a901603b36dc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s031_output"
	    wget -O "n100.r02.s031_output/n100.r02.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s031_output/n100.r02.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s031_output/n100.r02.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s031_output/n100.r02.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s031_output/n100.r02.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s031_output/n100.r02.s031.reference.fas" "n100.r02.s031_output/n100.r02.s031.fq1.fastq" "n100.r02.s031_output/n100.r02.s031.fq2.fastq" | samtools view -bS - > "n100.r02.s031_output/n100.r02.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s031_output/n100.r02.s031.untrimmed.sorted.bam" "n100.r02.s031_output/n100.r02.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s031_output/n100.r02.s031.untrimmed.sorted.bam" -b "n100.r02.s031_output/n100.r02.s031.primers.bed" -p "n100.r02.s031_output/n100.r02.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" "n100.r02.s031_output/n100.r02.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s031_output/n100.r02.s031.reference.fas" "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" > "n100.r02.s031_output/n100.r02.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s031_output/n100.r02.s031.reference.fas" --call-indels "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" > "n100.r02.s031_output/n100.r02.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" > "n100.r02.s031_output/n100.r02.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s031_output/n100.r02.s031.depth.txt" "n100.r02.s031_output/n100.r02.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s031_output/n100.r02.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s031_output/n100.r02.s031.reference.fas" | bcftools consensus -m "n100.r02.s031_output/n100.r02.s031.low_depth.tsv" tmp.vcf.gz > "n100.r02.s031_output/n100.r02.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:47 scheduler task 0d3f8ca3 (flow a2df0a88): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:47 scheduler task 0d3f8ca3 (flow a2df0a88): waiting for completion (try 0): started
2021/07/08 16:36:47  ->  n100.r02.s018.Main.out_file a2df0a88 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:47 n100.r02.s018.Main.out_file a2df0a88 n100/r02/n100.r02.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f40a430bae405754453546f2d4de8295d839583224ce9b1a9613e01ef343e729
	sha256:a2df0a883b8f90019676fd1396e11d073b7060a1a1b2c9da7b75e5d5e591d40f
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d3f8ca35eb4bc6b19ed9b3f0620910c1596387dad56dc232aa0945752ff85ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s018_output"
	    wget -O "n100.r02.s018_output/n100.r02.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s018_output/n100.r02.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s018_output/n100.r02.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s018_output/n100.r02.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s018_output/n100.r02.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s018_output/n100.r02.s018.reference.fas" "n100.r02.s018_output/n100.r02.s018.fq1.fastq" "n100.r02.s018_output/n100.r02.s018.fq2.fastq" | samtools view -bS - > "n100.r02.s018_output/n100.r02.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s018_output/n100.r02.s018.untrimmed.sorted.bam" "n100.r02.s018_output/n100.r02.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s018_output/n100.r02.s018.untrimmed.sorted.bam" -b "n100.r02.s018_output/n100.r02.s018.primers.bed" -p "n100.r02.s018_output/n100.r02.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" "n100.r02.s018_output/n100.r02.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s018_output/n100.r02.s018.reference.fas" "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" > "n100.r02.s018_output/n100.r02.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s018_output/n100.r02.s018.reference.fas" --call-indels "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" > "n100.r02.s018_output/n100.r02.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" > "n100.r02.s018_output/n100.r02.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s018_output/n100.r02.s018.depth.txt" "n100.r02.s018_output/n100.r02.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s018_output/n100.r02.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s018_output/n100.r02.s018.reference.fas" | bcftools consensus -m "n100.r02.s018_output/n100.r02.s018.low_depth.tsv" tmp.vcf.gz > "n100.r02.s018_output/n100.r02.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:47 scheduler task 79554f4f (flow 08173ef0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:47 scheduler task 79554f4f (flow 08173ef0): waiting for completion (try 0): started
2021/07/08 16:36:47  ->  n100.r02.s008.Main.out_file 08173ef0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:47 n100.r02.s008.Main.out_file 08173ef0 n100/r02/n100.r02.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:870ceab843a9cbf00b5cf346c4a6ae4a8aa2cdc918abedcdad455d56028ef036
	sha256:08173ef065bcd4a777ae2018828db6093104b05decddb74bd7519937b37b6486
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79554f4fae223d4ee402123f76001e8f845ea720ed5260340050cb239927a856
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s008_output"
	    wget -O "n100.r02.s008_output/n100.r02.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s008_output/n100.r02.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s008_output/n100.r02.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s008_output/n100.r02.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s008_output/n100.r02.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s008_output/n100.r02.s008.reference.fas" "n100.r02.s008_output/n100.r02.s008.fq1.fastq" "n100.r02.s008_output/n100.r02.s008.fq2.fastq" | samtools view -bS - > "n100.r02.s008_output/n100.r02.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s008_output/n100.r02.s008.untrimmed.sorted.bam" "n100.r02.s008_output/n100.r02.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s008_output/n100.r02.s008.untrimmed.sorted.bam" -b "n100.r02.s008_output/n100.r02.s008.primers.bed" -p "n100.r02.s008_output/n100.r02.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" "n100.r02.s008_output/n100.r02.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s008_output/n100.r02.s008.reference.fas" "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" > "n100.r02.s008_output/n100.r02.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s008_output/n100.r02.s008.reference.fas" --call-indels "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" > "n100.r02.s008_output/n100.r02.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" > "n100.r02.s008_output/n100.r02.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s008_output/n100.r02.s008.depth.txt" "n100.r02.s008_output/n100.r02.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s008_output/n100.r02.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s008_output/n100.r02.s008.reference.fas" | bcftools consensus -m "n100.r02.s008_output/n100.r02.s008.low_depth.tsv" tmp.vcf.gz > "n100.r02.s008_output/n100.r02.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:48 scheduler task e6c82ca0 (flow 2f81b13d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:48 scheduler task e6c82ca0 (flow 2f81b13d): waiting for completion (try 0): started
2021/07/08 16:36:48  ->  n100.r02.s091.Main.out_file 2f81b13d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:48 n100.r02.s091.Main.out_file 2f81b13d n100/r02/n100.r02.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ff722d705fd97a71b3bc8ba2d4628901b39f5a155522d00c6597259086e3476e
	sha256:2f81b13d157904ddb35960d97f2f81b72ebcc6f3e96360d903d42e0970f1bf70
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e6c82ca0f587f47ee3e543aacb6ba757351a2087a268d875b0d49ee047716504
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s091_output"
	    wget -O "n100.r02.s091_output/n100.r02.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s091_output/n100.r02.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s091_output/n100.r02.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s091_output/n100.r02.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s091_output/n100.r02.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s091_output/n100.r02.s091.reference.fas" "n100.r02.s091_output/n100.r02.s091.fq1.fastq" "n100.r02.s091_output/n100.r02.s091.fq2.fastq" | samtools view -bS - > "n100.r02.s091_output/n100.r02.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s091_output/n100.r02.s091.untrimmed.sorted.bam" "n100.r02.s091_output/n100.r02.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s091_output/n100.r02.s091.untrimmed.sorted.bam" -b "n100.r02.s091_output/n100.r02.s091.primers.bed" -p "n100.r02.s091_output/n100.r02.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" "n100.r02.s091_output/n100.r02.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s091_output/n100.r02.s091.reference.fas" "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" > "n100.r02.s091_output/n100.r02.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s091_output/n100.r02.s091.reference.fas" --call-indels "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" > "n100.r02.s091_output/n100.r02.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" > "n100.r02.s091_output/n100.r02.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s091_output/n100.r02.s091.depth.txt" "n100.r02.s091_output/n100.r02.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s091_output/n100.r02.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s091_output/n100.r02.s091.reference.fas" | bcftools consensus -m "n100.r02.s091_output/n100.r02.s091.low_depth.tsv" tmp.vcf.gz > "n100.r02.s091_output/n100.r02.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:48 scheduler task 8273013c (flow d3ff6df9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:48 scheduler task 8273013c (flow d3ff6df9): waiting for completion (try 0): started
2021/07/08 16:36:48  ->  n100.r02.s056.Main.out_file d3ff6df9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:48 n100.r02.s056.Main.out_file d3ff6df9 n100/r02/n100.r02.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ba15223a5eb96aa5f32263e4ddca7d203aadc1b7750ec448071590dd691c53e2
	sha256:d3ff6df9c58e5f343b8b41546ac84afb6f22e1ea49702af14f2d54674761ebae
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8273013c8a3563502941aa1857ede5df46d7637f0d0163655ba08b8490f55277
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s056_output"
	    wget -O "n100.r02.s056_output/n100.r02.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s056_output/n100.r02.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s056_output/n100.r02.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s056_output/n100.r02.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s056_output/n100.r02.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s056_output/n100.r02.s056.reference.fas" "n100.r02.s056_output/n100.r02.s056.fq1.fastq" "n100.r02.s056_output/n100.r02.s056.fq2.fastq" | samtools view -bS - > "n100.r02.s056_output/n100.r02.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s056_output/n100.r02.s056.untrimmed.sorted.bam" "n100.r02.s056_output/n100.r02.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s056_output/n100.r02.s056.untrimmed.sorted.bam" -b "n100.r02.s056_output/n100.r02.s056.primers.bed" -p "n100.r02.s056_output/n100.r02.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" "n100.r02.s056_output/n100.r02.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s056_output/n100.r02.s056.reference.fas" "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" > "n100.r02.s056_output/n100.r02.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s056_output/n100.r02.s056.reference.fas" --call-indels "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" > "n100.r02.s056_output/n100.r02.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" > "n100.r02.s056_output/n100.r02.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s056_output/n100.r02.s056.depth.txt" "n100.r02.s056_output/n100.r02.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s056_output/n100.r02.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s056_output/n100.r02.s056.reference.fas" | bcftools consensus -m "n100.r02.s056_output/n100.r02.s056.low_depth.tsv" tmp.vcf.gz > "n100.r02.s056_output/n100.r02.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:48 scheduler task 8c914f7e (flow 56fb7d44): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:48 scheduler task 8c914f7e (flow 56fb7d44): waiting for completion (try 0): started
2021/07/08 16:36:48  ->  n100.r02.s074.Main.out_file 56fb7d44 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:48 n100.r02.s074.Main.out_file 56fb7d44 n100/r02/n100.r02.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd473d40450c15888d4db53f7ac74c377a343dd557f0507d5b7628eceb72d3de
	sha256:56fb7d44f41913a0d5e9f5bbc6ca3dafe80e5db0b6ea013c355596bb8194899e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c914f7e009d1f0ff6366ac317b94f9281a525cbe5e5efddef7c0643b0fa0f72
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s074_output"
	    wget -O "n100.r02.s074_output/n100.r02.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s074_output/n100.r02.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s074_output/n100.r02.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s074_output/n100.r02.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s074_output/n100.r02.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s074_output/n100.r02.s074.reference.fas" "n100.r02.s074_output/n100.r02.s074.fq1.fastq" "n100.r02.s074_output/n100.r02.s074.fq2.fastq" | samtools view -bS - > "n100.r02.s074_output/n100.r02.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s074_output/n100.r02.s074.untrimmed.sorted.bam" "n100.r02.s074_output/n100.r02.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s074_output/n100.r02.s074.untrimmed.sorted.bam" -b "n100.r02.s074_output/n100.r02.s074.primers.bed" -p "n100.r02.s074_output/n100.r02.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" "n100.r02.s074_output/n100.r02.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s074_output/n100.r02.s074.reference.fas" "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" > "n100.r02.s074_output/n100.r02.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s074_output/n100.r02.s074.reference.fas" --call-indels "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" > "n100.r02.s074_output/n100.r02.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" > "n100.r02.s074_output/n100.r02.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s074_output/n100.r02.s074.depth.txt" "n100.r02.s074_output/n100.r02.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s074_output/n100.r02.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s074_output/n100.r02.s074.reference.fas" | bcftools consensus -m "n100.r02.s074_output/n100.r02.s074.low_depth.tsv" tmp.vcf.gz > "n100.r02.s074_output/n100.r02.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:48 scheduler task 5f52d829 (flow 23c21f0f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:48 scheduler task 5f52d829 (flow 23c21f0f): waiting for completion (try 0): started
2021/07/08 16:36:48  ->  n100.r02.s092.Main.out_file 23c21f0f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:48 n100.r02.s092.Main.out_file 23c21f0f n100/r02/n100.r02.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d37d30458e8d44621154458b7e57d3c59c1deca651da5183c1d133ea291287a
	sha256:23c21f0f3445f0e7fe91c092c9f1d015dc57458bd49d06dbca3fab3107d55249
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f52d829af580a2f49760a4783b025d0b7603a67cd4e5922cab363f7c477f329
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s092_output"
	    wget -O "n100.r02.s092_output/n100.r02.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s092_output/n100.r02.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s092_output/n100.r02.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s092_output/n100.r02.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s092_output/n100.r02.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s092_output/n100.r02.s092.reference.fas" "n100.r02.s092_output/n100.r02.s092.fq1.fastq" "n100.r02.s092_output/n100.r02.s092.fq2.fastq" | samtools view -bS - > "n100.r02.s092_output/n100.r02.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s092_output/n100.r02.s092.untrimmed.sorted.bam" "n100.r02.s092_output/n100.r02.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s092_output/n100.r02.s092.untrimmed.sorted.bam" -b "n100.r02.s092_output/n100.r02.s092.primers.bed" -p "n100.r02.s092_output/n100.r02.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" "n100.r02.s092_output/n100.r02.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s092_output/n100.r02.s092.reference.fas" "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" > "n100.r02.s092_output/n100.r02.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s092_output/n100.r02.s092.reference.fas" --call-indels "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" > "n100.r02.s092_output/n100.r02.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" > "n100.r02.s092_output/n100.r02.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s092_output/n100.r02.s092.depth.txt" "n100.r02.s092_output/n100.r02.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s092_output/n100.r02.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s092_output/n100.r02.s092.reference.fas" | bcftools consensus -m "n100.r02.s092_output/n100.r02.s092.low_depth.tsv" tmp.vcf.gz > "n100.r02.s092_output/n100.r02.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:48 scheduler task 1e604ca0 (flow 35fb25c1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:48 scheduler task 1e604ca0 (flow 35fb25c1): waiting for completion (try 0): started
2021/07/08 16:36:48  ->  n100.r02.s079.Main.out_file 35fb25c1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:48 n100.r02.s079.Main.out_file 35fb25c1 n100/r02/n100.r02.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:771c2224faf6fb226efd7e534927be1aee8b936c146f23bf7a54e14bee018a7d
	sha256:35fb25c15c9e9ad7224ddc519b68a6fd48342eb9e0f6f8fe146c8756a7f82a66
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e604ca0edb43e7f32334f128cc894f8b9f10f160d917c420465f6339c204788
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s079_output"
	    wget -O "n100.r02.s079_output/n100.r02.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s079_output/n100.r02.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s079_output/n100.r02.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s079_output/n100.r02.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s079_output/n100.r02.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s079_output/n100.r02.s079.reference.fas" "n100.r02.s079_output/n100.r02.s079.fq1.fastq" "n100.r02.s079_output/n100.r02.s079.fq2.fastq" | samtools view -bS - > "n100.r02.s079_output/n100.r02.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s079_output/n100.r02.s079.untrimmed.sorted.bam" "n100.r02.s079_output/n100.r02.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s079_output/n100.r02.s079.untrimmed.sorted.bam" -b "n100.r02.s079_output/n100.r02.s079.primers.bed" -p "n100.r02.s079_output/n100.r02.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" "n100.r02.s079_output/n100.r02.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s079_output/n100.r02.s079.reference.fas" "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" > "n100.r02.s079_output/n100.r02.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s079_output/n100.r02.s079.reference.fas" --call-indels "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" > "n100.r02.s079_output/n100.r02.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" > "n100.r02.s079_output/n100.r02.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s079_output/n100.r02.s079.depth.txt" "n100.r02.s079_output/n100.r02.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s079_output/n100.r02.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s079_output/n100.r02.s079.reference.fas" | bcftools consensus -m "n100.r02.s079_output/n100.r02.s079.low_depth.tsv" tmp.vcf.gz > "n100.r02.s079_output/n100.r02.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:48 scheduler task f6b05f5e (flow 64781829): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:48 scheduler task f6b05f5e (flow 64781829): waiting for completion (try 0): started
2021/07/08 16:36:48  ->  n100.r02.s061.Main.out_file 64781829 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:48 n100.r02.s061.Main.out_file 64781829 n100/r02/n100.r02.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0d9706b8842459d3fe83d9caa0d9fe17c11dcc8743d51711bf992413cc63f7c
	sha256:6478182913d4da4e27031e529949a9627e78901ad607d7be7f5562fe36a0c006
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f6b05f5e63c7d92c72baab522aec2a390b68181114dca78e1a4727418b3f43f9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s061_output"
	    wget -O "n100.r02.s061_output/n100.r02.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s061_output/n100.r02.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s061_output/n100.r02.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s061_output/n100.r02.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s061_output/n100.r02.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s061_output/n100.r02.s061.reference.fas" "n100.r02.s061_output/n100.r02.s061.fq1.fastq" "n100.r02.s061_output/n100.r02.s061.fq2.fastq" | samtools view -bS - > "n100.r02.s061_output/n100.r02.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s061_output/n100.r02.s061.untrimmed.sorted.bam" "n100.r02.s061_output/n100.r02.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s061_output/n100.r02.s061.untrimmed.sorted.bam" -b "n100.r02.s061_output/n100.r02.s061.primers.bed" -p "n100.r02.s061_output/n100.r02.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" "n100.r02.s061_output/n100.r02.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s061_output/n100.r02.s061.reference.fas" "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" > "n100.r02.s061_output/n100.r02.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s061_output/n100.r02.s061.reference.fas" --call-indels "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" > "n100.r02.s061_output/n100.r02.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" > "n100.r02.s061_output/n100.r02.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s061_output/n100.r02.s061.depth.txt" "n100.r02.s061_output/n100.r02.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s061_output/n100.r02.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s061_output/n100.r02.s061.reference.fas" | bcftools consensus -m "n100.r02.s061_output/n100.r02.s061.low_depth.tsv" tmp.vcf.gz > "n100.r02.s061_output/n100.r02.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task 0b7fb97b (flow 874b9577): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task 0b7fb97b (flow 874b9577): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s082.Main.out_file 874b9577 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s082.Main.out_file 874b9577 n100/r02/n100.r02.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d96b43ba38e2890cd94d041f3db068ca00081e71e86519c70f0c1fb489ebdf06
	sha256:874b9577d02bf6da2fcc7bdff722558c4e16bf84c2cf6ed843ec2b3bbd889599
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b7fb97bf63b2f581d8e487d857fa70943911287f405ee7431df4ec5dabbdb5d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s082_output"
	    wget -O "n100.r02.s082_output/n100.r02.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s082_output/n100.r02.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s082_output/n100.r02.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s082_output/n100.r02.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s082_output/n100.r02.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s082_output/n100.r02.s082.reference.fas" "n100.r02.s082_output/n100.r02.s082.fq1.fastq" "n100.r02.s082_output/n100.r02.s082.fq2.fastq" | samtools view -bS - > "n100.r02.s082_output/n100.r02.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s082_output/n100.r02.s082.untrimmed.sorted.bam" "n100.r02.s082_output/n100.r02.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s082_output/n100.r02.s082.untrimmed.sorted.bam" -b "n100.r02.s082_output/n100.r02.s082.primers.bed" -p "n100.r02.s082_output/n100.r02.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" "n100.r02.s082_output/n100.r02.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s082_output/n100.r02.s082.reference.fas" "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" > "n100.r02.s082_output/n100.r02.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s082_output/n100.r02.s082.reference.fas" --call-indels "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" > "n100.r02.s082_output/n100.r02.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" > "n100.r02.s082_output/n100.r02.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s082_output/n100.r02.s082.depth.txt" "n100.r02.s082_output/n100.r02.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s082_output/n100.r02.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s082_output/n100.r02.s082.reference.fas" | bcftools consensus -m "n100.r02.s082_output/n100.r02.s082.low_depth.tsv" tmp.vcf.gz > "n100.r02.s082_output/n100.r02.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task 40ee7582 (flow 461731e4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task 40ee7582 (flow 461731e4): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s080.Main.out_file 461731e4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s080.Main.out_file 461731e4 n100/r02/n100.r02.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e5acb84ceffb6120e9c51f33a3ac040812b4eb26c0016c0cd6d6de39381f7b39
	sha256:461731e40796de0dee91c2ea3a30c542b65e103e4bbfaba1ee7fbc4d21911953
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/40ee758246ff8c96be8b73e1edf2ed8e6fc540f43316f2f985d44b7987a9f322
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s080_output"
	    wget -O "n100.r02.s080_output/n100.r02.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s080_output/n100.r02.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s080_output/n100.r02.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s080_output/n100.r02.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s080_output/n100.r02.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s080_output/n100.r02.s080.reference.fas" "n100.r02.s080_output/n100.r02.s080.fq1.fastq" "n100.r02.s080_output/n100.r02.s080.fq2.fastq" | samtools view -bS - > "n100.r02.s080_output/n100.r02.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s080_output/n100.r02.s080.untrimmed.sorted.bam" "n100.r02.s080_output/n100.r02.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s080_output/n100.r02.s080.untrimmed.sorted.bam" -b "n100.r02.s080_output/n100.r02.s080.primers.bed" -p "n100.r02.s080_output/n100.r02.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" "n100.r02.s080_output/n100.r02.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s080_output/n100.r02.s080.reference.fas" "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" > "n100.r02.s080_output/n100.r02.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s080_output/n100.r02.s080.reference.fas" --call-indels "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" > "n100.r02.s080_output/n100.r02.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" > "n100.r02.s080_output/n100.r02.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s080_output/n100.r02.s080.depth.txt" "n100.r02.s080_output/n100.r02.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s080_output/n100.r02.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s080_output/n100.r02.s080.reference.fas" | bcftools consensus -m "n100.r02.s080_output/n100.r02.s080.low_depth.tsv" tmp.vcf.gz > "n100.r02.s080_output/n100.r02.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task 6f0ba86a (flow 16e41ecb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task 6f0ba86a (flow 16e41ecb): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s013.Main.out_file 16e41ecb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s013.Main.out_file 16e41ecb n100/r02/n100.r02.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dfab7788be14f2a4224a88280b05201914f70235aedf1a6c492c57cc814303db
	sha256:16e41ecb76ac11e88d2cc4b8256567a15dad169967efbd3c74bd5553930559f0
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f0ba86a210a7643591cc467b02e03da6f23dcc7557a8e604df853526535d3f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s013_output"
	    wget -O "n100.r02.s013_output/n100.r02.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s013_output/n100.r02.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s013_output/n100.r02.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s013_output/n100.r02.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s013_output/n100.r02.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s013_output/n100.r02.s013.reference.fas" "n100.r02.s013_output/n100.r02.s013.fq1.fastq" "n100.r02.s013_output/n100.r02.s013.fq2.fastq" | samtools view -bS - > "n100.r02.s013_output/n100.r02.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s013_output/n100.r02.s013.untrimmed.sorted.bam" "n100.r02.s013_output/n100.r02.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s013_output/n100.r02.s013.untrimmed.sorted.bam" -b "n100.r02.s013_output/n100.r02.s013.primers.bed" -p "n100.r02.s013_output/n100.r02.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" "n100.r02.s013_output/n100.r02.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s013_output/n100.r02.s013.reference.fas" "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" > "n100.r02.s013_output/n100.r02.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s013_output/n100.r02.s013.reference.fas" --call-indels "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" > "n100.r02.s013_output/n100.r02.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" > "n100.r02.s013_output/n100.r02.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s013_output/n100.r02.s013.depth.txt" "n100.r02.s013_output/n100.r02.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s013_output/n100.r02.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s013_output/n100.r02.s013.reference.fas" | bcftools consensus -m "n100.r02.s013_output/n100.r02.s013.low_depth.tsv" tmp.vcf.gz > "n100.r02.s013_output/n100.r02.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task d06e59c3 (flow 57bcabea): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task d06e59c3 (flow 57bcabea): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s007.Main.out_file 57bcabea exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s007.Main.out_file 57bcabea n100/r02/n100.r02.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7f99bdb4202b5da60243db3e18ee73107415a5685fb90792e4eab4bf32a5a420
	sha256:57bcabeaac8c70dc84e4d359b26211005abc8006aeb186139d650b93c2afcb8b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d06e59c3865188fab15a3f1d6ea2d56239e4250593907f42555bf89b4cd94134
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s007_output"
	    wget -O "n100.r02.s007_output/n100.r02.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s007_output/n100.r02.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s007_output/n100.r02.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s007_output/n100.r02.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s007_output/n100.r02.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s007_output/n100.r02.s007.reference.fas" "n100.r02.s007_output/n100.r02.s007.fq1.fastq" "n100.r02.s007_output/n100.r02.s007.fq2.fastq" | samtools view -bS - > "n100.r02.s007_output/n100.r02.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s007_output/n100.r02.s007.untrimmed.sorted.bam" "n100.r02.s007_output/n100.r02.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s007_output/n100.r02.s007.untrimmed.sorted.bam" -b "n100.r02.s007_output/n100.r02.s007.primers.bed" -p "n100.r02.s007_output/n100.r02.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" "n100.r02.s007_output/n100.r02.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s007_output/n100.r02.s007.reference.fas" "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" > "n100.r02.s007_output/n100.r02.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s007_output/n100.r02.s007.reference.fas" --call-indels "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" > "n100.r02.s007_output/n100.r02.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" > "n100.r02.s007_output/n100.r02.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s007_output/n100.r02.s007.depth.txt" "n100.r02.s007_output/n100.r02.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s007_output/n100.r02.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s007_output/n100.r02.s007.reference.fas" | bcftools consensus -m "n100.r02.s007_output/n100.r02.s007.low_depth.tsv" tmp.vcf.gz > "n100.r02.s007_output/n100.r02.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task 4bda52eb (flow b3c6f94e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task 4bda52eb (flow b3c6f94e): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s100.Main.out_file b3c6f94e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s100.Main.out_file b3c6f94e n100/r02/n100.r02.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:17fae3af9008dc501a95f316bbd8d02d3c228bfd1b542393f48be5afc75b524d
	sha256:b3c6f94ec4de79efc9c2a8de0623f83adf4e45f1d08ff5ccce01f5d2407c04c7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4bda52ebb15923da7809e2fee95d5cd30c613a3d0a0ceeb357c61eb55a2381a0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s100_output"
	    wget -O "n100.r02.s100_output/n100.r02.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s100_output/n100.r02.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s100_output/n100.r02.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s100_output/n100.r02.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s100_output/n100.r02.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s100_output/n100.r02.s100.reference.fas" "n100.r02.s100_output/n100.r02.s100.fq1.fastq" "n100.r02.s100_output/n100.r02.s100.fq2.fastq" | samtools view -bS - > "n100.r02.s100_output/n100.r02.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s100_output/n100.r02.s100.untrimmed.sorted.bam" "n100.r02.s100_output/n100.r02.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s100_output/n100.r02.s100.untrimmed.sorted.bam" -b "n100.r02.s100_output/n100.r02.s100.primers.bed" -p "n100.r02.s100_output/n100.r02.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" "n100.r02.s100_output/n100.r02.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s100_output/n100.r02.s100.reference.fas" "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" > "n100.r02.s100_output/n100.r02.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s100_output/n100.r02.s100.reference.fas" --call-indels "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" > "n100.r02.s100_output/n100.r02.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" > "n100.r02.s100_output/n100.r02.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s100_output/n100.r02.s100.depth.txt" "n100.r02.s100_output/n100.r02.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s100_output/n100.r02.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s100_output/n100.r02.s100.reference.fas" | bcftools consensus -m "n100.r02.s100_output/n100.r02.s100.low_depth.tsv" tmp.vcf.gz > "n100.r02.s100_output/n100.r02.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task 94dedf3c (flow d1fb7eba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task 94dedf3c (flow d1fb7eba): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s023.Main.out_file d1fb7eba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s023.Main.out_file d1fb7eba n100/r02/n100.r02.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:86f66ec45e699c306a009ac65b97c151ac10879d7ff85cba2835fcfacdfce98e
	sha256:d1fb7eba5cbcc92cabe16972acdc10a0abad9e4cbf3f40662a9ce3efb0fbe671
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/94dedf3caa9ce9a936dc8ddf484a126962a3fad8fe18544be56a6193020b18ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s023_output"
	    wget -O "n100.r02.s023_output/n100.r02.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s023_output/n100.r02.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s023_output/n100.r02.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s023_output/n100.r02.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s023_output/n100.r02.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s023_output/n100.r02.s023.reference.fas" "n100.r02.s023_output/n100.r02.s023.fq1.fastq" "n100.r02.s023_output/n100.r02.s023.fq2.fastq" | samtools view -bS - > "n100.r02.s023_output/n100.r02.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s023_output/n100.r02.s023.untrimmed.sorted.bam" "n100.r02.s023_output/n100.r02.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s023_output/n100.r02.s023.untrimmed.sorted.bam" -b "n100.r02.s023_output/n100.r02.s023.primers.bed" -p "n100.r02.s023_output/n100.r02.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" "n100.r02.s023_output/n100.r02.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s023_output/n100.r02.s023.reference.fas" "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" > "n100.r02.s023_output/n100.r02.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s023_output/n100.r02.s023.reference.fas" --call-indels "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" > "n100.r02.s023_output/n100.r02.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" > "n100.r02.s023_output/n100.r02.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s023_output/n100.r02.s023.depth.txt" "n100.r02.s023_output/n100.r02.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s023_output/n100.r02.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s023_output/n100.r02.s023.reference.fas" | bcftools consensus -m "n100.r02.s023_output/n100.r02.s023.low_depth.tsv" tmp.vcf.gz > "n100.r02.s023_output/n100.r02.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:49 scheduler task 6dbd0fd3 (flow 4574c5bb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:49 scheduler task 6dbd0fd3 (flow 4574c5bb): waiting for completion (try 0): started
2021/07/08 16:36:49  ->  n100.r02.s073.Main.out_file 4574c5bb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:49 n100.r02.s073.Main.out_file 4574c5bb n100/r02/n100.r02.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27fa4007af7c77294530512f1352a4c38b4b0305314013c65faf9c4ddf980a31
	sha256:4574c5bb708e6856dd522785e4d01388f14758d7b82029293719c10074a896ae
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6dbd0fd31597473198bde0cd4cd348e8f0c5fe230cf8996a850bd1d72e8ba232
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s073_output"
	    wget -O "n100.r02.s073_output/n100.r02.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s073_output/n100.r02.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s073_output/n100.r02.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s073_output/n100.r02.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s073_output/n100.r02.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s073_output/n100.r02.s073.reference.fas" "n100.r02.s073_output/n100.r02.s073.fq1.fastq" "n100.r02.s073_output/n100.r02.s073.fq2.fastq" | samtools view -bS - > "n100.r02.s073_output/n100.r02.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s073_output/n100.r02.s073.untrimmed.sorted.bam" "n100.r02.s073_output/n100.r02.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s073_output/n100.r02.s073.untrimmed.sorted.bam" -b "n100.r02.s073_output/n100.r02.s073.primers.bed" -p "n100.r02.s073_output/n100.r02.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" "n100.r02.s073_output/n100.r02.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s073_output/n100.r02.s073.reference.fas" "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" > "n100.r02.s073_output/n100.r02.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s073_output/n100.r02.s073.reference.fas" --call-indels "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" > "n100.r02.s073_output/n100.r02.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" > "n100.r02.s073_output/n100.r02.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s073_output/n100.r02.s073.depth.txt" "n100.r02.s073_output/n100.r02.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s073_output/n100.r02.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s073_output/n100.r02.s073.reference.fas" | bcftools consensus -m "n100.r02.s073_output/n100.r02.s073.low_depth.tsv" tmp.vcf.gz > "n100.r02.s073_output/n100.r02.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:50 scheduler task fc432408 (flow 28e5d9c6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:50 scheduler task fc432408 (flow 28e5d9c6): waiting for completion (try 0): started
2021/07/08 16:36:50  ->  n100.r02.s083.Main.out_file 28e5d9c6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:50 n100.r02.s083.Main.out_file 28e5d9c6 n100/r02/n100.r02.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3c0687b8fa34f6c0878a02c6694dc02e52cd9ee4a161ac41226eaf418955101c
	sha256:28e5d9c63fb7bb625be28f58e91a87ad60fffd67e479ad10e5a878f965cc8277
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fc4324085d4cb6fe7f1c814f452b3ecb5ea3f2d6172d66c39f9fe8efe0bc6de2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s083_output"
	    wget -O "n100.r02.s083_output/n100.r02.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s083_output/n100.r02.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s083_output/n100.r02.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s083_output/n100.r02.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s083_output/n100.r02.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s083_output/n100.r02.s083.reference.fas" "n100.r02.s083_output/n100.r02.s083.fq1.fastq" "n100.r02.s083_output/n100.r02.s083.fq2.fastq" | samtools view -bS - > "n100.r02.s083_output/n100.r02.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s083_output/n100.r02.s083.untrimmed.sorted.bam" "n100.r02.s083_output/n100.r02.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s083_output/n100.r02.s083.untrimmed.sorted.bam" -b "n100.r02.s083_output/n100.r02.s083.primers.bed" -p "n100.r02.s083_output/n100.r02.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" "n100.r02.s083_output/n100.r02.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s083_output/n100.r02.s083.reference.fas" "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" > "n100.r02.s083_output/n100.r02.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s083_output/n100.r02.s083.reference.fas" --call-indels "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" > "n100.r02.s083_output/n100.r02.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" > "n100.r02.s083_output/n100.r02.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s083_output/n100.r02.s083.depth.txt" "n100.r02.s083_output/n100.r02.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s083_output/n100.r02.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s083_output/n100.r02.s083.reference.fas" | bcftools consensus -m "n100.r02.s083_output/n100.r02.s083.low_depth.tsv" tmp.vcf.gz > "n100.r02.s083_output/n100.r02.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:50 scheduler task 83e3fcac (flow e3dae658): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:50 scheduler task 83e3fcac (flow e3dae658): waiting for completion (try 0): started
2021/07/08 16:36:50  ->  n100.r02.s040.Main.out_file e3dae658 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:50 n100.r02.s040.Main.out_file e3dae658 n100/r02/n100.r02.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4904b74ce3636a0b925f070bbb70ce634464d8d529ce972baeb2e8dc40c6b444
	sha256:e3dae65802768e7c81601c851771067a381455be4c89880b38cdd597d9f7ce3a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83e3fcaca3c601a29287e793b6539bd46b7107a27e0cdc873a067fde4500f2c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s040_output"
	    wget -O "n100.r02.s040_output/n100.r02.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s040_output/n100.r02.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s040_output/n100.r02.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s040_output/n100.r02.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s040_output/n100.r02.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s040_output/n100.r02.s040.reference.fas" "n100.r02.s040_output/n100.r02.s040.fq1.fastq" "n100.r02.s040_output/n100.r02.s040.fq2.fastq" | samtools view -bS - > "n100.r02.s040_output/n100.r02.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s040_output/n100.r02.s040.untrimmed.sorted.bam" "n100.r02.s040_output/n100.r02.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s040_output/n100.r02.s040.untrimmed.sorted.bam" -b "n100.r02.s040_output/n100.r02.s040.primers.bed" -p "n100.r02.s040_output/n100.r02.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" "n100.r02.s040_output/n100.r02.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s040_output/n100.r02.s040.reference.fas" "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" > "n100.r02.s040_output/n100.r02.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s040_output/n100.r02.s040.reference.fas" --call-indels "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" > "n100.r02.s040_output/n100.r02.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" > "n100.r02.s040_output/n100.r02.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s040_output/n100.r02.s040.depth.txt" "n100.r02.s040_output/n100.r02.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s040_output/n100.r02.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s040_output/n100.r02.s040.reference.fas" | bcftools consensus -m "n100.r02.s040_output/n100.r02.s040.low_depth.tsv" tmp.vcf.gz > "n100.r02.s040_output/n100.r02.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:50 scheduler task 4e6261f7 (flow 31db7c1d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:50 scheduler task 4e6261f7 (flow 31db7c1d): waiting for completion (try 0): started
2021/07/08 16:36:50  ->  n100.r02.s043.Main.out_file 31db7c1d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:50 n100.r02.s043.Main.out_file 31db7c1d n100/r02/n100.r02.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b22cf45f314805afc81c34c4fed1c8a2648f0e69275f69fc013accc148859f33
	sha256:31db7c1d372bf8405e1836094669bd2a6c7e1b562ef85cd7f7f51ad8d3818cd1
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e6261f7fae2a23179f265d8bdc49c75453944486af162ff31359718bb461e7f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s043_output"
	    wget -O "n100.r02.s043_output/n100.r02.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s043_output/n100.r02.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s043_output/n100.r02.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s043_output/n100.r02.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s043_output/n100.r02.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s043_output/n100.r02.s043.reference.fas" "n100.r02.s043_output/n100.r02.s043.fq1.fastq" "n100.r02.s043_output/n100.r02.s043.fq2.fastq" | samtools view -bS - > "n100.r02.s043_output/n100.r02.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s043_output/n100.r02.s043.untrimmed.sorted.bam" "n100.r02.s043_output/n100.r02.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s043_output/n100.r02.s043.untrimmed.sorted.bam" -b "n100.r02.s043_output/n100.r02.s043.primers.bed" -p "n100.r02.s043_output/n100.r02.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" "n100.r02.s043_output/n100.r02.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s043_output/n100.r02.s043.reference.fas" "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" > "n100.r02.s043_output/n100.r02.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s043_output/n100.r02.s043.reference.fas" --call-indels "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" > "n100.r02.s043_output/n100.r02.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" > "n100.r02.s043_output/n100.r02.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s043_output/n100.r02.s043.depth.txt" "n100.r02.s043_output/n100.r02.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s043_output/n100.r02.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s043_output/n100.r02.s043.reference.fas" | bcftools consensus -m "n100.r02.s043_output/n100.r02.s043.low_depth.tsv" tmp.vcf.gz > "n100.r02.s043_output/n100.r02.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:50 scheduler task 0e861905 (flow 7a724582): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:50 scheduler task 0e861905 (flow 7a724582): waiting for completion (try 0): started
2021/07/08 16:36:50  ->  n100.r02.s069.Main.out_file 7a724582 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:50 n100.r02.s069.Main.out_file 7a724582 n100/r02/n100.r02.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cd90311ed63270b9250c72c5347dcd52935db374391249014024d78d184d419b
	sha256:7a7245821707f3de21828b3f563f80005777a8ac59cb69c7c32897225745cb94
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e8619050aac9d94bdb61f3a9880be8be3bba4007cbc2e48bba83bbccc18401b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s069_output"
	    wget -O "n100.r02.s069_output/n100.r02.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s069_output/n100.r02.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s069_output/n100.r02.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s069_output/n100.r02.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s069_output/n100.r02.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s069_output/n100.r02.s069.reference.fas" "n100.r02.s069_output/n100.r02.s069.fq1.fastq" "n100.r02.s069_output/n100.r02.s069.fq2.fastq" | samtools view -bS - > "n100.r02.s069_output/n100.r02.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s069_output/n100.r02.s069.untrimmed.sorted.bam" "n100.r02.s069_output/n100.r02.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s069_output/n100.r02.s069.untrimmed.sorted.bam" -b "n100.r02.s069_output/n100.r02.s069.primers.bed" -p "n100.r02.s069_output/n100.r02.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" "n100.r02.s069_output/n100.r02.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s069_output/n100.r02.s069.reference.fas" "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" > "n100.r02.s069_output/n100.r02.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s069_output/n100.r02.s069.reference.fas" --call-indels "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" > "n100.r02.s069_output/n100.r02.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" > "n100.r02.s069_output/n100.r02.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s069_output/n100.r02.s069.depth.txt" "n100.r02.s069_output/n100.r02.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s069_output/n100.r02.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s069_output/n100.r02.s069.reference.fas" | bcftools consensus -m "n100.r02.s069_output/n100.r02.s069.low_depth.tsv" tmp.vcf.gz > "n100.r02.s069_output/n100.r02.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:50 scheduler task 506303dc (flow 1e4c353c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:50 scheduler task 506303dc (flow 1e4c353c): waiting for completion (try 0): started
2021/07/08 16:36:50  ->  n100.r02.s016.Main.out_file 1e4c353c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:50 n100.r02.s016.Main.out_file 1e4c353c n100/r02/n100.r02.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d75cc2f47a9dcf599b4cc6e5704d4890c1b767f759695733bd5501331fe70393
	sha256:1e4c353c1aa0653ba57f7471950ee248bfb081e417497db8952979e64d07d90d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/506303dc0559b9071e64be7dc745160f160c021da07d0bb7c4928b49266a5f73
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s016_output"
	    wget -O "n100.r02.s016_output/n100.r02.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s016_output/n100.r02.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s016_output/n100.r02.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s016_output/n100.r02.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s016_output/n100.r02.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s016_output/n100.r02.s016.reference.fas" "n100.r02.s016_output/n100.r02.s016.fq1.fastq" "n100.r02.s016_output/n100.r02.s016.fq2.fastq" | samtools view -bS - > "n100.r02.s016_output/n100.r02.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s016_output/n100.r02.s016.untrimmed.sorted.bam" "n100.r02.s016_output/n100.r02.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s016_output/n100.r02.s016.untrimmed.sorted.bam" -b "n100.r02.s016_output/n100.r02.s016.primers.bed" -p "n100.r02.s016_output/n100.r02.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" "n100.r02.s016_output/n100.r02.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s016_output/n100.r02.s016.reference.fas" "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" > "n100.r02.s016_output/n100.r02.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s016_output/n100.r02.s016.reference.fas" --call-indels "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" > "n100.r02.s016_output/n100.r02.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" > "n100.r02.s016_output/n100.r02.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s016_output/n100.r02.s016.depth.txt" "n100.r02.s016_output/n100.r02.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s016_output/n100.r02.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s016_output/n100.r02.s016.reference.fas" | bcftools consensus -m "n100.r02.s016_output/n100.r02.s016.low_depth.tsv" tmp.vcf.gz > "n100.r02.s016_output/n100.r02.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:50 scheduler task cafad4ba (flow 5063d2f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:50 scheduler task cafad4ba (flow 5063d2f3): waiting for completion (try 0): started
2021/07/08 16:36:50  ->  n100.r02.s011.Main.out_file 5063d2f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:50 n100.r02.s011.Main.out_file 5063d2f3 n100/r02/n100.r02.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:00a24cd92d87229cb49469a906675953618a04db58dfc85ecf6f95ed644acd1d
	sha256:5063d2f31e862331797f095a91b3133a6d338864236fa82265c96071c651e2ba
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cafad4ba25e41d6e67141358b26bc9e3cd98fcae3755eb4f8a8d2c90c20603b6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s011_output"
	    wget -O "n100.r02.s011_output/n100.r02.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s011_output/n100.r02.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s011_output/n100.r02.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s011_output/n100.r02.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s011_output/n100.r02.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s011_output/n100.r02.s011.reference.fas" "n100.r02.s011_output/n100.r02.s011.fq1.fastq" "n100.r02.s011_output/n100.r02.s011.fq2.fastq" | samtools view -bS - > "n100.r02.s011_output/n100.r02.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s011_output/n100.r02.s011.untrimmed.sorted.bam" "n100.r02.s011_output/n100.r02.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s011_output/n100.r02.s011.untrimmed.sorted.bam" -b "n100.r02.s011_output/n100.r02.s011.primers.bed" -p "n100.r02.s011_output/n100.r02.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" "n100.r02.s011_output/n100.r02.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s011_output/n100.r02.s011.reference.fas" "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" > "n100.r02.s011_output/n100.r02.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s011_output/n100.r02.s011.reference.fas" --call-indels "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" > "n100.r02.s011_output/n100.r02.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" > "n100.r02.s011_output/n100.r02.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s011_output/n100.r02.s011.depth.txt" "n100.r02.s011_output/n100.r02.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s011_output/n100.r02.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s011_output/n100.r02.s011.reference.fas" | bcftools consensus -m "n100.r02.s011_output/n100.r02.s011.low_depth.tsv" tmp.vcf.gz > "n100.r02.s011_output/n100.r02.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:51 scheduler task 0a7969ad (flow 678c0cb0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:51 scheduler task 0a7969ad (flow 678c0cb0): waiting for completion (try 0): started
2021/07/08 16:36:51  ->  n100.r02.s059.Main.out_file 678c0cb0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:51 n100.r02.s059.Main.out_file 678c0cb0 n100/r02/n100.r02.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4b76c0ee43d62d423a96d54cf6a7333a04dabe0d6f30a5db89571325b53a2188
	sha256:678c0cb05558210727adf4f4a5e86b3447aeb1972b6a09b5113256f187226f30
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a7969ad4086e2962326f95986072362dd40fd808b69c4fcc05b2bca28b4aab5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s059_output"
	    wget -O "n100.r02.s059_output/n100.r02.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s059_output/n100.r02.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s059_output/n100.r02.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s059_output/n100.r02.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s059_output/n100.r02.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s059_output/n100.r02.s059.reference.fas" "n100.r02.s059_output/n100.r02.s059.fq1.fastq" "n100.r02.s059_output/n100.r02.s059.fq2.fastq" | samtools view -bS - > "n100.r02.s059_output/n100.r02.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s059_output/n100.r02.s059.untrimmed.sorted.bam" "n100.r02.s059_output/n100.r02.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s059_output/n100.r02.s059.untrimmed.sorted.bam" -b "n100.r02.s059_output/n100.r02.s059.primers.bed" -p "n100.r02.s059_output/n100.r02.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" "n100.r02.s059_output/n100.r02.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s059_output/n100.r02.s059.reference.fas" "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" > "n100.r02.s059_output/n100.r02.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s059_output/n100.r02.s059.reference.fas" --call-indels "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" > "n100.r02.s059_output/n100.r02.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" > "n100.r02.s059_output/n100.r02.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s059_output/n100.r02.s059.depth.txt" "n100.r02.s059_output/n100.r02.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s059_output/n100.r02.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s059_output/n100.r02.s059.reference.fas" | bcftools consensus -m "n100.r02.s059_output/n100.r02.s059.low_depth.tsv" tmp.vcf.gz > "n100.r02.s059_output/n100.r02.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:51 scheduler task 8b35b6a1 (flow 29709fad): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:51 scheduler task 8b35b6a1 (flow 29709fad): waiting for completion (try 0): started
2021/07/08 16:36:51  ->  n100.r02.s048.Main.out_file 29709fad exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:51 n100.r02.s048.Main.out_file 29709fad n100/r02/n100.r02.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f7dc0fc21630437e5fbf3c4ce0caba7475e8799fa74ac086f3a849bb23f443dc
	sha256:29709fad4f2c7f998adaacff8be3af1d449eb156efc7ed5ce72a898ed702007a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b35b6a10613a64d5bf8e24c849be70a7f92e2bdf13e24cec76e9074d06c3900
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s048_output"
	    wget -O "n100.r02.s048_output/n100.r02.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s048_output/n100.r02.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s048_output/n100.r02.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s048_output/n100.r02.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s048_output/n100.r02.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s048_output/n100.r02.s048.reference.fas" "n100.r02.s048_output/n100.r02.s048.fq1.fastq" "n100.r02.s048_output/n100.r02.s048.fq2.fastq" | samtools view -bS - > "n100.r02.s048_output/n100.r02.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s048_output/n100.r02.s048.untrimmed.sorted.bam" "n100.r02.s048_output/n100.r02.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s048_output/n100.r02.s048.untrimmed.sorted.bam" -b "n100.r02.s048_output/n100.r02.s048.primers.bed" -p "n100.r02.s048_output/n100.r02.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" "n100.r02.s048_output/n100.r02.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s048_output/n100.r02.s048.reference.fas" "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" > "n100.r02.s048_output/n100.r02.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s048_output/n100.r02.s048.reference.fas" --call-indels "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" > "n100.r02.s048_output/n100.r02.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" > "n100.r02.s048_output/n100.r02.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s048_output/n100.r02.s048.depth.txt" "n100.r02.s048_output/n100.r02.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s048_output/n100.r02.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s048_output/n100.r02.s048.reference.fas" | bcftools consensus -m "n100.r02.s048_output/n100.r02.s048.low_depth.tsv" tmp.vcf.gz > "n100.r02.s048_output/n100.r02.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:51 scheduler task 5100a091 (flow 92c090c3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:51 scheduler task 5100a091 (flow 92c090c3): waiting for completion (try 0): started
2021/07/08 16:36:51  ->  n100.r02.s086.Main.out_file 92c090c3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:51 n100.r02.s086.Main.out_file 92c090c3 n100/r02/n100.r02.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9cd654504d3812bef806c7a00461d910d16f791f6c3c5553ddecebb02217ef37
	sha256:92c090c3d99e41e31860800e8d72a013d3e0dc206873d7a70c070a28fa869985
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5100a0913c65d815408db9a92e55ed4706fdc9fff405c06af616806b3813ac3d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s086_output"
	    wget -O "n100.r02.s086_output/n100.r02.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s086_output/n100.r02.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s086_output/n100.r02.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s086_output/n100.r02.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s086_output/n100.r02.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s086_output/n100.r02.s086.reference.fas" "n100.r02.s086_output/n100.r02.s086.fq1.fastq" "n100.r02.s086_output/n100.r02.s086.fq2.fastq" | samtools view -bS - > "n100.r02.s086_output/n100.r02.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s086_output/n100.r02.s086.untrimmed.sorted.bam" "n100.r02.s086_output/n100.r02.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s086_output/n100.r02.s086.untrimmed.sorted.bam" -b "n100.r02.s086_output/n100.r02.s086.primers.bed" -p "n100.r02.s086_output/n100.r02.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" "n100.r02.s086_output/n100.r02.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s086_output/n100.r02.s086.reference.fas" "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" > "n100.r02.s086_output/n100.r02.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s086_output/n100.r02.s086.reference.fas" --call-indels "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" > "n100.r02.s086_output/n100.r02.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" > "n100.r02.s086_output/n100.r02.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s086_output/n100.r02.s086.depth.txt" "n100.r02.s086_output/n100.r02.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s086_output/n100.r02.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s086_output/n100.r02.s086.reference.fas" | bcftools consensus -m "n100.r02.s086_output/n100.r02.s086.low_depth.tsv" tmp.vcf.gz > "n100.r02.s086_output/n100.r02.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:51 scheduler task f1d0e2d0 (flow 37b5e302): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:51 scheduler task f1d0e2d0 (flow 37b5e302): waiting for completion (try 0): started
2021/07/08 16:36:51  ->  n100.r02.s088.Main.out_file 37b5e302 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:51 n100.r02.s088.Main.out_file 37b5e302 n100/r02/n100.r02.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f6c806fba9302d1f7bb2418146ff2952c7b1de936640b383ee9cd6fc5a949f72
	sha256:37b5e30264ecd4fda0a4327104c79db12a5e541e57f33c03f14b890f679d5553
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f1d0e2d0b43df52367860c9f2e661e0e70b2b979001b0c4e3519c09cc2040006
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s088_output"
	    wget -O "n100.r02.s088_output/n100.r02.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s088_output/n100.r02.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s088_output/n100.r02.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s088_output/n100.r02.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s088_output/n100.r02.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s088_output/n100.r02.s088.reference.fas" "n100.r02.s088_output/n100.r02.s088.fq1.fastq" "n100.r02.s088_output/n100.r02.s088.fq2.fastq" | samtools view -bS - > "n100.r02.s088_output/n100.r02.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s088_output/n100.r02.s088.untrimmed.sorted.bam" "n100.r02.s088_output/n100.r02.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s088_output/n100.r02.s088.untrimmed.sorted.bam" -b "n100.r02.s088_output/n100.r02.s088.primers.bed" -p "n100.r02.s088_output/n100.r02.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" "n100.r02.s088_output/n100.r02.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s088_output/n100.r02.s088.reference.fas" "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" > "n100.r02.s088_output/n100.r02.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s088_output/n100.r02.s088.reference.fas" --call-indels "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" > "n100.r02.s088_output/n100.r02.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" > "n100.r02.s088_output/n100.r02.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s088_output/n100.r02.s088.depth.txt" "n100.r02.s088_output/n100.r02.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s088_output/n100.r02.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s088_output/n100.r02.s088.reference.fas" | bcftools consensus -m "n100.r02.s088_output/n100.r02.s088.low_depth.tsv" tmp.vcf.gz > "n100.r02.s088_output/n100.r02.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:51 scheduler task 28e75581 (flow e654e99d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:51 scheduler task 28e75581 (flow e654e99d): waiting for completion (try 0): started
2021/07/08 16:36:51  ->  n100.r02.s009.Main.out_file e654e99d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:51 n100.r02.s009.Main.out_file e654e99d n100/r02/n100.r02.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:57ee03581e06c033aa9395f8496ec938c6d411c39950ee6ed4a054c97b3a0671
	sha256:e654e99d41ac83f157ee3fcfc089048e27a107535cedae8f6713b1f70344ed4e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/28e75581062c3c4f59b1b9cde5b27eb06f39ac1892f5d28a0988689362daf5f2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s009_output"
	    wget -O "n100.r02.s009_output/n100.r02.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s009_output/n100.r02.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s009_output/n100.r02.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s009_output/n100.r02.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s009_output/n100.r02.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s009_output/n100.r02.s009.reference.fas" "n100.r02.s009_output/n100.r02.s009.fq1.fastq" "n100.r02.s009_output/n100.r02.s009.fq2.fastq" | samtools view -bS - > "n100.r02.s009_output/n100.r02.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s009_output/n100.r02.s009.untrimmed.sorted.bam" "n100.r02.s009_output/n100.r02.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s009_output/n100.r02.s009.untrimmed.sorted.bam" -b "n100.r02.s009_output/n100.r02.s009.primers.bed" -p "n100.r02.s009_output/n100.r02.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" "n100.r02.s009_output/n100.r02.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s009_output/n100.r02.s009.reference.fas" "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" > "n100.r02.s009_output/n100.r02.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s009_output/n100.r02.s009.reference.fas" --call-indels "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" > "n100.r02.s009_output/n100.r02.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" > "n100.r02.s009_output/n100.r02.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s009_output/n100.r02.s009.depth.txt" "n100.r02.s009_output/n100.r02.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s009_output/n100.r02.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s009_output/n100.r02.s009.reference.fas" | bcftools consensus -m "n100.r02.s009_output/n100.r02.s009.low_depth.tsv" tmp.vcf.gz > "n100.r02.s009_output/n100.r02.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task c88b5c52 (flow 7f934c83): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:52 scheduler task c88b5c52 (flow 7f934c83): waiting for completion (try 0): started
2021/07/08 16:36:52  ->  n100.r02.s070.Main.out_file 7f934c83 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:52 n100.r02.s070.Main.out_file 7f934c83 n100/r02/n100.r02.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:18a607f8cf6f0a0914e02feb2831c779fbd902e0d1f8d3b8d5fe13b83fb12778
	sha256:7f934c83c4d3662467bebe62e3514d4acc7cf5a39209f4583294a77bce9d48fd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c88b5c526397010044361f73acda72191ee841813b1a34267931502c8d77c8f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s070_output"
	    wget -O "n100.r02.s070_output/n100.r02.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s070_output/n100.r02.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s070_output/n100.r02.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s070_output/n100.r02.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s070_output/n100.r02.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s070_output/n100.r02.s070.reference.fas" "n100.r02.s070_output/n100.r02.s070.fq1.fastq" "n100.r02.s070_output/n100.r02.s070.fq2.fastq" | samtools view -bS - > "n100.r02.s070_output/n100.r02.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s070_output/n100.r02.s070.untrimmed.sorted.bam" "n100.r02.s070_output/n100.r02.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s070_output/n100.r02.s070.untrimmed.sorted.bam" -b "n100.r02.s070_output/n100.r02.s070.primers.bed" -p "n100.r02.s070_output/n100.r02.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" "n100.r02.s070_output/n100.r02.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s070_output/n100.r02.s070.reference.fas" "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" > "n100.r02.s070_output/n100.r02.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s070_output/n100.r02.s070.reference.fas" --call-indels "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" > "n100.r02.s070_output/n100.r02.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" > "n100.r02.s070_output/n100.r02.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s070_output/n100.r02.s070.depth.txt" "n100.r02.s070_output/n100.r02.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s070_output/n100.r02.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s070_output/n100.r02.s070.reference.fas" | bcftools consensus -m "n100.r02.s070_output/n100.r02.s070.low_depth.tsv" tmp.vcf.gz > "n100.r02.s070_output/n100.r02.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task a24d412d (flow fedce965): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:52 scheduler task a24d412d (flow fedce965): waiting for completion (try 0): started
2021/07/08 16:36:52  ->  n100.r02.s047.Main.out_file fedce965 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:52 n100.r02.s047.Main.out_file fedce965 n100/r02/n100.r02.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5e274690de3f0f3d0b4c93319f1f611af3c3001ee54cc39b85371c096640ed9f
	sha256:fedce965d03b91bdde7da5e3336ed28cd7c776a85f122816b58e8e7c00326432
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a24d412d43dac2cc555ad5068ee39d84194491e142eb4019ee5f05937a01c9b2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s047_output"
	    wget -O "n100.r02.s047_output/n100.r02.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s047_output/n100.r02.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s047_output/n100.r02.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s047_output/n100.r02.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s047_output/n100.r02.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s047_output/n100.r02.s047.reference.fas" "n100.r02.s047_output/n100.r02.s047.fq1.fastq" "n100.r02.s047_output/n100.r02.s047.fq2.fastq" | samtools view -bS - > "n100.r02.s047_output/n100.r02.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s047_output/n100.r02.s047.untrimmed.sorted.bam" "n100.r02.s047_output/n100.r02.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s047_output/n100.r02.s047.untrimmed.sorted.bam" -b "n100.r02.s047_output/n100.r02.s047.primers.bed" -p "n100.r02.s047_output/n100.r02.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" "n100.r02.s047_output/n100.r02.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s047_output/n100.r02.s047.reference.fas" "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" > "n100.r02.s047_output/n100.r02.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s047_output/n100.r02.s047.reference.fas" --call-indels "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" > "n100.r02.s047_output/n100.r02.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" > "n100.r02.s047_output/n100.r02.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s047_output/n100.r02.s047.depth.txt" "n100.r02.s047_output/n100.r02.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s047_output/n100.r02.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s047_output/n100.r02.s047.reference.fas" | bcftools consensus -m "n100.r02.s047_output/n100.r02.s047.low_depth.tsv" tmp.vcf.gz > "n100.r02.s047_output/n100.r02.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task d3ed6aad (flow dcb88340): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:52 scheduler task d3ed6aad (flow dcb88340): waiting for completion (try 0): started
2021/07/08 16:36:52  ->  n100.r02.s057.Main.out_file dcb88340 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:52 n100.r02.s057.Main.out_file dcb88340 n100/r02/n100.r02.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6045c7f67b53d417e04857f78f70ed41de9406346270c78ec50c5a5d30b61fbc
	sha256:dcb8834092fd5cba975f2f02c333751b33cd0f0b5dad1d7d4d7fed704462b6ec
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3ed6aad717dcd3fed76906bc4815d8e4b218a3204c9ed41bf5e5fff7e08e631
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s057_output"
	    wget -O "n100.r02.s057_output/n100.r02.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s057_output/n100.r02.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s057_output/n100.r02.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s057_output/n100.r02.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s057_output/n100.r02.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s057_output/n100.r02.s057.reference.fas" "n100.r02.s057_output/n100.r02.s057.fq1.fastq" "n100.r02.s057_output/n100.r02.s057.fq2.fastq" | samtools view -bS - > "n100.r02.s057_output/n100.r02.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s057_output/n100.r02.s057.untrimmed.sorted.bam" "n100.r02.s057_output/n100.r02.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s057_output/n100.r02.s057.untrimmed.sorted.bam" -b "n100.r02.s057_output/n100.r02.s057.primers.bed" -p "n100.r02.s057_output/n100.r02.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" "n100.r02.s057_output/n100.r02.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s057_output/n100.r02.s057.reference.fas" "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" > "n100.r02.s057_output/n100.r02.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s057_output/n100.r02.s057.reference.fas" --call-indels "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" > "n100.r02.s057_output/n100.r02.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" > "n100.r02.s057_output/n100.r02.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s057_output/n100.r02.s057.depth.txt" "n100.r02.s057_output/n100.r02.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s057_output/n100.r02.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s057_output/n100.r02.s057.reference.fas" | bcftools consensus -m "n100.r02.s057_output/n100.r02.s057.low_depth.tsv" tmp.vcf.gz > "n100.r02.s057_output/n100.r02.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task 3dadedef (flow 9abe98a2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:52 scheduler task 3dadedef (flow 9abe98a2): waiting for completion (try 0): started
2021/07/08 16:36:52  ->  n100.r02.s014.Main.out_file 9abe98a2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:52 n100.r02.s014.Main.out_file 9abe98a2 n100/r02/n100.r02.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:711af482758365818de625f15ab19278dd0ab1848262d18bb7446b4052cbe5cb
	sha256:9abe98a2f54a665f6c44bfe015c28ffb06a76bf32345ab7f6d0c94b0296a6430
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3dadedef04efabaaabe7488fed91a233a7fdfd8fd4d59ab97fd2a9d1262291ee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s014_output"
	    wget -O "n100.r02.s014_output/n100.r02.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s014_output/n100.r02.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s014_output/n100.r02.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s014_output/n100.r02.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s014_output/n100.r02.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s014_output/n100.r02.s014.reference.fas" "n100.r02.s014_output/n100.r02.s014.fq1.fastq" "n100.r02.s014_output/n100.r02.s014.fq2.fastq" | samtools view -bS - > "n100.r02.s014_output/n100.r02.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s014_output/n100.r02.s014.untrimmed.sorted.bam" "n100.r02.s014_output/n100.r02.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s014_output/n100.r02.s014.untrimmed.sorted.bam" -b "n100.r02.s014_output/n100.r02.s014.primers.bed" -p "n100.r02.s014_output/n100.r02.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" "n100.r02.s014_output/n100.r02.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s014_output/n100.r02.s014.reference.fas" "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" > "n100.r02.s014_output/n100.r02.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s014_output/n100.r02.s014.reference.fas" --call-indels "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" > "n100.r02.s014_output/n100.r02.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" > "n100.r02.s014_output/n100.r02.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s014_output/n100.r02.s014.depth.txt" "n100.r02.s014_output/n100.r02.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s014_output/n100.r02.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s014_output/n100.r02.s014.reference.fas" | bcftools consensus -m "n100.r02.s014_output/n100.r02.s014.low_depth.tsv" tmp.vcf.gz > "n100.r02.s014_output/n100.r02.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task 27e90d8b (flow d66c2225): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:52 scheduler task 27e90d8b (flow d66c2225): waiting for completion (try 0): started
2021/07/08 16:36:52  ->  n100.r02.s046.Main.out_file d66c2225 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:52 n100.r02.s046.Main.out_file d66c2225 n100/r02/n100.r02.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:361386e0be42cc4ba548ea2da847fac0f2ae7da31e8987908bf235a9159324ce
	sha256:d66c2225e9731a1a795977db9416f3fb4b53268859437a3fb806b6c9ad49d423
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27e90d8b65ae267eca8d2fa893623f84708be4f0d35bcc54303bd7e60b2f2942
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s046_output"
	    wget -O "n100.r02.s046_output/n100.r02.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s046_output/n100.r02.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s046_output/n100.r02.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s046_output/n100.r02.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s046_output/n100.r02.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s046_output/n100.r02.s046.reference.fas" "n100.r02.s046_output/n100.r02.s046.fq1.fastq" "n100.r02.s046_output/n100.r02.s046.fq2.fastq" | samtools view -bS - > "n100.r02.s046_output/n100.r02.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s046_output/n100.r02.s046.untrimmed.sorted.bam" "n100.r02.s046_output/n100.r02.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s046_output/n100.r02.s046.untrimmed.sorted.bam" -b "n100.r02.s046_output/n100.r02.s046.primers.bed" -p "n100.r02.s046_output/n100.r02.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" "n100.r02.s046_output/n100.r02.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s046_output/n100.r02.s046.reference.fas" "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" > "n100.r02.s046_output/n100.r02.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s046_output/n100.r02.s046.reference.fas" --call-indels "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" > "n100.r02.s046_output/n100.r02.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" > "n100.r02.s046_output/n100.r02.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s046_output/n100.r02.s046.depth.txt" "n100.r02.s046_output/n100.r02.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s046_output/n100.r02.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s046_output/n100.r02.s046.reference.fas" | bcftools consensus -m "n100.r02.s046_output/n100.r02.s046.low_depth.tsv" tmp.vcf.gz > "n100.r02.s046_output/n100.r02.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task b5b0895c (flow 5e121a68): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:52 scheduler task b5b0895c (flow 5e121a68): waiting for completion (try 0): started
2021/07/08 16:36:52  ->  n100.r02.s032.Main.out_file 5e121a68 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:52 n100.r02.s032.Main.out_file 5e121a68 n100/r02/n100.r02.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d9b880f97fd16c4bcc452feea37784799e0202647b62034d4fdad09c9e8178e
	sha256:5e121a6816af32486b71ca850549647bcec14a716945710a6e7523be0fe67c0b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5b0895cb94719f3770b348b4ee5cddee48baed1a28e53d532918c31f16b9995
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s032_output"
	    wget -O "n100.r02.s032_output/n100.r02.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s032_output/n100.r02.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s032_output/n100.r02.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s032_output/n100.r02.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s032_output/n100.r02.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s032_output/n100.r02.s032.reference.fas" "n100.r02.s032_output/n100.r02.s032.fq1.fastq" "n100.r02.s032_output/n100.r02.s032.fq2.fastq" | samtools view -bS - > "n100.r02.s032_output/n100.r02.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s032_output/n100.r02.s032.untrimmed.sorted.bam" "n100.r02.s032_output/n100.r02.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s032_output/n100.r02.s032.untrimmed.sorted.bam" -b "n100.r02.s032_output/n100.r02.s032.primers.bed" -p "n100.r02.s032_output/n100.r02.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" "n100.r02.s032_output/n100.r02.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s032_output/n100.r02.s032.reference.fas" "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" > "n100.r02.s032_output/n100.r02.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s032_output/n100.r02.s032.reference.fas" --call-indels "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" > "n100.r02.s032_output/n100.r02.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" > "n100.r02.s032_output/n100.r02.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s032_output/n100.r02.s032.depth.txt" "n100.r02.s032_output/n100.r02.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s032_output/n100.r02.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s032_output/n100.r02.s032.reference.fas" | bcftools consensus -m "n100.r02.s032_output/n100.r02.s032.low_depth.tsv" tmp.vcf.gz > "n100.r02.s032_output/n100.r02.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:52 scheduler task c2690bb6 (flow c8530bd3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task c2690bb6 (flow c8530bd3): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s071.Main.out_file c8530bd3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s071.Main.out_file c8530bd3 n100/r02/n100.r02.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cade3489f4805f9cd6997341cd73c1934a6f8b754eb7bc1026991447e58ef51c
	sha256:c8530bd333ad59ed2337c36d40158125504314cc8b550face8cce5ee31c72ee7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c2690bb603a31cb84ea1ef44d61f2691520fea68b1866d6052c8d25ac6076460
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s071_output"
	    wget -O "n100.r02.s071_output/n100.r02.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s071_output/n100.r02.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s071_output/n100.r02.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s071_output/n100.r02.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s071_output/n100.r02.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s071_output/n100.r02.s071.reference.fas" "n100.r02.s071_output/n100.r02.s071.fq1.fastq" "n100.r02.s071_output/n100.r02.s071.fq2.fastq" | samtools view -bS - > "n100.r02.s071_output/n100.r02.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s071_output/n100.r02.s071.untrimmed.sorted.bam" "n100.r02.s071_output/n100.r02.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s071_output/n100.r02.s071.untrimmed.sorted.bam" -b "n100.r02.s071_output/n100.r02.s071.primers.bed" -p "n100.r02.s071_output/n100.r02.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" "n100.r02.s071_output/n100.r02.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s071_output/n100.r02.s071.reference.fas" "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" > "n100.r02.s071_output/n100.r02.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s071_output/n100.r02.s071.reference.fas" --call-indels "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" > "n100.r02.s071_output/n100.r02.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" > "n100.r02.s071_output/n100.r02.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s071_output/n100.r02.s071.depth.txt" "n100.r02.s071_output/n100.r02.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s071_output/n100.r02.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s071_output/n100.r02.s071.reference.fas" | bcftools consensus -m "n100.r02.s071_output/n100.r02.s071.low_depth.tsv" tmp.vcf.gz > "n100.r02.s071_output/n100.r02.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:53 scheduler task 7018ad68 (flow 0cad19f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task 7018ad68 (flow 0cad19f3): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s099.Main.out_file 0cad19f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s099.Main.out_file 0cad19f3 n100/r02/n100.r02.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fabb51ac1b6a7b7c522336fb96706e5cb5bb69332b13c826994dd7f024cff3d9
	sha256:0cad19f3bde85f0919aabec6ccaef703a8fd15c48aa50ab5f85641a817009b83
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7018ad6827db5f3b95b69f9880645353d8b2d7a4297903753e303a5e8dea9d22
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s099_output"
	    wget -O "n100.r02.s099_output/n100.r02.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s099_output/n100.r02.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s099_output/n100.r02.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s099_output/n100.r02.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s099_output/n100.r02.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s099_output/n100.r02.s099.reference.fas" "n100.r02.s099_output/n100.r02.s099.fq1.fastq" "n100.r02.s099_output/n100.r02.s099.fq2.fastq" | samtools view -bS - > "n100.r02.s099_output/n100.r02.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s099_output/n100.r02.s099.untrimmed.sorted.bam" "n100.r02.s099_output/n100.r02.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s099_output/n100.r02.s099.untrimmed.sorted.bam" -b "n100.r02.s099_output/n100.r02.s099.primers.bed" -p "n100.r02.s099_output/n100.r02.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" "n100.r02.s099_output/n100.r02.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s099_output/n100.r02.s099.reference.fas" "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" > "n100.r02.s099_output/n100.r02.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s099_output/n100.r02.s099.reference.fas" --call-indels "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" > "n100.r02.s099_output/n100.r02.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" > "n100.r02.s099_output/n100.r02.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s099_output/n100.r02.s099.depth.txt" "n100.r02.s099_output/n100.r02.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s099_output/n100.r02.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s099_output/n100.r02.s099.reference.fas" | bcftools consensus -m "n100.r02.s099_output/n100.r02.s099.low_depth.tsv" tmp.vcf.gz > "n100.r02.s099_output/n100.r02.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:53 scheduler task 8062f0aa (flow 1d767038): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task 8062f0aa (flow 1d767038): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s003.Main.out_file 1d767038 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s003.Main.out_file 1d767038 n100/r02/n100.r02.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:622956fdd822eeca205502f5f9dc4b2f16d2cdb4a3d9c4a2a6b0810bec20a6ce
	sha256:1d767038945f1b93b776a00a1b2c42ab71a6091d5e5f39f90326824c8df83e67
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8062f0aa070f9b27b8878d477e60cbbfce89d71aa9e8091c334ad3564691f4fe
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s003_output"
	    wget -O "n100.r02.s003_output/n100.r02.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s003_output/n100.r02.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s003_output/n100.r02.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s003_output/n100.r02.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s003_output/n100.r02.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s003_output/n100.r02.s003.reference.fas" "n100.r02.s003_output/n100.r02.s003.fq1.fastq" "n100.r02.s003_output/n100.r02.s003.fq2.fastq" | samtools view -bS - > "n100.r02.s003_output/n100.r02.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s003_output/n100.r02.s003.untrimmed.sorted.bam" "n100.r02.s003_output/n100.r02.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s003_output/n100.r02.s003.untrimmed.sorted.bam" -b "n100.r02.s003_output/n100.r02.s003.primers.bed" -p "n100.r02.s003_output/n100.r02.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" "n100.r02.s003_output/n100.r02.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s003_output/n100.r02.s003.reference.fas" "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" > "n100.r02.s003_output/n100.r02.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s003_output/n100.r02.s003.reference.fas" --call-indels "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" > "n100.r02.s003_output/n100.r02.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" > "n100.r02.s003_output/n100.r02.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s003_output/n100.r02.s003.depth.txt" "n100.r02.s003_output/n100.r02.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s003_output/n100.r02.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s003_output/n100.r02.s003.reference.fas" | bcftools consensus -m "n100.r02.s003_output/n100.r02.s003.low_depth.tsv" tmp.vcf.gz > "n100.r02.s003_output/n100.r02.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:53 scheduler task 56e751ca (flow 4e926108): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task 56e751ca (flow 4e926108): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s037.Main.out_file 4e926108 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s037.Main.out_file 4e926108 n100/r02/n100.r02.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52f36f7ecfb47e8fc60059bf97d8900adb618af2837a17d83b12ed9f7b569bc0
	sha256:4e926108dc7ebad401eb79efedffa4a5ba5663585332a56364b1bd95a41e6083
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/56e751ca614f1c4c11612eec68c772ca6ca9039016ab28d148332133f507c0ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s037_output"
	    wget -O "n100.r02.s037_output/n100.r02.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s037_output/n100.r02.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s037_output/n100.r02.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s037_output/n100.r02.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s037_output/n100.r02.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s037_output/n100.r02.s037.reference.fas" "n100.r02.s037_output/n100.r02.s037.fq1.fastq" "n100.r02.s037_output/n100.r02.s037.fq2.fastq" | samtools view -bS - > "n100.r02.s037_output/n100.r02.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s037_output/n100.r02.s037.untrimmed.sorted.bam" "n100.r02.s037_output/n100.r02.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s037_output/n100.r02.s037.untrimmed.sorted.bam" -b "n100.r02.s037_output/n100.r02.s037.primers.bed" -p "n100.r02.s037_output/n100.r02.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" "n100.r02.s037_output/n100.r02.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s037_output/n100.r02.s037.reference.fas" "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" > "n100.r02.s037_output/n100.r02.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s037_output/n100.r02.s037.reference.fas" --call-indels "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" > "n100.r02.s037_output/n100.r02.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" > "n100.r02.s037_output/n100.r02.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s037_output/n100.r02.s037.depth.txt" "n100.r02.s037_output/n100.r02.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s037_output/n100.r02.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s037_output/n100.r02.s037.reference.fas" | bcftools consensus -m "n100.r02.s037_output/n100.r02.s037.low_depth.tsv" tmp.vcf.gz > "n100.r02.s037_output/n100.r02.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:53 scheduler task 68d632e0 (flow e0a7fa8c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task 68d632e0 (flow e0a7fa8c): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s060.Main.out_file e0a7fa8c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s060.Main.out_file e0a7fa8c n100/r02/n100.r02.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ff24994014e44a006c46e2f5dd0374709cfc4694044d04e2d485457186c3d46d
	sha256:e0a7fa8c8a09d7e3d4694892aaa03244983f5c3a22756fbfe6abd037b0f56d4b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/68d632e09861b772b0018d5f7bab090a69817578621a072d9fc9dce0b26bc007
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s060_output"
	    wget -O "n100.r02.s060_output/n100.r02.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s060_output/n100.r02.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s060_output/n100.r02.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s060_output/n100.r02.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s060_output/n100.r02.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s060_output/n100.r02.s060.reference.fas" "n100.r02.s060_output/n100.r02.s060.fq1.fastq" "n100.r02.s060_output/n100.r02.s060.fq2.fastq" | samtools view -bS - > "n100.r02.s060_output/n100.r02.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s060_output/n100.r02.s060.untrimmed.sorted.bam" "n100.r02.s060_output/n100.r02.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s060_output/n100.r02.s060.untrimmed.sorted.bam" -b "n100.r02.s060_output/n100.r02.s060.primers.bed" -p "n100.r02.s060_output/n100.r02.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" "n100.r02.s060_output/n100.r02.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s060_output/n100.r02.s060.reference.fas" "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" > "n100.r02.s060_output/n100.r02.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s060_output/n100.r02.s060.reference.fas" --call-indels "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" > "n100.r02.s060_output/n100.r02.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" > "n100.r02.s060_output/n100.r02.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s060_output/n100.r02.s060.depth.txt" "n100.r02.s060_output/n100.r02.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s060_output/n100.r02.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s060_output/n100.r02.s060.reference.fas" | bcftools consensus -m "n100.r02.s060_output/n100.r02.s060.low_depth.tsv" tmp.vcf.gz > "n100.r02.s060_output/n100.r02.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:53 scheduler task 3e9c9b76 (flow f2f62b67): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task 3e9c9b76 (flow f2f62b67): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s042.Main.out_file f2f62b67 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s042.Main.out_file f2f62b67 n100/r02/n100.r02.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8912c8a1f93c05d2e1ce2b29c1e0dbe57066e40f9460eac69d2a55b8419bffa7
	sha256:f2f62b67e11a84fb0480b45282cdf543e275810c7fb9de2a67e599a2729a2b8d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3e9c9b76663b3b2031d763aef81c4cc960742810bc1a99fe33601104bd80c1d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s042_output"
	    wget -O "n100.r02.s042_output/n100.r02.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s042_output/n100.r02.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s042_output/n100.r02.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s042_output/n100.r02.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s042_output/n100.r02.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s042_output/n100.r02.s042.reference.fas" "n100.r02.s042_output/n100.r02.s042.fq1.fastq" "n100.r02.s042_output/n100.r02.s042.fq2.fastq" | samtools view -bS - > "n100.r02.s042_output/n100.r02.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s042_output/n100.r02.s042.untrimmed.sorted.bam" "n100.r02.s042_output/n100.r02.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s042_output/n100.r02.s042.untrimmed.sorted.bam" -b "n100.r02.s042_output/n100.r02.s042.primers.bed" -p "n100.r02.s042_output/n100.r02.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" "n100.r02.s042_output/n100.r02.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s042_output/n100.r02.s042.reference.fas" "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" > "n100.r02.s042_output/n100.r02.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s042_output/n100.r02.s042.reference.fas" --call-indels "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" > "n100.r02.s042_output/n100.r02.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" > "n100.r02.s042_output/n100.r02.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s042_output/n100.r02.s042.depth.txt" "n100.r02.s042_output/n100.r02.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s042_output/n100.r02.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s042_output/n100.r02.s042.reference.fas" | bcftools consensus -m "n100.r02.s042_output/n100.r02.s042.low_depth.tsv" tmp.vcf.gz > "n100.r02.s042_output/n100.r02.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:53 scheduler task 8e4c2298 (flow 95b427ce): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:53 scheduler task 8e4c2298 (flow 95b427ce): waiting for completion (try 0): started
2021/07/08 16:36:53  ->  n100.r02.s077.Main.out_file 95b427ce exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:53 n100.r02.s077.Main.out_file 95b427ce n100/r02/n100.r02.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a27c2ed3cab8360bebe5e94c42ef0abb6f4773130c23902ea667f489da7b213
	sha256:95b427ce024b27184b09b17fc844aa09fc58f5ae41e2c05864f16cc4a261123b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8e4c2298d6fbd1870a117d1134f23ca01689a33b1b8ee3b728102c1a3fb96227
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s077_output"
	    wget -O "n100.r02.s077_output/n100.r02.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s077_output/n100.r02.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s077_output/n100.r02.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s077_output/n100.r02.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s077_output/n100.r02.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s077_output/n100.r02.s077.reference.fas" "n100.r02.s077_output/n100.r02.s077.fq1.fastq" "n100.r02.s077_output/n100.r02.s077.fq2.fastq" | samtools view -bS - > "n100.r02.s077_output/n100.r02.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s077_output/n100.r02.s077.untrimmed.sorted.bam" "n100.r02.s077_output/n100.r02.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s077_output/n100.r02.s077.untrimmed.sorted.bam" -b "n100.r02.s077_output/n100.r02.s077.primers.bed" -p "n100.r02.s077_output/n100.r02.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" "n100.r02.s077_output/n100.r02.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s077_output/n100.r02.s077.reference.fas" "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" > "n100.r02.s077_output/n100.r02.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s077_output/n100.r02.s077.reference.fas" --call-indels "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" > "n100.r02.s077_output/n100.r02.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" > "n100.r02.s077_output/n100.r02.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s077_output/n100.r02.s077.depth.txt" "n100.r02.s077_output/n100.r02.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s077_output/n100.r02.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s077_output/n100.r02.s077.reference.fas" | bcftools consensus -m "n100.r02.s077_output/n100.r02.s077.low_depth.tsv" tmp.vcf.gz > "n100.r02.s077_output/n100.r02.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task 7e9cd126 (flow ac5dc48d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task 7e9cd126 (flow ac5dc48d): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s096.Main.out_file ac5dc48d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s096.Main.out_file ac5dc48d n100/r02/n100.r02.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d9008ad86d39831d600be07ae95dda9dded12525142101b8325045b5d4a38804
	sha256:ac5dc48d92e7d67f30c6795d4dfb1cfa96c9ca77548ebae5ab39f731a8eddd8d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7e9cd126f4bbfce16bd719e50a8aa14279224c9d529653ef9875b8734e51dd9a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s096_output"
	    wget -O "n100.r02.s096_output/n100.r02.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s096_output/n100.r02.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s096_output/n100.r02.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s096_output/n100.r02.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s096_output/n100.r02.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s096_output/n100.r02.s096.reference.fas" "n100.r02.s096_output/n100.r02.s096.fq1.fastq" "n100.r02.s096_output/n100.r02.s096.fq2.fastq" | samtools view -bS - > "n100.r02.s096_output/n100.r02.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s096_output/n100.r02.s096.untrimmed.sorted.bam" "n100.r02.s096_output/n100.r02.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s096_output/n100.r02.s096.untrimmed.sorted.bam" -b "n100.r02.s096_output/n100.r02.s096.primers.bed" -p "n100.r02.s096_output/n100.r02.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" "n100.r02.s096_output/n100.r02.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s096_output/n100.r02.s096.reference.fas" "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" > "n100.r02.s096_output/n100.r02.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s096_output/n100.r02.s096.reference.fas" --call-indels "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" > "n100.r02.s096_output/n100.r02.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" > "n100.r02.s096_output/n100.r02.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s096_output/n100.r02.s096.depth.txt" "n100.r02.s096_output/n100.r02.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s096_output/n100.r02.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s096_output/n100.r02.s096.reference.fas" | bcftools consensus -m "n100.r02.s096_output/n100.r02.s096.low_depth.tsv" tmp.vcf.gz > "n100.r02.s096_output/n100.r02.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task fbd9cfd4 (flow f8af3684): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task fbd9cfd4 (flow f8af3684): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s020.Main.out_file f8af3684 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s020.Main.out_file f8af3684 n100/r02/n100.r02.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42ecb79718a9da2b33a96152c6f413c6bac7176d03cff30c1e19dd4883fa60ba
	sha256:f8af3684f25fd94e049ec9410aa2bc8b71274e7b90953740d28d5ed078ef4d97
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fbd9cfd4449f966b263387fec0ae35f44c9222e90b77fa77a6534482f5c6732b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s020_output"
	    wget -O "n100.r02.s020_output/n100.r02.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s020_output/n100.r02.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s020_output/n100.r02.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s020_output/n100.r02.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s020_output/n100.r02.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s020_output/n100.r02.s020.reference.fas" "n100.r02.s020_output/n100.r02.s020.fq1.fastq" "n100.r02.s020_output/n100.r02.s020.fq2.fastq" | samtools view -bS - > "n100.r02.s020_output/n100.r02.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s020_output/n100.r02.s020.untrimmed.sorted.bam" "n100.r02.s020_output/n100.r02.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s020_output/n100.r02.s020.untrimmed.sorted.bam" -b "n100.r02.s020_output/n100.r02.s020.primers.bed" -p "n100.r02.s020_output/n100.r02.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" "n100.r02.s020_output/n100.r02.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s020_output/n100.r02.s020.reference.fas" "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" > "n100.r02.s020_output/n100.r02.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s020_output/n100.r02.s020.reference.fas" --call-indels "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" > "n100.r02.s020_output/n100.r02.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" > "n100.r02.s020_output/n100.r02.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s020_output/n100.r02.s020.depth.txt" "n100.r02.s020_output/n100.r02.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s020_output/n100.r02.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s020_output/n100.r02.s020.reference.fas" | bcftools consensus -m "n100.r02.s020_output/n100.r02.s020.low_depth.tsv" tmp.vcf.gz > "n100.r02.s020_output/n100.r02.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task c73cacdd (flow c37abb9e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task c73cacdd (flow c37abb9e): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s012.Main.out_file c37abb9e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s012.Main.out_file c37abb9e n100/r02/n100.r02.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ee71f202101f630746f5eee9ba3ff39d49f0e059d4f774c5421e851eaf093bcd
	sha256:c37abb9ed73f00e53be221d8ff9744a09ab7953388f03b2514e5e5d5761497f7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c73cacdd42002d08fa2b59724191807eecaf7503e2566fe27c26b6546cc031e5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s012_output"
	    wget -O "n100.r02.s012_output/n100.r02.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s012_output/n100.r02.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s012_output/n100.r02.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s012_output/n100.r02.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s012_output/n100.r02.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s012_output/n100.r02.s012.reference.fas" "n100.r02.s012_output/n100.r02.s012.fq1.fastq" "n100.r02.s012_output/n100.r02.s012.fq2.fastq" | samtools view -bS - > "n100.r02.s012_output/n100.r02.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s012_output/n100.r02.s012.untrimmed.sorted.bam" "n100.r02.s012_output/n100.r02.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s012_output/n100.r02.s012.untrimmed.sorted.bam" -b "n100.r02.s012_output/n100.r02.s012.primers.bed" -p "n100.r02.s012_output/n100.r02.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" "n100.r02.s012_output/n100.r02.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s012_output/n100.r02.s012.reference.fas" "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" > "n100.r02.s012_output/n100.r02.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s012_output/n100.r02.s012.reference.fas" --call-indels "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" > "n100.r02.s012_output/n100.r02.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" > "n100.r02.s012_output/n100.r02.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s012_output/n100.r02.s012.depth.txt" "n100.r02.s012_output/n100.r02.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s012_output/n100.r02.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s012_output/n100.r02.s012.reference.fas" | bcftools consensus -m "n100.r02.s012_output/n100.r02.s012.low_depth.tsv" tmp.vcf.gz > "n100.r02.s012_output/n100.r02.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task d8e5f7d3 (flow 7ba184b6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task d8e5f7d3 (flow 7ba184b6): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s029.Main.out_file 7ba184b6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s029.Main.out_file 7ba184b6 n100/r02/n100.r02.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8c076b62b1f215d8d77f88744b4bcd3b6f84d670b4c7fff7f5f7b600fb596c49
	sha256:7ba184b6205983cf7c3198022b930c4b2831914e678e93a789317d412da85170
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d8e5f7d3d0f3012654e3949664c62becf3907866d7f3300b2e39673da72b7447
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s029_output"
	    wget -O "n100.r02.s029_output/n100.r02.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s029_output/n100.r02.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s029_output/n100.r02.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s029_output/n100.r02.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s029_output/n100.r02.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s029_output/n100.r02.s029.reference.fas" "n100.r02.s029_output/n100.r02.s029.fq1.fastq" "n100.r02.s029_output/n100.r02.s029.fq2.fastq" | samtools view -bS - > "n100.r02.s029_output/n100.r02.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s029_output/n100.r02.s029.untrimmed.sorted.bam" "n100.r02.s029_output/n100.r02.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s029_output/n100.r02.s029.untrimmed.sorted.bam" -b "n100.r02.s029_output/n100.r02.s029.primers.bed" -p "n100.r02.s029_output/n100.r02.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" "n100.r02.s029_output/n100.r02.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s029_output/n100.r02.s029.reference.fas" "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" > "n100.r02.s029_output/n100.r02.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s029_output/n100.r02.s029.reference.fas" --call-indels "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" > "n100.r02.s029_output/n100.r02.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" > "n100.r02.s029_output/n100.r02.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s029_output/n100.r02.s029.depth.txt" "n100.r02.s029_output/n100.r02.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s029_output/n100.r02.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s029_output/n100.r02.s029.reference.fas" | bcftools consensus -m "n100.r02.s029_output/n100.r02.s029.low_depth.tsv" tmp.vcf.gz > "n100.r02.s029_output/n100.r02.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task 5ed6a8f0 (flow d1a20a99): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task 5ed6a8f0 (flow d1a20a99): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s075.Main.out_file d1a20a99 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s075.Main.out_file d1a20a99 n100/r02/n100.r02.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5cc875ec08e7039975d3ddd1dfb9870e7a752575990f13c3eb95911cb3801b6
	sha256:d1a20a99392ebcc96c4a740ca6547bbcd874222e4c6d37981d9f3dbf2bd4e7a8
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ed6a8f03319796520aca57a3e69c2bdd51c400ef1937f23559c36cf03694591
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s075_output"
	    wget -O "n100.r02.s075_output/n100.r02.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s075_output/n100.r02.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s075_output/n100.r02.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s075_output/n100.r02.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s075_output/n100.r02.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s075_output/n100.r02.s075.reference.fas" "n100.r02.s075_output/n100.r02.s075.fq1.fastq" "n100.r02.s075_output/n100.r02.s075.fq2.fastq" | samtools view -bS - > "n100.r02.s075_output/n100.r02.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s075_output/n100.r02.s075.untrimmed.sorted.bam" "n100.r02.s075_output/n100.r02.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s075_output/n100.r02.s075.untrimmed.sorted.bam" -b "n100.r02.s075_output/n100.r02.s075.primers.bed" -p "n100.r02.s075_output/n100.r02.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" "n100.r02.s075_output/n100.r02.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s075_output/n100.r02.s075.reference.fas" "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" > "n100.r02.s075_output/n100.r02.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s075_output/n100.r02.s075.reference.fas" --call-indels "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" > "n100.r02.s075_output/n100.r02.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" > "n100.r02.s075_output/n100.r02.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s075_output/n100.r02.s075.depth.txt" "n100.r02.s075_output/n100.r02.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s075_output/n100.r02.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s075_output/n100.r02.s075.reference.fas" | bcftools consensus -m "n100.r02.s075_output/n100.r02.s075.low_depth.tsv" tmp.vcf.gz > "n100.r02.s075_output/n100.r02.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task 9b70412c (flow e085395a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task 9b70412c (flow e085395a): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s089.Main.out_file e085395a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s089.Main.out_file e085395a n100/r02/n100.r02.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2a771228a4db8b0b78a6e952629292839e32ae13a001be394cbe1809a47d4bca
	sha256:e085395a99eb4bb921fc7f248e774dda7a173c5bd2956caba3e1d60600741c2e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9b70412c7fc8212dde0e014da86f7b80bfa5011164471c8fed17a5627d3bb1c4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s089_output"
	    wget -O "n100.r02.s089_output/n100.r02.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s089_output/n100.r02.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s089_output/n100.r02.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s089_output/n100.r02.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s089_output/n100.r02.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s089_output/n100.r02.s089.reference.fas" "n100.r02.s089_output/n100.r02.s089.fq1.fastq" "n100.r02.s089_output/n100.r02.s089.fq2.fastq" | samtools view -bS - > "n100.r02.s089_output/n100.r02.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s089_output/n100.r02.s089.untrimmed.sorted.bam" "n100.r02.s089_output/n100.r02.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s089_output/n100.r02.s089.untrimmed.sorted.bam" -b "n100.r02.s089_output/n100.r02.s089.primers.bed" -p "n100.r02.s089_output/n100.r02.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" "n100.r02.s089_output/n100.r02.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s089_output/n100.r02.s089.reference.fas" "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" > "n100.r02.s089_output/n100.r02.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s089_output/n100.r02.s089.reference.fas" --call-indels "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" > "n100.r02.s089_output/n100.r02.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" > "n100.r02.s089_output/n100.r02.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s089_output/n100.r02.s089.depth.txt" "n100.r02.s089_output/n100.r02.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s089_output/n100.r02.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s089_output/n100.r02.s089.reference.fas" | bcftools consensus -m "n100.r02.s089_output/n100.r02.s089.low_depth.tsv" tmp.vcf.gz > "n100.r02.s089_output/n100.r02.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:54 scheduler task 080dc6e3 (flow a028a3dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:54 scheduler task 080dc6e3 (flow a028a3dc): waiting for completion (try 0): started
2021/07/08 16:36:54  ->  n100.r02.s006.Main.out_file a028a3dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:54 n100.r02.s006.Main.out_file a028a3dc n100/r02/n100.r02.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b61f639d8bd7917f567a85c4b0ffdf9df6555880f0e830cf8788253cbd54dbd
	sha256:a028a3dcda68f8af83193653627ab37731616ad2715d1eb9a42e92bb1792d3fd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/080dc6e346f02b25a52c034162464bb3c7b50967ee38542babdb5f4785b51403
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s006_output"
	    wget -O "n100.r02.s006_output/n100.r02.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s006_output/n100.r02.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s006_output/n100.r02.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s006_output/n100.r02.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s006_output/n100.r02.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s006_output/n100.r02.s006.reference.fas" "n100.r02.s006_output/n100.r02.s006.fq1.fastq" "n100.r02.s006_output/n100.r02.s006.fq2.fastq" | samtools view -bS - > "n100.r02.s006_output/n100.r02.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s006_output/n100.r02.s006.untrimmed.sorted.bam" "n100.r02.s006_output/n100.r02.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s006_output/n100.r02.s006.untrimmed.sorted.bam" -b "n100.r02.s006_output/n100.r02.s006.primers.bed" -p "n100.r02.s006_output/n100.r02.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" "n100.r02.s006_output/n100.r02.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s006_output/n100.r02.s006.reference.fas" "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" > "n100.r02.s006_output/n100.r02.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s006_output/n100.r02.s006.reference.fas" --call-indels "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" > "n100.r02.s006_output/n100.r02.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" > "n100.r02.s006_output/n100.r02.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s006_output/n100.r02.s006.depth.txt" "n100.r02.s006_output/n100.r02.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s006_output/n100.r02.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s006_output/n100.r02.s006.reference.fas" | bcftools consensus -m "n100.r02.s006_output/n100.r02.s006.low_depth.tsv" tmp.vcf.gz > "n100.r02.s006_output/n100.r02.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:55 scheduler task 7d3bc912 (flow e2236b63): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:55 scheduler task 7d3bc912 (flow e2236b63): waiting for completion (try 0): started
2021/07/08 16:36:55  ->  n100.r02.s052.Main.out_file e2236b63 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:55 n100.r02.s052.Main.out_file e2236b63 n100/r02/n100.r02.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b57f204e930e0b266604017eae200509019becaa840d0e7266fc4abfe1fc28f1
	sha256:e2236b6308602aa37a8d4397c13b75299d766230c60626e15ff66c84284de098
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7d3bc912fb28f825fcd377aa6eb0f421cd823314229253ff739b47b67bc0b79d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s052_output"
	    wget -O "n100.r02.s052_output/n100.r02.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s052_output/n100.r02.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s052_output/n100.r02.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s052_output/n100.r02.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s052_output/n100.r02.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s052_output/n100.r02.s052.reference.fas" "n100.r02.s052_output/n100.r02.s052.fq1.fastq" "n100.r02.s052_output/n100.r02.s052.fq2.fastq" | samtools view -bS - > "n100.r02.s052_output/n100.r02.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s052_output/n100.r02.s052.untrimmed.sorted.bam" "n100.r02.s052_output/n100.r02.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s052_output/n100.r02.s052.untrimmed.sorted.bam" -b "n100.r02.s052_output/n100.r02.s052.primers.bed" -p "n100.r02.s052_output/n100.r02.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" "n100.r02.s052_output/n100.r02.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s052_output/n100.r02.s052.reference.fas" "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" > "n100.r02.s052_output/n100.r02.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s052_output/n100.r02.s052.reference.fas" --call-indels "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" > "n100.r02.s052_output/n100.r02.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" > "n100.r02.s052_output/n100.r02.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s052_output/n100.r02.s052.depth.txt" "n100.r02.s052_output/n100.r02.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s052_output/n100.r02.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s052_output/n100.r02.s052.reference.fas" | bcftools consensus -m "n100.r02.s052_output/n100.r02.s052.low_depth.tsv" tmp.vcf.gz > "n100.r02.s052_output/n100.r02.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:55 scheduler task 0d089343 (flow e6ad34ee): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:55 scheduler task 0d089343 (flow e6ad34ee): waiting for completion (try 0): started
2021/07/08 16:36:55  ->  n100.r02.s038.Main.out_file e6ad34ee exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:55 n100.r02.s038.Main.out_file e6ad34ee n100/r02/n100.r02.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27280c9993282c7711a18b4d579d8983317a634c6ab27c11f7c31f540623ecf2
	sha256:e6ad34ee6f2da713be7c4dc8c2ce6809832a46b7e9e84929cff4c8a0a3993312
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d08934355141995591d1e311bd1e19fd32dbb33c95f3ef5681489e279791f59
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s038_output"
	    wget -O "n100.r02.s038_output/n100.r02.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s038_output/n100.r02.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s038_output/n100.r02.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s038_output/n100.r02.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s038_output/n100.r02.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s038_output/n100.r02.s038.reference.fas" "n100.r02.s038_output/n100.r02.s038.fq1.fastq" "n100.r02.s038_output/n100.r02.s038.fq2.fastq" | samtools view -bS - > "n100.r02.s038_output/n100.r02.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s038_output/n100.r02.s038.untrimmed.sorted.bam" "n100.r02.s038_output/n100.r02.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s038_output/n100.r02.s038.untrimmed.sorted.bam" -b "n100.r02.s038_output/n100.r02.s038.primers.bed" -p "n100.r02.s038_output/n100.r02.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" "n100.r02.s038_output/n100.r02.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s038_output/n100.r02.s038.reference.fas" "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" > "n100.r02.s038_output/n100.r02.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s038_output/n100.r02.s038.reference.fas" --call-indels "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" > "n100.r02.s038_output/n100.r02.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" > "n100.r02.s038_output/n100.r02.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s038_output/n100.r02.s038.depth.txt" "n100.r02.s038_output/n100.r02.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s038_output/n100.r02.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s038_output/n100.r02.s038.reference.fas" | bcftools consensus -m "n100.r02.s038_output/n100.r02.s038.low_depth.tsv" tmp.vcf.gz > "n100.r02.s038_output/n100.r02.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:55 scheduler task da6be570 (flow aae2ca1c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:55 scheduler task da6be570 (flow aae2ca1c): waiting for completion (try 0): started
2021/07/08 16:36:55  ->  n100.r02.s084.Main.out_file aae2ca1c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:55 n100.r02.s084.Main.out_file aae2ca1c n100/r02/n100.r02.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae1ebf0bac1e1996f1a451a539ae9fc584da40f7236176672ce33cb091faab41
	sha256:aae2ca1c11b1ce7db63c16a1373aeabb509e1c0ae373cce9ce69ec9ef5471646
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/da6be5709285849fc81772882eb9f81de96db455711ddb6d7b41fa519dc763e2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s084_output"
	    wget -O "n100.r02.s084_output/n100.r02.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s084_output/n100.r02.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s084_output/n100.r02.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s084_output/n100.r02.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s084_output/n100.r02.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s084_output/n100.r02.s084.reference.fas" "n100.r02.s084_output/n100.r02.s084.fq1.fastq" "n100.r02.s084_output/n100.r02.s084.fq2.fastq" | samtools view -bS - > "n100.r02.s084_output/n100.r02.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s084_output/n100.r02.s084.untrimmed.sorted.bam" "n100.r02.s084_output/n100.r02.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s084_output/n100.r02.s084.untrimmed.sorted.bam" -b "n100.r02.s084_output/n100.r02.s084.primers.bed" -p "n100.r02.s084_output/n100.r02.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" "n100.r02.s084_output/n100.r02.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s084_output/n100.r02.s084.reference.fas" "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" > "n100.r02.s084_output/n100.r02.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s084_output/n100.r02.s084.reference.fas" --call-indels "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" > "n100.r02.s084_output/n100.r02.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" > "n100.r02.s084_output/n100.r02.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s084_output/n100.r02.s084.depth.txt" "n100.r02.s084_output/n100.r02.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s084_output/n100.r02.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s084_output/n100.r02.s084.reference.fas" | bcftools consensus -m "n100.r02.s084_output/n100.r02.s084.low_depth.tsv" tmp.vcf.gz > "n100.r02.s084_output/n100.r02.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:55 scheduler task bb07980b (flow b78d6362): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:55 scheduler task bb07980b (flow b78d6362): waiting for completion (try 0): started
2021/07/08 16:36:55  ->  n100.r02.s002.Main.out_file b78d6362 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:55 n100.r02.s002.Main.out_file b78d6362 n100/r02/n100.r02.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ab4b8e60f9529da6703e901fcd13ca2930f33c5cf0fd46998597ac1fa500373
	sha256:b78d63626af3a7968f35491eb8a7383dc8643da70926a3d162658778794c3647
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb07980b7c72fd7e7bdfc18dade3731bf7b4d19fda9e7b390ac096d9b24d7981
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s002_output"
	    wget -O "n100.r02.s002_output/n100.r02.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s002_output/n100.r02.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s002_output/n100.r02.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s002_output/n100.r02.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s002_output/n100.r02.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s002_output/n100.r02.s002.reference.fas" "n100.r02.s002_output/n100.r02.s002.fq1.fastq" "n100.r02.s002_output/n100.r02.s002.fq2.fastq" | samtools view -bS - > "n100.r02.s002_output/n100.r02.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s002_output/n100.r02.s002.untrimmed.sorted.bam" "n100.r02.s002_output/n100.r02.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s002_output/n100.r02.s002.untrimmed.sorted.bam" -b "n100.r02.s002_output/n100.r02.s002.primers.bed" -p "n100.r02.s002_output/n100.r02.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" "n100.r02.s002_output/n100.r02.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s002_output/n100.r02.s002.reference.fas" "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" > "n100.r02.s002_output/n100.r02.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s002_output/n100.r02.s002.reference.fas" --call-indels "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" > "n100.r02.s002_output/n100.r02.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" > "n100.r02.s002_output/n100.r02.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s002_output/n100.r02.s002.depth.txt" "n100.r02.s002_output/n100.r02.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s002_output/n100.r02.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s002_output/n100.r02.s002.reference.fas" | bcftools consensus -m "n100.r02.s002_output/n100.r02.s002.low_depth.tsv" tmp.vcf.gz > "n100.r02.s002_output/n100.r02.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:55 scheduler task 227b4998 (flow 498981df): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:55 scheduler task 227b4998 (flow 498981df): waiting for completion (try 0): started
2021/07/08 16:36:55  ->  n100.r02.s005.Main.out_file 498981df exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:55 n100.r02.s005.Main.out_file 498981df n100/r02/n100.r02.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ea18b9389b3b6dab5ac0c4517b6a9653a66245b4115c206bcc4f152c51a18664
	sha256:498981dfa35a5687cdbf97128bfebea3ca8ac200979008d641fb623955c73e2d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/227b4998df712134b5c271f2251ed0ce7c6c9711ecb8a6b82ddaee56665c3f30
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s005_output"
	    wget -O "n100.r02.s005_output/n100.r02.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s005_output/n100.r02.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s005_output/n100.r02.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s005_output/n100.r02.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s005_output/n100.r02.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s005_output/n100.r02.s005.reference.fas" "n100.r02.s005_output/n100.r02.s005.fq1.fastq" "n100.r02.s005_output/n100.r02.s005.fq2.fastq" | samtools view -bS - > "n100.r02.s005_output/n100.r02.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s005_output/n100.r02.s005.untrimmed.sorted.bam" "n100.r02.s005_output/n100.r02.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s005_output/n100.r02.s005.untrimmed.sorted.bam" -b "n100.r02.s005_output/n100.r02.s005.primers.bed" -p "n100.r02.s005_output/n100.r02.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" "n100.r02.s005_output/n100.r02.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s005_output/n100.r02.s005.reference.fas" "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" > "n100.r02.s005_output/n100.r02.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s005_output/n100.r02.s005.reference.fas" --call-indels "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" > "n100.r02.s005_output/n100.r02.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" > "n100.r02.s005_output/n100.r02.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s005_output/n100.r02.s005.depth.txt" "n100.r02.s005_output/n100.r02.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s005_output/n100.r02.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s005_output/n100.r02.s005.reference.fas" | bcftools consensus -m "n100.r02.s005_output/n100.r02.s005.low_depth.tsv" tmp.vcf.gz > "n100.r02.s005_output/n100.r02.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task 2af220b8 (flow f94e4acc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task 2af220b8 (flow f94e4acc): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s022.Main.out_file f94e4acc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s022.Main.out_file f94e4acc n100/r02/n100.r02.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:677016996860a823dab9f2655f43fedb25e3a7a92b8400aea8dade5d3d89098e
	sha256:f94e4accc3f60e0162089c6ed5115535d81267c71c32cc977d45503f032d914b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2af220b8cfd1ffac7b0b1805d18bcd618bb1c5f0a60a937888f2602758c74de0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s022_output"
	    wget -O "n100.r02.s022_output/n100.r02.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s022_output/n100.r02.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s022_output/n100.r02.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s022_output/n100.r02.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s022_output/n100.r02.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s022_output/n100.r02.s022.reference.fas" "n100.r02.s022_output/n100.r02.s022.fq1.fastq" "n100.r02.s022_output/n100.r02.s022.fq2.fastq" | samtools view -bS - > "n100.r02.s022_output/n100.r02.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s022_output/n100.r02.s022.untrimmed.sorted.bam" "n100.r02.s022_output/n100.r02.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s022_output/n100.r02.s022.untrimmed.sorted.bam" -b "n100.r02.s022_output/n100.r02.s022.primers.bed" -p "n100.r02.s022_output/n100.r02.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" "n100.r02.s022_output/n100.r02.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s022_output/n100.r02.s022.reference.fas" "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" > "n100.r02.s022_output/n100.r02.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s022_output/n100.r02.s022.reference.fas" --call-indels "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" > "n100.r02.s022_output/n100.r02.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" > "n100.r02.s022_output/n100.r02.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s022_output/n100.r02.s022.depth.txt" "n100.r02.s022_output/n100.r02.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s022_output/n100.r02.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s022_output/n100.r02.s022.reference.fas" | bcftools consensus -m "n100.r02.s022_output/n100.r02.s022.low_depth.tsv" tmp.vcf.gz > "n100.r02.s022_output/n100.r02.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task 557dccf8 (flow dcf397bd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task 557dccf8 (flow dcf397bd): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s027.Main.out_file dcf397bd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s027.Main.out_file dcf397bd n100/r02/n100.r02.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36fe8b8295e24ee551a3dac63c4fbe9ed8d0b47755ea534042ba2a77a8203a55
	sha256:dcf397bd8eca738181e60c78afabacf9461122120d7b0d95796851390ea9663b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/557dccf8eb3a352f0a97ebcda6996c98d8bae195762d1ee93ef73cfbd937ea98
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s027_output"
	    wget -O "n100.r02.s027_output/n100.r02.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s027_output/n100.r02.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s027_output/n100.r02.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s027_output/n100.r02.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s027_output/n100.r02.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s027_output/n100.r02.s027.reference.fas" "n100.r02.s027_output/n100.r02.s027.fq1.fastq" "n100.r02.s027_output/n100.r02.s027.fq2.fastq" | samtools view -bS - > "n100.r02.s027_output/n100.r02.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s027_output/n100.r02.s027.untrimmed.sorted.bam" "n100.r02.s027_output/n100.r02.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s027_output/n100.r02.s027.untrimmed.sorted.bam" -b "n100.r02.s027_output/n100.r02.s027.primers.bed" -p "n100.r02.s027_output/n100.r02.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" "n100.r02.s027_output/n100.r02.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s027_output/n100.r02.s027.reference.fas" "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" > "n100.r02.s027_output/n100.r02.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s027_output/n100.r02.s027.reference.fas" --call-indels "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" > "n100.r02.s027_output/n100.r02.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" > "n100.r02.s027_output/n100.r02.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s027_output/n100.r02.s027.depth.txt" "n100.r02.s027_output/n100.r02.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s027_output/n100.r02.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s027_output/n100.r02.s027.reference.fas" | bcftools consensus -m "n100.r02.s027_output/n100.r02.s027.low_depth.tsv" tmp.vcf.gz > "n100.r02.s027_output/n100.r02.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task bb81e9dc (flow ce74ed16): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task bb81e9dc (flow ce74ed16): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s035.Main.out_file ce74ed16 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s035.Main.out_file ce74ed16 n100/r02/n100.r02.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d419ed563d11889a6dcf966663223ed328ab1cc470cfb35b2045efa43ab575fe
	sha256:ce74ed16e3fd10e813482c0ebe4880352e2766b01673ee1b48586e5e71eb03a3
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb81e9dc2bec641afc18337e4a1d9c5adb37c436c0027fb0f9521cbfd86a3f1c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s035_output"
	    wget -O "n100.r02.s035_output/n100.r02.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s035_output/n100.r02.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s035_output/n100.r02.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s035_output/n100.r02.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s035_output/n100.r02.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s035_output/n100.r02.s035.reference.fas" "n100.r02.s035_output/n100.r02.s035.fq1.fastq" "n100.r02.s035_output/n100.r02.s035.fq2.fastq" | samtools view -bS - > "n100.r02.s035_output/n100.r02.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s035_output/n100.r02.s035.untrimmed.sorted.bam" "n100.r02.s035_output/n100.r02.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s035_output/n100.r02.s035.untrimmed.sorted.bam" -b "n100.r02.s035_output/n100.r02.s035.primers.bed" -p "n100.r02.s035_output/n100.r02.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" "n100.r02.s035_output/n100.r02.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s035_output/n100.r02.s035.reference.fas" "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" > "n100.r02.s035_output/n100.r02.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s035_output/n100.r02.s035.reference.fas" --call-indels "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" > "n100.r02.s035_output/n100.r02.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" > "n100.r02.s035_output/n100.r02.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s035_output/n100.r02.s035.depth.txt" "n100.r02.s035_output/n100.r02.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s035_output/n100.r02.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s035_output/n100.r02.s035.reference.fas" | bcftools consensus -m "n100.r02.s035_output/n100.r02.s035.low_depth.tsv" tmp.vcf.gz > "n100.r02.s035_output/n100.r02.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task 8654fc3f (flow c91904a4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task 8654fc3f (flow c91904a4): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s094.Main.out_file c91904a4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s094.Main.out_file c91904a4 n100/r02/n100.r02.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9097d43648621ff329686e8acfd5bfae2e6bfd1f7583de70f1146eed91b83d34
	sha256:c91904a4d0d9244adc4b02d3aa24699c9694281f65f04840f23627f88febb2c4
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8654fc3f56cc3e2ac9bfd2fad274354aefe89edb8ebfdbd4665516bc4f21e8ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s094_output"
	    wget -O "n100.r02.s094_output/n100.r02.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s094_output/n100.r02.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s094_output/n100.r02.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s094_output/n100.r02.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s094_output/n100.r02.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s094_output/n100.r02.s094.reference.fas" "n100.r02.s094_output/n100.r02.s094.fq1.fastq" "n100.r02.s094_output/n100.r02.s094.fq2.fastq" | samtools view -bS - > "n100.r02.s094_output/n100.r02.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s094_output/n100.r02.s094.untrimmed.sorted.bam" "n100.r02.s094_output/n100.r02.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s094_output/n100.r02.s094.untrimmed.sorted.bam" -b "n100.r02.s094_output/n100.r02.s094.primers.bed" -p "n100.r02.s094_output/n100.r02.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" "n100.r02.s094_output/n100.r02.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s094_output/n100.r02.s094.reference.fas" "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" > "n100.r02.s094_output/n100.r02.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s094_output/n100.r02.s094.reference.fas" --call-indels "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" > "n100.r02.s094_output/n100.r02.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" > "n100.r02.s094_output/n100.r02.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s094_output/n100.r02.s094.depth.txt" "n100.r02.s094_output/n100.r02.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s094_output/n100.r02.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s094_output/n100.r02.s094.reference.fas" | bcftools consensus -m "n100.r02.s094_output/n100.r02.s094.low_depth.tsv" tmp.vcf.gz > "n100.r02.s094_output/n100.r02.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task 2154d467 (flow 0ea2123a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task 2154d467 (flow 0ea2123a): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s081.Main.out_file 0ea2123a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s081.Main.out_file 0ea2123a n100/r02/n100.r02.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ff2ae3be837d7d145e5b5156ad139b3731408c6488b7c2c538575a3abcfb19f5
	sha256:0ea2123af311a9d83c0eff255b63ea275ba96dc97c7b11e238c84ba8b6720817
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2154d467c334574bbf6dddace03c96d013ce9c141e5247f5505647d3c5323ae5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s081_output"
	    wget -O "n100.r02.s081_output/n100.r02.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s081_output/n100.r02.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s081_output/n100.r02.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s081_output/n100.r02.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s081_output/n100.r02.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s081_output/n100.r02.s081.reference.fas" "n100.r02.s081_output/n100.r02.s081.fq1.fastq" "n100.r02.s081_output/n100.r02.s081.fq2.fastq" | samtools view -bS - > "n100.r02.s081_output/n100.r02.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s081_output/n100.r02.s081.untrimmed.sorted.bam" "n100.r02.s081_output/n100.r02.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s081_output/n100.r02.s081.untrimmed.sorted.bam" -b "n100.r02.s081_output/n100.r02.s081.primers.bed" -p "n100.r02.s081_output/n100.r02.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" "n100.r02.s081_output/n100.r02.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s081_output/n100.r02.s081.reference.fas" "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" > "n100.r02.s081_output/n100.r02.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s081_output/n100.r02.s081.reference.fas" --call-indels "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" > "n100.r02.s081_output/n100.r02.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" > "n100.r02.s081_output/n100.r02.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s081_output/n100.r02.s081.depth.txt" "n100.r02.s081_output/n100.r02.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s081_output/n100.r02.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s081_output/n100.r02.s081.reference.fas" | bcftools consensus -m "n100.r02.s081_output/n100.r02.s081.low_depth.tsv" tmp.vcf.gz > "n100.r02.s081_output/n100.r02.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task 73f9bb6c (flow 958202cb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task 73f9bb6c (flow 958202cb): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s036.Main.out_file 958202cb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s036.Main.out_file 958202cb n100/r02/n100.r02.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a6cd1dec5dc969c908c92bb3e3f576c591bed0a61fb6fef8c135aad561d9deea
	sha256:958202cb73fb265945618ae6c49e928d0619b88620b26d2ec646c37a84552519
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/73f9bb6c431056f170a5282bb4730b98f96b3128fa5697cd496d01ef0acb7351
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s036_output"
	    wget -O "n100.r02.s036_output/n100.r02.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s036_output/n100.r02.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s036_output/n100.r02.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s036_output/n100.r02.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s036_output/n100.r02.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s036_output/n100.r02.s036.reference.fas" "n100.r02.s036_output/n100.r02.s036.fq1.fastq" "n100.r02.s036_output/n100.r02.s036.fq2.fastq" | samtools view -bS - > "n100.r02.s036_output/n100.r02.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s036_output/n100.r02.s036.untrimmed.sorted.bam" "n100.r02.s036_output/n100.r02.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s036_output/n100.r02.s036.untrimmed.sorted.bam" -b "n100.r02.s036_output/n100.r02.s036.primers.bed" -p "n100.r02.s036_output/n100.r02.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" "n100.r02.s036_output/n100.r02.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s036_output/n100.r02.s036.reference.fas" "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" > "n100.r02.s036_output/n100.r02.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s036_output/n100.r02.s036.reference.fas" --call-indels "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" > "n100.r02.s036_output/n100.r02.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" > "n100.r02.s036_output/n100.r02.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s036_output/n100.r02.s036.depth.txt" "n100.r02.s036_output/n100.r02.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s036_output/n100.r02.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s036_output/n100.r02.s036.reference.fas" | bcftools consensus -m "n100.r02.s036_output/n100.r02.s036.low_depth.tsv" tmp.vcf.gz > "n100.r02.s036_output/n100.r02.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:56 scheduler task 44851b9f (flow 47ed53a8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:56 scheduler task 44851b9f (flow 47ed53a8): waiting for completion (try 0): started
2021/07/08 16:36:56  ->  n100.r02.s050.Main.out_file 47ed53a8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:56 n100.r02.s050.Main.out_file 47ed53a8 n100/r02/n100.r02.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8fcec1bef5dc44ccff9d2d1ca4b320b5e4d7b3295c5d9d3f9a844f34d6efacdf
	sha256:47ed53a80f6d0b2127282b0de8e82900e87e8a09ea585d0d2bc6fe349608771c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/44851b9fb8a7bc0c5a9023b1d978891efbe0f675bde178c98d4fdb5f9aef3997
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s050_output"
	    wget -O "n100.r02.s050_output/n100.r02.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s050_output/n100.r02.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s050_output/n100.r02.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s050_output/n100.r02.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s050_output/n100.r02.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s050_output/n100.r02.s050.reference.fas" "n100.r02.s050_output/n100.r02.s050.fq1.fastq" "n100.r02.s050_output/n100.r02.s050.fq2.fastq" | samtools view -bS - > "n100.r02.s050_output/n100.r02.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s050_output/n100.r02.s050.untrimmed.sorted.bam" "n100.r02.s050_output/n100.r02.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s050_output/n100.r02.s050.untrimmed.sorted.bam" -b "n100.r02.s050_output/n100.r02.s050.primers.bed" -p "n100.r02.s050_output/n100.r02.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" "n100.r02.s050_output/n100.r02.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s050_output/n100.r02.s050.reference.fas" "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" > "n100.r02.s050_output/n100.r02.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s050_output/n100.r02.s050.reference.fas" --call-indels "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" > "n100.r02.s050_output/n100.r02.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" > "n100.r02.s050_output/n100.r02.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s050_output/n100.r02.s050.depth.txt" "n100.r02.s050_output/n100.r02.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s050_output/n100.r02.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s050_output/n100.r02.s050.reference.fas" | bcftools consensus -m "n100.r02.s050_output/n100.r02.s050.low_depth.tsv" tmp.vcf.gz > "n100.r02.s050_output/n100.r02.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:57 scheduler task a8a30cc1 (flow 7b9af5ba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:57 scheduler task a8a30cc1 (flow 7b9af5ba): waiting for completion (try 0): started
2021/07/08 16:36:57  ->  n100.r02.s015.Main.out_file 7b9af5ba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:57 n100.r02.s015.Main.out_file 7b9af5ba n100/r02/n100.r02.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:26f086a4a7901e07ccfd774379c36c9534e617ff21c21700dffa68ed3ecd77c5
	sha256:7b9af5ba09d7adda2a797239d708b95158191989828db149ca0429eafe92c204
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a8a30cc1f921b53b57168ce9cf8173b00c82a7029099b7a22455050234e4fac3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s015_output"
	    wget -O "n100.r02.s015_output/n100.r02.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s015_output/n100.r02.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s015_output/n100.r02.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s015_output/n100.r02.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s015_output/n100.r02.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s015_output/n100.r02.s015.reference.fas" "n100.r02.s015_output/n100.r02.s015.fq1.fastq" "n100.r02.s015_output/n100.r02.s015.fq2.fastq" | samtools view -bS - > "n100.r02.s015_output/n100.r02.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s015_output/n100.r02.s015.untrimmed.sorted.bam" "n100.r02.s015_output/n100.r02.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s015_output/n100.r02.s015.untrimmed.sorted.bam" -b "n100.r02.s015_output/n100.r02.s015.primers.bed" -p "n100.r02.s015_output/n100.r02.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" "n100.r02.s015_output/n100.r02.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s015_output/n100.r02.s015.reference.fas" "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" > "n100.r02.s015_output/n100.r02.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s015_output/n100.r02.s015.reference.fas" --call-indels "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" > "n100.r02.s015_output/n100.r02.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" > "n100.r02.s015_output/n100.r02.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s015_output/n100.r02.s015.depth.txt" "n100.r02.s015_output/n100.r02.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s015_output/n100.r02.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s015_output/n100.r02.s015.reference.fas" | bcftools consensus -m "n100.r02.s015_output/n100.r02.s015.low_depth.tsv" tmp.vcf.gz > "n100.r02.s015_output/n100.r02.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:57 scheduler task 5a1a8dc5 (flow 7e2f5b09): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:57 scheduler task 5a1a8dc5 (flow 7e2f5b09): waiting for completion (try 0): started
2021/07/08 16:36:57  ->  n100.r02.s090.Main.out_file 7e2f5b09 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:57 n100.r02.s090.Main.out_file 7e2f5b09 n100/r02/n100.r02.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4437f67d88928c539cecf890b9ee4a365b3663caf4f46b01b5b14a3b210991ff
	sha256:7e2f5b099e5bb2dd4bec700544b8843d1efa5615dc919ff5e29e5e7ab2b37c6c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a1a8dc569d3105cc49139cce95c17a1d9cadc010b99d80aaa52c63e47c1e9c4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s090_output"
	    wget -O "n100.r02.s090_output/n100.r02.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s090_output/n100.r02.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s090_output/n100.r02.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s090_output/n100.r02.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s090_output/n100.r02.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s090_output/n100.r02.s090.reference.fas" "n100.r02.s090_output/n100.r02.s090.fq1.fastq" "n100.r02.s090_output/n100.r02.s090.fq2.fastq" | samtools view -bS - > "n100.r02.s090_output/n100.r02.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s090_output/n100.r02.s090.untrimmed.sorted.bam" "n100.r02.s090_output/n100.r02.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s090_output/n100.r02.s090.untrimmed.sorted.bam" -b "n100.r02.s090_output/n100.r02.s090.primers.bed" -p "n100.r02.s090_output/n100.r02.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" "n100.r02.s090_output/n100.r02.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s090_output/n100.r02.s090.reference.fas" "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" > "n100.r02.s090_output/n100.r02.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s090_output/n100.r02.s090.reference.fas" --call-indels "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" > "n100.r02.s090_output/n100.r02.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" > "n100.r02.s090_output/n100.r02.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s090_output/n100.r02.s090.depth.txt" "n100.r02.s090_output/n100.r02.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s090_output/n100.r02.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s090_output/n100.r02.s090.reference.fas" | bcftools consensus -m "n100.r02.s090_output/n100.r02.s090.low_depth.tsv" tmp.vcf.gz > "n100.r02.s090_output/n100.r02.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:57 scheduler task 04f3dd11 (flow 9cfb1911): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:57 scheduler task 04f3dd11 (flow 9cfb1911): waiting for completion (try 0): started
2021/07/08 16:36:57  ->  n100.r02.s025.Main.out_file 9cfb1911 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:57 n100.r02.s025.Main.out_file 9cfb1911 n100/r02/n100.r02.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:71baf6b1fa6794a16d148c0ebecd0d283e04f3aed0a7a86695d38ac7c57d137d
	sha256:9cfb19116a54dfb1e692ae67b99aea2d85a9f32de63ee24b521a88e31a5ec7d0
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/04f3dd11803f5f1db5a5043d34d6ff994737ab7d93dabf509054148df0b590ef
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s025_output"
	    wget -O "n100.r02.s025_output/n100.r02.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s025_output/n100.r02.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s025_output/n100.r02.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s025_output/n100.r02.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s025_output/n100.r02.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s025_output/n100.r02.s025.reference.fas" "n100.r02.s025_output/n100.r02.s025.fq1.fastq" "n100.r02.s025_output/n100.r02.s025.fq2.fastq" | samtools view -bS - > "n100.r02.s025_output/n100.r02.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s025_output/n100.r02.s025.untrimmed.sorted.bam" "n100.r02.s025_output/n100.r02.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s025_output/n100.r02.s025.untrimmed.sorted.bam" -b "n100.r02.s025_output/n100.r02.s025.primers.bed" -p "n100.r02.s025_output/n100.r02.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" "n100.r02.s025_output/n100.r02.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s025_output/n100.r02.s025.reference.fas" "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" > "n100.r02.s025_output/n100.r02.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s025_output/n100.r02.s025.reference.fas" --call-indels "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" > "n100.r02.s025_output/n100.r02.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" > "n100.r02.s025_output/n100.r02.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s025_output/n100.r02.s025.depth.txt" "n100.r02.s025_output/n100.r02.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s025_output/n100.r02.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s025_output/n100.r02.s025.reference.fas" | bcftools consensus -m "n100.r02.s025_output/n100.r02.s025.low_depth.tsv" tmp.vcf.gz > "n100.r02.s025_output/n100.r02.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:57 scheduler task 0e177187 (flow ce3a6617): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:57 scheduler task 0e177187 (flow ce3a6617): waiting for completion (try 0): started
2021/07/08 16:36:57  ->  n100.r02.s055.Main.out_file ce3a6617 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:57 n100.r02.s055.Main.out_file ce3a6617 n100/r02/n100.r02.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5e6266174aa10041b52b1f5bd238cf12fbf2d0737ff71e604b7b80b32ca65cc1
	sha256:ce3a6617368e1c405f51d9435d3f24cf8f8c1adf44a7c512e525ac6976c65cfe
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e1771870eee6978577f365fd3f6f2b315b04a6b54534638cc72e7816e2f0458
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s055_output"
	    wget -O "n100.r02.s055_output/n100.r02.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s055_output/n100.r02.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s055_output/n100.r02.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s055_output/n100.r02.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s055_output/n100.r02.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s055_output/n100.r02.s055.reference.fas" "n100.r02.s055_output/n100.r02.s055.fq1.fastq" "n100.r02.s055_output/n100.r02.s055.fq2.fastq" | samtools view -bS - > "n100.r02.s055_output/n100.r02.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s055_output/n100.r02.s055.untrimmed.sorted.bam" "n100.r02.s055_output/n100.r02.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s055_output/n100.r02.s055.untrimmed.sorted.bam" -b "n100.r02.s055_output/n100.r02.s055.primers.bed" -p "n100.r02.s055_output/n100.r02.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" "n100.r02.s055_output/n100.r02.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s055_output/n100.r02.s055.reference.fas" "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" > "n100.r02.s055_output/n100.r02.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s055_output/n100.r02.s055.reference.fas" --call-indels "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" > "n100.r02.s055_output/n100.r02.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" > "n100.r02.s055_output/n100.r02.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s055_output/n100.r02.s055.depth.txt" "n100.r02.s055_output/n100.r02.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s055_output/n100.r02.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s055_output/n100.r02.s055.reference.fas" | bcftools consensus -m "n100.r02.s055_output/n100.r02.s055.low_depth.tsv" tmp.vcf.gz > "n100.r02.s055_output/n100.r02.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:57 scheduler task 8c10b81b (flow ef286eca): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:57 scheduler task 8c10b81b (flow ef286eca): waiting for completion (try 0): started
2021/07/08 16:36:57  ->  n100.r02.s063.Main.out_file ef286eca exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:57 n100.r02.s063.Main.out_file ef286eca n100/r02/n100.r02.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f453a8588f2f5e4d73390fa42bba252eebe15f5a1057fd937f20894bc1af27be
	sha256:ef286ecab2b1d95cc98a4c62c245e57ebd1659bcf994dd8d1e2a92bc4501dd20
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c10b81b1bc2b409b4a63e8a4fdf132c47f1db90491e53e0144188ba87e7e1a2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s063_output"
	    wget -O "n100.r02.s063_output/n100.r02.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s063_output/n100.r02.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s063_output/n100.r02.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s063_output/n100.r02.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s063_output/n100.r02.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s063_output/n100.r02.s063.reference.fas" "n100.r02.s063_output/n100.r02.s063.fq1.fastq" "n100.r02.s063_output/n100.r02.s063.fq2.fastq" | samtools view -bS - > "n100.r02.s063_output/n100.r02.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s063_output/n100.r02.s063.untrimmed.sorted.bam" "n100.r02.s063_output/n100.r02.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s063_output/n100.r02.s063.untrimmed.sorted.bam" -b "n100.r02.s063_output/n100.r02.s063.primers.bed" -p "n100.r02.s063_output/n100.r02.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" "n100.r02.s063_output/n100.r02.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s063_output/n100.r02.s063.reference.fas" "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" > "n100.r02.s063_output/n100.r02.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s063_output/n100.r02.s063.reference.fas" --call-indels "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" > "n100.r02.s063_output/n100.r02.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" > "n100.r02.s063_output/n100.r02.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s063_output/n100.r02.s063.depth.txt" "n100.r02.s063_output/n100.r02.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s063_output/n100.r02.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s063_output/n100.r02.s063.reference.fas" | bcftools consensus -m "n100.r02.s063_output/n100.r02.s063.low_depth.tsv" tmp.vcf.gz > "n100.r02.s063_output/n100.r02.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:57 scheduler task ba37caf2 (flow 609775f9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:57 scheduler task ba37caf2 (flow 609775f9): waiting for completion (try 0): started
2021/07/08 16:36:57  ->  n100.r02.s004.Main.out_file 609775f9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:57 n100.r02.s004.Main.out_file 609775f9 n100/r02/n100.r02.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2f680886c9adc28359006c8f24f71d41ee1778d1e65102cf02996fe195704af9
	sha256:609775f9811e9ade8a8ccb54a2cb3d46a9026807a6ebe9ab14b40ca46763f0df
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ba37caf278b3bb46bb0c0cb44842ff4fd63baa47a36b7aae5fcfa7e7aa29de19
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s004_output"
	    wget -O "n100.r02.s004_output/n100.r02.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s004_output/n100.r02.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s004_output/n100.r02.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s004_output/n100.r02.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s004_output/n100.r02.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s004_output/n100.r02.s004.reference.fas" "n100.r02.s004_output/n100.r02.s004.fq1.fastq" "n100.r02.s004_output/n100.r02.s004.fq2.fastq" | samtools view -bS - > "n100.r02.s004_output/n100.r02.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s004_output/n100.r02.s004.untrimmed.sorted.bam" "n100.r02.s004_output/n100.r02.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s004_output/n100.r02.s004.untrimmed.sorted.bam" -b "n100.r02.s004_output/n100.r02.s004.primers.bed" -p "n100.r02.s004_output/n100.r02.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" "n100.r02.s004_output/n100.r02.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s004_output/n100.r02.s004.reference.fas" "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" > "n100.r02.s004_output/n100.r02.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s004_output/n100.r02.s004.reference.fas" --call-indels "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" > "n100.r02.s004_output/n100.r02.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" > "n100.r02.s004_output/n100.r02.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s004_output/n100.r02.s004.depth.txt" "n100.r02.s004_output/n100.r02.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s004_output/n100.r02.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s004_output/n100.r02.s004.reference.fas" | bcftools consensus -m "n100.r02.s004_output/n100.r02.s004.low_depth.tsv" tmp.vcf.gz > "n100.r02.s004_output/n100.r02.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:58 scheduler task 6628d1b5 (flow 77fde731): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:58 scheduler task 6628d1b5 (flow 77fde731): waiting for completion (try 0): started
2021/07/08 16:36:58  ->  n100.r02.s045.Main.out_file 77fde731 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:58 n100.r02.s045.Main.out_file 77fde731 n100/r02/n100.r02.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c33c9e193b16d22c0dc2166fde5cc7753b084ad43e6e6667073c4149e3254b8
	sha256:77fde731b920ae521bc9799051a88d5d41026e8f651606a69ab542f044e6fd7c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6628d1b58017e3b3dbe1171f5de0769c1cb1879477118ee1a59a7aafe66f11a8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s045_output"
	    wget -O "n100.r02.s045_output/n100.r02.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s045_output/n100.r02.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s045_output/n100.r02.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s045_output/n100.r02.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s045_output/n100.r02.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s045_output/n100.r02.s045.reference.fas" "n100.r02.s045_output/n100.r02.s045.fq1.fastq" "n100.r02.s045_output/n100.r02.s045.fq2.fastq" | samtools view -bS - > "n100.r02.s045_output/n100.r02.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s045_output/n100.r02.s045.untrimmed.sorted.bam" "n100.r02.s045_output/n100.r02.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s045_output/n100.r02.s045.untrimmed.sorted.bam" -b "n100.r02.s045_output/n100.r02.s045.primers.bed" -p "n100.r02.s045_output/n100.r02.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" "n100.r02.s045_output/n100.r02.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s045_output/n100.r02.s045.reference.fas" "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" > "n100.r02.s045_output/n100.r02.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s045_output/n100.r02.s045.reference.fas" --call-indels "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" > "n100.r02.s045_output/n100.r02.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" > "n100.r02.s045_output/n100.r02.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s045_output/n100.r02.s045.depth.txt" "n100.r02.s045_output/n100.r02.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s045_output/n100.r02.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s045_output/n100.r02.s045.reference.fas" | bcftools consensus -m "n100.r02.s045_output/n100.r02.s045.low_depth.tsv" tmp.vcf.gz > "n100.r02.s045_output/n100.r02.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:58 scheduler task 507f546b (flow 338fe8dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:58 scheduler task 507f546b (flow 338fe8dc): waiting for completion (try 0): started
2021/07/08 16:36:58  ->  n100.r02.s062.Main.out_file 338fe8dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:58 n100.r02.s062.Main.out_file 338fe8dc n100/r02/n100.r02.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:287758af3b1813523a7837ca24d80089f22ed08fba6a4ff706e05021ccb2c991
	sha256:338fe8dc0b62463629f4028e43ae14b808623c086ad643afea97585a6493d800
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/507f546b160ee8f0d440405b7bcee88fe67094bd6ee8ea7c807072174e610670
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s062_output"
	    wget -O "n100.r02.s062_output/n100.r02.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s062_output/n100.r02.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s062_output/n100.r02.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s062_output/n100.r02.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s062_output/n100.r02.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s062_output/n100.r02.s062.reference.fas" "n100.r02.s062_output/n100.r02.s062.fq1.fastq" "n100.r02.s062_output/n100.r02.s062.fq2.fastq" | samtools view -bS - > "n100.r02.s062_output/n100.r02.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s062_output/n100.r02.s062.untrimmed.sorted.bam" "n100.r02.s062_output/n100.r02.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s062_output/n100.r02.s062.untrimmed.sorted.bam" -b "n100.r02.s062_output/n100.r02.s062.primers.bed" -p "n100.r02.s062_output/n100.r02.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" "n100.r02.s062_output/n100.r02.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s062_output/n100.r02.s062.reference.fas" "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" > "n100.r02.s062_output/n100.r02.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s062_output/n100.r02.s062.reference.fas" --call-indels "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" > "n100.r02.s062_output/n100.r02.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" > "n100.r02.s062_output/n100.r02.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s062_output/n100.r02.s062.depth.txt" "n100.r02.s062_output/n100.r02.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s062_output/n100.r02.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s062_output/n100.r02.s062.reference.fas" | bcftools consensus -m "n100.r02.s062_output/n100.r02.s062.low_depth.tsv" tmp.vcf.gz > "n100.r02.s062_output/n100.r02.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:36:58 scheduler task 47667179 (flow cca7236b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:36:58 scheduler task 47667179 (flow cca7236b): waiting for completion (try 0): started
2021/07/08 16:36:58  ->  n100.r02.s068.Main.out_file cca7236b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:36:58 n100.r02.s068.Main.out_file cca7236b n100/r02/n100.r02.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:473e562ff1af9143c1b11028301f21f23a1f0a5106c460bb75cbf458fce971b8
	sha256:cca7236beaff86991fb5e0a82bf8f9f7b26fa8c91542591a1f02bba82d9e4a2b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/47667179d4911e231fb4bca2726c6ca5f9680ef43998101c33ff1459e4b6062d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s068_output"
	    wget -O "n100.r02.s068_output/n100.r02.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s068_output/n100.r02.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s068_output/n100.r02.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s068_output/n100.r02.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s068_output/n100.r02.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s068_output/n100.r02.s068.reference.fas" "n100.r02.s068_output/n100.r02.s068.fq1.fastq" "n100.r02.s068_output/n100.r02.s068.fq2.fastq" | samtools view -bS - > "n100.r02.s068_output/n100.r02.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s068_output/n100.r02.s068.untrimmed.sorted.bam" "n100.r02.s068_output/n100.r02.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s068_output/n100.r02.s068.untrimmed.sorted.bam" -b "n100.r02.s068_output/n100.r02.s068.primers.bed" -p "n100.r02.s068_output/n100.r02.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" "n100.r02.s068_output/n100.r02.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s068_output/n100.r02.s068.reference.fas" "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" > "n100.r02.s068_output/n100.r02.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s068_output/n100.r02.s068.reference.fas" --call-indels "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" > "n100.r02.s068_output/n100.r02.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" > "n100.r02.s068_output/n100.r02.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s068_output/n100.r02.s068.depth.txt" "n100.r02.s068_output/n100.r02.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s068_output/n100.r02.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s068_output/n100.r02.s068.reference.fas" | bcftools consensus -m "n100.r02.s068_output/n100.r02.s068.low_depth.tsv" tmp.vcf.gz > "n100.r02.s068_output/n100.r02.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): promoting objects (try 0): started
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): retrieving diagnostic output (try 0): started
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): promoting objects (try 0): started
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): retrieving result (try 0): started
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): retrieving diagnostic output (try 0): started
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:40:48 scheduler task 9bffd4af (flow 8c3fef49): transferring output (try 0): started
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): retrieving result (try 0): started
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:40:48 scheduler task 5cff974b (flow c1923de0): transferring output (try 0): started
2021/07/08 16:40:48 scheduler task ae7d5490 (flow 75bdf269): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:40:48 scheduler task ae7d5490 (flow 75bdf269): promoting objects (try 0): started
2021/07/08 16:40:48 scheduler task ae7d5490 (flow 75bdf269): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:40:48 scheduler task ae7d5490 (flow 75bdf269): retrieving diagnostic output (try 0): started
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): retrieving result (try 0): started
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): transferring output (try 0): started
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): transferring output (try 0): successful, next state: unloading
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloading (try 0): started
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloading list<val<.=48402618 35.7MiB> 35.7MiB>
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloading val<.=e697ce1a 35.4MiB>
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloading val<.=0e99a084 35.4MiB>
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloaded val<.=0e99a084 35.4MiB>
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloaded list<val<.=48402618 35.7MiB> 35.7MiB>
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloaded val<.=e697ce1a 35.4MiB>
2021/07/08 16:40:49 scheduler task 9bffd4af (flow 8c3fef49): unloading (try 0): successful, next state: complete
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:40:49  <-  n100.r02.s065.Main.out_file 8c3fef49 ok     exec 3m56s 35.7MiB
2021/07/08 16:40:49 n100.r02.s065.Main.out_file 8c3fef49 n100/r02/n100.r02.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cfe8f3e3fb22f064bf6044114ec885cdda956b54c45ccb35b63f63b70768d697
	sha256:8c3fef49aa73c3ce561cf6262650651d4812da36fdbec3d9cffde093f50fe74a
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9bffd4aff445c7a8995c355869a156aed6cb6139e5970dfc5215fd41fa4ec646
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s065_output"
	    wget -O "n100.r02.s065_output/n100.r02.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s065_output/n100.r02.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s065_output/n100.r02.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s065_output/n100.r02.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s065_output/n100.r02.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s065_output/n100.r02.s065.reference.fas" "n100.r02.s065_output/n100.r02.s065.fq1.fastq" "n100.r02.s065_output/n100.r02.s065.fq2.fastq" | samtools view -bS - > "n100.r02.s065_output/n100.r02.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s065_output/n100.r02.s065.untrimmed.sorted.bam" "n100.r02.s065_output/n100.r02.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s065_output/n100.r02.s065.untrimmed.sorted.bam" -b "n100.r02.s065_output/n100.r02.s065.primers.bed" -p "n100.r02.s065_output/n100.r02.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" "n100.r02.s065_output/n100.r02.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s065_output/n100.r02.s065.reference.fas" "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" > "n100.r02.s065_output/n100.r02.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s065_output/n100.r02.s065.reference.fas" --call-indels "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" > "n100.r02.s065_output/n100.r02.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s065_output/n100.r02.s065.trimmed.sorted.bam" > "n100.r02.s065_output/n100.r02.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s065_output/n100.r02.s065.depth.txt" "n100.r02.s065_output/n100.r02.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s065_output/n100.r02.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s065_output/n100.r02.s065.reference.fas" | bcftools consensus -m "n100.r02.s065_output/n100.r02.s065.low_depth.tsv" tmp.vcf.gz > "n100.r02.s065_output/n100.r02.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4840261850c02bbb2e123f760dbeecc18ca0db1752118fb82b694e433f5662ff 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.5MiB max=127.1MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:40:49 scheduler task c76884d7 (flow 01d0188a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s065.tar.gz resources {}
2021/07/08 16:40:49  ->  n100.r02.s065.Main.cp_out_file 01d0188a exec extern s3://niema-test/n100/r02/n100.r02.s065.tar.gz 35.7MiB
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloading (try 0): started
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloading list<val<.=bc56e60f 35.7MiB> 35.7MiB>
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloading val<.=b30b2230 35.4MiB>
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloading val<.=a3a2c1f7 35.4MiB>
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloaded list<val<.=bc56e60f 35.7MiB> 35.7MiB>
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloaded val<.=a3a2c1f7 35.4MiB>
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloaded val<.=b30b2230 35.4MiB>
2021/07/08 16:40:49 scheduler task 5cff974b (flow c1923de0): unloading (try 0): successful, next state: complete
2021/07/08 16:40:49  <-  n100.r02.s024.Main.out_file c1923de0 ok     exec 3m56s 35.7MiB
2021/07/08 16:40:49 n100.r02.s024.Main.out_file c1923de0 n100/r02/n100.r02.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42291f4367e777fa85af20f07e3c9ffca1cff1aaaa11d89d249f620bf0a69f2b
	sha256:c1923de0380970a460c0d3d96e133ae9def42895f674fa8296370e939140b9ce
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5cff974b72ba7e98795ab5cb4e3af99a9b4c8aa7aa3e7f2e5b9a2f36f0c1ad5d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s024_output"
	    wget -O "n100.r02.s024_output/n100.r02.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s024_output/n100.r02.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s024_output/n100.r02.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s024_output/n100.r02.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s024_output/n100.r02.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s024_output/n100.r02.s024.reference.fas" "n100.r02.s024_output/n100.r02.s024.fq1.fastq" "n100.r02.s024_output/n100.r02.s024.fq2.fastq" | samtools view -bS - > "n100.r02.s024_output/n100.r02.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s024_output/n100.r02.s024.untrimmed.sorted.bam" "n100.r02.s024_output/n100.r02.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s024_output/n100.r02.s024.untrimmed.sorted.bam" -b "n100.r02.s024_output/n100.r02.s024.primers.bed" -p "n100.r02.s024_output/n100.r02.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" "n100.r02.s024_output/n100.r02.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s024_output/n100.r02.s024.reference.fas" "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" > "n100.r02.s024_output/n100.r02.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s024_output/n100.r02.s024.reference.fas" --call-indels "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" > "n100.r02.s024_output/n100.r02.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s024_output/n100.r02.s024.trimmed.sorted.bam" > "n100.r02.s024_output/n100.r02.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s024_output/n100.r02.s024.depth.txt" "n100.r02.s024_output/n100.r02.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s024_output/n100.r02.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s024_output/n100.r02.s024.reference.fas" | bcftools consensus -m "n100.r02.s024_output/n100.r02.s024.low_depth.tsv" tmp.vcf.gz > "n100.r02.s024_output/n100.r02.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bc56e60f57233078cb069cc62f62f01327b20b6d90b1bdee6fb5eb715c5e537d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=125.9MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:40:49 scheduler task 75a8daab (flow 9428634f): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s024.tar.gz resources {}
2021/07/08 16:40:49  ->  n100.r02.s024.Main.cp_out_file 9428634f exec extern s3://niema-test/n100/r02/n100.r02.s024.tar.gz 35.7MiB
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): transferring output (try 0): successful, next state: unloading
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): unloading (try 0): started
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): unloading list<val<.=27e3f14b 35.7MiB> 35.7MiB>
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): unloading val<.=2b318ba8 35.4MiB>
2021/07/08 16:40:49 scheduler task ae7d5490 (flow 75bdf269): unloading val<.=380ddd3d 35.4MiB>
2021/07/08 16:40:50 scheduler task ae7d5490 (flow 75bdf269): unloaded val<.=2b318ba8 35.4MiB>
2021/07/08 16:40:50 scheduler task ae7d5490 (flow 75bdf269): unloaded list<val<.=27e3f14b 35.7MiB> 35.7MiB>
2021/07/08 16:40:50 scheduler task ae7d5490 (flow 75bdf269): unloaded val<.=380ddd3d 35.4MiB>
2021/07/08 16:40:50 scheduler task ae7d5490 (flow 75bdf269): unloading (try 0): successful, next state: complete
2021/07/08 16:40:50  <-  n100.r02.s039.Main.out_file 75bdf269 ok     exec 3m57s 35.7MiB
2021/07/08 16:40:50 n100.r02.s039.Main.out_file 75bdf269 n100/r02/n100.r02.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b2b85be4c229e3c70e4ab3d3c912f7c1b03fb9c9a66a263a4a003e796c07ebb6
	sha256:75bdf269b3399302cf0626348388a80582ccf1ba630c02533411ca477875f2c0
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ae7d549012072a20c2736680a83baa46f9a4e237fa62e0f56e8baaa55a6f8726
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s039_output"
	    wget -O "n100.r02.s039_output/n100.r02.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s039_output/n100.r02.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s039_output/n100.r02.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s039_output/n100.r02.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s039_output/n100.r02.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s039_output/n100.r02.s039.reference.fas" "n100.r02.s039_output/n100.r02.s039.fq1.fastq" "n100.r02.s039_output/n100.r02.s039.fq2.fastq" | samtools view -bS - > "n100.r02.s039_output/n100.r02.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s039_output/n100.r02.s039.untrimmed.sorted.bam" "n100.r02.s039_output/n100.r02.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s039_output/n100.r02.s039.untrimmed.sorted.bam" -b "n100.r02.s039_output/n100.r02.s039.primers.bed" -p "n100.r02.s039_output/n100.r02.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" "n100.r02.s039_output/n100.r02.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s039_output/n100.r02.s039.reference.fas" "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" > "n100.r02.s039_output/n100.r02.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s039_output/n100.r02.s039.reference.fas" --call-indels "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" > "n100.r02.s039_output/n100.r02.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s039_output/n100.r02.s039.trimmed.sorted.bam" > "n100.r02.s039_output/n100.r02.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s039_output/n100.r02.s039.depth.txt" "n100.r02.s039_output/n100.r02.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s039_output/n100.r02.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s039_output/n100.r02.s039.reference.fas" | bcftools consensus -m "n100.r02.s039_output/n100.r02.s039.low_depth.tsv" tmp.vcf.gz > "n100.r02.s039_output/n100.r02.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:27e3f14be2151a7a51c2be3f351b6e3a4205770f7bdbad5f127ccb5a8fbc757c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.7MiB max=127.0MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:40:50 scheduler task 76cde106 (flow 93b0f22c): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s039.tar.gz resources {}
2021/07/08 16:40:50  ->  n100.r02.s039.Main.cp_out_file 93b0f22c exec extern s3://niema-test/n100/r02/n100.r02.s039.tar.gz 35.7MiB
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): promoting objects (try 0): started
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): retrieving diagnostic output (try 0): started
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): retrieving result (try 0): started
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): transferring output (try 0): started
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): unloading (try 0): started
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): unloading list<val<.=fece060a 35.8MiB> 35.8MiB>
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): unloading val<.=f52ddb57 35.4MiB>
2021/07/08 16:40:50 scheduler task b09fb5d7 (flow 18c048b9): unloading val<.=5c20e4e5 35.4MiB>
2021/07/08 16:40:51 scheduler task b09fb5d7 (flow 18c048b9): unloaded val<.=5c20e4e5 35.4MiB>
2021/07/08 16:40:51 scheduler task b09fb5d7 (flow 18c048b9): unloaded val<.=f52ddb57 35.4MiB>
2021/07/08 16:40:51 scheduler task b09fb5d7 (flow 18c048b9): unloaded list<val<.=fece060a 35.8MiB> 35.8MiB>
2021/07/08 16:40:51 scheduler task b09fb5d7 (flow 18c048b9): unloading (try 0): successful, next state: complete
2021/07/08 16:40:51  <-  n100.r02.s054.Main.out_file 18c048b9 ok     exec 3m58s 35.8MiB
2021/07/08 16:40:51 n100.r02.s054.Main.out_file 18c048b9 n100/r02/n100.r02.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f2e78408b7520a905f10e28709d7659d071033b98efbfbfa12382b4241c3cbd4
	sha256:18c048b9f4dd52f617155dd9fbcddfaee34327e290106d34062d7cf66b60e672
	ec2-18-119-29-89.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b09fb5d7d900dbd31b6023970a7ff88df6573c2040d02229a4796053ada82bd4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s054_output"
	    wget -O "n100.r02.s054_output/n100.r02.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s054_output/n100.r02.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s054_output/n100.r02.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s054_output/n100.r02.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s054_output/n100.r02.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s054_output/n100.r02.s054.reference.fas" "n100.r02.s054_output/n100.r02.s054.fq1.fastq" "n100.r02.s054_output/n100.r02.s054.fq2.fastq" | samtools view -bS - > "n100.r02.s054_output/n100.r02.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s054_output/n100.r02.s054.untrimmed.sorted.bam" "n100.r02.s054_output/n100.r02.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s054_output/n100.r02.s054.untrimmed.sorted.bam" -b "n100.r02.s054_output/n100.r02.s054.primers.bed" -p "n100.r02.s054_output/n100.r02.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" "n100.r02.s054_output/n100.r02.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s054_output/n100.r02.s054.reference.fas" "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" > "n100.r02.s054_output/n100.r02.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s054_output/n100.r02.s054.reference.fas" --call-indels "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" > "n100.r02.s054_output/n100.r02.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s054_output/n100.r02.s054.trimmed.sorted.bam" > "n100.r02.s054_output/n100.r02.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s054_output/n100.r02.s054.depth.txt" "n100.r02.s054_output/n100.r02.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s054_output/n100.r02.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s054_output/n100.r02.s054.reference.fas" | bcftools consensus -m "n100.r02.s054_output/n100.r02.s054.low_depth.tsv" tmp.vcf.gz > "n100.r02.s054_output/n100.r02.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fece060a780836f81681142486821946e55ae8bc491d7b23d1b59f39831d0118 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.8MiB max=127.4MiB
	    disk mean=8.9MiB max=35.8MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 16:40:51 scheduler task f4d59843 (flow 9d334673): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s054.tar.gz resources {}
2021/07/08 16:40:51  ->  n100.r02.s054.Main.cp_out_file 9d334673 exec extern s3://niema-test/n100/r02/n100.r02.s054.tar.gz 35.8MiB
2021/07/08 16:40:51 scheduler task c76884d7 (flow 01d0188a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4840261850c02bbb2e123f760dbeecc18ca0db1752118fb82b694e433f5662ff -> s3://niema-test/n100/r02/n100.r02.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:40:51  <-  n100.r02.s065.Main.cp_out_file 01d0188a ok   extern 0s 35.7MiB
2021/07/08 16:40:51 scheduler task 76cde106 (flow 93b0f22c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:27e3f14be2151a7a51c2be3f351b6e3a4205770f7bdbad5f127ccb5a8fbc757c -> s3://niema-test/n100/r02/n100.r02.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:40:51  <-  n100.r02.s039.Main.cp_out_file 93b0f22c ok   extern 0s 35.7MiB
2021/07/08 16:40:51 scheduler task 75a8daab (flow 9428634f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bc56e60f57233078cb069cc62f62f01327b20b6d90b1bdee6fb5eb715c5e537d -> s3://niema-test/n100/r02/n100.r02.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:40:51  <-  n100.r02.s024.Main.cp_out_file 9428634f ok   extern 0s 35.7MiB
2021/07/08 16:40:51 scheduler task f4d59843 (flow 9d334673): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fece060a780836f81681142486821946e55ae8bc491d7b23d1b59f39831d0118 -> s3://niema-test/n100/r02/n100.r02.s054.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:40:51  <-  n100.r02.s054.Main.cp_out_file 9d334673 ok   extern 0s 35.8MiB
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): promoting objects (try 0): started
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): retrieving diagnostic output (try 0): started
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): retrieving result (try 0): started
2021/07/08 16:41:52 scheduler task 9b94a5e4 (flow 834f80b2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:41:53 scheduler task 9b94a5e4 (flow 834f80b2): transferring output (try 0): started
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloading (try 0): started
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloading list<val<.=525fa7ce 35.7MiB> 35.7MiB>
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloading val<.=ebf1d370 35.4MiB>
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloading val<.=70b47718 35.4MiB>
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloaded list<val<.=525fa7ce 35.7MiB> 35.7MiB>
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloaded val<.=ebf1d370 35.4MiB>
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloaded val<.=70b47718 35.4MiB>
2021/07/08 16:41:54 scheduler task 9b94a5e4 (flow 834f80b2): unloading (try 0): successful, next state: complete
2021/07/08 16:41:54  <-  n100.r02.s030.Main.out_file 834f80b2 ok     exec 4m52s 35.7MiB
2021/07/08 16:41:54 n100.r02.s030.Main.out_file 834f80b2 n100/r02/n100.r02.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:676193a7b3b11277bdba173fdd4dc934f1c99d9f8391cb9f60eee1457bdeee11
	sha256:834f80b2d32cc5c72b0e6d7c9c67c79234be7b3db561db3988abc214b1035f3f
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9b94a5e42f035d783818627d252777ff1fc85cbf3a507830bbfdc04a658d8d18
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s030_output"
	    wget -O "n100.r02.s030_output/n100.r02.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s030_output/n100.r02.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s030_output/n100.r02.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s030_output/n100.r02.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s030_output/n100.r02.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s030_output/n100.r02.s030.reference.fas" "n100.r02.s030_output/n100.r02.s030.fq1.fastq" "n100.r02.s030_output/n100.r02.s030.fq2.fastq" | samtools view -bS - > "n100.r02.s030_output/n100.r02.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s030_output/n100.r02.s030.untrimmed.sorted.bam" "n100.r02.s030_output/n100.r02.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s030_output/n100.r02.s030.untrimmed.sorted.bam" -b "n100.r02.s030_output/n100.r02.s030.primers.bed" -p "n100.r02.s030_output/n100.r02.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" "n100.r02.s030_output/n100.r02.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s030_output/n100.r02.s030.reference.fas" "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" > "n100.r02.s030_output/n100.r02.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s030_output/n100.r02.s030.reference.fas" --call-indels "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" > "n100.r02.s030_output/n100.r02.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s030_output/n100.r02.s030.trimmed.sorted.bam" > "n100.r02.s030_output/n100.r02.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s030_output/n100.r02.s030.depth.txt" "n100.r02.s030_output/n100.r02.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s030_output/n100.r02.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s030_output/n100.r02.s030.reference.fas" | bcftools consensus -m "n100.r02.s030_output/n100.r02.s030.low_depth.tsv" tmp.vcf.gz > "n100.r02.s030_output/n100.r02.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:525fa7ce78b31970ab8de740edaf1d876a905cc6ca82b6ddf20ab27751b6a6dd 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=127.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 16:41:54 scheduler task 25d7a106 (flow 93ed1c02): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s030.tar.gz resources {}
2021/07/08 16:41:54  ->  n100.r02.s030.Main.cp_out_file 93ed1c02 exec extern s3://niema-test/n100/r02/n100.r02.s030.tar.gz 35.7MiB
2021/07/08 16:41:55 scheduler task 25d7a106 (flow 93ed1c02): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:525fa7ce78b31970ab8de740edaf1d876a905cc6ca82b6ddf20ab27751b6a6dd -> s3://niema-test/n100/r02/n100.r02.s030.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:41:55  <-  n100.r02.s030.Main.cp_out_file 93ed1c02 ok   extern 0s 35.7MiB
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): promoting objects (try 0): started
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): retrieving diagnostic output (try 0): started
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): retrieving result (try 0): started
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:41:59 scheduler task fd672bab (flow d90e3629): transferring output (try 0): started
2021/07/08 16:41:59 scheduler task 7e9cd126 (flow ac5dc48d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:41:59 scheduler task 7e9cd126 (flow ac5dc48d): promoting objects (try 0): started
2021/07/08 16:41:59 scheduler task 7e9cd126 (flow ac5dc48d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:41:59 scheduler task 7e9cd126 (flow ac5dc48d): retrieving diagnostic output (try 0): started
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): promoting objects (try 0): started
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): promoting objects (try 0): started
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): retrieving result (try 0): started
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloading (try 0): started
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloading list<val<.=db290f1b 35.7MiB> 35.7MiB>
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloading val<.=25db5dd9 35.4MiB>
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloading val<.=0b593648 35.4MiB>
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): retrieving diagnostic output (try 0): started
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): retrieving diagnostic output (try 0): started
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloaded list<val<.=db290f1b 35.7MiB> 35.7MiB>
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloaded val<.=25db5dd9 35.4MiB>
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): transferring output (try 0): started
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloaded val<.=0b593648 35.4MiB>
2021/07/08 16:42:00 scheduler task fd672bab (flow d90e3629): unloading (try 0): successful, next state: complete
2021/07/08 16:42:00  <-  n100.r02.s049.Main.out_file d90e3629 ok     exec 4m59s 35.7MiB
2021/07/08 16:42:00 n100.r02.s049.Main.out_file d90e3629 n100/r02/n100.r02.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c05954518e517165f0322c29270c70da72cac11ffa4419556de04f6245d905ef
	sha256:d90e36298eb02f65aa497578c200662fbc9ad367987e24eaa81afb02108f0a19
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd672bab5385bd50b3bb1a9d4c688848fe191cbf66bb5eb9363ac5cd4c8ed87e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s049_output"
	    wget -O "n100.r02.s049_output/n100.r02.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s049_output/n100.r02.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s049_output/n100.r02.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s049_output/n100.r02.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s049_output/n100.r02.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s049_output/n100.r02.s049.reference.fas" "n100.r02.s049_output/n100.r02.s049.fq1.fastq" "n100.r02.s049_output/n100.r02.s049.fq2.fastq" | samtools view -bS - > "n100.r02.s049_output/n100.r02.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s049_output/n100.r02.s049.untrimmed.sorted.bam" "n100.r02.s049_output/n100.r02.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s049_output/n100.r02.s049.untrimmed.sorted.bam" -b "n100.r02.s049_output/n100.r02.s049.primers.bed" -p "n100.r02.s049_output/n100.r02.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" "n100.r02.s049_output/n100.r02.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s049_output/n100.r02.s049.reference.fas" "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" > "n100.r02.s049_output/n100.r02.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s049_output/n100.r02.s049.reference.fas" --call-indels "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" > "n100.r02.s049_output/n100.r02.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s049_output/n100.r02.s049.trimmed.sorted.bam" > "n100.r02.s049_output/n100.r02.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s049_output/n100.r02.s049.depth.txt" "n100.r02.s049_output/n100.r02.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s049_output/n100.r02.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s049_output/n100.r02.s049.reference.fas" | bcftools consensus -m "n100.r02.s049_output/n100.r02.s049.low_depth.tsv" tmp.vcf.gz > "n100.r02.s049_output/n100.r02.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:db290f1be9fa81b6d20aa305634beb915aadfd25f1dd16f7f0b0188f98c25d3d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=126.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:42:00 scheduler task d3667107 (flow 691180c6): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s049.tar.gz resources {}
2021/07/08 16:42:00  ->  n100.r02.s049.Main.cp_out_file 691180c6 exec extern s3://niema-test/n100/r02/n100.r02.s049.tar.gz 35.7MiB
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): retrieving result (try 0): started
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): promoting objects (try 0): started
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): transferring output (try 0): started
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): retrieving result (try 0): started
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): retrieving diagnostic output (try 0): started
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:00 scheduler task 0b440a13 (flow 4a266829): transferring output (try 0): started
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloading (try 0): started
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloading list<val<.=a8d1a768 35.7MiB> 35.7MiB>
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloading val<.=7df20284 35.4MiB>
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloading val<.=0b9c7c8a 35.4MiB>
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): retrieving result (try 0): started
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloaded list<val<.=a8d1a768 35.7MiB> 35.7MiB>
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloaded val<.=0b9c7c8a 35.4MiB>
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloaded val<.=7df20284 35.4MiB>
2021/07/08 16:42:00 scheduler task 7e9cd126 (flow ac5dc48d): unloading (try 0): successful, next state: complete
2021/07/08 16:42:00  <-  n100.r02.s096.Main.out_file ac5dc48d ok     exec 4m59s 35.7MiB
2021/07/08 16:42:00 n100.r02.s096.Main.out_file ac5dc48d n100/r02/n100.r02.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d9008ad86d39831d600be07ae95dda9dded12525142101b8325045b5d4a38804
	sha256:ac5dc48d92e7d67f30c6795d4dfb1cfa96c9ca77548ebae5ab39f731a8eddd8d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7e9cd126f4bbfce16bd719e50a8aa14279224c9d529653ef9875b8734e51dd9a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s096_output"
	    wget -O "n100.r02.s096_output/n100.r02.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s096_output/n100.r02.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s096_output/n100.r02.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s096_output/n100.r02.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s096_output/n100.r02.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s096_output/n100.r02.s096.reference.fas" "n100.r02.s096_output/n100.r02.s096.fq1.fastq" "n100.r02.s096_output/n100.r02.s096.fq2.fastq" | samtools view -bS - > "n100.r02.s096_output/n100.r02.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s096_output/n100.r02.s096.untrimmed.sorted.bam" "n100.r02.s096_output/n100.r02.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s096_output/n100.r02.s096.untrimmed.sorted.bam" -b "n100.r02.s096_output/n100.r02.s096.primers.bed" -p "n100.r02.s096_output/n100.r02.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" "n100.r02.s096_output/n100.r02.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s096_output/n100.r02.s096.reference.fas" "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" > "n100.r02.s096_output/n100.r02.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s096_output/n100.r02.s096.reference.fas" --call-indels "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" > "n100.r02.s096_output/n100.r02.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s096_output/n100.r02.s096.trimmed.sorted.bam" > "n100.r02.s096_output/n100.r02.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s096_output/n100.r02.s096.depth.txt" "n100.r02.s096_output/n100.r02.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s096_output/n100.r02.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s096_output/n100.r02.s096.reference.fas" | bcftools consensus -m "n100.r02.s096_output/n100.r02.s096.low_depth.tsv" tmp.vcf.gz > "n100.r02.s096_output/n100.r02.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a8d1a768b6a9870438c0956440e2f6d86dcbd87745035425e7d5c74a0685edbb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 16:42:00 scheduler task 65666752 (flow e314d924): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s096.tar.gz resources {}
2021/07/08 16:42:00  ->  n100.r02.s096.Main.cp_out_file e314d924 exec extern s3://niema-test/n100/r02/n100.r02.s096.tar.gz 35.7MiB
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:00 scheduler task d06e59c3 (flow 57bcabea): transferring output (try 0): started
2021/07/08 16:42:00 scheduler task d3667107 (flow 691180c6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:db290f1be9fa81b6d20aa305634beb915aadfd25f1dd16f7f0b0188f98c25d3d -> s3://niema-test/n100/r02/n100.r02.s049.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:00  <-  n100.r02.s049.Main.cp_out_file 691180c6 ok   extern 0s 35.7MiB
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): unloading (try 0): started
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): unloading list<val<.=3c33a10a 35.8MiB> 35.8MiB>
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): unloading val<.=ab36b104 35.4MiB>
2021/07/08 16:42:00 scheduler task 4bda52eb (flow b3c6f94e): unloading val<.=1d16d152 35.4MiB>
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloading (try 0): started
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloading list<val<.=4bf0528a 35.7MiB> 35.7MiB>
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloading val<.=13c375ce 35.4MiB>
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloading val<.=80871512 35.4MiB>
2021/07/08 16:42:01 scheduler task 4bda52eb (flow b3c6f94e): unloaded list<val<.=3c33a10a 35.8MiB> 35.8MiB>
2021/07/08 16:42:01 scheduler task 4bda52eb (flow b3c6f94e): unloaded val<.=ab36b104 35.4MiB>
2021/07/08 16:42:01 scheduler task 4bda52eb (flow b3c6f94e): unloaded val<.=1d16d152 35.4MiB>
2021/07/08 16:42:01 scheduler task 4bda52eb (flow b3c6f94e): unloading (try 0): successful, next state: complete
2021/07/08 16:42:01  <-  n100.r02.s100.Main.out_file b3c6f94e ok     exec 5m0s 35.8MiB
2021/07/08 16:42:01 n100.r02.s100.Main.out_file b3c6f94e n100/r02/n100.r02.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:17fae3af9008dc501a95f316bbd8d02d3c228bfd1b542393f48be5afc75b524d
	sha256:b3c6f94ec4de79efc9c2a8de0623f83adf4e45f1d08ff5ccce01f5d2407c04c7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4bda52ebb15923da7809e2fee95d5cd30c613a3d0a0ceeb357c61eb55a2381a0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s100_output"
	    wget -O "n100.r02.s100_output/n100.r02.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s100_output/n100.r02.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s100_output/n100.r02.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s100_output/n100.r02.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s100_output/n100.r02.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s100_output/n100.r02.s100.reference.fas" "n100.r02.s100_output/n100.r02.s100.fq1.fastq" "n100.r02.s100_output/n100.r02.s100.fq2.fastq" | samtools view -bS - > "n100.r02.s100_output/n100.r02.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s100_output/n100.r02.s100.untrimmed.sorted.bam" "n100.r02.s100_output/n100.r02.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s100_output/n100.r02.s100.untrimmed.sorted.bam" -b "n100.r02.s100_output/n100.r02.s100.primers.bed" -p "n100.r02.s100_output/n100.r02.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" "n100.r02.s100_output/n100.r02.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s100_output/n100.r02.s100.reference.fas" "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" > "n100.r02.s100_output/n100.r02.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s100_output/n100.r02.s100.reference.fas" --call-indels "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" > "n100.r02.s100_output/n100.r02.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s100_output/n100.r02.s100.trimmed.sorted.bam" > "n100.r02.s100_output/n100.r02.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s100_output/n100.r02.s100.depth.txt" "n100.r02.s100_output/n100.r02.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s100_output/n100.r02.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s100_output/n100.r02.s100.reference.fas" | bcftools consensus -m "n100.r02.s100_output/n100.r02.s100.low_depth.tsv" tmp.vcf.gz > "n100.r02.s100_output/n100.r02.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3c33a10a35cdc6a66dfa92fc7b6c5b67ad1d23c7c722984954271b1edc195ef7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.5MiB
	    disk mean=11.9MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:01 scheduler task 1f2078ba (flow f98c1990): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s100.tar.gz resources {}
2021/07/08 16:42:01  ->  n100.r02.s100.Main.cp_out_file f98c1990 exec extern s3://niema-test/n100/r02/n100.r02.s100.tar.gz 35.8MiB
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloaded val<.=13c375ce 35.4MiB>
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloaded list<val<.=4bf0528a 35.7MiB> 35.7MiB>
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloaded val<.=80871512 35.4MiB>
2021/07/08 16:42:01 scheduler task 0b440a13 (flow 4a266829): unloading (try 0): successful, next state: complete
2021/07/08 16:42:01  <-  n100.r02.s066.Main.out_file 4a266829 ok     exec 5m0s 35.7MiB
2021/07/08 16:42:01 n100.r02.s066.Main.out_file 4a266829 n100/r02/n100.r02.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d4a61b2bab6ae849996b29158dae17017d499ee4fde9b09221e0246943c3a0a5
	sha256:4a266829434cf5a04e9317bfe696aeb27e04a9b698316887a7c2583ec2221039
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b440a1342477cd23abf1d62afb5aa917be73e5b3ba777ad281d5411a349a564
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s066_output"
	    wget -O "n100.r02.s066_output/n100.r02.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s066_output/n100.r02.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s066_output/n100.r02.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s066_output/n100.r02.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s066_output/n100.r02.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s066_output/n100.r02.s066.reference.fas" "n100.r02.s066_output/n100.r02.s066.fq1.fastq" "n100.r02.s066_output/n100.r02.s066.fq2.fastq" | samtools view -bS - > "n100.r02.s066_output/n100.r02.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s066_output/n100.r02.s066.untrimmed.sorted.bam" "n100.r02.s066_output/n100.r02.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s066_output/n100.r02.s066.untrimmed.sorted.bam" -b "n100.r02.s066_output/n100.r02.s066.primers.bed" -p "n100.r02.s066_output/n100.r02.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" "n100.r02.s066_output/n100.r02.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s066_output/n100.r02.s066.reference.fas" "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" > "n100.r02.s066_output/n100.r02.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s066_output/n100.r02.s066.reference.fas" --call-indels "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" > "n100.r02.s066_output/n100.r02.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s066_output/n100.r02.s066.trimmed.sorted.bam" > "n100.r02.s066_output/n100.r02.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s066_output/n100.r02.s066.depth.txt" "n100.r02.s066_output/n100.r02.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s066_output/n100.r02.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s066_output/n100.r02.s066.reference.fas" | bcftools consensus -m "n100.r02.s066_output/n100.r02.s066.low_depth.tsv" tmp.vcf.gz > "n100.r02.s066_output/n100.r02.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4bf0528ab52ad116544e232780ed58a26926a92e2a7f681f7091f442d50a25f0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=127.7MiB
	    disk mean=10.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:01 scheduler task ff55c3e9 (flow b487b940): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s066.tar.gz resources {}
2021/07/08 16:42:01  ->  n100.r02.s066.Main.cp_out_file b487b940 exec extern s3://niema-test/n100/r02/n100.r02.s066.tar.gz 35.7MiB
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): promoting objects (try 0): started
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloading (try 0): started
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloading list<val<.=f1eb7e94 35.7MiB> 35.7MiB>
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloading val<.=c6a201d7 35.4MiB>
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloading val<.=e829e05a 35.4MiB>
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): retrieving diagnostic output (try 0): started
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloaded list<val<.=f1eb7e94 35.7MiB> 35.7MiB>
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloaded val<.=c6a201d7 35.4MiB>
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloaded val<.=e829e05a 35.4MiB>
2021/07/08 16:42:01 scheduler task d06e59c3 (flow 57bcabea): unloading (try 0): successful, next state: complete
2021/07/08 16:42:01  <-  n100.r02.s007.Main.out_file 57bcabea ok     exec 5m0s 35.7MiB
2021/07/08 16:42:01 n100.r02.s007.Main.out_file 57bcabea n100/r02/n100.r02.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7f99bdb4202b5da60243db3e18ee73107415a5685fb90792e4eab4bf32a5a420
	sha256:57bcabeaac8c70dc84e4d359b26211005abc8006aeb186139d650b93c2afcb8b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d06e59c3865188fab15a3f1d6ea2d56239e4250593907f42555bf89b4cd94134
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s007_output"
	    wget -O "n100.r02.s007_output/n100.r02.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s007_output/n100.r02.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s007_output/n100.r02.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s007_output/n100.r02.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s007_output/n100.r02.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s007_output/n100.r02.s007.reference.fas" "n100.r02.s007_output/n100.r02.s007.fq1.fastq" "n100.r02.s007_output/n100.r02.s007.fq2.fastq" | samtools view -bS - > "n100.r02.s007_output/n100.r02.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s007_output/n100.r02.s007.untrimmed.sorted.bam" "n100.r02.s007_output/n100.r02.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s007_output/n100.r02.s007.untrimmed.sorted.bam" -b "n100.r02.s007_output/n100.r02.s007.primers.bed" -p "n100.r02.s007_output/n100.r02.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" "n100.r02.s007_output/n100.r02.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s007_output/n100.r02.s007.reference.fas" "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" > "n100.r02.s007_output/n100.r02.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s007_output/n100.r02.s007.reference.fas" --call-indels "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" > "n100.r02.s007_output/n100.r02.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s007_output/n100.r02.s007.trimmed.sorted.bam" > "n100.r02.s007_output/n100.r02.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s007_output/n100.r02.s007.depth.txt" "n100.r02.s007_output/n100.r02.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s007_output/n100.r02.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s007_output/n100.r02.s007.reference.fas" | bcftools consensus -m "n100.r02.s007_output/n100.r02.s007.low_depth.tsv" tmp.vcf.gz > "n100.r02.s007_output/n100.r02.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f1eb7e945c25b62c43c1f34d1da8f064017134c7028b023dcb965c0b8e78db53 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=123.6MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:42:01 scheduler task 9d48ea90 (flow 3b125503): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s007.tar.gz resources {}
2021/07/08 16:42:01  ->  n100.r02.s007.Main.cp_out_file 3b125503 exec extern s3://niema-test/n100/r02/n100.r02.s007.tar.gz 35.7MiB
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): promoting objects (try 0): started
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): retrieving result (try 0): started
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): promoting objects (try 0): started
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): retrieving diagnostic output (try 0): started
2021/07/08 16:42:01 scheduler task fde90f32 (flow 470f3008): transferring output (try 0): started
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): retrieving diagnostic output (try 0): started
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:01 scheduler task 65666752 (flow e314d924): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a8d1a768b6a9870438c0956440e2f6d86dcbd87745035425e7d5c74a0685edbb -> s3://niema-test/n100/r02/n100.r02.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:01  <-  n100.r02.s096.Main.cp_out_file e314d924 ok   extern 0s 35.7MiB
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): retrieving result (try 0): started
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): retrieving result (try 0): started
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:01 scheduler task 506303dc (flow 1e4c353c): transferring output (try 0): started
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:01 scheduler task 591fadf3 (flow 9edef856): transferring output (try 0): started
2021/07/08 16:42:02 scheduler task 1f2078ba (flow f98c1990): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3c33a10a35cdc6a66dfa92fc7b6c5b67ad1d23c7c722984954271b1edc195ef7 -> s3://niema-test/n100/r02/n100.r02.s100.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:02  <-  n100.r02.s100.Main.cp_out_file f98c1990 ok   extern 0s 35.8MiB
2021/07/08 16:42:02 scheduler task ff55c3e9 (flow b487b940): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4bf0528ab52ad116544e232780ed58a26926a92e2a7f681f7091f442d50a25f0 -> s3://niema-test/n100/r02/n100.r02.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:02  <-  n100.r02.s066.Main.cp_out_file b487b940 ok   extern 0s 35.7MiB
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloading (try 0): started
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloading list<val<.=26500719 35.7MiB> 35.7MiB>
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloading val<.=4be156ec 35.4MiB>
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloading val<.=9e2ff304 35.4MiB>
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloaded list<val<.=26500719 35.7MiB> 35.7MiB>
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloaded val<.=4be156ec 35.4MiB>
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloaded val<.=9e2ff304 35.4MiB>
2021/07/08 16:42:02 scheduler task fde90f32 (flow 470f3008): unloading (try 0): successful, next state: complete
2021/07/08 16:42:02  <-  n100.r02.s076.Main.out_file 470f3008 ok     exec 5m1s 35.7MiB
2021/07/08 16:42:02 n100.r02.s076.Main.out_file 470f3008 n100/r02/n100.r02.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cb4d99ab36abecd33ba31a413cc1731e1a5ca0442a6dbfaeb362198cd6a9a5ab
	sha256:470f30086805c1b10e2e48d5f9da9238f0a2bb580711703aedc39b719d0e2865
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fde90f3265cb60d9604dea8605028088afb20098a820d8abcff5c4d4c434ddd7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s076_output"
	    wget -O "n100.r02.s076_output/n100.r02.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s076_output/n100.r02.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s076_output/n100.r02.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s076_output/n100.r02.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s076_output/n100.r02.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s076_output/n100.r02.s076.reference.fas" "n100.r02.s076_output/n100.r02.s076.fq1.fastq" "n100.r02.s076_output/n100.r02.s076.fq2.fastq" | samtools view -bS - > "n100.r02.s076_output/n100.r02.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s076_output/n100.r02.s076.untrimmed.sorted.bam" "n100.r02.s076_output/n100.r02.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s076_output/n100.r02.s076.untrimmed.sorted.bam" -b "n100.r02.s076_output/n100.r02.s076.primers.bed" -p "n100.r02.s076_output/n100.r02.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" "n100.r02.s076_output/n100.r02.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s076_output/n100.r02.s076.reference.fas" "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" > "n100.r02.s076_output/n100.r02.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s076_output/n100.r02.s076.reference.fas" --call-indels "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" > "n100.r02.s076_output/n100.r02.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s076_output/n100.r02.s076.trimmed.sorted.bam" > "n100.r02.s076_output/n100.r02.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s076_output/n100.r02.s076.depth.txt" "n100.r02.s076_output/n100.r02.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s076_output/n100.r02.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s076_output/n100.r02.s076.reference.fas" | bcftools consensus -m "n100.r02.s076_output/n100.r02.s076.low_depth.tsv" tmp.vcf.gz > "n100.r02.s076_output/n100.r02.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2650071966d3f9e7e8cb0787569adca6a9f8436e203defa2f0ef705754a11092 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=128.3MiB
	    disk mean=8.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:02 scheduler task 5b644667 (flow 1eba1d59): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s076.tar.gz resources {}
2021/07/08 16:42:02  ->  n100.r02.s076.Main.cp_out_file 1eba1d59 exec extern s3://niema-test/n100/r02/n100.r02.s076.tar.gz 35.7MiB
2021/07/08 16:42:02 scheduler task 9d48ea90 (flow 3b125503): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f1eb7e945c25b62c43c1f34d1da8f064017134c7028b023dcb965c0b8e78db53 -> s3://niema-test/n100/r02/n100.r02.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:02  <-  n100.r02.s007.Main.cp_out_file 3b125503 ok   extern 0s 35.7MiB
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): promoting objects (try 0): started
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): retrieving diagnostic output (try 0): started
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloading (try 0): started
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloading list<val<.=a72b08a9 35.7MiB> 35.7MiB>
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloading val<.=cc88be47 35.4MiB>
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloading val<.=543dbfd2 35.4MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloading (try 0): started
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloading list<val<.=a77da284 35.7MiB> 35.7MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloading val<.=3f995b9e 35.4MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloading val<.=2489b0ab 35.4MiB>
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloaded val<.=543dbfd2 35.4MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloaded val<.=2489b0ab 35.4MiB>
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloaded val<.=cc88be47 35.4MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloaded val<.=3f995b9e 35.4MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloaded list<val<.=a77da284 35.7MiB> 35.7MiB>
2021/07/08 16:42:02 scheduler task 591fadf3 (flow 9edef856): unloading (try 0): successful, next state: complete
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloaded list<val<.=a72b08a9 35.7MiB> 35.7MiB>
2021/07/08 16:42:02 scheduler task 506303dc (flow 1e4c353c): unloading (try 0): successful, next state: complete
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:02  <-  n100.r02.s087.Main.out_file 9edef856 ok     exec 5m2s 35.7MiB
2021/07/08 16:42:02 n100.r02.s087.Main.out_file 9edef856 n100/r02/n100.r02.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1ce95f53f7ce927286b24742fc588103328602394d9abf227c62160f6747bc89
	sha256:9edef8560ef9d6825ec11af53836905d70b969f9db20241402ea80062feac7a8
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/591fadf363b0aa39f5dd90d0856de075c43a9a486b4238e691101f10f8c0fd41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s087_output"
	    wget -O "n100.r02.s087_output/n100.r02.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s087_output/n100.r02.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s087_output/n100.r02.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s087_output/n100.r02.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s087_output/n100.r02.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s087_output/n100.r02.s087.reference.fas" "n100.r02.s087_output/n100.r02.s087.fq1.fastq" "n100.r02.s087_output/n100.r02.s087.fq2.fastq" | samtools view -bS - > "n100.r02.s087_output/n100.r02.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s087_output/n100.r02.s087.untrimmed.sorted.bam" "n100.r02.s087_output/n100.r02.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s087_output/n100.r02.s087.untrimmed.sorted.bam" -b "n100.r02.s087_output/n100.r02.s087.primers.bed" -p "n100.r02.s087_output/n100.r02.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" "n100.r02.s087_output/n100.r02.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s087_output/n100.r02.s087.reference.fas" "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" > "n100.r02.s087_output/n100.r02.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s087_output/n100.r02.s087.reference.fas" --call-indels "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" > "n100.r02.s087_output/n100.r02.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s087_output/n100.r02.s087.trimmed.sorted.bam" > "n100.r02.s087_output/n100.r02.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s087_output/n100.r02.s087.depth.txt" "n100.r02.s087_output/n100.r02.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s087_output/n100.r02.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s087_output/n100.r02.s087.reference.fas" | bcftools consensus -m "n100.r02.s087_output/n100.r02.s087.low_depth.tsv" tmp.vcf.gz > "n100.r02.s087_output/n100.r02.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a77da2846c933dfcd2639a7370e9b79b69787ed131c524f22cb64b7919e57ae2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=128.2MiB
	    disk mean=6.1MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 16:42:02 scheduler task 0f0d569d (flow 883c8d8b): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s087.tar.gz resources {}
2021/07/08 16:42:02  ->  n100.r02.s087.Main.cp_out_file 883c8d8b exec extern s3://niema-test/n100/r02/n100.r02.s087.tar.gz 35.7MiB
2021/07/08 16:42:02  <-  n100.r02.s016.Main.out_file 1e4c353c ok     exec 5m2s 35.7MiB
2021/07/08 16:42:02 n100.r02.s016.Main.out_file 1e4c353c n100/r02/n100.r02.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d75cc2f47a9dcf599b4cc6e5704d4890c1b767f759695733bd5501331fe70393
	sha256:1e4c353c1aa0653ba57f7471950ee248bfb081e417497db8952979e64d07d90d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/506303dc0559b9071e64be7dc745160f160c021da07d0bb7c4928b49266a5f73
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s016_output"
	    wget -O "n100.r02.s016_output/n100.r02.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s016_output/n100.r02.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s016_output/n100.r02.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s016_output/n100.r02.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s016_output/n100.r02.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s016_output/n100.r02.s016.reference.fas" "n100.r02.s016_output/n100.r02.s016.fq1.fastq" "n100.r02.s016_output/n100.r02.s016.fq2.fastq" | samtools view -bS - > "n100.r02.s016_output/n100.r02.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s016_output/n100.r02.s016.untrimmed.sorted.bam" "n100.r02.s016_output/n100.r02.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s016_output/n100.r02.s016.untrimmed.sorted.bam" -b "n100.r02.s016_output/n100.r02.s016.primers.bed" -p "n100.r02.s016_output/n100.r02.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" "n100.r02.s016_output/n100.r02.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s016_output/n100.r02.s016.reference.fas" "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" > "n100.r02.s016_output/n100.r02.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s016_output/n100.r02.s016.reference.fas" --call-indels "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" > "n100.r02.s016_output/n100.r02.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s016_output/n100.r02.s016.trimmed.sorted.bam" > "n100.r02.s016_output/n100.r02.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s016_output/n100.r02.s016.depth.txt" "n100.r02.s016_output/n100.r02.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s016_output/n100.r02.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s016_output/n100.r02.s016.reference.fas" | bcftools consensus -m "n100.r02.s016_output/n100.r02.s016.low_depth.tsv" tmp.vcf.gz > "n100.r02.s016_output/n100.r02.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a72b08a9fcf73045e85627b6330813389154f4532e9a76548cfb85c950af9572 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=128.7MiB
	    disk mean=7.4MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:02 scheduler task faf3379f (flow 19320d0c): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s016.tar.gz resources {}
2021/07/08 16:42:02  ->  n100.r02.s016.Main.cp_out_file 19320d0c exec extern s3://niema-test/n100/r02/n100.r02.s016.tar.gz 35.7MiB
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): retrieving result (try 0): started
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:02 scheduler task 2feb3f25 (flow 26422009): transferring output (try 0): started
2021/07/08 16:42:02 scheduler task 8f000427 (flow 2bf052bb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:02 scheduler task 8f000427 (flow 2bf052bb): promoting objects (try 0): started
2021/07/08 16:42:02 scheduler task 8f000427 (flow 2bf052bb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:02 scheduler task 5b644667 (flow 1eba1d59): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2650071966d3f9e7e8cb0787569adca6a9f8436e203defa2f0ef705754a11092 -> s3://niema-test/n100/r02/n100.r02.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:02  <-  n100.r02.s076.Main.cp_out_file 1eba1d59 ok   extern 0s 35.7MiB
2021/07/08 16:42:02 scheduler task 8f000427 (flow 2bf052bb): retrieving diagnostic output (try 0): started
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): retrieving result (try 0): started
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): transferring output (try 0): started
2021/07/08 16:42:03 scheduler task 0f0d569d (flow 883c8d8b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a77da2846c933dfcd2639a7370e9b79b69787ed131c524f22cb64b7919e57ae2 -> s3://niema-test/n100/r02/n100.r02.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:03  <-  n100.r02.s087.Main.cp_out_file 883c8d8b ok   extern 0s 35.7MiB
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): promoting objects (try 0): started
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloading (try 0): started
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloading list<val<.=9136bea4 35.7MiB> 35.7MiB>
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloading val<.=5ecdce26 35.4MiB>
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloading val<.=40e5ebcb 35.4MiB>
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): retrieving diagnostic output (try 0): started
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloaded list<val<.=9136bea4 35.7MiB> 35.7MiB>
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloaded val<.=40e5ebcb 35.4MiB>
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloaded val<.=5ecdce26 35.4MiB>
2021/07/08 16:42:03 scheduler task 2feb3f25 (flow 26422009): unloading (try 0): successful, next state: complete
2021/07/08 16:42:03  <-  n100.r02.s097.Main.out_file 26422009 ok     exec 5m2s 35.7MiB
2021/07/08 16:42:03 n100.r02.s097.Main.out_file 26422009 n100/r02/n100.r02.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:534717647de871fdd975393c31a823fd77568a121445cd91bf6204e62c4398be
	sha256:26422009eac38557cf1901ea9872c2f462ee04ed9f8251411bfe43abc2a845bb
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2feb3f251c5c2f89ace59a1c7302f9b33326235eb9ed41bb5afa737e2d70dcd4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s097_output"
	    wget -O "n100.r02.s097_output/n100.r02.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s097_output/n100.r02.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s097_output/n100.r02.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s097_output/n100.r02.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s097_output/n100.r02.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s097_output/n100.r02.s097.reference.fas" "n100.r02.s097_output/n100.r02.s097.fq1.fastq" "n100.r02.s097_output/n100.r02.s097.fq2.fastq" | samtools view -bS - > "n100.r02.s097_output/n100.r02.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s097_output/n100.r02.s097.untrimmed.sorted.bam" "n100.r02.s097_output/n100.r02.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s097_output/n100.r02.s097.untrimmed.sorted.bam" -b "n100.r02.s097_output/n100.r02.s097.primers.bed" -p "n100.r02.s097_output/n100.r02.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" "n100.r02.s097_output/n100.r02.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s097_output/n100.r02.s097.reference.fas" "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" > "n100.r02.s097_output/n100.r02.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s097_output/n100.r02.s097.reference.fas" --call-indels "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" > "n100.r02.s097_output/n100.r02.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s097_output/n100.r02.s097.trimmed.sorted.bam" > "n100.r02.s097_output/n100.r02.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s097_output/n100.r02.s097.depth.txt" "n100.r02.s097_output/n100.r02.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s097_output/n100.r02.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s097_output/n100.r02.s097.reference.fas" | bcftools consensus -m "n100.r02.s097_output/n100.r02.s097.low_depth.tsv" tmp.vcf.gz > "n100.r02.s097_output/n100.r02.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9136bea40e39c3172a136c0a7ceccfea0e8a27c48db32c9e1eaded40331046a0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=127.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=520B max=2.0KiB
2021/07/08 16:42:03 scheduler task d1baef07 (flow 8d4652b8): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s097.tar.gz resources {}
2021/07/08 16:42:03  ->  n100.r02.s097.Main.cp_out_file 8d4652b8 exec extern s3://niema-test/n100/r02/n100.r02.s097.tar.gz 35.7MiB
2021/07/08 16:42:03 scheduler task faf3379f (flow 19320d0c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a72b08a9fcf73045e85627b6330813389154f4532e9a76548cfb85c950af9572 -> s3://niema-test/n100/r02/n100.r02.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:03  <-  n100.r02.s016.Main.cp_out_file 19320d0c ok   extern 0s 35.7MiB
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): retrieving result (try 0): started
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:03 scheduler task f748f409 (flow 46797130): transferring output (try 0): started
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloading (try 0): started
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloading list<val<.=3db5ae89 35.7MiB> 35.7MiB>
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloading val<.=b5b72843 35.4MiB>
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloading val<.=444e8f40 35.4MiB>
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloaded list<val<.=3db5ae89 35.7MiB> 35.7MiB>
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloaded val<.=444e8f40 35.4MiB>
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloaded val<.=b5b72843 35.4MiB>
2021/07/08 16:42:03 scheduler task 8f000427 (flow 2bf052bb): unloading (try 0): successful, next state: complete
2021/07/08 16:42:03  <-  n100.r02.s021.Main.out_file 2bf052bb ok     exec 5m3s 35.7MiB
2021/07/08 16:42:03 n100.r02.s021.Main.out_file 2bf052bb n100/r02/n100.r02.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:21b73f38de78e63fb0fed01bb5c9db6d7bb0b4fe968f2923f574763c43ec04bc
	sha256:2bf052bb7d41b8101d22ca9145d70a8c564290e2240edaf228f3d98ef30efe9e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f000427dba4a0ad0c0c3f62e3b4a5ce5a24e27ae64725b51e23664e06e63af6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s021_output"
	    wget -O "n100.r02.s021_output/n100.r02.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s021_output/n100.r02.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s021_output/n100.r02.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s021_output/n100.r02.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s021_output/n100.r02.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s021_output/n100.r02.s021.reference.fas" "n100.r02.s021_output/n100.r02.s021.fq1.fastq" "n100.r02.s021_output/n100.r02.s021.fq2.fastq" | samtools view -bS - > "n100.r02.s021_output/n100.r02.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s021_output/n100.r02.s021.untrimmed.sorted.bam" "n100.r02.s021_output/n100.r02.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s021_output/n100.r02.s021.untrimmed.sorted.bam" -b "n100.r02.s021_output/n100.r02.s021.primers.bed" -p "n100.r02.s021_output/n100.r02.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" "n100.r02.s021_output/n100.r02.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s021_output/n100.r02.s021.reference.fas" "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" > "n100.r02.s021_output/n100.r02.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s021_output/n100.r02.s021.reference.fas" --call-indels "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" > "n100.r02.s021_output/n100.r02.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s021_output/n100.r02.s021.trimmed.sorted.bam" > "n100.r02.s021_output/n100.r02.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s021_output/n100.r02.s021.depth.txt" "n100.r02.s021_output/n100.r02.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s021_output/n100.r02.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s021_output/n100.r02.s021.reference.fas" | bcftools consensus -m "n100.r02.s021_output/n100.r02.s021.low_depth.tsv" tmp.vcf.gz > "n100.r02.s021_output/n100.r02.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3db5ae89603a068666db64096c79709243a8d464842d964bfe00db61741a44a4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=875B max=2.1KiB
2021/07/08 16:42:03 scheduler task d87cbd9f (flow bb7f46bf): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s021.tar.gz resources {}
2021/07/08 16:42:03  ->  n100.r02.s021.Main.cp_out_file bb7f46bf exec extern s3://niema-test/n100/r02/n100.r02.s021.tar.gz 35.7MiB
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloading (try 0): started
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloading list<val<.=187224c8 35.7MiB> 35.7MiB>
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloading val<.=7376e524 35.4MiB>
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloading val<.=251e0525 35.4MiB>
2021/07/08 16:42:04 scheduler task d1baef07 (flow 8d4652b8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9136bea40e39c3172a136c0a7ceccfea0e8a27c48db32c9e1eaded40331046a0 -> s3://niema-test/n100/r02/n100.r02.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:04  <-  n100.r02.s097.Main.cp_out_file 8d4652b8 ok   extern 0s 35.7MiB
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloaded val<.=251e0525 35.4MiB>
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloaded val<.=7376e524 35.4MiB>
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloaded list<val<.=187224c8 35.7MiB> 35.7MiB>
2021/07/08 16:42:04 scheduler task f748f409 (flow 46797130): unloading (try 0): successful, next state: complete
2021/07/08 16:42:04  <-  n100.r02.s019.Main.out_file 46797130 ok     exec 5m3s 35.7MiB
2021/07/08 16:42:04 n100.r02.s019.Main.out_file 46797130 n100/r02/n100.r02.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8d734c84b7b5129d27b3845398c7713f06530bf8895c0f8045a2f60b5b838f9
	sha256:467971303631e3dc41b0d85d1f00bc36942e6b488448cfbd4526c5b632d43992
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f748f409875712b07df8a270738129613408c2d59eef18379c731c2c190bdb86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s019_output"
	    wget -O "n100.r02.s019_output/n100.r02.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s019_output/n100.r02.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s019_output/n100.r02.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s019_output/n100.r02.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s019_output/n100.r02.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s019_output/n100.r02.s019.reference.fas" "n100.r02.s019_output/n100.r02.s019.fq1.fastq" "n100.r02.s019_output/n100.r02.s019.fq2.fastq" | samtools view -bS - > "n100.r02.s019_output/n100.r02.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s019_output/n100.r02.s019.untrimmed.sorted.bam" "n100.r02.s019_output/n100.r02.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s019_output/n100.r02.s019.untrimmed.sorted.bam" -b "n100.r02.s019_output/n100.r02.s019.primers.bed" -p "n100.r02.s019_output/n100.r02.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" "n100.r02.s019_output/n100.r02.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s019_output/n100.r02.s019.reference.fas" "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" > "n100.r02.s019_output/n100.r02.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s019_output/n100.r02.s019.reference.fas" --call-indels "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" > "n100.r02.s019_output/n100.r02.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s019_output/n100.r02.s019.trimmed.sorted.bam" > "n100.r02.s019_output/n100.r02.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s019_output/n100.r02.s019.depth.txt" "n100.r02.s019_output/n100.r02.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s019_output/n100.r02.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s019_output/n100.r02.s019.reference.fas" | bcftools consensus -m "n100.r02.s019_output/n100.r02.s019.low_depth.tsv" tmp.vcf.gz > "n100.r02.s019_output/n100.r02.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:187224c8a792f0d20980e3f11cfaf2e1f1ef5d4d4576562cef4122f5ed97fc5d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=126.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:42:04 scheduler task 0c0b11b2 (flow 279dfd71): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s019.tar.gz resources {}
2021/07/08 16:42:04  ->  n100.r02.s019.Main.cp_out_file 279dfd71 exec extern s3://niema-test/n100/r02/n100.r02.s019.tar.gz 35.7MiB
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): promoting objects (try 0): started
2021/07/08 16:42:04 scheduler task d87cbd9f (flow bb7f46bf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3db5ae89603a068666db64096c79709243a8d464842d964bfe00db61741a44a4 -> s3://niema-test/n100/r02/n100.r02.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:04  <-  n100.r02.s021.Main.cp_out_file bb7f46bf ok   extern 0s 35.7MiB
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): retrieving diagnostic output (try 0): started
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): retrieving result (try 0): started
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:04 scheduler task 5b2e9034 (flow 63c5e72c): transferring output (try 0): started
2021/07/08 16:42:04 scheduler task e81d51f7 (flow 01aa42bd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:04 scheduler task e81d51f7 (flow 01aa42bd): promoting objects (try 0): started
2021/07/08 16:42:04 scheduler task c9165e2e (flow e2043d0a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:04 scheduler task c9165e2e (flow e2043d0a): promoting objects (try 0): started
2021/07/08 16:42:04 scheduler task e81d51f7 (flow 01aa42bd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:04 scheduler task e81d51f7 (flow 01aa42bd): retrieving diagnostic output (try 0): started
2021/07/08 16:42:04 scheduler task 0c0b11b2 (flow 279dfd71): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:187224c8a792f0d20980e3f11cfaf2e1f1ef5d4d4576562cef4122f5ed97fc5d -> s3://niema-test/n100/r02/n100.r02.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:04  <-  n100.r02.s019.Main.cp_out_file 279dfd71 ok   extern 0s 35.7MiB
2021/07/08 16:42:04 scheduler task c9165e2e (flow e2043d0a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:04 scheduler task c9165e2e (flow e2043d0a): retrieving diagnostic output (try 0): started
2021/07/08 16:42:04 scheduler task e81d51f7 (flow 01aa42bd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:04 scheduler task e81d51f7 (flow 01aa42bd): retrieving result (try 0): started
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): retrieving result (try 0): started
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): transferring output (try 0): started
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): transferring output (try 0): started
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): promoting objects (try 0): started
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloading (try 0): started
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloading list<val<.=fb2fd41a 35.7MiB> 35.7MiB>
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloading val<.=69e7ac60 35.4MiB>
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloading val<.=e19fc148 35.4MiB>
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): retrieving diagnostic output (try 0): started
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloaded list<val<.=fb2fd41a 35.7MiB> 35.7MiB>
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloaded val<.=e19fc148 35.4MiB>
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloaded val<.=69e7ac60 35.4MiB>
2021/07/08 16:42:05 scheduler task 5b2e9034 (flow 63c5e72c): unloading (try 0): successful, next state: complete
2021/07/08 16:42:05  <-  n100.r02.s028.Main.out_file 63c5e72c ok     exec 5m4s 35.7MiB
2021/07/08 16:42:05 n100.r02.s028.Main.out_file 63c5e72c n100/r02/n100.r02.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cd041dc146d9ee319b9c1abf88fcbc0436ff70c9127f781a858eef8c6a26696
	sha256:63c5e72cf24924abb07e1bb7148e4c4bd0357f1eb66f4f15ad81c4b91d061ee2
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5b2e90340d8f671474100cd001adf55001357835c79d2d453ce26c3c2dea2a63
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s028_output"
	    wget -O "n100.r02.s028_output/n100.r02.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s028_output/n100.r02.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s028_output/n100.r02.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s028_output/n100.r02.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s028_output/n100.r02.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s028_output/n100.r02.s028.reference.fas" "n100.r02.s028_output/n100.r02.s028.fq1.fastq" "n100.r02.s028_output/n100.r02.s028.fq2.fastq" | samtools view -bS - > "n100.r02.s028_output/n100.r02.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s028_output/n100.r02.s028.untrimmed.sorted.bam" "n100.r02.s028_output/n100.r02.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s028_output/n100.r02.s028.untrimmed.sorted.bam" -b "n100.r02.s028_output/n100.r02.s028.primers.bed" -p "n100.r02.s028_output/n100.r02.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" "n100.r02.s028_output/n100.r02.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s028_output/n100.r02.s028.reference.fas" "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" > "n100.r02.s028_output/n100.r02.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s028_output/n100.r02.s028.reference.fas" --call-indels "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" > "n100.r02.s028_output/n100.r02.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s028_output/n100.r02.s028.trimmed.sorted.bam" > "n100.r02.s028_output/n100.r02.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s028_output/n100.r02.s028.depth.txt" "n100.r02.s028_output/n100.r02.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s028_output/n100.r02.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s028_output/n100.r02.s028.reference.fas" | bcftools consensus -m "n100.r02.s028_output/n100.r02.s028.low_depth.tsv" tmp.vcf.gz > "n100.r02.s028_output/n100.r02.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fb2fd41a92649349719ad9b3c1fb543235f75cd04591182d4db3e6dd82b22306 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=126.9MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:42:05 scheduler task da7a55d3 (flow bf875bbe): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s028.tar.gz resources {}
2021/07/08 16:42:05  ->  n100.r02.s028.Main.cp_out_file bf875bbe exec extern s3://niema-test/n100/r02/n100.r02.s028.tar.gz 35.7MiB
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): retrieving result (try 0): started
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): transferring output (try 0): started
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloading (try 0): started
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloading list<val<.=73bbd186 35.7MiB> 35.7MiB>
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloading val<.=e0c9df43 35.4MiB>
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloading val<.=4d9d3eff 35.4MiB>
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloaded val<.=4d9d3eff 35.4MiB>
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloaded val<.=e0c9df43 35.4MiB>
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloaded list<val<.=73bbd186 35.7MiB> 35.7MiB>
2021/07/08 16:42:05 scheduler task e81d51f7 (flow 01aa42bd): unloading (try 0): successful, next state: complete
2021/07/08 16:42:05  <-  n100.r02.s034.Main.out_file 01aa42bd ok     exec 5m5s 35.7MiB
2021/07/08 16:42:05 n100.r02.s034.Main.out_file 01aa42bd n100/r02/n100.r02.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e260b51cfb4bc05012e101f9d9c15b9568a503511c72f30ffd1520f8aed989c5
	sha256:01aa42bd2cca741c256804db26995e03068def79dbb065dcc4376c9d69677b03
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e81d51f7ae7304db29db4f7ad1abcb1fcea8af507411999c8e61d9f5cf1f9eeb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s034_output"
	    wget -O "n100.r02.s034_output/n100.r02.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s034_output/n100.r02.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s034_output/n100.r02.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s034_output/n100.r02.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s034_output/n100.r02.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s034_output/n100.r02.s034.reference.fas" "n100.r02.s034_output/n100.r02.s034.fq1.fastq" "n100.r02.s034_output/n100.r02.s034.fq2.fastq" | samtools view -bS - > "n100.r02.s034_output/n100.r02.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s034_output/n100.r02.s034.untrimmed.sorted.bam" "n100.r02.s034_output/n100.r02.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s034_output/n100.r02.s034.untrimmed.sorted.bam" -b "n100.r02.s034_output/n100.r02.s034.primers.bed" -p "n100.r02.s034_output/n100.r02.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" "n100.r02.s034_output/n100.r02.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s034_output/n100.r02.s034.reference.fas" "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" > "n100.r02.s034_output/n100.r02.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s034_output/n100.r02.s034.reference.fas" --call-indels "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" > "n100.r02.s034_output/n100.r02.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s034_output/n100.r02.s034.trimmed.sorted.bam" > "n100.r02.s034_output/n100.r02.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s034_output/n100.r02.s034.depth.txt" "n100.r02.s034_output/n100.r02.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s034_output/n100.r02.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s034_output/n100.r02.s034.reference.fas" | bcftools consensus -m "n100.r02.s034_output/n100.r02.s034.low_depth.tsv" tmp.vcf.gz > "n100.r02.s034_output/n100.r02.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:73bbd186667811dcb57c02db2dc45d259df06cd60192fd4f5821dab494089ec0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=127.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:42:05 scheduler task f563ff24 (flow 3e8288e2): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s034.tar.gz resources {}
2021/07/08 16:42:05  ->  n100.r02.s034.Main.cp_out_file 3e8288e2 exec extern s3://niema-test/n100/r02/n100.r02.s034.tar.gz 35.7MiB
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloading (try 0): started
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloading list<val<.=68e937d6 35.8MiB> 35.8MiB>
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloading val<.=e5d21aef 35.4MiB>
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloading val<.=c6e54f27 35.4MiB>
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloaded list<val<.=68e937d6 35.8MiB> 35.8MiB>
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloaded val<.=e5d21aef 35.4MiB>
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloaded val<.=c6e54f27 35.4MiB>
2021/07/08 16:42:05 scheduler task c9165e2e (flow e2043d0a): unloading (try 0): successful, next state: complete
2021/07/08 16:42:05  <-  n100.r02.s053.Main.out_file e2043d0a ok     exec 5m5s 35.8MiB
2021/07/08 16:42:05 n100.r02.s053.Main.out_file e2043d0a n100/r02/n100.r02.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b172dd308d6a6aca09ee92aaf03c046ea98541a93fbb53ac296ed19e0eead766
	sha256:e2043d0aaf02af06fb7fe698e4c3171c4dfb81f4659f187ce1293fc462345ce1
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c9165e2e21573f87844bd446e05381f3cd18b201c40528301e4d3dd88fb810e9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s053_output"
	    wget -O "n100.r02.s053_output/n100.r02.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s053_output/n100.r02.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s053_output/n100.r02.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s053_output/n100.r02.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s053_output/n100.r02.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s053_output/n100.r02.s053.reference.fas" "n100.r02.s053_output/n100.r02.s053.fq1.fastq" "n100.r02.s053_output/n100.r02.s053.fq2.fastq" | samtools view -bS - > "n100.r02.s053_output/n100.r02.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s053_output/n100.r02.s053.untrimmed.sorted.bam" "n100.r02.s053_output/n100.r02.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s053_output/n100.r02.s053.untrimmed.sorted.bam" -b "n100.r02.s053_output/n100.r02.s053.primers.bed" -p "n100.r02.s053_output/n100.r02.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" "n100.r02.s053_output/n100.r02.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s053_output/n100.r02.s053.reference.fas" "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" > "n100.r02.s053_output/n100.r02.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s053_output/n100.r02.s053.reference.fas" --call-indels "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" > "n100.r02.s053_output/n100.r02.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s053_output/n100.r02.s053.trimmed.sorted.bam" > "n100.r02.s053_output/n100.r02.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s053_output/n100.r02.s053.depth.txt" "n100.r02.s053_output/n100.r02.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s053_output/n100.r02.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s053_output/n100.r02.s053.reference.fas" | bcftools consensus -m "n100.r02.s053_output/n100.r02.s053.low_depth.tsv" tmp.vcf.gz > "n100.r02.s053_output/n100.r02.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:68e937d6b364860aa45ccc546dbe53a715b73e5df7995d22d362d013bff71dcc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=128.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:42:05 scheduler task 688c223a (flow 66e7e620): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s053.tar.gz resources {}
2021/07/08 16:42:05  ->  n100.r02.s053.Main.cp_out_file 66e7e620 exec extern s3://niema-test/n100/r02/n100.r02.s053.tar.gz 35.8MiB
2021/07/08 16:42:05 scheduler task 8b35b6a1 (flow 29709fad): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:05 scheduler task 8b35b6a1 (flow 29709fad): promoting objects (try 0): started
2021/07/08 16:42:05 scheduler task 8b35b6a1 (flow 29709fad): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:05 scheduler task 7c966493 (flow 0819d118): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:05 scheduler task 8b35b6a1 (flow 29709fad): retrieving diagnostic output (try 0): started
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): unloading (try 0): started
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): unloading list<val<.=f434f2c4 35.7MiB> 35.7MiB>
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): unloading val<.=b9f38467 35.4MiB>
2021/07/08 16:42:05 scheduler task 2e1a4452 (flow 4573c8de): unloading val<.=0c2bde4a 35.4MiB>
2021/07/08 16:42:05 scheduler task 7c966493 (flow 0819d118): promoting objects (try 0): started
2021/07/08 16:42:06 scheduler task da7a55d3 (flow bf875bbe): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fb2fd41a92649349719ad9b3c1fb543235f75cd04591182d4db3e6dd82b22306 -> s3://niema-test/n100/r02/n100.r02.s028.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:06  <-  n100.r02.s028.Main.cp_out_file bf875bbe ok   extern 0s 35.7MiB
2021/07/08 16:42:06 scheduler task 2e1a4452 (flow 4573c8de): unloaded list<val<.=f434f2c4 35.7MiB> 35.7MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): retrieving result (try 0): started
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:06 scheduler task 2e1a4452 (flow 4573c8de): unloaded val<.=0c2bde4a 35.4MiB>
2021/07/08 16:42:06 scheduler task 2e1a4452 (flow 4573c8de): unloaded val<.=b9f38467 35.4MiB>
2021/07/08 16:42:06 scheduler task 2e1a4452 (flow 4573c8de): unloading (try 0): successful, next state: complete
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): retrieving diagnostic output (try 0): started
2021/07/08 16:42:06  <-  n100.r02.s085.Main.out_file 4573c8de ok     exec 5m5s 35.7MiB
2021/07/08 16:42:06 n100.r02.s085.Main.out_file 4573c8de n100/r02/n100.r02.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2bf9924742b9fb5b795a74a464275d206924556473f9436b4b3c63ea21a86e69
	sha256:4573c8de1b652f7be959dd53380a4edd79c0672356c06171379d526af63335ba
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2e1a4452eb3cf88d99048a3a81c07f05236216ab24c9157201dd015c89cea48d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s085_output"
	    wget -O "n100.r02.s085_output/n100.r02.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s085_output/n100.r02.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s085_output/n100.r02.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s085_output/n100.r02.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s085_output/n100.r02.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s085_output/n100.r02.s085.reference.fas" "n100.r02.s085_output/n100.r02.s085.fq1.fastq" "n100.r02.s085_output/n100.r02.s085.fq2.fastq" | samtools view -bS - > "n100.r02.s085_output/n100.r02.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s085_output/n100.r02.s085.untrimmed.sorted.bam" "n100.r02.s085_output/n100.r02.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s085_output/n100.r02.s085.untrimmed.sorted.bam" -b "n100.r02.s085_output/n100.r02.s085.primers.bed" -p "n100.r02.s085_output/n100.r02.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" "n100.r02.s085_output/n100.r02.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s085_output/n100.r02.s085.reference.fas" "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" > "n100.r02.s085_output/n100.r02.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s085_output/n100.r02.s085.reference.fas" --call-indels "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" > "n100.r02.s085_output/n100.r02.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s085_output/n100.r02.s085.trimmed.sorted.bam" > "n100.r02.s085_output/n100.r02.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s085_output/n100.r02.s085.depth.txt" "n100.r02.s085_output/n100.r02.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s085_output/n100.r02.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s085_output/n100.r02.s085.reference.fas" | bcftools consensus -m "n100.r02.s085_output/n100.r02.s085.low_depth.tsv" tmp.vcf.gz > "n100.r02.s085_output/n100.r02.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f434f2c419d2f6668df5fef67a381760c48f7172560b944c257c0db64bba02bd 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=128.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:42:06 scheduler task 0a7d6cc1 (flow 73192a87): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s085.tar.gz resources {}
2021/07/08 16:42:06  ->  n100.r02.s085.Main.cp_out_file 73192a87 exec extern s3://niema-test/n100/r02/n100.r02.s085.tar.gz 35.7MiB
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): transferring output (try 0): started
2021/07/08 16:42:06 scheduler task f563ff24 (flow 3e8288e2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:73bbd186667811dcb57c02db2dc45d259df06cd60192fd4f5821dab494089ec0 -> s3://niema-test/n100/r02/n100.r02.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:06  <-  n100.r02.s034.Main.cp_out_file 3e8288e2 ok   extern 0s 35.7MiB
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): retrieving result (try 0): started
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): transferring output (try 0): started
2021/07/08 16:42:06 scheduler task 688c223a (flow 66e7e620): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:68e937d6b364860aa45ccc546dbe53a715b73e5df7995d22d362d013bff71dcc -> s3://niema-test/n100/r02/n100.r02.s053.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:06  <-  n100.r02.s053.Main.cp_out_file 66e7e620 ok   extern 0s 35.8MiB
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloading (try 0): started
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloading val<.=eec577e9 35.4MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloading list<val<.=146bec75 35.7MiB> 35.7MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloading val<.=edca195b 35.4MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloaded val<.=eec577e9 35.4MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloaded val<.=edca195b 35.4MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloaded list<val<.=146bec75 35.7MiB> 35.7MiB>
2021/07/08 16:42:06 scheduler task 8b35b6a1 (flow 29709fad): unloading (try 0): successful, next state: complete
2021/07/08 16:42:06  <-  n100.r02.s048.Main.out_file 29709fad ok     exec 5m5s 35.7MiB
2021/07/08 16:42:06 n100.r02.s048.Main.out_file 29709fad n100/r02/n100.r02.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f7dc0fc21630437e5fbf3c4ce0caba7475e8799fa74ac086f3a849bb23f443dc
	sha256:29709fad4f2c7f998adaacff8be3af1d449eb156efc7ed5ce72a898ed702007a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b35b6a10613a64d5bf8e24c849be70a7f92e2bdf13e24cec76e9074d06c3900
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s048_output"
	    wget -O "n100.r02.s048_output/n100.r02.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s048_output/n100.r02.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s048_output/n100.r02.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s048_output/n100.r02.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s048_output/n100.r02.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s048_output/n100.r02.s048.reference.fas" "n100.r02.s048_output/n100.r02.s048.fq1.fastq" "n100.r02.s048_output/n100.r02.s048.fq2.fastq" | samtools view -bS - > "n100.r02.s048_output/n100.r02.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s048_output/n100.r02.s048.untrimmed.sorted.bam" "n100.r02.s048_output/n100.r02.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s048_output/n100.r02.s048.untrimmed.sorted.bam" -b "n100.r02.s048_output/n100.r02.s048.primers.bed" -p "n100.r02.s048_output/n100.r02.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" "n100.r02.s048_output/n100.r02.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s048_output/n100.r02.s048.reference.fas" "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" > "n100.r02.s048_output/n100.r02.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s048_output/n100.r02.s048.reference.fas" --call-indels "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" > "n100.r02.s048_output/n100.r02.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s048_output/n100.r02.s048.trimmed.sorted.bam" > "n100.r02.s048_output/n100.r02.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s048_output/n100.r02.s048.depth.txt" "n100.r02.s048_output/n100.r02.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s048_output/n100.r02.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s048_output/n100.r02.s048.reference.fas" | bcftools consensus -m "n100.r02.s048_output/n100.r02.s048.low_depth.tsv" tmp.vcf.gz > "n100.r02.s048_output/n100.r02.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:146bec75bd9a1fdab0585a83d2d7f763169f553522ba27d393f3fd91937a1740 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=125.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 16:42:06 scheduler task 8b0a3a40 (flow 0e393b3a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s048.tar.gz resources {}
2021/07/08 16:42:06  ->  n100.r02.s048.Main.cp_out_file 0e393b3a exec extern s3://niema-test/n100/r02/n100.r02.s048.tar.gz 35.7MiB
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloading (try 0): started
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloading list<val<.=f2d6dde4 35.7MiB> 35.7MiB>
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloading val<.=b2ea6781 35.4MiB>
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloading val<.=07e33f75 35.4MiB>
2021/07/08 16:42:06 scheduler task 0a7d6cc1 (flow 73192a87): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f434f2c419d2f6668df5fef67a381760c48f7172560b944c257c0db64bba02bd -> s3://niema-test/n100/r02/n100.r02.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:06  <-  n100.r02.s085.Main.cp_out_file 73192a87 ok   extern 0s 35.7MiB
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloaded list<val<.=f2d6dde4 35.7MiB> 35.7MiB>
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloaded val<.=07e33f75 35.4MiB>
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloaded val<.=b2ea6781 35.4MiB>
2021/07/08 16:42:06 scheduler task 7c966493 (flow 0819d118): unloading (try 0): successful, next state: complete
2021/07/08 16:42:06  <-  n100.r02.s010.Main.out_file 0819d118 ok     exec 5m6s 35.7MiB
2021/07/08 16:42:06 n100.r02.s010.Main.out_file 0819d118 n100/r02/n100.r02.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac278de560b74b14a57c0dffb90d0aebf6332d18e46fdb297e9c8535befd824e
	sha256:0819d1189c03548abaf7bad32d00a29bd1a417518f4394551e43993e966c91d2
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7c9664937fac6f32c5da144636725636b2c24b62064c651012959edcddfc586d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s010_output"
	    wget -O "n100.r02.s010_output/n100.r02.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s010_output/n100.r02.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s010_output/n100.r02.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s010_output/n100.r02.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s010_output/n100.r02.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s010_output/n100.r02.s010.reference.fas" "n100.r02.s010_output/n100.r02.s010.fq1.fastq" "n100.r02.s010_output/n100.r02.s010.fq2.fastq" | samtools view -bS - > "n100.r02.s010_output/n100.r02.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s010_output/n100.r02.s010.untrimmed.sorted.bam" "n100.r02.s010_output/n100.r02.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s010_output/n100.r02.s010.untrimmed.sorted.bam" -b "n100.r02.s010_output/n100.r02.s010.primers.bed" -p "n100.r02.s010_output/n100.r02.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" "n100.r02.s010_output/n100.r02.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s010_output/n100.r02.s010.reference.fas" "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" > "n100.r02.s010_output/n100.r02.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s010_output/n100.r02.s010.reference.fas" --call-indels "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" > "n100.r02.s010_output/n100.r02.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s010_output/n100.r02.s010.trimmed.sorted.bam" > "n100.r02.s010_output/n100.r02.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s010_output/n100.r02.s010.depth.txt" "n100.r02.s010_output/n100.r02.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s010_output/n100.r02.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s010_output/n100.r02.s010.reference.fas" | bcftools consensus -m "n100.r02.s010_output/n100.r02.s010.low_depth.tsv" tmp.vcf.gz > "n100.r02.s010_output/n100.r02.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f2d6dde498afe1239df92cbc385a956821983544ad65b7a6e0cecdc124e1a138 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=127.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:42:06 scheduler task e47866b5 (flow 21adb912): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s010.tar.gz resources {}
2021/07/08 16:42:06  ->  n100.r02.s010.Main.cp_out_file 21adb912 exec extern s3://niema-test/n100/r02/n100.r02.s010.tar.gz 35.7MiB
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): promoting objects (try 0): started
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): retrieving diagnostic output (try 0): started
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): retrieving result (try 0): started
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): transferring output (try 0): started
2021/07/08 16:42:07 scheduler task 8b0a3a40 (flow 0e393b3a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:146bec75bd9a1fdab0585a83d2d7f763169f553522ba27d393f3fd91937a1740 -> s3://niema-test/n100/r02/n100.r02.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:07 scheduler task e47866b5 (flow 21adb912): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f2d6dde498afe1239df92cbc385a956821983544ad65b7a6e0cecdc124e1a138 -> s3://niema-test/n100/r02/n100.r02.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:07  <-  n100.r02.s048.Main.cp_out_file 0e393b3a ok   extern 0s 35.7MiB
2021/07/08 16:42:07  <-  n100.r02.s010.Main.cp_out_file 21adb912 ok   extern 0s 35.7MiB
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): promoting objects (try 0): started
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): retrieving diagnostic output (try 0): started
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): retrieving result (try 0): started
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloading (try 0): started
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloading val<.=c087119d 35.4MiB>
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloading list<val<.=8ac13a2f 35.7MiB> 35.7MiB>
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloading val<.=ef957844 35.4MiB>
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloaded val<.=ef957844 35.4MiB>
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloaded val<.=c087119d 35.4MiB>
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloaded list<val<.=8ac13a2f 35.7MiB> 35.7MiB>
2021/07/08 16:42:07 scheduler task 4e6261f7 (flow 31db7c1d): unloading (try 0): successful, next state: complete
2021/07/08 16:42:07 scheduler task 3dadedef (flow 9abe98a2): transferring output (try 0): started
2021/07/08 16:42:07  <-  n100.r02.s043.Main.out_file 31db7c1d ok     exec 5m7s 35.7MiB
2021/07/08 16:42:07 n100.r02.s043.Main.out_file 31db7c1d n100/r02/n100.r02.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b22cf45f314805afc81c34c4fed1c8a2648f0e69275f69fc013accc148859f33
	sha256:31db7c1d372bf8405e1836094669bd2a6c7e1b562ef85cd7f7f51ad8d3818cd1
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e6261f7fae2a23179f265d8bdc49c75453944486af162ff31359718bb461e7f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s043_output"
	    wget -O "n100.r02.s043_output/n100.r02.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s043_output/n100.r02.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s043_output/n100.r02.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s043_output/n100.r02.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s043_output/n100.r02.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s043_output/n100.r02.s043.reference.fas" "n100.r02.s043_output/n100.r02.s043.fq1.fastq" "n100.r02.s043_output/n100.r02.s043.fq2.fastq" | samtools view -bS - > "n100.r02.s043_output/n100.r02.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s043_output/n100.r02.s043.untrimmed.sorted.bam" "n100.r02.s043_output/n100.r02.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s043_output/n100.r02.s043.untrimmed.sorted.bam" -b "n100.r02.s043_output/n100.r02.s043.primers.bed" -p "n100.r02.s043_output/n100.r02.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" "n100.r02.s043_output/n100.r02.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s043_output/n100.r02.s043.reference.fas" "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" > "n100.r02.s043_output/n100.r02.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s043_output/n100.r02.s043.reference.fas" --call-indels "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" > "n100.r02.s043_output/n100.r02.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s043_output/n100.r02.s043.trimmed.sorted.bam" > "n100.r02.s043_output/n100.r02.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s043_output/n100.r02.s043.depth.txt" "n100.r02.s043_output/n100.r02.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s043_output/n100.r02.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s043_output/n100.r02.s043.reference.fas" | bcftools consensus -m "n100.r02.s043_output/n100.r02.s043.low_depth.tsv" tmp.vcf.gz > "n100.r02.s043_output/n100.r02.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8ac13a2fd5173f2d94292f9c191f13850b663dcd98761987c94bd2fce86ae944 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=130.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:42:07 scheduler task ce4cc534 (flow e3475282): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s043.tar.gz resources {}
2021/07/08 16:42:07  ->  n100.r02.s043.Main.cp_out_file e3475282 exec extern s3://niema-test/n100/r02/n100.r02.s043.tar.gz 35.7MiB
2021/07/08 16:42:08 scheduler task ce4cc534 (flow e3475282): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8ac13a2fd5173f2d94292f9c191f13850b663dcd98761987c94bd2fce86ae944 -> s3://niema-test/n100/r02/n100.r02.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:08  <-  n100.r02.s043.Main.cp_out_file e3475282 ok   extern 0s 35.7MiB
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloading (try 0): started
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloading list<val<.=a5990188 35.7MiB> 35.7MiB>
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloading val<.=001942ae 35.4MiB>
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloading val<.=104b40e6 35.4MiB>
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloaded val<.=001942ae 35.4MiB>
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloaded list<val<.=a5990188 35.7MiB> 35.7MiB>
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloaded val<.=104b40e6 35.4MiB>
2021/07/08 16:42:08 scheduler task 3dadedef (flow 9abe98a2): unloading (try 0): successful, next state: complete
2021/07/08 16:42:08  <-  n100.r02.s014.Main.out_file 9abe98a2 ok     exec 5m7s 35.7MiB
2021/07/08 16:42:08 n100.r02.s014.Main.out_file 9abe98a2 n100/r02/n100.r02.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:711af482758365818de625f15ab19278dd0ab1848262d18bb7446b4052cbe5cb
	sha256:9abe98a2f54a665f6c44bfe015c28ffb06a76bf32345ab7f6d0c94b0296a6430
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3dadedef04efabaaabe7488fed91a233a7fdfd8fd4d59ab97fd2a9d1262291ee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s014_output"
	    wget -O "n100.r02.s014_output/n100.r02.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s014_output/n100.r02.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s014_output/n100.r02.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s014_output/n100.r02.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s014_output/n100.r02.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s014_output/n100.r02.s014.reference.fas" "n100.r02.s014_output/n100.r02.s014.fq1.fastq" "n100.r02.s014_output/n100.r02.s014.fq2.fastq" | samtools view -bS - > "n100.r02.s014_output/n100.r02.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s014_output/n100.r02.s014.untrimmed.sorted.bam" "n100.r02.s014_output/n100.r02.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s014_output/n100.r02.s014.untrimmed.sorted.bam" -b "n100.r02.s014_output/n100.r02.s014.primers.bed" -p "n100.r02.s014_output/n100.r02.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" "n100.r02.s014_output/n100.r02.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s014_output/n100.r02.s014.reference.fas" "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" > "n100.r02.s014_output/n100.r02.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s014_output/n100.r02.s014.reference.fas" --call-indels "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" > "n100.r02.s014_output/n100.r02.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s014_output/n100.r02.s014.trimmed.sorted.bam" > "n100.r02.s014_output/n100.r02.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s014_output/n100.r02.s014.depth.txt" "n100.r02.s014_output/n100.r02.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s014_output/n100.r02.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s014_output/n100.r02.s014.reference.fas" | bcftools consensus -m "n100.r02.s014_output/n100.r02.s014.low_depth.tsv" tmp.vcf.gz > "n100.r02.s014_output/n100.r02.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a5990188562b2eeca70c98102ec083692104461644c6101fbba5c9b93b2398f5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=126.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:42:08 scheduler task b1323c8b (flow f4e26bf4): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s014.tar.gz resources {}
2021/07/08 16:42:08  ->  n100.r02.s014.Main.cp_out_file f4e26bf4 exec extern s3://niema-test/n100/r02/n100.r02.s014.tar.gz 35.7MiB
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): promoting objects (try 0): started
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): promoting objects (try 0): started
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): promoting objects (try 0): started
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): retrieving diagnostic output (try 0): started
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): retrieving diagnostic output (try 0): started
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): retrieving diagnostic output (try 0): started
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): retrieving result (try 0): started
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): retrieving result (try 0): started
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): transferring output (try 0): started
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): retrieving result (try 0): started
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): transferring output (try 0): started
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): transferring output (try 0): started
2021/07/08 16:42:09 scheduler task b1323c8b (flow f4e26bf4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a5990188562b2eeca70c98102ec083692104461644c6101fbba5c9b93b2398f5 -> s3://niema-test/n100/r02/n100.r02.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:09  <-  n100.r02.s014.Main.cp_out_file f4e26bf4 ok   extern 0s 35.7MiB
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloading (try 0): started
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloading list<val<.=1761671e 35.7MiB> 35.7MiB>
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloading val<.=4e95038b 35.4MiB>
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloading val<.=9fbad7da 35.4MiB>
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloading (try 0): started
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloading list<val<.=85069332 35.8MiB> 35.8MiB>
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloading val<.=4a3778df 35.4MiB>
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloading val<.=972c455a 35.4MiB>
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloaded list<val<.=1761671e 35.7MiB> 35.7MiB>
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloaded val<.=4e95038b 35.4MiB>
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloaded val<.=9fbad7da 35.4MiB>
2021/07/08 16:42:09 scheduler task bb6c2cd9 (flow 2f6e45f8): unloading (try 0): successful, next state: complete
2021/07/08 16:42:09  <-  n100.r02.s058.Main.out_file 2f6e45f8 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:09 n100.r02.s058.Main.out_file 2f6e45f8 n100/r02/n100.r02.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a78c58b0b5d4e0253ce60ce5f2d887120bfaa40b95321b9af8d58134dc476eb5
	sha256:2f6e45f88533d49ec8dd32664624a572df5f367bbe27d56ac7704945d280ff94
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb6c2cd989554e891928e9f0b7b69468b484ed45f5e28ebdee01d99e8325aa4f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s058_output"
	    wget -O "n100.r02.s058_output/n100.r02.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s058_output/n100.r02.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s058_output/n100.r02.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s058_output/n100.r02.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s058_output/n100.r02.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s058_output/n100.r02.s058.reference.fas" "n100.r02.s058_output/n100.r02.s058.fq1.fastq" "n100.r02.s058_output/n100.r02.s058.fq2.fastq" | samtools view -bS - > "n100.r02.s058_output/n100.r02.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s058_output/n100.r02.s058.untrimmed.sorted.bam" "n100.r02.s058_output/n100.r02.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s058_output/n100.r02.s058.untrimmed.sorted.bam" -b "n100.r02.s058_output/n100.r02.s058.primers.bed" -p "n100.r02.s058_output/n100.r02.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" "n100.r02.s058_output/n100.r02.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s058_output/n100.r02.s058.reference.fas" "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" > "n100.r02.s058_output/n100.r02.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s058_output/n100.r02.s058.reference.fas" --call-indels "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" > "n100.r02.s058_output/n100.r02.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s058_output/n100.r02.s058.trimmed.sorted.bam" > "n100.r02.s058_output/n100.r02.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s058_output/n100.r02.s058.depth.txt" "n100.r02.s058_output/n100.r02.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s058_output/n100.r02.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s058_output/n100.r02.s058.reference.fas" | bcftools consensus -m "n100.r02.s058_output/n100.r02.s058.low_depth.tsv" tmp.vcf.gz > "n100.r02.s058_output/n100.r02.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1761671ecd852b86af582cc781bfcd4bbf2ec7c00600d7407f448ba43aa33e5b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=128.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=876B max=2.1KiB
2021/07/08 16:42:09 scheduler task 1ad25e16 (flow fb259f6a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s058.tar.gz resources {}
2021/07/08 16:42:09  ->  n100.r02.s058.Main.cp_out_file fb259f6a exec extern s3://niema-test/n100/r02/n100.r02.s058.tar.gz 35.7MiB
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloaded list<val<.=85069332 35.8MiB> 35.8MiB>
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): unloading (try 0): started
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): unloading list<val<.=f89c47d5 35.7MiB> 35.7MiB>
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): unloading val<.=f1eaf97b 35.4MiB>
2021/07/08 16:42:09 scheduler task 0ead9da7 (flow b4466c12): unloading val<.=b7c8394c 35.4MiB>
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloaded val<.=4a3778df 35.4MiB>
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloaded val<.=972c455a 35.4MiB>
2021/07/08 16:42:09 scheduler task 055d7a57 (flow 2ca4d3a5): unloading (try 0): successful, next state: complete
2021/07/08 16:42:09  <-  n100.r02.s064.Main.out_file 2ca4d3a5 ok     exec 5m9s 35.8MiB
2021/07/08 16:42:09 n100.r02.s064.Main.out_file 2ca4d3a5 n100/r02/n100.r02.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dbcbf8a932bc8501b62a9c2cc25172e577ef66992ed9e4da09e05c297195d7f3
	sha256:2ca4d3a568d0deb39895383230c1655a675855a081b258e0c098f53716cea12b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/055d7a57dee9eb950b5bc8f82e3c006bb91b22b6e8c66c13427ec096871c1652
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s064_output"
	    wget -O "n100.r02.s064_output/n100.r02.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s064_output/n100.r02.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s064_output/n100.r02.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s064_output/n100.r02.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s064_output/n100.r02.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s064_output/n100.r02.s064.reference.fas" "n100.r02.s064_output/n100.r02.s064.fq1.fastq" "n100.r02.s064_output/n100.r02.s064.fq2.fastq" | samtools view -bS - > "n100.r02.s064_output/n100.r02.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s064_output/n100.r02.s064.untrimmed.sorted.bam" "n100.r02.s064_output/n100.r02.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s064_output/n100.r02.s064.untrimmed.sorted.bam" -b "n100.r02.s064_output/n100.r02.s064.primers.bed" -p "n100.r02.s064_output/n100.r02.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" "n100.r02.s064_output/n100.r02.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s064_output/n100.r02.s064.reference.fas" "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" > "n100.r02.s064_output/n100.r02.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s064_output/n100.r02.s064.reference.fas" --call-indels "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" > "n100.r02.s064_output/n100.r02.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s064_output/n100.r02.s064.trimmed.sorted.bam" > "n100.r02.s064_output/n100.r02.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s064_output/n100.r02.s064.depth.txt" "n100.r02.s064_output/n100.r02.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s064_output/n100.r02.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s064_output/n100.r02.s064.reference.fas" | bcftools consensus -m "n100.r02.s064_output/n100.r02.s064.low_depth.tsv" tmp.vcf.gz > "n100.r02.s064_output/n100.r02.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8506933251020821c22b295de70aed263e164229b00d96afe526e5d0fa884d8f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=127.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:42:09 scheduler task 8021b219 (flow fb74f186): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s064.tar.gz resources {}
2021/07/08 16:42:09  ->  n100.r02.s064.Main.cp_out_file fb74f186 exec extern s3://niema-test/n100/r02/n100.r02.s064.tar.gz 35.8MiB
2021/07/08 16:42:10 scheduler task 0ead9da7 (flow b4466c12): unloaded list<val<.=f89c47d5 35.7MiB> 35.7MiB>
2021/07/08 16:42:10 scheduler task 0ead9da7 (flow b4466c12): unloaded val<.=b7c8394c 35.4MiB>
2021/07/08 16:42:10 scheduler task 0ead9da7 (flow b4466c12): unloaded val<.=f1eaf97b 35.4MiB>
2021/07/08 16:42:10 scheduler task 0ead9da7 (flow b4466c12): unloading (try 0): successful, next state: complete
2021/07/08 16:42:10  <-  n100.r02.s093.Main.out_file b4466c12 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:10 n100.r02.s093.Main.out_file b4466c12 n100/r02/n100.r02.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9982e03c9099722055d9bfd48b26842e89248f219e5e6aed2494392abf54397e
	sha256:b4466c12367cb019b6b8d53de62b7e2ee3ccc793348668cc35d1e49e3af8eb6c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0ead9da70e743bc3f4b34c2cbd2cd62e5a3e9d2226a5d62b397a616eebe27f28
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s093_output"
	    wget -O "n100.r02.s093_output/n100.r02.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s093_output/n100.r02.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s093_output/n100.r02.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s093_output/n100.r02.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s093_output/n100.r02.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s093_output/n100.r02.s093.reference.fas" "n100.r02.s093_output/n100.r02.s093.fq1.fastq" "n100.r02.s093_output/n100.r02.s093.fq2.fastq" | samtools view -bS - > "n100.r02.s093_output/n100.r02.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s093_output/n100.r02.s093.untrimmed.sorted.bam" "n100.r02.s093_output/n100.r02.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s093_output/n100.r02.s093.untrimmed.sorted.bam" -b "n100.r02.s093_output/n100.r02.s093.primers.bed" -p "n100.r02.s093_output/n100.r02.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" "n100.r02.s093_output/n100.r02.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s093_output/n100.r02.s093.reference.fas" "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" > "n100.r02.s093_output/n100.r02.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s093_output/n100.r02.s093.reference.fas" --call-indels "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" > "n100.r02.s093_output/n100.r02.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s093_output/n100.r02.s093.trimmed.sorted.bam" > "n100.r02.s093_output/n100.r02.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s093_output/n100.r02.s093.depth.txt" "n100.r02.s093_output/n100.r02.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s093_output/n100.r02.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s093_output/n100.r02.s093.reference.fas" | bcftools consensus -m "n100.r02.s093_output/n100.r02.s093.low_depth.tsv" tmp.vcf.gz > "n100.r02.s093_output/n100.r02.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f89c47d58d6fce687c83db6edc1a0800c13dafde3ea43e375e6806613993fba2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=128.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:42:10 scheduler task fdc4ef9d (flow 787b86dd): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s093.tar.gz resources {}
2021/07/08 16:42:10  ->  n100.r02.s093.Main.cp_out_file 787b86dd exec extern s3://niema-test/n100/r02/n100.r02.s093.tar.gz 35.7MiB
2021/07/08 16:42:10 scheduler task 1ad25e16 (flow fb259f6a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1761671ecd852b86af582cc781bfcd4bbf2ec7c00600d7407f448ba43aa33e5b -> s3://niema-test/n100/r02/n100.r02.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:10  <-  n100.r02.s058.Main.cp_out_file fb259f6a ok   extern 0s 35.7MiB
2021/07/08 16:42:10 scheduler task 8021b219 (flow fb74f186): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8506933251020821c22b295de70aed263e164229b00d96afe526e5d0fa884d8f -> s3://niema-test/n100/r02/n100.r02.s064.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:10  <-  n100.r02.s064.Main.cp_out_file fb74f186 ok   extern 0s 35.8MiB
2021/07/08 16:42:10 scheduler task fdc4ef9d (flow 787b86dd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f89c47d58d6fce687c83db6edc1a0800c13dafde3ea43e375e6806613993fba2 -> s3://niema-test/n100/r02/n100.r02.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:10  <-  n100.r02.s093.Main.cp_out_file 787b86dd ok   extern 0s 35.7MiB
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): promoting objects (try 0): started
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): retrieving diagnostic output (try 0): started
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): retrieving result (try 0): started
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:16 scheduler task d8e5f7d3 (flow 7ba184b6): transferring output (try 0): started
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloading (try 0): started
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloading list<val<.=ed4be07d 35.7MiB> 35.7MiB>
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloading val<.=38327f52 35.4MiB>
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloading val<.=faa2c116 35.4MiB>
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): promoting objects (try 0): started
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloaded val<.=38327f52 35.4MiB>
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloaded val<.=faa2c116 35.4MiB>
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloaded list<val<.=ed4be07d 35.7MiB> 35.7MiB>
2021/07/08 16:42:17 scheduler task d8e5f7d3 (flow 7ba184b6): unloading (try 0): successful, next state: complete
2021/07/08 16:42:17  <-  n100.r02.s029.Main.out_file 7ba184b6 ok     exec 5m6s 35.7MiB
2021/07/08 16:42:17 n100.r02.s029.Main.out_file 7ba184b6 n100/r02/n100.r02.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8c076b62b1f215d8d77f88744b4bcd3b6f84d670b4c7fff7f5f7b600fb596c49
	sha256:7ba184b6205983cf7c3198022b930c4b2831914e678e93a789317d412da85170
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d8e5f7d3d0f3012654e3949664c62becf3907866d7f3300b2e39673da72b7447
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s029_output"
	    wget -O "n100.r02.s029_output/n100.r02.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s029_output/n100.r02.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s029_output/n100.r02.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s029_output/n100.r02.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s029_output/n100.r02.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s029_output/n100.r02.s029.reference.fas" "n100.r02.s029_output/n100.r02.s029.fq1.fastq" "n100.r02.s029_output/n100.r02.s029.fq2.fastq" | samtools view -bS - > "n100.r02.s029_output/n100.r02.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s029_output/n100.r02.s029.untrimmed.sorted.bam" "n100.r02.s029_output/n100.r02.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s029_output/n100.r02.s029.untrimmed.sorted.bam" -b "n100.r02.s029_output/n100.r02.s029.primers.bed" -p "n100.r02.s029_output/n100.r02.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" "n100.r02.s029_output/n100.r02.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s029_output/n100.r02.s029.reference.fas" "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" > "n100.r02.s029_output/n100.r02.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s029_output/n100.r02.s029.reference.fas" --call-indels "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" > "n100.r02.s029_output/n100.r02.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s029_output/n100.r02.s029.trimmed.sorted.bam" > "n100.r02.s029_output/n100.r02.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s029_output/n100.r02.s029.depth.txt" "n100.r02.s029_output/n100.r02.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s029_output/n100.r02.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s029_output/n100.r02.s029.reference.fas" | bcftools consensus -m "n100.r02.s029_output/n100.r02.s029.low_depth.tsv" tmp.vcf.gz > "n100.r02.s029_output/n100.r02.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ed4be07dbb77ca157b29360db9b97be6d7c83b80ea3f3a1e85e4a4ed298b290a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 16:42:17 scheduler task e837e98c (flow 8a6fd2e8): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s029.tar.gz resources {}
2021/07/08 16:42:17  ->  n100.r02.s029.Main.cp_out_file 8a6fd2e8 exec extern s3://niema-test/n100/r02/n100.r02.s029.tar.gz 35.7MiB
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): promoting objects (try 0): started
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): retrieving diagnostic output (try 0): started
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): promoting objects (try 0): started
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): retrieving diagnostic output (try 0): started
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): retrieving result (try 0): started
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): retrieving diagnostic output (try 0): started
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): retrieving result (try 0): started
2021/07/08 16:42:17 scheduler task da6be570 (flow aae2ca1c): transferring output (try 0): started
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): retrieving result (try 0): started
2021/07/08 16:42:17 scheduler task 27e90d8b (flow d66c2225): transferring output (try 0): started
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:17 scheduler task 8b7410bb (flow 51541ca9): transferring output (try 0): started
2021/07/08 16:42:17 scheduler task 83ad0a3c (flow 244ee460): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:17 scheduler task 83ad0a3c (flow 244ee460): promoting objects (try 0): started
2021/07/08 16:42:17 scheduler task e837e98c (flow 8a6fd2e8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ed4be07dbb77ca157b29360db9b97be6d7c83b80ea3f3a1e85e4a4ed298b290a -> s3://niema-test/n100/r02/n100.r02.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:17  <-  n100.r02.s029.Main.cp_out_file 8a6fd2e8 ok   extern 0s 35.7MiB
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): retrieving diagnostic output (try 0): started
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloading (try 0): started
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloading list<val<.=e5376a98 35.7MiB> 35.7MiB>
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloading val<.=806f1a18 35.4MiB>
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloading val<.=45eb82b7 35.4MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): retrieving result (try 0): started
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloading (try 0): started
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloading val<.=f119c1e0 35.4MiB>
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloading list<val<.=46840676 35.8MiB> 35.8MiB>
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloading val<.=21b44154 35.4MiB>
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloaded list<val<.=e5376a98 35.7MiB> 35.7MiB>
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloaded val<.=806f1a18 35.4MiB>
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloaded val<.=45eb82b7 35.4MiB>
2021/07/08 16:42:18 scheduler task da6be570 (flow aae2ca1c): unloading (try 0): successful, next state: complete
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloading (try 0): started
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloading list<val<.=cb76c8d6 35.8MiB> 35.8MiB>
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloading val<.=760c07ff 35.4MiB>
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloading val<.=19d86a62 35.4MiB>
2021/07/08 16:42:18  <-  n100.r02.s084.Main.out_file aae2ca1c ok     exec 5m7s 35.7MiB
2021/07/08 16:42:18 n100.r02.s084.Main.out_file aae2ca1c n100/r02/n100.r02.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae1ebf0bac1e1996f1a451a539ae9fc584da40f7236176672ce33cb091faab41
	sha256:aae2ca1c11b1ce7db63c16a1373aeabb509e1c0ae373cce9ce69ec9ef5471646
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/da6be5709285849fc81772882eb9f81de96db455711ddb6d7b41fa519dc763e2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s084_output"
	    wget -O "n100.r02.s084_output/n100.r02.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s084_output/n100.r02.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s084_output/n100.r02.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s084_output/n100.r02.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s084_output/n100.r02.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s084_output/n100.r02.s084.reference.fas" "n100.r02.s084_output/n100.r02.s084.fq1.fastq" "n100.r02.s084_output/n100.r02.s084.fq2.fastq" | samtools view -bS - > "n100.r02.s084_output/n100.r02.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s084_output/n100.r02.s084.untrimmed.sorted.bam" "n100.r02.s084_output/n100.r02.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s084_output/n100.r02.s084.untrimmed.sorted.bam" -b "n100.r02.s084_output/n100.r02.s084.primers.bed" -p "n100.r02.s084_output/n100.r02.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" "n100.r02.s084_output/n100.r02.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s084_output/n100.r02.s084.reference.fas" "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" > "n100.r02.s084_output/n100.r02.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s084_output/n100.r02.s084.reference.fas" --call-indels "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" > "n100.r02.s084_output/n100.r02.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s084_output/n100.r02.s084.trimmed.sorted.bam" > "n100.r02.s084_output/n100.r02.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s084_output/n100.r02.s084.depth.txt" "n100.r02.s084_output/n100.r02.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s084_output/n100.r02.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s084_output/n100.r02.s084.reference.fas" | bcftools consensus -m "n100.r02.s084_output/n100.r02.s084.low_depth.tsv" tmp.vcf.gz > "n100.r02.s084_output/n100.r02.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e5376a9812a128ce223826cf9d8ecdc70c8e985795c34e55966f5d1995c8f465 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=127.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:42:18 scheduler task 17140e27 (flow 26e1d6ce): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s084.tar.gz resources {}
2021/07/08 16:42:18  ->  n100.r02.s084.Main.cp_out_file 26e1d6ce exec extern s3://niema-test/n100/r02/n100.r02.s084.tar.gz 35.7MiB
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): transferring output (try 0): started
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloaded val<.=f119c1e0 35.4MiB>
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloaded val<.=21b44154 35.4MiB>
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloaded list<val<.=46840676 35.8MiB> 35.8MiB>
2021/07/08 16:42:18 scheduler task 8b7410bb (flow 51541ca9): unloading (try 0): successful, next state: complete
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloaded list<val<.=cb76c8d6 35.8MiB> 35.8MiB>
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloaded val<.=760c07ff 35.4MiB>
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloaded val<.=19d86a62 35.4MiB>
2021/07/08 16:42:18 scheduler task 27e90d8b (flow d66c2225): unloading (try 0): successful, next state: complete
2021/07/08 16:42:18  <-  n100.r02.s017.Main.out_file 51541ca9 ok     exec 5m7s 35.8MiB
2021/07/08 16:42:18 n100.r02.s017.Main.out_file 51541ca9 n100/r02/n100.r02.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e872f35a454f578ad9cc8dff5beddf399f0ffb89d71183fc55491583ddde5ee
	sha256:51541ca9f72300d985054dca32a7b3efb883042d4be32efab2cf261587f12bcd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8b7410bb38afe1d3e824de27458bd7141dc8aff84a13b62dad861e47abf27d62
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s017_output"
	    wget -O "n100.r02.s017_output/n100.r02.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s017_output/n100.r02.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s017_output/n100.r02.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s017_output/n100.r02.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s017_output/n100.r02.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s017_output/n100.r02.s017.reference.fas" "n100.r02.s017_output/n100.r02.s017.fq1.fastq" "n100.r02.s017_output/n100.r02.s017.fq2.fastq" | samtools view -bS - > "n100.r02.s017_output/n100.r02.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s017_output/n100.r02.s017.untrimmed.sorted.bam" "n100.r02.s017_output/n100.r02.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s017_output/n100.r02.s017.untrimmed.sorted.bam" -b "n100.r02.s017_output/n100.r02.s017.primers.bed" -p "n100.r02.s017_output/n100.r02.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" "n100.r02.s017_output/n100.r02.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s017_output/n100.r02.s017.reference.fas" "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" > "n100.r02.s017_output/n100.r02.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s017_output/n100.r02.s017.reference.fas" --call-indels "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" > "n100.r02.s017_output/n100.r02.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s017_output/n100.r02.s017.trimmed.sorted.bam" > "n100.r02.s017_output/n100.r02.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s017_output/n100.r02.s017.depth.txt" "n100.r02.s017_output/n100.r02.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s017_output/n100.r02.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s017_output/n100.r02.s017.reference.fas" | bcftools consensus -m "n100.r02.s017_output/n100.r02.s017.low_depth.tsv" tmp.vcf.gz > "n100.r02.s017_output/n100.r02.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:468406764c8e17f27196cd6a70dfaaf6f4ec3754c400d9b99cbf65f46c2165a4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=128.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 16:42:18 scheduler task 978e51e0 (flow a2a29013): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s017.tar.gz resources {}
2021/07/08 16:42:18  ->  n100.r02.s017.Main.cp_out_file a2a29013 exec extern s3://niema-test/n100/r02/n100.r02.s017.tar.gz 35.8MiB
2021/07/08 16:42:18  <-  n100.r02.s046.Main.out_file d66c2225 ok     exec 5m9s 35.8MiB
2021/07/08 16:42:18 n100.r02.s046.Main.out_file d66c2225 n100/r02/n100.r02.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:361386e0be42cc4ba548ea2da847fac0f2ae7da31e8987908bf235a9159324ce
	sha256:d66c2225e9731a1a795977db9416f3fb4b53268859437a3fb806b6c9ad49d423
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27e90d8b65ae267eca8d2fa893623f84708be4f0d35bcc54303bd7e60b2f2942
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s046_output"
	    wget -O "n100.r02.s046_output/n100.r02.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s046_output/n100.r02.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s046_output/n100.r02.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s046_output/n100.r02.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s046_output/n100.r02.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s046_output/n100.r02.s046.reference.fas" "n100.r02.s046_output/n100.r02.s046.fq1.fastq" "n100.r02.s046_output/n100.r02.s046.fq2.fastq" | samtools view -bS - > "n100.r02.s046_output/n100.r02.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s046_output/n100.r02.s046.untrimmed.sorted.bam" "n100.r02.s046_output/n100.r02.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s046_output/n100.r02.s046.untrimmed.sorted.bam" -b "n100.r02.s046_output/n100.r02.s046.primers.bed" -p "n100.r02.s046_output/n100.r02.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" "n100.r02.s046_output/n100.r02.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s046_output/n100.r02.s046.reference.fas" "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" > "n100.r02.s046_output/n100.r02.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s046_output/n100.r02.s046.reference.fas" --call-indels "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" > "n100.r02.s046_output/n100.r02.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s046_output/n100.r02.s046.trimmed.sorted.bam" > "n100.r02.s046_output/n100.r02.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s046_output/n100.r02.s046.depth.txt" "n100.r02.s046_output/n100.r02.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s046_output/n100.r02.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s046_output/n100.r02.s046.reference.fas" | bcftools consensus -m "n100.r02.s046_output/n100.r02.s046.low_depth.tsv" tmp.vcf.gz > "n100.r02.s046_output/n100.r02.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cb76c8d6f8468e95c05bfeffe94c123d564d11ed7eb33860ec1936c5cecda4ca 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.4MiB max=123.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=694B max=2.0KiB
2021/07/08 16:42:18 scheduler task 83e1a61e (flow e7a0dda2): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s046.tar.gz resources {}
2021/07/08 16:42:18  ->  n100.r02.s046.Main.cp_out_file e7a0dda2 exec extern s3://niema-test/n100/r02/n100.r02.s046.tar.gz 35.8MiB
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloading (try 0): started
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloading list<val<.=a9ebaa03 35.7MiB> 35.7MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloading val<.=2dbcf07a 35.4MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloading val<.=9c41b259 35.4MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloaded list<val<.=a9ebaa03 35.7MiB> 35.7MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloaded val<.=2dbcf07a 35.4MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloaded val<.=9c41b259 35.4MiB>
2021/07/08 16:42:18 scheduler task 83ad0a3c (flow 244ee460): unloading (try 0): successful, next state: complete
2021/07/08 16:42:18  <-  n100.r02.s067.Main.out_file 244ee460 ok     exec 5m8s 35.7MiB
2021/07/08 16:42:18 n100.r02.s067.Main.out_file 244ee460 n100/r02/n100.r02.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:336880b30c3a9bbfebbbc4ef34e31376966982de09c6419e82571b5eaaba2d15
	sha256:244ee4603eb17891504a253b6fdae456ae4754280c5249338055e7dcc717b245
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83ad0a3c9529353efe201a368107f144a67f1a827d57c0307892b4c0298a2dea
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s067_output"
	    wget -O "n100.r02.s067_output/n100.r02.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s067_output/n100.r02.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s067_output/n100.r02.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s067_output/n100.r02.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s067_output/n100.r02.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s067_output/n100.r02.s067.reference.fas" "n100.r02.s067_output/n100.r02.s067.fq1.fastq" "n100.r02.s067_output/n100.r02.s067.fq2.fastq" | samtools view -bS - > "n100.r02.s067_output/n100.r02.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s067_output/n100.r02.s067.untrimmed.sorted.bam" "n100.r02.s067_output/n100.r02.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s067_output/n100.r02.s067.untrimmed.sorted.bam" -b "n100.r02.s067_output/n100.r02.s067.primers.bed" -p "n100.r02.s067_output/n100.r02.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" "n100.r02.s067_output/n100.r02.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s067_output/n100.r02.s067.reference.fas" "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" > "n100.r02.s067_output/n100.r02.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s067_output/n100.r02.s067.reference.fas" --call-indels "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" > "n100.r02.s067_output/n100.r02.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s067_output/n100.r02.s067.trimmed.sorted.bam" > "n100.r02.s067_output/n100.r02.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s067_output/n100.r02.s067.depth.txt" "n100.r02.s067_output/n100.r02.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s067_output/n100.r02.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s067_output/n100.r02.s067.reference.fas" | bcftools consensus -m "n100.r02.s067_output/n100.r02.s067.low_depth.tsv" tmp.vcf.gz > "n100.r02.s067_output/n100.r02.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a9ebaa03f329207108735e4158c60835430670f75a98f1d0e745abd339f5d316 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=124.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:42:18 scheduler task fb0f3118 (flow 9222ff62): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s067.tar.gz resources {}
2021/07/08 16:42:18  ->  n100.r02.s067.Main.cp_out_file 9222ff62 exec extern s3://niema-test/n100/r02/n100.r02.s067.tar.gz 35.7MiB
2021/07/08 16:42:19 scheduler task 17140e27 (flow 26e1d6ce): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e5376a9812a128ce223826cf9d8ecdc70c8e985795c34e55966f5d1995c8f465 -> s3://niema-test/n100/r02/n100.r02.s084.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:19  <-  n100.r02.s084.Main.cp_out_file 26e1d6ce ok   extern 0s 35.7MiB
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): promoting objects (try 0): started
2021/07/08 16:42:19 scheduler task 978e51e0 (flow a2a29013): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:468406764c8e17f27196cd6a70dfaaf6f4ec3754c400d9b99cbf65f46c2165a4 -> s3://niema-test/n100/r02/n100.r02.s017.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:19  <-  n100.r02.s017.Main.cp_out_file a2a29013 ok   extern 0s 35.8MiB
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): retrieving diagnostic output (try 0): started
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): retrieving result (try 0): started
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): transferring output (try 0): started
2021/07/08 16:42:19 scheduler task 83e1a61e (flow e7a0dda2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cb76c8d6f8468e95c05bfeffe94c123d564d11ed7eb33860ec1936c5cecda4ca -> s3://niema-test/n100/r02/n100.r02.s046.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:19  <-  n100.r02.s046.Main.cp_out_file e7a0dda2 ok   extern 0s 35.8MiB
2021/07/08 16:42:19 scheduler task fb0f3118 (flow 9222ff62): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a9ebaa03f329207108735e4158c60835430670f75a98f1d0e745abd339f5d316 -> s3://niema-test/n100/r02/n100.r02.s067.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:19  <-  n100.r02.s067.Main.cp_out_file 9222ff62 ok   extern 0s 35.7MiB
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloading (try 0): started
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloading list<val<.=573c1416 35.7MiB> 35.7MiB>
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloading val<.=2531b375 35.4MiB>
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloading val<.=18addfef 35.4MiB>
2021/07/08 16:42:19 scheduler task 57d5d876 (flow fceac23c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:19 scheduler task 57d5d876 (flow fceac23c): promoting objects (try 0): started
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloaded val<.=2531b375 35.4MiB>
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloaded list<val<.=573c1416 35.7MiB> 35.7MiB>
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloaded val<.=18addfef 35.4MiB>
2021/07/08 16:42:19 scheduler task 0a7969ad (flow 678c0cb0): unloading (try 0): successful, next state: complete
2021/07/08 16:42:19  <-  n100.r02.s059.Main.out_file 678c0cb0 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:19 n100.r02.s059.Main.out_file 678c0cb0 n100/r02/n100.r02.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4b76c0ee43d62d423a96d54cf6a7333a04dabe0d6f30a5db89571325b53a2188
	sha256:678c0cb05558210727adf4f4a5e86b3447aeb1972b6a09b5113256f187226f30
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a7969ad4086e2962326f95986072362dd40fd808b69c4fcc05b2bca28b4aab5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s059_output"
	    wget -O "n100.r02.s059_output/n100.r02.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s059_output/n100.r02.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s059_output/n100.r02.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s059_output/n100.r02.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s059_output/n100.r02.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s059_output/n100.r02.s059.reference.fas" "n100.r02.s059_output/n100.r02.s059.fq1.fastq" "n100.r02.s059_output/n100.r02.s059.fq2.fastq" | samtools view -bS - > "n100.r02.s059_output/n100.r02.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s059_output/n100.r02.s059.untrimmed.sorted.bam" "n100.r02.s059_output/n100.r02.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s059_output/n100.r02.s059.untrimmed.sorted.bam" -b "n100.r02.s059_output/n100.r02.s059.primers.bed" -p "n100.r02.s059_output/n100.r02.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" "n100.r02.s059_output/n100.r02.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s059_output/n100.r02.s059.reference.fas" "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" > "n100.r02.s059_output/n100.r02.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s059_output/n100.r02.s059.reference.fas" --call-indels "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" > "n100.r02.s059_output/n100.r02.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s059_output/n100.r02.s059.trimmed.sorted.bam" > "n100.r02.s059_output/n100.r02.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s059_output/n100.r02.s059.depth.txt" "n100.r02.s059_output/n100.r02.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s059_output/n100.r02.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s059_output/n100.r02.s059.reference.fas" | bcftools consensus -m "n100.r02.s059_output/n100.r02.s059.low_depth.tsv" tmp.vcf.gz > "n100.r02.s059_output/n100.r02.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:573c1416a27b27d014a0822ade5a0f1b5f838f3d4efbf4667a14d9c43187075f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 16:42:19 scheduler task 27dc70a0 (flow bf0b1d72): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s059.tar.gz resources {}
2021/07/08 16:42:19  ->  n100.r02.s059.Main.cp_out_file bf0b1d72 exec extern s3://niema-test/n100/r02/n100.r02.s059.tar.gz 35.7MiB
2021/07/08 16:42:19 scheduler task 57d5d876 (flow fceac23c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:19 scheduler task 57d5d876 (flow fceac23c): retrieving diagnostic output (try 0): started
2021/07/08 16:42:19 scheduler task cafad4ba (flow 5063d2f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:19 scheduler task cafad4ba (flow 5063d2f3): promoting objects (try 0): started
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): retrieving result (try 0): started
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): retrieving diagnostic output (try 0): started
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): promoting objects (try 0): started
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): transferring output (try 0): started
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): retrieving result (try 0): started
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): retrieving diagnostic output (try 0): started
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): transferring output (try 0): started
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): retrieving result (try 0): started
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): transferring output (try 0): started
2021/07/08 16:42:20 scheduler task 27dc70a0 (flow bf0b1d72): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:573c1416a27b27d014a0822ade5a0f1b5f838f3d4efbf4667a14d9c43187075f -> s3://niema-test/n100/r02/n100.r02.s059.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:20  <-  n100.r02.s059.Main.cp_out_file bf0b1d72 ok   extern 0s 35.7MiB
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloading (try 0): started
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloading list<val<.=da7faab8 35.7MiB> 35.7MiB>
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloading val<.=31bca599 35.4MiB>
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloading val<.=f552282b 35.4MiB>
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloaded val<.=31bca599 35.4MiB>
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloaded list<val<.=da7faab8 35.7MiB> 35.7MiB>
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloaded val<.=f552282b 35.4MiB>
2021/07/08 16:42:20 scheduler task 57d5d876 (flow fceac23c): unloading (try 0): successful, next state: complete
2021/07/08 16:42:20  <-  n100.r02.s098.Main.out_file fceac23c ok     exec 5m10s 35.7MiB
2021/07/08 16:42:20 n100.r02.s098.Main.out_file fceac23c n100/r02/n100.r02.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27a03cc0e6950f50ec52a4d0825c91ccb15d591dbbdd9fd1a41ff71d7e1044af
	sha256:fceac23c776b09c083e4ddd2c8a7c0bb62b72881f1c00f376b1aee3567c50e2e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/57d5d87649feeb8fb947516bd789310fb1fb4dbc4c714080479a7ecf4abae749
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s098_output"
	    wget -O "n100.r02.s098_output/n100.r02.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s098_output/n100.r02.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s098_output/n100.r02.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s098_output/n100.r02.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s098_output/n100.r02.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s098_output/n100.r02.s098.reference.fas" "n100.r02.s098_output/n100.r02.s098.fq1.fastq" "n100.r02.s098_output/n100.r02.s098.fq2.fastq" | samtools view -bS - > "n100.r02.s098_output/n100.r02.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s098_output/n100.r02.s098.untrimmed.sorted.bam" "n100.r02.s098_output/n100.r02.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s098_output/n100.r02.s098.untrimmed.sorted.bam" -b "n100.r02.s098_output/n100.r02.s098.primers.bed" -p "n100.r02.s098_output/n100.r02.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" "n100.r02.s098_output/n100.r02.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s098_output/n100.r02.s098.reference.fas" "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" > "n100.r02.s098_output/n100.r02.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s098_output/n100.r02.s098.reference.fas" --call-indels "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" > "n100.r02.s098_output/n100.r02.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s098_output/n100.r02.s098.trimmed.sorted.bam" > "n100.r02.s098_output/n100.r02.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s098_output/n100.r02.s098.depth.txt" "n100.r02.s098_output/n100.r02.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s098_output/n100.r02.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s098_output/n100.r02.s098.reference.fas" | bcftools consensus -m "n100.r02.s098_output/n100.r02.s098.low_depth.tsv" tmp.vcf.gz > "n100.r02.s098_output/n100.r02.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:da7faab873a2ffb28b41fa26fe2b5fe122b4529fdfc1fb3039a427ffaedd9f3f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=126.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=873B max=2.1KiB
2021/07/08 16:42:20 scheduler task b8c08d24 (flow 686fdf9a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s098.tar.gz resources {}
2021/07/08 16:42:20  ->  n100.r02.s098.Main.cp_out_file 686fdf9a exec extern s3://niema-test/n100/r02/n100.r02.s098.tar.gz 35.7MiB
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloading (try 0): started
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloading list<val<.=43f7d239 35.7MiB> 35.7MiB>
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloading val<.=35489571 35.4MiB>
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloading val<.=d9243339 35.4MiB>
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloaded list<val<.=43f7d239 35.7MiB> 35.7MiB>
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloaded val<.=d9243339 35.4MiB>
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloaded val<.=35489571 35.4MiB>
2021/07/08 16:42:20 scheduler task cafad4ba (flow 5063d2f3): unloading (try 0): successful, next state: complete
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:20  <-  n100.r02.s011.Main.out_file 5063d2f3 ok     exec 5m10s 35.7MiB
2021/07/08 16:42:20 n100.r02.s011.Main.out_file 5063d2f3 n100/r02/n100.r02.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:00a24cd92d87229cb49469a906675953618a04db58dfc85ecf6f95ed644acd1d
	sha256:5063d2f31e862331797f095a91b3133a6d338864236fa82265c96071c651e2ba
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cafad4ba25e41d6e67141358b26bc9e3cd98fcae3755eb4f8a8d2c90c20603b6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s011_output"
	    wget -O "n100.r02.s011_output/n100.r02.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s011_output/n100.r02.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s011_output/n100.r02.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s011_output/n100.r02.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s011_output/n100.r02.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s011_output/n100.r02.s011.reference.fas" "n100.r02.s011_output/n100.r02.s011.fq1.fastq" "n100.r02.s011_output/n100.r02.s011.fq2.fastq" | samtools view -bS - > "n100.r02.s011_output/n100.r02.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s011_output/n100.r02.s011.untrimmed.sorted.bam" "n100.r02.s011_output/n100.r02.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s011_output/n100.r02.s011.untrimmed.sorted.bam" -b "n100.r02.s011_output/n100.r02.s011.primers.bed" -p "n100.r02.s011_output/n100.r02.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" "n100.r02.s011_output/n100.r02.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s011_output/n100.r02.s011.reference.fas" "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" > "n100.r02.s011_output/n100.r02.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s011_output/n100.r02.s011.reference.fas" --call-indels "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" > "n100.r02.s011_output/n100.r02.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s011_output/n100.r02.s011.trimmed.sorted.bam" > "n100.r02.s011_output/n100.r02.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s011_output/n100.r02.s011.depth.txt" "n100.r02.s011_output/n100.r02.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s011_output/n100.r02.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s011_output/n100.r02.s011.reference.fas" | bcftools consensus -m "n100.r02.s011_output/n100.r02.s011.low_depth.tsv" tmp.vcf.gz > "n100.r02.s011_output/n100.r02.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:43f7d23960c1f0b4533ef3cb5c903364d3c426cfaf9c6933a20e11860ec82dc5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=129.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.1KiB
2021/07/08 16:42:20 scheduler task d2060f75 (flow 0498e149): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s011.tar.gz resources {}
2021/07/08 16:42:20  ->  n100.r02.s011.Main.cp_out_file 0498e149 exec extern s3://niema-test/n100/r02/n100.r02.s011.tar.gz 35.7MiB
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloading (try 0): started
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloading list<val<.=455440ee 35.8MiB> 35.8MiB>
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloading val<.=95dcbea9 35.4MiB>
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloading val<.=d4353fed 35.4MiB>
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloaded val<.=95dcbea9 35.4MiB>
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloaded list<val<.=455440ee 35.8MiB> 35.8MiB>
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloaded val<.=d4353fed 35.4MiB>
2021/07/08 16:42:20 scheduler task 0b7fb97b (flow 874b9577): unloading (try 0): successful, next state: complete
2021/07/08 16:42:20  <-  n100.r02.s082.Main.out_file 874b9577 ok     exec 5m10s 35.8MiB
2021/07/08 16:42:20 n100.r02.s082.Main.out_file 874b9577 n100/r02/n100.r02.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d96b43ba38e2890cd94d041f3db068ca00081e71e86519c70f0c1fb489ebdf06
	sha256:874b9577d02bf6da2fcc7bdff722558c4e16bf84c2cf6ed843ec2b3bbd889599
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b7fb97bf63b2f581d8e487d857fa70943911287f405ee7431df4ec5dabbdb5d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s082_output"
	    wget -O "n100.r02.s082_output/n100.r02.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s082_output/n100.r02.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s082_output/n100.r02.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s082_output/n100.r02.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s082_output/n100.r02.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s082_output/n100.r02.s082.reference.fas" "n100.r02.s082_output/n100.r02.s082.fq1.fastq" "n100.r02.s082_output/n100.r02.s082.fq2.fastq" | samtools view -bS - > "n100.r02.s082_output/n100.r02.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s082_output/n100.r02.s082.untrimmed.sorted.bam" "n100.r02.s082_output/n100.r02.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s082_output/n100.r02.s082.untrimmed.sorted.bam" -b "n100.r02.s082_output/n100.r02.s082.primers.bed" -p "n100.r02.s082_output/n100.r02.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" "n100.r02.s082_output/n100.r02.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s082_output/n100.r02.s082.reference.fas" "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" > "n100.r02.s082_output/n100.r02.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s082_output/n100.r02.s082.reference.fas" --call-indels "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" > "n100.r02.s082_output/n100.r02.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s082_output/n100.r02.s082.trimmed.sorted.bam" > "n100.r02.s082_output/n100.r02.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s082_output/n100.r02.s082.depth.txt" "n100.r02.s082_output/n100.r02.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s082_output/n100.r02.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s082_output/n100.r02.s082.reference.fas" | bcftools consensus -m "n100.r02.s082_output/n100.r02.s082.low_depth.tsv" tmp.vcf.gz > "n100.r02.s082_output/n100.r02.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:455440ee38b06a20bf5bdcdd3c6598400dab913d128c305dd213ba3ea6019080 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=126.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=694B max=2.0KiB
2021/07/08 16:42:20 scheduler task f8c619a0 (flow 80af6cf3): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s082.tar.gz resources {}
2021/07/08 16:42:20  ->  n100.r02.s082.Main.cp_out_file 80af6cf3 exec extern s3://niema-test/n100/r02/n100.r02.s082.tar.gz 35.8MiB
2021/07/08 16:42:20 scheduler task f1d0e2d0 (flow 37b5e302): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): promoting objects (try 0): started
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): retrieving diagnostic output (try 0): started
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): retrieving result (try 0): started
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): promoting objects (try 0): started
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): transferring output (try 0): started
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): retrieving diagnostic output (try 0): started
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): retrieving result (try 0): started
2021/07/08 16:42:21 scheduler task b8c08d24 (flow 686fdf9a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:da7faab873a2ffb28b41fa26fe2b5fe122b4529fdfc1fb3039a427ffaedd9f3f -> s3://niema-test/n100/r02/n100.r02.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:21  <-  n100.r02.s098.Main.cp_out_file 686fdf9a ok   extern 0s 35.7MiB
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:21 scheduler task 28e75581 (flow e654e99d): transferring output (try 0): started
2021/07/08 16:42:21 scheduler task d2060f75 (flow 0498e149): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:43f7d23960c1f0b4533ef3cb5c903364d3c426cfaf9c6933a20e11860ec82dc5 -> s3://niema-test/n100/r02/n100.r02.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:21  <-  n100.r02.s011.Main.cp_out_file 0498e149 ok   extern 0s 35.7MiB
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): promoting objects (try 0): started
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): retrieving diagnostic output (try 0): started
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloading (try 0): started
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloading list<val<.=101eedeb 35.8MiB> 35.8MiB>
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloading val<.=7edfd579 35.4MiB>
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloading val<.=0a7a3108 35.4MiB>
2021/07/08 16:42:21 scheduler task aca0b7cc (flow 3d43c667): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:21 scheduler task aca0b7cc (flow 3d43c667): promoting objects (try 0): started
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): retrieving result (try 0): started
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloaded val<.=7edfd579 35.4MiB>
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloaded list<val<.=101eedeb 35.8MiB> 35.8MiB>
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloaded val<.=0a7a3108 35.4MiB>
2021/07/08 16:42:21 scheduler task f1d0e2d0 (flow 37b5e302): unloading (try 0): successful, next state: complete
2021/07/08 16:42:21  <-  n100.r02.s088.Main.out_file 37b5e302 ok     exec 5m11s 35.8MiB
2021/07/08 16:42:21 n100.r02.s088.Main.out_file 37b5e302 n100/r02/n100.r02.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f6c806fba9302d1f7bb2418146ff2952c7b1de936640b383ee9cd6fc5a949f72
	sha256:37b5e30264ecd4fda0a4327104c79db12a5e541e57f33c03f14b890f679d5553
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f1d0e2d0b43df52367860c9f2e661e0e70b2b979001b0c4e3519c09cc2040006
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s088_output"
	    wget -O "n100.r02.s088_output/n100.r02.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s088_output/n100.r02.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s088_output/n100.r02.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s088_output/n100.r02.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s088_output/n100.r02.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s088_output/n100.r02.s088.reference.fas" "n100.r02.s088_output/n100.r02.s088.fq1.fastq" "n100.r02.s088_output/n100.r02.s088.fq2.fastq" | samtools view -bS - > "n100.r02.s088_output/n100.r02.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s088_output/n100.r02.s088.untrimmed.sorted.bam" "n100.r02.s088_output/n100.r02.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s088_output/n100.r02.s088.untrimmed.sorted.bam" -b "n100.r02.s088_output/n100.r02.s088.primers.bed" -p "n100.r02.s088_output/n100.r02.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" "n100.r02.s088_output/n100.r02.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s088_output/n100.r02.s088.reference.fas" "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" > "n100.r02.s088_output/n100.r02.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s088_output/n100.r02.s088.reference.fas" --call-indels "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" > "n100.r02.s088_output/n100.r02.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s088_output/n100.r02.s088.trimmed.sorted.bam" > "n100.r02.s088_output/n100.r02.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s088_output/n100.r02.s088.depth.txt" "n100.r02.s088_output/n100.r02.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s088_output/n100.r02.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s088_output/n100.r02.s088.reference.fas" | bcftools consensus -m "n100.r02.s088_output/n100.r02.s088.low_depth.tsv" tmp.vcf.gz > "n100.r02.s088_output/n100.r02.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:101eedeb53f635c92c18b2d7eae9d2a4348346a40d234c86d02af5d0e5436e37 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=130.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=869B max=2.0KiB
2021/07/08 16:42:21 scheduler task c5b8bc3d (flow 286f82a2): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s088.tar.gz resources {}
2021/07/08 16:42:21  ->  n100.r02.s088.Main.cp_out_file 286f82a2 exec extern s3://niema-test/n100/r02/n100.r02.s088.tar.gz 35.8MiB
2021/07/08 16:42:21 scheduler task aca0b7cc (flow 3d43c667): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:21 scheduler task aca0b7cc (flow 3d43c667): retrieving diagnostic output (try 0): started
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:21 scheduler task 67f058e0 (flow 5ea8511d): transferring output (try 0): started
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): retrieving result (try 0): started
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloading (try 0): started
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloading list<val<.=d81bf2c0 35.7MiB> 35.7MiB>
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloading val<.=3db6b91d 35.4MiB>
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloading val<.=277fe83e 35.4MiB>
2021/07/08 16:42:22 scheduler task f8c619a0 (flow 80af6cf3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:455440ee38b06a20bf5bdcdd3c6598400dab913d128c305dd213ba3ea6019080 -> s3://niema-test/n100/r02/n100.r02.s082.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:22  <-  n100.r02.s082.Main.cp_out_file 80af6cf3 ok   extern 0s 35.8MiB
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloaded list<val<.=d81bf2c0 35.7MiB> 35.7MiB>
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): transferring output (try 0): started
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloaded val<.=277fe83e 35.4MiB>
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloaded val<.=3db6b91d 35.4MiB>
2021/07/08 16:42:22 scheduler task 28e75581 (flow e654e99d): unloading (try 0): successful, next state: complete
2021/07/08 16:42:22  <-  n100.r02.s009.Main.out_file e654e99d ok     exec 5m11s 35.7MiB
2021/07/08 16:42:22 n100.r02.s009.Main.out_file e654e99d n100/r02/n100.r02.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:57ee03581e06c033aa9395f8496ec938c6d411c39950ee6ed4a054c97b3a0671
	sha256:e654e99d41ac83f157ee3fcfc089048e27a107535cedae8f6713b1f70344ed4e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/28e75581062c3c4f59b1b9cde5b27eb06f39ac1892f5d28a0988689362daf5f2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s009_output"
	    wget -O "n100.r02.s009_output/n100.r02.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s009_output/n100.r02.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s009_output/n100.r02.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s009_output/n100.r02.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s009_output/n100.r02.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s009_output/n100.r02.s009.reference.fas" "n100.r02.s009_output/n100.r02.s009.fq1.fastq" "n100.r02.s009_output/n100.r02.s009.fq2.fastq" | samtools view -bS - > "n100.r02.s009_output/n100.r02.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s009_output/n100.r02.s009.untrimmed.sorted.bam" "n100.r02.s009_output/n100.r02.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s009_output/n100.r02.s009.untrimmed.sorted.bam" -b "n100.r02.s009_output/n100.r02.s009.primers.bed" -p "n100.r02.s009_output/n100.r02.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" "n100.r02.s009_output/n100.r02.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s009_output/n100.r02.s009.reference.fas" "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" > "n100.r02.s009_output/n100.r02.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s009_output/n100.r02.s009.reference.fas" --call-indels "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" > "n100.r02.s009_output/n100.r02.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s009_output/n100.r02.s009.trimmed.sorted.bam" > "n100.r02.s009_output/n100.r02.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s009_output/n100.r02.s009.depth.txt" "n100.r02.s009_output/n100.r02.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s009_output/n100.r02.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s009_output/n100.r02.s009.reference.fas" | bcftools consensus -m "n100.r02.s009_output/n100.r02.s009.low_depth.tsv" tmp.vcf.gz > "n100.r02.s009_output/n100.r02.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d81bf2c06bed608adf5b77ae51af1c5fdaad98b11a25765b1b6af9400470c1d4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=129.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=873B max=2.0KiB
2021/07/08 16:42:22 scheduler task c2ccae35 (flow 2a310f56): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s009.tar.gz resources {}
2021/07/08 16:42:22  ->  n100.r02.s009.Main.cp_out_file 2a310f56 exec extern s3://niema-test/n100/r02/n100.r02.s009.tar.gz 35.7MiB
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloading (try 0): started
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloading list<val<.=5fa1b81d 35.7MiB> 35.7MiB>
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloading val<.=a40acfa0 35.4MiB>
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloading val<.=c6cd6b18 35.4MiB>
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloaded val<.=c6cd6b18 35.4MiB>
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloaded list<val<.=5fa1b81d 35.7MiB> 35.7MiB>
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloaded val<.=a40acfa0 35.4MiB>
2021/07/08 16:42:22 scheduler task 67f058e0 (flow 5ea8511d): unloading (try 0): successful, next state: complete
2021/07/08 16:42:22  <-  n100.r02.s026.Main.out_file 5ea8511d ok     exec 5m12s 35.7MiB
2021/07/08 16:42:22 n100.r02.s026.Main.out_file 5ea8511d n100/r02/n100.r02.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8461f9755c94b3fca9d1c913d7b02bbedf77ea2ba7f4de5192a24c52a069e32
	sha256:5ea8511dafc8c7c1b37dc3eae71aae9255d8679c5d7eafcb9be5b1aaa550fedd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67f058e0588baf863e9ffaf12ae9cc7d86fd34808827492c00c3c5b833409fce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s026_output"
	    wget -O "n100.r02.s026_output/n100.r02.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s026_output/n100.r02.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s026_output/n100.r02.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s026_output/n100.r02.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s026_output/n100.r02.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s026_output/n100.r02.s026.reference.fas" "n100.r02.s026_output/n100.r02.s026.fq1.fastq" "n100.r02.s026_output/n100.r02.s026.fq2.fastq" | samtools view -bS - > "n100.r02.s026_output/n100.r02.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s026_output/n100.r02.s026.untrimmed.sorted.bam" "n100.r02.s026_output/n100.r02.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s026_output/n100.r02.s026.untrimmed.sorted.bam" -b "n100.r02.s026_output/n100.r02.s026.primers.bed" -p "n100.r02.s026_output/n100.r02.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" "n100.r02.s026_output/n100.r02.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s026_output/n100.r02.s026.reference.fas" "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" > "n100.r02.s026_output/n100.r02.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s026_output/n100.r02.s026.reference.fas" --call-indels "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" > "n100.r02.s026_output/n100.r02.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s026_output/n100.r02.s026.trimmed.sorted.bam" > "n100.r02.s026_output/n100.r02.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s026_output/n100.r02.s026.depth.txt" "n100.r02.s026_output/n100.r02.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s026_output/n100.r02.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s026_output/n100.r02.s026.reference.fas" | bcftools consensus -m "n100.r02.s026_output/n100.r02.s026.low_depth.tsv" tmp.vcf.gz > "n100.r02.s026_output/n100.r02.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5fa1b81dca61bc2bf2fe619d08478f877ebb19d46c47f5a94855a1f8586fcaa0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=128.9MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 16:42:22 scheduler task 6abd1f97 (flow 9083350a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s026.tar.gz resources {}
2021/07/08 16:42:22  ->  n100.r02.s026.Main.cp_out_file 9083350a exec extern s3://niema-test/n100/r02/n100.r02.s026.tar.gz 35.7MiB
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloading (try 0): started
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloading val<.=57ab4c6a 35.4MiB>
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloading val<.=d411fe58 35.4MiB>
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloading list<val<.=3f41eeae 35.7MiB> 35.7MiB>
2021/07/08 16:42:22 scheduler task c5b8bc3d (flow 286f82a2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:101eedeb53f635c92c18b2d7eae9d2a4348346a40d234c86d02af5d0e5436e37 -> s3://niema-test/n100/r02/n100.r02.s088.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:22  <-  n100.r02.s088.Main.cp_out_file 286f82a2 ok   extern 0s 35.8MiB
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): promoting objects (try 0): started
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloaded list<val<.=3f41eeae 35.7MiB> 35.7MiB>
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloaded val<.=d411fe58 35.4MiB>
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloaded val<.=57ab4c6a 35.4MiB>
2021/07/08 16:42:22 scheduler task aca0b7cc (flow 3d43c667): unloading (try 0): successful, next state: complete
2021/07/08 16:42:22  <-  n100.r02.s072.Main.out_file 3d43c667 ok     exec 5m12s 35.7MiB
2021/07/08 16:42:22 n100.r02.s072.Main.out_file 3d43c667 n100/r02/n100.r02.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b47452e3cf479acd25765f1a7b1d09224604ef25b7f8c5df98418fc52535e928
	sha256:3d43c667c60681511207cd5fac40c0ecbd7e2a590781307259d3390ae9de190e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aca0b7cc5593045bb268ebedd01e3d56b490139606de9e3453907858c99eff87
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s072_output"
	    wget -O "n100.r02.s072_output/n100.r02.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s072_output/n100.r02.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s072_output/n100.r02.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s072_output/n100.r02.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s072_output/n100.r02.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s072_output/n100.r02.s072.reference.fas" "n100.r02.s072_output/n100.r02.s072.fq1.fastq" "n100.r02.s072_output/n100.r02.s072.fq2.fastq" | samtools view -bS - > "n100.r02.s072_output/n100.r02.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s072_output/n100.r02.s072.untrimmed.sorted.bam" "n100.r02.s072_output/n100.r02.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s072_output/n100.r02.s072.untrimmed.sorted.bam" -b "n100.r02.s072_output/n100.r02.s072.primers.bed" -p "n100.r02.s072_output/n100.r02.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" "n100.r02.s072_output/n100.r02.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s072_output/n100.r02.s072.reference.fas" "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" > "n100.r02.s072_output/n100.r02.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s072_output/n100.r02.s072.reference.fas" --call-indels "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" > "n100.r02.s072_output/n100.r02.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s072_output/n100.r02.s072.trimmed.sorted.bam" > "n100.r02.s072_output/n100.r02.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s072_output/n100.r02.s072.depth.txt" "n100.r02.s072_output/n100.r02.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s072_output/n100.r02.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s072_output/n100.r02.s072.reference.fas" | bcftools consensus -m "n100.r02.s072_output/n100.r02.s072.low_depth.tsv" tmp.vcf.gz > "n100.r02.s072_output/n100.r02.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3f41eeae56e761f549cdbbc71e89f35d42e4074f102ec35d51a9b0f89a6b026d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=129.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 16:42:22 scheduler task 8fa99e57 (flow f4b32292): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s072.tar.gz resources {}
2021/07/08 16:42:22  ->  n100.r02.s072.Main.cp_out_file f4b32292 exec extern s3://niema-test/n100/r02/n100.r02.s072.tar.gz 35.7MiB
2021/07/08 16:42:22 scheduler task c2ccae35 (flow 2a310f56): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d81bf2c06bed608adf5b77ae51af1c5fdaad98b11a25765b1b6af9400470c1d4 -> s3://niema-test/n100/r02/n100.r02.s009.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:22  <-  n100.r02.s009.Main.cp_out_file 2a310f56 ok   extern 0s 35.7MiB
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): retrieving diagnostic output (try 0): started
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): retrieving result (try 0): started
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:22 scheduler task a24d412d (flow fedce965): transferring output (try 0): started
2021/07/08 16:42:23 scheduler task 6abd1f97 (flow 9083350a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5fa1b81dca61bc2bf2fe619d08478f877ebb19d46c47f5a94855a1f8586fcaa0 -> s3://niema-test/n100/r02/n100.r02.s026.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:23  <-  n100.r02.s026.Main.cp_out_file 9083350a ok   extern 0s 35.7MiB
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): promoting objects (try 0): started
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:23 scheduler task 8fa99e57 (flow f4b32292): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3f41eeae56e761f549cdbbc71e89f35d42e4074f102ec35d51a9b0f89a6b026d -> s3://niema-test/n100/r02/n100.r02.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:23  <-  n100.r02.s072.Main.cp_out_file f4b32292 ok   extern 0s 35.7MiB
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloading (try 0): started
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloading list<val<.=1184426e 35.7MiB> 35.7MiB>
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloading val<.=45fb6ccc 35.4MiB>
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloading val<.=0388514c 35.4MiB>
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): retrieving diagnostic output (try 0): started
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloaded list<val<.=1184426e 35.7MiB> 35.7MiB>
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloaded val<.=0388514c 35.4MiB>
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloaded val<.=45fb6ccc 35.4MiB>
2021/07/08 16:42:23 scheduler task a24d412d (flow fedce965): unloading (try 0): successful, next state: complete
2021/07/08 16:42:23  <-  n100.r02.s047.Main.out_file fedce965 ok     exec 5m13s 35.7MiB
2021/07/08 16:42:23 n100.r02.s047.Main.out_file fedce965 n100/r02/n100.r02.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5e274690de3f0f3d0b4c93319f1f611af3c3001ee54cc39b85371c096640ed9f
	sha256:fedce965d03b91bdde7da5e3336ed28cd7c776a85f122816b58e8e7c00326432
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a24d412d43dac2cc555ad5068ee39d84194491e142eb4019ee5f05937a01c9b2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s047_output"
	    wget -O "n100.r02.s047_output/n100.r02.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s047_output/n100.r02.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s047_output/n100.r02.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s047_output/n100.r02.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s047_output/n100.r02.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s047_output/n100.r02.s047.reference.fas" "n100.r02.s047_output/n100.r02.s047.fq1.fastq" "n100.r02.s047_output/n100.r02.s047.fq2.fastq" | samtools view -bS - > "n100.r02.s047_output/n100.r02.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s047_output/n100.r02.s047.untrimmed.sorted.bam" "n100.r02.s047_output/n100.r02.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s047_output/n100.r02.s047.untrimmed.sorted.bam" -b "n100.r02.s047_output/n100.r02.s047.primers.bed" -p "n100.r02.s047_output/n100.r02.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" "n100.r02.s047_output/n100.r02.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s047_output/n100.r02.s047.reference.fas" "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" > "n100.r02.s047_output/n100.r02.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s047_output/n100.r02.s047.reference.fas" --call-indels "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" > "n100.r02.s047_output/n100.r02.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s047_output/n100.r02.s047.trimmed.sorted.bam" > "n100.r02.s047_output/n100.r02.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s047_output/n100.r02.s047.depth.txt" "n100.r02.s047_output/n100.r02.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s047_output/n100.r02.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s047_output/n100.r02.s047.reference.fas" | bcftools consensus -m "n100.r02.s047_output/n100.r02.s047.low_depth.tsv" tmp.vcf.gz > "n100.r02.s047_output/n100.r02.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1184426e3a7c4140e0613bfbc8fda93a6639cbec18d6e219c2fb1c843e607c97 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=131.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 16:42:23 scheduler task ba43bd9a (flow b0d2ccd5): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s047.tar.gz resources {}
2021/07/08 16:42:23  ->  n100.r02.s047.Main.cp_out_file b0d2ccd5 exec extern s3://niema-test/n100/r02/n100.r02.s047.tar.gz 35.7MiB
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): retrieving result (try 0): started
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:23 scheduler task 5ed6a8f0 (flow d1a20a99): transferring output (try 0): started
2021/07/08 16:42:23 scheduler task 080dc6e3 (flow a028a3dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:23 scheduler task 080dc6e3 (flow a028a3dc): promoting objects (try 0): started
2021/07/08 16:42:23 scheduler task 080dc6e3 (flow a028a3dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:23 scheduler task 080dc6e3 (flow a028a3dc): retrieving diagnostic output (try 0): started
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): retrieving result (try 0): started
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): transferring output (try 0): started
2021/07/08 16:42:24 scheduler task ba43bd9a (flow b0d2ccd5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1184426e3a7c4140e0613bfbc8fda93a6639cbec18d6e219c2fb1c843e607c97 -> s3://niema-test/n100/r02/n100.r02.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:24  <-  n100.r02.s047.Main.cp_out_file b0d2ccd5 ok   extern 0s 35.7MiB
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloading (try 0): started
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloading list<val<.=264cd6e3 35.7MiB> 35.7MiB>
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloading val<.=33e07a6a 35.4MiB>
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloading val<.=f5c66a08 35.4MiB>
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): promoting objects (try 0): started
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloaded list<val<.=264cd6e3 35.7MiB> 35.7MiB>
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloaded val<.=f5c66a08 35.4MiB>
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloaded val<.=33e07a6a 35.4MiB>
2021/07/08 16:42:24 scheduler task 5ed6a8f0 (flow d1a20a99): unloading (try 0): successful, next state: complete
2021/07/08 16:42:24  <-  n100.r02.s075.Main.out_file d1a20a99 ok     exec 5m8s 35.7MiB
2021/07/08 16:42:24 n100.r02.s075.Main.out_file d1a20a99 n100/r02/n100.r02.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5cc875ec08e7039975d3ddd1dfb9870e7a752575990f13c3eb95911cb3801b6
	sha256:d1a20a99392ebcc96c4a740ca6547bbcd874222e4c6d37981d9f3dbf2bd4e7a8
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5ed6a8f03319796520aca57a3e69c2bdd51c400ef1937f23559c36cf03694591
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s075_output"
	    wget -O "n100.r02.s075_output/n100.r02.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s075_output/n100.r02.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s075_output/n100.r02.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s075_output/n100.r02.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s075_output/n100.r02.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s075_output/n100.r02.s075.reference.fas" "n100.r02.s075_output/n100.r02.s075.fq1.fastq" "n100.r02.s075_output/n100.r02.s075.fq2.fastq" | samtools view -bS - > "n100.r02.s075_output/n100.r02.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s075_output/n100.r02.s075.untrimmed.sorted.bam" "n100.r02.s075_output/n100.r02.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s075_output/n100.r02.s075.untrimmed.sorted.bam" -b "n100.r02.s075_output/n100.r02.s075.primers.bed" -p "n100.r02.s075_output/n100.r02.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" "n100.r02.s075_output/n100.r02.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s075_output/n100.r02.s075.reference.fas" "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" > "n100.r02.s075_output/n100.r02.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s075_output/n100.r02.s075.reference.fas" --call-indels "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" > "n100.r02.s075_output/n100.r02.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s075_output/n100.r02.s075.trimmed.sorted.bam" > "n100.r02.s075_output/n100.r02.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s075_output/n100.r02.s075.depth.txt" "n100.r02.s075_output/n100.r02.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s075_output/n100.r02.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s075_output/n100.r02.s075.reference.fas" | bcftools consensus -m "n100.r02.s075_output/n100.r02.s075.low_depth.tsv" tmp.vcf.gz > "n100.r02.s075_output/n100.r02.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:264cd6e34a2dee829ca2e5eb69144758b39ad99ecfed82c35ed85a1b5d1155f6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=130.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 16:42:24 scheduler task 44baf0d6 (flow 150ecbad): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s075.tar.gz resources {}
2021/07/08 16:42:24  ->  n100.r02.s075.Main.cp_out_file 150ecbad exec extern s3://niema-test/n100/r02/n100.r02.s075.tar.gz 35.7MiB
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): retrieving diagnostic output (try 0): started
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): retrieving result (try 0): started
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:24 scheduler task 8c914f7e (flow 56fb7d44): transferring output (try 0): started
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloading (try 0): started
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloading list<val<.=ccbb2e5e 35.8MiB> 35.8MiB>
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloading val<.=67a08622 35.4MiB>
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloading val<.=bd905591 35.4MiB>
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloaded val<.=67a08622 35.4MiB>
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloaded list<val<.=ccbb2e5e 35.8MiB> 35.8MiB>
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloaded val<.=bd905591 35.4MiB>
2021/07/08 16:42:24 scheduler task 080dc6e3 (flow a028a3dc): unloading (try 0): successful, next state: complete
2021/07/08 16:42:24  <-  n100.r02.s006.Main.out_file a028a3dc ok     exec 5m8s 35.8MiB
2021/07/08 16:42:24 n100.r02.s006.Main.out_file a028a3dc n100/r02/n100.r02.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b61f639d8bd7917f567a85c4b0ffdf9df6555880f0e830cf8788253cbd54dbd
	sha256:a028a3dcda68f8af83193653627ab37731616ad2715d1eb9a42e92bb1792d3fd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/080dc6e346f02b25a52c034162464bb3c7b50967ee38542babdb5f4785b51403
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s006_output"
	    wget -O "n100.r02.s006_output/n100.r02.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s006_output/n100.r02.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s006_output/n100.r02.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s006_output/n100.r02.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s006_output/n100.r02.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s006_output/n100.r02.s006.reference.fas" "n100.r02.s006_output/n100.r02.s006.fq1.fastq" "n100.r02.s006_output/n100.r02.s006.fq2.fastq" | samtools view -bS - > "n100.r02.s006_output/n100.r02.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s006_output/n100.r02.s006.untrimmed.sorted.bam" "n100.r02.s006_output/n100.r02.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s006_output/n100.r02.s006.untrimmed.sorted.bam" -b "n100.r02.s006_output/n100.r02.s006.primers.bed" -p "n100.r02.s006_output/n100.r02.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" "n100.r02.s006_output/n100.r02.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s006_output/n100.r02.s006.reference.fas" "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" > "n100.r02.s006_output/n100.r02.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s006_output/n100.r02.s006.reference.fas" --call-indels "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" > "n100.r02.s006_output/n100.r02.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s006_output/n100.r02.s006.trimmed.sorted.bam" > "n100.r02.s006_output/n100.r02.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s006_output/n100.r02.s006.depth.txt" "n100.r02.s006_output/n100.r02.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s006_output/n100.r02.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s006_output/n100.r02.s006.reference.fas" | bcftools consensus -m "n100.r02.s006_output/n100.r02.s006.low_depth.tsv" tmp.vcf.gz > "n100.r02.s006_output/n100.r02.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ccbb2e5e928a2b5430b61938cbfda85e20e70e9bdee6430c7ae8320cb3e5aa57 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=125.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=859B max=3.0KiB
2021/07/08 16:42:24 scheduler task d841b6f7 (flow 1577c871): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s006.tar.gz resources {}
2021/07/08 16:42:24  ->  n100.r02.s006.Main.cp_out_file 1577c871 exec extern s3://niema-test/n100/r02/n100.r02.s006.tar.gz 35.8MiB
2021/07/08 16:42:24 scheduler task 44baf0d6 (flow 150ecbad): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:264cd6e34a2dee829ca2e5eb69144758b39ad99ecfed82c35ed85a1b5d1155f6 -> s3://niema-test/n100/r02/n100.r02.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:24  <-  n100.r02.s075.Main.cp_out_file 150ecbad ok   extern 0s 35.7MiB
2021/07/08 16:42:24 scheduler task 6dbd0fd3 (flow 4574c5bb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:24 scheduler task 6dbd0fd3 (flow 4574c5bb): promoting objects (try 0): started
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloading (try 0): started
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloading list<val<.=1767e2d5 35.7MiB> 35.7MiB>
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloading val<.=0c9eb3ab 35.4MiB>
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloading val<.=29b674bf 35.4MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): retrieving diagnostic output (try 0): started
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloaded list<val<.=1767e2d5 35.7MiB> 35.7MiB>
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloaded val<.=0c9eb3ab 35.4MiB>
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloaded val<.=29b674bf 35.4MiB>
2021/07/08 16:42:25 scheduler task 8c914f7e (flow 56fb7d44): unloading (try 0): successful, next state: complete
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): promoting objects (try 0): started
2021/07/08 16:42:25  <-  n100.r02.s074.Main.out_file 56fb7d44 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:25 n100.r02.s074.Main.out_file 56fb7d44 n100/r02/n100.r02.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fd473d40450c15888d4db53f7ac74c377a343dd557f0507d5b7628eceb72d3de
	sha256:56fb7d44f41913a0d5e9f5bbc6ca3dafe80e5db0b6ea013c355596bb8194899e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c914f7e009d1f0ff6366ac317b94f9281a525cbe5e5efddef7c0643b0fa0f72
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s074_output"
	    wget -O "n100.r02.s074_output/n100.r02.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s074_output/n100.r02.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s074_output/n100.r02.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s074_output/n100.r02.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s074_output/n100.r02.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s074_output/n100.r02.s074.reference.fas" "n100.r02.s074_output/n100.r02.s074.fq1.fastq" "n100.r02.s074_output/n100.r02.s074.fq2.fastq" | samtools view -bS - > "n100.r02.s074_output/n100.r02.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s074_output/n100.r02.s074.untrimmed.sorted.bam" "n100.r02.s074_output/n100.r02.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s074_output/n100.r02.s074.untrimmed.sorted.bam" -b "n100.r02.s074_output/n100.r02.s074.primers.bed" -p "n100.r02.s074_output/n100.r02.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" "n100.r02.s074_output/n100.r02.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s074_output/n100.r02.s074.reference.fas" "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" > "n100.r02.s074_output/n100.r02.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s074_output/n100.r02.s074.reference.fas" --call-indels "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" > "n100.r02.s074_output/n100.r02.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s074_output/n100.r02.s074.trimmed.sorted.bam" > "n100.r02.s074_output/n100.r02.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s074_output/n100.r02.s074.depth.txt" "n100.r02.s074_output/n100.r02.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s074_output/n100.r02.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s074_output/n100.r02.s074.reference.fas" | bcftools consensus -m "n100.r02.s074_output/n100.r02.s074.low_depth.tsv" tmp.vcf.gz > "n100.r02.s074_output/n100.r02.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1767e2d54df8c47f54906609750324fe4252b74eeb571cb9c07e13cc158e3320 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=127.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=870B max=3.1KiB
2021/07/08 16:42:25 scheduler task 7b5181fa (flow 7d951899): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s074.tar.gz resources {}
2021/07/08 16:42:25  ->  n100.r02.s074.Main.cp_out_file 7d951899 exec extern s3://niema-test/n100/r02/n100.r02.s074.tar.gz 35.7MiB
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): retrieving result (try 0): started
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): retrieving diagnostic output (try 0): started
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): transferring output (try 0): started
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): retrieving result (try 0): started
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): transferring output (try 0): started
2021/07/08 16:42:25 scheduler task d841b6f7 (flow 1577c871): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ccbb2e5e928a2b5430b61938cbfda85e20e70e9bdee6430c7ae8320cb3e5aa57 -> s3://niema-test/n100/r02/n100.r02.s006.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:25  <-  n100.r02.s006.Main.cp_out_file 1577c871 ok   extern 0s 35.8MiB
2021/07/08 16:42:25 scheduler task 7b5181fa (flow 7d951899): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1767e2d54df8c47f54906609750324fe4252b74eeb571cb9c07e13cc158e3320 -> s3://niema-test/n100/r02/n100.r02.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:25  <-  n100.r02.s074.Main.cp_out_file 7d951899 ok   extern 0s 35.7MiB
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloading (try 0): started
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloading list<val<.=08303ee6 35.7MiB> 35.7MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloading val<.=ea4a7f62 35.4MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloading val<.=86630494 35.4MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloaded val<.=86630494 35.4MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloaded val<.=ea4a7f62 35.4MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloaded list<val<.=08303ee6 35.7MiB> 35.7MiB>
2021/07/08 16:42:25 scheduler task 6dbd0fd3 (flow 4574c5bb): unloading (try 0): successful, next state: complete
2021/07/08 16:42:25  <-  n100.r02.s073.Main.out_file 4574c5bb ok     exec 5m9s 35.7MiB
2021/07/08 16:42:25 n100.r02.s073.Main.out_file 4574c5bb n100/r02/n100.r02.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27fa4007af7c77294530512f1352a4c38b4b0305314013c65faf9c4ddf980a31
	sha256:4574c5bb708e6856dd522785e4d01388f14758d7b82029293719c10074a896ae
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6dbd0fd31597473198bde0cd4cd348e8f0c5fe230cf8996a850bd1d72e8ba232
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s073_output"
	    wget -O "n100.r02.s073_output/n100.r02.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s073_output/n100.r02.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s073_output/n100.r02.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s073_output/n100.r02.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s073_output/n100.r02.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s073_output/n100.r02.s073.reference.fas" "n100.r02.s073_output/n100.r02.s073.fq1.fastq" "n100.r02.s073_output/n100.r02.s073.fq2.fastq" | samtools view -bS - > "n100.r02.s073_output/n100.r02.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s073_output/n100.r02.s073.untrimmed.sorted.bam" "n100.r02.s073_output/n100.r02.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s073_output/n100.r02.s073.untrimmed.sorted.bam" -b "n100.r02.s073_output/n100.r02.s073.primers.bed" -p "n100.r02.s073_output/n100.r02.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" "n100.r02.s073_output/n100.r02.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s073_output/n100.r02.s073.reference.fas" "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" > "n100.r02.s073_output/n100.r02.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s073_output/n100.r02.s073.reference.fas" --call-indels "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" > "n100.r02.s073_output/n100.r02.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s073_output/n100.r02.s073.trimmed.sorted.bam" > "n100.r02.s073_output/n100.r02.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s073_output/n100.r02.s073.depth.txt" "n100.r02.s073_output/n100.r02.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s073_output/n100.r02.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s073_output/n100.r02.s073.reference.fas" | bcftools consensus -m "n100.r02.s073_output/n100.r02.s073.low_depth.tsv" tmp.vcf.gz > "n100.r02.s073_output/n100.r02.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:08303ee602d343387c5f6fd926375ce18d94c91896240afc2a17f9bf9ff35fe2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=126.0MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 16:42:25 scheduler task 58c5dc37 (flow 5d029251): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s073.tar.gz resources {}
2021/07/08 16:42:25  ->  n100.r02.s073.Main.cp_out_file 5d029251 exec extern s3://niema-test/n100/r02/n100.r02.s073.tar.gz 35.7MiB
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): unloading (try 0): started
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): unloading list<val<.=22217c84 35.8MiB> 35.8MiB>
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): unloading val<.=eea41153 35.4MiB>
2021/07/08 16:42:25 scheduler task 56e751ca (flow 4e926108): unloading val<.=97059e57 35.4MiB>
2021/07/08 16:42:26 scheduler task 56e751ca (flow 4e926108): unloaded val<.=eea41153 35.4MiB>
2021/07/08 16:42:26 scheduler task 56e751ca (flow 4e926108): unloaded list<val<.=22217c84 35.8MiB> 35.8MiB>
2021/07/08 16:42:26 scheduler task 56e751ca (flow 4e926108): unloaded val<.=97059e57 35.4MiB>
2021/07/08 16:42:26 scheduler task 56e751ca (flow 4e926108): unloading (try 0): successful, next state: complete
2021/07/08 16:42:26  <-  n100.r02.s037.Main.out_file 4e926108 ok     exec 5m9s 35.8MiB
2021/07/08 16:42:26 n100.r02.s037.Main.out_file 4e926108 n100/r02/n100.r02.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52f36f7ecfb47e8fc60059bf97d8900adb618af2837a17d83b12ed9f7b569bc0
	sha256:4e926108dc7ebad401eb79efedffa4a5ba5663585332a56364b1bd95a41e6083
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/56e751ca614f1c4c11612eec68c772ca6ca9039016ab28d148332133f507c0ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s037_output"
	    wget -O "n100.r02.s037_output/n100.r02.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s037_output/n100.r02.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s037_output/n100.r02.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s037_output/n100.r02.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s037_output/n100.r02.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s037_output/n100.r02.s037.reference.fas" "n100.r02.s037_output/n100.r02.s037.fq1.fastq" "n100.r02.s037_output/n100.r02.s037.fq2.fastq" | samtools view -bS - > "n100.r02.s037_output/n100.r02.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s037_output/n100.r02.s037.untrimmed.sorted.bam" "n100.r02.s037_output/n100.r02.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s037_output/n100.r02.s037.untrimmed.sorted.bam" -b "n100.r02.s037_output/n100.r02.s037.primers.bed" -p "n100.r02.s037_output/n100.r02.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" "n100.r02.s037_output/n100.r02.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s037_output/n100.r02.s037.reference.fas" "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" > "n100.r02.s037_output/n100.r02.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s037_output/n100.r02.s037.reference.fas" --call-indels "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" > "n100.r02.s037_output/n100.r02.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s037_output/n100.r02.s037.trimmed.sorted.bam" > "n100.r02.s037_output/n100.r02.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s037_output/n100.r02.s037.depth.txt" "n100.r02.s037_output/n100.r02.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s037_output/n100.r02.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s037_output/n100.r02.s037.reference.fas" | bcftools consensus -m "n100.r02.s037_output/n100.r02.s037.low_depth.tsv" tmp.vcf.gz > "n100.r02.s037_output/n100.r02.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:22217c846bf66bec2593057f549ad72e94b9f0e2d9cf4a782af3c8320bdb59dd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.4MiB max=127.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 16:42:26 scheduler task f05e5097 (flow 3c405f97): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s037.tar.gz resources {}
2021/07/08 16:42:26  ->  n100.r02.s037.Main.cp_out_file 3c405f97 exec extern s3://niema-test/n100/r02/n100.r02.s037.tar.gz 35.8MiB
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): promoting objects (try 0): started
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): retrieving diagnostic output (try 0): started
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): promoting objects (try 0): started
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): retrieving result (try 0): started
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): retrieving diagnostic output (try 0): started
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): transferring output (try 0): started
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:26 scheduler task 58c5dc37 (flow 5d029251): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:08303ee602d343387c5f6fd926375ce18d94c91896240afc2a17f9bf9ff35fe2 -> s3://niema-test/n100/r02/n100.r02.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:26  <-  n100.r02.s073.Main.cp_out_file 5d029251 ok   extern 0s 35.7MiB
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): retrieving result (try 0): started
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): promoting objects (try 0): started
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:26 scheduler task 8e4c2298 (flow 95b427ce): transferring output (try 0): started
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): retrieving diagnostic output (try 0): started
2021/07/08 16:42:26 scheduler task f05e5097 (flow 3c405f97): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:22217c846bf66bec2593057f549ad72e94b9f0e2d9cf4a782af3c8320bdb59dd -> s3://niema-test/n100/r02/n100.r02.s037.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:26  <-  n100.r02.s037.Main.cp_out_file 3c405f97 ok   extern 0s 35.8MiB
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): retrieving result (try 0): started
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:26 scheduler task 8273013c (flow d3ff6df9): transferring output (try 0): started
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): unloading (try 0): started
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): unloading list<val<.=955498fa 35.7MiB> 35.7MiB>
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): unloading val<.=c23c28fe 35.4MiB>
2021/07/08 16:42:26 scheduler task 3b6becc8 (flow 3d8a8283): unloading val<.=e1062971 35.4MiB>
2021/07/08 16:42:27 scheduler task 3b6becc8 (flow 3d8a8283): unloaded val<.=c23c28fe 35.4MiB>
2021/07/08 16:42:27 scheduler task 3b6becc8 (flow 3d8a8283): unloaded val<.=e1062971 35.4MiB>
2021/07/08 16:42:27 scheduler task 3b6becc8 (flow 3d8a8283): unloaded list<val<.=955498fa 35.7MiB> 35.7MiB>
2021/07/08 16:42:27 scheduler task 3b6becc8 (flow 3d8a8283): unloading (try 0): successful, next state: complete
2021/07/08 16:42:27  <-  n100.r02.s031.Main.out_file 3d8a8283 ok     exec 5m10s 35.7MiB
2021/07/08 16:42:27 n100.r02.s031.Main.out_file 3d8a8283 n100/r02/n100.r02.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df71eab6622b6da34f66f6a4a1d0ec4f56fc0795d82ac7b38fbc9aa157e45b8a
	sha256:3d8a8283732e37a3bc1a5b2e9c3ee4126acc6abaf4448f16cf9a2fdd403c005a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3b6becc8fdb57515e0fef9b18bb14786f14abd0230735aeb6802a901603b36dc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s031_output"
	    wget -O "n100.r02.s031_output/n100.r02.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s031_output/n100.r02.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s031_output/n100.r02.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s031_output/n100.r02.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s031_output/n100.r02.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s031_output/n100.r02.s031.reference.fas" "n100.r02.s031_output/n100.r02.s031.fq1.fastq" "n100.r02.s031_output/n100.r02.s031.fq2.fastq" | samtools view -bS - > "n100.r02.s031_output/n100.r02.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s031_output/n100.r02.s031.untrimmed.sorted.bam" "n100.r02.s031_output/n100.r02.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s031_output/n100.r02.s031.untrimmed.sorted.bam" -b "n100.r02.s031_output/n100.r02.s031.primers.bed" -p "n100.r02.s031_output/n100.r02.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" "n100.r02.s031_output/n100.r02.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s031_output/n100.r02.s031.reference.fas" "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" > "n100.r02.s031_output/n100.r02.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s031_output/n100.r02.s031.reference.fas" --call-indels "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" > "n100.r02.s031_output/n100.r02.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s031_output/n100.r02.s031.trimmed.sorted.bam" > "n100.r02.s031_output/n100.r02.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s031_output/n100.r02.s031.depth.txt" "n100.r02.s031_output/n100.r02.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s031_output/n100.r02.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s031_output/n100.r02.s031.reference.fas" | bcftools consensus -m "n100.r02.s031_output/n100.r02.s031.low_depth.tsv" tmp.vcf.gz > "n100.r02.s031_output/n100.r02.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:955498fa91b9ae661cf10423c108e297cc4e525be6e61ef3808c0f4c66236bea 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 16:42:27 scheduler task dfbbf212 (flow c7a41a09): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s031.tar.gz resources {}
2021/07/08 16:42:27  ->  n100.r02.s031.Main.cp_out_file c7a41a09 exec extern s3://niema-test/n100/r02/n100.r02.s031.tar.gz 35.7MiB
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): promoting objects (try 0): started
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloading (try 0): started
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloading list<val<.=9c76616b 35.8MiB> 35.8MiB>
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloading val<.=036a9071 35.4MiB>
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloading val<.=9df21bfa 35.4MiB>
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): retrieving diagnostic output (try 0): started
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloaded val<.=9df21bfa 35.4MiB>
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloaded list<val<.=9c76616b 35.8MiB> 35.8MiB>
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloaded val<.=036a9071 35.4MiB>
2021/07/08 16:42:27 scheduler task 8e4c2298 (flow 95b427ce): unloading (try 0): successful, next state: complete
2021/07/08 16:42:27  <-  n100.r02.s077.Main.out_file 95b427ce ok     exec 5m10s 35.8MiB
2021/07/08 16:42:27 n100.r02.s077.Main.out_file 95b427ce n100/r02/n100.r02.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a27c2ed3cab8360bebe5e94c42ef0abb6f4773130c23902ea667f489da7b213
	sha256:95b427ce024b27184b09b17fc844aa09fc58f5ae41e2c05864f16cc4a261123b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8e4c2298d6fbd1870a117d1134f23ca01689a33b1b8ee3b728102c1a3fb96227
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s077_output"
	    wget -O "n100.r02.s077_output/n100.r02.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s077_output/n100.r02.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s077_output/n100.r02.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s077_output/n100.r02.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s077_output/n100.r02.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s077_output/n100.r02.s077.reference.fas" "n100.r02.s077_output/n100.r02.s077.fq1.fastq" "n100.r02.s077_output/n100.r02.s077.fq2.fastq" | samtools view -bS - > "n100.r02.s077_output/n100.r02.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s077_output/n100.r02.s077.untrimmed.sorted.bam" "n100.r02.s077_output/n100.r02.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s077_output/n100.r02.s077.untrimmed.sorted.bam" -b "n100.r02.s077_output/n100.r02.s077.primers.bed" -p "n100.r02.s077_output/n100.r02.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" "n100.r02.s077_output/n100.r02.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s077_output/n100.r02.s077.reference.fas" "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" > "n100.r02.s077_output/n100.r02.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s077_output/n100.r02.s077.reference.fas" --call-indels "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" > "n100.r02.s077_output/n100.r02.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s077_output/n100.r02.s077.trimmed.sorted.bam" > "n100.r02.s077_output/n100.r02.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s077_output/n100.r02.s077.depth.txt" "n100.r02.s077_output/n100.r02.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s077_output/n100.r02.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s077_output/n100.r02.s077.reference.fas" | bcftools consensus -m "n100.r02.s077_output/n100.r02.s077.low_depth.tsv" tmp.vcf.gz > "n100.r02.s077_output/n100.r02.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c76616b3e87d817210411d5b7926f5eab1df303377ab065079b5686785d0704 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=129.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:27 scheduler task 9c00c9d8 (flow 2d0ca012): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s077.tar.gz resources {}
2021/07/08 16:42:27  ->  n100.r02.s077.Main.cp_out_file 2d0ca012 exec extern s3://niema-test/n100/r02/n100.r02.s077.tar.gz 35.8MiB
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): retrieving result (try 0): started
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloading (try 0): started
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloading list<val<.=872385a2 35.7MiB> 35.7MiB>
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloading val<.=a6ca8e27 35.4MiB>
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloading val<.=b65eebd6 35.4MiB>
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): transferring output (try 0): started
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloaded list<val<.=872385a2 35.7MiB> 35.7MiB>
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloaded val<.=a6ca8e27 35.4MiB>
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloaded val<.=b65eebd6 35.4MiB>
2021/07/08 16:42:27 scheduler task 8273013c (flow d3ff6df9): unloading (try 0): successful, next state: complete
2021/07/08 16:42:27  <-  n100.r02.s056.Main.out_file d3ff6df9 ok     exec 5m11s 35.7MiB
2021/07/08 16:42:27 n100.r02.s056.Main.out_file d3ff6df9 n100/r02/n100.r02.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ba15223a5eb96aa5f32263e4ddca7d203aadc1b7750ec448071590dd691c53e2
	sha256:d3ff6df9c58e5f343b8b41546ac84afb6f22e1ea49702af14f2d54674761ebae
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8273013c8a3563502941aa1857ede5df46d7637f0d0163655ba08b8490f55277
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s056_output"
	    wget -O "n100.r02.s056_output/n100.r02.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s056_output/n100.r02.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s056_output/n100.r02.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s056_output/n100.r02.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s056_output/n100.r02.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s056_output/n100.r02.s056.reference.fas" "n100.r02.s056_output/n100.r02.s056.fq1.fastq" "n100.r02.s056_output/n100.r02.s056.fq2.fastq" | samtools view -bS - > "n100.r02.s056_output/n100.r02.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s056_output/n100.r02.s056.untrimmed.sorted.bam" "n100.r02.s056_output/n100.r02.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s056_output/n100.r02.s056.untrimmed.sorted.bam" -b "n100.r02.s056_output/n100.r02.s056.primers.bed" -p "n100.r02.s056_output/n100.r02.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" "n100.r02.s056_output/n100.r02.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s056_output/n100.r02.s056.reference.fas" "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" > "n100.r02.s056_output/n100.r02.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s056_output/n100.r02.s056.reference.fas" --call-indels "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" > "n100.r02.s056_output/n100.r02.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s056_output/n100.r02.s056.trimmed.sorted.bam" > "n100.r02.s056_output/n100.r02.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s056_output/n100.r02.s056.depth.txt" "n100.r02.s056_output/n100.r02.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s056_output/n100.r02.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s056_output/n100.r02.s056.reference.fas" | bcftools consensus -m "n100.r02.s056_output/n100.r02.s056.low_depth.tsv" tmp.vcf.gz > "n100.r02.s056_output/n100.r02.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:872385a26913b803bd753fa8447d3588defc263cf5d7816330003b3942279672 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=125.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=2.0KiB
2021/07/08 16:42:27 scheduler task 6e00a968 (flow ccf756f4): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s056.tar.gz resources {}
2021/07/08 16:42:27  ->  n100.r02.s056.Main.cp_out_file ccf756f4 exec extern s3://niema-test/n100/r02/n100.r02.s056.tar.gz 35.7MiB
2021/07/08 16:42:27 scheduler task dfbbf212 (flow c7a41a09): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:955498fa91b9ae661cf10423c108e297cc4e525be6e61ef3808c0f4c66236bea -> s3://niema-test/n100/r02/n100.r02.s031.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:27  <-  n100.r02.s031.Main.cp_out_file c7a41a09 ok   extern 0s 35.7MiB
2021/07/08 16:42:27 scheduler task 79554f4f (flow 08173ef0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:27 scheduler task 79554f4f (flow 08173ef0): promoting objects (try 0): started
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:27 scheduler task 79554f4f (flow 08173ef0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): unloading (try 0): started
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): unloading list<val<.=c003b432 35.8MiB> 35.8MiB>
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): unloading val<.=580f8665 35.4MiB>
2021/07/08 16:42:27 scheduler task 69a372ec (flow c6cdb5ad): unloading val<.=9bb28058 35.4MiB>
2021/07/08 16:42:27 scheduler task 79554f4f (flow 08173ef0): retrieving diagnostic output (try 0): started
2021/07/08 16:42:27 scheduler task 9c00c9d8 (flow 2d0ca012): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c76616b3e87d817210411d5b7926f5eab1df303377ab065079b5686785d0704 -> s3://niema-test/n100/r02/n100.r02.s077.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:27  <-  n100.r02.s077.Main.cp_out_file 2d0ca012 ok   extern 0s 35.8MiB
2021/07/08 16:42:28 scheduler task 69a372ec (flow c6cdb5ad): unloaded list<val<.=c003b432 35.8MiB> 35.8MiB>
2021/07/08 16:42:28 scheduler task 69a372ec (flow c6cdb5ad): unloaded val<.=9bb28058 35.4MiB>
2021/07/08 16:42:28 scheduler task 69a372ec (flow c6cdb5ad): unloaded val<.=580f8665 35.4MiB>
2021/07/08 16:42:28 scheduler task 69a372ec (flow c6cdb5ad): unloading (try 0): successful, next state: complete
2021/07/08 16:42:28  <-  n100.r02.s095.Main.out_file c6cdb5ad ok     exec 5m11s 35.8MiB
2021/07/08 16:42:28 n100.r02.s095.Main.out_file c6cdb5ad n100/r02/n100.r02.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55ae0b2d564ccb2d187c5bf968b6a2db68a0dc39964c7f320a21343ced7093ff
	sha256:c6cdb5adc7a72cc5b002c1e44bcb4c49c3ef42fc50f96535a624aeb16d488869
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/69a372ec9f608138178977d39a0a8f1ac0356debf8261ecb6f027a1c6c727e9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s095_output"
	    wget -O "n100.r02.s095_output/n100.r02.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s095_output/n100.r02.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s095_output/n100.r02.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s095_output/n100.r02.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s095_output/n100.r02.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s095_output/n100.r02.s095.reference.fas" "n100.r02.s095_output/n100.r02.s095.fq1.fastq" "n100.r02.s095_output/n100.r02.s095.fq2.fastq" | samtools view -bS - > "n100.r02.s095_output/n100.r02.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s095_output/n100.r02.s095.untrimmed.sorted.bam" "n100.r02.s095_output/n100.r02.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s095_output/n100.r02.s095.untrimmed.sorted.bam" -b "n100.r02.s095_output/n100.r02.s095.primers.bed" -p "n100.r02.s095_output/n100.r02.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" "n100.r02.s095_output/n100.r02.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s095_output/n100.r02.s095.reference.fas" "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" > "n100.r02.s095_output/n100.r02.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s095_output/n100.r02.s095.reference.fas" --call-indels "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" > "n100.r02.s095_output/n100.r02.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s095_output/n100.r02.s095.trimmed.sorted.bam" > "n100.r02.s095_output/n100.r02.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s095_output/n100.r02.s095.depth.txt" "n100.r02.s095_output/n100.r02.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s095_output/n100.r02.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s095_output/n100.r02.s095.reference.fas" | bcftools consensus -m "n100.r02.s095_output/n100.r02.s095.low_depth.tsv" tmp.vcf.gz > "n100.r02.s095_output/n100.r02.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c003b43263bf17459326c6146b941dbd7a584c35fa2afb47fc62d2a9033f6f6c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=129.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=700B max=2.1KiB
2021/07/08 16:42:28 scheduler task 2445289d (flow 4490aa2e): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s095.tar.gz resources {}
2021/07/08 16:42:28  ->  n100.r02.s095.Main.cp_out_file 4490aa2e exec extern s3://niema-test/n100/r02/n100.r02.s095.tar.gz 35.8MiB
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): retrieving result (try 0): started
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): transferring output (try 0): started
2021/07/08 16:42:28 scheduler task 6e00a968 (flow ccf756f4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:872385a26913b803bd753fa8447d3588defc263cf5d7816330003b3942279672 -> s3://niema-test/n100/r02/n100.r02.s056.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:28  <-  n100.r02.s056.Main.cp_out_file ccf756f4 ok   extern 0s 35.7MiB
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): promoting objects (try 0): started
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): retrieving diagnostic output (try 0): started
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): retrieving result (try 0): started
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): promoting objects (try 0): started
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:28 scheduler task fbd9cfd4 (flow f8af3684): transferring output (try 0): started
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): retrieving diagnostic output (try 0): started
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): retrieving result (try 0): started
2021/07/08 16:42:28 scheduler task 2445289d (flow 4490aa2e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c003b43263bf17459326c6146b941dbd7a584c35fa2afb47fc62d2a9033f6f6c -> s3://niema-test/n100/r02/n100.r02.s095.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:28  <-  n100.r02.s095.Main.cp_out_file 4490aa2e ok   extern 0s 35.8MiB
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:28 scheduler task 134a0558 (flow 0f99a469): transferring output (try 0): started
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloading (try 0): started
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloading list<val<.=adb18765 35.7MiB> 35.7MiB>
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloading val<.=c20f3a57 35.4MiB>
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloading val<.=4eed4185 35.4MiB>
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloaded list<val<.=adb18765 35.7MiB> 35.7MiB>
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloaded val<.=4eed4185 35.4MiB>
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloaded val<.=c20f3a57 35.4MiB>
2021/07/08 16:42:28 scheduler task 79554f4f (flow 08173ef0): unloading (try 0): successful, next state: complete
2021/07/08 16:42:28  <-  n100.r02.s008.Main.out_file 08173ef0 ok     exec 5m17s 35.7MiB
2021/07/08 16:42:28 n100.r02.s008.Main.out_file 08173ef0 n100/r02/n100.r02.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:870ceab843a9cbf00b5cf346c4a6ae4a8aa2cdc918abedcdad455d56028ef036
	sha256:08173ef065bcd4a777ae2018828db6093104b05decddb74bd7519937b37b6486
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79554f4fae223d4ee402123f76001e8f845ea720ed5260340050cb239927a856
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s008_output"
	    wget -O "n100.r02.s008_output/n100.r02.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s008_output/n100.r02.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s008_output/n100.r02.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s008_output/n100.r02.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s008_output/n100.r02.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s008_output/n100.r02.s008.reference.fas" "n100.r02.s008_output/n100.r02.s008.fq1.fastq" "n100.r02.s008_output/n100.r02.s008.fq2.fastq" | samtools view -bS - > "n100.r02.s008_output/n100.r02.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s008_output/n100.r02.s008.untrimmed.sorted.bam" "n100.r02.s008_output/n100.r02.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s008_output/n100.r02.s008.untrimmed.sorted.bam" -b "n100.r02.s008_output/n100.r02.s008.primers.bed" -p "n100.r02.s008_output/n100.r02.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" "n100.r02.s008_output/n100.r02.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s008_output/n100.r02.s008.reference.fas" "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" > "n100.r02.s008_output/n100.r02.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s008_output/n100.r02.s008.reference.fas" --call-indels "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" > "n100.r02.s008_output/n100.r02.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s008_output/n100.r02.s008.trimmed.sorted.bam" > "n100.r02.s008_output/n100.r02.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s008_output/n100.r02.s008.depth.txt" "n100.r02.s008_output/n100.r02.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s008_output/n100.r02.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s008_output/n100.r02.s008.reference.fas" | bcftools consensus -m "n100.r02.s008_output/n100.r02.s008.low_depth.tsv" tmp.vcf.gz > "n100.r02.s008_output/n100.r02.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:adb18765ca547e08b187b60a13e241c6706bda3fdb58844a3c97de7dc9823105 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=124.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:28 scheduler task 1477568b (flow ae134078): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s008.tar.gz resources {}
2021/07/08 16:42:28  ->  n100.r02.s008.Main.cp_out_file ae134078 exec extern s3://niema-test/n100/r02/n100.r02.s008.tar.gz 35.7MiB
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloading (try 0): started
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloading list<val<.=a4168588 35.8MiB> 35.8MiB>
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloading val<.=5be4c580 35.4MiB>
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloading val<.=b835fc30 35.4MiB>
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloaded val<.=b835fc30 35.4MiB>
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloaded list<val<.=a4168588 35.8MiB> 35.8MiB>
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloaded val<.=5be4c580 35.4MiB>
2021/07/08 16:42:29 scheduler task fbd9cfd4 (flow f8af3684): unloading (try 0): successful, next state: complete
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29  <-  n100.r02.s020.Main.out_file f8af3684 ok     exec 5m7s 35.8MiB
2021/07/08 16:42:29 n100.r02.s020.Main.out_file f8af3684 n100/r02/n100.r02.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42ecb79718a9da2b33a96152c6f413c6bac7176d03cff30c1e19dd4883fa60ba
	sha256:f8af3684f25fd94e049ec9410aa2bc8b71274e7b90953740d28d5ed078ef4d97
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fbd9cfd4449f966b263387fec0ae35f44c9222e90b77fa77a6534482f5c6732b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s020_output"
	    wget -O "n100.r02.s020_output/n100.r02.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s020_output/n100.r02.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s020_output/n100.r02.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s020_output/n100.r02.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s020_output/n100.r02.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s020_output/n100.r02.s020.reference.fas" "n100.r02.s020_output/n100.r02.s020.fq1.fastq" "n100.r02.s020_output/n100.r02.s020.fq2.fastq" | samtools view -bS - > "n100.r02.s020_output/n100.r02.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s020_output/n100.r02.s020.untrimmed.sorted.bam" "n100.r02.s020_output/n100.r02.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s020_output/n100.r02.s020.untrimmed.sorted.bam" -b "n100.r02.s020_output/n100.r02.s020.primers.bed" -p "n100.r02.s020_output/n100.r02.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" "n100.r02.s020_output/n100.r02.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s020_output/n100.r02.s020.reference.fas" "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" > "n100.r02.s020_output/n100.r02.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s020_output/n100.r02.s020.reference.fas" --call-indels "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" > "n100.r02.s020_output/n100.r02.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s020_output/n100.r02.s020.trimmed.sorted.bam" > "n100.r02.s020_output/n100.r02.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s020_output/n100.r02.s020.depth.txt" "n100.r02.s020_output/n100.r02.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s020_output/n100.r02.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s020_output/n100.r02.s020.reference.fas" | bcftools consensus -m "n100.r02.s020_output/n100.r02.s020.low_depth.tsv" tmp.vcf.gz > "n100.r02.s020_output/n100.r02.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a4168588e310a8875a9306500128f29c16fbfc895d1a32224c827c1bd39be71b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=127.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 16:42:29 scheduler task 013cc7f3 (flow 5fd80dbf): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s020.tar.gz resources {}
2021/07/08 16:42:29  ->  n100.r02.s020.Main.cp_out_file 5fd80dbf exec extern s3://niema-test/n100/r02/n100.r02.s020.tar.gz 35.8MiB
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloading (try 0): started
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloading list<val<.=6bb8829f 35.7MiB> 35.7MiB>
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloading val<.=7cf01715 35.4MiB>
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloading val<.=b97aa430 35.4MiB>
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloaded list<val<.=6bb8829f 35.7MiB> 35.7MiB>
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloaded val<.=b97aa430 35.4MiB>
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloaded val<.=7cf01715 35.4MiB>
2021/07/08 16:42:29 scheduler task 134a0558 (flow 0f99a469): unloading (try 0): successful, next state: complete
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29  <-  n100.r02.s033.Main.out_file 0f99a469 ok     exec 5m7s 35.7MiB
2021/07/08 16:42:29 n100.r02.s033.Main.out_file 0f99a469 n100/r02/n100.r02.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:207a831e7e18f4274312325c55750292ed177b01ac79c652dca5d0cbf156be74
	sha256:0f99a469d82b6be4604c1de97728f683ddb3ad9e7bdee3ac54f8a55267642dc7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/134a055861d4a8a6955153bc8c0d82784ca5351c3a0feee217d95dc06f8bd1fd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s033_output"
	    wget -O "n100.r02.s033_output/n100.r02.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s033_output/n100.r02.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s033_output/n100.r02.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s033_output/n100.r02.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s033_output/n100.r02.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s033_output/n100.r02.s033.reference.fas" "n100.r02.s033_output/n100.r02.s033.fq1.fastq" "n100.r02.s033_output/n100.r02.s033.fq2.fastq" | samtools view -bS - > "n100.r02.s033_output/n100.r02.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s033_output/n100.r02.s033.untrimmed.sorted.bam" "n100.r02.s033_output/n100.r02.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s033_output/n100.r02.s033.untrimmed.sorted.bam" -b "n100.r02.s033_output/n100.r02.s033.primers.bed" -p "n100.r02.s033_output/n100.r02.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" "n100.r02.s033_output/n100.r02.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s033_output/n100.r02.s033.reference.fas" "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" > "n100.r02.s033_output/n100.r02.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s033_output/n100.r02.s033.reference.fas" --call-indels "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" > "n100.r02.s033_output/n100.r02.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s033_output/n100.r02.s033.trimmed.sorted.bam" > "n100.r02.s033_output/n100.r02.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s033_output/n100.r02.s033.depth.txt" "n100.r02.s033_output/n100.r02.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s033_output/n100.r02.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s033_output/n100.r02.s033.reference.fas" | bcftools consensus -m "n100.r02.s033_output/n100.r02.s033.low_depth.tsv" tmp.vcf.gz > "n100.r02.s033_output/n100.r02.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6bb8829f5d4849787671022e2ff0333b160d459ba68190cb6f74655d66df6cc8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.1MiB max=129.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 16:42:29 scheduler task d0d7dd03 (flow f51f7c22): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s033.tar.gz resources {}
2021/07/08 16:42:29  ->  n100.r02.s033.Main.cp_out_file f51f7c22 exec extern s3://niema-test/n100/r02/n100.r02.s033.tar.gz 35.7MiB
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task 1477568b (flow ae134078): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:adb18765ca547e08b187b60a13e241c6706bda3fdb58844a3c97de7dc9823105 -> s3://niema-test/n100/r02/n100.r02.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:29  <-  n100.r02.s008.Main.cp_out_file ae134078 ok   extern 0s 35.7MiB
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 7d3bc912 (flow e2236b63): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task 0e861905 (flow 7a724582): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 87971b75 (flow f98fa6a9): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): retrieving result (try 0): started
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 5f52d829 (flow 23c21f0f): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:29 scheduler task 9b70412c (flow e085395a): transferring output (try 0): started
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:29 scheduler task 1e604ca0 (flow 35fb25c1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloading (try 0): started
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloading list<val<.=e53ee8e4 35.7MiB> 35.7MiB>
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloading val<.=718b47a2 35.4MiB>
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloading val<.=a016c30a 35.4MiB>
2021/07/08 16:42:29 scheduler task 013cc7f3 (flow 5fd80dbf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a4168588e310a8875a9306500128f29c16fbfc895d1a32224c827c1bd39be71b -> s3://niema-test/n100/r02/n100.r02.s020.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:29  <-  n100.r02.s020.Main.cp_out_file 5fd80dbf ok   extern 0s 35.8MiB
2021/07/08 16:42:29 scheduler task 1e604ca0 (flow 35fb25c1): promoting objects (try 0): started
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloaded val<.=718b47a2 35.4MiB>
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloaded val<.=a016c30a 35.4MiB>
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloaded list<val<.=e53ee8e4 35.7MiB> 35.7MiB>
2021/07/08 16:42:29 scheduler task d3ed6aad (flow dcb88340): unloading (try 0): successful, next state: complete
2021/07/08 16:42:29 scheduler task 1e604ca0 (flow 35fb25c1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:29  <-  n100.r02.s057.Main.out_file dcb88340 ok     exec 5m8s 35.7MiB
2021/07/08 16:42:29 n100.r02.s057.Main.out_file dcb88340 n100/r02/n100.r02.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6045c7f67b53d417e04857f78f70ed41de9406346270c78ec50c5a5d30b61fbc
	sha256:dcb8834092fd5cba975f2f02c333751b33cd0f0b5dad1d7d4d7fed704462b6ec
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3ed6aad717dcd3fed76906bc4815d8e4b218a3204c9ed41bf5e5fff7e08e631
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s057_output"
	    wget -O "n100.r02.s057_output/n100.r02.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s057_output/n100.r02.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s057_output/n100.r02.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s057_output/n100.r02.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s057_output/n100.r02.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s057_output/n100.r02.s057.reference.fas" "n100.r02.s057_output/n100.r02.s057.fq1.fastq" "n100.r02.s057_output/n100.r02.s057.fq2.fastq" | samtools view -bS - > "n100.r02.s057_output/n100.r02.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s057_output/n100.r02.s057.untrimmed.sorted.bam" "n100.r02.s057_output/n100.r02.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s057_output/n100.r02.s057.untrimmed.sorted.bam" -b "n100.r02.s057_output/n100.r02.s057.primers.bed" -p "n100.r02.s057_output/n100.r02.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" "n100.r02.s057_output/n100.r02.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s057_output/n100.r02.s057.reference.fas" "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" > "n100.r02.s057_output/n100.r02.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s057_output/n100.r02.s057.reference.fas" --call-indels "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" > "n100.r02.s057_output/n100.r02.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s057_output/n100.r02.s057.trimmed.sorted.bam" > "n100.r02.s057_output/n100.r02.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s057_output/n100.r02.s057.depth.txt" "n100.r02.s057_output/n100.r02.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s057_output/n100.r02.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s057_output/n100.r02.s057.reference.fas" | bcftools consensus -m "n100.r02.s057_output/n100.r02.s057.low_depth.tsv" tmp.vcf.gz > "n100.r02.s057_output/n100.r02.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e53ee8e47fc18a9134ae79ec2ee4d47857cb7aa9ab5b4625a4c3ac67e0e7cef2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.3MiB max=125.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:29 scheduler task fd5655d1 (flow 963a7516): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s057.tar.gz resources {}
2021/07/08 16:42:29  ->  n100.r02.s057.Main.cp_out_file 963a7516 exec extern s3://niema-test/n100/r02/n100.r02.s057.tar.gz 35.7MiB
2021/07/08 16:42:29 scheduler task 1e604ca0 (flow 35fb25c1): retrieving diagnostic output (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): unloading (try 0): started
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): unloading list<val<.=19434f93 35.8MiB> 35.8MiB>
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): unloading val<.=468f8890 35.4MiB>
2021/07/08 16:42:29 scheduler task fc432408 (flow 28e5d9c6): unloading val<.=6262d39d 35.4MiB>
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloading (try 0): started
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloading list<val<.=96356257 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloading val<.=fec726a3 35.4MiB>
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloading val<.=15b4bb5e 35.4MiB>
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): retrieving result (try 0): started
2021/07/08 16:42:30 scheduler task fc432408 (flow 28e5d9c6): unloaded list<val<.=19434f93 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task fc432408 (flow 28e5d9c6): unloaded val<.=6262d39d 35.4MiB>
2021/07/08 16:42:30 scheduler task fc432408 (flow 28e5d9c6): unloaded val<.=468f8890 35.4MiB>
2021/07/08 16:42:30 scheduler task fc432408 (flow 28e5d9c6): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30  <-  n100.r02.s083.Main.out_file 28e5d9c6 ok     exec 5m8s 35.8MiB
2021/07/08 16:42:30 n100.r02.s083.Main.out_file 28e5d9c6 n100/r02/n100.r02.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3c0687b8fa34f6c0878a02c6694dc02e52cd9ee4a161ac41226eaf418955101c
	sha256:28e5d9c63fb7bb625be28f58e91a87ad60fffd67e479ad10e5a878f965cc8277
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fc4324085d4cb6fe7f1c814f452b3ecb5ea3f2d6172d66c39f9fe8efe0bc6de2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s083_output"
	    wget -O "n100.r02.s083_output/n100.r02.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s083_output/n100.r02.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s083_output/n100.r02.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s083_output/n100.r02.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s083_output/n100.r02.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s083_output/n100.r02.s083.reference.fas" "n100.r02.s083_output/n100.r02.s083.fq1.fastq" "n100.r02.s083_output/n100.r02.s083.fq2.fastq" | samtools view -bS - > "n100.r02.s083_output/n100.r02.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s083_output/n100.r02.s083.untrimmed.sorted.bam" "n100.r02.s083_output/n100.r02.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s083_output/n100.r02.s083.untrimmed.sorted.bam" -b "n100.r02.s083_output/n100.r02.s083.primers.bed" -p "n100.r02.s083_output/n100.r02.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" "n100.r02.s083_output/n100.r02.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s083_output/n100.r02.s083.reference.fas" "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" > "n100.r02.s083_output/n100.r02.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s083_output/n100.r02.s083.reference.fas" --call-indels "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" > "n100.r02.s083_output/n100.r02.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s083_output/n100.r02.s083.trimmed.sorted.bam" > "n100.r02.s083_output/n100.r02.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s083_output/n100.r02.s083.depth.txt" "n100.r02.s083_output/n100.r02.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s083_output/n100.r02.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s083_output/n100.r02.s083.reference.fas" | bcftools consensus -m "n100.r02.s083_output/n100.r02.s083.low_depth.tsv" tmp.vcf.gz > "n100.r02.s083_output/n100.r02.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:19434f9381319a442dae0c3ad1557bf06e67a0bc4c50817336f3368edad8055a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=127.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 16:42:30 scheduler task 86f3bfad (flow ff027849): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s083.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s083.Main.cp_out_file ff027849 exec extern s3://niema-test/n100/r02/n100.r02.s083.tar.gz 35.8MiB
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloaded list<val<.=96356257 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloaded val<.=15b4bb5e 35.4MiB>
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloaded val<.=fec726a3 35.4MiB>
2021/07/08 16:42:30 scheduler task 7d3bc912 (flow e2236b63): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:30  <-  n100.r02.s052.Main.out_file e2236b63 ok     exec 5m7s 35.8MiB
2021/07/08 16:42:30 n100.r02.s052.Main.out_file e2236b63 n100/r02/n100.r02.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b57f204e930e0b266604017eae200509019becaa840d0e7266fc4abfe1fc28f1
	sha256:e2236b6308602aa37a8d4397c13b75299d766230c60626e15ff66c84284de098
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7d3bc912fb28f825fcd377aa6eb0f421cd823314229253ff739b47b67bc0b79d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s052_output"
	    wget -O "n100.r02.s052_output/n100.r02.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s052_output/n100.r02.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s052_output/n100.r02.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s052_output/n100.r02.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s052_output/n100.r02.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s052_output/n100.r02.s052.reference.fas" "n100.r02.s052_output/n100.r02.s052.fq1.fastq" "n100.r02.s052_output/n100.r02.s052.fq2.fastq" | samtools view -bS - > "n100.r02.s052_output/n100.r02.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s052_output/n100.r02.s052.untrimmed.sorted.bam" "n100.r02.s052_output/n100.r02.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s052_output/n100.r02.s052.untrimmed.sorted.bam" -b "n100.r02.s052_output/n100.r02.s052.primers.bed" -p "n100.r02.s052_output/n100.r02.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" "n100.r02.s052_output/n100.r02.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s052_output/n100.r02.s052.reference.fas" "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" > "n100.r02.s052_output/n100.r02.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s052_output/n100.r02.s052.reference.fas" --call-indels "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" > "n100.r02.s052_output/n100.r02.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s052_output/n100.r02.s052.trimmed.sorted.bam" > "n100.r02.s052_output/n100.r02.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s052_output/n100.r02.s052.depth.txt" "n100.r02.s052_output/n100.r02.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s052_output/n100.r02.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s052_output/n100.r02.s052.reference.fas" | bcftools consensus -m "n100.r02.s052_output/n100.r02.s052.low_depth.tsv" tmp.vcf.gz > "n100.r02.s052_output/n100.r02.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:96356257fcdadb696f175cb6eb3400eaaf3514366ce217dc0ece58c228079a3d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.9MiB max=126.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 16:42:30 scheduler task c272f6f3 (flow 53de9476): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s052.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s052.Main.cp_out_file 53de9476 exec extern s3://niema-test/n100/r02/n100.r02.s052.tar.gz 35.8MiB
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): transferring output (try 0): started
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloading (try 0): started
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloading list<val<.=551eb942 35.7MiB> 35.7MiB>
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloading val<.=511245a7 35.4MiB>
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloading val<.=794a2d54 35.4MiB>
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): promoting objects (try 0): started
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloaded list<val<.=551eb942 35.7MiB> 35.7MiB>
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloaded val<.=511245a7 35.4MiB>
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloaded val<.=794a2d54 35.4MiB>
2021/07/08 16:42:30 scheduler task 0e861905 (flow 7a724582): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30  <-  n100.r02.s069.Main.out_file 7a724582 ok     exec 5m8s 35.7MiB
2021/07/08 16:42:30 n100.r02.s069.Main.out_file 7a724582 n100/r02/n100.r02.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cd90311ed63270b9250c72c5347dcd52935db374391249014024d78d184d419b
	sha256:7a7245821707f3de21828b3f563f80005777a8ac59cb69c7c32897225745cb94
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e8619050aac9d94bdb61f3a9880be8be3bba4007cbc2e48bba83bbccc18401b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s069_output"
	    wget -O "n100.r02.s069_output/n100.r02.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s069_output/n100.r02.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s069_output/n100.r02.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s069_output/n100.r02.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s069_output/n100.r02.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s069_output/n100.r02.s069.reference.fas" "n100.r02.s069_output/n100.r02.s069.fq1.fastq" "n100.r02.s069_output/n100.r02.s069.fq2.fastq" | samtools view -bS - > "n100.r02.s069_output/n100.r02.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s069_output/n100.r02.s069.untrimmed.sorted.bam" "n100.r02.s069_output/n100.r02.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s069_output/n100.r02.s069.untrimmed.sorted.bam" -b "n100.r02.s069_output/n100.r02.s069.primers.bed" -p "n100.r02.s069_output/n100.r02.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" "n100.r02.s069_output/n100.r02.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s069_output/n100.r02.s069.reference.fas" "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" > "n100.r02.s069_output/n100.r02.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s069_output/n100.r02.s069.reference.fas" --call-indels "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" > "n100.r02.s069_output/n100.r02.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s069_output/n100.r02.s069.trimmed.sorted.bam" > "n100.r02.s069_output/n100.r02.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s069_output/n100.r02.s069.depth.txt" "n100.r02.s069_output/n100.r02.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s069_output/n100.r02.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s069_output/n100.r02.s069.reference.fas" | bcftools consensus -m "n100.r02.s069_output/n100.r02.s069.low_depth.tsv" tmp.vcf.gz > "n100.r02.s069_output/n100.r02.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:551eb9422d777eebf9be16908e7b0d733f655589bd0623d3540d5357d21cf03d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=126.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:42:30 scheduler task 120258a1 (flow ab0c9da2): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s069.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s069.Main.cp_out_file ab0c9da2 exec extern s3://niema-test/n100/r02/n100.r02.s069.tar.gz 35.7MiB
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): retrieving diagnostic output (try 0): started
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloading (try 0): started
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloading list<val<.=a8647b5b 35.7MiB> 35.7MiB>
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloading val<.=581972d9 35.4MiB>
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloading val<.=6e8776f6 35.4MiB>
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloading (try 0): started
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloading list<val<.=7671045c 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloading val<.=631d75fd 35.4MiB>
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloading val<.=43ee109a 35.4MiB>
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloading (try 0): started
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloading list<val<.=104321d2 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloading val<.=494366c7 35.4MiB>
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloading val<.=37549027 35.4MiB>
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): retrieving result (try 0): started
2021/07/08 16:42:30 scheduler task d0d7dd03 (flow f51f7c22): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6bb8829f5d4849787671022e2ff0333b160d459ba68190cb6f74655d66df6cc8 -> s3://niema-test/n100/r02/n100.r02.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:30  <-  n100.r02.s033.Main.cp_out_file f51f7c22 ok   extern 0s 35.7MiB
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloaded list<val<.=a8647b5b 35.7MiB> 35.7MiB>
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloaded val<.=6e8776f6 35.4MiB>
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloaded val<.=581972d9 35.4MiB>
2021/07/08 16:42:30 scheduler task 5f52d829 (flow 23c21f0f): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30  <-  n100.r02.s092.Main.out_file 23c21f0f ok     exec 5m14s 35.7MiB
2021/07/08 16:42:30 n100.r02.s092.Main.out_file 23c21f0f n100/r02/n100.r02.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d37d30458e8d44621154458b7e57d3c59c1deca651da5183c1d133ea291287a
	sha256:23c21f0f3445f0e7fe91c092c9f1d015dc57458bd49d06dbca3fab3107d55249
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f52d829af580a2f49760a4783b025d0b7603a67cd4e5922cab363f7c477f329
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s092_output"
	    wget -O "n100.r02.s092_output/n100.r02.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s092_output/n100.r02.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s092_output/n100.r02.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s092_output/n100.r02.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s092_output/n100.r02.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s092_output/n100.r02.s092.reference.fas" "n100.r02.s092_output/n100.r02.s092.fq1.fastq" "n100.r02.s092_output/n100.r02.s092.fq2.fastq" | samtools view -bS - > "n100.r02.s092_output/n100.r02.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s092_output/n100.r02.s092.untrimmed.sorted.bam" "n100.r02.s092_output/n100.r02.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s092_output/n100.r02.s092.untrimmed.sorted.bam" -b "n100.r02.s092_output/n100.r02.s092.primers.bed" -p "n100.r02.s092_output/n100.r02.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" "n100.r02.s092_output/n100.r02.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s092_output/n100.r02.s092.reference.fas" "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" > "n100.r02.s092_output/n100.r02.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s092_output/n100.r02.s092.reference.fas" --call-indels "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" > "n100.r02.s092_output/n100.r02.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s092_output/n100.r02.s092.trimmed.sorted.bam" > "n100.r02.s092_output/n100.r02.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s092_output/n100.r02.s092.depth.txt" "n100.r02.s092_output/n100.r02.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s092_output/n100.r02.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s092_output/n100.r02.s092.reference.fas" | bcftools consensus -m "n100.r02.s092_output/n100.r02.s092.low_depth.tsv" tmp.vcf.gz > "n100.r02.s092_output/n100.r02.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a8647b5bdc25e80d688cfacc609ee1984c33967b8459b0e169f1e0c705987c9c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.8MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:30 scheduler task dc56f824 (flow dc7c3789): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s092.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s092.Main.cp_out_file dc7c3789 exec extern s3://niema-test/n100/r02/n100.r02.s092.tar.gz 35.7MiB
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloaded list<val<.=7671045c 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloaded val<.=43ee109a 35.4MiB>
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloaded val<.=631d75fd 35.4MiB>
2021/07/08 16:42:30 scheduler task 87971b75 (flow f98fa6a9): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30  <-  n100.r02.s041.Main.out_file f98fa6a9 ok     exec 5m13s 35.8MiB
2021/07/08 16:42:30 n100.r02.s041.Main.out_file f98fa6a9 n100/r02/n100.r02.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d7664d300f7e50419201a1ced48a86645c1ee867e3add351b9bddeaf15effdcd
	sha256:f98fa6a9613d4c4ceb17f6d2854f6926f1ebd93c637a3639ad81111542896fc3
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/87971b75e0ae3456e71de2509e6e808fb79e8346e00209517ad0374e46061819
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s041_output"
	    wget -O "n100.r02.s041_output/n100.r02.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s041_output/n100.r02.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s041_output/n100.r02.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s041_output/n100.r02.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s041_output/n100.r02.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s041_output/n100.r02.s041.reference.fas" "n100.r02.s041_output/n100.r02.s041.fq1.fastq" "n100.r02.s041_output/n100.r02.s041.fq2.fastq" | samtools view -bS - > "n100.r02.s041_output/n100.r02.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s041_output/n100.r02.s041.untrimmed.sorted.bam" "n100.r02.s041_output/n100.r02.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s041_output/n100.r02.s041.untrimmed.sorted.bam" -b "n100.r02.s041_output/n100.r02.s041.primers.bed" -p "n100.r02.s041_output/n100.r02.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" "n100.r02.s041_output/n100.r02.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s041_output/n100.r02.s041.reference.fas" "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" > "n100.r02.s041_output/n100.r02.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s041_output/n100.r02.s041.reference.fas" --call-indels "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" > "n100.r02.s041_output/n100.r02.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s041_output/n100.r02.s041.trimmed.sorted.bam" > "n100.r02.s041_output/n100.r02.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s041_output/n100.r02.s041.depth.txt" "n100.r02.s041_output/n100.r02.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s041_output/n100.r02.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s041_output/n100.r02.s041.reference.fas" | bcftools consensus -m "n100.r02.s041_output/n100.r02.s041.low_depth.tsv" tmp.vcf.gz > "n100.r02.s041_output/n100.r02.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7671045c7d3f823163198f154185f6a6806f41fc6a4c61a85ecc8423dcc9c899 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=130.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=699B max=2.0KiB
2021/07/08 16:42:30 scheduler task 5e5aa830 (flow 6d89622c): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s041.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s041.Main.cp_out_file 6d89622c exec extern s3://niema-test/n100/r02/n100.r02.s041.tar.gz 35.8MiB
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloaded list<val<.=104321d2 35.8MiB> 35.8MiB>
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloaded val<.=37549027 35.4MiB>
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloaded val<.=494366c7 35.4MiB>
2021/07/08 16:42:30 scheduler task 9b70412c (flow e085395a): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30  <-  n100.r02.s089.Main.out_file e085395a ok     exec 5m9s 35.8MiB
2021/07/08 16:42:30 n100.r02.s089.Main.out_file e085395a n100/r02/n100.r02.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2a771228a4db8b0b78a6e952629292839e32ae13a001be394cbe1809a47d4bca
	sha256:e085395a99eb4bb921fc7f248e774dda7a173c5bd2956caba3e1d60600741c2e
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9b70412c7fc8212dde0e014da86f7b80bfa5011164471c8fed17a5627d3bb1c4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s089_output"
	    wget -O "n100.r02.s089_output/n100.r02.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s089_output/n100.r02.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s089_output/n100.r02.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s089_output/n100.r02.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s089_output/n100.r02.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s089_output/n100.r02.s089.reference.fas" "n100.r02.s089_output/n100.r02.s089.fq1.fastq" "n100.r02.s089_output/n100.r02.s089.fq2.fastq" | samtools view -bS - > "n100.r02.s089_output/n100.r02.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s089_output/n100.r02.s089.untrimmed.sorted.bam" "n100.r02.s089_output/n100.r02.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s089_output/n100.r02.s089.untrimmed.sorted.bam" -b "n100.r02.s089_output/n100.r02.s089.primers.bed" -p "n100.r02.s089_output/n100.r02.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" "n100.r02.s089_output/n100.r02.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s089_output/n100.r02.s089.reference.fas" "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" > "n100.r02.s089_output/n100.r02.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s089_output/n100.r02.s089.reference.fas" --call-indels "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" > "n100.r02.s089_output/n100.r02.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s089_output/n100.r02.s089.trimmed.sorted.bam" > "n100.r02.s089_output/n100.r02.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s089_output/n100.r02.s089.depth.txt" "n100.r02.s089_output/n100.r02.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s089_output/n100.r02.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s089_output/n100.r02.s089.reference.fas" | bcftools consensus -m "n100.r02.s089_output/n100.r02.s089.low_depth.tsv" tmp.vcf.gz > "n100.r02.s089_output/n100.r02.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:104321d2ed8148c65c66ce2500bb2e67f65a3f421dec3d1bd4ad4d091c151f49 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.3MiB max=127.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 16:42:30 scheduler task 9b7b2316 (flow b63595c1): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s089.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s089.Main.cp_out_file b63595c1 exec extern s3://niema-test/n100/r02/n100.r02.s089.tar.gz 35.8MiB
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:30 scheduler task 7a765bf2 (flow cde5ab27): transferring output (try 0): started
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): promoting objects (try 0): started
2021/07/08 16:42:30 scheduler task 3e9c9b76 (flow f2f62b67): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:30 scheduler task 3e9c9b76 (flow f2f62b67): promoting objects (try 0): started
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): retrieving diagnostic output (try 0): started
2021/07/08 16:42:30 scheduler task b5b0895c (flow 5e121a68): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:30 scheduler task 3e9c9b76 (flow f2f62b67): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:30 scheduler task b5b0895c (flow 5e121a68): promoting objects (try 0): started
2021/07/08 16:42:30 scheduler task 3e9c9b76 (flow f2f62b67): retrieving diagnostic output (try 0): started
2021/07/08 16:42:30 scheduler task fd5655d1 (flow 963a7516): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e53ee8e47fc18a9134ae79ec2ee4d47857cb7aa9ab5b4625a4c3ac67e0e7cef2 -> s3://niema-test/n100/r02/n100.r02.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:30  <-  n100.r02.s057.Main.cp_out_file 963a7516 ok   extern 0s 35.7MiB
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): retrieving result (try 0): started
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:30 scheduler task b5b0895c (flow 5e121a68): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:30 scheduler task 3e9c9b76 (flow f2f62b67): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloading (try 0): started
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloading list<val<.=e7cf1bc9 35.7MiB> 35.7MiB>
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloading val<.=8d265d5e 35.4MiB>
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloading val<.=fc0301eb 35.4MiB>
2021/07/08 16:42:30 scheduler task b5b0895c (flow 5e121a68): retrieving diagnostic output (try 0): started
2021/07/08 16:42:30 scheduler task 3e9c9b76 (flow f2f62b67): retrieving result (try 0): started
2021/07/08 16:42:30 scheduler task 0d3f8ca3 (flow a2df0a88): transferring output (try 0): started
2021/07/08 16:42:30 scheduler task 86f3bfad (flow ff027849): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:19434f9381319a442dae0c3ad1557bf06e67a0bc4c50817336f3368edad8055a -> s3://niema-test/n100/r02/n100.r02.s083.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:30  <-  n100.r02.s083.Main.cp_out_file ff027849 ok   extern 0s 35.8MiB
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloaded val<.=8d265d5e 35.4MiB>
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloaded list<val<.=e7cf1bc9 35.7MiB> 35.7MiB>
2021/07/08 16:42:30 scheduler task b5b0895c (flow 5e121a68): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloaded val<.=fc0301eb 35.4MiB>
2021/07/08 16:42:30 scheduler task 1e604ca0 (flow 35fb25c1): unloading (try 0): successful, next state: complete
2021/07/08 16:42:30 scheduler task b5b0895c (flow 5e121a68): retrieving result (try 0): started
2021/07/08 16:42:30  <-  n100.r02.s079.Main.out_file 35fb25c1 ok     exec 5m15s 35.7MiB
2021/07/08 16:42:30 n100.r02.s079.Main.out_file 35fb25c1 n100/r02/n100.r02.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:771c2224faf6fb226efd7e534927be1aee8b936c146f23bf7a54e14bee018a7d
	sha256:35fb25c15c9e9ad7224ddc519b68a6fd48342eb9e0f6f8fe146c8756a7f82a66
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e604ca0edb43e7f32334f128cc894f8b9f10f160d917c420465f6339c204788
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s079_output"
	    wget -O "n100.r02.s079_output/n100.r02.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s079_output/n100.r02.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s079_output/n100.r02.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s079_output/n100.r02.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s079_output/n100.r02.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s079_output/n100.r02.s079.reference.fas" "n100.r02.s079_output/n100.r02.s079.fq1.fastq" "n100.r02.s079_output/n100.r02.s079.fq2.fastq" | samtools view -bS - > "n100.r02.s079_output/n100.r02.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s079_output/n100.r02.s079.untrimmed.sorted.bam" "n100.r02.s079_output/n100.r02.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s079_output/n100.r02.s079.untrimmed.sorted.bam" -b "n100.r02.s079_output/n100.r02.s079.primers.bed" -p "n100.r02.s079_output/n100.r02.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" "n100.r02.s079_output/n100.r02.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s079_output/n100.r02.s079.reference.fas" "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" > "n100.r02.s079_output/n100.r02.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s079_output/n100.r02.s079.reference.fas" --call-indels "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" > "n100.r02.s079_output/n100.r02.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s079_output/n100.r02.s079.trimmed.sorted.bam" > "n100.r02.s079_output/n100.r02.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s079_output/n100.r02.s079.depth.txt" "n100.r02.s079_output/n100.r02.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s079_output/n100.r02.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s079_output/n100.r02.s079.reference.fas" | bcftools consensus -m "n100.r02.s079_output/n100.r02.s079.low_depth.tsv" tmp.vcf.gz > "n100.r02.s079_output/n100.r02.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e7cf1bc976a2bbb3f51c042890405cca58f518fa9f54658b8b0976005225a4e3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=126.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:30 scheduler task d15fe3c8 (flow 8120a57a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s079.tar.gz resources {}
2021/07/08 16:42:30  ->  n100.r02.s079.Main.cp_out_file 8120a57a exec extern s3://niema-test/n100/r02/n100.r02.s079.tar.gz 35.7MiB
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): transferring output (try 0): started
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloading (try 0): started
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloading list<val<.=17cccea0 35.7MiB> 35.7MiB>
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloading val<.=b211cae2 35.4MiB>
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloading val<.=054e01fc 35.4MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): transferring output (try 0): started
2021/07/08 16:42:31 scheduler task c272f6f3 (flow 53de9476): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:96356257fcdadb696f175cb6eb3400eaaf3514366ce217dc0ece58c228079a3d -> s3://niema-test/n100/r02/n100.r02.s052.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:31  <-  n100.r02.s052.Main.cp_out_file 53de9476 ok   extern 0s 35.8MiB
2021/07/08 16:42:31 scheduler task 120258a1 (flow ab0c9da2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:551eb9422d777eebf9be16908e7b0d733f655589bd0623d3540d5357d21cf03d -> s3://niema-test/n100/r02/n100.r02.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:31  <-  n100.r02.s069.Main.cp_out_file ab0c9da2 ok   extern 0s 35.7MiB
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloaded val<.=b211cae2 35.4MiB>
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloaded list<val<.=17cccea0 35.7MiB> 35.7MiB>
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloaded val<.=054e01fc 35.4MiB>
2021/07/08 16:42:31 scheduler task 7a765bf2 (flow cde5ab27): unloading (try 0): successful, next state: complete
2021/07/08 16:42:31  <-  n100.r02.s044.Main.out_file cde5ab27 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:31 n100.r02.s044.Main.out_file cde5ab27 n100/r02/n100.r02.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a12a7852afe10517278f690c09d01dca73714d168c9d91a35286d066210934f8
	sha256:cde5ab27e90b65b7b0d60f240b06f170c075e520d6a2946a99057fcccd5a0d1a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a765bf21fad5107042631e3e83959336152b93f303a9246bf77376ddcb991e1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s044_output"
	    wget -O "n100.r02.s044_output/n100.r02.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s044_output/n100.r02.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s044_output/n100.r02.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s044_output/n100.r02.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s044_output/n100.r02.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s044_output/n100.r02.s044.reference.fas" "n100.r02.s044_output/n100.r02.s044.fq1.fastq" "n100.r02.s044_output/n100.r02.s044.fq2.fastq" | samtools view -bS - > "n100.r02.s044_output/n100.r02.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s044_output/n100.r02.s044.untrimmed.sorted.bam" "n100.r02.s044_output/n100.r02.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s044_output/n100.r02.s044.untrimmed.sorted.bam" -b "n100.r02.s044_output/n100.r02.s044.primers.bed" -p "n100.r02.s044_output/n100.r02.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" "n100.r02.s044_output/n100.r02.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s044_output/n100.r02.s044.reference.fas" "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" > "n100.r02.s044_output/n100.r02.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s044_output/n100.r02.s044.reference.fas" --call-indels "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" > "n100.r02.s044_output/n100.r02.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s044_output/n100.r02.s044.trimmed.sorted.bam" > "n100.r02.s044_output/n100.r02.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s044_output/n100.r02.s044.depth.txt" "n100.r02.s044_output/n100.r02.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s044_output/n100.r02.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s044_output/n100.r02.s044.reference.fas" | bcftools consensus -m "n100.r02.s044_output/n100.r02.s044.low_depth.tsv" tmp.vcf.gz > "n100.r02.s044_output/n100.r02.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:17cccea09adc193e38b894d39477a9df0c6d3a9221105e5238d344093fab1d16 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=127.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:31 scheduler task a9ef58a3 (flow aef5edc4): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s044.tar.gz resources {}
2021/07/08 16:42:31  ->  n100.r02.s044.Main.cp_out_file aef5edc4 exec extern s3://niema-test/n100/r02/n100.r02.s044.tar.gz 35.7MiB
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): promoting objects (try 0): started
2021/07/08 16:42:31 scheduler task 5e5aa830 (flow 6d89622c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7671045c7d3f823163198f154185f6a6806f41fc6a4c61a85ecc8423dcc9c899 -> s3://niema-test/n100/r02/n100.r02.s041.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:31  <-  n100.r02.s041.Main.cp_out_file 6d89622c ok   extern 0s 35.8MiB
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): retrieving diagnostic output (try 0): started
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): promoting objects (try 0): started
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloading (try 0): started
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloading list<val<.=eb6a7639 35.8MiB> 35.8MiB>
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloading val<.=bf115a60 35.4MiB>
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloading val<.=df8c6416 35.4MiB>
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): retrieving diagnostic output (try 0): started
2021/07/08 16:42:31 scheduler task dc56f824 (flow dc7c3789): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a8647b5bdc25e80d688cfacc609ee1984c33967b8459b0e169f1e0c705987c9c -> s3://niema-test/n100/r02/n100.r02.s092.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:31 scheduler task 9b7b2316 (flow b63595c1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:104321d2ed8148c65c66ce2500bb2e67f65a3f421dec3d1bd4ad4d091c151f49 -> s3://niema-test/n100/r02/n100.r02.s089.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:31  <-  n100.r02.s092.Main.cp_out_file dc7c3789 ok   extern 0s 35.7MiB
2021/07/08 16:42:31  <-  n100.r02.s089.Main.cp_out_file b63595c1 ok   extern 0s 35.8MiB
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloaded list<val<.=eb6a7639 35.8MiB> 35.8MiB>
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): retrieving result (try 0): started
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloaded val<.=bf115a60 35.4MiB>
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloaded val<.=df8c6416 35.4MiB>
2021/07/08 16:42:31 scheduler task 0d3f8ca3 (flow a2df0a88): unloading (try 0): successful, next state: complete
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloading (try 0): started
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloading list<val<.=c78c476e 35.7MiB> 35.7MiB>
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloading val<.=aa85d007 35.4MiB>
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloading val<.=3a62aed2 35.4MiB>
2021/07/08 16:42:31  <-  n100.r02.s018.Main.out_file a2df0a88 ok     exec 5m9s 35.8MiB
2021/07/08 16:42:31 n100.r02.s018.Main.out_file a2df0a88 n100/r02/n100.r02.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f40a430bae405754453546f2d4de8295d839583224ce9b1a9613e01ef343e729
	sha256:a2df0a883b8f90019676fd1396e11d073b7060a1a1b2c9da7b75e5d5e591d40f
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d3f8ca35eb4bc6b19ed9b3f0620910c1596387dad56dc232aa0945752ff85ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s018_output"
	    wget -O "n100.r02.s018_output/n100.r02.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s018_output/n100.r02.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s018_output/n100.r02.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s018_output/n100.r02.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s018_output/n100.r02.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s018_output/n100.r02.s018.reference.fas" "n100.r02.s018_output/n100.r02.s018.fq1.fastq" "n100.r02.s018_output/n100.r02.s018.fq2.fastq" | samtools view -bS - > "n100.r02.s018_output/n100.r02.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s018_output/n100.r02.s018.untrimmed.sorted.bam" "n100.r02.s018_output/n100.r02.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s018_output/n100.r02.s018.untrimmed.sorted.bam" -b "n100.r02.s018_output/n100.r02.s018.primers.bed" -p "n100.r02.s018_output/n100.r02.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" "n100.r02.s018_output/n100.r02.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s018_output/n100.r02.s018.reference.fas" "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" > "n100.r02.s018_output/n100.r02.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s018_output/n100.r02.s018.reference.fas" --call-indels "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" > "n100.r02.s018_output/n100.r02.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s018_output/n100.r02.s018.trimmed.sorted.bam" > "n100.r02.s018_output/n100.r02.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s018_output/n100.r02.s018.depth.txt" "n100.r02.s018_output/n100.r02.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s018_output/n100.r02.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s018_output/n100.r02.s018.reference.fas" | bcftools consensus -m "n100.r02.s018_output/n100.r02.s018.low_depth.tsv" tmp.vcf.gz > "n100.r02.s018_output/n100.r02.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eb6a76391261dc00731d1cf8e5f727400b498dff7cd8db2f19b16d506313b646 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=129.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:42:31 scheduler task 1affb42e (flow c7adbaff): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s018.tar.gz resources {}
2021/07/08 16:42:31  ->  n100.r02.s018.Main.cp_out_file c7adbaff exec extern s3://niema-test/n100/r02/n100.r02.s018.tar.gz 35.8MiB
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): retrieving result (try 0): started
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): promoting objects (try 0): started
2021/07/08 16:42:31 scheduler task 45825593 (flow 6b3eb25c): transferring output (try 0): started
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): promoting objects (try 0): started
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloaded val<.=3a62aed2 35.4MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloaded val<.=aa85d007 35.4MiB>
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloaded list<val<.=c78c476e 35.7MiB> 35.7MiB>
2021/07/08 16:42:31 scheduler task b5b0895c (flow 5e121a68): unloading (try 0): successful, next state: complete
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloading (try 0): started
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloading list<val<.=9ddcab84 35.7MiB> 35.7MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloading val<.=7e7355f0 35.4MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloading val<.=4d3fdb31 35.4MiB>
2021/07/08 16:42:31 scheduler task d15fe3c8 (flow 8120a57a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e7cf1bc976a2bbb3f51c042890405cca58f518fa9f54658b8b0976005225a4e3 -> s3://niema-test/n100/r02/n100.r02.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:31  <-  n100.r02.s079.Main.cp_out_file 8120a57a ok   extern 0s 35.7MiB
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:31  <-  n100.r02.s032.Main.out_file 5e121a68 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:31 n100.r02.s032.Main.out_file 5e121a68 n100/r02/n100.r02.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d9b880f97fd16c4bcc452feea37784799e0202647b62034d4fdad09c9e8178e
	sha256:5e121a6816af32486b71ca850549647bcec14a716945710a6e7523be0fe67c0b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5b0895cb94719f3770b348b4ee5cddee48baed1a28e53d532918c31f16b9995
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s032_output"
	    wget -O "n100.r02.s032_output/n100.r02.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s032_output/n100.r02.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s032_output/n100.r02.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s032_output/n100.r02.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s032_output/n100.r02.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s032_output/n100.r02.s032.reference.fas" "n100.r02.s032_output/n100.r02.s032.fq1.fastq" "n100.r02.s032_output/n100.r02.s032.fq2.fastq" | samtools view -bS - > "n100.r02.s032_output/n100.r02.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s032_output/n100.r02.s032.untrimmed.sorted.bam" "n100.r02.s032_output/n100.r02.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s032_output/n100.r02.s032.untrimmed.sorted.bam" -b "n100.r02.s032_output/n100.r02.s032.primers.bed" -p "n100.r02.s032_output/n100.r02.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" "n100.r02.s032_output/n100.r02.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s032_output/n100.r02.s032.reference.fas" "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" > "n100.r02.s032_output/n100.r02.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s032_output/n100.r02.s032.reference.fas" --call-indels "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" > "n100.r02.s032_output/n100.r02.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s032_output/n100.r02.s032.trimmed.sorted.bam" > "n100.r02.s032_output/n100.r02.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s032_output/n100.r02.s032.depth.txt" "n100.r02.s032_output/n100.r02.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s032_output/n100.r02.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s032_output/n100.r02.s032.reference.fas" | bcftools consensus -m "n100.r02.s032_output/n100.r02.s032.low_depth.tsv" tmp.vcf.gz > "n100.r02.s032_output/n100.r02.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c78c476e467f9fc53a0ef01563b5e9b1d1449636fb9cd12bb8dec2a6627ecfc9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.4MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 16:42:31 scheduler task 853ea964 (flow 6a7fcbe7): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s032.tar.gz resources {}
2021/07/08 16:42:31  ->  n100.r02.s032.Main.cp_out_file 6a7fcbe7 exec extern s3://niema-test/n100/r02/n100.r02.s032.tar.gz 35.7MiB
2021/07/08 16:42:31 scheduler task 8062f0aa (flow 1d767038): transferring output (try 0): started
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): retrieving diagnostic output (try 0): started
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): retrieving diagnostic output (try 0): started
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloaded list<val<.=9ddcab84 35.7MiB> 35.7MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloaded val<.=4d3fdb31 35.4MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloaded val<.=7e7355f0 35.4MiB>
2021/07/08 16:42:31 scheduler task 3e9c9b76 (flow f2f62b67): unloading (try 0): successful, next state: complete
2021/07/08 16:42:31  <-  n100.r02.s042.Main.out_file f2f62b67 ok     exec 5m9s 35.7MiB
2021/07/08 16:42:31 n100.r02.s042.Main.out_file f2f62b67 n100/r02/n100.r02.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8912c8a1f93c05d2e1ce2b29c1e0dbe57066e40f9460eac69d2a55b8419bffa7
	sha256:f2f62b67e11a84fb0480b45282cdf543e275810c7fb9de2a67e599a2729a2b8d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3e9c9b76663b3b2031d763aef81c4cc960742810bc1a99fe33601104bd80c1d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s042_output"
	    wget -O "n100.r02.s042_output/n100.r02.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s042_output/n100.r02.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s042_output/n100.r02.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s042_output/n100.r02.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s042_output/n100.r02.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s042_output/n100.r02.s042.reference.fas" "n100.r02.s042_output/n100.r02.s042.fq1.fastq" "n100.r02.s042_output/n100.r02.s042.fq2.fastq" | samtools view -bS - > "n100.r02.s042_output/n100.r02.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s042_output/n100.r02.s042.untrimmed.sorted.bam" "n100.r02.s042_output/n100.r02.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s042_output/n100.r02.s042.untrimmed.sorted.bam" -b "n100.r02.s042_output/n100.r02.s042.primers.bed" -p "n100.r02.s042_output/n100.r02.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" "n100.r02.s042_output/n100.r02.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s042_output/n100.r02.s042.reference.fas" "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" > "n100.r02.s042_output/n100.r02.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s042_output/n100.r02.s042.reference.fas" --call-indels "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" > "n100.r02.s042_output/n100.r02.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s042_output/n100.r02.s042.trimmed.sorted.bam" > "n100.r02.s042_output/n100.r02.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s042_output/n100.r02.s042.depth.txt" "n100.r02.s042_output/n100.r02.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s042_output/n100.r02.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s042_output/n100.r02.s042.reference.fas" | bcftools consensus -m "n100.r02.s042_output/n100.r02.s042.low_depth.tsv" tmp.vcf.gz > "n100.r02.s042_output/n100.r02.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9ddcab84b3275d73d7f8a2890355eced2795567ab336ba924b74ac5ba56a4cdb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=24.5MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:42:31 scheduler task 317d4f0c (flow f8b8f272): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s042.tar.gz resources {}
2021/07/08 16:42:31  ->  n100.r02.s042.Main.cp_out_file f8b8f272 exec extern s3://niema-test/n100/r02/n100.r02.s042.tar.gz 35.7MiB
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): retrieving result (try 0): started
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:31 scheduler task a9ef58a3 (flow aef5edc4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:17cccea09adc193e38b894d39477a9df0c6d3a9221105e5238d344093fab1d16 -> s3://niema-test/n100/r02/n100.r02.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:31  <-  n100.r02.s044.Main.cp_out_file aef5edc4 ok   extern 0s 35.7MiB
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): retrieving result (try 0): started
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:31 scheduler task 4c496130 (flow 7f73ff4a): transferring output (try 0): started
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:31 scheduler task f6b05f5e (flow 64781829): transferring output (try 0): started
2021/07/08 16:42:31 scheduler task 1c084c9f (flow 8b1babe2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task 1c084c9f (flow 8b1babe2): promoting objects (try 0): started
2021/07/08 16:42:31 scheduler task 83e3fcac (flow e3dae658): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task 83e3fcac (flow e3dae658): promoting objects (try 0): started
2021/07/08 16:42:31 scheduler task bb07980b (flow b78d6362): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:31 scheduler task bb07980b (flow b78d6362): promoting objects (try 0): started
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): promoting objects (try 0): started
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): retrieving diagnostic output (try 0): started
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): retrieving diagnostic output (try 0): started
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloading (try 0): started
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloading list<val<.=610691cc 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloading val<.=786f027d 35.4MiB>
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloading val<.=2519469e 35.4MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): retrieving diagnostic output (try 0): started
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): retrieving diagnostic output (try 0): started
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): retrieving result (try 0): started
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloaded list<val<.=610691cc 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloaded val<.=786f027d 35.4MiB>
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloaded val<.=2519469e 35.4MiB>
2021/07/08 16:42:32 scheduler task 45825593 (flow 6b3eb25c): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:32  <-  n100.r02.s078.Main.out_file 6b3eb25c ok     exec 5m10s 35.8MiB
2021/07/08 16:42:32 n100.r02.s078.Main.out_file 6b3eb25c n100/r02/n100.r02.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9de75b18b914291d1bcbc6baaf7bc98ae0a81d6f160b5f133250834776329eaf
	sha256:6b3eb25c7a971ccdf5032cf089eee073c47636d40f6d31ec883a784761a8c15f
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/45825593555a76a3f8e4d4ab9ff12c80b63c112779b6b53e3dbecc7e46b4b33a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s078_output"
	    wget -O "n100.r02.s078_output/n100.r02.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s078_output/n100.r02.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s078_output/n100.r02.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s078_output/n100.r02.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s078_output/n100.r02.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s078_output/n100.r02.s078.reference.fas" "n100.r02.s078_output/n100.r02.s078.fq1.fastq" "n100.r02.s078_output/n100.r02.s078.fq2.fastq" | samtools view -bS - > "n100.r02.s078_output/n100.r02.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s078_output/n100.r02.s078.untrimmed.sorted.bam" "n100.r02.s078_output/n100.r02.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s078_output/n100.r02.s078.untrimmed.sorted.bam" -b "n100.r02.s078_output/n100.r02.s078.primers.bed" -p "n100.r02.s078_output/n100.r02.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" "n100.r02.s078_output/n100.r02.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s078_output/n100.r02.s078.reference.fas" "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" > "n100.r02.s078_output/n100.r02.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s078_output/n100.r02.s078.reference.fas" --call-indels "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" > "n100.r02.s078_output/n100.r02.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s078_output/n100.r02.s078.trimmed.sorted.bam" > "n100.r02.s078_output/n100.r02.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s078_output/n100.r02.s078.depth.txt" "n100.r02.s078_output/n100.r02.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s078_output/n100.r02.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s078_output/n100.r02.s078.reference.fas" | bcftools consensus -m "n100.r02.s078_output/n100.r02.s078.low_depth.tsv" tmp.vcf.gz > "n100.r02.s078_output/n100.r02.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:610691cc1620e23d229ea0ccd57bf842bc87a41dc929ec62f8135c87ff24fc00 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=130.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:32 scheduler task c9977743 (flow 11c1efaf): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s078.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s078.Main.cp_out_file 11c1efaf exec extern s3://niema-test/n100/r02/n100.r02.s078.tar.gz 35.8MiB
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): retrieving result (try 0): started
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): retrieving result (try 0): started
2021/07/08 16:42:32 scheduler task 1affb42e (flow c7adbaff): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eb6a76391261dc00731d1cf8e5f727400b498dff7cd8db2f19b16d506313b646 -> s3://niema-test/n100/r02/n100.r02.s018.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:32  <-  n100.r02.s018.Main.cp_out_file c7adbaff ok   extern 0s 35.8MiB
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloading (try 0): started
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloading list<val<.=788a3ac9 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloading val<.=ea262d91 35.4MiB>
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloading val<.=1d292df8 35.4MiB>
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): retrieving result (try 0): started
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): transferring output (try 0): started
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): transferring output (try 0): started
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): transferring output (try 0): started
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloaded val<.=ea262d91 35.4MiB>
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloaded list<val<.=788a3ac9 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloaded val<.=1d292df8 35.4MiB>
2021/07/08 16:42:32 scheduler task 8062f0aa (flow 1d767038): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:32  <-  n100.r02.s003.Main.out_file 1d767038 ok     exec 5m10s 35.8MiB
2021/07/08 16:42:32 n100.r02.s003.Main.out_file 1d767038 n100/r02/n100.r02.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:622956fdd822eeca205502f5f9dc4b2f16d2cdb4a3d9c4a2a6b0810bec20a6ce
	sha256:1d767038945f1b93b776a00a1b2c42ab71a6091d5e5f39f90326824c8df83e67
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8062f0aa070f9b27b8878d477e60cbbfce89d71aa9e8091c334ad3564691f4fe
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s003_output"
	    wget -O "n100.r02.s003_output/n100.r02.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s003_output/n100.r02.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s003_output/n100.r02.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s003_output/n100.r02.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s003_output/n100.r02.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s003_output/n100.r02.s003.reference.fas" "n100.r02.s003_output/n100.r02.s003.fq1.fastq" "n100.r02.s003_output/n100.r02.s003.fq2.fastq" | samtools view -bS - > "n100.r02.s003_output/n100.r02.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s003_output/n100.r02.s003.untrimmed.sorted.bam" "n100.r02.s003_output/n100.r02.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s003_output/n100.r02.s003.untrimmed.sorted.bam" -b "n100.r02.s003_output/n100.r02.s003.primers.bed" -p "n100.r02.s003_output/n100.r02.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" "n100.r02.s003_output/n100.r02.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s003_output/n100.r02.s003.reference.fas" "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" > "n100.r02.s003_output/n100.r02.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s003_output/n100.r02.s003.reference.fas" --call-indels "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" > "n100.r02.s003_output/n100.r02.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s003_output/n100.r02.s003.trimmed.sorted.bam" > "n100.r02.s003_output/n100.r02.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s003_output/n100.r02.s003.depth.txt" "n100.r02.s003_output/n100.r02.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s003_output/n100.r02.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s003_output/n100.r02.s003.reference.fas" | bcftools consensus -m "n100.r02.s003_output/n100.r02.s003.low_depth.tsv" tmp.vcf.gz > "n100.r02.s003_output/n100.r02.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:788a3ac901a4d962b1bc431e0f7946f98f474e07f7d3d52317f71035f98afdce 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.7MiB max=125.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=874B max=3.1KiB
2021/07/08 16:42:32 scheduler task af6822e5 (flow 2244891b): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s003.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s003.Main.cp_out_file 2244891b exec extern s3://niema-test/n100/r02/n100.r02.s003.tar.gz 35.8MiB
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloading (try 0): started
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloading list<val<.=0845b6ea 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloading val<.=b0d209a5 35.4MiB>
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloading val<.=73c01a8e 35.4MiB>
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): transferring output (try 0): started
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloading (try 0): started
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloading list<val<.=17728355 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloading val<.=3a82292b 35.4MiB>
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloading val<.=0b47c144 35.4MiB>
2021/07/08 16:42:32 scheduler task 317d4f0c (flow f8b8f272): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9ddcab84b3275d73d7f8a2890355eced2795567ab336ba924b74ac5ba56a4cdb -> s3://niema-test/n100/r02/n100.r02.s042.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:32  <-  n100.r02.s042.Main.cp_out_file f8b8f272 ok   extern 0s 35.7MiB
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): promoting objects (try 0): started
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloaded val<.=73c01a8e 35.4MiB>
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloaded list<val<.=0845b6ea 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloaded val<.=b0d209a5 35.4MiB>
2021/07/08 16:42:32 scheduler task 4c496130 (flow 7f73ff4a): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32  <-  n100.r02.s051.Main.out_file 7f73ff4a ok     exec 5m10s 35.8MiB
2021/07/08 16:42:32 n100.r02.s051.Main.out_file 7f73ff4a n100/r02/n100.r02.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:93386bdaa0ea1a603792b217664e035c2d4996062b7cfed1da83e92043a0d104
	sha256:7f73ff4a43a7f40002c5b4a392f3364bead5bddd3ed3720d118f4bf7d3f11f6b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4c4961307b36b23a29fc35af7277b712735da8650637f1d67f8fb0753573c84a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s051_output"
	    wget -O "n100.r02.s051_output/n100.r02.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s051_output/n100.r02.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s051_output/n100.r02.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s051_output/n100.r02.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s051_output/n100.r02.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s051_output/n100.r02.s051.reference.fas" "n100.r02.s051_output/n100.r02.s051.fq1.fastq" "n100.r02.s051_output/n100.r02.s051.fq2.fastq" | samtools view -bS - > "n100.r02.s051_output/n100.r02.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s051_output/n100.r02.s051.untrimmed.sorted.bam" "n100.r02.s051_output/n100.r02.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s051_output/n100.r02.s051.untrimmed.sorted.bam" -b "n100.r02.s051_output/n100.r02.s051.primers.bed" -p "n100.r02.s051_output/n100.r02.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" "n100.r02.s051_output/n100.r02.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s051_output/n100.r02.s051.reference.fas" "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" > "n100.r02.s051_output/n100.r02.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s051_output/n100.r02.s051.reference.fas" --call-indels "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" > "n100.r02.s051_output/n100.r02.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s051_output/n100.r02.s051.trimmed.sorted.bam" > "n100.r02.s051_output/n100.r02.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s051_output/n100.r02.s051.depth.txt" "n100.r02.s051_output/n100.r02.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s051_output/n100.r02.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s051_output/n100.r02.s051.reference.fas" | bcftools consensus -m "n100.r02.s051_output/n100.r02.s051.low_depth.tsv" tmp.vcf.gz > "n100.r02.s051_output/n100.r02.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0845b6eae31da44166d17e085f20974d6b4bca9b0acb775d76e756c15ecbd0f2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.2MiB max=126.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:32 scheduler task d1f9fedd (flow 129956b3): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s051.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s051.Main.cp_out_file 129956b3 exec extern s3://niema-test/n100/r02/n100.r02.s051.tar.gz 35.8MiB
2021/07/08 16:42:32 scheduler task 853ea964 (flow 6a7fcbe7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c78c476e467f9fc53a0ef01563b5e9b1d1449636fb9cd12bb8dec2a6627ecfc9 -> s3://niema-test/n100/r02/n100.r02.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:32  <-  n100.r02.s032.Main.cp_out_file 6a7fcbe7 ok   extern 0s 35.7MiB
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloaded list<val<.=17728355 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloaded val<.=0b47c144 35.4MiB>
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloaded val<.=3a82292b 35.4MiB>
2021/07/08 16:42:32 scheduler task f6b05f5e (flow 64781829): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32  <-  n100.r02.s061.Main.out_file 64781829 ok     exec 5m11s 35.8MiB
2021/07/08 16:42:32 n100.r02.s061.Main.out_file 64781829 n100/r02/n100.r02.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0d9706b8842459d3fe83d9caa0d9fe17c11dcc8743d51711bf992413cc63f7c
	sha256:6478182913d4da4e27031e529949a9627e78901ad607d7be7f5562fe36a0c006
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f6b05f5e63c7d92c72baab522aec2a390b68181114dca78e1a4727418b3f43f9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s061_output"
	    wget -O "n100.r02.s061_output/n100.r02.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s061_output/n100.r02.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s061_output/n100.r02.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s061_output/n100.r02.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s061_output/n100.r02.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s061_output/n100.r02.s061.reference.fas" "n100.r02.s061_output/n100.r02.s061.fq1.fastq" "n100.r02.s061_output/n100.r02.s061.fq2.fastq" | samtools view -bS - > "n100.r02.s061_output/n100.r02.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s061_output/n100.r02.s061.untrimmed.sorted.bam" "n100.r02.s061_output/n100.r02.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s061_output/n100.r02.s061.untrimmed.sorted.bam" -b "n100.r02.s061_output/n100.r02.s061.primers.bed" -p "n100.r02.s061_output/n100.r02.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" "n100.r02.s061_output/n100.r02.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s061_output/n100.r02.s061.reference.fas" "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" > "n100.r02.s061_output/n100.r02.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s061_output/n100.r02.s061.reference.fas" --call-indels "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" > "n100.r02.s061_output/n100.r02.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s061_output/n100.r02.s061.trimmed.sorted.bam" > "n100.r02.s061_output/n100.r02.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s061_output/n100.r02.s061.depth.txt" "n100.r02.s061_output/n100.r02.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s061_output/n100.r02.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s061_output/n100.r02.s061.reference.fas" | bcftools consensus -m "n100.r02.s061_output/n100.r02.s061.low_depth.tsv" tmp.vcf.gz > "n100.r02.s061_output/n100.r02.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:17728355df303a5e2c4ccba321dc33c287dfac49d97a06b0b4aad6a4db2fa4d1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.5MiB max=127.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 16:42:32 scheduler task c04549b3 (flow fba31793): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s061.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s061.Main.cp_out_file fba31793 exec extern s3://niema-test/n100/r02/n100.r02.s061.tar.gz 35.8MiB
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): retrieving diagnostic output (try 0): started
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): retrieving result (try 0): started
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:32 scheduler task 6f0ba86a (flow 16e41ecb): transferring output (try 0): started
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloading (try 0): started
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloading list<val<.=cb354e52 35.7MiB> 35.7MiB>
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloading val<.=e647df16 35.4MiB>
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloading val<.=fc765430 35.4MiB>
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloading (try 0): started
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloading list<val<.=d623a1dc 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloading val<.=12fd30ce 35.4MiB>
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloading val<.=de85f507 35.4MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloaded val<.=fc765430 35.4MiB>
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloaded val<.=e647df16 35.4MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloading (try 0): started
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloading list<val<.=69e8e2e0 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloading val<.=995e633f 35.4MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloading val<.=cf33beeb 35.4MiB>
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloaded list<val<.=cb354e52 35.7MiB> 35.7MiB>
2021/07/08 16:42:32 scheduler task 1c084c9f (flow 8b1babe2): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32  <-  n100.r02.s001.Main.out_file 8b1babe2 ok     exec 5m11s 35.7MiB
2021/07/08 16:42:32 n100.r02.s001.Main.out_file 8b1babe2 n100/r02/n100.r02.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6cbcac444f85e0f4990d2bb435014df8794851e55604ca3f4c84e576472d9a61
	sha256:8b1babe2378c782284931131b37fd24333a727817b776bae3d5cff072e41345a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1c084c9f1886599f6b61762d75d28f39e9485b7a2bcbabc0314a3be6191081e5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s001_output"
	    wget -O "n100.r02.s001_output/n100.r02.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s001_output/n100.r02.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s001_output/n100.r02.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s001_output/n100.r02.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s001_output/n100.r02.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s001_output/n100.r02.s001.reference.fas" "n100.r02.s001_output/n100.r02.s001.fq1.fastq" "n100.r02.s001_output/n100.r02.s001.fq2.fastq" | samtools view -bS - > "n100.r02.s001_output/n100.r02.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s001_output/n100.r02.s001.untrimmed.sorted.bam" "n100.r02.s001_output/n100.r02.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s001_output/n100.r02.s001.untrimmed.sorted.bam" -b "n100.r02.s001_output/n100.r02.s001.primers.bed" -p "n100.r02.s001_output/n100.r02.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" "n100.r02.s001_output/n100.r02.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s001_output/n100.r02.s001.reference.fas" "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" > "n100.r02.s001_output/n100.r02.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s001_output/n100.r02.s001.reference.fas" --call-indels "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" > "n100.r02.s001_output/n100.r02.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s001_output/n100.r02.s001.trimmed.sorted.bam" > "n100.r02.s001_output/n100.r02.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s001_output/n100.r02.s001.depth.txt" "n100.r02.s001_output/n100.r02.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s001_output/n100.r02.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s001_output/n100.r02.s001.reference.fas" | bcftools consensus -m "n100.r02.s001_output/n100.r02.s001.low_depth.tsv" tmp.vcf.gz > "n100.r02.s001_output/n100.r02.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cb354e52b7dd7a01d67232ad23d14dd5fa9544d0c2a50e8b57eb7d7b4d832efc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.3MiB max=126.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:42:32 scheduler task 3d0e60dd (flow 07d5a440): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s001.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s001.Main.cp_out_file 07d5a440 exec extern s3://niema-test/n100/r02/n100.r02.s001.tar.gz 35.7MiB
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloaded val<.=12fd30ce 35.4MiB>
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloaded list<val<.=d623a1dc 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloaded val<.=de85f507 35.4MiB>
2021/07/08 16:42:32 scheduler task 83e3fcac (flow e3dae658): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32  <-  n100.r02.s040.Main.out_file e3dae658 ok     exec 5m2s 35.8MiB
2021/07/08 16:42:32 n100.r02.s040.Main.out_file e3dae658 n100/r02/n100.r02.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4904b74ce3636a0b925f070bbb70ce634464d8d529ce972baeb2e8dc40c6b444
	sha256:e3dae65802768e7c81601c851771067a381455be4c89880b38cdd597d9f7ce3a
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83e3fcaca3c601a29287e793b6539bd46b7107a27e0cdc873a067fde4500f2c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s040_output"
	    wget -O "n100.r02.s040_output/n100.r02.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s040_output/n100.r02.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s040_output/n100.r02.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s040_output/n100.r02.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s040_output/n100.r02.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s040_output/n100.r02.s040.reference.fas" "n100.r02.s040_output/n100.r02.s040.fq1.fastq" "n100.r02.s040_output/n100.r02.s040.fq2.fastq" | samtools view -bS - > "n100.r02.s040_output/n100.r02.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s040_output/n100.r02.s040.untrimmed.sorted.bam" "n100.r02.s040_output/n100.r02.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s040_output/n100.r02.s040.untrimmed.sorted.bam" -b "n100.r02.s040_output/n100.r02.s040.primers.bed" -p "n100.r02.s040_output/n100.r02.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" "n100.r02.s040_output/n100.r02.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s040_output/n100.r02.s040.reference.fas" "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" > "n100.r02.s040_output/n100.r02.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s040_output/n100.r02.s040.reference.fas" --call-indels "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" > "n100.r02.s040_output/n100.r02.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s040_output/n100.r02.s040.trimmed.sorted.bam" > "n100.r02.s040_output/n100.r02.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s040_output/n100.r02.s040.depth.txt" "n100.r02.s040_output/n100.r02.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s040_output/n100.r02.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s040_output/n100.r02.s040.reference.fas" | bcftools consensus -m "n100.r02.s040_output/n100.r02.s040.low_depth.tsv" tmp.vcf.gz > "n100.r02.s040_output/n100.r02.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d623a1dcd56580f3434ddf9b3a7ecd42c39e18e67bd0fd880051a77e9751696d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=131.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:42:32 scheduler task 1fe06a7a (flow d689d81e): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s040.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s040.Main.cp_out_file d689d81e exec extern s3://niema-test/n100/r02/n100.r02.s040.tar.gz 35.8MiB
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloaded val<.=995e633f 35.4MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloaded list<val<.=69e8e2e0 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloaded val<.=cf33beeb 35.4MiB>
2021/07/08 16:42:32 scheduler task bb07980b (flow b78d6362): unloading (try 0): successful, next state: complete
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:32  <-  n100.r02.s002.Main.out_file b78d6362 ok     exec 5m11s 35.8MiB
2021/07/08 16:42:32 n100.r02.s002.Main.out_file b78d6362 n100/r02/n100.r02.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ab4b8e60f9529da6703e901fcd13ca2930f33c5cf0fd46998597ac1fa500373
	sha256:b78d63626af3a7968f35491eb8a7383dc8643da70926a3d162658778794c3647
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb07980b7c72fd7e7bdfc18dade3731bf7b4d19fda9e7b390ac096d9b24d7981
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s002_output"
	    wget -O "n100.r02.s002_output/n100.r02.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s002_output/n100.r02.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s002_output/n100.r02.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s002_output/n100.r02.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s002_output/n100.r02.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s002_output/n100.r02.s002.reference.fas" "n100.r02.s002_output/n100.r02.s002.fq1.fastq" "n100.r02.s002_output/n100.r02.s002.fq2.fastq" | samtools view -bS - > "n100.r02.s002_output/n100.r02.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s002_output/n100.r02.s002.untrimmed.sorted.bam" "n100.r02.s002_output/n100.r02.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s002_output/n100.r02.s002.untrimmed.sorted.bam" -b "n100.r02.s002_output/n100.r02.s002.primers.bed" -p "n100.r02.s002_output/n100.r02.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" "n100.r02.s002_output/n100.r02.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s002_output/n100.r02.s002.reference.fas" "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" > "n100.r02.s002_output/n100.r02.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s002_output/n100.r02.s002.reference.fas" --call-indels "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" > "n100.r02.s002_output/n100.r02.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s002_output/n100.r02.s002.trimmed.sorted.bam" > "n100.r02.s002_output/n100.r02.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s002_output/n100.r02.s002.depth.txt" "n100.r02.s002_output/n100.r02.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s002_output/n100.r02.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s002_output/n100.r02.s002.reference.fas" | bcftools consensus -m "n100.r02.s002_output/n100.r02.s002.low_depth.tsv" tmp.vcf.gz > "n100.r02.s002_output/n100.r02.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:69e8e2e000da301cbf767ffdb155f4359c2e110fdbd7fd8989a9ce9db10b3d14 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.1MiB max=131.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:42:32 scheduler task 8ddf098c (flow 6e4a27b8): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s002.tar.gz resources {}
2021/07/08 16:42:32  ->  n100.r02.s002.Main.cp_out_file 6e4a27b8 exec extern s3://niema-test/n100/r02/n100.r02.s002.tar.gz 35.8MiB
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): unloading (try 0): started
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): unloading list<val<.=358c1dfb 35.8MiB> 35.8MiB>
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): unloading val<.=64706791 35.4MiB>
2021/07/08 16:42:32 scheduler task 73f9bb6c (flow 958202cb): unloading val<.=6998278f 35.4MiB>
2021/07/08 16:42:33 scheduler task c9977743 (flow 11c1efaf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:610691cc1620e23d229ea0ccd57bf842bc87a41dc929ec62f8135c87ff24fc00 -> s3://niema-test/n100/r02/n100.r02.s078.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:33  <-  n100.r02.s078.Main.cp_out_file 11c1efaf ok   extern 0s 35.8MiB
2021/07/08 16:42:33 scheduler task 73f9bb6c (flow 958202cb): unloaded val<.=64706791 35.4MiB>
2021/07/08 16:42:33 scheduler task 73f9bb6c (flow 958202cb): unloaded val<.=6998278f 35.4MiB>
2021/07/08 16:42:33 scheduler task 73f9bb6c (flow 958202cb): unloaded list<val<.=358c1dfb 35.8MiB> 35.8MiB>
2021/07/08 16:42:33 scheduler task 73f9bb6c (flow 958202cb): unloading (try 0): successful, next state: complete
2021/07/08 16:42:33  <-  n100.r02.s036.Main.out_file 958202cb ok     exec 5m1s 35.8MiB
2021/07/08 16:42:33 n100.r02.s036.Main.out_file 958202cb n100/r02/n100.r02.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a6cd1dec5dc969c908c92bb3e3f576c591bed0a61fb6fef8c135aad561d9deea
	sha256:958202cb73fb265945618ae6c49e928d0619b88620b26d2ec646c37a84552519
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/73f9bb6c431056f170a5282bb4730b98f96b3128fa5697cd496d01ef0acb7351
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s036_output"
	    wget -O "n100.r02.s036_output/n100.r02.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s036_output/n100.r02.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s036_output/n100.r02.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s036_output/n100.r02.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s036_output/n100.r02.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s036_output/n100.r02.s036.reference.fas" "n100.r02.s036_output/n100.r02.s036.fq1.fastq" "n100.r02.s036_output/n100.r02.s036.fq2.fastq" | samtools view -bS - > "n100.r02.s036_output/n100.r02.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s036_output/n100.r02.s036.untrimmed.sorted.bam" "n100.r02.s036_output/n100.r02.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s036_output/n100.r02.s036.untrimmed.sorted.bam" -b "n100.r02.s036_output/n100.r02.s036.primers.bed" -p "n100.r02.s036_output/n100.r02.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" "n100.r02.s036_output/n100.r02.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s036_output/n100.r02.s036.reference.fas" "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" > "n100.r02.s036_output/n100.r02.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s036_output/n100.r02.s036.reference.fas" --call-indels "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" > "n100.r02.s036_output/n100.r02.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s036_output/n100.r02.s036.trimmed.sorted.bam" > "n100.r02.s036_output/n100.r02.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s036_output/n100.r02.s036.depth.txt" "n100.r02.s036_output/n100.r02.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s036_output/n100.r02.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s036_output/n100.r02.s036.reference.fas" | bcftools consensus -m "n100.r02.s036_output/n100.r02.s036.low_depth.tsv" tmp.vcf.gz > "n100.r02.s036_output/n100.r02.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:358c1dfbdd98c5d89693d6aa1fc1eb98fd07c02daa2f2cccfff4b0a50b0bd1d2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.6MiB max=130.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:42:33 scheduler task e174aa21 (flow 61c35632): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s036.tar.gz resources {}
2021/07/08 16:42:33  ->  n100.r02.s036.Main.cp_out_file 61c35632 exec extern s3://niema-test/n100/r02/n100.r02.s036.tar.gz 35.8MiB
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): promoting objects (try 0): started
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloading (try 0): started
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloading list<val<.=ffbcd60e 35.7MiB> 35.7MiB>
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloading val<.=dd473633 35.4MiB>
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloading val<.=104fbce7 35.4MiB>
2021/07/08 16:42:33 scheduler task af6822e5 (flow 2244891b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:788a3ac901a4d962b1bc431e0f7946f98f474e07f7d3d52317f71035f98afdce -> s3://niema-test/n100/r02/n100.r02.s003.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:33  <-  n100.r02.s003.Main.cp_out_file 2244891b ok   extern 0s 35.8MiB
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): retrieving diagnostic output (try 0): started
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloaded val<.=104fbce7 35.4MiB>
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloaded list<val<.=ffbcd60e 35.7MiB> 35.7MiB>
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloaded val<.=dd473633 35.4MiB>
2021/07/08 16:42:33 scheduler task 6f0ba86a (flow 16e41ecb): unloading (try 0): successful, next state: complete
2021/07/08 16:42:33  <-  n100.r02.s013.Main.out_file 16e41ecb ok     exec 5m11s 35.7MiB
2021/07/08 16:42:33 n100.r02.s013.Main.out_file 16e41ecb n100/r02/n100.r02.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dfab7788be14f2a4224a88280b05201914f70235aedf1a6c492c57cc814303db
	sha256:16e41ecb76ac11e88d2cc4b8256567a15dad169967efbd3c74bd5553930559f0
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f0ba86a210a7643591cc467b02e03da6f23dcc7557a8e604df853526535d3f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s013_output"
	    wget -O "n100.r02.s013_output/n100.r02.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s013_output/n100.r02.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s013_output/n100.r02.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s013_output/n100.r02.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s013_output/n100.r02.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s013_output/n100.r02.s013.reference.fas" "n100.r02.s013_output/n100.r02.s013.fq1.fastq" "n100.r02.s013_output/n100.r02.s013.fq2.fastq" | samtools view -bS - > "n100.r02.s013_output/n100.r02.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s013_output/n100.r02.s013.untrimmed.sorted.bam" "n100.r02.s013_output/n100.r02.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s013_output/n100.r02.s013.untrimmed.sorted.bam" -b "n100.r02.s013_output/n100.r02.s013.primers.bed" -p "n100.r02.s013_output/n100.r02.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" "n100.r02.s013_output/n100.r02.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s013_output/n100.r02.s013.reference.fas" "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" > "n100.r02.s013_output/n100.r02.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s013_output/n100.r02.s013.reference.fas" --call-indels "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" > "n100.r02.s013_output/n100.r02.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s013_output/n100.r02.s013.trimmed.sorted.bam" > "n100.r02.s013_output/n100.r02.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s013_output/n100.r02.s013.depth.txt" "n100.r02.s013_output/n100.r02.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s013_output/n100.r02.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s013_output/n100.r02.s013.reference.fas" | bcftools consensus -m "n100.r02.s013_output/n100.r02.s013.low_depth.tsv" tmp.vcf.gz > "n100.r02.s013_output/n100.r02.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ffbcd60edd15edca78ae437e752b490ef7a4b4df86befffd0b607574a8890be4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=124.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=524B max=2.1KiB
2021/07/08 16:42:33 scheduler task 566f213b (flow 1f73b347): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s013.tar.gz resources {}
2021/07/08 16:42:33  ->  n100.r02.s013.Main.cp_out_file 1f73b347 exec extern s3://niema-test/n100/r02/n100.r02.s013.tar.gz 35.7MiB
2021/07/08 16:42:33 scheduler task d1f9fedd (flow 129956b3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0845b6eae31da44166d17e085f20974d6b4bca9b0acb775d76e756c15ecbd0f2 -> s3://niema-test/n100/r02/n100.r02.s051.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:33  <-  n100.r02.s051.Main.cp_out_file 129956b3 ok   extern 0s 35.8MiB
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): retrieving result (try 0): started
2021/07/08 16:42:33 scheduler task c04549b3 (flow fba31793): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:17728355df303a5e2c4ccba321dc33c287dfac49d97a06b0b4aad6a4db2fa4d1 -> s3://niema-test/n100/r02/n100.r02.s061.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:33  <-  n100.r02.s061.Main.cp_out_file fba31793 ok   extern 0s 35.8MiB
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:33 scheduler task c88b5c52 (flow 7f934c83): transferring output (try 0): started
2021/07/08 16:42:33 scheduler task 40ee7582 (flow 461731e4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:33 scheduler task 40ee7582 (flow 461731e4): promoting objects (try 0): started
2021/07/08 16:42:33 scheduler task c2690bb6 (flow c8530bd3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:33 scheduler task c2690bb6 (flow c8530bd3): promoting objects (try 0): started
2021/07/08 16:42:33 scheduler task 40ee7582 (flow 461731e4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:33 scheduler task 40ee7582 (flow 461731e4): retrieving diagnostic output (try 0): started
2021/07/08 16:42:33 scheduler task c2690bb6 (flow c8530bd3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:33 scheduler task c2690bb6 (flow c8530bd3): retrieving diagnostic output (try 0): started
2021/07/08 16:42:33 scheduler task 3d0e60dd (flow 07d5a440): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cb354e52b7dd7a01d67232ad23d14dd5fa9544d0c2a50e8b57eb7d7b4d832efc -> s3://niema-test/n100/r02/n100.r02.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:33  <-  n100.r02.s001.Main.cp_out_file 07d5a440 ok   extern 0s 35.7MiB
2021/07/08 16:42:33 scheduler task 40ee7582 (flow 461731e4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:33 scheduler task 40ee7582 (flow 461731e4): retrieving result (try 0): started
2021/07/08 16:42:33 scheduler task 1fe06a7a (flow d689d81e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d623a1dcd56580f3434ddf9b3a7ecd42c39e18e67bd0fd880051a77e9751696d -> s3://niema-test/n100/r02/n100.r02.s040.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:33  <-  n100.r02.s040.Main.cp_out_file d689d81e ok   extern 0s 35.8MiB
2021/07/08 16:42:33 scheduler task 8654fc3f (flow c91904a4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:33 scheduler task c2690bb6 (flow c8530bd3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:33 scheduler task 8654fc3f (flow c91904a4): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task 8ddf098c (flow 6e4a27b8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:69e8e2e000da301cbf767ffdb155f4359c2e110fdbd7fd8989a9ce9db10b3d14 -> s3://niema-test/n100/r02/n100.r02.s002.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:34  <-  n100.r02.s002.Main.cp_out_file 6e4a27b8 ok   extern 0s 35.8MiB
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloading (try 0): started
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloading list<val<.=70db6059 35.8MiB> 35.8MiB>
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloading val<.=eebd21ba 35.4MiB>
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloading val<.=94056f4b 35.4MiB>
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloaded val<.=94056f4b 35.4MiB>
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloaded val<.=eebd21ba 35.4MiB>
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloaded list<val<.=70db6059 35.8MiB> 35.8MiB>
2021/07/08 16:42:34 scheduler task c88b5c52 (flow 7f934c83): unloading (try 0): successful, next state: complete
2021/07/08 16:42:34  <-  n100.r02.s070.Main.out_file 7f934c83 ok     exec 5m3s 35.8MiB
2021/07/08 16:42:34 n100.r02.s070.Main.out_file 7f934c83 n100/r02/n100.r02.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:18a607f8cf6f0a0914e02feb2831c779fbd902e0d1f8d3b8d5fe13b83fb12778
	sha256:7f934c83c4d3662467bebe62e3514d4acc7cf5a39209f4583294a77bce9d48fd
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c88b5c526397010044361f73acda72191ee841813b1a34267931502c8d77c8f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s070_output"
	    wget -O "n100.r02.s070_output/n100.r02.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s070_output/n100.r02.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s070_output/n100.r02.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s070_output/n100.r02.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s070_output/n100.r02.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s070_output/n100.r02.s070.reference.fas" "n100.r02.s070_output/n100.r02.s070.fq1.fastq" "n100.r02.s070_output/n100.r02.s070.fq2.fastq" | samtools view -bS - > "n100.r02.s070_output/n100.r02.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s070_output/n100.r02.s070.untrimmed.sorted.bam" "n100.r02.s070_output/n100.r02.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s070_output/n100.r02.s070.untrimmed.sorted.bam" -b "n100.r02.s070_output/n100.r02.s070.primers.bed" -p "n100.r02.s070_output/n100.r02.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" "n100.r02.s070_output/n100.r02.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s070_output/n100.r02.s070.reference.fas" "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" > "n100.r02.s070_output/n100.r02.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s070_output/n100.r02.s070.reference.fas" --call-indels "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" > "n100.r02.s070_output/n100.r02.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s070_output/n100.r02.s070.trimmed.sorted.bam" > "n100.r02.s070_output/n100.r02.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s070_output/n100.r02.s070.depth.txt" "n100.r02.s070_output/n100.r02.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s070_output/n100.r02.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s070_output/n100.r02.s070.reference.fas" | bcftools consensus -m "n100.r02.s070_output/n100.r02.s070.low_depth.tsv" tmp.vcf.gz > "n100.r02.s070_output/n100.r02.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:70db60594d6b515fd8366fbc43c18318de2e5f94f7218684e9da7ece6c690b80 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=131.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 16:42:34 scheduler task e323523f (flow 1e9d5160): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s070.tar.gz resources {}
2021/07/08 16:42:34  ->  n100.r02.s070.Main.cp_out_file 1e9d5160 exec extern s3://niema-test/n100/r02/n100.r02.s070.tar.gz 35.8MiB
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task e174aa21 (flow 61c35632): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:358c1dfbdd98c5d89693d6aa1fc1eb98fd07c02daa2f2cccfff4b0a50b0bd1d2 -> s3://niema-test/n100/r02/n100.r02.s036.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:34  <-  n100.r02.s036.Main.cp_out_file 61c35632 ok   extern 0s 35.8MiB
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloading (try 0): started
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloading list<val<.=7fec47ce 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloading val<.=f3660a07 35.4MiB>
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloading val<.=75dc69e1 35.4MiB>
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloading (try 0): started
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloading list<val<.=065dbc5d 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloading val<.=f987a7c2 35.4MiB>
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloading val<.=dc48d3b6 35.4MiB>
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task 566f213b (flow 1f73b347): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ffbcd60edd15edca78ae437e752b490ef7a4b4df86befffd0b607574a8890be4 -> s3://niema-test/n100/r02/n100.r02.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:34  <-  n100.r02.s013.Main.cp_out_file 1f73b347 ok   extern 0s 35.7MiB
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task 2af220b8 (flow f94e4acc): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloaded list<val<.=7fec47ce 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloaded val<.=f3660a07 35.4MiB>
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloaded val<.=75dc69e1 35.4MiB>
2021/07/08 16:42:34 scheduler task 40ee7582 (flow 461731e4): unloading (try 0): successful, next state: complete
2021/07/08 16:42:34  <-  n100.r02.s080.Main.out_file 461731e4 ok     exec 5m4s 35.7MiB
2021/07/08 16:42:34 n100.r02.s080.Main.out_file 461731e4 n100/r02/n100.r02.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e5acb84ceffb6120e9c51f33a3ac040812b4eb26c0016c0cd6d6de39381f7b39
	sha256:461731e40796de0dee91c2ea3a30c542b65e103e4bbfaba1ee7fbc4d21911953
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/40ee758246ff8c96be8b73e1edf2ed8e6fc540f43316f2f985d44b7987a9f322
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s080_output"
	    wget -O "n100.r02.s080_output/n100.r02.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s080_output/n100.r02.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s080_output/n100.r02.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s080_output/n100.r02.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s080_output/n100.r02.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s080_output/n100.r02.s080.reference.fas" "n100.r02.s080_output/n100.r02.s080.fq1.fastq" "n100.r02.s080_output/n100.r02.s080.fq2.fastq" | samtools view -bS - > "n100.r02.s080_output/n100.r02.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s080_output/n100.r02.s080.untrimmed.sorted.bam" "n100.r02.s080_output/n100.r02.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s080_output/n100.r02.s080.untrimmed.sorted.bam" -b "n100.r02.s080_output/n100.r02.s080.primers.bed" -p "n100.r02.s080_output/n100.r02.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" "n100.r02.s080_output/n100.r02.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s080_output/n100.r02.s080.reference.fas" "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" > "n100.r02.s080_output/n100.r02.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s080_output/n100.r02.s080.reference.fas" --call-indels "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" > "n100.r02.s080_output/n100.r02.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s080_output/n100.r02.s080.trimmed.sorted.bam" > "n100.r02.s080_output/n100.r02.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s080_output/n100.r02.s080.depth.txt" "n100.r02.s080_output/n100.r02.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s080_output/n100.r02.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s080_output/n100.r02.s080.reference.fas" | bcftools consensus -m "n100.r02.s080_output/n100.r02.s080.low_depth.tsv" tmp.vcf.gz > "n100.r02.s080_output/n100.r02.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7fec47cecec27c49ad78b6092d4b326a966191247bc0461373106b7ad2fa4ee3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.1MiB max=133.1MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=698B max=3.1KiB
2021/07/08 16:42:34 scheduler task b24a99ed (flow c30f2fc5): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s080.tar.gz resources {}
2021/07/08 16:42:34  ->  n100.r02.s080.Main.cp_out_file c30f2fc5 exec extern s3://niema-test/n100/r02/n100.r02.s080.tar.gz 35.7MiB
2021/07/08 16:42:34 scheduler task 0d089343 (flow e6ad34ee): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloaded val<.=dc48d3b6 35.4MiB>
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloaded val<.=f987a7c2 35.4MiB>
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloaded list<val<.=065dbc5d 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task c2690bb6 (flow c8530bd3): unloading (try 0): successful, next state: complete
2021/07/08 16:42:34 scheduler task 0d089343 (flow e6ad34ee): promoting objects (try 0): started
2021/07/08 16:42:34  <-  n100.r02.s071.Main.out_file c8530bd3 ok     exec 5m3s 35.7MiB
2021/07/08 16:42:34 n100.r02.s071.Main.out_file c8530bd3 n100/r02/n100.r02.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cade3489f4805f9cd6997341cd73c1934a6f8b754eb7bc1026991447e58ef51c
	sha256:c8530bd333ad59ed2337c36d40158125504314cc8b550face8cce5ee31c72ee7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c2690bb603a31cb84ea1ef44d61f2691520fea68b1866d6052c8d25ac6076460
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s071_output"
	    wget -O "n100.r02.s071_output/n100.r02.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s071_output/n100.r02.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s071_output/n100.r02.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s071_output/n100.r02.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s071_output/n100.r02.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s071_output/n100.r02.s071.reference.fas" "n100.r02.s071_output/n100.r02.s071.fq1.fastq" "n100.r02.s071_output/n100.r02.s071.fq2.fastq" | samtools view -bS - > "n100.r02.s071_output/n100.r02.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s071_output/n100.r02.s071.untrimmed.sorted.bam" "n100.r02.s071_output/n100.r02.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s071_output/n100.r02.s071.untrimmed.sorted.bam" -b "n100.r02.s071_output/n100.r02.s071.primers.bed" -p "n100.r02.s071_output/n100.r02.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" "n100.r02.s071_output/n100.r02.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s071_output/n100.r02.s071.reference.fas" "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" > "n100.r02.s071_output/n100.r02.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s071_output/n100.r02.s071.reference.fas" --call-indels "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" > "n100.r02.s071_output/n100.r02.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s071_output/n100.r02.s071.trimmed.sorted.bam" > "n100.r02.s071_output/n100.r02.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s071_output/n100.r02.s071.depth.txt" "n100.r02.s071_output/n100.r02.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s071_output/n100.r02.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s071_output/n100.r02.s071.reference.fas" | bcftools consensus -m "n100.r02.s071_output/n100.r02.s071.low_depth.tsv" tmp.vcf.gz > "n100.r02.s071_output/n100.r02.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:065dbc5d8f5f83f18dcd7d5e9d7a54fef0e9111733bdcb753e40d7f09069ba94 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=125.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=703B max=3.1KiB
2021/07/08 16:42:34 scheduler task 6f479815 (flow 3d1cd816): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s071.tar.gz resources {}
2021/07/08 16:42:34  ->  n100.r02.s071.Main.cp_out_file 3d1cd816 exec extern s3://niema-test/n100/r02/n100.r02.s071.tar.gz 35.7MiB
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task 94dedf3c (flow d1fb7eba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task 0d089343 (flow e6ad34ee): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 94dedf3c (flow d1fb7eba): promoting objects (try 0): started
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task 0d089343 (flow e6ad34ee): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloading (try 0): started
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloading list<val<.=d854c371 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task e6c82ca0 (flow 2f81b13d): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloading val<.=3e23995a 35.4MiB>
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloading val<.=2ed23659 35.4MiB>
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloading (try 0): started
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloading list<val<.=5fecb049 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloading val<.=e65db8ee 35.4MiB>
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloading val<.=ef08df5f 35.4MiB>
2021/07/08 16:42:34 scheduler task 94dedf3c (flow d1fb7eba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:34 scheduler task e323523f (flow 1e9d5160): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:70db60594d6b515fd8366fbc43c18318de2e5f94f7218684e9da7ece6c690b80 -> s3://niema-test/n100/r02/n100.r02.s070.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:34  <-  n100.r02.s070.Main.cp_out_file 1e9d5160 ok   extern 0s 35.8MiB
2021/07/08 16:42:34 scheduler task 94dedf3c (flow d1fb7eba): retrieving diagnostic output (try 0): started
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34 scheduler task 2154d467 (flow 0ea2123a): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloaded list<val<.=d854c371 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloaded val<.=3e23995a 35.4MiB>
2021/07/08 16:42:34 scheduler task 04f3dd11 (flow 9cfb1911): transferring output (try 0): started
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloaded val<.=2ed23659 35.4MiB>
2021/07/08 16:42:34 scheduler task 8654fc3f (flow c91904a4): unloading (try 0): successful, next state: complete
2021/07/08 16:42:34 scheduler task 0d089343 (flow e6ad34ee): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:34  <-  n100.r02.s094.Main.out_file c91904a4 ok     exec 5m3s 35.7MiB
2021/07/08 16:42:34 n100.r02.s094.Main.out_file c91904a4 n100/r02/n100.r02.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9097d43648621ff329686e8acfd5bfae2e6bfd1f7583de70f1146eed91b83d34
	sha256:c91904a4d0d9244adc4b02d3aa24699c9694281f65f04840f23627f88febb2c4
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8654fc3f56cc3e2ac9bfd2fad274354aefe89edb8ebfdbd4665516bc4f21e8ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s094_output"
	    wget -O "n100.r02.s094_output/n100.r02.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s094_output/n100.r02.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s094_output/n100.r02.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s094_output/n100.r02.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s094_output/n100.r02.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s094_output/n100.r02.s094.reference.fas" "n100.r02.s094_output/n100.r02.s094.fq1.fastq" "n100.r02.s094_output/n100.r02.s094.fq2.fastq" | samtools view -bS - > "n100.r02.s094_output/n100.r02.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s094_output/n100.r02.s094.untrimmed.sorted.bam" "n100.r02.s094_output/n100.r02.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s094_output/n100.r02.s094.untrimmed.sorted.bam" -b "n100.r02.s094_output/n100.r02.s094.primers.bed" -p "n100.r02.s094_output/n100.r02.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" "n100.r02.s094_output/n100.r02.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s094_output/n100.r02.s094.reference.fas" "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" > "n100.r02.s094_output/n100.r02.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s094_output/n100.r02.s094.reference.fas" --call-indels "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" > "n100.r02.s094_output/n100.r02.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s094_output/n100.r02.s094.trimmed.sorted.bam" > "n100.r02.s094_output/n100.r02.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s094_output/n100.r02.s094.depth.txt" "n100.r02.s094_output/n100.r02.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s094_output/n100.r02.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s094_output/n100.r02.s094.reference.fas" | bcftools consensus -m "n100.r02.s094_output/n100.r02.s094.low_depth.tsv" tmp.vcf.gz > "n100.r02.s094_output/n100.r02.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d854c371847c11ba30199f4dda6870d2fb67ed29c546f6064e241637dc3f8f28 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=127.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 16:42:34 scheduler task 9709ea23 (flow 3c5e1fbf): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s094.tar.gz resources {}
2021/07/08 16:42:34  ->  n100.r02.s094.Main.cp_out_file 3c5e1fbf exec extern s3://niema-test/n100/r02/n100.r02.s094.tar.gz 35.7MiB
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloaded list<val<.=5fecb049 35.7MiB> 35.7MiB>
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloaded val<.=ef08df5f 35.4MiB>
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloaded val<.=e65db8ee 35.4MiB>
2021/07/08 16:42:34 scheduler task 68d632e0 (flow e0a7fa8c): unloading (try 0): successful, next state: complete
2021/07/08 16:42:34 scheduler task 0d089343 (flow e6ad34ee): retrieving result (try 0): started
2021/07/08 16:42:34 scheduler task c73cacdd (flow c37abb9e): transferring output (try 0): started
2021/07/08 16:42:34  <-  n100.r02.s060.Main.out_file e0a7fa8c ok     exec 5m13s 35.7MiB
2021/07/08 16:42:34 n100.r02.s060.Main.out_file e0a7fa8c n100/r02/n100.r02.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ff24994014e44a006c46e2f5dd0374709cfc4694044d04e2d485457186c3d46d
	sha256:e0a7fa8c8a09d7e3d4694892aaa03244983f5c3a22756fbfe6abd037b0f56d4b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/68d632e09861b772b0018d5f7bab090a69817578621a072d9fc9dce0b26bc007
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s060_output"
	    wget -O "n100.r02.s060_output/n100.r02.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s060_output/n100.r02.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s060_output/n100.r02.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s060_output/n100.r02.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s060_output/n100.r02.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s060_output/n100.r02.s060.reference.fas" "n100.r02.s060_output/n100.r02.s060.fq1.fastq" "n100.r02.s060_output/n100.r02.s060.fq2.fastq" | samtools view -bS - > "n100.r02.s060_output/n100.r02.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s060_output/n100.r02.s060.untrimmed.sorted.bam" "n100.r02.s060_output/n100.r02.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s060_output/n100.r02.s060.untrimmed.sorted.bam" -b "n100.r02.s060_output/n100.r02.s060.primers.bed" -p "n100.r02.s060_output/n100.r02.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" "n100.r02.s060_output/n100.r02.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s060_output/n100.r02.s060.reference.fas" "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" > "n100.r02.s060_output/n100.r02.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s060_output/n100.r02.s060.reference.fas" --call-indels "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" > "n100.r02.s060_output/n100.r02.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s060_output/n100.r02.s060.trimmed.sorted.bam" > "n100.r02.s060_output/n100.r02.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s060_output/n100.r02.s060.depth.txt" "n100.r02.s060_output/n100.r02.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s060_output/n100.r02.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s060_output/n100.r02.s060.reference.fas" | bcftools consensus -m "n100.r02.s060_output/n100.r02.s060.low_depth.tsv" tmp.vcf.gz > "n100.r02.s060_output/n100.r02.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5fecb0495089d32e86eef501afffcde93ca8aed29077baabc1864cd16d62d99d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.9MiB max=127.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 16:42:35 scheduler task f4dd0b4c (flow f623a7a7): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s060.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s060.Main.cp_out_file f623a7a7 exec extern s3://niema-test/n100/r02/n100.r02.s060.tar.gz 35.7MiB
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): retrieving result (try 0): started
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): transferring output (try 0): started
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloading (try 0): started
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloading list<val<.=021d05c5 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloading val<.=820b6fe9 35.4MiB>
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloading val<.=44b4ceb3 35.4MiB>
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): transferring output (try 0): started
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloaded list<val<.=021d05c5 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloaded val<.=44b4ceb3 35.4MiB>
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloaded val<.=820b6fe9 35.4MiB>
2021/07/08 16:42:35 scheduler task 2af220b8 (flow f94e4acc): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): promoting objects (try 0): started
2021/07/08 16:42:35  <-  n100.r02.s022.Main.out_file f94e4acc ok     exec 5m4s 35.7MiB
2021/07/08 16:42:35 n100.r02.s022.Main.out_file f94e4acc n100/r02/n100.r02.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:677016996860a823dab9f2655f43fedb25e3a7a92b8400aea8dade5d3d89098e
	sha256:f94e4accc3f60e0162089c6ed5115535d81267c71c32cc977d45503f032d914b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2af220b8cfd1ffac7b0b1805d18bcd618bb1c5f0a60a937888f2602758c74de0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s022_output"
	    wget -O "n100.r02.s022_output/n100.r02.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s022_output/n100.r02.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s022_output/n100.r02.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s022_output/n100.r02.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s022_output/n100.r02.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s022_output/n100.r02.s022.reference.fas" "n100.r02.s022_output/n100.r02.s022.fq1.fastq" "n100.r02.s022_output/n100.r02.s022.fq2.fastq" | samtools view -bS - > "n100.r02.s022_output/n100.r02.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s022_output/n100.r02.s022.untrimmed.sorted.bam" "n100.r02.s022_output/n100.r02.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s022_output/n100.r02.s022.untrimmed.sorted.bam" -b "n100.r02.s022_output/n100.r02.s022.primers.bed" -p "n100.r02.s022_output/n100.r02.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" "n100.r02.s022_output/n100.r02.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s022_output/n100.r02.s022.reference.fas" "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" > "n100.r02.s022_output/n100.r02.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s022_output/n100.r02.s022.reference.fas" --call-indels "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" > "n100.r02.s022_output/n100.r02.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s022_output/n100.r02.s022.trimmed.sorted.bam" > "n100.r02.s022_output/n100.r02.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s022_output/n100.r02.s022.depth.txt" "n100.r02.s022_output/n100.r02.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s022_output/n100.r02.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s022_output/n100.r02.s022.reference.fas" | bcftools consensus -m "n100.r02.s022_output/n100.r02.s022.low_depth.tsv" tmp.vcf.gz > "n100.r02.s022_output/n100.r02.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:021d05c5b1751ccf79bfafd2cec8a095d86d283d38f2f7b9662acbe061fc58ad 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=130.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 16:42:35 scheduler task 760b09cd (flow f4af4ff5): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s022.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s022.Main.cp_out_file f4af4ff5 exec extern s3://niema-test/n100/r02/n100.r02.s022.tar.gz 35.7MiB
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): retrieving diagnostic output (try 0): started
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloading (try 0): started
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloading list<val<.=8378b1e5 35.8MiB> 35.8MiB>
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloading val<.=8c655cab 35.4MiB>
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloading val<.=09c98945 35.4MiB>
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): retrieving result (try 0): started
2021/07/08 16:42:35 scheduler task 6f479815 (flow 3d1cd816): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:065dbc5d8f5f83f18dcd7d5e9d7a54fef0e9111733bdcb753e40d7f09069ba94 -> s3://niema-test/n100/r02/n100.r02.s071.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:35  <-  n100.r02.s071.Main.cp_out_file 3d1cd816 ok   extern 0s 35.7MiB
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloading (try 0): started
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloading list<val<.=2f8148a9 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloading val<.=c6025fad 35.4MiB>
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloading val<.=17a5d639 35.4MiB>
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloading (try 0): started
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloading list<val<.=008a512d 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloading val<.=dda191c2 35.4MiB>
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloading val<.=9476af0a 35.4MiB>
2021/07/08 16:42:35 scheduler task b24a99ed (flow c30f2fc5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7fec47cecec27c49ad78b6092d4b326a966191247bc0461373106b7ad2fa4ee3 -> s3://niema-test/n100/r02/n100.r02.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:35  <-  n100.r02.s080.Main.cp_out_file c30f2fc5 ok   extern 0s 35.7MiB
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloaded val<.=8c655cab 35.4MiB>
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloaded list<val<.=8378b1e5 35.8MiB> 35.8MiB>
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloaded val<.=09c98945 35.4MiB>
2021/07/08 16:42:35 scheduler task e6c82ca0 (flow 2f81b13d): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:35  <-  n100.r02.s091.Main.out_file 2f81b13d ok     exec 5m4s 35.8MiB
2021/07/08 16:42:35 n100.r02.s091.Main.out_file 2f81b13d n100/r02/n100.r02.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ff722d705fd97a71b3bc8ba2d4628901b39f5a155522d00c6597259086e3476e
	sha256:2f81b13d157904ddb35960d97f2f81b72ebcc6f3e96360d903d42e0970f1bf70
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e6c82ca0f587f47ee3e543aacb6ba757351a2087a268d875b0d49ee047716504
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s091_output"
	    wget -O "n100.r02.s091_output/n100.r02.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s091_output/n100.r02.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s091_output/n100.r02.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s091_output/n100.r02.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s091_output/n100.r02.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s091_output/n100.r02.s091.reference.fas" "n100.r02.s091_output/n100.r02.s091.fq1.fastq" "n100.r02.s091_output/n100.r02.s091.fq2.fastq" | samtools view -bS - > "n100.r02.s091_output/n100.r02.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s091_output/n100.r02.s091.untrimmed.sorted.bam" "n100.r02.s091_output/n100.r02.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s091_output/n100.r02.s091.untrimmed.sorted.bam" -b "n100.r02.s091_output/n100.r02.s091.primers.bed" -p "n100.r02.s091_output/n100.r02.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" "n100.r02.s091_output/n100.r02.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s091_output/n100.r02.s091.reference.fas" "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" > "n100.r02.s091_output/n100.r02.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s091_output/n100.r02.s091.reference.fas" --call-indels "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" > "n100.r02.s091_output/n100.r02.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s091_output/n100.r02.s091.trimmed.sorted.bam" > "n100.r02.s091_output/n100.r02.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s091_output/n100.r02.s091.depth.txt" "n100.r02.s091_output/n100.r02.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s091_output/n100.r02.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s091_output/n100.r02.s091.reference.fas" | bcftools consensus -m "n100.r02.s091_output/n100.r02.s091.low_depth.tsv" tmp.vcf.gz > "n100.r02.s091_output/n100.r02.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8378b1e5e87d05e97cac6554a5f569cf803683ac21847505d9eef7b451709f93 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=128.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:35 scheduler task 99584377 (flow 83ea77af): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s091.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s091.Main.cp_out_file 83ea77af exec extern s3://niema-test/n100/r02/n100.r02.s091.tar.gz 35.8MiB
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): transferring output (try 0): started
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloaded list<val<.=2f8148a9 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloaded val<.=17a5d639 35.4MiB>
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloaded val<.=c6025fad 35.4MiB>
2021/07/08 16:42:35 scheduler task 2154d467 (flow 0ea2123a): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35  <-  n100.r02.s081.Main.out_file 0ea2123a ok     exec 5m4s 35.7MiB
2021/07/08 16:42:35 n100.r02.s081.Main.out_file 0ea2123a n100/r02/n100.r02.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ff2ae3be837d7d145e5b5156ad139b3731408c6488b7c2c538575a3abcfb19f5
	sha256:0ea2123af311a9d83c0eff255b63ea275ba96dc97c7b11e238c84ba8b6720817
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2154d467c334574bbf6dddace03c96d013ce9c141e5247f5505647d3c5323ae5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s081_output"
	    wget -O "n100.r02.s081_output/n100.r02.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s081_output/n100.r02.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s081_output/n100.r02.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s081_output/n100.r02.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s081_output/n100.r02.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s081_output/n100.r02.s081.reference.fas" "n100.r02.s081_output/n100.r02.s081.fq1.fastq" "n100.r02.s081_output/n100.r02.s081.fq2.fastq" | samtools view -bS - > "n100.r02.s081_output/n100.r02.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s081_output/n100.r02.s081.untrimmed.sorted.bam" "n100.r02.s081_output/n100.r02.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s081_output/n100.r02.s081.untrimmed.sorted.bam" -b "n100.r02.s081_output/n100.r02.s081.primers.bed" -p "n100.r02.s081_output/n100.r02.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" "n100.r02.s081_output/n100.r02.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s081_output/n100.r02.s081.reference.fas" "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" > "n100.r02.s081_output/n100.r02.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s081_output/n100.r02.s081.reference.fas" --call-indels "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" > "n100.r02.s081_output/n100.r02.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s081_output/n100.r02.s081.trimmed.sorted.bam" > "n100.r02.s081_output/n100.r02.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s081_output/n100.r02.s081.depth.txt" "n100.r02.s081_output/n100.r02.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s081_output/n100.r02.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s081_output/n100.r02.s081.reference.fas" | bcftools consensus -m "n100.r02.s081_output/n100.r02.s081.low_depth.tsv" tmp.vcf.gz > "n100.r02.s081_output/n100.r02.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2f8148a9cd3843590f0bfc46ebf33882ecf5d2d0873974f5472a6ac7b16222da 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:42:35 scheduler task ce76f8a7 (flow 5dd4afa0): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s081.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s081.Main.cp_out_file 5dd4afa0 exec extern s3://niema-test/n100/r02/n100.r02.s081.tar.gz 35.7MiB
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloaded list<val<.=008a512d 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloaded val<.=dda191c2 35.4MiB>
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloaded val<.=9476af0a 35.4MiB>
2021/07/08 16:42:35 scheduler task 04f3dd11 (flow 9cfb1911): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35  <-  n100.r02.s025.Main.out_file 9cfb1911 ok     exec 5m4s 35.7MiB
2021/07/08 16:42:35 n100.r02.s025.Main.out_file 9cfb1911 n100/r02/n100.r02.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:71baf6b1fa6794a16d148c0ebecd0d283e04f3aed0a7a86695d38ac7c57d137d
	sha256:9cfb19116a54dfb1e692ae67b99aea2d85a9f32de63ee24b521a88e31a5ec7d0
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/04f3dd11803f5f1db5a5043d34d6ff994737ab7d93dabf509054148df0b590ef
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s025_output"
	    wget -O "n100.r02.s025_output/n100.r02.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s025_output/n100.r02.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s025_output/n100.r02.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s025_output/n100.r02.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s025_output/n100.r02.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s025_output/n100.r02.s025.reference.fas" "n100.r02.s025_output/n100.r02.s025.fq1.fastq" "n100.r02.s025_output/n100.r02.s025.fq2.fastq" | samtools view -bS - > "n100.r02.s025_output/n100.r02.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s025_output/n100.r02.s025.untrimmed.sorted.bam" "n100.r02.s025_output/n100.r02.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s025_output/n100.r02.s025.untrimmed.sorted.bam" -b "n100.r02.s025_output/n100.r02.s025.primers.bed" -p "n100.r02.s025_output/n100.r02.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" "n100.r02.s025_output/n100.r02.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s025_output/n100.r02.s025.reference.fas" "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" > "n100.r02.s025_output/n100.r02.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s025_output/n100.r02.s025.reference.fas" --call-indels "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" > "n100.r02.s025_output/n100.r02.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s025_output/n100.r02.s025.trimmed.sorted.bam" > "n100.r02.s025_output/n100.r02.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s025_output/n100.r02.s025.depth.txt" "n100.r02.s025_output/n100.r02.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s025_output/n100.r02.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s025_output/n100.r02.s025.reference.fas" | bcftools consensus -m "n100.r02.s025_output/n100.r02.s025.low_depth.tsv" tmp.vcf.gz > "n100.r02.s025_output/n100.r02.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:008a512df7f3d3f0b7acb28847182a6f0f96e04d727adcea1c76955813d52762 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.2MiB max=128.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=696B max=3.1KiB
2021/07/08 16:42:35 scheduler task 36d7aa18 (flow 40d6221f): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s025.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s025.Main.cp_out_file 40d6221f exec extern s3://niema-test/n100/r02/n100.r02.s025.tar.gz 35.7MiB
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): promoting objects (try 0): started
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloading (try 0): started
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloading list<val<.=bc20c175 35.8MiB> 35.8MiB>
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloading val<.=877cdb45 35.4MiB>
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloading val<.=ec37acfc 35.4MiB>
2021/07/08 16:42:35 scheduler task 9709ea23 (flow 3c5e1fbf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d854c371847c11ba30199f4dda6870d2fb67ed29c546f6064e241637dc3f8f28 -> s3://niema-test/n100/r02/n100.r02.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:35  <-  n100.r02.s094.Main.cp_out_file 3c5e1fbf ok   extern 0s 35.7MiB
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloading (try 0): started
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloading list<val<.=6f90aa9c 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloading val<.=409cd52a 35.4MiB>
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloading val<.=eeedef1c 35.4MiB>
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): retrieving diagnostic output (try 0): started
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloading (try 0): started
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloading list<val<.=3b3518a0 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloading val<.=8e35ad2b 35.4MiB>
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloading val<.=7e54c511 35.4MiB>
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloaded list<val<.=bc20c175 35.8MiB> 35.8MiB>
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloaded val<.=877cdb45 35.4MiB>
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloaded list<val<.=6f90aa9c 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloaded val<.=eeedef1c 35.4MiB>
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloaded val<.=ec37acfc 35.4MiB>
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloaded val<.=409cd52a 35.4MiB>
2021/07/08 16:42:35 scheduler task 0d089343 (flow e6ad34ee): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35 scheduler task c73cacdd (flow c37abb9e): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35  <-  n100.r02.s038.Main.out_file e6ad34ee ok     exec 5m4s 35.7MiB
2021/07/08 16:42:35 n100.r02.s038.Main.out_file e6ad34ee n100/r02/n100.r02.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27280c9993282c7711a18b4d579d8983317a634c6ab27c11f7c31f540623ecf2
	sha256:e6ad34ee6f2da713be7c4dc8c2ce6809832a46b7e9e84929cff4c8a0a3993312
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d08934355141995591d1e311bd1e19fd32dbb33c95f3ef5681489e279791f59
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s038_output"
	    wget -O "n100.r02.s038_output/n100.r02.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s038_output/n100.r02.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s038_output/n100.r02.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s038_output/n100.r02.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s038_output/n100.r02.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s038_output/n100.r02.s038.reference.fas" "n100.r02.s038_output/n100.r02.s038.fq1.fastq" "n100.r02.s038_output/n100.r02.s038.fq2.fastq" | samtools view -bS - > "n100.r02.s038_output/n100.r02.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s038_output/n100.r02.s038.untrimmed.sorted.bam" "n100.r02.s038_output/n100.r02.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s038_output/n100.r02.s038.untrimmed.sorted.bam" -b "n100.r02.s038_output/n100.r02.s038.primers.bed" -p "n100.r02.s038_output/n100.r02.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" "n100.r02.s038_output/n100.r02.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s038_output/n100.r02.s038.reference.fas" "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" > "n100.r02.s038_output/n100.r02.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s038_output/n100.r02.s038.reference.fas" --call-indels "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" > "n100.r02.s038_output/n100.r02.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s038_output/n100.r02.s038.trimmed.sorted.bam" > "n100.r02.s038_output/n100.r02.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s038_output/n100.r02.s038.depth.txt" "n100.r02.s038_output/n100.r02.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s038_output/n100.r02.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s038_output/n100.r02.s038.reference.fas" | bcftools consensus -m "n100.r02.s038_output/n100.r02.s038.low_depth.tsv" tmp.vcf.gz > "n100.r02.s038_output/n100.r02.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6f90aa9c76c49847ead0e8e132e5c7c307c5eafc20a6b01d704f380e66b55a65 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=130.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=691B max=3.0KiB
2021/07/08 16:42:35 scheduler task 63c31f62 (flow 5e69b604): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s038.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s038.Main.cp_out_file 5e69b604 exec extern s3://niema-test/n100/r02/n100.r02.s038.tar.gz 35.7MiB
2021/07/08 16:42:35  <-  n100.r02.s012.Main.out_file c37abb9e ok     exec 5m4s 35.8MiB
2021/07/08 16:42:35 n100.r02.s012.Main.out_file c37abb9e n100/r02/n100.r02.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ee71f202101f630746f5eee9ba3ff39d49f0e059d4f774c5421e851eaf093bcd
	sha256:c37abb9ed73f00e53be221d8ff9744a09ab7953388f03b2514e5e5d5761497f7
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c73cacdd42002d08fa2b59724191807eecaf7503e2566fe27c26b6546cc031e5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s012_output"
	    wget -O "n100.r02.s012_output/n100.r02.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s012_output/n100.r02.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s012_output/n100.r02.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s012_output/n100.r02.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s012_output/n100.r02.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s012_output/n100.r02.s012.reference.fas" "n100.r02.s012_output/n100.r02.s012.fq1.fastq" "n100.r02.s012_output/n100.r02.s012.fq2.fastq" | samtools view -bS - > "n100.r02.s012_output/n100.r02.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s012_output/n100.r02.s012.untrimmed.sorted.bam" "n100.r02.s012_output/n100.r02.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s012_output/n100.r02.s012.untrimmed.sorted.bam" -b "n100.r02.s012_output/n100.r02.s012.primers.bed" -p "n100.r02.s012_output/n100.r02.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" "n100.r02.s012_output/n100.r02.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s012_output/n100.r02.s012.reference.fas" "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" > "n100.r02.s012_output/n100.r02.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s012_output/n100.r02.s012.reference.fas" --call-indels "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" > "n100.r02.s012_output/n100.r02.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s012_output/n100.r02.s012.trimmed.sorted.bam" > "n100.r02.s012_output/n100.r02.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s012_output/n100.r02.s012.depth.txt" "n100.r02.s012_output/n100.r02.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s012_output/n100.r02.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s012_output/n100.r02.s012.reference.fas" | bcftools consensus -m "n100.r02.s012_output/n100.r02.s012.low_depth.tsv" tmp.vcf.gz > "n100.r02.s012_output/n100.r02.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bc20c1751ffcd315387269362c60f8f9f98ffd3af5bb51b1331b96f181dbb6ad 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.8MiB max=128.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:35 scheduler task ed1e9290 (flow 24a9ca8f): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s012.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s012.Main.cp_out_file 24a9ca8f exec extern s3://niema-test/n100/r02/n100.r02.s012.tar.gz 35.8MiB
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): retrieving result (try 0): started
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloaded val<.=8e35ad2b 35.4MiB>
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloaded list<val<.=3b3518a0 35.7MiB> 35.7MiB>
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloaded val<.=7e54c511 35.4MiB>
2021/07/08 16:42:35 scheduler task 94dedf3c (flow d1fb7eba): unloading (try 0): successful, next state: complete
2021/07/08 16:42:35  <-  n100.r02.s023.Main.out_file d1fb7eba ok     exec 5m5s 35.7MiB
2021/07/08 16:42:35 n100.r02.s023.Main.out_file d1fb7eba n100/r02/n100.r02.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:86f66ec45e699c306a009ac65b97c151ac10879d7ff85cba2835fcfacdfce98e
	sha256:d1fb7eba5cbcc92cabe16972acdc10a0abad9e4cbf3f40662a9ce3efb0fbe671
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/94dedf3caa9ce9a936dc8ddf484a126962a3fad8fe18544be56a6193020b18ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s023_output"
	    wget -O "n100.r02.s023_output/n100.r02.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s023_output/n100.r02.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s023_output/n100.r02.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s023_output/n100.r02.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s023_output/n100.r02.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s023_output/n100.r02.s023.reference.fas" "n100.r02.s023_output/n100.r02.s023.fq1.fastq" "n100.r02.s023_output/n100.r02.s023.fq2.fastq" | samtools view -bS - > "n100.r02.s023_output/n100.r02.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s023_output/n100.r02.s023.untrimmed.sorted.bam" "n100.r02.s023_output/n100.r02.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s023_output/n100.r02.s023.untrimmed.sorted.bam" -b "n100.r02.s023_output/n100.r02.s023.primers.bed" -p "n100.r02.s023_output/n100.r02.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" "n100.r02.s023_output/n100.r02.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s023_output/n100.r02.s023.reference.fas" "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" > "n100.r02.s023_output/n100.r02.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s023_output/n100.r02.s023.reference.fas" --call-indels "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" > "n100.r02.s023_output/n100.r02.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s023_output/n100.r02.s023.trimmed.sorted.bam" > "n100.r02.s023_output/n100.r02.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s023_output/n100.r02.s023.depth.txt" "n100.r02.s023_output/n100.r02.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s023_output/n100.r02.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s023_output/n100.r02.s023.reference.fas" | bcftools consensus -m "n100.r02.s023_output/n100.r02.s023.low_depth.tsv" tmp.vcf.gz > "n100.r02.s023_output/n100.r02.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3b3518a086b067eae5ad24c2971161e3f7a10e8ec57680b042a9a048afaf0ff3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 16:42:35 scheduler task 0d58a0aa (flow d67ef512): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s023.tar.gz resources {}
2021/07/08 16:42:35  ->  n100.r02.s023.Main.cp_out_file d67ef512 exec extern s3://niema-test/n100/r02/n100.r02.s023.tar.gz 35.7MiB
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:35 scheduler task 557dccf8 (flow dcf397bd): transferring output (try 0): started
2021/07/08 16:42:35 scheduler task f4dd0b4c (flow f623a7a7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5fecb0495089d32e86eef501afffcde93ca8aed29077baabc1864cd16d62d99d -> s3://niema-test/n100/r02/n100.r02.s060.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:35  <-  n100.r02.s060.Main.cp_out_file f623a7a7 ok   extern 0s 35.7MiB
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): unloading (try 0): started
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): unloading list<val<.=0d563880 35.8MiB> 35.8MiB>
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): unloading val<.=7f5dc07b 35.4MiB>
2021/07/08 16:42:35 scheduler task 7018ad68 (flow 0cad19f3): unloading val<.=f0b62894 35.4MiB>
2021/07/08 16:42:35 scheduler task 760b09cd (flow f4af4ff5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:021d05c5b1751ccf79bfafd2cec8a095d86d283d38f2f7b9662acbe061fc58ad -> s3://niema-test/n100/r02/n100.r02.s022.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:35  <-  n100.r02.s022.Main.cp_out_file f4af4ff5 ok   extern 0s 35.7MiB
2021/07/08 16:42:36 scheduler task 7018ad68 (flow 0cad19f3): unloaded list<val<.=0d563880 35.8MiB> 35.8MiB>
2021/07/08 16:42:36 scheduler task 7018ad68 (flow 0cad19f3): unloaded val<.=7f5dc07b 35.4MiB>
2021/07/08 16:42:36 scheduler task 7018ad68 (flow 0cad19f3): unloaded val<.=f0b62894 35.4MiB>
2021/07/08 16:42:36 scheduler task 7018ad68 (flow 0cad19f3): unloading (try 0): successful, next state: complete
2021/07/08 16:42:36  <-  n100.r02.s099.Main.out_file 0cad19f3 ok     exec 5m14s 35.8MiB
2021/07/08 16:42:36 n100.r02.s099.Main.out_file 0cad19f3 n100/r02/n100.r02.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fabb51ac1b6a7b7c522336fb96706e5cb5bb69332b13c826994dd7f024cff3d9
	sha256:0cad19f3bde85f0919aabec6ccaef703a8fd15c48aa50ab5f85641a817009b83
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7018ad6827db5f3b95b69f9880645353d8b2d7a4297903753e303a5e8dea9d22
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s099_output"
	    wget -O "n100.r02.s099_output/n100.r02.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s099_output/n100.r02.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s099_output/n100.r02.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s099_output/n100.r02.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s099_output/n100.r02.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s099_output/n100.r02.s099.reference.fas" "n100.r02.s099_output/n100.r02.s099.fq1.fastq" "n100.r02.s099_output/n100.r02.s099.fq2.fastq" | samtools view -bS - > "n100.r02.s099_output/n100.r02.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s099_output/n100.r02.s099.untrimmed.sorted.bam" "n100.r02.s099_output/n100.r02.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s099_output/n100.r02.s099.untrimmed.sorted.bam" -b "n100.r02.s099_output/n100.r02.s099.primers.bed" -p "n100.r02.s099_output/n100.r02.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" "n100.r02.s099_output/n100.r02.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s099_output/n100.r02.s099.reference.fas" "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" > "n100.r02.s099_output/n100.r02.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s099_output/n100.r02.s099.reference.fas" --call-indels "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" > "n100.r02.s099_output/n100.r02.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s099_output/n100.r02.s099.trimmed.sorted.bam" > "n100.r02.s099_output/n100.r02.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s099_output/n100.r02.s099.depth.txt" "n100.r02.s099_output/n100.r02.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s099_output/n100.r02.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s099_output/n100.r02.s099.reference.fas" | bcftools consensus -m "n100.r02.s099_output/n100.r02.s099.low_depth.tsv" tmp.vcf.gz > "n100.r02.s099_output/n100.r02.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0d563880b3b287565e1b55c07268ea9c81531b4d0006f11ac053fc07e61c63b7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.4MiB max=126.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:42:36 scheduler task 5fd76cf4 (flow b53660fb): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s099.tar.gz resources {}
2021/07/08 16:42:36  ->  n100.r02.s099.Main.cp_out_file b53660fb exec extern s3://niema-test/n100/r02/n100.r02.s099.tar.gz 35.8MiB
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): promoting objects (try 0): started
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): retrieving diagnostic output (try 0): started
2021/07/08 16:42:36 scheduler task 99584377 (flow 83ea77af): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8378b1e5e87d05e97cac6554a5f569cf803683ac21847505d9eef7b451709f93 -> s3://niema-test/n100/r02/n100.r02.s091.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:36  <-  n100.r02.s091.Main.cp_out_file 83ea77af ok   extern 0s 35.8MiB
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloading (try 0): started
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloading list<val<.=99be66a2 35.7MiB> 35.7MiB>
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloading val<.=ba1c4dce 35.4MiB>
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloading val<.=d0f87797 35.4MiB>
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): retrieving result (try 0): started
2021/07/08 16:42:36 scheduler task ce76f8a7 (flow 5dd4afa0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2f8148a9cd3843590f0bfc46ebf33882ecf5d2d0873974f5472a6ac7b16222da -> s3://niema-test/n100/r02/n100.r02.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:36  <-  n100.r02.s081.Main.cp_out_file 5dd4afa0 ok   extern 0s 35.7MiB
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloaded list<val<.=99be66a2 35.7MiB> 35.7MiB>
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloaded val<.=d0f87797 35.4MiB>
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloaded val<.=ba1c4dce 35.4MiB>
2021/07/08 16:42:36 scheduler task 557dccf8 (flow dcf397bd): unloading (try 0): successful, next state: complete
2021/07/08 16:42:36  <-  n100.r02.s027.Main.out_file dcf397bd ok     exec 5m5s 35.7MiB
2021/07/08 16:42:36 n100.r02.s027.Main.out_file dcf397bd n100/r02/n100.r02.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36fe8b8295e24ee551a3dac63c4fbe9ed8d0b47755ea534042ba2a77a8203a55
	sha256:dcf397bd8eca738181e60c78afabacf9461122120d7b0d95796851390ea9663b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/557dccf8eb3a352f0a97ebcda6996c98d8bae195762d1ee93ef73cfbd937ea98
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s027_output"
	    wget -O "n100.r02.s027_output/n100.r02.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s027_output/n100.r02.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s027_output/n100.r02.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s027_output/n100.r02.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s027_output/n100.r02.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s027_output/n100.r02.s027.reference.fas" "n100.r02.s027_output/n100.r02.s027.fq1.fastq" "n100.r02.s027_output/n100.r02.s027.fq2.fastq" | samtools view -bS - > "n100.r02.s027_output/n100.r02.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s027_output/n100.r02.s027.untrimmed.sorted.bam" "n100.r02.s027_output/n100.r02.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s027_output/n100.r02.s027.untrimmed.sorted.bam" -b "n100.r02.s027_output/n100.r02.s027.primers.bed" -p "n100.r02.s027_output/n100.r02.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" "n100.r02.s027_output/n100.r02.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s027_output/n100.r02.s027.reference.fas" "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" > "n100.r02.s027_output/n100.r02.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s027_output/n100.r02.s027.reference.fas" --call-indels "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" > "n100.r02.s027_output/n100.r02.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s027_output/n100.r02.s027.trimmed.sorted.bam" > "n100.r02.s027_output/n100.r02.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s027_output/n100.r02.s027.depth.txt" "n100.r02.s027_output/n100.r02.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s027_output/n100.r02.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s027_output/n100.r02.s027.reference.fas" | bcftools consensus -m "n100.r02.s027_output/n100.r02.s027.low_depth.tsv" tmp.vcf.gz > "n100.r02.s027_output/n100.r02.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:99be66a2a74b09e9db60fb5c8c3788e7e7c8814590d53193d38b7f0315c89e45 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:36 scheduler task eca64c60 (flow e2687eaa): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s027.tar.gz resources {}
2021/07/08 16:42:36  ->  n100.r02.s027.Main.cp_out_file e2687eaa exec extern s3://niema-test/n100/r02/n100.r02.s027.tar.gz 35.7MiB
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): transferring output (try 0): started
2021/07/08 16:42:36 scheduler task 36d7aa18 (flow 40d6221f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:008a512df7f3d3f0b7acb28847182a6f0f96e04d727adcea1c76955813d52762 -> s3://niema-test/n100/r02/n100.r02.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:36  <-  n100.r02.s025.Main.cp_out_file 40d6221f ok   extern 0s 35.7MiB
2021/07/08 16:42:36 scheduler task 44851b9f (flow 47ed53a8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:36 scheduler task 44851b9f (flow 47ed53a8): promoting objects (try 0): started
2021/07/08 16:42:36 scheduler task 63c31f62 (flow 5e69b604): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6f90aa9c76c49847ead0e8e132e5c7c307c5eafc20a6b01d704f380e66b55a65 -> s3://niema-test/n100/r02/n100.r02.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:36  <-  n100.r02.s038.Main.cp_out_file 5e69b604 ok   extern 0s 35.7MiB
2021/07/08 16:42:36 scheduler task 44851b9f (flow 47ed53a8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:36 scheduler task 44851b9f (flow 47ed53a8): retrieving diagnostic output (try 0): started
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloading (try 0): started
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloading list<val<.=2419d308 35.7MiB> 35.7MiB>
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloading val<.=30d95110 35.4MiB>
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloading val<.=d07ff5d5 35.4MiB>
2021/07/08 16:42:36 scheduler task 0d58a0aa (flow d67ef512): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3b3518a086b067eae5ad24c2971161e3f7a10e8ec57680b042a9a048afaf0ff3 -> s3://niema-test/n100/r02/n100.r02.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:36  <-  n100.r02.s023.Main.cp_out_file d67ef512 ok   extern 0s 35.7MiB
2021/07/08 16:42:36 scheduler task 44851b9f (flow 47ed53a8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:36 scheduler task 44851b9f (flow 47ed53a8): retrieving result (try 0): started
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloaded val<.=30d95110 35.4MiB>
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloaded val<.=d07ff5d5 35.4MiB>
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloaded list<val<.=2419d308 35.7MiB> 35.7MiB>
2021/07/08 16:42:36 scheduler task 5100a091 (flow 92c090c3): unloading (try 0): successful, next state: complete
2021/07/08 16:42:37  <-  n100.r02.s086.Main.out_file 92c090c3 ok     exec 5m6s 35.7MiB
2021/07/08 16:42:37 n100.r02.s086.Main.out_file 92c090c3 n100/r02/n100.r02.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9cd654504d3812bef806c7a00461d910d16f791f6c3c5553ddecebb02217ef37
	sha256:92c090c3d99e41e31860800e8d72a013d3e0dc206873d7a70c070a28fa869985
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5100a0913c65d815408db9a92e55ed4706fdc9fff405c06af616806b3813ac3d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s086_output"
	    wget -O "n100.r02.s086_output/n100.r02.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s086_output/n100.r02.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s086_output/n100.r02.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s086_output/n100.r02.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s086_output/n100.r02.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s086_output/n100.r02.s086.reference.fas" "n100.r02.s086_output/n100.r02.s086.fq1.fastq" "n100.r02.s086_output/n100.r02.s086.fq2.fastq" | samtools view -bS - > "n100.r02.s086_output/n100.r02.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s086_output/n100.r02.s086.untrimmed.sorted.bam" "n100.r02.s086_output/n100.r02.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s086_output/n100.r02.s086.untrimmed.sorted.bam" -b "n100.r02.s086_output/n100.r02.s086.primers.bed" -p "n100.r02.s086_output/n100.r02.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" "n100.r02.s086_output/n100.r02.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s086_output/n100.r02.s086.reference.fas" "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" > "n100.r02.s086_output/n100.r02.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s086_output/n100.r02.s086.reference.fas" --call-indels "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" > "n100.r02.s086_output/n100.r02.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s086_output/n100.r02.s086.trimmed.sorted.bam" > "n100.r02.s086_output/n100.r02.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s086_output/n100.r02.s086.depth.txt" "n100.r02.s086_output/n100.r02.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s086_output/n100.r02.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s086_output/n100.r02.s086.reference.fas" | bcftools consensus -m "n100.r02.s086_output/n100.r02.s086.low_depth.tsv" tmp.vcf.gz > "n100.r02.s086_output/n100.r02.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2419d308ccff29e60346adf174fd0080ef763b313b6b04df92d534174cf863e3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=129.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:42:37 scheduler task 618b9a38 (flow b76dc822): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s086.tar.gz resources {}
2021/07/08 16:42:37  ->  n100.r02.s086.Main.cp_out_file b76dc822 exec extern s3://niema-test/n100/r02/n100.r02.s086.tar.gz 35.7MiB
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): promoting objects (try 0): started
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): transferring output (try 0): started
2021/07/08 16:42:37 scheduler task ed1e9290 (flow 24a9ca8f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bc20c1751ffcd315387269362c60f8f9f98ffd3af5bb51b1331b96f181dbb6ad -> s3://niema-test/n100/r02/n100.r02.s012.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:37  <-  n100.r02.s012.Main.cp_out_file 24a9ca8f ok   extern 0s 35.8MiB
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): retrieving diagnostic output (try 0): started
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): promoting objects (try 0): started
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): retrieving result (try 0): started
2021/07/08 16:42:37 scheduler task 5fd76cf4 (flow b53660fb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0d563880b3b287565e1b55c07268ea9c81531b4d0006f11ac053fc07e61c63b7 -> s3://niema-test/n100/r02/n100.r02.s099.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:37  <-  n100.r02.s099.Main.cp_out_file b53660fb ok   extern 0s 35.8MiB
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): retrieving diagnostic output (try 0): started
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): transferring output (try 0): started
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): retrieving result (try 0): started
2021/07/08 16:42:37 scheduler task eca64c60 (flow e2687eaa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:99be66a2a74b09e9db60fb5c8c3788e7e7c8814590d53193d38b7f0315c89e45 -> s3://niema-test/n100/r02/n100.r02.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:37  <-  n100.r02.s027.Main.cp_out_file e2687eaa ok   extern 0s 35.7MiB
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:37 scheduler task bb81e9dc (flow ce74ed16): transferring output (try 0): started
2021/07/08 16:42:37 scheduler task 618b9a38 (flow b76dc822): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2419d308ccff29e60346adf174fd0080ef763b313b6b04df92d534174cf863e3 -> s3://niema-test/n100/r02/n100.r02.s086.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:37  <-  n100.r02.s086.Main.cp_out_file b76dc822 ok   extern 0s 35.7MiB
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloading (try 0): started
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloading list<val<.=9e9f7446 35.7MiB> 35.7MiB>
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloading val<.=bdc97374 35.4MiB>
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloading val<.=c2ed11bb 35.4MiB>
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloaded list<val<.=9e9f7446 35.7MiB> 35.7MiB>
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloaded val<.=bdc97374 35.4MiB>
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloaded val<.=c2ed11bb 35.4MiB>
2021/07/08 16:42:37 scheduler task 44851b9f (flow 47ed53a8): unloading (try 0): successful, next state: complete
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:37  <-  n100.r02.s050.Main.out_file 47ed53a8 ok     exec 5m6s 35.7MiB
2021/07/08 16:42:37 n100.r02.s050.Main.out_file 47ed53a8 n100/r02/n100.r02.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8fcec1bef5dc44ccff9d2d1ca4b320b5e4d7b3295c5d9d3f9a844f34d6efacdf
	sha256:47ed53a80f6d0b2127282b0de8e82900e87e8a09ea585d0d2bc6fe349608771c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/44851b9fb8a7bc0c5a9023b1d978891efbe0f675bde178c98d4fdb5f9aef3997
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s050_output"
	    wget -O "n100.r02.s050_output/n100.r02.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s050_output/n100.r02.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s050_output/n100.r02.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s050_output/n100.r02.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s050_output/n100.r02.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s050_output/n100.r02.s050.reference.fas" "n100.r02.s050_output/n100.r02.s050.fq1.fastq" "n100.r02.s050_output/n100.r02.s050.fq2.fastq" | samtools view -bS - > "n100.r02.s050_output/n100.r02.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s050_output/n100.r02.s050.untrimmed.sorted.bam" "n100.r02.s050_output/n100.r02.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s050_output/n100.r02.s050.untrimmed.sorted.bam" -b "n100.r02.s050_output/n100.r02.s050.primers.bed" -p "n100.r02.s050_output/n100.r02.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" "n100.r02.s050_output/n100.r02.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s050_output/n100.r02.s050.reference.fas" "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" > "n100.r02.s050_output/n100.r02.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s050_output/n100.r02.s050.reference.fas" --call-indels "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" > "n100.r02.s050_output/n100.r02.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s050_output/n100.r02.s050.trimmed.sorted.bam" > "n100.r02.s050_output/n100.r02.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s050_output/n100.r02.s050.depth.txt" "n100.r02.s050_output/n100.r02.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s050_output/n100.r02.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s050_output/n100.r02.s050.reference.fas" | bcftools consensus -m "n100.r02.s050_output/n100.r02.s050.low_depth.tsv" tmp.vcf.gz > "n100.r02.s050_output/n100.r02.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9e9f7446285cdb9d628eef42772094fab422b03e913d1c09dbf8f7d873ea487b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:42:37 scheduler task bf4d8dff (flow f44af3ec): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s050.tar.gz resources {}
2021/07/08 16:42:37  ->  n100.r02.s050.Main.cp_out_file f44af3ec exec extern s3://niema-test/n100/r02/n100.r02.s050.tar.gz 35.7MiB
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloading (try 0): started
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloading list<val<.=d96ffc42 35.7MiB> 35.7MiB>
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloading val<.=1b5d8cec 35.4MiB>
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloading val<.=813a889c 35.4MiB>
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloaded list<val<.=d96ffc42 35.7MiB> 35.7MiB>
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloaded val<.=1b5d8cec 35.4MiB>
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloaded val<.=813a889c 35.4MiB>
2021/07/08 16:42:37 scheduler task 227b4998 (flow 498981df): unloading (try 0): successful, next state: complete
2021/07/08 16:42:37  <-  n100.r02.s005.Main.out_file 498981df ok     exec 5m7s 35.7MiB
2021/07/08 16:42:37 n100.r02.s005.Main.out_file 498981df n100/r02/n100.r02.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ea18b9389b3b6dab5ac0c4517b6a9653a66245b4115c206bcc4f152c51a18664
	sha256:498981dfa35a5687cdbf97128bfebea3ca8ac200979008d641fb623955c73e2d
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/227b4998df712134b5c271f2251ed0ce7c6c9711ecb8a6b82ddaee56665c3f30
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s005_output"
	    wget -O "n100.r02.s005_output/n100.r02.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s005_output/n100.r02.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s005_output/n100.r02.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s005_output/n100.r02.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s005_output/n100.r02.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s005_output/n100.r02.s005.reference.fas" "n100.r02.s005_output/n100.r02.s005.fq1.fastq" "n100.r02.s005_output/n100.r02.s005.fq2.fastq" | samtools view -bS - > "n100.r02.s005_output/n100.r02.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s005_output/n100.r02.s005.untrimmed.sorted.bam" "n100.r02.s005_output/n100.r02.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s005_output/n100.r02.s005.untrimmed.sorted.bam" -b "n100.r02.s005_output/n100.r02.s005.primers.bed" -p "n100.r02.s005_output/n100.r02.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" "n100.r02.s005_output/n100.r02.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s005_output/n100.r02.s005.reference.fas" "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" > "n100.r02.s005_output/n100.r02.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s005_output/n100.r02.s005.reference.fas" --call-indels "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" > "n100.r02.s005_output/n100.r02.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s005_output/n100.r02.s005.trimmed.sorted.bam" > "n100.r02.s005_output/n100.r02.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s005_output/n100.r02.s005.depth.txt" "n100.r02.s005_output/n100.r02.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s005_output/n100.r02.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s005_output/n100.r02.s005.reference.fas" | bcftools consensus -m "n100.r02.s005_output/n100.r02.s005.low_depth.tsv" tmp.vcf.gz > "n100.r02.s005_output/n100.r02.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d96ffc42e9465503464dd13d8c939dd86950b874fc704a6611a0da8260acce7b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=129.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 16:42:37 scheduler task 3bc445b0 (flow d113df66): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s005.tar.gz resources {}
2021/07/08 16:42:37  ->  n100.r02.s005.Main.cp_out_file d113df66 exec extern s3://niema-test/n100/r02/n100.r02.s005.tar.gz 35.7MiB
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloading (try 0): started
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloading list<val<.=01b73b84 35.7MiB> 35.7MiB>
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloading val<.=5c076656 35.4MiB>
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloading val<.=08adb1e3 35.4MiB>
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloaded val<.=5c076656 35.4MiB>
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloaded val<.=08adb1e3 35.4MiB>
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloaded list<val<.=01b73b84 35.7MiB> 35.7MiB>
2021/07/08 16:42:38 scheduler task bb81e9dc (flow ce74ed16): unloading (try 0): successful, next state: complete
2021/07/08 16:42:38  <-  n100.r02.s035.Main.out_file ce74ed16 ok     exec 5m7s 35.7MiB
2021/07/08 16:42:38 n100.r02.s035.Main.out_file ce74ed16 n100/r02/n100.r02.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d419ed563d11889a6dcf966663223ed328ab1cc470cfb35b2045efa43ab575fe
	sha256:ce74ed16e3fd10e813482c0ebe4880352e2766b01673ee1b48586e5e71eb03a3
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb81e9dc2bec641afc18337e4a1d9c5adb37c436c0027fb0f9521cbfd86a3f1c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s035_output"
	    wget -O "n100.r02.s035_output/n100.r02.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s035_output/n100.r02.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s035_output/n100.r02.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s035_output/n100.r02.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s035_output/n100.r02.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s035_output/n100.r02.s035.reference.fas" "n100.r02.s035_output/n100.r02.s035.fq1.fastq" "n100.r02.s035_output/n100.r02.s035.fq2.fastq" | samtools view -bS - > "n100.r02.s035_output/n100.r02.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s035_output/n100.r02.s035.untrimmed.sorted.bam" "n100.r02.s035_output/n100.r02.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s035_output/n100.r02.s035.untrimmed.sorted.bam" -b "n100.r02.s035_output/n100.r02.s035.primers.bed" -p "n100.r02.s035_output/n100.r02.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" "n100.r02.s035_output/n100.r02.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s035_output/n100.r02.s035.reference.fas" "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" > "n100.r02.s035_output/n100.r02.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s035_output/n100.r02.s035.reference.fas" --call-indels "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" > "n100.r02.s035_output/n100.r02.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s035_output/n100.r02.s035.trimmed.sorted.bam" > "n100.r02.s035_output/n100.r02.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s035_output/n100.r02.s035.depth.txt" "n100.r02.s035_output/n100.r02.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s035_output/n100.r02.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s035_output/n100.r02.s035.reference.fas" | bcftools consensus -m "n100.r02.s035_output/n100.r02.s035.low_depth.tsv" tmp.vcf.gz > "n100.r02.s035_output/n100.r02.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:01b73b84a8b8f9ec7047fecda0a121a45d1ab309728ed94f98b0a0e02fe28ccb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=126.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 16:42:38 scheduler task a736fa6a (flow b560771d): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s035.tar.gz resources {}
2021/07/08 16:42:38  ->  n100.r02.s035.Main.cp_out_file b560771d exec extern s3://niema-test/n100/r02/n100.r02.s035.tar.gz 35.7MiB
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): promoting objects (try 0): started
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): retrieving diagnostic output (try 0): started
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): promoting objects (try 0): started
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): retrieving result (try 0): started
2021/07/08 16:42:38 scheduler task bf4d8dff (flow f44af3ec): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9e9f7446285cdb9d628eef42772094fab422b03e913d1c09dbf8f7d873ea487b -> s3://niema-test/n100/r02/n100.r02.s050.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:38  <-  n100.r02.s050.Main.cp_out_file f44af3ec ok   extern 0s 35.7MiB
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): promoting objects (try 0): started
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): promoting objects (try 0): started
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): retrieving diagnostic output (try 0): started
2021/07/08 16:42:38 scheduler task a8a30cc1 (flow 7b9af5ba): transferring output (try 0): started
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): retrieving diagnostic output (try 0): started
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): retrieving diagnostic output (try 0): started
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): retrieving result (try 0): started
2021/07/08 16:42:38 scheduler task 3bc445b0 (flow d113df66): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d96ffc42e9465503464dd13d8c939dd86950b874fc704a6611a0da8260acce7b -> s3://niema-test/n100/r02/n100.r02.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:38  <-  n100.r02.s005.Main.cp_out_file d113df66 ok   extern 0s 35.7MiB
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): retrieving result (try 0): started
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): retrieving result (try 0): started
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:38 scheduler task 6628d1b5 (flow 77fde731): transferring output (try 0): started
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:38 scheduler task ba37caf2 (flow 609775f9): transferring output (try 0): started
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:38 scheduler task 5a1a8dc5 (flow 7e2f5b09): transferring output (try 0): started
2021/07/08 16:42:39 scheduler task a736fa6a (flow b560771d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:01b73b84a8b8f9ec7047fecda0a121a45d1ab309728ed94f98b0a0e02fe28ccb -> s3://niema-test/n100/r02/n100.r02.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:39  <-  n100.r02.s035.Main.cp_out_file b560771d ok   extern 0s 35.7MiB
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloading (try 0): started
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloading list<val<.=afde7e4c 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloading val<.=9fc3df8a 35.4MiB>
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloading val<.=65ea43bf 35.4MiB>
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloaded val<.=9fc3df8a 35.4MiB>
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloaded val<.=65ea43bf 35.4MiB>
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloaded list<val<.=afde7e4c 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task a8a30cc1 (flow 7b9af5ba): unloading (try 0): successful, next state: complete
2021/07/08 16:42:39  <-  n100.r02.s015.Main.out_file 7b9af5ba ok     exec 5m8s 35.7MiB
2021/07/08 16:42:39 n100.r02.s015.Main.out_file 7b9af5ba n100/r02/n100.r02.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:26f086a4a7901e07ccfd774379c36c9534e617ff21c21700dffa68ed3ecd77c5
	sha256:7b9af5ba09d7adda2a797239d708b95158191989828db149ca0429eafe92c204
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a8a30cc1f921b53b57168ce9cf8173b00c82a7029099b7a22455050234e4fac3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s015_output"
	    wget -O "n100.r02.s015_output/n100.r02.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s015_output/n100.r02.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s015_output/n100.r02.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s015_output/n100.r02.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s015_output/n100.r02.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s015_output/n100.r02.s015.reference.fas" "n100.r02.s015_output/n100.r02.s015.fq1.fastq" "n100.r02.s015_output/n100.r02.s015.fq2.fastq" | samtools view -bS - > "n100.r02.s015_output/n100.r02.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s015_output/n100.r02.s015.untrimmed.sorted.bam" "n100.r02.s015_output/n100.r02.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s015_output/n100.r02.s015.untrimmed.sorted.bam" -b "n100.r02.s015_output/n100.r02.s015.primers.bed" -p "n100.r02.s015_output/n100.r02.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" "n100.r02.s015_output/n100.r02.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s015_output/n100.r02.s015.reference.fas" "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" > "n100.r02.s015_output/n100.r02.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s015_output/n100.r02.s015.reference.fas" --call-indels "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" > "n100.r02.s015_output/n100.r02.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s015_output/n100.r02.s015.trimmed.sorted.bam" > "n100.r02.s015_output/n100.r02.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s015_output/n100.r02.s015.depth.txt" "n100.r02.s015_output/n100.r02.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s015_output/n100.r02.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s015_output/n100.r02.s015.reference.fas" | bcftools consensus -m "n100.r02.s015_output/n100.r02.s015.low_depth.tsv" tmp.vcf.gz > "n100.r02.s015_output/n100.r02.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:afde7e4cd254f8651ea7411fad673fc4cb8ad9b4384f337498e05195594172a3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=697B max=3.1KiB
2021/07/08 16:42:39 scheduler task 7a1c3b06 (flow deba9732): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s015.tar.gz resources {}
2021/07/08 16:42:39  ->  n100.r02.s015.Main.cp_out_file deba9732 exec extern s3://niema-test/n100/r02/n100.r02.s015.tar.gz 35.7MiB
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloading (try 0): started
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloading list<val<.=e1ee73b3 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloading val<.=89a9296c 35.4MiB>
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloading val<.=f18090a8 35.4MiB>
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloading (try 0): started
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloading list<val<.=7e675d04 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloading val<.=38616b23 35.4MiB>
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloading val<.=a2509ea2 35.4MiB>
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloaded list<val<.=e1ee73b3 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloaded val<.=89a9296c 35.4MiB>
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloaded val<.=f18090a8 35.4MiB>
2021/07/08 16:42:39 scheduler task ba37caf2 (flow 609775f9): unloading (try 0): successful, next state: complete
2021/07/08 16:42:39  <-  n100.r02.s004.Main.out_file 609775f9 ok     exec 4m59s 35.7MiB
2021/07/08 16:42:39 n100.r02.s004.Main.out_file 609775f9 n100/r02/n100.r02.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2f680886c9adc28359006c8f24f71d41ee1778d1e65102cf02996fe195704af9
	sha256:609775f9811e9ade8a8ccb54a2cb3d46a9026807a6ebe9ab14b40ca46763f0df
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ba37caf278b3bb46bb0c0cb44842ff4fd63baa47a36b7aae5fcfa7e7aa29de19
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s004_output"
	    wget -O "n100.r02.s004_output/n100.r02.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s004_output/n100.r02.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s004_output/n100.r02.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s004_output/n100.r02.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s004_output/n100.r02.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s004_output/n100.r02.s004.reference.fas" "n100.r02.s004_output/n100.r02.s004.fq1.fastq" "n100.r02.s004_output/n100.r02.s004.fq2.fastq" | samtools view -bS - > "n100.r02.s004_output/n100.r02.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s004_output/n100.r02.s004.untrimmed.sorted.bam" "n100.r02.s004_output/n100.r02.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s004_output/n100.r02.s004.untrimmed.sorted.bam" -b "n100.r02.s004_output/n100.r02.s004.primers.bed" -p "n100.r02.s004_output/n100.r02.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" "n100.r02.s004_output/n100.r02.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s004_output/n100.r02.s004.reference.fas" "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" > "n100.r02.s004_output/n100.r02.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s004_output/n100.r02.s004.reference.fas" --call-indels "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" > "n100.r02.s004_output/n100.r02.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s004_output/n100.r02.s004.trimmed.sorted.bam" > "n100.r02.s004_output/n100.r02.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s004_output/n100.r02.s004.depth.txt" "n100.r02.s004_output/n100.r02.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s004_output/n100.r02.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s004_output/n100.r02.s004.reference.fas" | bcftools consensus -m "n100.r02.s004_output/n100.r02.s004.low_depth.tsv" tmp.vcf.gz > "n100.r02.s004_output/n100.r02.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e1ee73b3a53ec8c3d922c1e8007ccd8e3d548bc774fa740219881203cd243620 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=127.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:42:39 scheduler task 4324b321 (flow 0f190178): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s004.tar.gz resources {}
2021/07/08 16:42:39  ->  n100.r02.s004.Main.cp_out_file 0f190178 exec extern s3://niema-test/n100/r02/n100.r02.s004.tar.gz 35.7MiB
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloaded val<.=38616b23 35.4MiB>
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloaded val<.=a2509ea2 35.4MiB>
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloaded list<val<.=7e675d04 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task 6628d1b5 (flow 77fde731): unloading (try 0): successful, next state: complete
2021/07/08 16:42:39  <-  n100.r02.s045.Main.out_file 77fde731 ok     exec 4m59s 35.7MiB
2021/07/08 16:42:39 n100.r02.s045.Main.out_file 77fde731 n100/r02/n100.r02.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c33c9e193b16d22c0dc2166fde5cc7753b084ad43e6e6667073c4149e3254b8
	sha256:77fde731b920ae521bc9799051a88d5d41026e8f651606a69ab542f044e6fd7c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6628d1b58017e3b3dbe1171f5de0769c1cb1879477118ee1a59a7aafe66f11a8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s045_output"
	    wget -O "n100.r02.s045_output/n100.r02.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s045_output/n100.r02.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s045_output/n100.r02.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s045_output/n100.r02.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s045_output/n100.r02.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s045_output/n100.r02.s045.reference.fas" "n100.r02.s045_output/n100.r02.s045.fq1.fastq" "n100.r02.s045_output/n100.r02.s045.fq2.fastq" | samtools view -bS - > "n100.r02.s045_output/n100.r02.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s045_output/n100.r02.s045.untrimmed.sorted.bam" "n100.r02.s045_output/n100.r02.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s045_output/n100.r02.s045.untrimmed.sorted.bam" -b "n100.r02.s045_output/n100.r02.s045.primers.bed" -p "n100.r02.s045_output/n100.r02.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" "n100.r02.s045_output/n100.r02.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s045_output/n100.r02.s045.reference.fas" "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" > "n100.r02.s045_output/n100.r02.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s045_output/n100.r02.s045.reference.fas" --call-indels "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" > "n100.r02.s045_output/n100.r02.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s045_output/n100.r02.s045.trimmed.sorted.bam" > "n100.r02.s045_output/n100.r02.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s045_output/n100.r02.s045.depth.txt" "n100.r02.s045_output/n100.r02.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s045_output/n100.r02.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s045_output/n100.r02.s045.reference.fas" | bcftools consensus -m "n100.r02.s045_output/n100.r02.s045.low_depth.tsv" tmp.vcf.gz > "n100.r02.s045_output/n100.r02.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7e675d047905825560f342a0065736de721c7fd47060ad2df327bf6279c8439e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:42:39 scheduler task 83427eac (flow e317d2ce): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s045.tar.gz resources {}
2021/07/08 16:42:39  ->  n100.r02.s045.Main.cp_out_file e317d2ce exec extern s3://niema-test/n100/r02/n100.r02.s045.tar.gz 35.7MiB
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): promoting objects (try 0): started
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloading (try 0): started
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloading list<val<.=b1f3e9f0 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloading val<.=cddb0e4a 35.4MiB>
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloading val<.=008b2fee 35.4MiB>
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): retrieving diagnostic output (try 0): started
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloaded list<val<.=b1f3e9f0 35.7MiB> 35.7MiB>
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloaded val<.=cddb0e4a 35.4MiB>
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloaded val<.=008b2fee 35.4MiB>
2021/07/08 16:42:39 scheduler task 5a1a8dc5 (flow 7e2f5b09): unloading (try 0): successful, next state: complete
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:39  <-  n100.r02.s090.Main.out_file 7e2f5b09 ok     exec 5m8s 35.7MiB
2021/07/08 16:42:39 n100.r02.s090.Main.out_file 7e2f5b09 n100/r02/n100.r02.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4437f67d88928c539cecf890b9ee4a365b3663caf4f46b01b5b14a3b210991ff
	sha256:7e2f5b099e5bb2dd4bec700544b8843d1efa5615dc919ff5e29e5e7ab2b37c6c
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a1a8dc569d3105cc49139cce95c17a1d9cadc010b99d80aaa52c63e47c1e9c4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s090_output"
	    wget -O "n100.r02.s090_output/n100.r02.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s090_output/n100.r02.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s090_output/n100.r02.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s090_output/n100.r02.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s090_output/n100.r02.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s090_output/n100.r02.s090.reference.fas" "n100.r02.s090_output/n100.r02.s090.fq1.fastq" "n100.r02.s090_output/n100.r02.s090.fq2.fastq" | samtools view -bS - > "n100.r02.s090_output/n100.r02.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s090_output/n100.r02.s090.untrimmed.sorted.bam" "n100.r02.s090_output/n100.r02.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s090_output/n100.r02.s090.untrimmed.sorted.bam" -b "n100.r02.s090_output/n100.r02.s090.primers.bed" -p "n100.r02.s090_output/n100.r02.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" "n100.r02.s090_output/n100.r02.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s090_output/n100.r02.s090.reference.fas" "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" > "n100.r02.s090_output/n100.r02.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s090_output/n100.r02.s090.reference.fas" --call-indels "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" > "n100.r02.s090_output/n100.r02.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s090_output/n100.r02.s090.trimmed.sorted.bam" > "n100.r02.s090_output/n100.r02.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s090_output/n100.r02.s090.depth.txt" "n100.r02.s090_output/n100.r02.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s090_output/n100.r02.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s090_output/n100.r02.s090.reference.fas" | bcftools consensus -m "n100.r02.s090_output/n100.r02.s090.low_depth.tsv" tmp.vcf.gz > "n100.r02.s090_output/n100.r02.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b1f3e9f0ffb209c0d93b1e1855f5394256a35e11a37abda80e767d6c1bb172fa 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:42:39 scheduler task 8ab6c445 (flow 161ea884): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s090.tar.gz resources {}
2021/07/08 16:42:39  ->  n100.r02.s090.Main.cp_out_file 161ea884 exec extern s3://niema-test/n100/r02/n100.r02.s090.tar.gz 35.7MiB
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): retrieving result (try 0): started
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:39 scheduler task 7a1c3b06 (flow deba9732): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:afde7e4cd254f8651ea7411fad673fc4cb8ad9b4384f337498e05195594172a3 -> s3://niema-test/n100/r02/n100.r02.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:39  <-  n100.r02.s015.Main.cp_out_file deba9732 ok   extern 0s 35.7MiB
2021/07/08 16:42:39 scheduler task 8c10b81b (flow ef286eca): transferring output (try 0): started
2021/07/08 16:42:40 scheduler task 4324b321 (flow 0f190178): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e1ee73b3a53ec8c3d922c1e8007ccd8e3d548bc774fa740219881203cd243620 -> s3://niema-test/n100/r02/n100.r02.s004.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:40  <-  n100.r02.s004.Main.cp_out_file 0f190178 ok   extern 0s 35.7MiB
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloading (try 0): started
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloading list<val<.=d5d2be16 35.7MiB> 35.7MiB>
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloading val<.=05121949 35.4MiB>
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloading val<.=00fba486 35.4MiB>
2021/07/08 16:42:40 scheduler task 83427eac (flow e317d2ce): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7e675d047905825560f342a0065736de721c7fd47060ad2df327bf6279c8439e -> s3://niema-test/n100/r02/n100.r02.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:40  <-  n100.r02.s045.Main.cp_out_file e317d2ce ok   extern 0s 35.7MiB
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloaded val<.=00fba486 35.4MiB>
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloaded list<val<.=d5d2be16 35.7MiB> 35.7MiB>
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloaded val<.=05121949 35.4MiB>
2021/07/08 16:42:40 scheduler task 8c10b81b (flow ef286eca): unloading (try 0): successful, next state: complete
2021/07/08 16:42:40  <-  n100.r02.s063.Main.out_file ef286eca ok     exec 5m0s 35.7MiB
2021/07/08 16:42:40 n100.r02.s063.Main.out_file ef286eca n100/r02/n100.r02.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f453a8588f2f5e4d73390fa42bba252eebe15f5a1057fd937f20894bc1af27be
	sha256:ef286ecab2b1d95cc98a4c62c245e57ebd1659bcf994dd8d1e2a92bc4501dd20
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c10b81b1bc2b409b4a63e8a4fdf132c47f1db90491e53e0144188ba87e7e1a2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s063_output"
	    wget -O "n100.r02.s063_output/n100.r02.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s063_output/n100.r02.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s063_output/n100.r02.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s063_output/n100.r02.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s063_output/n100.r02.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s063_output/n100.r02.s063.reference.fas" "n100.r02.s063_output/n100.r02.s063.fq1.fastq" "n100.r02.s063_output/n100.r02.s063.fq2.fastq" | samtools view -bS - > "n100.r02.s063_output/n100.r02.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s063_output/n100.r02.s063.untrimmed.sorted.bam" "n100.r02.s063_output/n100.r02.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s063_output/n100.r02.s063.untrimmed.sorted.bam" -b "n100.r02.s063_output/n100.r02.s063.primers.bed" -p "n100.r02.s063_output/n100.r02.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" "n100.r02.s063_output/n100.r02.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s063_output/n100.r02.s063.reference.fas" "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" > "n100.r02.s063_output/n100.r02.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s063_output/n100.r02.s063.reference.fas" --call-indels "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" > "n100.r02.s063_output/n100.r02.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s063_output/n100.r02.s063.trimmed.sorted.bam" > "n100.r02.s063_output/n100.r02.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s063_output/n100.r02.s063.depth.txt" "n100.r02.s063_output/n100.r02.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s063_output/n100.r02.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s063_output/n100.r02.s063.reference.fas" | bcftools consensus -m "n100.r02.s063_output/n100.r02.s063.low_depth.tsv" tmp.vcf.gz > "n100.r02.s063_output/n100.r02.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d5d2be1662b88610bc48c91aa59b01501fe98d47ca5bf5d3281834fd67bfe7e0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=129.7MiB
	    disk mean=9.4MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:42:40 scheduler task 9afb15da (flow 0c221d3e): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s063.tar.gz resources {}
2021/07/08 16:42:40  ->  n100.r02.s063.Main.cp_out_file 0c221d3e exec extern s3://niema-test/n100/r02/n100.r02.s063.tar.gz 35.7MiB
2021/07/08 16:42:40 scheduler task 8ab6c445 (flow 161ea884): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b1f3e9f0ffb209c0d93b1e1855f5394256a35e11a37abda80e767d6c1bb172fa -> s3://niema-test/n100/r02/n100.r02.s090.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:40  <-  n100.r02.s090.Main.cp_out_file 161ea884 ok   extern 0s 35.7MiB
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): promoting objects (try 0): started
2021/07/08 16:42:41 scheduler task 9afb15da (flow 0c221d3e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d5d2be1662b88610bc48c91aa59b01501fe98d47ca5bf5d3281834fd67bfe7e0 -> s3://niema-test/n100/r02/n100.r02.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:41  <-  n100.r02.s063.Main.cp_out_file 0c221d3e ok   extern 0s 35.7MiB
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): retrieving diagnostic output (try 0): started
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): retrieving result (try 0): started
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): promoting objects (try 0): started
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): transferring output (try 0): started
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): retrieving diagnostic output (try 0): started
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): retrieving result (try 0): started
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): promoting objects (try 0): started
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:41 scheduler task 47667179 (flow cca7236b): transferring output (try 0): started
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): retrieving diagnostic output (try 0): started
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): retrieving result (try 0): started
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:42:41 scheduler task 507f546b (flow 338fe8dc): transferring output (try 0): started
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): unloading (try 0): started
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): unloading list<val<.=a5f09d72 35.7MiB> 35.7MiB>
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): unloading val<.=66512a75 35.4MiB>
2021/07/08 16:42:41 scheduler task 0e177187 (flow ce3a6617): unloading val<.=d99d164a 35.4MiB>
2021/07/08 16:42:42 scheduler task 0e177187 (flow ce3a6617): unloaded val<.=d99d164a 35.4MiB>
2021/07/08 16:42:42 scheduler task 0e177187 (flow ce3a6617): unloaded list<val<.=a5f09d72 35.7MiB> 35.7MiB>
2021/07/08 16:42:42 scheduler task 0e177187 (flow ce3a6617): unloaded val<.=66512a75 35.4MiB>
2021/07/08 16:42:42 scheduler task 0e177187 (flow ce3a6617): unloading (try 0): successful, next state: complete
2021/07/08 16:42:42  <-  n100.r02.s055.Main.out_file ce3a6617 ok     exec 5m2s 35.7MiB
2021/07/08 16:42:42 n100.r02.s055.Main.out_file ce3a6617 n100/r02/n100.r02.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5e6266174aa10041b52b1f5bd238cf12fbf2d0737ff71e604b7b80b32ca65cc1
	sha256:ce3a6617368e1c405f51d9435d3f24cf8f8c1adf44a7c512e525ac6976c65cfe
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e1771870eee6978577f365fd3f6f2b315b04a6b54534638cc72e7816e2f0458
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s055_output"
	    wget -O "n100.r02.s055_output/n100.r02.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s055_output/n100.r02.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s055_output/n100.r02.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s055_output/n100.r02.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s055_output/n100.r02.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s055_output/n100.r02.s055.reference.fas" "n100.r02.s055_output/n100.r02.s055.fq1.fastq" "n100.r02.s055_output/n100.r02.s055.fq2.fastq" | samtools view -bS - > "n100.r02.s055_output/n100.r02.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s055_output/n100.r02.s055.untrimmed.sorted.bam" "n100.r02.s055_output/n100.r02.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s055_output/n100.r02.s055.untrimmed.sorted.bam" -b "n100.r02.s055_output/n100.r02.s055.primers.bed" -p "n100.r02.s055_output/n100.r02.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" "n100.r02.s055_output/n100.r02.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s055_output/n100.r02.s055.reference.fas" "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" > "n100.r02.s055_output/n100.r02.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s055_output/n100.r02.s055.reference.fas" --call-indels "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" > "n100.r02.s055_output/n100.r02.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s055_output/n100.r02.s055.trimmed.sorted.bam" > "n100.r02.s055_output/n100.r02.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s055_output/n100.r02.s055.depth.txt" "n100.r02.s055_output/n100.r02.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s055_output/n100.r02.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s055_output/n100.r02.s055.reference.fas" | bcftools consensus -m "n100.r02.s055_output/n100.r02.s055.low_depth.tsv" tmp.vcf.gz > "n100.r02.s055_output/n100.r02.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a5f09d72ad43a5e0557c8bf869e9d9584d3facfaaa855b777694c94954084562 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=131.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 16:42:42 scheduler task 5454bead (flow b22100dc): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s055.tar.gz resources {}
2021/07/08 16:42:42  ->  n100.r02.s055.Main.cp_out_file b22100dc exec extern s3://niema-test/n100/r02/n100.r02.s055.tar.gz 35.7MiB
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloading (try 0): started
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloading list<val<.=611d8bcf 35.7MiB> 35.7MiB>
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloading val<.=9ff63b1b 35.4MiB>
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloading val<.=3fab4053 35.4MiB>
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloaded val<.=9ff63b1b 35.4MiB>
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloaded val<.=3fab4053 35.4MiB>
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloaded list<val<.=611d8bcf 35.7MiB> 35.7MiB>
2021/07/08 16:42:42 scheduler task 47667179 (flow cca7236b): unloading (try 0): successful, next state: complete
2021/07/08 16:42:42  <-  n100.r02.s068.Main.out_file cca7236b ok     exec 5m2s 35.7MiB
2021/07/08 16:42:42 n100.r02.s068.Main.out_file cca7236b n100/r02/n100.r02.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:473e562ff1af9143c1b11028301f21f23a1f0a5106c460bb75cbf458fce971b8
	sha256:cca7236beaff86991fb5e0a82bf8f9f7b26fa8c91542591a1f02bba82d9e4a2b
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/47667179d4911e231fb4bca2726c6ca5f9680ef43998101c33ff1459e4b6062d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s068_output"
	    wget -O "n100.r02.s068_output/n100.r02.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s068_output/n100.r02.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s068_output/n100.r02.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s068_output/n100.r02.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s068_output/n100.r02.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s068_output/n100.r02.s068.reference.fas" "n100.r02.s068_output/n100.r02.s068.fq1.fastq" "n100.r02.s068_output/n100.r02.s068.fq2.fastq" | samtools view -bS - > "n100.r02.s068_output/n100.r02.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s068_output/n100.r02.s068.untrimmed.sorted.bam" "n100.r02.s068_output/n100.r02.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s068_output/n100.r02.s068.untrimmed.sorted.bam" -b "n100.r02.s068_output/n100.r02.s068.primers.bed" -p "n100.r02.s068_output/n100.r02.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" "n100.r02.s068_output/n100.r02.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s068_output/n100.r02.s068.reference.fas" "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" > "n100.r02.s068_output/n100.r02.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s068_output/n100.r02.s068.reference.fas" --call-indels "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" > "n100.r02.s068_output/n100.r02.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s068_output/n100.r02.s068.trimmed.sorted.bam" > "n100.r02.s068_output/n100.r02.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s068_output/n100.r02.s068.depth.txt" "n100.r02.s068_output/n100.r02.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s068_output/n100.r02.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s068_output/n100.r02.s068.reference.fas" | bcftools consensus -m "n100.r02.s068_output/n100.r02.s068.low_depth.tsv" tmp.vcf.gz > "n100.r02.s068_output/n100.r02.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:611d8bcff2c312c0d1bc6546d0761145c768483cab4a84ecb95173a55d6b1bff 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.2MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 16:42:42 scheduler task be56902f (flow 444384ca): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s068.tar.gz resources {}
2021/07/08 16:42:42  ->  n100.r02.s068.Main.cp_out_file 444384ca exec extern s3://niema-test/n100/r02/n100.r02.s068.tar.gz 35.7MiB
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): transferring output (try 0): successful, next state: unloading
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloading (try 0): started
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloading list<val<.=8dbf9b32 35.8MiB> 35.8MiB>
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloading val<.=90b7ab6d 35.4MiB>
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloading val<.=0a142edb 35.4MiB>
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloaded val<.=90b7ab6d 35.4MiB>
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloaded list<val<.=8dbf9b32 35.8MiB> 35.8MiB>
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloaded val<.=0a142edb 35.4MiB>
2021/07/08 16:42:42 scheduler task 507f546b (flow 338fe8dc): unloading (try 0): successful, next state: complete
2021/07/08 16:42:42  <-  n100.r02.s062.Main.out_file 338fe8dc ok     exec 5m2s 35.8MiB
2021/07/08 16:42:42 n100.r02.s062.Main.out_file 338fe8dc n100/r02/n100.r02.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:287758af3b1813523a7837ca24d80089f22ed08fba6a4ff706e05021ccb2c991
	sha256:338fe8dc0b62463629f4028e43ae14b808623c086ad643afea97585a6493d800
	ec2-13-58-3-55.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/507f546b160ee8f0d440405b7bcee88fe67094bd6ee8ea7c807072174e610670
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r02.s062_output"
	    wget -O "n100.r02.s062_output/n100.r02.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r02.s062_output/n100.r02.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r02.s062_output/n100.r02.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r02.s062_output/n100.r02.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r02.s062_output/n100.r02.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r02.s062_output/n100.r02.s062.reference.fas" "n100.r02.s062_output/n100.r02.s062.fq1.fastq" "n100.r02.s062_output/n100.r02.s062.fq2.fastq" | samtools view -bS - > "n100.r02.s062_output/n100.r02.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s062_output/n100.r02.s062.untrimmed.sorted.bam" "n100.r02.s062_output/n100.r02.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r02.s062_output/n100.r02.s062.untrimmed.sorted.bam" -b "n100.r02.s062_output/n100.r02.s062.primers.bed" -p "n100.r02.s062_output/n100.r02.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" "n100.r02.s062_output/n100.r02.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r02.s062_output/n100.r02.s062.reference.fas" "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" > "n100.r02.s062_output/n100.r02.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r02.s062_output/n100.r02.s062.reference.fas" --call-indels "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" > "n100.r02.s062_output/n100.r02.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r02.s062_output/n100.r02.s062.trimmed.sorted.bam" > "n100.r02.s062_output/n100.r02.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r02.s062_output/n100.r02.s062.depth.txt" "n100.r02.s062_output/n100.r02.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r02.s062_output/n100.r02.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r02.s062_output/n100.r02.s062.reference.fas" | bcftools consensus -m "n100.r02.s062_output/n100.r02.s062.low_depth.tsv" tmp.vcf.gz > "n100.r02.s062_output/n100.r02.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r02.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8dbf9b32e508c137b6372bef92027952859260c6ec8b88364635193adce1f576 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=128.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:42:42 scheduler task 28b4e3bc (flow 8d9b756a): submitted with execconfig extern url s3://niema-test/n100/r02/n100.r02.s062.tar.gz resources {}
2021/07/08 16:42:42  ->  n100.r02.s062.Main.cp_out_file 8d9b756a exec extern s3://niema-test/n100/r02/n100.r02.s062.tar.gz 35.8MiB
2021/07/08 16:42:42 scheduler task 5454bead (flow b22100dc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a5f09d72ad43a5e0557c8bf869e9d9584d3facfaaa855b777694c94954084562 -> s3://niema-test/n100/r02/n100.r02.s055.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:42  <-  n100.r02.s055.Main.cp_out_file b22100dc ok   extern 0s 35.7MiB
2021/07/08 16:42:43 scheduler task be56902f (flow 444384ca): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:611d8bcff2c312c0d1bc6546d0761145c768483cab4a84ecb95173a55d6b1bff -> s3://niema-test/n100/r02/n100.r02.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:42:43  <-  n100.r02.s068.Main.cp_out_file 444384ca ok   extern 0s 35.7MiB
2021/07/08 16:42:43 scheduler task 28b4e3bc (flow 8d9b756a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8dbf9b32e508c137b6372bef92027952859260c6ec8b88364635193adce1f576 -> s3://niema-test/n100/r02/n100.r02.s062.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:42:43  <-  n100.r02.s062.Main.cp_out_file 8d9b756a ok   extern 0s 35.8MiB
2021/07/08 16:42:43 total n=400 time=6m52s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r02.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s001.Main.fq1         1   0      0B                                                      
	n100.r02.s001.Main.fq2         1   0      0B                                                      
	n100.r02.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s002.Main.fq1         1   0      0B                                                      
	n100.r02.s002.Main.fq2         1   0      0B                                                      
	n100.r02.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s003.Main.fq1         1   0      0B                                                      
	n100.r02.s003.Main.fq2         1   0      0B                                                      
	n100.r02.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s004.Main.fq1         1   0      0B                                                      
	n100.r02.s004.Main.fq2         1   0      0B                                                      
	n100.r02.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s005.Main.fq1         1   0      0B                                                      
	n100.r02.s005.Main.fq2         1   0      0B                                                      
	n100.r02.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s006.Main.fq1         1   0      0B                                                      
	n100.r02.s006.Main.fq2         1   0      0B                                                      
	n100.r02.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s007.Main.fq1         1   0      0B                                                      
	n100.r02.s007.Main.fq2         1   0      0B                                                      
	n100.r02.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s008.Main.fq1         1   0      0B                                                      
	n100.r02.s008.Main.fq2         1   0      0B                                                      
	n100.r02.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s009.Main.fq1         1   0      0B                                                      
	n100.r02.s009.Main.fq2         1   0      0B                                                      
	n100.r02.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s010.Main.fq1         1   0      0B                                                      
	n100.r02.s010.Main.fq2         1   0      0B                                                      
	n100.r02.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s011.Main.fq1         1   0      0B                                                      
	n100.r02.s011.Main.fq2         1   0      0B                                                      
	n100.r02.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s012.Main.fq1         1   0      0B                                                      
	n100.r02.s012.Main.fq2         1   0      0B                                                      
	n100.r02.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s013.Main.fq1         1   0      0B                                                      
	n100.r02.s013.Main.fq2         1   0      0B                                                      
	n100.r02.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s014.Main.fq1         1   0      0B                                                      
	n100.r02.s014.Main.fq2         1   0      0B                                                      
	n100.r02.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s015.Main.fq1         1   0      0B                                                      
	n100.r02.s015.Main.fq2         1   0      0B                                                      
	n100.r02.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s016.Main.fq1         1   0      0B                                                      
	n100.r02.s016.Main.fq2         1   0      0B                                                      
	n100.r02.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s017.Main.fq1         1   0      0B                                                      
	n100.r02.s017.Main.fq2         1   0      0B                                                      
	n100.r02.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s018.Main.fq1         1   0      0B                                                      
	n100.r02.s018.Main.fq2         1   0      0B                                                      
	n100.r02.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s019.Main.fq1         1   0      0B                                                      
	n100.r02.s019.Main.fq2         1   0      0B                                                      
	n100.r02.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s020.Main.fq1         1   0      0B                                                      
	n100.r02.s020.Main.fq2         1   0      0B                                                      
	n100.r02.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s021.Main.fq1         1   0      0B                                                      
	n100.r02.s021.Main.fq2         1   0      0B                                                      
	n100.r02.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s022.Main.fq1         1   0      0B                                                      
	n100.r02.s022.Main.fq2         1   0      0B                                                      
	n100.r02.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s023.Main.fq1         1   0      0B                                                      
	n100.r02.s023.Main.fq2         1   0      0B                                                      
	n100.r02.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s024.Main.fq1         1   0      0B                                                      
	n100.r02.s024.Main.fq2         1   0      0B                                                      
	n100.r02.s024.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s025.Main.fq1         1   0      0B                                                      
	n100.r02.s025.Main.fq2         1   0      0B                                                      
	n100.r02.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s026.Main.fq1         1   0      0B                                                      
	n100.r02.s026.Main.fq2         1   0      0B                                                      
	n100.r02.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s027.Main.fq1         1   0      0B                                                      
	n100.r02.s027.Main.fq2         1   0      0B                                                      
	n100.r02.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s028.Main.fq1         1   0      0B                                                      
	n100.r02.s028.Main.fq2         1   0      0B                                                      
	n100.r02.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s029.Main.fq1         1   0      0B                                                      
	n100.r02.s029.Main.fq2         1   0      0B                                                      
	n100.r02.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s030.Main.fq1         1   0      0B                                                      
	n100.r02.s030.Main.fq2         1   0      0B                                                      
	n100.r02.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s031.Main.fq1         1   0      0B                                                      
	n100.r02.s031.Main.fq2         1   0      0B                                                      
	n100.r02.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s032.Main.fq1         1   0      0B                                                      
	n100.r02.s032.Main.fq2         1   0      0B                                                      
	n100.r02.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s033.Main.fq1         1   0      0B                                                      
	n100.r02.s033.Main.fq2         1   0      0B                                                      
	n100.r02.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s034.Main.fq1         1   0      0B                                                      
	n100.r02.s034.Main.fq2         1   0      0B                                                      
	n100.r02.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s035.Main.fq1         1   0      0B                                                      
	n100.r02.s035.Main.fq2         1   0      0B                                                      
	n100.r02.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s036.Main.fq1         1   0      0B                                                      
	n100.r02.s036.Main.fq2         1   0      0B                                                      
	n100.r02.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s037.Main.fq1         1   0      0B                                                      
	n100.r02.s037.Main.fq2         1   0      0B                                                      
	n100.r02.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s038.Main.fq1         1   0      0B                                                      
	n100.r02.s038.Main.fq2         1   0      0B                                                      
	n100.r02.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s039.Main.fq1         1   0      0B                                                      
	n100.r02.s039.Main.fq2         1   0      0B                                                      
	n100.r02.s039.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s040.Main.fq1         1   0      0B                                                      
	n100.r02.s040.Main.fq2         1   0      0B                                                      
	n100.r02.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s041.Main.fq1         1   0      0B                                                      
	n100.r02.s041.Main.fq2         1   0      0B                                                      
	n100.r02.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s042.Main.fq1         1   0      0B                                                      
	n100.r02.s042.Main.fq2         1   0      0B                                                      
	n100.r02.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s043.Main.fq1         1   0      0B                                                      
	n100.r02.s043.Main.fq2         1   0      0B                                                      
	n100.r02.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s044.Main.fq1         1   0      0B                                                      
	n100.r02.s044.Main.fq2         1   0      0B                                                      
	n100.r02.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s045.Main.fq1         1   0      0B                                                      
	n100.r02.s045.Main.fq2         1   0      0B                                                      
	n100.r02.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s046.Main.fq1         1   0      0B                                                      
	n100.r02.s046.Main.fq2         1   0      0B                                                      
	n100.r02.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s047.Main.fq1         1   0      0B                                                      
	n100.r02.s047.Main.fq2         1   0      0B                                                      
	n100.r02.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s048.Main.fq1         1   0      0B                                                      
	n100.r02.s048.Main.fq2         1   0      0B                                                      
	n100.r02.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s049.Main.fq1         1   0      0B                                                      
	n100.r02.s049.Main.fq2         1   0      0B                                                      
	n100.r02.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s050.Main.fq1         1   0      0B                                                      
	n100.r02.s050.Main.fq2         1   0      0B                                                      
	n100.r02.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s051.Main.fq1         1   0      0B                                                      
	n100.r02.s051.Main.fq2         1   0      0B                                                      
	n100.r02.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s052.Main.fq1         1   0      0B                                                      
	n100.r02.s052.Main.fq2         1   0      0B                                                      
	n100.r02.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s053.Main.fq1         1   0      0B                                                      
	n100.r02.s053.Main.fq2         1   0      0B                                                      
	n100.r02.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s054.Main.fq1         1   0      0B                                                      
	n100.r02.s054.Main.fq2         1   0      0B                                                      
	n100.r02.s054.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s055.Main.fq1         1   0      0B                                                      
	n100.r02.s055.Main.fq2         1   0      0B                                                      
	n100.r02.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s056.Main.fq1         1   0      0B                                                      
	n100.r02.s056.Main.fq2         1   0      0B                                                      
	n100.r02.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s057.Main.fq1         1   0      0B                                                      
	n100.r02.s057.Main.fq2         1   0      0B                                                      
	n100.r02.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s058.Main.fq1         1   0      0B                                                      
	n100.r02.s058.Main.fq2         1   0      0B                                                      
	n100.r02.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s059.Main.fq1         1   0      0B                                                      
	n100.r02.s059.Main.fq2         1   0      0B                                                      
	n100.r02.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s060.Main.fq1         1   0      0B                                                      
	n100.r02.s060.Main.fq2         1   0      0B                                                      
	n100.r02.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s061.Main.fq1         1   0      0B                                                      
	n100.r02.s061.Main.fq2         1   0      0B                                                      
	n100.r02.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s062.Main.fq1         1   0      0B                                                      
	n100.r02.s062.Main.fq2         1   0      0B                                                      
	n100.r02.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s063.Main.fq1         1   0      0B                                                      
	n100.r02.s063.Main.fq2         1   0      0B                                                      
	n100.r02.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s064.Main.fq1         1   0      0B                                                      
	n100.r02.s064.Main.fq2         1   0      0B                                                      
	n100.r02.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s065.Main.fq1         1   0      0B                                                      
	n100.r02.s065.Main.fq2         1   0      0B                                                      
	n100.r02.s065.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s066.Main.fq1         1   0      0B                                                      
	n100.r02.s066.Main.fq2         1   0      0B                                                      
	n100.r02.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s067.Main.fq1         1   0      0B                                                      
	n100.r02.s067.Main.fq2         1   0      0B                                                      
	n100.r02.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s068.Main.fq1         1   0      0B                                                      
	n100.r02.s068.Main.fq2         1   0      0B                                                      
	n100.r02.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s069.Main.fq1         1   0      0B                                                      
	n100.r02.s069.Main.fq2         1   0      0B                                                      
	n100.r02.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s070.Main.fq1         1   0      0B                                                      
	n100.r02.s070.Main.fq2         1   0      0B                                                      
	n100.r02.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s071.Main.fq1         1   0      0B                                                      
	n100.r02.s071.Main.fq2         1   0      0B                                                      
	n100.r02.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s072.Main.fq1         1   0      0B                                                      
	n100.r02.s072.Main.fq2         1   0      0B                                                      
	n100.r02.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s073.Main.fq1         1   0      0B                                                      
	n100.r02.s073.Main.fq2         1   0      0B                                                      
	n100.r02.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s074.Main.fq1         1   0      0B                                                      
	n100.r02.s074.Main.fq2         1   0      0B                                                      
	n100.r02.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s075.Main.fq1         1   0      0B                                                      
	n100.r02.s075.Main.fq2         1   0      0B                                                      
	n100.r02.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s076.Main.fq1         1   0      0B                                                      
	n100.r02.s076.Main.fq2         1   0      0B                                                      
	n100.r02.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s077.Main.fq1         1   0      0B                                                      
	n100.r02.s077.Main.fq2         1   0      0B                                                      
	n100.r02.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s078.Main.fq1         1   0      0B                                                      
	n100.r02.s078.Main.fq2         1   0      0B                                                      
	n100.r02.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s079.Main.fq1         1   0      0B                                                      
	n100.r02.s079.Main.fq2         1   0      0B                                                      
	n100.r02.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s080.Main.fq1         1   0      0B                                                      
	n100.r02.s080.Main.fq2         1   0      0B                                                      
	n100.r02.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s081.Main.fq1         1   0      0B                                                      
	n100.r02.s081.Main.fq2         1   0      0B                                                      
	n100.r02.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s082.Main.fq1         1   0      0B                                                      
	n100.r02.s082.Main.fq2         1   0      0B                                                      
	n100.r02.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s083.Main.fq1         1   0      0B                                                      
	n100.r02.s083.Main.fq2         1   0      0B                                                      
	n100.r02.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s084.Main.fq1         1   0      0B                                                      
	n100.r02.s084.Main.fq2         1   0      0B                                                      
	n100.r02.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s085.Main.fq1         1   0      0B                                                      
	n100.r02.s085.Main.fq2         1   0      0B                                                      
	n100.r02.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s086.Main.fq1         1   0      0B                                                      
	n100.r02.s086.Main.fq2         1   0      0B                                                      
	n100.r02.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s087.Main.fq1         1   0      0B                                                      
	n100.r02.s087.Main.fq2         1   0      0B                                                      
	n100.r02.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s088.Main.fq1         1   0      0B                                                      
	n100.r02.s088.Main.fq2         1   0      0B                                                      
	n100.r02.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s089.Main.fq1         1   0      0B                                                      
	n100.r02.s089.Main.fq2         1   0      0B                                                      
	n100.r02.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s090.Main.fq1         1   0      0B                                                      
	n100.r02.s090.Main.fq2         1   0      0B                                                      
	n100.r02.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s091.Main.fq1         1   0      0B                                                      
	n100.r02.s091.Main.fq2         1   0      0B                                                      
	n100.r02.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s092.Main.fq1         1   0      0B                                                      
	n100.r02.s092.Main.fq2         1   0      0B                                                      
	n100.r02.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s093.Main.fq1         1   0      0B                                                      
	n100.r02.s093.Main.fq2         1   0      0B                                                      
	n100.r02.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s094.Main.fq1         1   0      0B                                                      
	n100.r02.s094.Main.fq2         1   0      0B                                                      
	n100.r02.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s095.Main.fq1         1   0      0B                                                      
	n100.r02.s095.Main.fq2         1   0      0B                                                      
	n100.r02.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s096.Main.fq1         1   0      0B                                                      
	n100.r02.s096.Main.fq2         1   0      0B                                                      
	n100.r02.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s097.Main.fq1         1   0      0B                                                      
	n100.r02.s097.Main.fq2         1   0      0B                                                      
	n100.r02.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s098.Main.fq1         1   0      0B                                                      
	n100.r02.s098.Main.fq2         1   0      0B                                                      
	n100.r02.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s099.Main.fq1         1   0      0B                                                      
	n100.r02.s099.Main.fq2         1   0      0B                                                      
	n100.r02.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r02.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r02.s100.Main.fq1         1   0      0B                                                      
	n100.r02.s100.Main.fq2         1   0      0B                                                      
	n100.r02.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r02.s001.Main.out_file, n100.r02.s002.Main.out_file, n100.r02.s003.Main.out_file, n100.r02.s004.Main.out_file, n100.r02.s005.Main.out_file, n100.r02.s006.Main.out_file, n100.r02.s007.Main.out_file, n100.r02.s008.Main.out_file, n100.r02.s009.Main.out_file, n100.r02.s010.Main.out_file, n100.r02.s011.Main.out_file, n100.r02.s012.Main.out_file, n100.r02.s013.Main.out_file, n100.r02.s014.Main.out_file, n100.r02.s015.Main.out_file, n100.r02.s016.Main.out_file, n100.r02.s017.Main.out_file, n100.r02.s018.Main.out_file, n100.r02.s019.Main.out_file, n100.r02.s020.Main.out_file, n100.r02.s021.Main.out_file, n100.r02.s022.Main.out_file, n100.r02.s023.Main.out_file, n100.r02.s024.Main.out_file, n100.r02.s025.Main.out_file, n100.r02.s026.Main.out_file, n100.r02.s027.Main.out_file, n100.r02.s028.Main.out_file, n100.r02.s029.Main.out_file, n100.r02.s030.Main.out_file, n100.r02.s031.Main.out_file, n100.r02.s032.Main.out_file, n100.r02.s033.Main.out_file, n100.r02.s034.Main.out_file, n100.r02.s035.Main.out_file, n100.r02.s036.Main.out_file, n100.r02.s037.Main.out_file, n100.r02.s038.Main.out_file, n100.r02.s039.Main.out_file, n100.r02.s040.Main.out_file, n100.r02.s041.Main.out_file, n100.r02.s042.Main.out_file, n100.r02.s043.Main.out_file, n100.r02.s044.Main.out_file, n100.r02.s045.Main.out_file, n100.r02.s046.Main.out_file, n100.r02.s047.Main.out_file, n100.r02.s048.Main.out_file, n100.r02.s049.Main.out_file, n100.r02.s050.Main.out_file, n100.r02.s051.Main.out_file, n100.r02.s052.Main.out_file, n100.r02.s053.Main.out_file, n100.r02.s054.Main.out_file, n100.r02.s055.Main.out_file, n100.r02.s056.Main.out_file, n100.r02.s057.Main.out_file, n100.r02.s058.Main.out_file, n100.r02.s059.Main.out_file, n100.r02.s060.Main.out_file, n100.r02.s061.Main.out_file, n100.r02.s062.Main.out_file, n100.r02.s063.Main.out_file, n100.r02.s064.Main.out_file, n100.r02.s065.Main.out_file, n100.r02.s066.Main.out_file, n100.r02.s067.Main.out_file, n100.r02.s068.Main.out_file, n100.r02.s069.Main.out_file, n100.r02.s070.Main.out_file, n100.r02.s071.Main.out_file, n100.r02.s072.Main.out_file, n100.r02.s073.Main.out_file, n100.r02.s074.Main.out_file, n100.r02.s075.Main.out_file, n100.r02.s076.Main.out_file, n100.r02.s077.Main.out_file, n100.r02.s078.Main.out_file, n100.r02.s079.Main.out_file, n100.r02.s080.Main.out_file, n100.r02.s081.Main.out_file, n100.r02.s082.Main.out_file, n100.r02.s083.Main.out_file, n100.r02.s084.Main.out_file, n100.r02.s085.Main.out_file, n100.r02.s086.Main.out_file, n100.r02.s087.Main.out_file, n100.r02.s088.Main.out_file, n100.r02.s089.Main.out_file, n100.r02.s090.Main.out_file, n100.r02.s091.Main.out_file, n100.r02.s092.Main.out_file, n100.r02.s093.Main.out_file, n100.r02.s094.Main.out_file, n100.r02.s095.Main.out_file, n100.r02.s096.Main.out_file, n100.r02.s097.Main.out_file, n100.r02.s098.Main.out_file, n100.r02.s099.Main.out_file, n100.r02.s100.Main.out_file
2021/07/08 16:42:43 result: [val<.=cb354e52 35.7MiB>, val<.=69e8e2e0 35.8MiB>, val<.=788a3ac9 35.8MiB>, val<.=e1ee73b3 35.7MiB>, val<.=d96ffc42 35.7MiB>, val<.=ccbb2e5e 35.8MiB>, val<.=f1eb7e94 35.7MiB>, val<.=adb18765 35.7MiB>, val<.=d81bf2c0 35.7MiB>, val<.=f2d6dde4 35.7MiB>, val<.=43f7d239 35.7MiB>, val<.=bc20c175 35.8MiB>, val<.=ffbcd60e 35.7MiB>, val<.=a5990188 35.7MiB>, val<.=afde7e4c 35.7MiB>, val<.=a72b08a9 35.7MiB>, val<.=46840676 35.8MiB>, val<.=eb6a7639 35.8MiB>, val<.=187224c8 35.7MiB>, val<.=a4168588 35.8MiB>, val<.=3db5ae89 35.7MiB>, val<.=021d05c5 35.7MiB>, val<.=3b3518a0 35.7MiB>, val<.=bc56e60f 35.7MiB>, val<.=008a512d 35.7MiB>, val<.=5fa1b81d 35.7MiB>, val<.=99be66a2 35.7MiB>, val<.=fb2fd41a 35.7MiB>, val<.=ed4be07d 35.7MiB>, val<.=525fa7ce 35.7MiB>, val<.=955498fa 35.7MiB>, val<.=c78c476e 35.7MiB>, val<.=6bb8829f 35.7MiB>, val<.=73bbd186 35.7MiB>, val<.=01b73b84 35.7MiB>, val<.=358c1dfb 35.8MiB>, val<.=22217c84 35.8MiB>, val<.=6f90aa9c 35.7MiB>, val<.=27e3f14b 35.7MiB>, val<.=d623a1dc 35.8MiB>, val<.=7671045c 35.8MiB>, val<.=9ddcab84 35.7MiB>, val<.=8ac13a2f 35.7MiB>, val<.=17cccea0 35.7MiB>, val<.=7e675d04 35.7MiB>, val<.=cb76c8d6 35.8MiB>, val<.=1184426e 35.7MiB>, val<.=146bec75 35.7MiB>, val<.=db290f1b 35.7MiB>, val<.=9e9f7446 35.7MiB>, val<.=0845b6ea 35.8MiB>, val<.=96356257 35.8MiB>, val<.=68e937d6 35.8MiB>, val<.=fece060a 35.8MiB>, val<.=a5f09d72 35.7MiB>, val<.=872385a2 35.7MiB>, val<.=e53ee8e4 35.7MiB>, val<.=1761671e 35.7MiB>, val<.=573c1416 35.7MiB>, val<.=5fecb049 35.7MiB>, val<.=17728355 35.8MiB>, val<.=8dbf9b32 35.8MiB>, val<.=d5d2be16 35.7MiB>, val<.=85069332 35.8MiB>, val<.=48402618 35.7MiB>, val<.=4bf0528a 35.7MiB>, val<.=a9ebaa03 35.7MiB>, val<.=611d8bcf 35.7MiB>, val<.=551eb942 35.7MiB>, val<.=70db6059 35.8MiB>, val<.=065dbc5d 35.7MiB>, val<.=3f41eeae 35.7MiB>, val<.=08303ee6 35.7MiB>, val<.=1767e2d5 35.7MiB>, val<.=264cd6e3 35.7MiB>, val<.=26500719 35.7MiB>, val<.=9c76616b 35.8MiB>, val<.=610691cc 35.8MiB>, val<.=e7cf1bc9 35.7MiB>, val<.=7fec47ce 35.7MiB>, val<.=2f8148a9 35.7MiB>, val<.=455440ee 35.8MiB>, val<.=19434f93 35.8MiB>, val<.=e5376a98 35.7MiB>, val<.=f434f2c4 35.7MiB>, val<.=2419d308 35.7MiB>, val<.=a77da284 35.7MiB>, val<.=101eedeb 35.8MiB>, val<.=104321d2 35.8MiB>, val<.=b1f3e9f0 35.7MiB>, val<.=8378b1e5 35.8MiB>, val<.=a8647b5b 35.7MiB>, val<.=f89c47d5 35.7MiB>, val<.=d854c371 35.7MiB>, val<.=c003b432 35.8MiB>, val<.=a8d1a768 35.7MiB>, val<.=9136bea4 35.7MiB>, val<.=da7faab8 35.7MiB>, val<.=0d563880 35.8MiB>, val<.=3c33a10a 35.8MiB>]
2021/07/08 16:42:43 waiting for 1 background tasks to complete
