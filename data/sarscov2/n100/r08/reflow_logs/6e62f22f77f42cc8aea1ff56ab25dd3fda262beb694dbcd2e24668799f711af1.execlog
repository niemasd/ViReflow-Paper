2021/07/08 17:20:28 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 17:20:28 run ID: 6e62f22f
2021/07/08 17:20:28 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r08.rf
	(no params)
	(no arguments)
2021/07/08 17:20:28 Trace: /home/niema/.reflow/runs/6e62f22f77f42cc8aea1ff56ab25dd3fda262beb694dbcd2e24668799f711af1.trace
2021/07/08 17:20:28 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 17:20:29 scheduler task 8fe40f12 (flow a788dda5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s073_output\"\n        wget -O \"n100.r08.s073_output/n100.r08.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s073_output/n100.r08.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s073_output/n100.r08.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s073_output/n100.r08.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s073_output/n100.r08.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s073_output/n100.r08.s073.reference.fas\" \"n100.r08.s073_output/n100.r08.s073.fq1.fastq\" \"n100.r08.s073_output/n100.r08.s073.fq2.fastq\" | samtools view -bS - > \"n100.r08.s073_output/n100.r08.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s073_output/n100.r08.s073.untrimmed.sorted.bam\" \"n100.r08.s073_output/n100.r08.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s073_output/n100.r08.s073.untrimmed.sorted.bam\" -b \"n100.r08.s073_output/n100.r08.s073.primers.bed\" -p \"n100.r08.s073_output/n100.r08.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam\" \"n100.r08.s073_output/n100.r08.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s073_output/n100.r08.s073.reference.fas\" \"n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam\" > \"n100.r08.s073_output/n100.r08.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s073_output/n100.r08.s073.reference.fas\" --call-indels \"n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam\" > \"n100.r08.s073_output/n100.r08.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam\" > \"n100.r08.s073_output/n100.r08.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s073_output/n100.r08.s073.depth.txt\" \"n100.r08.s073_output/n100.r08.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s073_output/n100.r08.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s073_output/n100.r08.s073.reference.fas\" | bcftools consensus -m \"n100.r08.s073_output/n100.r08.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s073_output/n100.r08.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 776b5e82 (flow 6ac026c6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s063_output\"\n        wget -O \"n100.r08.s063_output/n100.r08.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s063_output/n100.r08.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s063_output/n100.r08.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s063_output/n100.r08.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s063_output/n100.r08.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s063_output/n100.r08.s063.reference.fas\" \"n100.r08.s063_output/n100.r08.s063.fq1.fastq\" \"n100.r08.s063_output/n100.r08.s063.fq2.fastq\" | samtools view -bS - > \"n100.r08.s063_output/n100.r08.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s063_output/n100.r08.s063.untrimmed.sorted.bam\" \"n100.r08.s063_output/n100.r08.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s063_output/n100.r08.s063.untrimmed.sorted.bam\" -b \"n100.r08.s063_output/n100.r08.s063.primers.bed\" -p \"n100.r08.s063_output/n100.r08.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam\" \"n100.r08.s063_output/n100.r08.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s063_output/n100.r08.s063.reference.fas\" \"n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam\" > \"n100.r08.s063_output/n100.r08.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s063_output/n100.r08.s063.reference.fas\" --call-indels \"n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam\" > \"n100.r08.s063_output/n100.r08.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam\" > \"n100.r08.s063_output/n100.r08.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s063_output/n100.r08.s063.depth.txt\" \"n100.r08.s063_output/n100.r08.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s063_output/n100.r08.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s063_output/n100.r08.s063.reference.fas\" | bcftools consensus -m \"n100.r08.s063_output/n100.r08.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s063_output/n100.r08.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e37887ba (flow 3f3f0aa1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s071_output\"\n        wget -O \"n100.r08.s071_output/n100.r08.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s071_output/n100.r08.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s071_output/n100.r08.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s071_output/n100.r08.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s071_output/n100.r08.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s071_output/n100.r08.s071.reference.fas\" \"n100.r08.s071_output/n100.r08.s071.fq1.fastq\" \"n100.r08.s071_output/n100.r08.s071.fq2.fastq\" | samtools view -bS - > \"n100.r08.s071_output/n100.r08.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s071_output/n100.r08.s071.untrimmed.sorted.bam\" \"n100.r08.s071_output/n100.r08.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s071_output/n100.r08.s071.untrimmed.sorted.bam\" -b \"n100.r08.s071_output/n100.r08.s071.primers.bed\" -p \"n100.r08.s071_output/n100.r08.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam\" \"n100.r08.s071_output/n100.r08.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s071_output/n100.r08.s071.reference.fas\" \"n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam\" > \"n100.r08.s071_output/n100.r08.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s071_output/n100.r08.s071.reference.fas\" --call-indels \"n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam\" > \"n100.r08.s071_output/n100.r08.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam\" > \"n100.r08.s071_output/n100.r08.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s071_output/n100.r08.s071.depth.txt\" \"n100.r08.s071_output/n100.r08.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s071_output/n100.r08.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s071_output/n100.r08.s071.reference.fas\" | bcftools consensus -m \"n100.r08.s071_output/n100.r08.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s071_output/n100.r08.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task bf7e40f2 (flow d91ad154): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s077_output\"\n        wget -O \"n100.r08.s077_output/n100.r08.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s077_output/n100.r08.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s077_output/n100.r08.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s077_output/n100.r08.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s077_output/n100.r08.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s077_output/n100.r08.s077.reference.fas\" \"n100.r08.s077_output/n100.r08.s077.fq1.fastq\" \"n100.r08.s077_output/n100.r08.s077.fq2.fastq\" | samtools view -bS - > \"n100.r08.s077_output/n100.r08.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s077_output/n100.r08.s077.untrimmed.sorted.bam\" \"n100.r08.s077_output/n100.r08.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s077_output/n100.r08.s077.untrimmed.sorted.bam\" -b \"n100.r08.s077_output/n100.r08.s077.primers.bed\" -p \"n100.r08.s077_output/n100.r08.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam\" \"n100.r08.s077_output/n100.r08.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s077_output/n100.r08.s077.reference.fas\" \"n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam\" > \"n100.r08.s077_output/n100.r08.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s077_output/n100.r08.s077.reference.fas\" --call-indels \"n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam\" > \"n100.r08.s077_output/n100.r08.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam\" > \"n100.r08.s077_output/n100.r08.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s077_output/n100.r08.s077.depth.txt\" \"n100.r08.s077_output/n100.r08.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s077_output/n100.r08.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s077_output/n100.r08.s077.reference.fas\" | bcftools consensus -m \"n100.r08.s077_output/n100.r08.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s077_output/n100.r08.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task cb5519bf (flow b7426dfd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s032_output\"\n        wget -O \"n100.r08.s032_output/n100.r08.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s032_output/n100.r08.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s032_output/n100.r08.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s032_output/n100.r08.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s032_output/n100.r08.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s032_output/n100.r08.s032.reference.fas\" \"n100.r08.s032_output/n100.r08.s032.fq1.fastq\" \"n100.r08.s032_output/n100.r08.s032.fq2.fastq\" | samtools view -bS - > \"n100.r08.s032_output/n100.r08.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s032_output/n100.r08.s032.untrimmed.sorted.bam\" \"n100.r08.s032_output/n100.r08.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s032_output/n100.r08.s032.untrimmed.sorted.bam\" -b \"n100.r08.s032_output/n100.r08.s032.primers.bed\" -p \"n100.r08.s032_output/n100.r08.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam\" \"n100.r08.s032_output/n100.r08.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s032_output/n100.r08.s032.reference.fas\" \"n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam\" > \"n100.r08.s032_output/n100.r08.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s032_output/n100.r08.s032.reference.fas\" --call-indels \"n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam\" > \"n100.r08.s032_output/n100.r08.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam\" > \"n100.r08.s032_output/n100.r08.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s032_output/n100.r08.s032.depth.txt\" \"n100.r08.s032_output/n100.r08.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s032_output/n100.r08.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s032_output/n100.r08.s032.reference.fas\" | bcftools consensus -m \"n100.r08.s032_output/n100.r08.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s032_output/n100.r08.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task cdee6bfa (flow f460701b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s029_output\"\n        wget -O \"n100.r08.s029_output/n100.r08.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s029_output/n100.r08.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s029_output/n100.r08.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s029_output/n100.r08.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s029_output/n100.r08.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s029_output/n100.r08.s029.reference.fas\" \"n100.r08.s029_output/n100.r08.s029.fq1.fastq\" \"n100.r08.s029_output/n100.r08.s029.fq2.fastq\" | samtools view -bS - > \"n100.r08.s029_output/n100.r08.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s029_output/n100.r08.s029.untrimmed.sorted.bam\" \"n100.r08.s029_output/n100.r08.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s029_output/n100.r08.s029.untrimmed.sorted.bam\" -b \"n100.r08.s029_output/n100.r08.s029.primers.bed\" -p \"n100.r08.s029_output/n100.r08.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam\" \"n100.r08.s029_output/n100.r08.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s029_output/n100.r08.s029.reference.fas\" \"n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam\" > \"n100.r08.s029_output/n100.r08.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s029_output/n100.r08.s029.reference.fas\" --call-indels \"n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam\" > \"n100.r08.s029_output/n100.r08.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam\" > \"n100.r08.s029_output/n100.r08.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s029_output/n100.r08.s029.depth.txt\" \"n100.r08.s029_output/n100.r08.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s029_output/n100.r08.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s029_output/n100.r08.s029.reference.fas\" | bcftools consensus -m \"n100.r08.s029_output/n100.r08.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s029_output/n100.r08.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 264d0316 (flow 29e265bf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s040_output\"\n        wget -O \"n100.r08.s040_output/n100.r08.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s040_output/n100.r08.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s040_output/n100.r08.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s040_output/n100.r08.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s040_output/n100.r08.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s040_output/n100.r08.s040.reference.fas\" \"n100.r08.s040_output/n100.r08.s040.fq1.fastq\" \"n100.r08.s040_output/n100.r08.s040.fq2.fastq\" | samtools view -bS - > \"n100.r08.s040_output/n100.r08.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s040_output/n100.r08.s040.untrimmed.sorted.bam\" \"n100.r08.s040_output/n100.r08.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s040_output/n100.r08.s040.untrimmed.sorted.bam\" -b \"n100.r08.s040_output/n100.r08.s040.primers.bed\" -p \"n100.r08.s040_output/n100.r08.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam\" \"n100.r08.s040_output/n100.r08.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s040_output/n100.r08.s040.reference.fas\" \"n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam\" > \"n100.r08.s040_output/n100.r08.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s040_output/n100.r08.s040.reference.fas\" --call-indels \"n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam\" > \"n100.r08.s040_output/n100.r08.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam\" > \"n100.r08.s040_output/n100.r08.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s040_output/n100.r08.s040.depth.txt\" \"n100.r08.s040_output/n100.r08.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s040_output/n100.r08.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s040_output/n100.r08.s040.reference.fas\" | bcftools consensus -m \"n100.r08.s040_output/n100.r08.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s040_output/n100.r08.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 4e98971e (flow f26e5aef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s088_output\"\n        wget -O \"n100.r08.s088_output/n100.r08.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s088_output/n100.r08.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s088_output/n100.r08.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s088_output/n100.r08.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s088_output/n100.r08.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s088_output/n100.r08.s088.reference.fas\" \"n100.r08.s088_output/n100.r08.s088.fq1.fastq\" \"n100.r08.s088_output/n100.r08.s088.fq2.fastq\" | samtools view -bS - > \"n100.r08.s088_output/n100.r08.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s088_output/n100.r08.s088.untrimmed.sorted.bam\" \"n100.r08.s088_output/n100.r08.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s088_output/n100.r08.s088.untrimmed.sorted.bam\" -b \"n100.r08.s088_output/n100.r08.s088.primers.bed\" -p \"n100.r08.s088_output/n100.r08.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam\" \"n100.r08.s088_output/n100.r08.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s088_output/n100.r08.s088.reference.fas\" \"n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam\" > \"n100.r08.s088_output/n100.r08.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s088_output/n100.r08.s088.reference.fas\" --call-indels \"n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam\" > \"n100.r08.s088_output/n100.r08.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam\" > \"n100.r08.s088_output/n100.r08.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s088_output/n100.r08.s088.depth.txt\" \"n100.r08.s088_output/n100.r08.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s088_output/n100.r08.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s088_output/n100.r08.s088.reference.fas\" | bcftools consensus -m \"n100.r08.s088_output/n100.r08.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s088_output/n100.r08.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task f032da36 (flow dd8a72fb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s053_output\"\n        wget -O \"n100.r08.s053_output/n100.r08.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s053_output/n100.r08.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s053_output/n100.r08.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s053_output/n100.r08.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s053_output/n100.r08.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s053_output/n100.r08.s053.reference.fas\" \"n100.r08.s053_output/n100.r08.s053.fq1.fastq\" \"n100.r08.s053_output/n100.r08.s053.fq2.fastq\" | samtools view -bS - > \"n100.r08.s053_output/n100.r08.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s053_output/n100.r08.s053.untrimmed.sorted.bam\" \"n100.r08.s053_output/n100.r08.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s053_output/n100.r08.s053.untrimmed.sorted.bam\" -b \"n100.r08.s053_output/n100.r08.s053.primers.bed\" -p \"n100.r08.s053_output/n100.r08.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam\" \"n100.r08.s053_output/n100.r08.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s053_output/n100.r08.s053.reference.fas\" \"n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam\" > \"n100.r08.s053_output/n100.r08.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s053_output/n100.r08.s053.reference.fas\" --call-indels \"n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam\" > \"n100.r08.s053_output/n100.r08.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam\" > \"n100.r08.s053_output/n100.r08.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s053_output/n100.r08.s053.depth.txt\" \"n100.r08.s053_output/n100.r08.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s053_output/n100.r08.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s053_output/n100.r08.s053.reference.fas\" | bcftools consensus -m \"n100.r08.s053_output/n100.r08.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s053_output/n100.r08.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 82ea7c30 (flow 9a696a11): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s091_output\"\n        wget -O \"n100.r08.s091_output/n100.r08.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s091_output/n100.r08.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s091_output/n100.r08.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s091_output/n100.r08.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s091_output/n100.r08.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s091_output/n100.r08.s091.reference.fas\" \"n100.r08.s091_output/n100.r08.s091.fq1.fastq\" \"n100.r08.s091_output/n100.r08.s091.fq2.fastq\" | samtools view -bS - > \"n100.r08.s091_output/n100.r08.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s091_output/n100.r08.s091.untrimmed.sorted.bam\" \"n100.r08.s091_output/n100.r08.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s091_output/n100.r08.s091.untrimmed.sorted.bam\" -b \"n100.r08.s091_output/n100.r08.s091.primers.bed\" -p \"n100.r08.s091_output/n100.r08.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam\" \"n100.r08.s091_output/n100.r08.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s091_output/n100.r08.s091.reference.fas\" \"n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam\" > \"n100.r08.s091_output/n100.r08.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s091_output/n100.r08.s091.reference.fas\" --call-indels \"n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam\" > \"n100.r08.s091_output/n100.r08.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam\" > \"n100.r08.s091_output/n100.r08.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s091_output/n100.r08.s091.depth.txt\" \"n100.r08.s091_output/n100.r08.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s091_output/n100.r08.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s091_output/n100.r08.s091.reference.fas\" | bcftools consensus -m \"n100.r08.s091_output/n100.r08.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s091_output/n100.r08.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 123263b5 (flow d2a9e9c7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s050_output\"\n        wget -O \"n100.r08.s050_output/n100.r08.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s050_output/n100.r08.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s050_output/n100.r08.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s050_output/n100.r08.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s050_output/n100.r08.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s050_output/n100.r08.s050.reference.fas\" \"n100.r08.s050_output/n100.r08.s050.fq1.fastq\" \"n100.r08.s050_output/n100.r08.s050.fq2.fastq\" | samtools view -bS - > \"n100.r08.s050_output/n100.r08.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s050_output/n100.r08.s050.untrimmed.sorted.bam\" \"n100.r08.s050_output/n100.r08.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s050_output/n100.r08.s050.untrimmed.sorted.bam\" -b \"n100.r08.s050_output/n100.r08.s050.primers.bed\" -p \"n100.r08.s050_output/n100.r08.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam\" \"n100.r08.s050_output/n100.r08.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s050_output/n100.r08.s050.reference.fas\" \"n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam\" > \"n100.r08.s050_output/n100.r08.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s050_output/n100.r08.s050.reference.fas\" --call-indels \"n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam\" > \"n100.r08.s050_output/n100.r08.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam\" > \"n100.r08.s050_output/n100.r08.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s050_output/n100.r08.s050.depth.txt\" \"n100.r08.s050_output/n100.r08.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s050_output/n100.r08.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s050_output/n100.r08.s050.reference.fas\" | bcftools consensus -m \"n100.r08.s050_output/n100.r08.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s050_output/n100.r08.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task ecca53e1 (flow bb3142a9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s036_output\"\n        wget -O \"n100.r08.s036_output/n100.r08.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s036_output/n100.r08.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s036_output/n100.r08.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s036_output/n100.r08.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s036_output/n100.r08.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s036_output/n100.r08.s036.reference.fas\" \"n100.r08.s036_output/n100.r08.s036.fq1.fastq\" \"n100.r08.s036_output/n100.r08.s036.fq2.fastq\" | samtools view -bS - > \"n100.r08.s036_output/n100.r08.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s036_output/n100.r08.s036.untrimmed.sorted.bam\" \"n100.r08.s036_output/n100.r08.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s036_output/n100.r08.s036.untrimmed.sorted.bam\" -b \"n100.r08.s036_output/n100.r08.s036.primers.bed\" -p \"n100.r08.s036_output/n100.r08.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam\" \"n100.r08.s036_output/n100.r08.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s036_output/n100.r08.s036.reference.fas\" \"n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam\" > \"n100.r08.s036_output/n100.r08.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s036_output/n100.r08.s036.reference.fas\" --call-indels \"n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam\" > \"n100.r08.s036_output/n100.r08.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam\" > \"n100.r08.s036_output/n100.r08.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s036_output/n100.r08.s036.depth.txt\" \"n100.r08.s036_output/n100.r08.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s036_output/n100.r08.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s036_output/n100.r08.s036.reference.fas\" | bcftools consensus -m \"n100.r08.s036_output/n100.r08.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s036_output/n100.r08.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task be960135 (flow 20c58820): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s046_output\"\n        wget -O \"n100.r08.s046_output/n100.r08.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s046_output/n100.r08.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s046_output/n100.r08.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s046_output/n100.r08.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s046_output/n100.r08.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s046_output/n100.r08.s046.reference.fas\" \"n100.r08.s046_output/n100.r08.s046.fq1.fastq\" \"n100.r08.s046_output/n100.r08.s046.fq2.fastq\" | samtools view -bS - > \"n100.r08.s046_output/n100.r08.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s046_output/n100.r08.s046.untrimmed.sorted.bam\" \"n100.r08.s046_output/n100.r08.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s046_output/n100.r08.s046.untrimmed.sorted.bam\" -b \"n100.r08.s046_output/n100.r08.s046.primers.bed\" -p \"n100.r08.s046_output/n100.r08.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam\" \"n100.r08.s046_output/n100.r08.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s046_output/n100.r08.s046.reference.fas\" \"n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam\" > \"n100.r08.s046_output/n100.r08.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s046_output/n100.r08.s046.reference.fas\" --call-indels \"n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam\" > \"n100.r08.s046_output/n100.r08.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam\" > \"n100.r08.s046_output/n100.r08.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s046_output/n100.r08.s046.depth.txt\" \"n100.r08.s046_output/n100.r08.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s046_output/n100.r08.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s046_output/n100.r08.s046.reference.fas\" | bcftools consensus -m \"n100.r08.s046_output/n100.r08.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s046_output/n100.r08.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 8a56961a (flow 9099bf90): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s061_output\"\n        wget -O \"n100.r08.s061_output/n100.r08.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s061_output/n100.r08.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s061_output/n100.r08.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s061_output/n100.r08.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s061_output/n100.r08.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s061_output/n100.r08.s061.reference.fas\" \"n100.r08.s061_output/n100.r08.s061.fq1.fastq\" \"n100.r08.s061_output/n100.r08.s061.fq2.fastq\" | samtools view -bS - > \"n100.r08.s061_output/n100.r08.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s061_output/n100.r08.s061.untrimmed.sorted.bam\" \"n100.r08.s061_output/n100.r08.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s061_output/n100.r08.s061.untrimmed.sorted.bam\" -b \"n100.r08.s061_output/n100.r08.s061.primers.bed\" -p \"n100.r08.s061_output/n100.r08.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam\" \"n100.r08.s061_output/n100.r08.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s061_output/n100.r08.s061.reference.fas\" \"n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam\" > \"n100.r08.s061_output/n100.r08.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s061_output/n100.r08.s061.reference.fas\" --call-indels \"n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam\" > \"n100.r08.s061_output/n100.r08.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam\" > \"n100.r08.s061_output/n100.r08.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s061_output/n100.r08.s061.depth.txt\" \"n100.r08.s061_output/n100.r08.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s061_output/n100.r08.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s061_output/n100.r08.s061.reference.fas\" | bcftools consensus -m \"n100.r08.s061_output/n100.r08.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s061_output/n100.r08.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 72dc116b (flow 0403b41d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s019_output\"\n        wget -O \"n100.r08.s019_output/n100.r08.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s019_output/n100.r08.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s019_output/n100.r08.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s019_output/n100.r08.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s019_output/n100.r08.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s019_output/n100.r08.s019.reference.fas\" \"n100.r08.s019_output/n100.r08.s019.fq1.fastq\" \"n100.r08.s019_output/n100.r08.s019.fq2.fastq\" | samtools view -bS - > \"n100.r08.s019_output/n100.r08.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s019_output/n100.r08.s019.untrimmed.sorted.bam\" \"n100.r08.s019_output/n100.r08.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s019_output/n100.r08.s019.untrimmed.sorted.bam\" -b \"n100.r08.s019_output/n100.r08.s019.primers.bed\" -p \"n100.r08.s019_output/n100.r08.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam\" \"n100.r08.s019_output/n100.r08.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s019_output/n100.r08.s019.reference.fas\" \"n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam\" > \"n100.r08.s019_output/n100.r08.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s019_output/n100.r08.s019.reference.fas\" --call-indels \"n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam\" > \"n100.r08.s019_output/n100.r08.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam\" > \"n100.r08.s019_output/n100.r08.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s019_output/n100.r08.s019.depth.txt\" \"n100.r08.s019_output/n100.r08.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s019_output/n100.r08.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s019_output/n100.r08.s019.reference.fas\" | bcftools consensus -m \"n100.r08.s019_output/n100.r08.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s019_output/n100.r08.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e923c46c (flow 4b5a804b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s006_output\"\n        wget -O \"n100.r08.s006_output/n100.r08.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s006_output/n100.r08.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s006_output/n100.r08.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s006_output/n100.r08.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s006_output/n100.r08.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s006_output/n100.r08.s006.reference.fas\" \"n100.r08.s006_output/n100.r08.s006.fq1.fastq\" \"n100.r08.s006_output/n100.r08.s006.fq2.fastq\" | samtools view -bS - > \"n100.r08.s006_output/n100.r08.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s006_output/n100.r08.s006.untrimmed.sorted.bam\" \"n100.r08.s006_output/n100.r08.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s006_output/n100.r08.s006.untrimmed.sorted.bam\" -b \"n100.r08.s006_output/n100.r08.s006.primers.bed\" -p \"n100.r08.s006_output/n100.r08.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam\" \"n100.r08.s006_output/n100.r08.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s006_output/n100.r08.s006.reference.fas\" \"n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam\" > \"n100.r08.s006_output/n100.r08.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s006_output/n100.r08.s006.reference.fas\" --call-indels \"n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam\" > \"n100.r08.s006_output/n100.r08.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam\" > \"n100.r08.s006_output/n100.r08.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s006_output/n100.r08.s006.depth.txt\" \"n100.r08.s006_output/n100.r08.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s006_output/n100.r08.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s006_output/n100.r08.s006.reference.fas\" | bcftools consensus -m \"n100.r08.s006_output/n100.r08.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s006_output/n100.r08.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 8d3ebe19 (flow 31c07028): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s043_output\"\n        wget -O \"n100.r08.s043_output/n100.r08.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s043_output/n100.r08.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s043_output/n100.r08.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s043_output/n100.r08.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s043_output/n100.r08.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s043_output/n100.r08.s043.reference.fas\" \"n100.r08.s043_output/n100.r08.s043.fq1.fastq\" \"n100.r08.s043_output/n100.r08.s043.fq2.fastq\" | samtools view -bS - > \"n100.r08.s043_output/n100.r08.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s043_output/n100.r08.s043.untrimmed.sorted.bam\" \"n100.r08.s043_output/n100.r08.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s043_output/n100.r08.s043.untrimmed.sorted.bam\" -b \"n100.r08.s043_output/n100.r08.s043.primers.bed\" -p \"n100.r08.s043_output/n100.r08.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam\" \"n100.r08.s043_output/n100.r08.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s043_output/n100.r08.s043.reference.fas\" \"n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam\" > \"n100.r08.s043_output/n100.r08.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s043_output/n100.r08.s043.reference.fas\" --call-indels \"n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam\" > \"n100.r08.s043_output/n100.r08.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam\" > \"n100.r08.s043_output/n100.r08.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s043_output/n100.r08.s043.depth.txt\" \"n100.r08.s043_output/n100.r08.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s043_output/n100.r08.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s043_output/n100.r08.s043.reference.fas\" | bcftools consensus -m \"n100.r08.s043_output/n100.r08.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s043_output/n100.r08.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 2304077e (flow 683e2f72): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s035_output\"\n        wget -O \"n100.r08.s035_output/n100.r08.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s035_output/n100.r08.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s035_output/n100.r08.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s035_output/n100.r08.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s035_output/n100.r08.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s035_output/n100.r08.s035.reference.fas\" \"n100.r08.s035_output/n100.r08.s035.fq1.fastq\" \"n100.r08.s035_output/n100.r08.s035.fq2.fastq\" | samtools view -bS - > \"n100.r08.s035_output/n100.r08.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s035_output/n100.r08.s035.untrimmed.sorted.bam\" \"n100.r08.s035_output/n100.r08.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s035_output/n100.r08.s035.untrimmed.sorted.bam\" -b \"n100.r08.s035_output/n100.r08.s035.primers.bed\" -p \"n100.r08.s035_output/n100.r08.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam\" \"n100.r08.s035_output/n100.r08.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s035_output/n100.r08.s035.reference.fas\" \"n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam\" > \"n100.r08.s035_output/n100.r08.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s035_output/n100.r08.s035.reference.fas\" --call-indels \"n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam\" > \"n100.r08.s035_output/n100.r08.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam\" > \"n100.r08.s035_output/n100.r08.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s035_output/n100.r08.s035.depth.txt\" \"n100.r08.s035_output/n100.r08.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s035_output/n100.r08.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s035_output/n100.r08.s035.reference.fas\" | bcftools consensus -m \"n100.r08.s035_output/n100.r08.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s035_output/n100.r08.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 21ae2bff (flow 7bb8abed): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s044_output\"\n        wget -O \"n100.r08.s044_output/n100.r08.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s044_output/n100.r08.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s044_output/n100.r08.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s044_output/n100.r08.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s044_output/n100.r08.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s044_output/n100.r08.s044.reference.fas\" \"n100.r08.s044_output/n100.r08.s044.fq1.fastq\" \"n100.r08.s044_output/n100.r08.s044.fq2.fastq\" | samtools view -bS - > \"n100.r08.s044_output/n100.r08.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s044_output/n100.r08.s044.untrimmed.sorted.bam\" \"n100.r08.s044_output/n100.r08.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s044_output/n100.r08.s044.untrimmed.sorted.bam\" -b \"n100.r08.s044_output/n100.r08.s044.primers.bed\" -p \"n100.r08.s044_output/n100.r08.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam\" \"n100.r08.s044_output/n100.r08.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s044_output/n100.r08.s044.reference.fas\" \"n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam\" > \"n100.r08.s044_output/n100.r08.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s044_output/n100.r08.s044.reference.fas\" --call-indels \"n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam\" > \"n100.r08.s044_output/n100.r08.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam\" > \"n100.r08.s044_output/n100.r08.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s044_output/n100.r08.s044.depth.txt\" \"n100.r08.s044_output/n100.r08.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s044_output/n100.r08.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s044_output/n100.r08.s044.reference.fas\" | bcftools consensus -m \"n100.r08.s044_output/n100.r08.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s044_output/n100.r08.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 371d17ff (flow 2a447479): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s025_output\"\n        wget -O \"n100.r08.s025_output/n100.r08.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s025_output/n100.r08.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s025_output/n100.r08.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s025_output/n100.r08.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s025_output/n100.r08.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s025_output/n100.r08.s025.reference.fas\" \"n100.r08.s025_output/n100.r08.s025.fq1.fastq\" \"n100.r08.s025_output/n100.r08.s025.fq2.fastq\" | samtools view -bS - > \"n100.r08.s025_output/n100.r08.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s025_output/n100.r08.s025.untrimmed.sorted.bam\" \"n100.r08.s025_output/n100.r08.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s025_output/n100.r08.s025.untrimmed.sorted.bam\" -b \"n100.r08.s025_output/n100.r08.s025.primers.bed\" -p \"n100.r08.s025_output/n100.r08.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam\" \"n100.r08.s025_output/n100.r08.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s025_output/n100.r08.s025.reference.fas\" \"n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam\" > \"n100.r08.s025_output/n100.r08.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s025_output/n100.r08.s025.reference.fas\" --call-indels \"n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam\" > \"n100.r08.s025_output/n100.r08.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam\" > \"n100.r08.s025_output/n100.r08.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s025_output/n100.r08.s025.depth.txt\" \"n100.r08.s025_output/n100.r08.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s025_output/n100.r08.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s025_output/n100.r08.s025.reference.fas\" | bcftools consensus -m \"n100.r08.s025_output/n100.r08.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s025_output/n100.r08.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task cd7dca86 (flow 59cfb075): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s093_output\"\n        wget -O \"n100.r08.s093_output/n100.r08.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s093_output/n100.r08.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s093_output/n100.r08.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s093_output/n100.r08.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s093_output/n100.r08.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s093_output/n100.r08.s093.reference.fas\" \"n100.r08.s093_output/n100.r08.s093.fq1.fastq\" \"n100.r08.s093_output/n100.r08.s093.fq2.fastq\" | samtools view -bS - > \"n100.r08.s093_output/n100.r08.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s093_output/n100.r08.s093.untrimmed.sorted.bam\" \"n100.r08.s093_output/n100.r08.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s093_output/n100.r08.s093.untrimmed.sorted.bam\" -b \"n100.r08.s093_output/n100.r08.s093.primers.bed\" -p \"n100.r08.s093_output/n100.r08.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam\" \"n100.r08.s093_output/n100.r08.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s093_output/n100.r08.s093.reference.fas\" \"n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam\" > \"n100.r08.s093_output/n100.r08.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s093_output/n100.r08.s093.reference.fas\" --call-indels \"n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam\" > \"n100.r08.s093_output/n100.r08.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam\" > \"n100.r08.s093_output/n100.r08.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s093_output/n100.r08.s093.depth.txt\" \"n100.r08.s093_output/n100.r08.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s093_output/n100.r08.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s093_output/n100.r08.s093.reference.fas\" | bcftools consensus -m \"n100.r08.s093_output/n100.r08.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s093_output/n100.r08.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 7c80984b (flow f133966a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s028_output\"\n        wget -O \"n100.r08.s028_output/n100.r08.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s028_output/n100.r08.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s028_output/n100.r08.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s028_output/n100.r08.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s028_output/n100.r08.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s028_output/n100.r08.s028.reference.fas\" \"n100.r08.s028_output/n100.r08.s028.fq1.fastq\" \"n100.r08.s028_output/n100.r08.s028.fq2.fastq\" | samtools view -bS - > \"n100.r08.s028_output/n100.r08.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s028_output/n100.r08.s028.untrimmed.sorted.bam\" \"n100.r08.s028_output/n100.r08.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s028_output/n100.r08.s028.untrimmed.sorted.bam\" -b \"n100.r08.s028_output/n100.r08.s028.primers.bed\" -p \"n100.r08.s028_output/n100.r08.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam\" \"n100.r08.s028_output/n100.r08.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s028_output/n100.r08.s028.reference.fas\" \"n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam\" > \"n100.r08.s028_output/n100.r08.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s028_output/n100.r08.s028.reference.fas\" --call-indels \"n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam\" > \"n100.r08.s028_output/n100.r08.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam\" > \"n100.r08.s028_output/n100.r08.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s028_output/n100.r08.s028.depth.txt\" \"n100.r08.s028_output/n100.r08.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s028_output/n100.r08.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s028_output/n100.r08.s028.reference.fas\" | bcftools consensus -m \"n100.r08.s028_output/n100.r08.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s028_output/n100.r08.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task f10c7dd1 (flow d4a953a5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s078_output\"\n        wget -O \"n100.r08.s078_output/n100.r08.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s078_output/n100.r08.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s078_output/n100.r08.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s078_output/n100.r08.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s078_output/n100.r08.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s078_output/n100.r08.s078.reference.fas\" \"n100.r08.s078_output/n100.r08.s078.fq1.fastq\" \"n100.r08.s078_output/n100.r08.s078.fq2.fastq\" | samtools view -bS - > \"n100.r08.s078_output/n100.r08.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s078_output/n100.r08.s078.untrimmed.sorted.bam\" \"n100.r08.s078_output/n100.r08.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s078_output/n100.r08.s078.untrimmed.sorted.bam\" -b \"n100.r08.s078_output/n100.r08.s078.primers.bed\" -p \"n100.r08.s078_output/n100.r08.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam\" \"n100.r08.s078_output/n100.r08.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s078_output/n100.r08.s078.reference.fas\" \"n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam\" > \"n100.r08.s078_output/n100.r08.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s078_output/n100.r08.s078.reference.fas\" --call-indels \"n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam\" > \"n100.r08.s078_output/n100.r08.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam\" > \"n100.r08.s078_output/n100.r08.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s078_output/n100.r08.s078.depth.txt\" \"n100.r08.s078_output/n100.r08.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s078_output/n100.r08.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s078_output/n100.r08.s078.reference.fas\" | bcftools consensus -m \"n100.r08.s078_output/n100.r08.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s078_output/n100.r08.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 43e62e27 (flow a215c969): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s012_output\"\n        wget -O \"n100.r08.s012_output/n100.r08.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s012_output/n100.r08.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s012_output/n100.r08.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s012_output/n100.r08.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s012_output/n100.r08.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s012_output/n100.r08.s012.reference.fas\" \"n100.r08.s012_output/n100.r08.s012.fq1.fastq\" \"n100.r08.s012_output/n100.r08.s012.fq2.fastq\" | samtools view -bS - > \"n100.r08.s012_output/n100.r08.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s012_output/n100.r08.s012.untrimmed.sorted.bam\" \"n100.r08.s012_output/n100.r08.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s012_output/n100.r08.s012.untrimmed.sorted.bam\" -b \"n100.r08.s012_output/n100.r08.s012.primers.bed\" -p \"n100.r08.s012_output/n100.r08.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam\" \"n100.r08.s012_output/n100.r08.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s012_output/n100.r08.s012.reference.fas\" \"n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam\" > \"n100.r08.s012_output/n100.r08.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s012_output/n100.r08.s012.reference.fas\" --call-indels \"n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam\" > \"n100.r08.s012_output/n100.r08.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam\" > \"n100.r08.s012_output/n100.r08.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s012_output/n100.r08.s012.depth.txt\" \"n100.r08.s012_output/n100.r08.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s012_output/n100.r08.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s012_output/n100.r08.s012.reference.fas\" | bcftools consensus -m \"n100.r08.s012_output/n100.r08.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s012_output/n100.r08.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 55bfb398 (flow ad6bd26e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s079_output\"\n        wget -O \"n100.r08.s079_output/n100.r08.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s079_output/n100.r08.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s079_output/n100.r08.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s079_output/n100.r08.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s079_output/n100.r08.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s079_output/n100.r08.s079.reference.fas\" \"n100.r08.s079_output/n100.r08.s079.fq1.fastq\" \"n100.r08.s079_output/n100.r08.s079.fq2.fastq\" | samtools view -bS - > \"n100.r08.s079_output/n100.r08.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s079_output/n100.r08.s079.untrimmed.sorted.bam\" \"n100.r08.s079_output/n100.r08.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s079_output/n100.r08.s079.untrimmed.sorted.bam\" -b \"n100.r08.s079_output/n100.r08.s079.primers.bed\" -p \"n100.r08.s079_output/n100.r08.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam\" \"n100.r08.s079_output/n100.r08.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s079_output/n100.r08.s079.reference.fas\" \"n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam\" > \"n100.r08.s079_output/n100.r08.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s079_output/n100.r08.s079.reference.fas\" --call-indels \"n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam\" > \"n100.r08.s079_output/n100.r08.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam\" > \"n100.r08.s079_output/n100.r08.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s079_output/n100.r08.s079.depth.txt\" \"n100.r08.s079_output/n100.r08.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s079_output/n100.r08.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s079_output/n100.r08.s079.reference.fas\" | bcftools consensus -m \"n100.r08.s079_output/n100.r08.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s079_output/n100.r08.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 95ea60c7 (flow 53b65fb8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s045_output\"\n        wget -O \"n100.r08.s045_output/n100.r08.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s045_output/n100.r08.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s045_output/n100.r08.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s045_output/n100.r08.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s045_output/n100.r08.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s045_output/n100.r08.s045.reference.fas\" \"n100.r08.s045_output/n100.r08.s045.fq1.fastq\" \"n100.r08.s045_output/n100.r08.s045.fq2.fastq\" | samtools view -bS - > \"n100.r08.s045_output/n100.r08.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s045_output/n100.r08.s045.untrimmed.sorted.bam\" \"n100.r08.s045_output/n100.r08.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s045_output/n100.r08.s045.untrimmed.sorted.bam\" -b \"n100.r08.s045_output/n100.r08.s045.primers.bed\" -p \"n100.r08.s045_output/n100.r08.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam\" \"n100.r08.s045_output/n100.r08.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s045_output/n100.r08.s045.reference.fas\" \"n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam\" > \"n100.r08.s045_output/n100.r08.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s045_output/n100.r08.s045.reference.fas\" --call-indels \"n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam\" > \"n100.r08.s045_output/n100.r08.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam\" > \"n100.r08.s045_output/n100.r08.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s045_output/n100.r08.s045.depth.txt\" \"n100.r08.s045_output/n100.r08.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s045_output/n100.r08.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s045_output/n100.r08.s045.reference.fas\" | bcftools consensus -m \"n100.r08.s045_output/n100.r08.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s045_output/n100.r08.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 0daa8d96 (flow 6a75b3c2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s041_output\"\n        wget -O \"n100.r08.s041_output/n100.r08.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s041_output/n100.r08.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s041_output/n100.r08.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s041_output/n100.r08.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s041_output/n100.r08.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s041_output/n100.r08.s041.reference.fas\" \"n100.r08.s041_output/n100.r08.s041.fq1.fastq\" \"n100.r08.s041_output/n100.r08.s041.fq2.fastq\" | samtools view -bS - > \"n100.r08.s041_output/n100.r08.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s041_output/n100.r08.s041.untrimmed.sorted.bam\" \"n100.r08.s041_output/n100.r08.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s041_output/n100.r08.s041.untrimmed.sorted.bam\" -b \"n100.r08.s041_output/n100.r08.s041.primers.bed\" -p \"n100.r08.s041_output/n100.r08.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam\" \"n100.r08.s041_output/n100.r08.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s041_output/n100.r08.s041.reference.fas\" \"n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam\" > \"n100.r08.s041_output/n100.r08.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s041_output/n100.r08.s041.reference.fas\" --call-indels \"n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam\" > \"n100.r08.s041_output/n100.r08.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam\" > \"n100.r08.s041_output/n100.r08.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s041_output/n100.r08.s041.depth.txt\" \"n100.r08.s041_output/n100.r08.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s041_output/n100.r08.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s041_output/n100.r08.s041.reference.fas\" | bcftools consensus -m \"n100.r08.s041_output/n100.r08.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s041_output/n100.r08.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task dee4f7a4 (flow 63e7c0c0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s034_output\"\n        wget -O \"n100.r08.s034_output/n100.r08.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s034_output/n100.r08.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s034_output/n100.r08.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s034_output/n100.r08.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s034_output/n100.r08.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s034_output/n100.r08.s034.reference.fas\" \"n100.r08.s034_output/n100.r08.s034.fq1.fastq\" \"n100.r08.s034_output/n100.r08.s034.fq2.fastq\" | samtools view -bS - > \"n100.r08.s034_output/n100.r08.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s034_output/n100.r08.s034.untrimmed.sorted.bam\" \"n100.r08.s034_output/n100.r08.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s034_output/n100.r08.s034.untrimmed.sorted.bam\" -b \"n100.r08.s034_output/n100.r08.s034.primers.bed\" -p \"n100.r08.s034_output/n100.r08.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam\" \"n100.r08.s034_output/n100.r08.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s034_output/n100.r08.s034.reference.fas\" \"n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam\" > \"n100.r08.s034_output/n100.r08.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s034_output/n100.r08.s034.reference.fas\" --call-indels \"n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam\" > \"n100.r08.s034_output/n100.r08.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam\" > \"n100.r08.s034_output/n100.r08.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s034_output/n100.r08.s034.depth.txt\" \"n100.r08.s034_output/n100.r08.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s034_output/n100.r08.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s034_output/n100.r08.s034.reference.fas\" | bcftools consensus -m \"n100.r08.s034_output/n100.r08.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s034_output/n100.r08.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task f62422fc (flow 7c1d2985): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s008_output\"\n        wget -O \"n100.r08.s008_output/n100.r08.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s008_output/n100.r08.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s008_output/n100.r08.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s008_output/n100.r08.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s008_output/n100.r08.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s008_output/n100.r08.s008.reference.fas\" \"n100.r08.s008_output/n100.r08.s008.fq1.fastq\" \"n100.r08.s008_output/n100.r08.s008.fq2.fastq\" | samtools view -bS - > \"n100.r08.s008_output/n100.r08.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s008_output/n100.r08.s008.untrimmed.sorted.bam\" \"n100.r08.s008_output/n100.r08.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s008_output/n100.r08.s008.untrimmed.sorted.bam\" -b \"n100.r08.s008_output/n100.r08.s008.primers.bed\" -p \"n100.r08.s008_output/n100.r08.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam\" \"n100.r08.s008_output/n100.r08.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s008_output/n100.r08.s008.reference.fas\" \"n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam\" > \"n100.r08.s008_output/n100.r08.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s008_output/n100.r08.s008.reference.fas\" --call-indels \"n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam\" > \"n100.r08.s008_output/n100.r08.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam\" > \"n100.r08.s008_output/n100.r08.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s008_output/n100.r08.s008.depth.txt\" \"n100.r08.s008_output/n100.r08.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s008_output/n100.r08.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s008_output/n100.r08.s008.reference.fas\" | bcftools consensus -m \"n100.r08.s008_output/n100.r08.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s008_output/n100.r08.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 0e91bc71 (flow ac83cb33): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s065_output\"\n        wget -O \"n100.r08.s065_output/n100.r08.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s065_output/n100.r08.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s065_output/n100.r08.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s065_output/n100.r08.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s065_output/n100.r08.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s065_output/n100.r08.s065.reference.fas\" \"n100.r08.s065_output/n100.r08.s065.fq1.fastq\" \"n100.r08.s065_output/n100.r08.s065.fq2.fastq\" | samtools view -bS - > \"n100.r08.s065_output/n100.r08.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s065_output/n100.r08.s065.untrimmed.sorted.bam\" \"n100.r08.s065_output/n100.r08.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s065_output/n100.r08.s065.untrimmed.sorted.bam\" -b \"n100.r08.s065_output/n100.r08.s065.primers.bed\" -p \"n100.r08.s065_output/n100.r08.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam\" \"n100.r08.s065_output/n100.r08.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s065_output/n100.r08.s065.reference.fas\" \"n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam\" > \"n100.r08.s065_output/n100.r08.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s065_output/n100.r08.s065.reference.fas\" --call-indels \"n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam\" > \"n100.r08.s065_output/n100.r08.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam\" > \"n100.r08.s065_output/n100.r08.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s065_output/n100.r08.s065.depth.txt\" \"n100.r08.s065_output/n100.r08.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s065_output/n100.r08.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s065_output/n100.r08.s065.reference.fas\" | bcftools consensus -m \"n100.r08.s065_output/n100.r08.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s065_output/n100.r08.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 533c7302 (flow f2462fba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s069_output\"\n        wget -O \"n100.r08.s069_output/n100.r08.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s069_output/n100.r08.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s069_output/n100.r08.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s069_output/n100.r08.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s069_output/n100.r08.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s069_output/n100.r08.s069.reference.fas\" \"n100.r08.s069_output/n100.r08.s069.fq1.fastq\" \"n100.r08.s069_output/n100.r08.s069.fq2.fastq\" | samtools view -bS - > \"n100.r08.s069_output/n100.r08.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s069_output/n100.r08.s069.untrimmed.sorted.bam\" \"n100.r08.s069_output/n100.r08.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s069_output/n100.r08.s069.untrimmed.sorted.bam\" -b \"n100.r08.s069_output/n100.r08.s069.primers.bed\" -p \"n100.r08.s069_output/n100.r08.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam\" \"n100.r08.s069_output/n100.r08.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s069_output/n100.r08.s069.reference.fas\" \"n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam\" > \"n100.r08.s069_output/n100.r08.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s069_output/n100.r08.s069.reference.fas\" --call-indels \"n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam\" > \"n100.r08.s069_output/n100.r08.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam\" > \"n100.r08.s069_output/n100.r08.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s069_output/n100.r08.s069.depth.txt\" \"n100.r08.s069_output/n100.r08.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s069_output/n100.r08.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s069_output/n100.r08.s069.reference.fas\" | bcftools consensus -m \"n100.r08.s069_output/n100.r08.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s069_output/n100.r08.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 7ba99413 (flow 45b5a090): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s086_output\"\n        wget -O \"n100.r08.s086_output/n100.r08.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s086_output/n100.r08.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s086_output/n100.r08.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s086_output/n100.r08.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s086_output/n100.r08.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s086_output/n100.r08.s086.reference.fas\" \"n100.r08.s086_output/n100.r08.s086.fq1.fastq\" \"n100.r08.s086_output/n100.r08.s086.fq2.fastq\" | samtools view -bS - > \"n100.r08.s086_output/n100.r08.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s086_output/n100.r08.s086.untrimmed.sorted.bam\" \"n100.r08.s086_output/n100.r08.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s086_output/n100.r08.s086.untrimmed.sorted.bam\" -b \"n100.r08.s086_output/n100.r08.s086.primers.bed\" -p \"n100.r08.s086_output/n100.r08.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam\" \"n100.r08.s086_output/n100.r08.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s086_output/n100.r08.s086.reference.fas\" \"n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam\" > \"n100.r08.s086_output/n100.r08.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s086_output/n100.r08.s086.reference.fas\" --call-indels \"n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam\" > \"n100.r08.s086_output/n100.r08.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam\" > \"n100.r08.s086_output/n100.r08.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s086_output/n100.r08.s086.depth.txt\" \"n100.r08.s086_output/n100.r08.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s086_output/n100.r08.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s086_output/n100.r08.s086.reference.fas\" | bcftools consensus -m \"n100.r08.s086_output/n100.r08.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s086_output/n100.r08.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task fd88e144 (flow 30072890): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s030_output\"\n        wget -O \"n100.r08.s030_output/n100.r08.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s030_output/n100.r08.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s030_output/n100.r08.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s030_output/n100.r08.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s030_output/n100.r08.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s030_output/n100.r08.s030.reference.fas\" \"n100.r08.s030_output/n100.r08.s030.fq1.fastq\" \"n100.r08.s030_output/n100.r08.s030.fq2.fastq\" | samtools view -bS - > \"n100.r08.s030_output/n100.r08.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s030_output/n100.r08.s030.untrimmed.sorted.bam\" \"n100.r08.s030_output/n100.r08.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s030_output/n100.r08.s030.untrimmed.sorted.bam\" -b \"n100.r08.s030_output/n100.r08.s030.primers.bed\" -p \"n100.r08.s030_output/n100.r08.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam\" \"n100.r08.s030_output/n100.r08.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s030_output/n100.r08.s030.reference.fas\" \"n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam\" > \"n100.r08.s030_output/n100.r08.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s030_output/n100.r08.s030.reference.fas\" --call-indels \"n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam\" > \"n100.r08.s030_output/n100.r08.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam\" > \"n100.r08.s030_output/n100.r08.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s030_output/n100.r08.s030.depth.txt\" \"n100.r08.s030_output/n100.r08.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s030_output/n100.r08.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s030_output/n100.r08.s030.reference.fas\" | bcftools consensus -m \"n100.r08.s030_output/n100.r08.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s030_output/n100.r08.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task c4ff5c5f (flow 14e5610e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s098_output\"\n        wget -O \"n100.r08.s098_output/n100.r08.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s098_output/n100.r08.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s098_output/n100.r08.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s098_output/n100.r08.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s098_output/n100.r08.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s098_output/n100.r08.s098.reference.fas\" \"n100.r08.s098_output/n100.r08.s098.fq1.fastq\" \"n100.r08.s098_output/n100.r08.s098.fq2.fastq\" | samtools view -bS - > \"n100.r08.s098_output/n100.r08.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s098_output/n100.r08.s098.untrimmed.sorted.bam\" \"n100.r08.s098_output/n100.r08.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s098_output/n100.r08.s098.untrimmed.sorted.bam\" -b \"n100.r08.s098_output/n100.r08.s098.primers.bed\" -p \"n100.r08.s098_output/n100.r08.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam\" \"n100.r08.s098_output/n100.r08.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s098_output/n100.r08.s098.reference.fas\" \"n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam\" > \"n100.r08.s098_output/n100.r08.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s098_output/n100.r08.s098.reference.fas\" --call-indels \"n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam\" > \"n100.r08.s098_output/n100.r08.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam\" > \"n100.r08.s098_output/n100.r08.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s098_output/n100.r08.s098.depth.txt\" \"n100.r08.s098_output/n100.r08.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s098_output/n100.r08.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s098_output/n100.r08.s098.reference.fas\" | bcftools consensus -m \"n100.r08.s098_output/n100.r08.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s098_output/n100.r08.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 83e8a2d0 (flow cb20e356): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s017_output\"\n        wget -O \"n100.r08.s017_output/n100.r08.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s017_output/n100.r08.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s017_output/n100.r08.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s017_output/n100.r08.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s017_output/n100.r08.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s017_output/n100.r08.s017.reference.fas\" \"n100.r08.s017_output/n100.r08.s017.fq1.fastq\" \"n100.r08.s017_output/n100.r08.s017.fq2.fastq\" | samtools view -bS - > \"n100.r08.s017_output/n100.r08.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s017_output/n100.r08.s017.untrimmed.sorted.bam\" \"n100.r08.s017_output/n100.r08.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s017_output/n100.r08.s017.untrimmed.sorted.bam\" -b \"n100.r08.s017_output/n100.r08.s017.primers.bed\" -p \"n100.r08.s017_output/n100.r08.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam\" \"n100.r08.s017_output/n100.r08.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s017_output/n100.r08.s017.reference.fas\" \"n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam\" > \"n100.r08.s017_output/n100.r08.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s017_output/n100.r08.s017.reference.fas\" --call-indels \"n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam\" > \"n100.r08.s017_output/n100.r08.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam\" > \"n100.r08.s017_output/n100.r08.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s017_output/n100.r08.s017.depth.txt\" \"n100.r08.s017_output/n100.r08.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s017_output/n100.r08.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s017_output/n100.r08.s017.reference.fas\" | bcftools consensus -m \"n100.r08.s017_output/n100.r08.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s017_output/n100.r08.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e73506b2 (flow 6e531834): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s051_output\"\n        wget -O \"n100.r08.s051_output/n100.r08.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s051_output/n100.r08.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s051_output/n100.r08.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s051_output/n100.r08.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s051_output/n100.r08.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s051_output/n100.r08.s051.reference.fas\" \"n100.r08.s051_output/n100.r08.s051.fq1.fastq\" \"n100.r08.s051_output/n100.r08.s051.fq2.fastq\" | samtools view -bS - > \"n100.r08.s051_output/n100.r08.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s051_output/n100.r08.s051.untrimmed.sorted.bam\" \"n100.r08.s051_output/n100.r08.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s051_output/n100.r08.s051.untrimmed.sorted.bam\" -b \"n100.r08.s051_output/n100.r08.s051.primers.bed\" -p \"n100.r08.s051_output/n100.r08.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam\" \"n100.r08.s051_output/n100.r08.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s051_output/n100.r08.s051.reference.fas\" \"n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam\" > \"n100.r08.s051_output/n100.r08.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s051_output/n100.r08.s051.reference.fas\" --call-indels \"n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam\" > \"n100.r08.s051_output/n100.r08.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam\" > \"n100.r08.s051_output/n100.r08.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s051_output/n100.r08.s051.depth.txt\" \"n100.r08.s051_output/n100.r08.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s051_output/n100.r08.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s051_output/n100.r08.s051.reference.fas\" | bcftools consensus -m \"n100.r08.s051_output/n100.r08.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s051_output/n100.r08.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 11cbb428 (flow 6e2216d0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s004_output\"\n        wget -O \"n100.r08.s004_output/n100.r08.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s004_output/n100.r08.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s004_output/n100.r08.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s004_output/n100.r08.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s004_output/n100.r08.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s004_output/n100.r08.s004.reference.fas\" \"n100.r08.s004_output/n100.r08.s004.fq1.fastq\" \"n100.r08.s004_output/n100.r08.s004.fq2.fastq\" | samtools view -bS - > \"n100.r08.s004_output/n100.r08.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s004_output/n100.r08.s004.untrimmed.sorted.bam\" \"n100.r08.s004_output/n100.r08.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s004_output/n100.r08.s004.untrimmed.sorted.bam\" -b \"n100.r08.s004_output/n100.r08.s004.primers.bed\" -p \"n100.r08.s004_output/n100.r08.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam\" \"n100.r08.s004_output/n100.r08.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s004_output/n100.r08.s004.reference.fas\" \"n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam\" > \"n100.r08.s004_output/n100.r08.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s004_output/n100.r08.s004.reference.fas\" --call-indels \"n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam\" > \"n100.r08.s004_output/n100.r08.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam\" > \"n100.r08.s004_output/n100.r08.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s004_output/n100.r08.s004.depth.txt\" \"n100.r08.s004_output/n100.r08.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s004_output/n100.r08.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s004_output/n100.r08.s004.reference.fas\" | bcftools consensus -m \"n100.r08.s004_output/n100.r08.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s004_output/n100.r08.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 13af5d5a (flow 0b3effbc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s027_output\"\n        wget -O \"n100.r08.s027_output/n100.r08.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s027_output/n100.r08.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s027_output/n100.r08.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s027_output/n100.r08.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s027_output/n100.r08.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s027_output/n100.r08.s027.reference.fas\" \"n100.r08.s027_output/n100.r08.s027.fq1.fastq\" \"n100.r08.s027_output/n100.r08.s027.fq2.fastq\" | samtools view -bS - > \"n100.r08.s027_output/n100.r08.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s027_output/n100.r08.s027.untrimmed.sorted.bam\" \"n100.r08.s027_output/n100.r08.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s027_output/n100.r08.s027.untrimmed.sorted.bam\" -b \"n100.r08.s027_output/n100.r08.s027.primers.bed\" -p \"n100.r08.s027_output/n100.r08.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam\" \"n100.r08.s027_output/n100.r08.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s027_output/n100.r08.s027.reference.fas\" \"n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam\" > \"n100.r08.s027_output/n100.r08.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s027_output/n100.r08.s027.reference.fas\" --call-indels \"n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam\" > \"n100.r08.s027_output/n100.r08.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam\" > \"n100.r08.s027_output/n100.r08.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s027_output/n100.r08.s027.depth.txt\" \"n100.r08.s027_output/n100.r08.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s027_output/n100.r08.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s027_output/n100.r08.s027.reference.fas\" | bcftools consensus -m \"n100.r08.s027_output/n100.r08.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s027_output/n100.r08.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 7e57f1b6 (flow 8e45de36): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s026_output\"\n        wget -O \"n100.r08.s026_output/n100.r08.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s026_output/n100.r08.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s026_output/n100.r08.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s026_output/n100.r08.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s026_output/n100.r08.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s026_output/n100.r08.s026.reference.fas\" \"n100.r08.s026_output/n100.r08.s026.fq1.fastq\" \"n100.r08.s026_output/n100.r08.s026.fq2.fastq\" | samtools view -bS - > \"n100.r08.s026_output/n100.r08.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s026_output/n100.r08.s026.untrimmed.sorted.bam\" \"n100.r08.s026_output/n100.r08.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s026_output/n100.r08.s026.untrimmed.sorted.bam\" -b \"n100.r08.s026_output/n100.r08.s026.primers.bed\" -p \"n100.r08.s026_output/n100.r08.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam\" \"n100.r08.s026_output/n100.r08.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s026_output/n100.r08.s026.reference.fas\" \"n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam\" > \"n100.r08.s026_output/n100.r08.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s026_output/n100.r08.s026.reference.fas\" --call-indels \"n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam\" > \"n100.r08.s026_output/n100.r08.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam\" > \"n100.r08.s026_output/n100.r08.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s026_output/n100.r08.s026.depth.txt\" \"n100.r08.s026_output/n100.r08.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s026_output/n100.r08.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s026_output/n100.r08.s026.reference.fas\" | bcftools consensus -m \"n100.r08.s026_output/n100.r08.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s026_output/n100.r08.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 96cdb789 (flow 37acff54): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s087_output\"\n        wget -O \"n100.r08.s087_output/n100.r08.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s087_output/n100.r08.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s087_output/n100.r08.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s087_output/n100.r08.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s087_output/n100.r08.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s087_output/n100.r08.s087.reference.fas\" \"n100.r08.s087_output/n100.r08.s087.fq1.fastq\" \"n100.r08.s087_output/n100.r08.s087.fq2.fastq\" | samtools view -bS - > \"n100.r08.s087_output/n100.r08.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s087_output/n100.r08.s087.untrimmed.sorted.bam\" \"n100.r08.s087_output/n100.r08.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s087_output/n100.r08.s087.untrimmed.sorted.bam\" -b \"n100.r08.s087_output/n100.r08.s087.primers.bed\" -p \"n100.r08.s087_output/n100.r08.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam\" \"n100.r08.s087_output/n100.r08.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s087_output/n100.r08.s087.reference.fas\" \"n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam\" > \"n100.r08.s087_output/n100.r08.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s087_output/n100.r08.s087.reference.fas\" --call-indels \"n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam\" > \"n100.r08.s087_output/n100.r08.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam\" > \"n100.r08.s087_output/n100.r08.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s087_output/n100.r08.s087.depth.txt\" \"n100.r08.s087_output/n100.r08.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s087_output/n100.r08.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s087_output/n100.r08.s087.reference.fas\" | bcftools consensus -m \"n100.r08.s087_output/n100.r08.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s087_output/n100.r08.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task acb01e0b (flow b6de7c5d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s058_output\"\n        wget -O \"n100.r08.s058_output/n100.r08.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s058_output/n100.r08.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s058_output/n100.r08.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s058_output/n100.r08.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s058_output/n100.r08.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s058_output/n100.r08.s058.reference.fas\" \"n100.r08.s058_output/n100.r08.s058.fq1.fastq\" \"n100.r08.s058_output/n100.r08.s058.fq2.fastq\" | samtools view -bS - > \"n100.r08.s058_output/n100.r08.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s058_output/n100.r08.s058.untrimmed.sorted.bam\" \"n100.r08.s058_output/n100.r08.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s058_output/n100.r08.s058.untrimmed.sorted.bam\" -b \"n100.r08.s058_output/n100.r08.s058.primers.bed\" -p \"n100.r08.s058_output/n100.r08.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam\" \"n100.r08.s058_output/n100.r08.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s058_output/n100.r08.s058.reference.fas\" \"n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam\" > \"n100.r08.s058_output/n100.r08.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s058_output/n100.r08.s058.reference.fas\" --call-indels \"n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam\" > \"n100.r08.s058_output/n100.r08.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam\" > \"n100.r08.s058_output/n100.r08.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s058_output/n100.r08.s058.depth.txt\" \"n100.r08.s058_output/n100.r08.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s058_output/n100.r08.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s058_output/n100.r08.s058.reference.fas\" | bcftools consensus -m \"n100.r08.s058_output/n100.r08.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s058_output/n100.r08.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 3579f14e (flow ec208550): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s059_output\"\n        wget -O \"n100.r08.s059_output/n100.r08.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s059_output/n100.r08.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s059_output/n100.r08.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s059_output/n100.r08.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s059_output/n100.r08.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s059_output/n100.r08.s059.reference.fas\" \"n100.r08.s059_output/n100.r08.s059.fq1.fastq\" \"n100.r08.s059_output/n100.r08.s059.fq2.fastq\" | samtools view -bS - > \"n100.r08.s059_output/n100.r08.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s059_output/n100.r08.s059.untrimmed.sorted.bam\" \"n100.r08.s059_output/n100.r08.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s059_output/n100.r08.s059.untrimmed.sorted.bam\" -b \"n100.r08.s059_output/n100.r08.s059.primers.bed\" -p \"n100.r08.s059_output/n100.r08.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam\" \"n100.r08.s059_output/n100.r08.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s059_output/n100.r08.s059.reference.fas\" \"n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam\" > \"n100.r08.s059_output/n100.r08.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s059_output/n100.r08.s059.reference.fas\" --call-indels \"n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam\" > \"n100.r08.s059_output/n100.r08.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam\" > \"n100.r08.s059_output/n100.r08.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s059_output/n100.r08.s059.depth.txt\" \"n100.r08.s059_output/n100.r08.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s059_output/n100.r08.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s059_output/n100.r08.s059.reference.fas\" | bcftools consensus -m \"n100.r08.s059_output/n100.r08.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s059_output/n100.r08.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 6fc6d1e0 (flow edf8b1db): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s054_output\"\n        wget -O \"n100.r08.s054_output/n100.r08.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s054_output/n100.r08.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s054_output/n100.r08.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s054_output/n100.r08.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s054_output/n100.r08.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s054_output/n100.r08.s054.reference.fas\" \"n100.r08.s054_output/n100.r08.s054.fq1.fastq\" \"n100.r08.s054_output/n100.r08.s054.fq2.fastq\" | samtools view -bS - > \"n100.r08.s054_output/n100.r08.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s054_output/n100.r08.s054.untrimmed.sorted.bam\" \"n100.r08.s054_output/n100.r08.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s054_output/n100.r08.s054.untrimmed.sorted.bam\" -b \"n100.r08.s054_output/n100.r08.s054.primers.bed\" -p \"n100.r08.s054_output/n100.r08.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam\" \"n100.r08.s054_output/n100.r08.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s054_output/n100.r08.s054.reference.fas\" \"n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam\" > \"n100.r08.s054_output/n100.r08.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s054_output/n100.r08.s054.reference.fas\" --call-indels \"n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam\" > \"n100.r08.s054_output/n100.r08.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam\" > \"n100.r08.s054_output/n100.r08.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s054_output/n100.r08.s054.depth.txt\" \"n100.r08.s054_output/n100.r08.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s054_output/n100.r08.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s054_output/n100.r08.s054.reference.fas\" | bcftools consensus -m \"n100.r08.s054_output/n100.r08.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s054_output/n100.r08.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task d57d51d4 (flow 714a362d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s038_output\"\n        wget -O \"n100.r08.s038_output/n100.r08.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s038_output/n100.r08.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s038_output/n100.r08.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s038_output/n100.r08.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s038_output/n100.r08.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s038_output/n100.r08.s038.reference.fas\" \"n100.r08.s038_output/n100.r08.s038.fq1.fastq\" \"n100.r08.s038_output/n100.r08.s038.fq2.fastq\" | samtools view -bS - > \"n100.r08.s038_output/n100.r08.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s038_output/n100.r08.s038.untrimmed.sorted.bam\" \"n100.r08.s038_output/n100.r08.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s038_output/n100.r08.s038.untrimmed.sorted.bam\" -b \"n100.r08.s038_output/n100.r08.s038.primers.bed\" -p \"n100.r08.s038_output/n100.r08.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam\" \"n100.r08.s038_output/n100.r08.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s038_output/n100.r08.s038.reference.fas\" \"n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam\" > \"n100.r08.s038_output/n100.r08.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s038_output/n100.r08.s038.reference.fas\" --call-indels \"n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam\" > \"n100.r08.s038_output/n100.r08.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam\" > \"n100.r08.s038_output/n100.r08.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s038_output/n100.r08.s038.depth.txt\" \"n100.r08.s038_output/n100.r08.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s038_output/n100.r08.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s038_output/n100.r08.s038.reference.fas\" | bcftools consensus -m \"n100.r08.s038_output/n100.r08.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s038_output/n100.r08.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task a660f2ec (flow abfbfcf5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s003_output\"\n        wget -O \"n100.r08.s003_output/n100.r08.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s003_output/n100.r08.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s003_output/n100.r08.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s003_output/n100.r08.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s003_output/n100.r08.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s003_output/n100.r08.s003.reference.fas\" \"n100.r08.s003_output/n100.r08.s003.fq1.fastq\" \"n100.r08.s003_output/n100.r08.s003.fq2.fastq\" | samtools view -bS - > \"n100.r08.s003_output/n100.r08.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s003_output/n100.r08.s003.untrimmed.sorted.bam\" \"n100.r08.s003_output/n100.r08.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s003_output/n100.r08.s003.untrimmed.sorted.bam\" -b \"n100.r08.s003_output/n100.r08.s003.primers.bed\" -p \"n100.r08.s003_output/n100.r08.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam\" \"n100.r08.s003_output/n100.r08.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s003_output/n100.r08.s003.reference.fas\" \"n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam\" > \"n100.r08.s003_output/n100.r08.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s003_output/n100.r08.s003.reference.fas\" --call-indels \"n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam\" > \"n100.r08.s003_output/n100.r08.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam\" > \"n100.r08.s003_output/n100.r08.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s003_output/n100.r08.s003.depth.txt\" \"n100.r08.s003_output/n100.r08.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s003_output/n100.r08.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s003_output/n100.r08.s003.reference.fas\" | bcftools consensus -m \"n100.r08.s003_output/n100.r08.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s003_output/n100.r08.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 0004b3b5 (flow 509a6465): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s011_output\"\n        wget -O \"n100.r08.s011_output/n100.r08.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s011_output/n100.r08.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s011_output/n100.r08.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s011_output/n100.r08.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s011_output/n100.r08.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s011_output/n100.r08.s011.reference.fas\" \"n100.r08.s011_output/n100.r08.s011.fq1.fastq\" \"n100.r08.s011_output/n100.r08.s011.fq2.fastq\" | samtools view -bS - > \"n100.r08.s011_output/n100.r08.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s011_output/n100.r08.s011.untrimmed.sorted.bam\" \"n100.r08.s011_output/n100.r08.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s011_output/n100.r08.s011.untrimmed.sorted.bam\" -b \"n100.r08.s011_output/n100.r08.s011.primers.bed\" -p \"n100.r08.s011_output/n100.r08.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam\" \"n100.r08.s011_output/n100.r08.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s011_output/n100.r08.s011.reference.fas\" \"n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam\" > \"n100.r08.s011_output/n100.r08.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s011_output/n100.r08.s011.reference.fas\" --call-indels \"n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam\" > \"n100.r08.s011_output/n100.r08.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam\" > \"n100.r08.s011_output/n100.r08.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s011_output/n100.r08.s011.depth.txt\" \"n100.r08.s011_output/n100.r08.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s011_output/n100.r08.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s011_output/n100.r08.s011.reference.fas\" | bcftools consensus -m \"n100.r08.s011_output/n100.r08.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s011_output/n100.r08.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 2bd7a6bf (flow ebe32457): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s001_output\"\n        wget -O \"n100.r08.s001_output/n100.r08.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s001_output/n100.r08.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s001_output/n100.r08.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s001_output/n100.r08.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s001_output/n100.r08.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s001_output/n100.r08.s001.reference.fas\" \"n100.r08.s001_output/n100.r08.s001.fq1.fastq\" \"n100.r08.s001_output/n100.r08.s001.fq2.fastq\" | samtools view -bS - > \"n100.r08.s001_output/n100.r08.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s001_output/n100.r08.s001.untrimmed.sorted.bam\" \"n100.r08.s001_output/n100.r08.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s001_output/n100.r08.s001.untrimmed.sorted.bam\" -b \"n100.r08.s001_output/n100.r08.s001.primers.bed\" -p \"n100.r08.s001_output/n100.r08.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam\" \"n100.r08.s001_output/n100.r08.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s001_output/n100.r08.s001.reference.fas\" \"n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam\" > \"n100.r08.s001_output/n100.r08.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s001_output/n100.r08.s001.reference.fas\" --call-indels \"n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam\" > \"n100.r08.s001_output/n100.r08.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam\" > \"n100.r08.s001_output/n100.r08.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s001_output/n100.r08.s001.depth.txt\" \"n100.r08.s001_output/n100.r08.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s001_output/n100.r08.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s001_output/n100.r08.s001.reference.fas\" | bcftools consensus -m \"n100.r08.s001_output/n100.r08.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s001_output/n100.r08.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 4990178e (flow eda0dc49): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s031_output\"\n        wget -O \"n100.r08.s031_output/n100.r08.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s031_output/n100.r08.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s031_output/n100.r08.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s031_output/n100.r08.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s031_output/n100.r08.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s031_output/n100.r08.s031.reference.fas\" \"n100.r08.s031_output/n100.r08.s031.fq1.fastq\" \"n100.r08.s031_output/n100.r08.s031.fq2.fastq\" | samtools view -bS - > \"n100.r08.s031_output/n100.r08.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s031_output/n100.r08.s031.untrimmed.sorted.bam\" \"n100.r08.s031_output/n100.r08.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s031_output/n100.r08.s031.untrimmed.sorted.bam\" -b \"n100.r08.s031_output/n100.r08.s031.primers.bed\" -p \"n100.r08.s031_output/n100.r08.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam\" \"n100.r08.s031_output/n100.r08.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s031_output/n100.r08.s031.reference.fas\" \"n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam\" > \"n100.r08.s031_output/n100.r08.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s031_output/n100.r08.s031.reference.fas\" --call-indels \"n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam\" > \"n100.r08.s031_output/n100.r08.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam\" > \"n100.r08.s031_output/n100.r08.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s031_output/n100.r08.s031.depth.txt\" \"n100.r08.s031_output/n100.r08.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s031_output/n100.r08.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s031_output/n100.r08.s031.reference.fas\" | bcftools consensus -m \"n100.r08.s031_output/n100.r08.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s031_output/n100.r08.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 77ea896f (flow 6e71356b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s055_output\"\n        wget -O \"n100.r08.s055_output/n100.r08.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s055_output/n100.r08.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s055_output/n100.r08.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s055_output/n100.r08.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s055_output/n100.r08.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s055_output/n100.r08.s055.reference.fas\" \"n100.r08.s055_output/n100.r08.s055.fq1.fastq\" \"n100.r08.s055_output/n100.r08.s055.fq2.fastq\" | samtools view -bS - > \"n100.r08.s055_output/n100.r08.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s055_output/n100.r08.s055.untrimmed.sorted.bam\" \"n100.r08.s055_output/n100.r08.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s055_output/n100.r08.s055.untrimmed.sorted.bam\" -b \"n100.r08.s055_output/n100.r08.s055.primers.bed\" -p \"n100.r08.s055_output/n100.r08.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam\" \"n100.r08.s055_output/n100.r08.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s055_output/n100.r08.s055.reference.fas\" \"n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam\" > \"n100.r08.s055_output/n100.r08.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s055_output/n100.r08.s055.reference.fas\" --call-indels \"n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam\" > \"n100.r08.s055_output/n100.r08.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam\" > \"n100.r08.s055_output/n100.r08.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s055_output/n100.r08.s055.depth.txt\" \"n100.r08.s055_output/n100.r08.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s055_output/n100.r08.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s055_output/n100.r08.s055.reference.fas\" | bcftools consensus -m \"n100.r08.s055_output/n100.r08.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s055_output/n100.r08.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task d1b0c57e (flow 769f8790): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s013_output\"\n        wget -O \"n100.r08.s013_output/n100.r08.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s013_output/n100.r08.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s013_output/n100.r08.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s013_output/n100.r08.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s013_output/n100.r08.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s013_output/n100.r08.s013.reference.fas\" \"n100.r08.s013_output/n100.r08.s013.fq1.fastq\" \"n100.r08.s013_output/n100.r08.s013.fq2.fastq\" | samtools view -bS - > \"n100.r08.s013_output/n100.r08.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s013_output/n100.r08.s013.untrimmed.sorted.bam\" \"n100.r08.s013_output/n100.r08.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s013_output/n100.r08.s013.untrimmed.sorted.bam\" -b \"n100.r08.s013_output/n100.r08.s013.primers.bed\" -p \"n100.r08.s013_output/n100.r08.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam\" \"n100.r08.s013_output/n100.r08.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s013_output/n100.r08.s013.reference.fas\" \"n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam\" > \"n100.r08.s013_output/n100.r08.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s013_output/n100.r08.s013.reference.fas\" --call-indels \"n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam\" > \"n100.r08.s013_output/n100.r08.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam\" > \"n100.r08.s013_output/n100.r08.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s013_output/n100.r08.s013.depth.txt\" \"n100.r08.s013_output/n100.r08.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s013_output/n100.r08.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s013_output/n100.r08.s013.reference.fas\" | bcftools consensus -m \"n100.r08.s013_output/n100.r08.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s013_output/n100.r08.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e7dd9705 (flow 15301ea9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s039_output\"\n        wget -O \"n100.r08.s039_output/n100.r08.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s039_output/n100.r08.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s039_output/n100.r08.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s039_output/n100.r08.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s039_output/n100.r08.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s039_output/n100.r08.s039.reference.fas\" \"n100.r08.s039_output/n100.r08.s039.fq1.fastq\" \"n100.r08.s039_output/n100.r08.s039.fq2.fastq\" | samtools view -bS - > \"n100.r08.s039_output/n100.r08.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s039_output/n100.r08.s039.untrimmed.sorted.bam\" \"n100.r08.s039_output/n100.r08.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s039_output/n100.r08.s039.untrimmed.sorted.bam\" -b \"n100.r08.s039_output/n100.r08.s039.primers.bed\" -p \"n100.r08.s039_output/n100.r08.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam\" \"n100.r08.s039_output/n100.r08.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s039_output/n100.r08.s039.reference.fas\" \"n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam\" > \"n100.r08.s039_output/n100.r08.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s039_output/n100.r08.s039.reference.fas\" --call-indels \"n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam\" > \"n100.r08.s039_output/n100.r08.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam\" > \"n100.r08.s039_output/n100.r08.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s039_output/n100.r08.s039.depth.txt\" \"n100.r08.s039_output/n100.r08.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s039_output/n100.r08.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s039_output/n100.r08.s039.reference.fas\" | bcftools consensus -m \"n100.r08.s039_output/n100.r08.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s039_output/n100.r08.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task a3702691 (flow f12b0ac7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s080_output\"\n        wget -O \"n100.r08.s080_output/n100.r08.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s080_output/n100.r08.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s080_output/n100.r08.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s080_output/n100.r08.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s080_output/n100.r08.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s080_output/n100.r08.s080.reference.fas\" \"n100.r08.s080_output/n100.r08.s080.fq1.fastq\" \"n100.r08.s080_output/n100.r08.s080.fq2.fastq\" | samtools view -bS - > \"n100.r08.s080_output/n100.r08.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s080_output/n100.r08.s080.untrimmed.sorted.bam\" \"n100.r08.s080_output/n100.r08.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s080_output/n100.r08.s080.untrimmed.sorted.bam\" -b \"n100.r08.s080_output/n100.r08.s080.primers.bed\" -p \"n100.r08.s080_output/n100.r08.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam\" \"n100.r08.s080_output/n100.r08.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s080_output/n100.r08.s080.reference.fas\" \"n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam\" > \"n100.r08.s080_output/n100.r08.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s080_output/n100.r08.s080.reference.fas\" --call-indels \"n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam\" > \"n100.r08.s080_output/n100.r08.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam\" > \"n100.r08.s080_output/n100.r08.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s080_output/n100.r08.s080.depth.txt\" \"n100.r08.s080_output/n100.r08.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s080_output/n100.r08.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s080_output/n100.r08.s080.reference.fas\" | bcftools consensus -m \"n100.r08.s080_output/n100.r08.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s080_output/n100.r08.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 4fc2765c (flow b30b76d2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s022_output\"\n        wget -O \"n100.r08.s022_output/n100.r08.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s022_output/n100.r08.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s022_output/n100.r08.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s022_output/n100.r08.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s022_output/n100.r08.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s022_output/n100.r08.s022.reference.fas\" \"n100.r08.s022_output/n100.r08.s022.fq1.fastq\" \"n100.r08.s022_output/n100.r08.s022.fq2.fastq\" | samtools view -bS - > \"n100.r08.s022_output/n100.r08.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s022_output/n100.r08.s022.untrimmed.sorted.bam\" \"n100.r08.s022_output/n100.r08.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s022_output/n100.r08.s022.untrimmed.sorted.bam\" -b \"n100.r08.s022_output/n100.r08.s022.primers.bed\" -p \"n100.r08.s022_output/n100.r08.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam\" \"n100.r08.s022_output/n100.r08.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s022_output/n100.r08.s022.reference.fas\" \"n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam\" > \"n100.r08.s022_output/n100.r08.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s022_output/n100.r08.s022.reference.fas\" --call-indels \"n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam\" > \"n100.r08.s022_output/n100.r08.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam\" > \"n100.r08.s022_output/n100.r08.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s022_output/n100.r08.s022.depth.txt\" \"n100.r08.s022_output/n100.r08.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s022_output/n100.r08.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s022_output/n100.r08.s022.reference.fas\" | bcftools consensus -m \"n100.r08.s022_output/n100.r08.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s022_output/n100.r08.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 27109b10 (flow 11e863f7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s005_output\"\n        wget -O \"n100.r08.s005_output/n100.r08.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s005_output/n100.r08.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s005_output/n100.r08.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s005_output/n100.r08.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s005_output/n100.r08.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s005_output/n100.r08.s005.reference.fas\" \"n100.r08.s005_output/n100.r08.s005.fq1.fastq\" \"n100.r08.s005_output/n100.r08.s005.fq2.fastq\" | samtools view -bS - > \"n100.r08.s005_output/n100.r08.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s005_output/n100.r08.s005.untrimmed.sorted.bam\" \"n100.r08.s005_output/n100.r08.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s005_output/n100.r08.s005.untrimmed.sorted.bam\" -b \"n100.r08.s005_output/n100.r08.s005.primers.bed\" -p \"n100.r08.s005_output/n100.r08.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam\" \"n100.r08.s005_output/n100.r08.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s005_output/n100.r08.s005.reference.fas\" \"n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam\" > \"n100.r08.s005_output/n100.r08.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s005_output/n100.r08.s005.reference.fas\" --call-indels \"n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam\" > \"n100.r08.s005_output/n100.r08.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam\" > \"n100.r08.s005_output/n100.r08.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s005_output/n100.r08.s005.depth.txt\" \"n100.r08.s005_output/n100.r08.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s005_output/n100.r08.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s005_output/n100.r08.s005.reference.fas\" | bcftools consensus -m \"n100.r08.s005_output/n100.r08.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s005_output/n100.r08.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task b3c857b7 (flow 5fa48c75): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s068_output\"\n        wget -O \"n100.r08.s068_output/n100.r08.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s068_output/n100.r08.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s068_output/n100.r08.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s068_output/n100.r08.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s068_output/n100.r08.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s068_output/n100.r08.s068.reference.fas\" \"n100.r08.s068_output/n100.r08.s068.fq1.fastq\" \"n100.r08.s068_output/n100.r08.s068.fq2.fastq\" | samtools view -bS - > \"n100.r08.s068_output/n100.r08.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s068_output/n100.r08.s068.untrimmed.sorted.bam\" \"n100.r08.s068_output/n100.r08.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s068_output/n100.r08.s068.untrimmed.sorted.bam\" -b \"n100.r08.s068_output/n100.r08.s068.primers.bed\" -p \"n100.r08.s068_output/n100.r08.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam\" \"n100.r08.s068_output/n100.r08.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s068_output/n100.r08.s068.reference.fas\" \"n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam\" > \"n100.r08.s068_output/n100.r08.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s068_output/n100.r08.s068.reference.fas\" --call-indels \"n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam\" > \"n100.r08.s068_output/n100.r08.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam\" > \"n100.r08.s068_output/n100.r08.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s068_output/n100.r08.s068.depth.txt\" \"n100.r08.s068_output/n100.r08.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s068_output/n100.r08.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s068_output/n100.r08.s068.reference.fas\" | bcftools consensus -m \"n100.r08.s068_output/n100.r08.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s068_output/n100.r08.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task aad793f7 (flow eaaaa641): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s094_output\"\n        wget -O \"n100.r08.s094_output/n100.r08.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s094_output/n100.r08.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s094_output/n100.r08.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s094_output/n100.r08.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s094_output/n100.r08.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s094_output/n100.r08.s094.reference.fas\" \"n100.r08.s094_output/n100.r08.s094.fq1.fastq\" \"n100.r08.s094_output/n100.r08.s094.fq2.fastq\" | samtools view -bS - > \"n100.r08.s094_output/n100.r08.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s094_output/n100.r08.s094.untrimmed.sorted.bam\" \"n100.r08.s094_output/n100.r08.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s094_output/n100.r08.s094.untrimmed.sorted.bam\" -b \"n100.r08.s094_output/n100.r08.s094.primers.bed\" -p \"n100.r08.s094_output/n100.r08.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam\" \"n100.r08.s094_output/n100.r08.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s094_output/n100.r08.s094.reference.fas\" \"n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam\" > \"n100.r08.s094_output/n100.r08.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s094_output/n100.r08.s094.reference.fas\" --call-indels \"n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam\" > \"n100.r08.s094_output/n100.r08.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam\" > \"n100.r08.s094_output/n100.r08.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s094_output/n100.r08.s094.depth.txt\" \"n100.r08.s094_output/n100.r08.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s094_output/n100.r08.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s094_output/n100.r08.s094.reference.fas\" | bcftools consensus -m \"n100.r08.s094_output/n100.r08.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s094_output/n100.r08.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 719f8479 (flow bc3f293a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s060_output\"\n        wget -O \"n100.r08.s060_output/n100.r08.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s060_output/n100.r08.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s060_output/n100.r08.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s060_output/n100.r08.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s060_output/n100.r08.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s060_output/n100.r08.s060.reference.fas\" \"n100.r08.s060_output/n100.r08.s060.fq1.fastq\" \"n100.r08.s060_output/n100.r08.s060.fq2.fastq\" | samtools view -bS - > \"n100.r08.s060_output/n100.r08.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s060_output/n100.r08.s060.untrimmed.sorted.bam\" \"n100.r08.s060_output/n100.r08.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s060_output/n100.r08.s060.untrimmed.sorted.bam\" -b \"n100.r08.s060_output/n100.r08.s060.primers.bed\" -p \"n100.r08.s060_output/n100.r08.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam\" \"n100.r08.s060_output/n100.r08.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s060_output/n100.r08.s060.reference.fas\" \"n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam\" > \"n100.r08.s060_output/n100.r08.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s060_output/n100.r08.s060.reference.fas\" --call-indels \"n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam\" > \"n100.r08.s060_output/n100.r08.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam\" > \"n100.r08.s060_output/n100.r08.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s060_output/n100.r08.s060.depth.txt\" \"n100.r08.s060_output/n100.r08.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s060_output/n100.r08.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s060_output/n100.r08.s060.reference.fas\" | bcftools consensus -m \"n100.r08.s060_output/n100.r08.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s060_output/n100.r08.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 1e17310e (flow 4be7c800): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s015_output\"\n        wget -O \"n100.r08.s015_output/n100.r08.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s015_output/n100.r08.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s015_output/n100.r08.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s015_output/n100.r08.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s015_output/n100.r08.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s015_output/n100.r08.s015.reference.fas\" \"n100.r08.s015_output/n100.r08.s015.fq1.fastq\" \"n100.r08.s015_output/n100.r08.s015.fq2.fastq\" | samtools view -bS - > \"n100.r08.s015_output/n100.r08.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s015_output/n100.r08.s015.untrimmed.sorted.bam\" \"n100.r08.s015_output/n100.r08.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s015_output/n100.r08.s015.untrimmed.sorted.bam\" -b \"n100.r08.s015_output/n100.r08.s015.primers.bed\" -p \"n100.r08.s015_output/n100.r08.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam\" \"n100.r08.s015_output/n100.r08.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s015_output/n100.r08.s015.reference.fas\" \"n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam\" > \"n100.r08.s015_output/n100.r08.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s015_output/n100.r08.s015.reference.fas\" --call-indels \"n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam\" > \"n100.r08.s015_output/n100.r08.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam\" > \"n100.r08.s015_output/n100.r08.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s015_output/n100.r08.s015.depth.txt\" \"n100.r08.s015_output/n100.r08.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s015_output/n100.r08.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s015_output/n100.r08.s015.reference.fas\" | bcftools consensus -m \"n100.r08.s015_output/n100.r08.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s015_output/n100.r08.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 9ae8bc0a (flow b42d9724): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s042_output\"\n        wget -O \"n100.r08.s042_output/n100.r08.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s042_output/n100.r08.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s042_output/n100.r08.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s042_output/n100.r08.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s042_output/n100.r08.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s042_output/n100.r08.s042.reference.fas\" \"n100.r08.s042_output/n100.r08.s042.fq1.fastq\" \"n100.r08.s042_output/n100.r08.s042.fq2.fastq\" | samtools view -bS - > \"n100.r08.s042_output/n100.r08.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s042_output/n100.r08.s042.untrimmed.sorted.bam\" \"n100.r08.s042_output/n100.r08.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s042_output/n100.r08.s042.untrimmed.sorted.bam\" -b \"n100.r08.s042_output/n100.r08.s042.primers.bed\" -p \"n100.r08.s042_output/n100.r08.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam\" \"n100.r08.s042_output/n100.r08.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s042_output/n100.r08.s042.reference.fas\" \"n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam\" > \"n100.r08.s042_output/n100.r08.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s042_output/n100.r08.s042.reference.fas\" --call-indels \"n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam\" > \"n100.r08.s042_output/n100.r08.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam\" > \"n100.r08.s042_output/n100.r08.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s042_output/n100.r08.s042.depth.txt\" \"n100.r08.s042_output/n100.r08.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s042_output/n100.r08.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s042_output/n100.r08.s042.reference.fas\" | bcftools consensus -m \"n100.r08.s042_output/n100.r08.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s042_output/n100.r08.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task c04eb0c7 (flow 37139f88): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s052_output\"\n        wget -O \"n100.r08.s052_output/n100.r08.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s052_output/n100.r08.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s052_output/n100.r08.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s052_output/n100.r08.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s052_output/n100.r08.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s052_output/n100.r08.s052.reference.fas\" \"n100.r08.s052_output/n100.r08.s052.fq1.fastq\" \"n100.r08.s052_output/n100.r08.s052.fq2.fastq\" | samtools view -bS - > \"n100.r08.s052_output/n100.r08.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s052_output/n100.r08.s052.untrimmed.sorted.bam\" \"n100.r08.s052_output/n100.r08.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s052_output/n100.r08.s052.untrimmed.sorted.bam\" -b \"n100.r08.s052_output/n100.r08.s052.primers.bed\" -p \"n100.r08.s052_output/n100.r08.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam\" \"n100.r08.s052_output/n100.r08.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s052_output/n100.r08.s052.reference.fas\" \"n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam\" > \"n100.r08.s052_output/n100.r08.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s052_output/n100.r08.s052.reference.fas\" --call-indels \"n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam\" > \"n100.r08.s052_output/n100.r08.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam\" > \"n100.r08.s052_output/n100.r08.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s052_output/n100.r08.s052.depth.txt\" \"n100.r08.s052_output/n100.r08.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s052_output/n100.r08.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s052_output/n100.r08.s052.reference.fas\" | bcftools consensus -m \"n100.r08.s052_output/n100.r08.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s052_output/n100.r08.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task cef151a9 (flow ae810609): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s096_output\"\n        wget -O \"n100.r08.s096_output/n100.r08.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s096_output/n100.r08.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s096_output/n100.r08.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s096_output/n100.r08.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s096_output/n100.r08.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s096_output/n100.r08.s096.reference.fas\" \"n100.r08.s096_output/n100.r08.s096.fq1.fastq\" \"n100.r08.s096_output/n100.r08.s096.fq2.fastq\" | samtools view -bS - > \"n100.r08.s096_output/n100.r08.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s096_output/n100.r08.s096.untrimmed.sorted.bam\" \"n100.r08.s096_output/n100.r08.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s096_output/n100.r08.s096.untrimmed.sorted.bam\" -b \"n100.r08.s096_output/n100.r08.s096.primers.bed\" -p \"n100.r08.s096_output/n100.r08.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam\" \"n100.r08.s096_output/n100.r08.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s096_output/n100.r08.s096.reference.fas\" \"n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam\" > \"n100.r08.s096_output/n100.r08.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s096_output/n100.r08.s096.reference.fas\" --call-indels \"n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam\" > \"n100.r08.s096_output/n100.r08.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam\" > \"n100.r08.s096_output/n100.r08.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s096_output/n100.r08.s096.depth.txt\" \"n100.r08.s096_output/n100.r08.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s096_output/n100.r08.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s096_output/n100.r08.s096.reference.fas\" | bcftools consensus -m \"n100.r08.s096_output/n100.r08.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s096_output/n100.r08.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 0b48b7f4 (flow 3c31b57e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s084_output\"\n        wget -O \"n100.r08.s084_output/n100.r08.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s084_output/n100.r08.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s084_output/n100.r08.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s084_output/n100.r08.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s084_output/n100.r08.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s084_output/n100.r08.s084.reference.fas\" \"n100.r08.s084_output/n100.r08.s084.fq1.fastq\" \"n100.r08.s084_output/n100.r08.s084.fq2.fastq\" | samtools view -bS - > \"n100.r08.s084_output/n100.r08.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s084_output/n100.r08.s084.untrimmed.sorted.bam\" \"n100.r08.s084_output/n100.r08.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s084_output/n100.r08.s084.untrimmed.sorted.bam\" -b \"n100.r08.s084_output/n100.r08.s084.primers.bed\" -p \"n100.r08.s084_output/n100.r08.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam\" \"n100.r08.s084_output/n100.r08.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s084_output/n100.r08.s084.reference.fas\" \"n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam\" > \"n100.r08.s084_output/n100.r08.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s084_output/n100.r08.s084.reference.fas\" --call-indels \"n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam\" > \"n100.r08.s084_output/n100.r08.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam\" > \"n100.r08.s084_output/n100.r08.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s084_output/n100.r08.s084.depth.txt\" \"n100.r08.s084_output/n100.r08.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s084_output/n100.r08.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s084_output/n100.r08.s084.reference.fas\" | bcftools consensus -m \"n100.r08.s084_output/n100.r08.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s084_output/n100.r08.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e266f779 (flow 89895078): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s066_output\"\n        wget -O \"n100.r08.s066_output/n100.r08.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s066_output/n100.r08.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s066_output/n100.r08.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s066_output/n100.r08.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s066_output/n100.r08.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s066_output/n100.r08.s066.reference.fas\" \"n100.r08.s066_output/n100.r08.s066.fq1.fastq\" \"n100.r08.s066_output/n100.r08.s066.fq2.fastq\" | samtools view -bS - > \"n100.r08.s066_output/n100.r08.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s066_output/n100.r08.s066.untrimmed.sorted.bam\" \"n100.r08.s066_output/n100.r08.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s066_output/n100.r08.s066.untrimmed.sorted.bam\" -b \"n100.r08.s066_output/n100.r08.s066.primers.bed\" -p \"n100.r08.s066_output/n100.r08.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam\" \"n100.r08.s066_output/n100.r08.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s066_output/n100.r08.s066.reference.fas\" \"n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam\" > \"n100.r08.s066_output/n100.r08.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s066_output/n100.r08.s066.reference.fas\" --call-indels \"n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam\" > \"n100.r08.s066_output/n100.r08.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam\" > \"n100.r08.s066_output/n100.r08.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s066_output/n100.r08.s066.depth.txt\" \"n100.r08.s066_output/n100.r08.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s066_output/n100.r08.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s066_output/n100.r08.s066.reference.fas\" | bcftools consensus -m \"n100.r08.s066_output/n100.r08.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s066_output/n100.r08.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 77090a8d (flow 6db5a9b8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s007_output\"\n        wget -O \"n100.r08.s007_output/n100.r08.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s007_output/n100.r08.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s007_output/n100.r08.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s007_output/n100.r08.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s007_output/n100.r08.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s007_output/n100.r08.s007.reference.fas\" \"n100.r08.s007_output/n100.r08.s007.fq1.fastq\" \"n100.r08.s007_output/n100.r08.s007.fq2.fastq\" | samtools view -bS - > \"n100.r08.s007_output/n100.r08.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s007_output/n100.r08.s007.untrimmed.sorted.bam\" \"n100.r08.s007_output/n100.r08.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s007_output/n100.r08.s007.untrimmed.sorted.bam\" -b \"n100.r08.s007_output/n100.r08.s007.primers.bed\" -p \"n100.r08.s007_output/n100.r08.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam\" \"n100.r08.s007_output/n100.r08.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s007_output/n100.r08.s007.reference.fas\" \"n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam\" > \"n100.r08.s007_output/n100.r08.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s007_output/n100.r08.s007.reference.fas\" --call-indels \"n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam\" > \"n100.r08.s007_output/n100.r08.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam\" > \"n100.r08.s007_output/n100.r08.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s007_output/n100.r08.s007.depth.txt\" \"n100.r08.s007_output/n100.r08.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s007_output/n100.r08.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s007_output/n100.r08.s007.reference.fas\" | bcftools consensus -m \"n100.r08.s007_output/n100.r08.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s007_output/n100.r08.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task a14d135e (flow 37c80ebd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s002_output\"\n        wget -O \"n100.r08.s002_output/n100.r08.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s002_output/n100.r08.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s002_output/n100.r08.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s002_output/n100.r08.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s002_output/n100.r08.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s002_output/n100.r08.s002.reference.fas\" \"n100.r08.s002_output/n100.r08.s002.fq1.fastq\" \"n100.r08.s002_output/n100.r08.s002.fq2.fastq\" | samtools view -bS - > \"n100.r08.s002_output/n100.r08.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s002_output/n100.r08.s002.untrimmed.sorted.bam\" \"n100.r08.s002_output/n100.r08.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s002_output/n100.r08.s002.untrimmed.sorted.bam\" -b \"n100.r08.s002_output/n100.r08.s002.primers.bed\" -p \"n100.r08.s002_output/n100.r08.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam\" \"n100.r08.s002_output/n100.r08.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s002_output/n100.r08.s002.reference.fas\" \"n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam\" > \"n100.r08.s002_output/n100.r08.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s002_output/n100.r08.s002.reference.fas\" --call-indels \"n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam\" > \"n100.r08.s002_output/n100.r08.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam\" > \"n100.r08.s002_output/n100.r08.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s002_output/n100.r08.s002.depth.txt\" \"n100.r08.s002_output/n100.r08.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s002_output/n100.r08.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s002_output/n100.r08.s002.reference.fas\" | bcftools consensus -m \"n100.r08.s002_output/n100.r08.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s002_output/n100.r08.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 991d72a7 (flow 5307f7d5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s095_output\"\n        wget -O \"n100.r08.s095_output/n100.r08.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s095_output/n100.r08.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s095_output/n100.r08.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s095_output/n100.r08.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s095_output/n100.r08.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s095_output/n100.r08.s095.reference.fas\" \"n100.r08.s095_output/n100.r08.s095.fq1.fastq\" \"n100.r08.s095_output/n100.r08.s095.fq2.fastq\" | samtools view -bS - > \"n100.r08.s095_output/n100.r08.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s095_output/n100.r08.s095.untrimmed.sorted.bam\" \"n100.r08.s095_output/n100.r08.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s095_output/n100.r08.s095.untrimmed.sorted.bam\" -b \"n100.r08.s095_output/n100.r08.s095.primers.bed\" -p \"n100.r08.s095_output/n100.r08.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam\" \"n100.r08.s095_output/n100.r08.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s095_output/n100.r08.s095.reference.fas\" \"n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam\" > \"n100.r08.s095_output/n100.r08.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s095_output/n100.r08.s095.reference.fas\" --call-indels \"n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam\" > \"n100.r08.s095_output/n100.r08.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam\" > \"n100.r08.s095_output/n100.r08.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s095_output/n100.r08.s095.depth.txt\" \"n100.r08.s095_output/n100.r08.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s095_output/n100.r08.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s095_output/n100.r08.s095.reference.fas\" | bcftools consensus -m \"n100.r08.s095_output/n100.r08.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s095_output/n100.r08.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task bdd078c4 (flow 19f87377): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s037_output\"\n        wget -O \"n100.r08.s037_output/n100.r08.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s037_output/n100.r08.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s037_output/n100.r08.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s037_output/n100.r08.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s037_output/n100.r08.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s037_output/n100.r08.s037.reference.fas\" \"n100.r08.s037_output/n100.r08.s037.fq1.fastq\" \"n100.r08.s037_output/n100.r08.s037.fq2.fastq\" | samtools view -bS - > \"n100.r08.s037_output/n100.r08.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s037_output/n100.r08.s037.untrimmed.sorted.bam\" \"n100.r08.s037_output/n100.r08.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s037_output/n100.r08.s037.untrimmed.sorted.bam\" -b \"n100.r08.s037_output/n100.r08.s037.primers.bed\" -p \"n100.r08.s037_output/n100.r08.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam\" \"n100.r08.s037_output/n100.r08.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s037_output/n100.r08.s037.reference.fas\" \"n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam\" > \"n100.r08.s037_output/n100.r08.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s037_output/n100.r08.s037.reference.fas\" --call-indels \"n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam\" > \"n100.r08.s037_output/n100.r08.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam\" > \"n100.r08.s037_output/n100.r08.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s037_output/n100.r08.s037.depth.txt\" \"n100.r08.s037_output/n100.r08.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s037_output/n100.r08.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s037_output/n100.r08.s037.reference.fas\" | bcftools consensus -m \"n100.r08.s037_output/n100.r08.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s037_output/n100.r08.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 5f2477ba (flow aa8092e5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s070_output\"\n        wget -O \"n100.r08.s070_output/n100.r08.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s070_output/n100.r08.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s070_output/n100.r08.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s070_output/n100.r08.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s070_output/n100.r08.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s070_output/n100.r08.s070.reference.fas\" \"n100.r08.s070_output/n100.r08.s070.fq1.fastq\" \"n100.r08.s070_output/n100.r08.s070.fq2.fastq\" | samtools view -bS - > \"n100.r08.s070_output/n100.r08.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s070_output/n100.r08.s070.untrimmed.sorted.bam\" \"n100.r08.s070_output/n100.r08.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s070_output/n100.r08.s070.untrimmed.sorted.bam\" -b \"n100.r08.s070_output/n100.r08.s070.primers.bed\" -p \"n100.r08.s070_output/n100.r08.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam\" \"n100.r08.s070_output/n100.r08.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s070_output/n100.r08.s070.reference.fas\" \"n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam\" > \"n100.r08.s070_output/n100.r08.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s070_output/n100.r08.s070.reference.fas\" --call-indels \"n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam\" > \"n100.r08.s070_output/n100.r08.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam\" > \"n100.r08.s070_output/n100.r08.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s070_output/n100.r08.s070.depth.txt\" \"n100.r08.s070_output/n100.r08.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s070_output/n100.r08.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s070_output/n100.r08.s070.reference.fas\" | bcftools consensus -m \"n100.r08.s070_output/n100.r08.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s070_output/n100.r08.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 8270b132 (flow 53910cbe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s064_output\"\n        wget -O \"n100.r08.s064_output/n100.r08.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s064_output/n100.r08.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s064_output/n100.r08.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s064_output/n100.r08.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s064_output/n100.r08.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s064_output/n100.r08.s064.reference.fas\" \"n100.r08.s064_output/n100.r08.s064.fq1.fastq\" \"n100.r08.s064_output/n100.r08.s064.fq2.fastq\" | samtools view -bS - > \"n100.r08.s064_output/n100.r08.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s064_output/n100.r08.s064.untrimmed.sorted.bam\" \"n100.r08.s064_output/n100.r08.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s064_output/n100.r08.s064.untrimmed.sorted.bam\" -b \"n100.r08.s064_output/n100.r08.s064.primers.bed\" -p \"n100.r08.s064_output/n100.r08.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam\" \"n100.r08.s064_output/n100.r08.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s064_output/n100.r08.s064.reference.fas\" \"n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam\" > \"n100.r08.s064_output/n100.r08.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s064_output/n100.r08.s064.reference.fas\" --call-indels \"n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam\" > \"n100.r08.s064_output/n100.r08.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam\" > \"n100.r08.s064_output/n100.r08.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s064_output/n100.r08.s064.depth.txt\" \"n100.r08.s064_output/n100.r08.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s064_output/n100.r08.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s064_output/n100.r08.s064.reference.fas\" | bcftools consensus -m \"n100.r08.s064_output/n100.r08.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s064_output/n100.r08.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task f714587f (flow ffcb62ed): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s072_output\"\n        wget -O \"n100.r08.s072_output/n100.r08.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s072_output/n100.r08.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s072_output/n100.r08.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s072_output/n100.r08.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s072_output/n100.r08.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s072_output/n100.r08.s072.reference.fas\" \"n100.r08.s072_output/n100.r08.s072.fq1.fastq\" \"n100.r08.s072_output/n100.r08.s072.fq2.fastq\" | samtools view -bS - > \"n100.r08.s072_output/n100.r08.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s072_output/n100.r08.s072.untrimmed.sorted.bam\" \"n100.r08.s072_output/n100.r08.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s072_output/n100.r08.s072.untrimmed.sorted.bam\" -b \"n100.r08.s072_output/n100.r08.s072.primers.bed\" -p \"n100.r08.s072_output/n100.r08.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam\" \"n100.r08.s072_output/n100.r08.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s072_output/n100.r08.s072.reference.fas\" \"n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam\" > \"n100.r08.s072_output/n100.r08.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s072_output/n100.r08.s072.reference.fas\" --call-indels \"n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam\" > \"n100.r08.s072_output/n100.r08.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam\" > \"n100.r08.s072_output/n100.r08.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s072_output/n100.r08.s072.depth.txt\" \"n100.r08.s072_output/n100.r08.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s072_output/n100.r08.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s072_output/n100.r08.s072.reference.fas\" | bcftools consensus -m \"n100.r08.s072_output/n100.r08.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s072_output/n100.r08.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 61314efc (flow eeef90ae): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s033_output\"\n        wget -O \"n100.r08.s033_output/n100.r08.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s033_output/n100.r08.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s033_output/n100.r08.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s033_output/n100.r08.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s033_output/n100.r08.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s033_output/n100.r08.s033.reference.fas\" \"n100.r08.s033_output/n100.r08.s033.fq1.fastq\" \"n100.r08.s033_output/n100.r08.s033.fq2.fastq\" | samtools view -bS - > \"n100.r08.s033_output/n100.r08.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s033_output/n100.r08.s033.untrimmed.sorted.bam\" \"n100.r08.s033_output/n100.r08.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s033_output/n100.r08.s033.untrimmed.sorted.bam\" -b \"n100.r08.s033_output/n100.r08.s033.primers.bed\" -p \"n100.r08.s033_output/n100.r08.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam\" \"n100.r08.s033_output/n100.r08.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s033_output/n100.r08.s033.reference.fas\" \"n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam\" > \"n100.r08.s033_output/n100.r08.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s033_output/n100.r08.s033.reference.fas\" --call-indels \"n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam\" > \"n100.r08.s033_output/n100.r08.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam\" > \"n100.r08.s033_output/n100.r08.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s033_output/n100.r08.s033.depth.txt\" \"n100.r08.s033_output/n100.r08.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s033_output/n100.r08.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s033_output/n100.r08.s033.reference.fas\" | bcftools consensus -m \"n100.r08.s033_output/n100.r08.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s033_output/n100.r08.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 19f1fa9b (flow 8358078b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s082_output\"\n        wget -O \"n100.r08.s082_output/n100.r08.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s082_output/n100.r08.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s082_output/n100.r08.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s082_output/n100.r08.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s082_output/n100.r08.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s082_output/n100.r08.s082.reference.fas\" \"n100.r08.s082_output/n100.r08.s082.fq1.fastq\" \"n100.r08.s082_output/n100.r08.s082.fq2.fastq\" | samtools view -bS - > \"n100.r08.s082_output/n100.r08.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s082_output/n100.r08.s082.untrimmed.sorted.bam\" \"n100.r08.s082_output/n100.r08.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s082_output/n100.r08.s082.untrimmed.sorted.bam\" -b \"n100.r08.s082_output/n100.r08.s082.primers.bed\" -p \"n100.r08.s082_output/n100.r08.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam\" \"n100.r08.s082_output/n100.r08.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s082_output/n100.r08.s082.reference.fas\" \"n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam\" > \"n100.r08.s082_output/n100.r08.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s082_output/n100.r08.s082.reference.fas\" --call-indels \"n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam\" > \"n100.r08.s082_output/n100.r08.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam\" > \"n100.r08.s082_output/n100.r08.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s082_output/n100.r08.s082.depth.txt\" \"n100.r08.s082_output/n100.r08.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s082_output/n100.r08.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s082_output/n100.r08.s082.reference.fas\" | bcftools consensus -m \"n100.r08.s082_output/n100.r08.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s082_output/n100.r08.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 8ee17ca7 (flow cc702d2f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s016_output\"\n        wget -O \"n100.r08.s016_output/n100.r08.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s016_output/n100.r08.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s016_output/n100.r08.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s016_output/n100.r08.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s016_output/n100.r08.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s016_output/n100.r08.s016.reference.fas\" \"n100.r08.s016_output/n100.r08.s016.fq1.fastq\" \"n100.r08.s016_output/n100.r08.s016.fq2.fastq\" | samtools view -bS - > \"n100.r08.s016_output/n100.r08.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s016_output/n100.r08.s016.untrimmed.sorted.bam\" \"n100.r08.s016_output/n100.r08.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s016_output/n100.r08.s016.untrimmed.sorted.bam\" -b \"n100.r08.s016_output/n100.r08.s016.primers.bed\" -p \"n100.r08.s016_output/n100.r08.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam\" \"n100.r08.s016_output/n100.r08.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s016_output/n100.r08.s016.reference.fas\" \"n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam\" > \"n100.r08.s016_output/n100.r08.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s016_output/n100.r08.s016.reference.fas\" --call-indels \"n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam\" > \"n100.r08.s016_output/n100.r08.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam\" > \"n100.r08.s016_output/n100.r08.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s016_output/n100.r08.s016.depth.txt\" \"n100.r08.s016_output/n100.r08.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s016_output/n100.r08.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s016_output/n100.r08.s016.reference.fas\" | bcftools consensus -m \"n100.r08.s016_output/n100.r08.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s016_output/n100.r08.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task cef49e65 (flow 56e46f6d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s009_output\"\n        wget -O \"n100.r08.s009_output/n100.r08.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s009_output/n100.r08.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s009_output/n100.r08.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s009_output/n100.r08.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s009_output/n100.r08.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s009_output/n100.r08.s009.reference.fas\" \"n100.r08.s009_output/n100.r08.s009.fq1.fastq\" \"n100.r08.s009_output/n100.r08.s009.fq2.fastq\" | samtools view -bS - > \"n100.r08.s009_output/n100.r08.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s009_output/n100.r08.s009.untrimmed.sorted.bam\" \"n100.r08.s009_output/n100.r08.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s009_output/n100.r08.s009.untrimmed.sorted.bam\" -b \"n100.r08.s009_output/n100.r08.s009.primers.bed\" -p \"n100.r08.s009_output/n100.r08.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam\" \"n100.r08.s009_output/n100.r08.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s009_output/n100.r08.s009.reference.fas\" \"n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam\" > \"n100.r08.s009_output/n100.r08.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s009_output/n100.r08.s009.reference.fas\" --call-indels \"n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam\" > \"n100.r08.s009_output/n100.r08.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam\" > \"n100.r08.s009_output/n100.r08.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s009_output/n100.r08.s009.depth.txt\" \"n100.r08.s009_output/n100.r08.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s009_output/n100.r08.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s009_output/n100.r08.s009.reference.fas\" | bcftools consensus -m \"n100.r08.s009_output/n100.r08.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s009_output/n100.r08.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 67ce347f (flow 32d2695b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s081_output\"\n        wget -O \"n100.r08.s081_output/n100.r08.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s081_output/n100.r08.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s081_output/n100.r08.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s081_output/n100.r08.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s081_output/n100.r08.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s081_output/n100.r08.s081.reference.fas\" \"n100.r08.s081_output/n100.r08.s081.fq1.fastq\" \"n100.r08.s081_output/n100.r08.s081.fq2.fastq\" | samtools view -bS - > \"n100.r08.s081_output/n100.r08.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s081_output/n100.r08.s081.untrimmed.sorted.bam\" \"n100.r08.s081_output/n100.r08.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s081_output/n100.r08.s081.untrimmed.sorted.bam\" -b \"n100.r08.s081_output/n100.r08.s081.primers.bed\" -p \"n100.r08.s081_output/n100.r08.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam\" \"n100.r08.s081_output/n100.r08.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s081_output/n100.r08.s081.reference.fas\" \"n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam\" > \"n100.r08.s081_output/n100.r08.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s081_output/n100.r08.s081.reference.fas\" --call-indels \"n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam\" > \"n100.r08.s081_output/n100.r08.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam\" > \"n100.r08.s081_output/n100.r08.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s081_output/n100.r08.s081.depth.txt\" \"n100.r08.s081_output/n100.r08.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s081_output/n100.r08.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s081_output/n100.r08.s081.reference.fas\" | bcftools consensus -m \"n100.r08.s081_output/n100.r08.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s081_output/n100.r08.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task ef32d510 (flow 7c721fb5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s090_output\"\n        wget -O \"n100.r08.s090_output/n100.r08.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s090_output/n100.r08.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s090_output/n100.r08.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s090_output/n100.r08.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s090_output/n100.r08.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s090_output/n100.r08.s090.reference.fas\" \"n100.r08.s090_output/n100.r08.s090.fq1.fastq\" \"n100.r08.s090_output/n100.r08.s090.fq2.fastq\" | samtools view -bS - > \"n100.r08.s090_output/n100.r08.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s090_output/n100.r08.s090.untrimmed.sorted.bam\" \"n100.r08.s090_output/n100.r08.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s090_output/n100.r08.s090.untrimmed.sorted.bam\" -b \"n100.r08.s090_output/n100.r08.s090.primers.bed\" -p \"n100.r08.s090_output/n100.r08.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam\" \"n100.r08.s090_output/n100.r08.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s090_output/n100.r08.s090.reference.fas\" \"n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam\" > \"n100.r08.s090_output/n100.r08.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s090_output/n100.r08.s090.reference.fas\" --call-indels \"n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam\" > \"n100.r08.s090_output/n100.r08.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam\" > \"n100.r08.s090_output/n100.r08.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s090_output/n100.r08.s090.depth.txt\" \"n100.r08.s090_output/n100.r08.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s090_output/n100.r08.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s090_output/n100.r08.s090.reference.fas\" | bcftools consensus -m \"n100.r08.s090_output/n100.r08.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s090_output/n100.r08.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 4b7d1db7 (flow 0c27eb3e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s097_output\"\n        wget -O \"n100.r08.s097_output/n100.r08.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s097_output/n100.r08.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s097_output/n100.r08.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s097_output/n100.r08.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s097_output/n100.r08.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s097_output/n100.r08.s097.reference.fas\" \"n100.r08.s097_output/n100.r08.s097.fq1.fastq\" \"n100.r08.s097_output/n100.r08.s097.fq2.fastq\" | samtools view -bS - > \"n100.r08.s097_output/n100.r08.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s097_output/n100.r08.s097.untrimmed.sorted.bam\" \"n100.r08.s097_output/n100.r08.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s097_output/n100.r08.s097.untrimmed.sorted.bam\" -b \"n100.r08.s097_output/n100.r08.s097.primers.bed\" -p \"n100.r08.s097_output/n100.r08.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam\" \"n100.r08.s097_output/n100.r08.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s097_output/n100.r08.s097.reference.fas\" \"n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam\" > \"n100.r08.s097_output/n100.r08.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s097_output/n100.r08.s097.reference.fas\" --call-indels \"n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam\" > \"n100.r08.s097_output/n100.r08.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam\" > \"n100.r08.s097_output/n100.r08.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s097_output/n100.r08.s097.depth.txt\" \"n100.r08.s097_output/n100.r08.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s097_output/n100.r08.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s097_output/n100.r08.s097.reference.fas\" | bcftools consensus -m \"n100.r08.s097_output/n100.r08.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s097_output/n100.r08.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 4ef1336d (flow bc17d794): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s021_output\"\n        wget -O \"n100.r08.s021_output/n100.r08.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s021_output/n100.r08.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s021_output/n100.r08.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s021_output/n100.r08.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s021_output/n100.r08.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s021_output/n100.r08.s021.reference.fas\" \"n100.r08.s021_output/n100.r08.s021.fq1.fastq\" \"n100.r08.s021_output/n100.r08.s021.fq2.fastq\" | samtools view -bS - > \"n100.r08.s021_output/n100.r08.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s021_output/n100.r08.s021.untrimmed.sorted.bam\" \"n100.r08.s021_output/n100.r08.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s021_output/n100.r08.s021.untrimmed.sorted.bam\" -b \"n100.r08.s021_output/n100.r08.s021.primers.bed\" -p \"n100.r08.s021_output/n100.r08.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam\" \"n100.r08.s021_output/n100.r08.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s021_output/n100.r08.s021.reference.fas\" \"n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam\" > \"n100.r08.s021_output/n100.r08.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s021_output/n100.r08.s021.reference.fas\" --call-indels \"n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam\" > \"n100.r08.s021_output/n100.r08.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam\" > \"n100.r08.s021_output/n100.r08.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s021_output/n100.r08.s021.depth.txt\" \"n100.r08.s021_output/n100.r08.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s021_output/n100.r08.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s021_output/n100.r08.s021.reference.fas\" | bcftools consensus -m \"n100.r08.s021_output/n100.r08.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s021_output/n100.r08.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task a9954f8b (flow 6c9f7fef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s076_output\"\n        wget -O \"n100.r08.s076_output/n100.r08.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s076_output/n100.r08.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s076_output/n100.r08.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s076_output/n100.r08.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s076_output/n100.r08.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s076_output/n100.r08.s076.reference.fas\" \"n100.r08.s076_output/n100.r08.s076.fq1.fastq\" \"n100.r08.s076_output/n100.r08.s076.fq2.fastq\" | samtools view -bS - > \"n100.r08.s076_output/n100.r08.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s076_output/n100.r08.s076.untrimmed.sorted.bam\" \"n100.r08.s076_output/n100.r08.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s076_output/n100.r08.s076.untrimmed.sorted.bam\" -b \"n100.r08.s076_output/n100.r08.s076.primers.bed\" -p \"n100.r08.s076_output/n100.r08.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam\" \"n100.r08.s076_output/n100.r08.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s076_output/n100.r08.s076.reference.fas\" \"n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam\" > \"n100.r08.s076_output/n100.r08.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s076_output/n100.r08.s076.reference.fas\" --call-indels \"n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam\" > \"n100.r08.s076_output/n100.r08.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam\" > \"n100.r08.s076_output/n100.r08.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s076_output/n100.r08.s076.depth.txt\" \"n100.r08.s076_output/n100.r08.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s076_output/n100.r08.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s076_output/n100.r08.s076.reference.fas\" | bcftools consensus -m \"n100.r08.s076_output/n100.r08.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s076_output/n100.r08.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task be583c00 (flow 601a9c71): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s100_output\"\n        wget -O \"n100.r08.s100_output/n100.r08.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s100_output/n100.r08.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s100_output/n100.r08.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s100_output/n100.r08.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s100_output/n100.r08.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s100_output/n100.r08.s100.reference.fas\" \"n100.r08.s100_output/n100.r08.s100.fq1.fastq\" \"n100.r08.s100_output/n100.r08.s100.fq2.fastq\" | samtools view -bS - > \"n100.r08.s100_output/n100.r08.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s100_output/n100.r08.s100.untrimmed.sorted.bam\" \"n100.r08.s100_output/n100.r08.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s100_output/n100.r08.s100.untrimmed.sorted.bam\" -b \"n100.r08.s100_output/n100.r08.s100.primers.bed\" -p \"n100.r08.s100_output/n100.r08.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam\" \"n100.r08.s100_output/n100.r08.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s100_output/n100.r08.s100.reference.fas\" \"n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam\" > \"n100.r08.s100_output/n100.r08.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s100_output/n100.r08.s100.reference.fas\" --call-indels \"n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam\" > \"n100.r08.s100_output/n100.r08.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam\" > \"n100.r08.s100_output/n100.r08.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s100_output/n100.r08.s100.depth.txt\" \"n100.r08.s100_output/n100.r08.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s100_output/n100.r08.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s100_output/n100.r08.s100.reference.fas\" | bcftools consensus -m \"n100.r08.s100_output/n100.r08.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s100_output/n100.r08.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 625ac6d7 (flow c1c3792a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s018_output\"\n        wget -O \"n100.r08.s018_output/n100.r08.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s018_output/n100.r08.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s018_output/n100.r08.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s018_output/n100.r08.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s018_output/n100.r08.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s018_output/n100.r08.s018.reference.fas\" \"n100.r08.s018_output/n100.r08.s018.fq1.fastq\" \"n100.r08.s018_output/n100.r08.s018.fq2.fastq\" | samtools view -bS - > \"n100.r08.s018_output/n100.r08.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s018_output/n100.r08.s018.untrimmed.sorted.bam\" \"n100.r08.s018_output/n100.r08.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s018_output/n100.r08.s018.untrimmed.sorted.bam\" -b \"n100.r08.s018_output/n100.r08.s018.primers.bed\" -p \"n100.r08.s018_output/n100.r08.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam\" \"n100.r08.s018_output/n100.r08.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s018_output/n100.r08.s018.reference.fas\" \"n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam\" > \"n100.r08.s018_output/n100.r08.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s018_output/n100.r08.s018.reference.fas\" --call-indels \"n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam\" > \"n100.r08.s018_output/n100.r08.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam\" > \"n100.r08.s018_output/n100.r08.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s018_output/n100.r08.s018.depth.txt\" \"n100.r08.s018_output/n100.r08.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s018_output/n100.r08.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s018_output/n100.r08.s018.reference.fas\" | bcftools consensus -m \"n100.r08.s018_output/n100.r08.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s018_output/n100.r08.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task d321bea4 (flow 6fbbdec0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s085_output\"\n        wget -O \"n100.r08.s085_output/n100.r08.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s085_output/n100.r08.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s085_output/n100.r08.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s085_output/n100.r08.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s085_output/n100.r08.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s085_output/n100.r08.s085.reference.fas\" \"n100.r08.s085_output/n100.r08.s085.fq1.fastq\" \"n100.r08.s085_output/n100.r08.s085.fq2.fastq\" | samtools view -bS - > \"n100.r08.s085_output/n100.r08.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s085_output/n100.r08.s085.untrimmed.sorted.bam\" \"n100.r08.s085_output/n100.r08.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s085_output/n100.r08.s085.untrimmed.sorted.bam\" -b \"n100.r08.s085_output/n100.r08.s085.primers.bed\" -p \"n100.r08.s085_output/n100.r08.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam\" \"n100.r08.s085_output/n100.r08.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s085_output/n100.r08.s085.reference.fas\" \"n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam\" > \"n100.r08.s085_output/n100.r08.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s085_output/n100.r08.s085.reference.fas\" --call-indels \"n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam\" > \"n100.r08.s085_output/n100.r08.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam\" > \"n100.r08.s085_output/n100.r08.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s085_output/n100.r08.s085.depth.txt\" \"n100.r08.s085_output/n100.r08.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s085_output/n100.r08.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s085_output/n100.r08.s085.reference.fas\" | bcftools consensus -m \"n100.r08.s085_output/n100.r08.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s085_output/n100.r08.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 42d18dc0 (flow 30cb4af0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s020_output\"\n        wget -O \"n100.r08.s020_output/n100.r08.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s020_output/n100.r08.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s020_output/n100.r08.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s020_output/n100.r08.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s020_output/n100.r08.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s020_output/n100.r08.s020.reference.fas\" \"n100.r08.s020_output/n100.r08.s020.fq1.fastq\" \"n100.r08.s020_output/n100.r08.s020.fq2.fastq\" | samtools view -bS - > \"n100.r08.s020_output/n100.r08.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s020_output/n100.r08.s020.untrimmed.sorted.bam\" \"n100.r08.s020_output/n100.r08.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s020_output/n100.r08.s020.untrimmed.sorted.bam\" -b \"n100.r08.s020_output/n100.r08.s020.primers.bed\" -p \"n100.r08.s020_output/n100.r08.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam\" \"n100.r08.s020_output/n100.r08.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s020_output/n100.r08.s020.reference.fas\" \"n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam\" > \"n100.r08.s020_output/n100.r08.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s020_output/n100.r08.s020.reference.fas\" --call-indels \"n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam\" > \"n100.r08.s020_output/n100.r08.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam\" > \"n100.r08.s020_output/n100.r08.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s020_output/n100.r08.s020.depth.txt\" \"n100.r08.s020_output/n100.r08.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s020_output/n100.r08.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s020_output/n100.r08.s020.reference.fas\" | bcftools consensus -m \"n100.r08.s020_output/n100.r08.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s020_output/n100.r08.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 17f58eff (flow afb9c82e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s010_output\"\n        wget -O \"n100.r08.s010_output/n100.r08.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s010_output/n100.r08.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s010_output/n100.r08.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s010_output/n100.r08.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s010_output/n100.r08.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s010_output/n100.r08.s010.reference.fas\" \"n100.r08.s010_output/n100.r08.s010.fq1.fastq\" \"n100.r08.s010_output/n100.r08.s010.fq2.fastq\" | samtools view -bS - > \"n100.r08.s010_output/n100.r08.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s010_output/n100.r08.s010.untrimmed.sorted.bam\" \"n100.r08.s010_output/n100.r08.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s010_output/n100.r08.s010.untrimmed.sorted.bam\" -b \"n100.r08.s010_output/n100.r08.s010.primers.bed\" -p \"n100.r08.s010_output/n100.r08.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam\" \"n100.r08.s010_output/n100.r08.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s010_output/n100.r08.s010.reference.fas\" \"n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam\" > \"n100.r08.s010_output/n100.r08.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s010_output/n100.r08.s010.reference.fas\" --call-indels \"n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam\" > \"n100.r08.s010_output/n100.r08.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam\" > \"n100.r08.s010_output/n100.r08.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s010_output/n100.r08.s010.depth.txt\" \"n100.r08.s010_output/n100.r08.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s010_output/n100.r08.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s010_output/n100.r08.s010.reference.fas\" | bcftools consensus -m \"n100.r08.s010_output/n100.r08.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s010_output/n100.r08.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 17275071 (flow b5a84f70): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s056_output\"\n        wget -O \"n100.r08.s056_output/n100.r08.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s056_output/n100.r08.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s056_output/n100.r08.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s056_output/n100.r08.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s056_output/n100.r08.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s056_output/n100.r08.s056.reference.fas\" \"n100.r08.s056_output/n100.r08.s056.fq1.fastq\" \"n100.r08.s056_output/n100.r08.s056.fq2.fastq\" | samtools view -bS - > \"n100.r08.s056_output/n100.r08.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s056_output/n100.r08.s056.untrimmed.sorted.bam\" \"n100.r08.s056_output/n100.r08.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s056_output/n100.r08.s056.untrimmed.sorted.bam\" -b \"n100.r08.s056_output/n100.r08.s056.primers.bed\" -p \"n100.r08.s056_output/n100.r08.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam\" \"n100.r08.s056_output/n100.r08.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s056_output/n100.r08.s056.reference.fas\" \"n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam\" > \"n100.r08.s056_output/n100.r08.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s056_output/n100.r08.s056.reference.fas\" --call-indels \"n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam\" > \"n100.r08.s056_output/n100.r08.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam\" > \"n100.r08.s056_output/n100.r08.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s056_output/n100.r08.s056.depth.txt\" \"n100.r08.s056_output/n100.r08.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s056_output/n100.r08.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s056_output/n100.r08.s056.reference.fas\" | bcftools consensus -m \"n100.r08.s056_output/n100.r08.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s056_output/n100.r08.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 4f36edfc (flow 7a476ecb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s023_output\"\n        wget -O \"n100.r08.s023_output/n100.r08.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s023_output/n100.r08.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s023_output/n100.r08.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s023_output/n100.r08.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s023_output/n100.r08.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s023_output/n100.r08.s023.reference.fas\" \"n100.r08.s023_output/n100.r08.s023.fq1.fastq\" \"n100.r08.s023_output/n100.r08.s023.fq2.fastq\" | samtools view -bS - > \"n100.r08.s023_output/n100.r08.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s023_output/n100.r08.s023.untrimmed.sorted.bam\" \"n100.r08.s023_output/n100.r08.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s023_output/n100.r08.s023.untrimmed.sorted.bam\" -b \"n100.r08.s023_output/n100.r08.s023.primers.bed\" -p \"n100.r08.s023_output/n100.r08.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam\" \"n100.r08.s023_output/n100.r08.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s023_output/n100.r08.s023.reference.fas\" \"n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam\" > \"n100.r08.s023_output/n100.r08.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s023_output/n100.r08.s023.reference.fas\" --call-indels \"n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam\" > \"n100.r08.s023_output/n100.r08.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam\" > \"n100.r08.s023_output/n100.r08.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s023_output/n100.r08.s023.depth.txt\" \"n100.r08.s023_output/n100.r08.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s023_output/n100.r08.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s023_output/n100.r08.s023.reference.fas\" | bcftools consensus -m \"n100.r08.s023_output/n100.r08.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s023_output/n100.r08.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task cc6f4951 (flow db5af4da): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s014_output\"\n        wget -O \"n100.r08.s014_output/n100.r08.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s014_output/n100.r08.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s014_output/n100.r08.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s014_output/n100.r08.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s014_output/n100.r08.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s014_output/n100.r08.s014.reference.fas\" \"n100.r08.s014_output/n100.r08.s014.fq1.fastq\" \"n100.r08.s014_output/n100.r08.s014.fq2.fastq\" | samtools view -bS - > \"n100.r08.s014_output/n100.r08.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s014_output/n100.r08.s014.untrimmed.sorted.bam\" \"n100.r08.s014_output/n100.r08.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s014_output/n100.r08.s014.untrimmed.sorted.bam\" -b \"n100.r08.s014_output/n100.r08.s014.primers.bed\" -p \"n100.r08.s014_output/n100.r08.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam\" \"n100.r08.s014_output/n100.r08.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s014_output/n100.r08.s014.reference.fas\" \"n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam\" > \"n100.r08.s014_output/n100.r08.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s014_output/n100.r08.s014.reference.fas\" --call-indels \"n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam\" > \"n100.r08.s014_output/n100.r08.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam\" > \"n100.r08.s014_output/n100.r08.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s014_output/n100.r08.s014.depth.txt\" \"n100.r08.s014_output/n100.r08.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s014_output/n100.r08.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s014_output/n100.r08.s014.reference.fas\" | bcftools consensus -m \"n100.r08.s014_output/n100.r08.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s014_output/n100.r08.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 2c812c39 (flow 0d5ce47b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s049_output\"\n        wget -O \"n100.r08.s049_output/n100.r08.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s049_output/n100.r08.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s049_output/n100.r08.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s049_output/n100.r08.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s049_output/n100.r08.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s049_output/n100.r08.s049.reference.fas\" \"n100.r08.s049_output/n100.r08.s049.fq1.fastq\" \"n100.r08.s049_output/n100.r08.s049.fq2.fastq\" | samtools view -bS - > \"n100.r08.s049_output/n100.r08.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s049_output/n100.r08.s049.untrimmed.sorted.bam\" \"n100.r08.s049_output/n100.r08.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s049_output/n100.r08.s049.untrimmed.sorted.bam\" -b \"n100.r08.s049_output/n100.r08.s049.primers.bed\" -p \"n100.r08.s049_output/n100.r08.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam\" \"n100.r08.s049_output/n100.r08.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s049_output/n100.r08.s049.reference.fas\" \"n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam\" > \"n100.r08.s049_output/n100.r08.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s049_output/n100.r08.s049.reference.fas\" --call-indels \"n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam\" > \"n100.r08.s049_output/n100.r08.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam\" > \"n100.r08.s049_output/n100.r08.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s049_output/n100.r08.s049.depth.txt\" \"n100.r08.s049_output/n100.r08.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s049_output/n100.r08.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s049_output/n100.r08.s049.reference.fas\" | bcftools consensus -m \"n100.r08.s049_output/n100.r08.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s049_output/n100.r08.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e4711d1d (flow 40d58762): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s067_output\"\n        wget -O \"n100.r08.s067_output/n100.r08.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s067_output/n100.r08.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s067_output/n100.r08.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s067_output/n100.r08.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s067_output/n100.r08.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s067_output/n100.r08.s067.reference.fas\" \"n100.r08.s067_output/n100.r08.s067.fq1.fastq\" \"n100.r08.s067_output/n100.r08.s067.fq2.fastq\" | samtools view -bS - > \"n100.r08.s067_output/n100.r08.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s067_output/n100.r08.s067.untrimmed.sorted.bam\" \"n100.r08.s067_output/n100.r08.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s067_output/n100.r08.s067.untrimmed.sorted.bam\" -b \"n100.r08.s067_output/n100.r08.s067.primers.bed\" -p \"n100.r08.s067_output/n100.r08.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam\" \"n100.r08.s067_output/n100.r08.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s067_output/n100.r08.s067.reference.fas\" \"n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam\" > \"n100.r08.s067_output/n100.r08.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s067_output/n100.r08.s067.reference.fas\" --call-indels \"n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam\" > \"n100.r08.s067_output/n100.r08.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam\" > \"n100.r08.s067_output/n100.r08.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s067_output/n100.r08.s067.depth.txt\" \"n100.r08.s067_output/n100.r08.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s067_output/n100.r08.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s067_output/n100.r08.s067.reference.fas\" | bcftools consensus -m \"n100.r08.s067_output/n100.r08.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s067_output/n100.r08.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task e3e2fbc0 (flow b7aad0a1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s075_output\"\n        wget -O \"n100.r08.s075_output/n100.r08.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s075_output/n100.r08.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s075_output/n100.r08.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s075_output/n100.r08.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s075_output/n100.r08.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s075_output/n100.r08.s075.reference.fas\" \"n100.r08.s075_output/n100.r08.s075.fq1.fastq\" \"n100.r08.s075_output/n100.r08.s075.fq2.fastq\" | samtools view -bS - > \"n100.r08.s075_output/n100.r08.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s075_output/n100.r08.s075.untrimmed.sorted.bam\" \"n100.r08.s075_output/n100.r08.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s075_output/n100.r08.s075.untrimmed.sorted.bam\" -b \"n100.r08.s075_output/n100.r08.s075.primers.bed\" -p \"n100.r08.s075_output/n100.r08.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam\" \"n100.r08.s075_output/n100.r08.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s075_output/n100.r08.s075.reference.fas\" \"n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam\" > \"n100.r08.s075_output/n100.r08.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s075_output/n100.r08.s075.reference.fas\" --call-indels \"n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam\" > \"n100.r08.s075_output/n100.r08.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam\" > \"n100.r08.s075_output/n100.r08.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s075_output/n100.r08.s075.depth.txt\" \"n100.r08.s075_output/n100.r08.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s075_output/n100.r08.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s075_output/n100.r08.s075.reference.fas\" | bcftools consensus -m \"n100.r08.s075_output/n100.r08.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s075_output/n100.r08.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 899f5270 (flow c4aa557b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s062_output\"\n        wget -O \"n100.r08.s062_output/n100.r08.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s062_output/n100.r08.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s062_output/n100.r08.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s062_output/n100.r08.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s062_output/n100.r08.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s062_output/n100.r08.s062.reference.fas\" \"n100.r08.s062_output/n100.r08.s062.fq1.fastq\" \"n100.r08.s062_output/n100.r08.s062.fq2.fastq\" | samtools view -bS - > \"n100.r08.s062_output/n100.r08.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s062_output/n100.r08.s062.untrimmed.sorted.bam\" \"n100.r08.s062_output/n100.r08.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s062_output/n100.r08.s062.untrimmed.sorted.bam\" -b \"n100.r08.s062_output/n100.r08.s062.primers.bed\" -p \"n100.r08.s062_output/n100.r08.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam\" \"n100.r08.s062_output/n100.r08.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s062_output/n100.r08.s062.reference.fas\" \"n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam\" > \"n100.r08.s062_output/n100.r08.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s062_output/n100.r08.s062.reference.fas\" --call-indels \"n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam\" > \"n100.r08.s062_output/n100.r08.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam\" > \"n100.r08.s062_output/n100.r08.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s062_output/n100.r08.s062.depth.txt\" \"n100.r08.s062_output/n100.r08.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s062_output/n100.r08.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s062_output/n100.r08.s062.reference.fas\" | bcftools consensus -m \"n100.r08.s062_output/n100.r08.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s062_output/n100.r08.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task d990b33b (flow 4f4f56d4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s057_output\"\n        wget -O \"n100.r08.s057_output/n100.r08.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s057_output/n100.r08.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s057_output/n100.r08.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s057_output/n100.r08.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s057_output/n100.r08.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s057_output/n100.r08.s057.reference.fas\" \"n100.r08.s057_output/n100.r08.s057.fq1.fastq\" \"n100.r08.s057_output/n100.r08.s057.fq2.fastq\" | samtools view -bS - > \"n100.r08.s057_output/n100.r08.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s057_output/n100.r08.s057.untrimmed.sorted.bam\" \"n100.r08.s057_output/n100.r08.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s057_output/n100.r08.s057.untrimmed.sorted.bam\" -b \"n100.r08.s057_output/n100.r08.s057.primers.bed\" -p \"n100.r08.s057_output/n100.r08.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam\" \"n100.r08.s057_output/n100.r08.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s057_output/n100.r08.s057.reference.fas\" \"n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam\" > \"n100.r08.s057_output/n100.r08.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s057_output/n100.r08.s057.reference.fas\" --call-indels \"n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam\" > \"n100.r08.s057_output/n100.r08.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam\" > \"n100.r08.s057_output/n100.r08.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s057_output/n100.r08.s057.depth.txt\" \"n100.r08.s057_output/n100.r08.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s057_output/n100.r08.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s057_output/n100.r08.s057.reference.fas\" | bcftools consensus -m \"n100.r08.s057_output/n100.r08.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s057_output/n100.r08.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task ba1130bd (flow c6f7e8d0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s099_output\"\n        wget -O \"n100.r08.s099_output/n100.r08.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s099_output/n100.r08.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s099_output/n100.r08.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s099_output/n100.r08.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s099_output/n100.r08.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s099_output/n100.r08.s099.reference.fas\" \"n100.r08.s099_output/n100.r08.s099.fq1.fastq\" \"n100.r08.s099_output/n100.r08.s099.fq2.fastq\" | samtools view -bS - > \"n100.r08.s099_output/n100.r08.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s099_output/n100.r08.s099.untrimmed.sorted.bam\" \"n100.r08.s099_output/n100.r08.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s099_output/n100.r08.s099.untrimmed.sorted.bam\" -b \"n100.r08.s099_output/n100.r08.s099.primers.bed\" -p \"n100.r08.s099_output/n100.r08.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam\" \"n100.r08.s099_output/n100.r08.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s099_output/n100.r08.s099.reference.fas\" \"n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam\" > \"n100.r08.s099_output/n100.r08.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s099_output/n100.r08.s099.reference.fas\" --call-indels \"n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam\" > \"n100.r08.s099_output/n100.r08.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam\" > \"n100.r08.s099_output/n100.r08.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s099_output/n100.r08.s099.depth.txt\" \"n100.r08.s099_output/n100.r08.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s099_output/n100.r08.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s099_output/n100.r08.s099.reference.fas\" | bcftools consensus -m \"n100.r08.s099_output/n100.r08.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s099_output/n100.r08.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task dc62e337 (flow 98ca279e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s024_output\"\n        wget -O \"n100.r08.s024_output/n100.r08.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s024_output/n100.r08.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s024_output/n100.r08.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s024_output/n100.r08.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s024_output/n100.r08.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s024_output/n100.r08.s024.reference.fas\" \"n100.r08.s024_output/n100.r08.s024.fq1.fastq\" \"n100.r08.s024_output/n100.r08.s024.fq2.fastq\" | samtools view -bS - > \"n100.r08.s024_output/n100.r08.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s024_output/n100.r08.s024.untrimmed.sorted.bam\" \"n100.r08.s024_output/n100.r08.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s024_output/n100.r08.s024.untrimmed.sorted.bam\" -b \"n100.r08.s024_output/n100.r08.s024.primers.bed\" -p \"n100.r08.s024_output/n100.r08.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam\" \"n100.r08.s024_output/n100.r08.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s024_output/n100.r08.s024.reference.fas\" \"n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam\" > \"n100.r08.s024_output/n100.r08.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s024_output/n100.r08.s024.reference.fas\" --call-indels \"n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam\" > \"n100.r08.s024_output/n100.r08.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam\" > \"n100.r08.s024_output/n100.r08.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s024_output/n100.r08.s024.depth.txt\" \"n100.r08.s024_output/n100.r08.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s024_output/n100.r08.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s024_output/n100.r08.s024.reference.fas\" | bcftools consensus -m \"n100.r08.s024_output/n100.r08.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s024_output/n100.r08.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 0695043b (flow c0270ffe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s074_output\"\n        wget -O \"n100.r08.s074_output/n100.r08.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s074_output/n100.r08.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s074_output/n100.r08.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s074_output/n100.r08.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s074_output/n100.r08.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s074_output/n100.r08.s074.reference.fas\" \"n100.r08.s074_output/n100.r08.s074.fq1.fastq\" \"n100.r08.s074_output/n100.r08.s074.fq2.fastq\" | samtools view -bS - > \"n100.r08.s074_output/n100.r08.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s074_output/n100.r08.s074.untrimmed.sorted.bam\" \"n100.r08.s074_output/n100.r08.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s074_output/n100.r08.s074.untrimmed.sorted.bam\" -b \"n100.r08.s074_output/n100.r08.s074.primers.bed\" -p \"n100.r08.s074_output/n100.r08.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam\" \"n100.r08.s074_output/n100.r08.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s074_output/n100.r08.s074.reference.fas\" \"n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam\" > \"n100.r08.s074_output/n100.r08.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s074_output/n100.r08.s074.reference.fas\" --call-indels \"n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam\" > \"n100.r08.s074_output/n100.r08.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam\" > \"n100.r08.s074_output/n100.r08.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s074_output/n100.r08.s074.depth.txt\" \"n100.r08.s074_output/n100.r08.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s074_output/n100.r08.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s074_output/n100.r08.s074.reference.fas\" | bcftools consensus -m \"n100.r08.s074_output/n100.r08.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s074_output/n100.r08.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task fbea3b9c (flow 37f8d46a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s048_output\"\n        wget -O \"n100.r08.s048_output/n100.r08.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s048_output/n100.r08.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s048_output/n100.r08.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s048_output/n100.r08.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s048_output/n100.r08.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s048_output/n100.r08.s048.reference.fas\" \"n100.r08.s048_output/n100.r08.s048.fq1.fastq\" \"n100.r08.s048_output/n100.r08.s048.fq2.fastq\" | samtools view -bS - > \"n100.r08.s048_output/n100.r08.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s048_output/n100.r08.s048.untrimmed.sorted.bam\" \"n100.r08.s048_output/n100.r08.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s048_output/n100.r08.s048.untrimmed.sorted.bam\" -b \"n100.r08.s048_output/n100.r08.s048.primers.bed\" -p \"n100.r08.s048_output/n100.r08.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam\" \"n100.r08.s048_output/n100.r08.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s048_output/n100.r08.s048.reference.fas\" \"n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam\" > \"n100.r08.s048_output/n100.r08.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s048_output/n100.r08.s048.reference.fas\" --call-indels \"n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam\" > \"n100.r08.s048_output/n100.r08.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam\" > \"n100.r08.s048_output/n100.r08.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s048_output/n100.r08.s048.depth.txt\" \"n100.r08.s048_output/n100.r08.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s048_output/n100.r08.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s048_output/n100.r08.s048.reference.fas\" | bcftools consensus -m \"n100.r08.s048_output/n100.r08.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s048_output/n100.r08.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 35a36d68 (flow c0e958d6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s092_output\"\n        wget -O \"n100.r08.s092_output/n100.r08.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s092_output/n100.r08.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s092_output/n100.r08.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s092_output/n100.r08.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s092_output/n100.r08.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s092_output/n100.r08.s092.reference.fas\" \"n100.r08.s092_output/n100.r08.s092.fq1.fastq\" \"n100.r08.s092_output/n100.r08.s092.fq2.fastq\" | samtools view -bS - > \"n100.r08.s092_output/n100.r08.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s092_output/n100.r08.s092.untrimmed.sorted.bam\" \"n100.r08.s092_output/n100.r08.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s092_output/n100.r08.s092.untrimmed.sorted.bam\" -b \"n100.r08.s092_output/n100.r08.s092.primers.bed\" -p \"n100.r08.s092_output/n100.r08.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam\" \"n100.r08.s092_output/n100.r08.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s092_output/n100.r08.s092.reference.fas\" \"n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam\" > \"n100.r08.s092_output/n100.r08.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s092_output/n100.r08.s092.reference.fas\" --call-indels \"n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam\" > \"n100.r08.s092_output/n100.r08.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam\" > \"n100.r08.s092_output/n100.r08.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s092_output/n100.r08.s092.depth.txt\" \"n100.r08.s092_output/n100.r08.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s092_output/n100.r08.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s092_output/n100.r08.s092.reference.fas\" | bcftools consensus -m \"n100.r08.s092_output/n100.r08.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s092_output/n100.r08.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task a6e24a24 (flow 043fd0be): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s083_output\"\n        wget -O \"n100.r08.s083_output/n100.r08.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s083_output/n100.r08.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s083_output/n100.r08.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s083_output/n100.r08.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s083_output/n100.r08.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s083_output/n100.r08.s083.reference.fas\" \"n100.r08.s083_output/n100.r08.s083.fq1.fastq\" \"n100.r08.s083_output/n100.r08.s083.fq2.fastq\" | samtools view -bS - > \"n100.r08.s083_output/n100.r08.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s083_output/n100.r08.s083.untrimmed.sorted.bam\" \"n100.r08.s083_output/n100.r08.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s083_output/n100.r08.s083.untrimmed.sorted.bam\" -b \"n100.r08.s083_output/n100.r08.s083.primers.bed\" -p \"n100.r08.s083_output/n100.r08.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam\" \"n100.r08.s083_output/n100.r08.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s083_output/n100.r08.s083.reference.fas\" \"n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam\" > \"n100.r08.s083_output/n100.r08.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s083_output/n100.r08.s083.reference.fas\" --call-indels \"n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam\" > \"n100.r08.s083_output/n100.r08.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam\" > \"n100.r08.s083_output/n100.r08.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s083_output/n100.r08.s083.depth.txt\" \"n100.r08.s083_output/n100.r08.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s083_output/n100.r08.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s083_output/n100.r08.s083.reference.fas\" | bcftools consensus -m \"n100.r08.s083_output/n100.r08.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s083_output/n100.r08.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task 08eabe9e (flow e5f51180): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s047_output\"\n        wget -O \"n100.r08.s047_output/n100.r08.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s047_output/n100.r08.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s047_output/n100.r08.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s047_output/n100.r08.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s047_output/n100.r08.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s047_output/n100.r08.s047.reference.fas\" \"n100.r08.s047_output/n100.r08.s047.fq1.fastq\" \"n100.r08.s047_output/n100.r08.s047.fq2.fastq\" | samtools view -bS - > \"n100.r08.s047_output/n100.r08.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s047_output/n100.r08.s047.untrimmed.sorted.bam\" \"n100.r08.s047_output/n100.r08.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s047_output/n100.r08.s047.untrimmed.sorted.bam\" -b \"n100.r08.s047_output/n100.r08.s047.primers.bed\" -p \"n100.r08.s047_output/n100.r08.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam\" \"n100.r08.s047_output/n100.r08.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s047_output/n100.r08.s047.reference.fas\" \"n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam\" > \"n100.r08.s047_output/n100.r08.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s047_output/n100.r08.s047.reference.fas\" --call-indels \"n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam\" > \"n100.r08.s047_output/n100.r08.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam\" > \"n100.r08.s047_output/n100.r08.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s047_output/n100.r08.s047.depth.txt\" \"n100.r08.s047_output/n100.r08.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s047_output/n100.r08.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s047_output/n100.r08.s047.reference.fas\" | bcftools consensus -m \"n100.r08.s047_output/n100.r08.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s047_output/n100.r08.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:20:29 scheduler task dff020c6 (flow 644d6c1e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r08.s089_output\"\n        wget -O \"n100.r08.s089_output/n100.r08.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r08.s089_output/n100.r08.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r08.s089_output/n100.r08.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r08.s089_output/n100.r08.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r08.s089_output/n100.r08.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r08.s089_output/n100.r08.s089.reference.fas\" \"n100.r08.s089_output/n100.r08.s089.fq1.fastq\" \"n100.r08.s089_output/n100.r08.s089.fq2.fastq\" | samtools view -bS - > \"n100.r08.s089_output/n100.r08.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s089_output/n100.r08.s089.untrimmed.sorted.bam\" \"n100.r08.s089_output/n100.r08.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r08.s089_output/n100.r08.s089.untrimmed.sorted.bam\" -b \"n100.r08.s089_output/n100.r08.s089.primers.bed\" -p \"n100.r08.s089_output/n100.r08.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam\" \"n100.r08.s089_output/n100.r08.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r08.s089_output/n100.r08.s089.reference.fas\" \"n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam\" > \"n100.r08.s089_output/n100.r08.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r08.s089_output/n100.r08.s089.reference.fas\" --call-indels \"n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam\" > \"n100.r08.s089_output/n100.r08.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam\" > \"n100.r08.s089_output/n100.r08.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r08.s089_output/n100.r08.s089.depth.txt\" \"n100.r08.s089_output/n100.r08.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r08.s089_output/n100.r08.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r08.s089_output/n100.r08.s089.reference.fas\" | bcftools consensus -m \"n100.r08.s089_output/n100.r08.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r08.s089_output/n100.r08.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r08.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r08/n100.r08.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r08/n100.r08.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:21:16 scheduler task 8fe40f12 (flow a788dda5): assigning to alloc ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:21:16 scheduler task dff020c6 (flow 644d6c1e): assigning to alloc ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:21:16 scheduler task 08eabe9e (flow e5f51180): assigning to alloc ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:21:16 scheduler task a6e24a24 (flow 043fd0be): assigning to alloc ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:21:16 scheduler task 8fe40f12 (flow a788dda5): loading (try 0): started
2021/07/08 17:21:16 scheduler task dff020c6 (flow 644d6c1e): loading (try 0): started
2021/07/08 17:21:16 scheduler task 8fe40f12 (flow a788dda5): loading val<.=s3://niema-test/n100/r08/n100.r08.s073_R2.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task 8fe40f12 (flow a788dda5): loading val<.=s3://niema-test/n100/r08/n100.r08.s073_R1.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task dff020c6 (flow 644d6c1e): loading val<.=s3://niema-test/n100/r08/n100.r08.s089_R1.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task a6e24a24 (flow 043fd0be): loading (try 0): started
2021/07/08 17:21:16 scheduler task a6e24a24 (flow 043fd0be): loading val<.=s3://niema-test/n100/r08/n100.r08.s083_R2.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task dff020c6 (flow 644d6c1e): loading val<.=s3://niema-test/n100/r08/n100.r08.s089_R2.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task 08eabe9e (flow e5f51180): loading (try 0): started
2021/07/08 17:21:16 scheduler task 08eabe9e (flow e5f51180): loading val<.=s3://niema-test/n100/r08/n100.r08.s047_R2.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task a6e24a24 (flow 043fd0be): loading val<.=s3://niema-test/n100/r08/n100.r08.s083_R1.fastq 35.4MiB>
2021/07/08 17:21:16 scheduler task 08eabe9e (flow e5f51180): loading val<.=s3://niema-test/n100/r08/n100.r08.s047_R1.fastq 35.4MiB>
2021/07/08 17:21:17 scheduler task dff020c6 (flow 644d6c1e): loaded val<.=c63fcc04 35.4MiB>
2021/07/08 17:21:17 scheduler task dff020c6 (flow 644d6c1e): loaded val<.=e17185f8 35.4MiB>
2021/07/08 17:21:17 scheduler task dff020c6 (flow 644d6c1e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:17 scheduler task dff020c6 (flow 644d6c1e): submitting (try 0): started
2021/07/08 17:21:17 scheduler task 08eabe9e (flow e5f51180): loaded val<.=ba9ce902 35.4MiB>
2021/07/08 17:21:17 scheduler task a6e24a24 (flow 043fd0be): loaded val<.=ab17b0f3 35.4MiB>
2021/07/08 17:21:17 scheduler task 8fe40f12 (flow a788dda5): loaded val<.=d9211b4d 35.4MiB>
2021/07/08 17:21:17 scheduler task 8fe40f12 (flow a788dda5): loaded val<.=d01697ac 35.4MiB>
2021/07/08 17:21:17 scheduler task 8fe40f12 (flow a788dda5): loading (try 0): successful, next state: submitting
2021/07/08 17:21:17 scheduler task a6e24a24 (flow 043fd0be): loaded val<.=de928a81 35.4MiB>
2021/07/08 17:21:17 scheduler task a6e24a24 (flow 043fd0be): loading (try 0): successful, next state: submitting
2021/07/08 17:21:17 scheduler task 8fe40f12 (flow a788dda5): submitting (try 0): started
2021/07/08 17:21:17 scheduler task a6e24a24 (flow 043fd0be): submitting (try 0): started
2021/07/08 17:21:17 scheduler task 08eabe9e (flow e5f51180): loaded val<.=5b98aeb6 35.4MiB>
2021/07/08 17:21:17 scheduler task 08eabe9e (flow e5f51180): loading (try 0): successful, next state: submitting
2021/07/08 17:21:17 scheduler task 08eabe9e (flow e5f51180): submitting (try 0): started
2021/07/08 17:21:17 scheduler task dff020c6 (flow 644d6c1e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:17 scheduler task dff020c6 (flow 644d6c1e): waiting for completion (try 0): started
2021/07/08 17:21:17  ->  n100.r08.s089.Main.out_file 644d6c1e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:17 n100.r08.s089.Main.out_file 644d6c1e n100/r08/n100.r08.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:01e93c5c32b827c3007eb10862e38be6e5b4a21a00b2a15e993c43b2bd2e93e9
	sha256:644d6c1ea1b02c9797b205628e3155480452e5d5953cb4ae4ee86b4ffd2875ac
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dff020c60decb04753845a56f2d59f5d4754a0ccfa5ede13271ef79b14d9c5d3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s089_output"
	    wget -O "n100.r08.s089_output/n100.r08.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s089_output/n100.r08.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s089_output/n100.r08.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s089_output/n100.r08.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s089_output/n100.r08.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s089_output/n100.r08.s089.reference.fas" "n100.r08.s089_output/n100.r08.s089.fq1.fastq" "n100.r08.s089_output/n100.r08.s089.fq2.fastq" | samtools view -bS - > "n100.r08.s089_output/n100.r08.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s089_output/n100.r08.s089.untrimmed.sorted.bam" "n100.r08.s089_output/n100.r08.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s089_output/n100.r08.s089.untrimmed.sorted.bam" -b "n100.r08.s089_output/n100.r08.s089.primers.bed" -p "n100.r08.s089_output/n100.r08.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" "n100.r08.s089_output/n100.r08.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s089_output/n100.r08.s089.reference.fas" "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" > "n100.r08.s089_output/n100.r08.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s089_output/n100.r08.s089.reference.fas" --call-indels "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" > "n100.r08.s089_output/n100.r08.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" > "n100.r08.s089_output/n100.r08.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s089_output/n100.r08.s089.depth.txt" "n100.r08.s089_output/n100.r08.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s089_output/n100.r08.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s089_output/n100.r08.s089.reference.fas" | bcftools consensus -m "n100.r08.s089_output/n100.r08.s089.low_depth.tsv" tmp.vcf.gz > "n100.r08.s089_output/n100.r08.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:18 scheduler task 8fe40f12 (flow a788dda5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:18 scheduler task 8fe40f12 (flow a788dda5): waiting for completion (try 0): started
2021/07/08 17:21:18  ->  n100.r08.s073.Main.out_file a788dda5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:18 n100.r08.s073.Main.out_file a788dda5 n100/r08/n100.r08.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:385f14836def0673bd9002bf473eb3b636a6d631af86b19c52e1f00b9fa048a5
	sha256:a788dda59088d2449ee15c6b2ff559c6488d39ad69b51b364866e35746c3400c
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8fe40f12b89402dc330d538ccd36fa01a0b2cae95eab1faee4ece08ebc314d86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s073_output"
	    wget -O "n100.r08.s073_output/n100.r08.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s073_output/n100.r08.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s073_output/n100.r08.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s073_output/n100.r08.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s073_output/n100.r08.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s073_output/n100.r08.s073.reference.fas" "n100.r08.s073_output/n100.r08.s073.fq1.fastq" "n100.r08.s073_output/n100.r08.s073.fq2.fastq" | samtools view -bS - > "n100.r08.s073_output/n100.r08.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s073_output/n100.r08.s073.untrimmed.sorted.bam" "n100.r08.s073_output/n100.r08.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s073_output/n100.r08.s073.untrimmed.sorted.bam" -b "n100.r08.s073_output/n100.r08.s073.primers.bed" -p "n100.r08.s073_output/n100.r08.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" "n100.r08.s073_output/n100.r08.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s073_output/n100.r08.s073.reference.fas" "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" > "n100.r08.s073_output/n100.r08.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s073_output/n100.r08.s073.reference.fas" --call-indels "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" > "n100.r08.s073_output/n100.r08.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" > "n100.r08.s073_output/n100.r08.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s073_output/n100.r08.s073.depth.txt" "n100.r08.s073_output/n100.r08.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s073_output/n100.r08.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s073_output/n100.r08.s073.reference.fas" | bcftools consensus -m "n100.r08.s073_output/n100.r08.s073.low_depth.tsv" tmp.vcf.gz > "n100.r08.s073_output/n100.r08.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:18 scheduler task a6e24a24 (flow 043fd0be): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:18 scheduler task a6e24a24 (flow 043fd0be): waiting for completion (try 0): started
2021/07/08 17:21:18  ->  n100.r08.s083.Main.out_file 043fd0be exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:18 n100.r08.s083.Main.out_file 043fd0be n100/r08/n100.r08.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:238cdcb5fcbbbc4f37d106771339094663bf8d801b6009ac0c096f25ac8b437a
	sha256:043fd0be06de0baea873624d463246c6280c8c753199a59fb4ba9492213e77b0
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a6e24a241d4ceb96e5086a5a501d93ae9691c2465196864b8ed3404dc26d8819
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s083_output"
	    wget -O "n100.r08.s083_output/n100.r08.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s083_output/n100.r08.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s083_output/n100.r08.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s083_output/n100.r08.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s083_output/n100.r08.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s083_output/n100.r08.s083.reference.fas" "n100.r08.s083_output/n100.r08.s083.fq1.fastq" "n100.r08.s083_output/n100.r08.s083.fq2.fastq" | samtools view -bS - > "n100.r08.s083_output/n100.r08.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s083_output/n100.r08.s083.untrimmed.sorted.bam" "n100.r08.s083_output/n100.r08.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s083_output/n100.r08.s083.untrimmed.sorted.bam" -b "n100.r08.s083_output/n100.r08.s083.primers.bed" -p "n100.r08.s083_output/n100.r08.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" "n100.r08.s083_output/n100.r08.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s083_output/n100.r08.s083.reference.fas" "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" > "n100.r08.s083_output/n100.r08.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s083_output/n100.r08.s083.reference.fas" --call-indels "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" > "n100.r08.s083_output/n100.r08.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" > "n100.r08.s083_output/n100.r08.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s083_output/n100.r08.s083.depth.txt" "n100.r08.s083_output/n100.r08.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s083_output/n100.r08.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s083_output/n100.r08.s083.reference.fas" | bcftools consensus -m "n100.r08.s083_output/n100.r08.s083.low_depth.tsv" tmp.vcf.gz > "n100.r08.s083_output/n100.r08.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:18 scheduler task 08eabe9e (flow e5f51180): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:18 scheduler task 08eabe9e (flow e5f51180): waiting for completion (try 0): started
2021/07/08 17:21:18  ->  n100.r08.s047.Main.out_file e5f51180 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:18 n100.r08.s047.Main.out_file e5f51180 n100/r08/n100.r08.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:592af9125e422e44f8f5ee6d0dfe0c0b72694ae01c4ba3ce37a132e4bccc99c7
	sha256:e5f5118011c00d8354daa4d70ef31003a91a6d30c39e1a86d5d3647863bf7be2
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/08eabe9ec0d7b918f3d8940618b834bdb09957aafa5138cd743d8bab58fc7ef2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s047_output"
	    wget -O "n100.r08.s047_output/n100.r08.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s047_output/n100.r08.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s047_output/n100.r08.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s047_output/n100.r08.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s047_output/n100.r08.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s047_output/n100.r08.s047.reference.fas" "n100.r08.s047_output/n100.r08.s047.fq1.fastq" "n100.r08.s047_output/n100.r08.s047.fq2.fastq" | samtools view -bS - > "n100.r08.s047_output/n100.r08.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s047_output/n100.r08.s047.untrimmed.sorted.bam" "n100.r08.s047_output/n100.r08.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s047_output/n100.r08.s047.untrimmed.sorted.bam" -b "n100.r08.s047_output/n100.r08.s047.primers.bed" -p "n100.r08.s047_output/n100.r08.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" "n100.r08.s047_output/n100.r08.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s047_output/n100.r08.s047.reference.fas" "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" > "n100.r08.s047_output/n100.r08.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s047_output/n100.r08.s047.reference.fas" --call-indels "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" > "n100.r08.s047_output/n100.r08.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" > "n100.r08.s047_output/n100.r08.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s047_output/n100.r08.s047.depth.txt" "n100.r08.s047_output/n100.r08.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s047_output/n100.r08.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s047_output/n100.r08.s047.reference.fas" | bcftools consensus -m "n100.r08.s047_output/n100.r08.s047.low_depth.tsv" tmp.vcf.gz > "n100.r08.s047_output/n100.r08.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:48 scheduler task 35a36d68 (flow c0e958d6): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task fbea3b9c (flow 37f8d46a): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 0695043b (flow c0270ffe): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task dc62e337 (flow 98ca279e): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 35a36d68 (flow c0e958d6): loading (try 0): started
2021/07/08 17:21:48 scheduler task dc62e337 (flow 98ca279e): loading (try 0): started
2021/07/08 17:21:48 scheduler task 35a36d68 (flow c0e958d6): loading val<.=s3://niema-test/n100/r08/n100.r08.s092_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task dc62e337 (flow 98ca279e): loading val<.=s3://niema-test/n100/r08/n100.r08.s024_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0695043b (flow c0270ffe): loading (try 0): started
2021/07/08 17:21:48 scheduler task 35a36d68 (flow c0e958d6): loading val<.=s3://niema-test/n100/r08/n100.r08.s092_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ba1130bd (flow c6f7e8d0): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task dc62e337 (flow 98ca279e): loading val<.=s3://niema-test/n100/r08/n100.r08.s024_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0695043b (flow c0270ffe): loading val<.=s3://niema-test/n100/r08/n100.r08.s074_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task fbea3b9c (flow 37f8d46a): loading (try 0): started
2021/07/08 17:21:48 scheduler task ba1130bd (flow c6f7e8d0): loading (try 0): started
2021/07/08 17:21:48 scheduler task fbea3b9c (flow 37f8d46a): loading val<.=s3://niema-test/n100/r08/n100.r08.s048_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ba1130bd (flow c6f7e8d0): loading val<.=s3://niema-test/n100/r08/n100.r08.s099_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task fbea3b9c (flow 37f8d46a): loading val<.=s3://niema-test/n100/r08/n100.r08.s048_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0695043b (flow c0270ffe): loading val<.=s3://niema-test/n100/r08/n100.r08.s074_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ba1130bd (flow c6f7e8d0): loading val<.=s3://niema-test/n100/r08/n100.r08.s099_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d990b33b (flow 4f4f56d4): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 899f5270 (flow c4aa557b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e3e2fbc0 (flow b7aad0a1): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e4711d1d (flow 40d58762): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 2c812c39 (flow 0d5ce47b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task cc6f4951 (flow db5af4da): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 4f36edfc (flow 7a476ecb): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 17275071 (flow b5a84f70): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 17f58eff (flow afb9c82e): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 42d18dc0 (flow 30cb4af0): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task d321bea4 (flow 6fbbdec0): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 625ac6d7 (flow c1c3792a): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task be583c00 (flow 601a9c71): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task a9954f8b (flow 6c9f7fef): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 4ef1336d (flow bc17d794): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 4b7d1db7 (flow 0c27eb3e): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task ef32d510 (flow 7c721fb5): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 67ce347f (flow 32d2695b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task cef49e65 (flow 56e46f6d): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 8ee17ca7 (flow cc702d2f): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 19f1fa9b (flow 8358078b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 61314efc (flow eeef90ae): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task d990b33b (flow 4f4f56d4): loading (try 0): started
2021/07/08 17:21:48 scheduler task 17275071 (flow b5a84f70): loading (try 0): started
2021/07/08 17:21:48 scheduler task 2c812c39 (flow 0d5ce47b): loading (try 0): started
2021/07/08 17:21:48 scheduler task 19f1fa9b (flow 8358078b): loading (try 0): started
2021/07/08 17:21:48 scheduler task d321bea4 (flow 6fbbdec0): loading (try 0): started
2021/07/08 17:21:48 scheduler task be583c00 (flow 601a9c71): loading (try 0): started
2021/07/08 17:21:48 scheduler task d321bea4 (flow 6fbbdec0): loading val<.=s3://niema-test/n100/r08/n100.r08.s085_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d321bea4 (flow 6fbbdec0): loading val<.=s3://niema-test/n100/r08/n100.r08.s085_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task be583c00 (flow 601a9c71): loading val<.=s3://niema-test/n100/r08/n100.r08.s100_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 2c812c39 (flow 0d5ce47b): loading val<.=s3://niema-test/n100/r08/n100.r08.s049_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task f714587f (flow ffcb62ed): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 8270b132 (flow 53910cbe): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 5f2477ba (flow aa8092e5): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task bdd078c4 (flow 19f87377): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 991d72a7 (flow 5307f7d5): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task a14d135e (flow 37c80ebd): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 77090a8d (flow 6db5a9b8): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e266f779 (flow 89895078): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 0b48b7f4 (flow 3c31b57e): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task cef151a9 (flow ae810609): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task c04eb0c7 (flow 37139f88): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 9ae8bc0a (flow b42d9724): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 1e17310e (flow 4be7c800): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 719f8479 (flow bc3f293a): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task aad793f7 (flow eaaaa641): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task a9954f8b (flow 6c9f7fef): loading (try 0): started
2021/07/08 17:21:48 scheduler task f714587f (flow ffcb62ed): loading (try 0): started
2021/07/08 17:21:48 scheduler task bdd078c4 (flow 19f87377): loading (try 0): started
2021/07/08 17:21:48 scheduler task f714587f (flow ffcb62ed): loading val<.=s3://niema-test/n100/r08/n100.r08.s072_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cef151a9 (flow ae810609): loading (try 0): started
2021/07/08 17:21:48 scheduler task 17f58eff (flow afb9c82e): loading (try 0): started
2021/07/08 17:21:48 scheduler task cef151a9 (flow ae810609): loading val<.=s3://niema-test/n100/r08/n100.r08.s096_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cef151a9 (flow ae810609): loading val<.=s3://niema-test/n100/r08/n100.r08.s096_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 17f58eff (flow afb9c82e): loading val<.=s3://niema-test/n100/r08/n100.r08.s010_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 719f8479 (flow bc3f293a): loading (try 0): started
2021/07/08 17:21:48 scheduler task 899f5270 (flow c4aa557b): loading (try 0): started
2021/07/08 17:21:48 scheduler task 719f8479 (flow bc3f293a): loading val<.=s3://niema-test/n100/r08/n100.r08.s060_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 899f5270 (flow c4aa557b): loading val<.=s3://niema-test/n100/r08/n100.r08.s062_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e3e2fbc0 (flow b7aad0a1): loading (try 0): started
2021/07/08 17:21:48 scheduler task 899f5270 (flow c4aa557b): loading val<.=s3://niema-test/n100/r08/n100.r08.s062_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e3e2fbc0 (flow b7aad0a1): loading val<.=s3://niema-test/n100/r08/n100.r08.s075_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4f36edfc (flow 7a476ecb): loading (try 0): started
2021/07/08 17:21:48 scheduler task e3e2fbc0 (flow b7aad0a1): loading val<.=s3://niema-test/n100/r08/n100.r08.s075_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4f36edfc (flow 7a476ecb): loading val<.=s3://niema-test/n100/r08/n100.r08.s023_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ef32d510 (flow 7c721fb5): loading (try 0): started
2021/07/08 17:21:48 scheduler task 4f36edfc (flow 7a476ecb): loading val<.=s3://niema-test/n100/r08/n100.r08.s023_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ef32d510 (flow 7c721fb5): loading val<.=s3://niema-test/n100/r08/n100.r08.s090_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ef32d510 (flow 7c721fb5): loading val<.=s3://niema-test/n100/r08/n100.r08.s090_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 61314efc (flow eeef90ae): loading (try 0): started
2021/07/08 17:21:48 scheduler task 61314efc (flow eeef90ae): loading val<.=s3://niema-test/n100/r08/n100.r08.s033_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cc6f4951 (flow db5af4da): loading (try 0): started
2021/07/08 17:21:48 scheduler task 4ef1336d (flow bc17d794): loading (try 0): started
2021/07/08 17:21:48 scheduler task d990b33b (flow 4f4f56d4): loading val<.=s3://niema-test/n100/r08/n100.r08.s057_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4b7d1db7 (flow 0c27eb3e): loading (try 0): started
2021/07/08 17:21:48 scheduler task cef49e65 (flow 56e46f6d): loading (try 0): started
2021/07/08 17:21:48 scheduler task 8ee17ca7 (flow cc702d2f): loading (try 0): started
2021/07/08 17:21:48 scheduler task 17275071 (flow b5a84f70): loading val<.=s3://niema-test/n100/r08/n100.r08.s056_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 625ac6d7 (flow c1c3792a): loading (try 0): started
2021/07/08 17:21:48 scheduler task 17275071 (flow b5a84f70): loading val<.=s3://niema-test/n100/r08/n100.r08.s056_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d990b33b (flow 4f4f56d4): loading val<.=s3://niema-test/n100/r08/n100.r08.s057_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e4711d1d (flow 40d58762): loading (try 0): started
2021/07/08 17:21:48 scheduler task 2c812c39 (flow 0d5ce47b): loading val<.=s3://niema-test/n100/r08/n100.r08.s049_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 19f1fa9b (flow 8358078b): loading val<.=s3://niema-test/n100/r08/n100.r08.s082_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 19f1fa9b (flow 8358078b): loading val<.=s3://niema-test/n100/r08/n100.r08.s082_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 42d18dc0 (flow 30cb4af0): loading (try 0): started
2021/07/08 17:21:48 scheduler task be583c00 (flow 601a9c71): loading val<.=s3://niema-test/n100/r08/n100.r08.s100_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a14d135e (flow 37c80ebd): loading (try 0): started
2021/07/08 17:21:48 scheduler task b3c857b7 (flow 5fa48c75): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 8270b132 (flow 53910cbe): loading (try 0): started
2021/07/08 17:21:48 scheduler task aad793f7 (flow eaaaa641): loading (try 0): started
2021/07/08 17:21:48 scheduler task 5f2477ba (flow aa8092e5): loading (try 0): started
2021/07/08 17:21:48 scheduler task a9954f8b (flow 6c9f7fef): loading val<.=s3://niema-test/n100/r08/n100.r08.s076_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task c04eb0c7 (flow 37139f88): loading (try 0): started
2021/07/08 17:21:48 scheduler task 9ae8bc0a (flow b42d9724): loading (try 0): started
2021/07/08 17:21:48 scheduler task 1e17310e (flow 4be7c800): loading (try 0): started
2021/07/08 17:21:48 scheduler task f714587f (flow ffcb62ed): loading val<.=s3://niema-test/n100/r08/n100.r08.s072_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a9954f8b (flow 6c9f7fef): loading val<.=s3://niema-test/n100/r08/n100.r08.s076_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 77090a8d (flow 6db5a9b8): loading (try 0): started
2021/07/08 17:21:48 scheduler task 991d72a7 (flow 5307f7d5): loading (try 0): started
2021/07/08 17:21:48 scheduler task bdd078c4 (flow 19f87377): loading val<.=s3://niema-test/n100/r08/n100.r08.s037_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0b48b7f4 (flow 3c31b57e): loading (try 0): started
2021/07/08 17:21:48 scheduler task e266f779 (flow 89895078): loading (try 0): started
2021/07/08 17:21:48 scheduler task bdd078c4 (flow 19f87377): loading val<.=s3://niema-test/n100/r08/n100.r08.s037_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 17f58eff (flow afb9c82e): loading val<.=s3://niema-test/n100/r08/n100.r08.s010_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 719f8479 (flow bc3f293a): loading val<.=s3://niema-test/n100/r08/n100.r08.s060_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 67ce347f (flow 32d2695b): loading (try 0): started
2021/07/08 17:21:48 scheduler task 61314efc (flow eeef90ae): loading val<.=s3://niema-test/n100/r08/n100.r08.s033_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cc6f4951 (flow db5af4da): loading val<.=s3://niema-test/n100/r08/n100.r08.s014_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4ef1336d (flow bc17d794): loading val<.=s3://niema-test/n100/r08/n100.r08.s021_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cc6f4951 (flow db5af4da): loading val<.=s3://niema-test/n100/r08/n100.r08.s014_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4b7d1db7 (flow 0c27eb3e): loading val<.=s3://niema-test/n100/r08/n100.r08.s097_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4ef1336d (flow bc17d794): loading val<.=s3://niema-test/n100/r08/n100.r08.s021_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cef49e65 (flow 56e46f6d): loading val<.=s3://niema-test/n100/r08/n100.r08.s009_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4b7d1db7 (flow 0c27eb3e): loading val<.=s3://niema-test/n100/r08/n100.r08.s097_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8ee17ca7 (flow cc702d2f): loading val<.=s3://niema-test/n100/r08/n100.r08.s016_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cef49e65 (flow 56e46f6d): loading val<.=s3://niema-test/n100/r08/n100.r08.s009_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 625ac6d7 (flow c1c3792a): loading val<.=s3://niema-test/n100/r08/n100.r08.s018_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8ee17ca7 (flow cc702d2f): loading val<.=s3://niema-test/n100/r08/n100.r08.s016_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e4711d1d (flow 40d58762): loading val<.=s3://niema-test/n100/r08/n100.r08.s067_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 625ac6d7 (flow c1c3792a): loading val<.=s3://niema-test/n100/r08/n100.r08.s018_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 42d18dc0 (flow 30cb4af0): loading val<.=s3://niema-test/n100/r08/n100.r08.s020_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e4711d1d (flow 40d58762): loading val<.=s3://niema-test/n100/r08/n100.r08.s067_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a14d135e (flow 37c80ebd): loading val<.=s3://niema-test/n100/r08/n100.r08.s002_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 42d18dc0 (flow 30cb4af0): loading val<.=s3://niema-test/n100/r08/n100.r08.s020_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 27109b10 (flow 11e863f7): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 4fc2765c (flow b30b76d2): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task a3702691 (flow f12b0ac7): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e7dd9705 (flow 15301ea9): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task d1b0c57e (flow 769f8790): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 77ea896f (flow 6e71356b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 4990178e (flow eda0dc49): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 2bd7a6bf (flow ebe32457): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 0004b3b5 (flow 509a6465): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task a660f2ec (flow abfbfcf5): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task d57d51d4 (flow 714a362d): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 6fc6d1e0 (flow edf8b1db): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 3579f14e (flow ec208550): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task acb01e0b (flow b6de7c5d): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 96cdb789 (flow 37acff54): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 7e57f1b6 (flow 8e45de36): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 13af5d5a (flow 0b3effbc): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task d57d51d4 (flow 714a362d): loading (try 0): started
2021/07/08 17:21:48 scheduler task 13af5d5a (flow 0b3effbc): loading (try 0): started
2021/07/08 17:21:48 scheduler task 4fc2765c (flow b30b76d2): loading (try 0): started
2021/07/08 17:21:48 scheduler task 6fc6d1e0 (flow edf8b1db): loading (try 0): started
2021/07/08 17:21:48 scheduler task 2bd7a6bf (flow ebe32457): loading (try 0): started
2021/07/08 17:21:48 scheduler task 6fc6d1e0 (flow edf8b1db): loading val<.=s3://niema-test/n100/r08/n100.r08.s054_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 2bd7a6bf (flow ebe32457): loading val<.=s3://niema-test/n100/r08/n100.r08.s001_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d1b0c57e (flow 769f8790): loading (try 0): started
2021/07/08 17:21:48 scheduler task 77ea896f (flow 6e71356b): loading (try 0): started
2021/07/08 17:21:48 scheduler task acb01e0b (flow b6de7c5d): loading (try 0): started
2021/07/08 17:21:48 scheduler task 77ea896f (flow 6e71356b): loading val<.=s3://niema-test/n100/r08/n100.r08.s055_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d1b0c57e (flow 769f8790): loading val<.=s3://niema-test/n100/r08/n100.r08.s013_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a660f2ec (flow abfbfcf5): loading (try 0): started
2021/07/08 17:21:48 scheduler task 13af5d5a (flow 0b3effbc): loading val<.=s3://niema-test/n100/r08/n100.r08.s027_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task acb01e0b (flow b6de7c5d): loading val<.=s3://niema-test/n100/r08/n100.r08.s058_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d57d51d4 (flow 714a362d): loading val<.=s3://niema-test/n100/r08/n100.r08.s038_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a660f2ec (flow abfbfcf5): loading val<.=s3://niema-test/n100/r08/n100.r08.s003_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 7e57f1b6 (flow 8e45de36): loading (try 0): started
2021/07/08 17:21:48 scheduler task 7e57f1b6 (flow 8e45de36): loading val<.=s3://niema-test/n100/r08/n100.r08.s026_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4990178e (flow eda0dc49): loading (try 0): started
2021/07/08 17:21:48 scheduler task 7e57f1b6 (flow 8e45de36): loading val<.=s3://niema-test/n100/r08/n100.r08.s026_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4990178e (flow eda0dc49): loading val<.=s3://niema-test/n100/r08/n100.r08.s031_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4990178e (flow eda0dc49): loading val<.=s3://niema-test/n100/r08/n100.r08.s031_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 27109b10 (flow 11e863f7): loading (try 0): started
2021/07/08 17:21:48 scheduler task 27109b10 (flow 11e863f7): loading val<.=s3://niema-test/n100/r08/n100.r08.s005_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 11cbb428 (flow 6e2216d0): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e73506b2 (flow 6e531834): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 83e8a2d0 (flow cb20e356): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task c4ff5c5f (flow 14e5610e): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task fd88e144 (flow 30072890): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 7ba99413 (flow 45b5a090): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 533c7302 (flow f2462fba): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 0e91bc71 (flow ac83cb33): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task f62422fc (flow 7c1d2985): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task dee4f7a4 (flow 63e7c0c0): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 0daa8d96 (flow 6a75b3c2): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 95ea60c7 (flow 53b65fb8): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 55bfb398 (flow ad6bd26e): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 43e62e27 (flow a215c969): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task f10c7dd1 (flow d4a953a5): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 7c80984b (flow f133966a): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task cd7dca86 (flow 59cfb075): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task f62422fc (flow 7c1d2985): loading (try 0): started
2021/07/08 17:21:48 scheduler task f10c7dd1 (flow d4a953a5): loading (try 0): started
2021/07/08 17:21:48 scheduler task f62422fc (flow 7c1d2985): loading val<.=s3://niema-test/n100/r08/n100.r08.s008_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task f62422fc (flow 7c1d2985): loading val<.=s3://niema-test/n100/r08/n100.r08.s008_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task f10c7dd1 (flow d4a953a5): loading val<.=s3://niema-test/n100/r08/n100.r08.s078_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 3579f14e (flow ec208550): loading (try 0): started
2021/07/08 17:21:48 scheduler task 3579f14e (flow ec208550): loading val<.=s3://niema-test/n100/r08/n100.r08.s059_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0e91bc71 (flow ac83cb33): loading (try 0): started
2021/07/08 17:21:48 scheduler task 0e91bc71 (flow ac83cb33): loading val<.=s3://niema-test/n100/r08/n100.r08.s065_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 3579f14e (flow ec208550): loading val<.=s3://niema-test/n100/r08/n100.r08.s059_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 7ba99413 (flow 45b5a090): loading (try 0): started
2021/07/08 17:21:48 scheduler task 7ba99413 (flow 45b5a090): loading val<.=s3://niema-test/n100/r08/n100.r08.s086_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0e91bc71 (flow ac83cb33): loading val<.=s3://niema-test/n100/r08/n100.r08.s065_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0004b3b5 (flow 509a6465): loading (try 0): started
2021/07/08 17:21:48 scheduler task 0004b3b5 (flow 509a6465): loading val<.=s3://niema-test/n100/r08/n100.r08.s011_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 7ba99413 (flow 45b5a090): loading val<.=s3://niema-test/n100/r08/n100.r08.s086_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a3702691 (flow f12b0ac7): loading (try 0): started
2021/07/08 17:21:48 scheduler task a3702691 (flow f12b0ac7): loading val<.=s3://niema-test/n100/r08/n100.r08.s080_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0004b3b5 (flow 509a6465): loading val<.=s3://niema-test/n100/r08/n100.r08.s011_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 6fc6d1e0 (flow edf8b1db): loading val<.=s3://niema-test/n100/r08/n100.r08.s054_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 13af5d5a (flow 0b3effbc): loading val<.=s3://niema-test/n100/r08/n100.r08.s027_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e7dd9705 (flow 15301ea9): loading (try 0): started
2021/07/08 17:21:48 scheduler task e7dd9705 (flow 15301ea9): loading val<.=s3://niema-test/n100/r08/n100.r08.s039_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a3702691 (flow f12b0ac7): loading val<.=s3://niema-test/n100/r08/n100.r08.s080_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8270b132 (flow 53910cbe): loading val<.=s3://niema-test/n100/r08/n100.r08.s064_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8270b132 (flow 53910cbe): loading val<.=s3://niema-test/n100/r08/n100.r08.s064_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task aad793f7 (flow eaaaa641): loading val<.=s3://niema-test/n100/r08/n100.r08.s094_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 5f2477ba (flow aa8092e5): loading val<.=s3://niema-test/n100/r08/n100.r08.s070_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task aad793f7 (flow eaaaa641): loading val<.=s3://niema-test/n100/r08/n100.r08.s094_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 5f2477ba (flow aa8092e5): loading val<.=s3://niema-test/n100/r08/n100.r08.s070_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task c04eb0c7 (flow 37139f88): loading val<.=s3://niema-test/n100/r08/n100.r08.s052_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e7dd9705 (flow 15301ea9): loading val<.=s3://niema-test/n100/r08/n100.r08.s039_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 9ae8bc0a (flow b42d9724): loading val<.=s3://niema-test/n100/r08/n100.r08.s042_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task c04eb0c7 (flow 37139f88): loading val<.=s3://niema-test/n100/r08/n100.r08.s052_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 1e17310e (flow 4be7c800): loading val<.=s3://niema-test/n100/r08/n100.r08.s015_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 9ae8bc0a (flow b42d9724): loading val<.=s3://niema-test/n100/r08/n100.r08.s042_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 77090a8d (flow 6db5a9b8): loading val<.=s3://niema-test/n100/r08/n100.r08.s007_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 1e17310e (flow 4be7c800): loading val<.=s3://niema-test/n100/r08/n100.r08.s015_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 991d72a7 (flow 5307f7d5): loading val<.=s3://niema-test/n100/r08/n100.r08.s095_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 77090a8d (flow 6db5a9b8): loading val<.=s3://niema-test/n100/r08/n100.r08.s007_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0b48b7f4 (flow 3c31b57e): loading val<.=s3://niema-test/n100/r08/n100.r08.s084_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 991d72a7 (flow 5307f7d5): loading val<.=s3://niema-test/n100/r08/n100.r08.s095_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e266f779 (flow 89895078): loading val<.=s3://niema-test/n100/r08/n100.r08.s066_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0b48b7f4 (flow 3c31b57e): loading val<.=s3://niema-test/n100/r08/n100.r08.s084_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 67ce347f (flow 32d2695b): loading val<.=s3://niema-test/n100/r08/n100.r08.s081_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e266f779 (flow 89895078): loading val<.=s3://niema-test/n100/r08/n100.r08.s066_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 67ce347f (flow 32d2695b): loading val<.=s3://niema-test/n100/r08/n100.r08.s081_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task b3c857b7 (flow 5fa48c75): loading (try 0): started
2021/07/08 17:21:48 scheduler task b3c857b7 (flow 5fa48c75): loading val<.=s3://niema-test/n100/r08/n100.r08.s068_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d57d51d4 (flow 714a362d): loading val<.=s3://niema-test/n100/r08/n100.r08.s038_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4fc2765c (flow b30b76d2): loading val<.=s3://niema-test/n100/r08/n100.r08.s022_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task d1b0c57e (flow 769f8790): loading val<.=s3://niema-test/n100/r08/n100.r08.s013_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4fc2765c (flow b30b76d2): loading val<.=s3://niema-test/n100/r08/n100.r08.s022_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task acb01e0b (flow b6de7c5d): loading val<.=s3://niema-test/n100/r08/n100.r08.s058_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 96cdb789 (flow 37acff54): loading (try 0): started
2021/07/08 17:21:48 scheduler task 96cdb789 (flow 37acff54): loading val<.=s3://niema-test/n100/r08/n100.r08.s087_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task b3c857b7 (flow 5fa48c75): loading val<.=s3://niema-test/n100/r08/n100.r08.s068_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 77ea896f (flow 6e71356b): loading val<.=s3://niema-test/n100/r08/n100.r08.s055_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 96cdb789 (flow 37acff54): loading val<.=s3://niema-test/n100/r08/n100.r08.s087_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a660f2ec (flow abfbfcf5): loading val<.=s3://niema-test/n100/r08/n100.r08.s003_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task a14d135e (flow 37c80ebd): loading val<.=s3://niema-test/n100/r08/n100.r08.s002_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 2bd7a6bf (flow ebe32457): loading val<.=s3://niema-test/n100/r08/n100.r08.s001_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 11cbb428 (flow 6e2216d0): loading (try 0): started
2021/07/08 17:21:48 scheduler task 11cbb428 (flow 6e2216d0): loading val<.=s3://niema-test/n100/r08/n100.r08.s004_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 27109b10 (flow 11e863f7): loading val<.=s3://niema-test/n100/r08/n100.r08.s005_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e73506b2 (flow 6e531834): loading (try 0): started
2021/07/08 17:21:48 scheduler task e73506b2 (flow 6e531834): loading val<.=s3://niema-test/n100/r08/n100.r08.s051_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 11cbb428 (flow 6e2216d0): loading val<.=s3://niema-test/n100/r08/n100.r08.s004_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0daa8d96 (flow 6a75b3c2): loading (try 0): started
2021/07/08 17:21:48 scheduler task 0daa8d96 (flow 6a75b3c2): loading val<.=s3://niema-test/n100/r08/n100.r08.s041_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e73506b2 (flow 6e531834): loading val<.=s3://niema-test/n100/r08/n100.r08.s051_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 533c7302 (flow f2462fba): loading (try 0): started
2021/07/08 17:21:48 scheduler task 533c7302 (flow f2462fba): loading val<.=s3://niema-test/n100/r08/n100.r08.s069_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 0daa8d96 (flow 6a75b3c2): loading val<.=s3://niema-test/n100/r08/n100.r08.s041_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 83e8a2d0 (flow cb20e356): loading (try 0): started
2021/07/08 17:21:48 scheduler task 83e8a2d0 (flow cb20e356): loading val<.=s3://niema-test/n100/r08/n100.r08.s017_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 533c7302 (flow f2462fba): loading val<.=s3://niema-test/n100/r08/n100.r08.s069_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 371d17ff (flow 2a447479): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 21ae2bff (flow 7bb8abed): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 2304077e (flow 683e2f72): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 8d3ebe19 (flow 31c07028): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e923c46c (flow 4b5a804b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 72dc116b (flow 0403b41d): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 8a56961a (flow 9099bf90): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task be960135 (flow 20c58820): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task ecca53e1 (flow bb3142a9): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 123263b5 (flow d2a9e9c7): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 82ea7c30 (flow 9a696a11): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task f032da36 (flow dd8a72fb): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 4e98971e (flow f26e5aef): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 264d0316 (flow 29e265bf): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task cdee6bfa (flow f460701b): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task cb5519bf (flow b7426dfd): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e923c46c (flow 4b5a804b): loading (try 0): started
2021/07/08 17:21:48 scheduler task cb5519bf (flow b7426dfd): loading (try 0): started
2021/07/08 17:21:48 scheduler task e923c46c (flow 4b5a804b): loading val<.=s3://niema-test/n100/r08/n100.r08.s006_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cb5519bf (flow b7426dfd): loading val<.=s3://niema-test/n100/r08/n100.r08.s032_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 82ea7c30 (flow 9a696a11): loading (try 0): started
2021/07/08 17:21:48 scheduler task f032da36 (flow dd8a72fb): loading (try 0): started
2021/07/08 17:21:48 scheduler task 123263b5 (flow d2a9e9c7): loading (try 0): started
2021/07/08 17:21:48 scheduler task 82ea7c30 (flow 9a696a11): loading val<.=s3://niema-test/n100/r08/n100.r08.s091_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task f032da36 (flow dd8a72fb): loading val<.=s3://niema-test/n100/r08/n100.r08.s053_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task f032da36 (flow dd8a72fb): loading val<.=s3://niema-test/n100/r08/n100.r08.s053_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cb5519bf (flow b7426dfd): loading val<.=s3://niema-test/n100/r08/n100.r08.s032_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task bf7e40f2 (flow d91ad154): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task e37887ba (flow 3f3f0aa1): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 776b5e82 (flow 6ac026c6): assigning to alloc ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:21:48 scheduler task 776b5e82 (flow 6ac026c6): loading (try 0): started
2021/07/08 17:21:48 scheduler task 776b5e82 (flow 6ac026c6): loading val<.=s3://niema-test/n100/r08/n100.r08.s063_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 55bfb398 (flow ad6bd26e): loading (try 0): started
2021/07/08 17:21:48 scheduler task 55bfb398 (flow ad6bd26e): loading val<.=s3://niema-test/n100/r08/n100.r08.s079_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task bf7e40f2 (flow d91ad154): loading (try 0): started
2021/07/08 17:21:48 scheduler task bf7e40f2 (flow d91ad154): loading val<.=s3://niema-test/n100/r08/n100.r08.s077_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e37887ba (flow 3f3f0aa1): loading (try 0): started
2021/07/08 17:21:48 scheduler task e37887ba (flow 3f3f0aa1): loading val<.=s3://niema-test/n100/r08/n100.r08.s071_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 776b5e82 (flow 6ac026c6): loading val<.=s3://niema-test/n100/r08/n100.r08.s063_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cd7dca86 (flow 59cfb075): loading (try 0): started
2021/07/08 17:21:48 scheduler task cd7dca86 (flow 59cfb075): loading val<.=s3://niema-test/n100/r08/n100.r08.s093_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 55bfb398 (flow ad6bd26e): loading val<.=s3://niema-test/n100/r08/n100.r08.s079_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task bf7e40f2 (flow d91ad154): loading val<.=s3://niema-test/n100/r08/n100.r08.s077_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task e37887ba (flow 3f3f0aa1): loading val<.=s3://niema-test/n100/r08/n100.r08.s071_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 95ea60c7 (flow 53b65fb8): loading (try 0): started
2021/07/08 17:21:48 scheduler task 95ea60c7 (flow 53b65fb8): loading val<.=s3://niema-test/n100/r08/n100.r08.s045_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cd7dca86 (flow 59cfb075): loading val<.=s3://niema-test/n100/r08/n100.r08.s093_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task fd88e144 (flow 30072890): loading (try 0): started
2021/07/08 17:21:48 scheduler task fd88e144 (flow 30072890): loading val<.=s3://niema-test/n100/r08/n100.r08.s030_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 95ea60c7 (flow 53b65fb8): loading val<.=s3://niema-test/n100/r08/n100.r08.s045_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 43e62e27 (flow a215c969): loading (try 0): started
2021/07/08 17:21:48 scheduler task 43e62e27 (flow a215c969): loading val<.=s3://niema-test/n100/r08/n100.r08.s012_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task fd88e144 (flow 30072890): loading val<.=s3://niema-test/n100/r08/n100.r08.s030_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 7c80984b (flow f133966a): loading (try 0): started
2021/07/08 17:21:48 scheduler task 7c80984b (flow f133966a): loading val<.=s3://niema-test/n100/r08/n100.r08.s028_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 7c80984b (flow f133966a): loading val<.=s3://niema-test/n100/r08/n100.r08.s028_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task dee4f7a4 (flow 63e7c0c0): loading (try 0): started
2021/07/08 17:21:48 scheduler task dee4f7a4 (flow 63e7c0c0): loading val<.=s3://niema-test/n100/r08/n100.r08.s034_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task f10c7dd1 (flow d4a953a5): loading val<.=s3://niema-test/n100/r08/n100.r08.s078_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 264d0316 (flow 29e265bf): loading (try 0): started
2021/07/08 17:21:48 scheduler task 264d0316 (flow 29e265bf): loading val<.=s3://niema-test/n100/r08/n100.r08.s040_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task be960135 (flow 20c58820): loading (try 0): started
2021/07/08 17:21:48 scheduler task be960135 (flow 20c58820): loading val<.=s3://niema-test/n100/r08/n100.r08.s046_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 264d0316 (flow 29e265bf): loading val<.=s3://niema-test/n100/r08/n100.r08.s040_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 83e8a2d0 (flow cb20e356): loading val<.=s3://niema-test/n100/r08/n100.r08.s017_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4e98971e (flow f26e5aef): loading (try 0): started
2021/07/08 17:21:48 scheduler task 4e98971e (flow f26e5aef): loading val<.=s3://niema-test/n100/r08/n100.r08.s088_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task be960135 (flow 20c58820): loading val<.=s3://niema-test/n100/r08/n100.r08.s046_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 72dc116b (flow 0403b41d): loading (try 0): started
2021/07/08 17:21:48 scheduler task 72dc116b (flow 0403b41d): loading val<.=s3://niema-test/n100/r08/n100.r08.s019_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 4e98971e (flow f26e5aef): loading val<.=s3://niema-test/n100/r08/n100.r08.s088_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8a56961a (flow 9099bf90): loading (try 0): started
2021/07/08 17:21:48 scheduler task 8a56961a (flow 9099bf90): loading val<.=s3://niema-test/n100/r08/n100.r08.s061_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 72dc116b (flow 0403b41d): loading val<.=s3://niema-test/n100/r08/n100.r08.s019_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task c4ff5c5f (flow 14e5610e): loading (try 0): started
2021/07/08 17:21:48 scheduler task c4ff5c5f (flow 14e5610e): loading val<.=s3://niema-test/n100/r08/n100.r08.s098_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8a56961a (flow 9099bf90): loading val<.=s3://niema-test/n100/r08/n100.r08.s061_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cdee6bfa (flow f460701b): loading (try 0): started
2021/07/08 17:21:48 scheduler task cdee6bfa (flow f460701b): loading val<.=s3://niema-test/n100/r08/n100.r08.s029_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task c4ff5c5f (flow 14e5610e): loading val<.=s3://niema-test/n100/r08/n100.r08.s098_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8d3ebe19 (flow 31c07028): loading (try 0): started
2021/07/08 17:21:48 scheduler task 8d3ebe19 (flow 31c07028): loading val<.=s3://niema-test/n100/r08/n100.r08.s043_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task cdee6bfa (flow f460701b): loading val<.=s3://niema-test/n100/r08/n100.r08.s029_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ecca53e1 (flow bb3142a9): loading (try 0): started
2021/07/08 17:21:48 scheduler task e923c46c (flow 4b5a804b): loading val<.=s3://niema-test/n100/r08/n100.r08.s006_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 8d3ebe19 (flow 31c07028): loading val<.=s3://niema-test/n100/r08/n100.r08.s043_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ecca53e1 (flow bb3142a9): loading val<.=s3://niema-test/n100/r08/n100.r08.s036_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 82ea7c30 (flow 9a696a11): loading val<.=s3://niema-test/n100/r08/n100.r08.s091_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 2304077e (flow 683e2f72): loading (try 0): started
2021/07/08 17:21:48 scheduler task 2304077e (flow 683e2f72): loading val<.=s3://niema-test/n100/r08/n100.r08.s035_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 21ae2bff (flow 7bb8abed): loading (try 0): started
2021/07/08 17:21:48 scheduler task 21ae2bff (flow 7bb8abed): loading val<.=s3://niema-test/n100/r08/n100.r08.s044_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 2304077e (flow 683e2f72): loading val<.=s3://niema-test/n100/r08/n100.r08.s035_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 123263b5 (flow d2a9e9c7): loading val<.=s3://niema-test/n100/r08/n100.r08.s050_R2.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 123263b5 (flow d2a9e9c7): loading val<.=s3://niema-test/n100/r08/n100.r08.s050_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 43e62e27 (flow a215c969): loading val<.=s3://niema-test/n100/r08/n100.r08.s012_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task dee4f7a4 (flow 63e7c0c0): loading val<.=s3://niema-test/n100/r08/n100.r08.s034_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task ecca53e1 (flow bb3142a9): loading val<.=s3://niema-test/n100/r08/n100.r08.s036_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 371d17ff (flow 2a447479): loading (try 0): started
2021/07/08 17:21:48 scheduler task 371d17ff (flow 2a447479): loading val<.=s3://niema-test/n100/r08/n100.r08.s025_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 21ae2bff (flow 7bb8abed): loading val<.=s3://niema-test/n100/r08/n100.r08.s044_R1.fastq 35.4MiB>
2021/07/08 17:21:48 scheduler task 371d17ff (flow 2a447479): loading val<.=s3://niema-test/n100/r08/n100.r08.s025_R2.fastq 35.4MiB>
2021/07/08 17:21:49 scheduler task d321bea4 (flow 6fbbdec0): loaded val<.=d5e64a7a 35.4MiB>
2021/07/08 17:21:49 scheduler task 35a36d68 (flow c0e958d6): loaded val<.=dc9e2aab 35.4MiB>
2021/07/08 17:21:49 scheduler task 4f36edfc (flow 7a476ecb): loaded val<.=8c6296c1 35.4MiB>
2021/07/08 17:21:49 scheduler task be583c00 (flow 601a9c71): loaded val<.=7f9876d1 35.4MiB>
2021/07/08 17:21:49 scheduler task 0695043b (flow c0270ffe): loaded val<.=684b6610 35.4MiB>
2021/07/08 17:21:49 scheduler task dc62e337 (flow 98ca279e): loaded val<.=7962671e 35.4MiB>
2021/07/08 17:21:49 scheduler task 0695043b (flow c0270ffe): loaded val<.=9eabe52d 35.4MiB>
2021/07/08 17:21:49 scheduler task 0695043b (flow c0270ffe): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 719f8479 (flow bc3f293a): loaded val<.=fb9a106b 35.4MiB>
2021/07/08 17:21:49 scheduler task 17f58eff (flow afb9c82e): loaded val<.=6b6f10be 35.4MiB>
2021/07/08 17:21:49 scheduler task ef32d510 (flow 7c721fb5): loaded val<.=5025a711 35.4MiB>
2021/07/08 17:21:49 scheduler task 899f5270 (flow c4aa557b): loaded val<.=5cededaf 35.4MiB>
2021/07/08 17:21:49 scheduler task cc6f4951 (flow db5af4da): loaded val<.=ceb29a72 35.4MiB>
2021/07/08 17:21:49 scheduler task fbea3b9c (flow 37f8d46a): loaded val<.=7e63bee2 35.4MiB>
2021/07/08 17:21:49 scheduler task 19f1fa9b (flow 8358078b): loaded val<.=7e7296a0 35.4MiB>
2021/07/08 17:21:49 scheduler task ef32d510 (flow 7c721fb5): loaded val<.=4d0465b4 35.4MiB>
2021/07/08 17:21:49 scheduler task ef32d510 (flow 7c721fb5): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 17275071 (flow b5a84f70): loaded val<.=2f5d55fe 35.4MiB>
2021/07/08 17:21:49 scheduler task 0695043b (flow c0270ffe): submitting (try 0): started
2021/07/08 17:21:49 scheduler task ef32d510 (flow 7c721fb5): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 35a36d68 (flow c0e958d6): loaded val<.=5ca84b8e 35.4MiB>
2021/07/08 17:21:49 scheduler task 4ef1336d (flow bc17d794): loaded val<.=55bfff28 35.4MiB>
2021/07/08 17:21:49 scheduler task 17275071 (flow b5a84f70): loaded val<.=051815de 35.4MiB>
2021/07/08 17:21:49 scheduler task 4ef1336d (flow bc17d794): loaded val<.=3db7144a 35.4MiB>
2021/07/08 17:21:49 scheduler task 17275071 (flow b5a84f70): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task cef151a9 (flow ae810609): loaded val<.=5363db87 35.4MiB>
2021/07/08 17:21:49 scheduler task d990b33b (flow 4f4f56d4): loaded val<.=3e5e6c43 35.4MiB>
2021/07/08 17:21:49 scheduler task dc62e337 (flow 98ca279e): loaded val<.=f8034cb5 35.4MiB>
2021/07/08 17:21:49 scheduler task d990b33b (flow 4f4f56d4): loaded val<.=24a0457d 35.4MiB>
2021/07/08 17:21:49 scheduler task 61314efc (flow eeef90ae): loaded val<.=9e30de33 35.4MiB>
2021/07/08 17:21:49 scheduler task d990b33b (flow 4f4f56d4): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 4b7d1db7 (flow 0c27eb3e): loaded val<.=07a8e3ca 35.4MiB>
2021/07/08 17:21:49 scheduler task ba1130bd (flow c6f7e8d0): loaded val<.=d46b3dae 35.4MiB>
2021/07/08 17:21:49 scheduler task cc6f4951 (flow db5af4da): loaded val<.=afdcf693 35.4MiB>
2021/07/08 17:21:49 scheduler task cc6f4951 (flow db5af4da): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 4ef1336d (flow bc17d794): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task fbea3b9c (flow 37f8d46a): loaded val<.=a3f7bcba 35.4MiB>
2021/07/08 17:21:49 scheduler task fbea3b9c (flow 37f8d46a): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 719f8479 (flow bc3f293a): loaded val<.=2aaac432 35.4MiB>
2021/07/08 17:21:49 scheduler task 719f8479 (flow bc3f293a): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 899f5270 (flow c4aa557b): loaded val<.=8f73cc7f 35.4MiB>
2021/07/08 17:21:49 scheduler task 899f5270 (flow c4aa557b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task dc62e337 (flow 98ca279e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task d321bea4 (flow 6fbbdec0): loaded val<.=8cf50129 35.4MiB>
2021/07/08 17:21:49 scheduler task d321bea4 (flow 6fbbdec0): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 35a36d68 (flow c0e958d6): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task bdd078c4 (flow 19f87377): loaded val<.=ca9b9ecc 35.4MiB>
2021/07/08 17:21:49 scheduler task a9954f8b (flow 6c9f7fef): loaded val<.=8f7a627f 35.4MiB>
2021/07/08 17:21:49 scheduler task be583c00 (flow 601a9c71): loaded val<.=0eb952ca 35.4MiB>
2021/07/08 17:21:49 scheduler task 17f58eff (flow afb9c82e): loaded val<.=15073296 35.4MiB>
2021/07/08 17:21:49 scheduler task f714587f (flow ffcb62ed): loaded val<.=13a329eb 35.4MiB>
2021/07/08 17:21:49 scheduler task 17f58eff (flow afb9c82e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task be583c00 (flow 601a9c71): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task a14d135e (flow 37c80ebd): loaded val<.=047973a7 35.4MiB>
2021/07/08 17:21:49 scheduler task 2c812c39 (flow 0d5ce47b): loaded val<.=e56d5033 35.4MiB>
2021/07/08 17:21:49 scheduler task 625ac6d7 (flow c1c3792a): loaded val<.=c2c8863a 35.4MiB>
2021/07/08 17:21:49 scheduler task 61314efc (flow eeef90ae): loaded val<.=89e562fd 35.4MiB>
2021/07/08 17:21:49 scheduler task 61314efc (flow eeef90ae): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task bdd078c4 (flow 19f87377): loaded val<.=bb7baeb9 35.4MiB>
2021/07/08 17:21:49 scheduler task bdd078c4 (flow 19f87377): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 19f1fa9b (flow 8358078b): loaded val<.=249683f6 35.4MiB>
2021/07/08 17:21:49 scheduler task 19f1fa9b (flow 8358078b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 8ee17ca7 (flow cc702d2f): loaded val<.=392264ed 35.4MiB>
2021/07/08 17:21:49 scheduler task 17275071 (flow b5a84f70): submitting (try 0): started
2021/07/08 17:21:49 scheduler task d990b33b (flow 4f4f56d4): submitting (try 0): started
2021/07/08 17:21:49 scheduler task cc6f4951 (flow db5af4da): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 4ef1336d (flow bc17d794): submitting (try 0): started
2021/07/08 17:21:49 scheduler task fbea3b9c (flow 37f8d46a): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 2bd7a6bf (flow ebe32457): loaded val<.=ec703a7c 35.4MiB>
2021/07/08 17:21:49 scheduler task 42d18dc0 (flow 30cb4af0): loaded val<.=2c092c89 35.4MiB>
2021/07/08 17:21:49 scheduler task e4711d1d (flow 40d58762): loaded val<.=8d7446d7 35.4MiB>
2021/07/08 17:21:49 scheduler task 42d18dc0 (flow 30cb4af0): loaded val<.=58941e05 35.4MiB>
2021/07/08 17:21:49 scheduler task 42d18dc0 (flow 30cb4af0): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 719f8479 (flow bc3f293a): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 899f5270 (flow c4aa557b): submitting (try 0): started
2021/07/08 17:21:49 scheduler task dc62e337 (flow 98ca279e): submitting (try 0): started
2021/07/08 17:21:49 scheduler task d321bea4 (flow 6fbbdec0): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 35a36d68 (flow c0e958d6): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 17f58eff (flow afb9c82e): submitting (try 0): started
2021/07/08 17:21:49 scheduler task be583c00 (flow 601a9c71): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 61314efc (flow eeef90ae): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 4f36edfc (flow 7a476ecb): loaded val<.=54abc81e 35.4MiB>
2021/07/08 17:21:49 scheduler task 2c812c39 (flow 0d5ce47b): loaded val<.=666229fa 35.4MiB>
2021/07/08 17:21:49 scheduler task 2c812c39 (flow 0d5ce47b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task f714587f (flow ffcb62ed): loaded val<.=90cefd8b 35.4MiB>
2021/07/08 17:21:49 scheduler task 4f36edfc (flow 7a476ecb): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task f714587f (flow ffcb62ed): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 8ee17ca7 (flow cc702d2f): loaded val<.=7bda9355 35.4MiB>
2021/07/08 17:21:49 scheduler task 8ee17ca7 (flow cc702d2f): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task cef49e65 (flow 56e46f6d): loaded val<.=abf317b3 35.4MiB>
2021/07/08 17:21:49 scheduler task a9954f8b (flow 6c9f7fef): loaded val<.=3b1b1c72 35.4MiB>
2021/07/08 17:21:49 scheduler task a9954f8b (flow 6c9f7fef): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 625ac6d7 (flow c1c3792a): loaded val<.=27f83e05 35.4MiB>
2021/07/08 17:21:49 scheduler task 625ac6d7 (flow c1c3792a): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task e3e2fbc0 (flow b7aad0a1): loaded val<.=cb486b83 35.4MiB>
2021/07/08 17:21:49 scheduler task e4711d1d (flow 40d58762): loaded val<.=29afd6cc 35.4MiB>
2021/07/08 17:21:49 scheduler task e4711d1d (flow 40d58762): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task e3e2fbc0 (flow b7aad0a1): loaded val<.=2359c283 35.4MiB>
2021/07/08 17:21:49 scheduler task e3e2fbc0 (flow b7aad0a1): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task ba1130bd (flow c6f7e8d0): loaded val<.=08e17e86 35.4MiB>
2021/07/08 17:21:49 scheduler task ba1130bd (flow c6f7e8d0): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task cef151a9 (flow ae810609): loaded val<.=92f4626a 35.4MiB>
2021/07/08 17:21:49 scheduler task cef151a9 (flow ae810609): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task 4b7d1db7 (flow 0c27eb3e): loaded val<.=1384e2cb 35.4MiB>
2021/07/08 17:21:49 scheduler task 4b7d1db7 (flow 0c27eb3e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task bdd078c4 (flow 19f87377): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 19f1fa9b (flow 8358078b): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 42d18dc0 (flow 30cb4af0): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 2c812c39 (flow 0d5ce47b): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 4f36edfc (flow 7a476ecb): submitting (try 0): started
2021/07/08 17:21:49 scheduler task f714587f (flow ffcb62ed): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 8ee17ca7 (flow cc702d2f): submitting (try 0): started
2021/07/08 17:21:49 scheduler task a9954f8b (flow 6c9f7fef): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 625ac6d7 (flow c1c3792a): submitting (try 0): started
2021/07/08 17:21:49 scheduler task e4711d1d (flow 40d58762): submitting (try 0): started
2021/07/08 17:21:49 scheduler task e3e2fbc0 (flow b7aad0a1): submitting (try 0): started
2021/07/08 17:21:49 scheduler task ba1130bd (flow c6f7e8d0): submitting (try 0): started
2021/07/08 17:21:49 scheduler task cef151a9 (flow ae810609): submitting (try 0): started
2021/07/08 17:21:49 scheduler task 4b7d1db7 (flow 0c27eb3e): submitting (try 0): started
2021/07/08 17:21:49 scheduler task ecca53e1 (flow bb3142a9): loaded val<.=790f5436 35.4MiB>
2021/07/08 17:21:49 scheduler task 0004b3b5 (flow 509a6465): loaded val<.=7255b23c 35.4MiB>
2021/07/08 17:21:49 scheduler task cef49e65 (flow 56e46f6d): loaded val<.=d1add5b7 35.4MiB>
2021/07/08 17:21:49 scheduler task 27109b10 (flow 11e863f7): loaded val<.=ca0e09b1 35.4MiB>
2021/07/08 17:21:49 scheduler task cef49e65 (flow 56e46f6d): loading (try 0): successful, next state: submitting
2021/07/08 17:21:49 scheduler task cef49e65 (flow 56e46f6d): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 0695043b (flow c0270ffe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:50 scheduler task 0695043b (flow c0270ffe): waiting for completion (try 0): started
2021/07/08 17:21:50  ->  n100.r08.s074.Main.out_file c0270ffe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:50 n100.r08.s074.Main.out_file c0270ffe n100/r08/n100.r08.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2d3ec2564f05593d3092ddf80177c6f151e91970685f87a7efead2864958ae12
	sha256:c0270ffed5d5503bef56d357d0f2b61e466b32428e96968c67ce8fceefbae74f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0695043bc1d47d103b37d5ff182a60ec6612db8a548344ee7013349ca3837576
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s074_output"
	    wget -O "n100.r08.s074_output/n100.r08.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s074_output/n100.r08.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s074_output/n100.r08.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s074_output/n100.r08.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s074_output/n100.r08.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s074_output/n100.r08.s074.reference.fas" "n100.r08.s074_output/n100.r08.s074.fq1.fastq" "n100.r08.s074_output/n100.r08.s074.fq2.fastq" | samtools view -bS - > "n100.r08.s074_output/n100.r08.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s074_output/n100.r08.s074.untrimmed.sorted.bam" "n100.r08.s074_output/n100.r08.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s074_output/n100.r08.s074.untrimmed.sorted.bam" -b "n100.r08.s074_output/n100.r08.s074.primers.bed" -p "n100.r08.s074_output/n100.r08.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" "n100.r08.s074_output/n100.r08.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s074_output/n100.r08.s074.reference.fas" "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" > "n100.r08.s074_output/n100.r08.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s074_output/n100.r08.s074.reference.fas" --call-indels "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" > "n100.r08.s074_output/n100.r08.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" > "n100.r08.s074_output/n100.r08.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s074_output/n100.r08.s074.depth.txt" "n100.r08.s074_output/n100.r08.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s074_output/n100.r08.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s074_output/n100.r08.s074.reference.fas" | bcftools consensus -m "n100.r08.s074_output/n100.r08.s074.low_depth.tsv" tmp.vcf.gz > "n100.r08.s074_output/n100.r08.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:50 scheduler task cdee6bfa (flow f460701b): loaded val<.=71718c35 35.4MiB>
2021/07/08 17:21:50 scheduler task f62422fc (flow 7c1d2985): loaded val<.=a8f0f227 35.4MiB>
2021/07/08 17:21:50 scheduler task 6fc6d1e0 (flow edf8b1db): loaded val<.=13f6cd7c 35.4MiB>
2021/07/08 17:21:50 scheduler task 0004b3b5 (flow 509a6465): loaded val<.=b3740d9c 35.4MiB>
2021/07/08 17:21:50 scheduler task aad793f7 (flow eaaaa641): loaded val<.=622d9193 35.4MiB>
2021/07/08 17:21:50 scheduler task ef32d510 (flow 7c721fb5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:50 scheduler task 123263b5 (flow d2a9e9c7): loaded val<.=fc8cc797 35.4MiB>
2021/07/08 17:21:50 scheduler task 0004b3b5 (flow 509a6465): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 776b5e82 (flow 6ac026c6): loaded val<.=914152f9 35.4MiB>
2021/07/08 17:21:50 scheduler task 6fc6d1e0 (flow edf8b1db): loaded val<.=cbdde9e9 35.4MiB>
2021/07/08 17:21:50 scheduler task 6fc6d1e0 (flow edf8b1db): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 83e8a2d0 (flow cb20e356): loaded val<.=3e72924d 35.4MiB>
2021/07/08 17:21:50 scheduler task ef32d510 (flow 7c721fb5): waiting for completion (try 0): started
2021/07/08 17:21:50  ->  n100.r08.s090.Main.out_file 7c721fb5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:50 n100.r08.s090.Main.out_file 7c721fb5 n100/r08/n100.r08.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2709e14e2fed1aaee194880aea4c29b3686d3749686d2c8035ebfb7ecfcaa5c5
	sha256:7c721fb5bb856badf6b9f3c1f6130c1147a8fc7c3cf27a00c47a37114228702a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ef32d5104995297d162ac7f01bfb772c370ee670abac3f3f8187dcea15e2c5f9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s090_output"
	    wget -O "n100.r08.s090_output/n100.r08.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s090_output/n100.r08.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s090_output/n100.r08.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s090_output/n100.r08.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s090_output/n100.r08.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s090_output/n100.r08.s090.reference.fas" "n100.r08.s090_output/n100.r08.s090.fq1.fastq" "n100.r08.s090_output/n100.r08.s090.fq2.fastq" | samtools view -bS - > "n100.r08.s090_output/n100.r08.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s090_output/n100.r08.s090.untrimmed.sorted.bam" "n100.r08.s090_output/n100.r08.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s090_output/n100.r08.s090.untrimmed.sorted.bam" -b "n100.r08.s090_output/n100.r08.s090.primers.bed" -p "n100.r08.s090_output/n100.r08.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" "n100.r08.s090_output/n100.r08.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s090_output/n100.r08.s090.reference.fas" "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" > "n100.r08.s090_output/n100.r08.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s090_output/n100.r08.s090.reference.fas" --call-indels "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" > "n100.r08.s090_output/n100.r08.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" > "n100.r08.s090_output/n100.r08.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s090_output/n100.r08.s090.depth.txt" "n100.r08.s090_output/n100.r08.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s090_output/n100.r08.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s090_output/n100.r08.s090.reference.fas" | bcftools consensus -m "n100.r08.s090_output/n100.r08.s090.low_depth.tsv" tmp.vcf.gz > "n100.r08.s090_output/n100.r08.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:50 scheduler task 0004b3b5 (flow 509a6465): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 6fc6d1e0 (flow edf8b1db): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 991d72a7 (flow 5307f7d5): loaded val<.=b4d502d8 35.4MiB>
2021/07/08 17:21:50 scheduler task 7ba99413 (flow 45b5a090): loaded val<.=1a38a400 35.4MiB>
2021/07/08 17:21:50 scheduler task 7e57f1b6 (flow 8e45de36): loaded val<.=9a7e7afc 35.4MiB>
2021/07/08 17:21:50 scheduler task 13af5d5a (flow 0b3effbc): loaded val<.=dee97ea6 35.4MiB>
2021/07/08 17:21:50 scheduler task 991d72a7 (flow 5307f7d5): loaded val<.=58990418 35.4MiB>
2021/07/08 17:21:50 scheduler task 2304077e (flow 683e2f72): loaded val<.=fdd37629 35.4MiB>
2021/07/08 17:21:50 scheduler task 13af5d5a (flow 0b3effbc): loaded val<.=dc58be7b 35.4MiB>
2021/07/08 17:21:50 scheduler task 13af5d5a (flow 0b3effbc): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task e266f779 (flow 89895078): loaded val<.=5738a076 35.4MiB>
2021/07/08 17:21:50 scheduler task 43e62e27 (flow a215c969): loaded val<.=705d7a13 35.4MiB>
2021/07/08 17:21:50 scheduler task 4fc2765c (flow b30b76d2): loaded val<.=d49f400a 35.4MiB>
2021/07/08 17:21:50 scheduler task 2304077e (flow 683e2f72): loaded val<.=922e0617 35.4MiB>
2021/07/08 17:21:50 scheduler task 17275071 (flow b5a84f70): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:50 scheduler task 2304077e (flow 683e2f72): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task a3702691 (flow f12b0ac7): loaded val<.=978c0b55 35.4MiB>
2021/07/08 17:21:50 scheduler task cd7dca86 (flow 59cfb075): loaded val<.=55fd9988 35.4MiB>
2021/07/08 17:21:50 scheduler task 9ae8bc0a (flow b42d9724): loaded val<.=61425bad 35.4MiB>
2021/07/08 17:21:50 scheduler task a3702691 (flow f12b0ac7): loaded val<.=0f3beef8 35.4MiB>
2021/07/08 17:21:50 scheduler task a3702691 (flow f12b0ac7): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task a660f2ec (flow abfbfcf5): loaded val<.=9b864141 35.4MiB>
2021/07/08 17:21:50 scheduler task 21ae2bff (flow 7bb8abed): loaded val<.=89c64f07 35.4MiB>
2021/07/08 17:21:50 scheduler task a14d135e (flow 37c80ebd): loaded val<.=04cdfeb1 35.4MiB>
2021/07/08 17:21:50 scheduler task a14d135e (flow 37c80ebd): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 0e91bc71 (flow ac83cb33): loaded val<.=c276bebb 35.4MiB>
2021/07/08 17:21:50 scheduler task 991d72a7 (flow 5307f7d5): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task f62422fc (flow 7c1d2985): loaded val<.=2d661933 35.4MiB>
2021/07/08 17:21:50 scheduler task f62422fc (flow 7c1d2985): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 4e98971e (flow f26e5aef): loaded val<.=77a94b1f 35.4MiB>
2021/07/08 17:21:50 scheduler task acb01e0b (flow b6de7c5d): loaded val<.=e6846c7f 35.4MiB>
2021/07/08 17:21:50 scheduler task d1b0c57e (flow 769f8790): loaded val<.=92c04ff6 35.4MiB>
2021/07/08 17:21:50 scheduler task 8270b132 (flow 53910cbe): loaded val<.=5791ce94 35.4MiB>
2021/07/08 17:21:50 scheduler task 21ae2bff (flow 7bb8abed): loaded val<.=17d99b6c 35.4MiB>
2021/07/08 17:21:50 scheduler task 21ae2bff (flow 7bb8abed): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 13af5d5a (flow 0b3effbc): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 17275071 (flow b5a84f70): waiting for completion (try 0): started
2021/07/08 17:21:50  ->  n100.r08.s056.Main.out_file b5a84f70 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:50 n100.r08.s056.Main.out_file b5a84f70 n100/r08/n100.r08.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:129007a61bd414d7987a145f7a421948f6c89d5d7ad3004df16e2a7f5a35db45
	sha256:b5a84f70ea0c5be8e986528d9c2f7cfa9b4bc361097e7c43aeeb5a4050a47472
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/17275071cd763e2532caaa3dc9ac387b6781c8e8eefd26d0589cc2c0e7f903eb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s056_output"
	    wget -O "n100.r08.s056_output/n100.r08.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s056_output/n100.r08.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s056_output/n100.r08.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s056_output/n100.r08.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s056_output/n100.r08.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s056_output/n100.r08.s056.reference.fas" "n100.r08.s056_output/n100.r08.s056.fq1.fastq" "n100.r08.s056_output/n100.r08.s056.fq2.fastq" | samtools view -bS - > "n100.r08.s056_output/n100.r08.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s056_output/n100.r08.s056.untrimmed.sorted.bam" "n100.r08.s056_output/n100.r08.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s056_output/n100.r08.s056.untrimmed.sorted.bam" -b "n100.r08.s056_output/n100.r08.s056.primers.bed" -p "n100.r08.s056_output/n100.r08.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" "n100.r08.s056_output/n100.r08.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s056_output/n100.r08.s056.reference.fas" "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" > "n100.r08.s056_output/n100.r08.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s056_output/n100.r08.s056.reference.fas" --call-indels "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" > "n100.r08.s056_output/n100.r08.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" > "n100.r08.s056_output/n100.r08.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s056_output/n100.r08.s056.depth.txt" "n100.r08.s056_output/n100.r08.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s056_output/n100.r08.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s056_output/n100.r08.s056.reference.fas" | bcftools consensus -m "n100.r08.s056_output/n100.r08.s056.low_depth.tsv" tmp.vcf.gz > "n100.r08.s056_output/n100.r08.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:50 scheduler task 2304077e (flow 683e2f72): submitting (try 0): started
2021/07/08 17:21:50 scheduler task a3702691 (flow f12b0ac7): submitting (try 0): started
2021/07/08 17:21:50 scheduler task a14d135e (flow 37c80ebd): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 991d72a7 (flow 5307f7d5): submitting (try 0): started
2021/07/08 17:21:50 scheduler task f62422fc (flow 7c1d2985): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 21ae2bff (flow 7bb8abed): submitting (try 0): started
2021/07/08 17:21:50 scheduler task cb5519bf (flow b7426dfd): loaded val<.=a4e0dc6c 35.4MiB>
2021/07/08 17:21:50 scheduler task e73506b2 (flow 6e531834): loaded val<.=62566f05 35.4MiB>
2021/07/08 17:21:50 scheduler task 67ce347f (flow 32d2695b): loaded val<.=faea88dd 35.4MiB>
2021/07/08 17:21:50 scheduler task cd7dca86 (flow 59cfb075): loaded val<.=2a8dfee6 35.4MiB>
2021/07/08 17:21:50 scheduler task cd7dca86 (flow 59cfb075): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task cdee6bfa (flow f460701b): loaded val<.=ff88f31a 35.4MiB>
2021/07/08 17:21:50 scheduler task cdee6bfa (flow f460701b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task cd7dca86 (flow 59cfb075): submitting (try 0): started
2021/07/08 17:21:50 scheduler task cdee6bfa (flow f460701b): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 55bfb398 (flow ad6bd26e): loaded val<.=1fe0352e 35.4MiB>
2021/07/08 17:21:50 scheduler task 77ea896f (flow 6e71356b): loaded val<.=a18ba02f 35.4MiB>
2021/07/08 17:21:50 scheduler task 1e17310e (flow 4be7c800): loaded val<.=79225587 35.4MiB>
2021/07/08 17:21:50 scheduler task 0b48b7f4 (flow 3c31b57e): loaded val<.=a569eab4 35.4MiB>
2021/07/08 17:21:50 scheduler task 264d0316 (flow 29e265bf): loaded val<.=a66b3d91 35.4MiB>
2021/07/08 17:21:50 scheduler task 0daa8d96 (flow 6a75b3c2): loaded val<.=39ce44a9 35.4MiB>
2021/07/08 17:21:50 scheduler task 371d17ff (flow 2a447479): loaded val<.=56a31e98 35.4MiB>
2021/07/08 17:21:50 scheduler task e7dd9705 (flow 15301ea9): loaded val<.=5e597434 35.4MiB>
2021/07/08 17:21:50 scheduler task 77090a8d (flow 6db5a9b8): loaded val<.=821a1f5c 35.4MiB>
2021/07/08 17:21:50 scheduler task 7c80984b (flow f133966a): loaded val<.=eec58353 35.4MiB>
2021/07/08 17:21:50 scheduler task 43e62e27 (flow a215c969): loaded val<.=14f9ceae 35.4MiB>
2021/07/08 17:21:50 scheduler task 43e62e27 (flow a215c969): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 0b48b7f4 (flow 3c31b57e): loaded val<.=4867dad4 35.4MiB>
2021/07/08 17:21:50 scheduler task 0b48b7f4 (flow 3c31b57e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 776b5e82 (flow 6ac026c6): loaded val<.=2867e288 35.4MiB>
2021/07/08 17:21:50 scheduler task 776b5e82 (flow 6ac026c6): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task c04eb0c7 (flow 37139f88): loaded val<.=5b51018b 35.4MiB>
2021/07/08 17:21:50 scheduler task b3c857b7 (flow 5fa48c75): loaded val<.=7e36d81d 35.4MiB>
2021/07/08 17:21:50 scheduler task 43e62e27 (flow a215c969): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 0b48b7f4 (flow 3c31b57e): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 776b5e82 (flow 6ac026c6): submitting (try 0): started
2021/07/08 17:21:50 scheduler task dee4f7a4 (flow 63e7c0c0): loaded val<.=99835b06 35.4MiB>
2021/07/08 17:21:50 scheduler task 4990178e (flow eda0dc49): loaded val<.=3a7bb5e9 35.4MiB>
2021/07/08 17:21:50 scheduler task d990b33b (flow 4f4f56d4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:50 scheduler task 371d17ff (flow 2a447479): loaded val<.=30a35ac2 35.4MiB>
2021/07/08 17:21:50 scheduler task 55bfb398 (flow ad6bd26e): loaded val<.=72e3d570 35.4MiB>
2021/07/08 17:21:50 scheduler task 55bfb398 (flow ad6bd26e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 123263b5 (flow d2a9e9c7): loaded val<.=a0366a07 35.4MiB>
2021/07/08 17:21:50 scheduler task 123263b5 (flow d2a9e9c7): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 371d17ff (flow 2a447479): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task d990b33b (flow 4f4f56d4): waiting for completion (try 0): started
2021/07/08 17:21:50  ->  n100.r08.s057.Main.out_file 4f4f56d4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:50 n100.r08.s057.Main.out_file 4f4f56d4 n100/r08/n100.r08.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:333ea765781501e7d1aed04def759be87ed966434b478fc2c92d7029beb1cc41
	sha256:4f4f56d40484fd9c5a8d83d88ae9fab0a2b2bab6ac7205547a6cf33bc11f2aa7
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d990b33b40fb8578610dd0305868d94a7ae5e0a28ee42ce9863fbefe0e4a85e6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s057_output"
	    wget -O "n100.r08.s057_output/n100.r08.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s057_output/n100.r08.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s057_output/n100.r08.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s057_output/n100.r08.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s057_output/n100.r08.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s057_output/n100.r08.s057.reference.fas" "n100.r08.s057_output/n100.r08.s057.fq1.fastq" "n100.r08.s057_output/n100.r08.s057.fq2.fastq" | samtools view -bS - > "n100.r08.s057_output/n100.r08.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s057_output/n100.r08.s057.untrimmed.sorted.bam" "n100.r08.s057_output/n100.r08.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s057_output/n100.r08.s057.untrimmed.sorted.bam" -b "n100.r08.s057_output/n100.r08.s057.primers.bed" -p "n100.r08.s057_output/n100.r08.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" "n100.r08.s057_output/n100.r08.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s057_output/n100.r08.s057.reference.fas" "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" > "n100.r08.s057_output/n100.r08.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s057_output/n100.r08.s057.reference.fas" --call-indels "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" > "n100.r08.s057_output/n100.r08.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" > "n100.r08.s057_output/n100.r08.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s057_output/n100.r08.s057.depth.txt" "n100.r08.s057_output/n100.r08.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s057_output/n100.r08.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s057_output/n100.r08.s057.reference.fas" | bcftools consensus -m "n100.r08.s057_output/n100.r08.s057.low_depth.tsv" tmp.vcf.gz > "n100.r08.s057_output/n100.r08.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:50 scheduler task 55bfb398 (flow ad6bd26e): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 123263b5 (flow d2a9e9c7): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 371d17ff (flow 2a447479): submitting (try 0): started
2021/07/08 17:21:50 scheduler task c4ff5c5f (flow 14e5610e): loaded val<.=ab94ed7c 35.4MiB>
2021/07/08 17:21:50 scheduler task cc6f4951 (flow db5af4da): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:50 scheduler task cc6f4951 (flow db5af4da): waiting for completion (try 0): started
2021/07/08 17:21:50  ->  n100.r08.s014.Main.out_file db5af4da exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:50 n100.r08.s014.Main.out_file db5af4da n100/r08/n100.r08.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0da70468ee22a727d689a52031f67e9c3c1dfae5630b311055ed6c5f686efc6e
	sha256:db5af4da45424ed3b48e0a27d64f00a770d5b92811379bd3a3684f2f2c47e6f9
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc6f4951636d0cad89317657c68fea21b39446c54602714ddf3b680167e71542
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s014_output"
	    wget -O "n100.r08.s014_output/n100.r08.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s014_output/n100.r08.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s014_output/n100.r08.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s014_output/n100.r08.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s014_output/n100.r08.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s014_output/n100.r08.s014.reference.fas" "n100.r08.s014_output/n100.r08.s014.fq1.fastq" "n100.r08.s014_output/n100.r08.s014.fq2.fastq" | samtools view -bS - > "n100.r08.s014_output/n100.r08.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s014_output/n100.r08.s014.untrimmed.sorted.bam" "n100.r08.s014_output/n100.r08.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s014_output/n100.r08.s014.untrimmed.sorted.bam" -b "n100.r08.s014_output/n100.r08.s014.primers.bed" -p "n100.r08.s014_output/n100.r08.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" "n100.r08.s014_output/n100.r08.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s014_output/n100.r08.s014.reference.fas" "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" > "n100.r08.s014_output/n100.r08.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s014_output/n100.r08.s014.reference.fas" --call-indels "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" > "n100.r08.s014_output/n100.r08.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" > "n100.r08.s014_output/n100.r08.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s014_output/n100.r08.s014.depth.txt" "n100.r08.s014_output/n100.r08.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s014_output/n100.r08.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s014_output/n100.r08.s014.reference.fas" | bcftools consensus -m "n100.r08.s014_output/n100.r08.s014.low_depth.tsv" tmp.vcf.gz > "n100.r08.s014_output/n100.r08.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:50 scheduler task 8d3ebe19 (flow 31c07028): loaded val<.=78e86a7b 35.4MiB>
2021/07/08 17:21:50 scheduler task 83e8a2d0 (flow cb20e356): loaded val<.=bb2c3e75 35.4MiB>
2021/07/08 17:21:50 scheduler task 83e8a2d0 (flow cb20e356): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 83e8a2d0 (flow cb20e356): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 67ce347f (flow 32d2695b): loaded val<.=ccb47a12 35.4MiB>
2021/07/08 17:21:50 scheduler task 67ce347f (flow 32d2695b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 67ce347f (flow 32d2695b): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 4e98971e (flow f26e5aef): loaded val<.=f372a351 35.4MiB>
2021/07/08 17:21:50 scheduler task 4e98971e (flow f26e5aef): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 4e98971e (flow f26e5aef): submitting (try 0): started
2021/07/08 17:21:50 scheduler task 7e57f1b6 (flow 8e45de36): loaded val<.=b476b33e 35.4MiB>
2021/07/08 17:21:50 scheduler task 7e57f1b6 (flow 8e45de36): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 533c7302 (flow f2462fba): loaded val<.=e1fa96e5 35.4MiB>
2021/07/08 17:21:50 scheduler task 7e57f1b6 (flow 8e45de36): submitting (try 0): started
2021/07/08 17:21:50 scheduler task acb01e0b (flow b6de7c5d): loaded val<.=4574fcf9 35.4MiB>
2021/07/08 17:21:50 scheduler task bf7e40f2 (flow d91ad154): loaded val<.=d1bc9417 35.4MiB>
2021/07/08 17:21:50 scheduler task a660f2ec (flow abfbfcf5): loaded val<.=cfe18868 35.4MiB>
2021/07/08 17:21:50 scheduler task a660f2ec (flow abfbfcf5): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 96cdb789 (flow 37acff54): loaded val<.=9007f4ae 35.4MiB>
2021/07/08 17:21:50 scheduler task 0daa8d96 (flow 6a75b3c2): loaded val<.=465ad269 35.4MiB>
2021/07/08 17:21:50 scheduler task 0daa8d96 (flow 6a75b3c2): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task 8d3ebe19 (flow 31c07028): loaded val<.=ff781a38 35.4MiB>
2021/07/08 17:21:50 scheduler task 8d3ebe19 (flow 31c07028): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task acb01e0b (flow b6de7c5d): loading (try 0): successful, next state: submitting
2021/07/08 17:21:50 scheduler task a660f2ec (flow abfbfcf5): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 0daa8d96 (flow 6a75b3c2): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 8d3ebe19 (flow 31c07028): submitting (try 0): started
2021/07/08 17:21:51 scheduler task acb01e0b (flow b6de7c5d): submitting (try 0): started
2021/07/08 17:21:51 scheduler task c4ff5c5f (flow 14e5610e): loaded val<.=b075def8 35.4MiB>
2021/07/08 17:21:51 scheduler task be960135 (flow 20c58820): loaded val<.=23f19e96 35.4MiB>
2021/07/08 17:21:51 scheduler task e37887ba (flow 3f3f0aa1): loaded val<.=80834609 35.4MiB>
2021/07/08 17:21:51 scheduler task 7c80984b (flow f133966a): loaded val<.=eb5f94e9 35.4MiB>
2021/07/08 17:21:51 scheduler task 1e17310e (flow 4be7c800): loaded val<.=7a5dd551 35.4MiB>
2021/07/08 17:21:51 scheduler task fd88e144 (flow 30072890): loaded val<.=15341e5b 35.4MiB>
2021/07/08 17:21:51 scheduler task 1e17310e (flow 4be7c800): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 4ef1336d (flow bc17d794): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:51 scheduler task 3579f14e (flow ec208550): loaded val<.=ad308fe6 35.4MiB>
2021/07/08 17:21:51 scheduler task 27109b10 (flow 11e863f7): loaded val<.=3492ebc6 35.4MiB>
2021/07/08 17:21:51 scheduler task 27109b10 (flow 11e863f7): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 95ea60c7 (flow 53b65fb8): loaded val<.=07ba23ac 35.4MiB>
2021/07/08 17:21:51 scheduler task e73506b2 (flow 6e531834): loaded val<.=38297540 35.4MiB>
2021/07/08 17:21:51 scheduler task e73506b2 (flow 6e531834): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task d57d51d4 (flow 714a362d): loaded val<.=4c0734c6 35.4MiB>
2021/07/08 17:21:51 scheduler task c4ff5c5f (flow 14e5610e): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task f032da36 (flow dd8a72fb): loaded val<.=bb8823f8 35.4MiB>
2021/07/08 17:21:51 scheduler task 96cdb789 (flow 37acff54): loaded val<.=1584c541 35.4MiB>
2021/07/08 17:21:51 scheduler task 96cdb789 (flow 37acff54): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 3579f14e (flow ec208550): loaded val<.=a38f6e10 35.4MiB>
2021/07/08 17:21:51 scheduler task 3579f14e (flow ec208550): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 7c80984b (flow f133966a): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task c04eb0c7 (flow 37139f88): loaded val<.=f1d55b21 35.4MiB>
2021/07/08 17:21:51 scheduler task c04eb0c7 (flow 37139f88): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task e266f779 (flow 89895078): loaded val<.=222c85dc 35.4MiB>
2021/07/08 17:21:51 scheduler task e266f779 (flow 89895078): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 1e17310e (flow 4be7c800): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 4ef1336d (flow bc17d794): waiting for completion (try 0): started
2021/07/08 17:21:51  ->  n100.r08.s021.Main.out_file bc17d794 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:51 n100.r08.s021.Main.out_file bc17d794 n100/r08/n100.r08.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:134a0528cb8dd97a80636b674dbbd1a125a63b853eb5f83fb3c9cbf138ed559a
	sha256:bc17d79472cce61f3da764fe6cde35710b695538620d460b847ab349b3788149
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ef1336d8116f8a8665738bfa54b450fe5389e1984b069db332a6e43be886ddb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s021_output"
	    wget -O "n100.r08.s021_output/n100.r08.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s021_output/n100.r08.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s021_output/n100.r08.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s021_output/n100.r08.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s021_output/n100.r08.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s021_output/n100.r08.s021.reference.fas" "n100.r08.s021_output/n100.r08.s021.fq1.fastq" "n100.r08.s021_output/n100.r08.s021.fq2.fastq" | samtools view -bS - > "n100.r08.s021_output/n100.r08.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s021_output/n100.r08.s021.untrimmed.sorted.bam" "n100.r08.s021_output/n100.r08.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s021_output/n100.r08.s021.untrimmed.sorted.bam" -b "n100.r08.s021_output/n100.r08.s021.primers.bed" -p "n100.r08.s021_output/n100.r08.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" "n100.r08.s021_output/n100.r08.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s021_output/n100.r08.s021.reference.fas" "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" > "n100.r08.s021_output/n100.r08.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s021_output/n100.r08.s021.reference.fas" --call-indels "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" > "n100.r08.s021_output/n100.r08.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" > "n100.r08.s021_output/n100.r08.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s021_output/n100.r08.s021.depth.txt" "n100.r08.s021_output/n100.r08.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s021_output/n100.r08.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s021_output/n100.r08.s021.reference.fas" | bcftools consensus -m "n100.r08.s021_output/n100.r08.s021.low_depth.tsv" tmp.vcf.gz > "n100.r08.s021_output/n100.r08.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:51 scheduler task 27109b10 (flow 11e863f7): submitting (try 0): started
2021/07/08 17:21:51 scheduler task e73506b2 (flow 6e531834): submitting (try 0): started
2021/07/08 17:21:51 scheduler task c4ff5c5f (flow 14e5610e): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 96cdb789 (flow 37acff54): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 3579f14e (flow ec208550): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 7c80984b (flow f133966a): submitting (try 0): started
2021/07/08 17:21:51 scheduler task c04eb0c7 (flow 37139f88): submitting (try 0): started
2021/07/08 17:21:51 scheduler task f10c7dd1 (flow d4a953a5): loaded val<.=f44c0a41 35.4MiB>
2021/07/08 17:21:51 scheduler task 9ae8bc0a (flow b42d9724): loaded val<.=59471b32 35.4MiB>
2021/07/08 17:21:51 scheduler task 9ae8bc0a (flow b42d9724): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 8a56961a (flow 9099bf90): loaded val<.=933df345 35.4MiB>
2021/07/08 17:21:51 scheduler task 72dc116b (flow 0403b41d): loaded val<.=b55e413c 35.4MiB>
2021/07/08 17:21:51 scheduler task e266f779 (flow 89895078): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 9ae8bc0a (flow b42d9724): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 0e91bc71 (flow ac83cb33): loaded val<.=6832aa33 35.4MiB>
2021/07/08 17:21:51 scheduler task 4990178e (flow eda0dc49): loaded val<.=eec6b930 35.4MiB>
2021/07/08 17:21:51 scheduler task d1b0c57e (flow 769f8790): loaded val<.=c8aa4257 35.4MiB>
2021/07/08 17:21:51 scheduler task 4990178e (flow eda0dc49): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task d1b0c57e (flow 769f8790): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 0e91bc71 (flow ac83cb33): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task e37887ba (flow 3f3f0aa1): loaded val<.=040ff013 35.4MiB>
2021/07/08 17:21:51 scheduler task e37887ba (flow 3f3f0aa1): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task d57d51d4 (flow 714a362d): loaded val<.=08be6948 35.4MiB>
2021/07/08 17:21:51 scheduler task d57d51d4 (flow 714a362d): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 4fc2765c (flow b30b76d2): loaded val<.=7eb11879 35.4MiB>
2021/07/08 17:21:51 scheduler task 4fc2765c (flow b30b76d2): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task be960135 (flow 20c58820): loaded val<.=89e80f9f 35.4MiB>
2021/07/08 17:21:51 scheduler task be960135 (flow 20c58820): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task f10c7dd1 (flow d4a953a5): loaded val<.=3c4278dc 35.4MiB>
2021/07/08 17:21:51 scheduler task f10c7dd1 (flow d4a953a5): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 72dc116b (flow 0403b41d): loaded val<.=20aa9e90 35.4MiB>
2021/07/08 17:21:51 scheduler task 72dc116b (flow 0403b41d): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 4990178e (flow eda0dc49): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 11cbb428 (flow 6e2216d0): loaded val<.=69062588 35.4MiB>
2021/07/08 17:21:51 scheduler task 8270b132 (flow 53910cbe): loaded val<.=c0abfe3d 35.4MiB>
2021/07/08 17:21:51 scheduler task b3c857b7 (flow 5fa48c75): loaded val<.=cae6b3c6 35.4MiB>
2021/07/08 17:21:51 scheduler task b3c857b7 (flow 5fa48c75): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 8270b132 (flow 53910cbe): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task dee4f7a4 (flow 63e7c0c0): loaded val<.=985f6dd8 35.4MiB>
2021/07/08 17:21:51 scheduler task dee4f7a4 (flow 63e7c0c0): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 77090a8d (flow 6db5a9b8): loaded val<.=d1a1cd62 35.4MiB>
2021/07/08 17:21:51 scheduler task 77090a8d (flow 6db5a9b8): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task bf7e40f2 (flow d91ad154): loaded val<.=27aa3262 35.4MiB>
2021/07/08 17:21:51 scheduler task bf7e40f2 (flow d91ad154): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task d1b0c57e (flow 769f8790): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 0e91bc71 (flow ac83cb33): submitting (try 0): started
2021/07/08 17:21:51 scheduler task fbea3b9c (flow 37f8d46a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:51 scheduler task 533c7302 (flow f2462fba): loaded val<.=1003b204 35.4MiB>
2021/07/08 17:21:51 scheduler task 533c7302 (flow f2462fba): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task aad793f7 (flow eaaaa641): loaded val<.=59d695cf 35.4MiB>
2021/07/08 17:21:51 scheduler task aad793f7 (flow eaaaa641): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task e37887ba (flow 3f3f0aa1): submitting (try 0): started
2021/07/08 17:21:51 scheduler task d57d51d4 (flow 714a362d): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 4fc2765c (flow b30b76d2): submitting (try 0): started
2021/07/08 17:21:51 scheduler task be960135 (flow 20c58820): submitting (try 0): started
2021/07/08 17:21:51 scheduler task f10c7dd1 (flow d4a953a5): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 95ea60c7 (flow 53b65fb8): loaded val<.=9b2b7481 35.4MiB>
2021/07/08 17:21:51 scheduler task 264d0316 (flow 29e265bf): loaded val<.=107003ea 35.4MiB>
2021/07/08 17:21:51 scheduler task 95ea60c7 (flow 53b65fb8): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 264d0316 (flow 29e265bf): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 72dc116b (flow 0403b41d): submitting (try 0): started
2021/07/08 17:21:51 scheduler task b3c857b7 (flow 5fa48c75): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 5f2477ba (flow aa8092e5): loaded val<.=2b27ca39 35.4MiB>
2021/07/08 17:21:51 scheduler task 82ea7c30 (flow 9a696a11): loaded val<.=2b90497e 35.4MiB>
2021/07/08 17:21:51 scheduler task 8270b132 (flow 53910cbe): submitting (try 0): started
2021/07/08 17:21:51 scheduler task dee4f7a4 (flow 63e7c0c0): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 77090a8d (flow 6db5a9b8): submitting (try 0): started
2021/07/08 17:21:51 scheduler task bf7e40f2 (flow d91ad154): submitting (try 0): started
2021/07/08 17:21:51 scheduler task fbea3b9c (flow 37f8d46a): waiting for completion (try 0): started
2021/07/08 17:21:51  ->  n100.r08.s048.Main.out_file 37f8d46a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:51 n100.r08.s048.Main.out_file 37f8d46a n100/r08/n100.r08.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a0173e099755d893da2e2bf82e02863980ab07d419f499dae4d0dbd869d84387
	sha256:37f8d46a8fc51a7e09b7f8486133bbff83a72cfd000d24dda6283cd16a70605e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fbea3b9cb3c615730c908380d3016a4a232b20bcac6530cfe0257373fcabb38a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s048_output"
	    wget -O "n100.r08.s048_output/n100.r08.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s048_output/n100.r08.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s048_output/n100.r08.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s048_output/n100.r08.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s048_output/n100.r08.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s048_output/n100.r08.s048.reference.fas" "n100.r08.s048_output/n100.r08.s048.fq1.fastq" "n100.r08.s048_output/n100.r08.s048.fq2.fastq" | samtools view -bS - > "n100.r08.s048_output/n100.r08.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s048_output/n100.r08.s048.untrimmed.sorted.bam" "n100.r08.s048_output/n100.r08.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s048_output/n100.r08.s048.untrimmed.sorted.bam" -b "n100.r08.s048_output/n100.r08.s048.primers.bed" -p "n100.r08.s048_output/n100.r08.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" "n100.r08.s048_output/n100.r08.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s048_output/n100.r08.s048.reference.fas" "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" > "n100.r08.s048_output/n100.r08.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s048_output/n100.r08.s048.reference.fas" --call-indels "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" > "n100.r08.s048_output/n100.r08.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" > "n100.r08.s048_output/n100.r08.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s048_output/n100.r08.s048.depth.txt" "n100.r08.s048_output/n100.r08.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s048_output/n100.r08.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s048_output/n100.r08.s048.reference.fas" | bcftools consensus -m "n100.r08.s048_output/n100.r08.s048.low_depth.tsv" tmp.vcf.gz > "n100.r08.s048_output/n100.r08.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:51 scheduler task 533c7302 (flow f2462fba): submitting (try 0): started
2021/07/08 17:21:51 scheduler task aad793f7 (flow eaaaa641): submitting (try 0): started
2021/07/08 17:21:51 scheduler task e7dd9705 (flow 15301ea9): loaded val<.=d96a3be0 35.4MiB>
2021/07/08 17:21:51 scheduler task 8a56961a (flow 9099bf90): loaded val<.=9b3e6630 35.4MiB>
2021/07/08 17:21:51 scheduler task 8a56961a (flow 9099bf90): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 77ea896f (flow 6e71356b): loaded val<.=6b07b478 35.4MiB>
2021/07/08 17:21:51 scheduler task 77ea896f (flow 6e71356b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 2bd7a6bf (flow ebe32457): loaded val<.=6cc1c9ab 35.4MiB>
2021/07/08 17:21:51 scheduler task 2bd7a6bf (flow ebe32457): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task ecca53e1 (flow bb3142a9): loaded val<.=43dd4d61 35.4MiB>
2021/07/08 17:21:51 scheduler task ecca53e1 (flow bb3142a9): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task e7dd9705 (flow 15301ea9): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 95ea60c7 (flow 53b65fb8): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 264d0316 (flow 29e265bf): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 5f2477ba (flow aa8092e5): loaded val<.=7237d65e 35.4MiB>
2021/07/08 17:21:51 scheduler task 5f2477ba (flow aa8092e5): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 8a56961a (flow 9099bf90): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 77ea896f (flow 6e71356b): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 2bd7a6bf (flow ebe32457): submitting (try 0): started
2021/07/08 17:21:51 scheduler task ecca53e1 (flow bb3142a9): submitting (try 0): started
2021/07/08 17:21:51 scheduler task e7dd9705 (flow 15301ea9): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 5f2477ba (flow aa8092e5): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 719f8479 (flow bc3f293a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:51 scheduler task f032da36 (flow dd8a72fb): loaded val<.=6dbe2736 35.4MiB>
2021/07/08 17:21:51 scheduler task f032da36 (flow dd8a72fb): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 719f8479 (flow bc3f293a): waiting for completion (try 0): started
2021/07/08 17:21:51  ->  n100.r08.s060.Main.out_file bc3f293a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:51 n100.r08.s060.Main.out_file bc3f293a n100/r08/n100.r08.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b820168e406b5245e8bdb04f26ba8e1152faa248fb480c0c29df5409315d77dc
	sha256:bc3f293a65d1afb77bbec7ea9c5107f915cbb2b6b08cf8d3ba292858913b4a25
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/719f8479a1bec2a6eebd0f8fa7a0ba4c6ea98be9606c45ad69a0395f006ceec9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s060_output"
	    wget -O "n100.r08.s060_output/n100.r08.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s060_output/n100.r08.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s060_output/n100.r08.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s060_output/n100.r08.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s060_output/n100.r08.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s060_output/n100.r08.s060.reference.fas" "n100.r08.s060_output/n100.r08.s060.fq1.fastq" "n100.r08.s060_output/n100.r08.s060.fq2.fastq" | samtools view -bS - > "n100.r08.s060_output/n100.r08.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s060_output/n100.r08.s060.untrimmed.sorted.bam" "n100.r08.s060_output/n100.r08.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s060_output/n100.r08.s060.untrimmed.sorted.bam" -b "n100.r08.s060_output/n100.r08.s060.primers.bed" -p "n100.r08.s060_output/n100.r08.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" "n100.r08.s060_output/n100.r08.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s060_output/n100.r08.s060.reference.fas" "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" > "n100.r08.s060_output/n100.r08.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s060_output/n100.r08.s060.reference.fas" --call-indels "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" > "n100.r08.s060_output/n100.r08.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" > "n100.r08.s060_output/n100.r08.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s060_output/n100.r08.s060.depth.txt" "n100.r08.s060_output/n100.r08.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s060_output/n100.r08.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s060_output/n100.r08.s060.reference.fas" | bcftools consensus -m "n100.r08.s060_output/n100.r08.s060.low_depth.tsv" tmp.vcf.gz > "n100.r08.s060_output/n100.r08.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:51 scheduler task f032da36 (flow dd8a72fb): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 82ea7c30 (flow 9a696a11): loaded val<.=655569f2 35.4MiB>
2021/07/08 17:21:51 scheduler task 82ea7c30 (flow 9a696a11): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 82ea7c30 (flow 9a696a11): submitting (try 0): started
2021/07/08 17:21:51 scheduler task cb5519bf (flow b7426dfd): loaded val<.=f2a10fb6 35.4MiB>
2021/07/08 17:21:51 scheduler task cb5519bf (flow b7426dfd): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task cb5519bf (flow b7426dfd): submitting (try 0): started
2021/07/08 17:21:51 scheduler task e923c46c (flow 4b5a804b): loaded val<.=b477129a 35.4MiB>
2021/07/08 17:21:51 scheduler task 7ba99413 (flow 45b5a090): loaded val<.=96d633e6 35.4MiB>
2021/07/08 17:21:51 scheduler task 7ba99413 (flow 45b5a090): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 11cbb428 (flow 6e2216d0): loaded val<.=d50a9818 35.4MiB>
2021/07/08 17:21:51 scheduler task 11cbb428 (flow 6e2216d0): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task 7ba99413 (flow 45b5a090): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 11cbb428 (flow 6e2216d0): submitting (try 0): started
2021/07/08 17:21:51 scheduler task 899f5270 (flow c4aa557b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:51 scheduler task 899f5270 (flow c4aa557b): waiting for completion (try 0): started
2021/07/08 17:21:51  ->  n100.r08.s062.Main.out_file c4aa557b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:51 n100.r08.s062.Main.out_file c4aa557b n100/r08/n100.r08.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df73d914df4f12c0a4c8672c3e5ce1af627d5d2ec2944b7e02685208cadc4d87
	sha256:c4aa557bd0879ebc07101058377749344891be3393626f4c583b149d8f05234a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/899f5270dbc64a883e4e9b1a624dd4f91e8dbcb9250c148d8e3f75ec7de70785
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s062_output"
	    wget -O "n100.r08.s062_output/n100.r08.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s062_output/n100.r08.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s062_output/n100.r08.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s062_output/n100.r08.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s062_output/n100.r08.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s062_output/n100.r08.s062.reference.fas" "n100.r08.s062_output/n100.r08.s062.fq1.fastq" "n100.r08.s062_output/n100.r08.s062.fq2.fastq" | samtools view -bS - > "n100.r08.s062_output/n100.r08.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s062_output/n100.r08.s062.untrimmed.sorted.bam" "n100.r08.s062_output/n100.r08.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s062_output/n100.r08.s062.untrimmed.sorted.bam" -b "n100.r08.s062_output/n100.r08.s062.primers.bed" -p "n100.r08.s062_output/n100.r08.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" "n100.r08.s062_output/n100.r08.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s062_output/n100.r08.s062.reference.fas" "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" > "n100.r08.s062_output/n100.r08.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s062_output/n100.r08.s062.reference.fas" --call-indels "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" > "n100.r08.s062_output/n100.r08.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" > "n100.r08.s062_output/n100.r08.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s062_output/n100.r08.s062.depth.txt" "n100.r08.s062_output/n100.r08.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s062_output/n100.r08.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s062_output/n100.r08.s062.reference.fas" | bcftools consensus -m "n100.r08.s062_output/n100.r08.s062.low_depth.tsv" tmp.vcf.gz > "n100.r08.s062_output/n100.r08.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:51 scheduler task e923c46c (flow 4b5a804b): loaded val<.=f26ae7f6 35.4MiB>
2021/07/08 17:21:51 scheduler task e923c46c (flow 4b5a804b): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task e923c46c (flow 4b5a804b): submitting (try 0): started
2021/07/08 17:21:51 scheduler task dc62e337 (flow 98ca279e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:51 scheduler task fd88e144 (flow 30072890): loaded val<.=94af5bac 35.4MiB>
2021/07/08 17:21:51 scheduler task fd88e144 (flow 30072890): loading (try 0): successful, next state: submitting
2021/07/08 17:21:51 scheduler task dc62e337 (flow 98ca279e): waiting for completion (try 0): started
2021/07/08 17:21:51  ->  n100.r08.s024.Main.out_file 98ca279e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:51 n100.r08.s024.Main.out_file 98ca279e n100/r08/n100.r08.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8bf96b945aec496311988e4546fd80fb0bb325729aa8135147218aea9608bdea
	sha256:98ca279ec2a62edace4e616c3a941929918f034be302da97d0e0fd39ba3c123d
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dc62e337486771553f7f86252be2f73cfc3c23f2d3f8c4844d682aa330971935
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s024_output"
	    wget -O "n100.r08.s024_output/n100.r08.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s024_output/n100.r08.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s024_output/n100.r08.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s024_output/n100.r08.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s024_output/n100.r08.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s024_output/n100.r08.s024.reference.fas" "n100.r08.s024_output/n100.r08.s024.fq1.fastq" "n100.r08.s024_output/n100.r08.s024.fq2.fastq" | samtools view -bS - > "n100.r08.s024_output/n100.r08.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s024_output/n100.r08.s024.untrimmed.sorted.bam" "n100.r08.s024_output/n100.r08.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s024_output/n100.r08.s024.untrimmed.sorted.bam" -b "n100.r08.s024_output/n100.r08.s024.primers.bed" -p "n100.r08.s024_output/n100.r08.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" "n100.r08.s024_output/n100.r08.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s024_output/n100.r08.s024.reference.fas" "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" > "n100.r08.s024_output/n100.r08.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s024_output/n100.r08.s024.reference.fas" --call-indels "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" > "n100.r08.s024_output/n100.r08.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" > "n100.r08.s024_output/n100.r08.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s024_output/n100.r08.s024.depth.txt" "n100.r08.s024_output/n100.r08.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s024_output/n100.r08.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s024_output/n100.r08.s024.reference.fas" | bcftools consensus -m "n100.r08.s024_output/n100.r08.s024.low_depth.tsv" tmp.vcf.gz > "n100.r08.s024_output/n100.r08.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:51 scheduler task fd88e144 (flow 30072890): submitting (try 0): started
2021/07/08 17:21:51 scheduler task d321bea4 (flow 6fbbdec0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:51 scheduler task d321bea4 (flow 6fbbdec0): waiting for completion (try 0): started
2021/07/08 17:21:51  ->  n100.r08.s085.Main.out_file 6fbbdec0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:51 n100.r08.s085.Main.out_file 6fbbdec0 n100/r08/n100.r08.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e0944bcbb196ac77abb9666e008a7954e52d6be297f638bcdad5d9e194c8a314
	sha256:6fbbdec07200b0805807a7c6004243435393e00f8a4de5b4c18f46a677f065a3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d321bea40111fb2c32398e440b7492ea77e83b0a8dfa0fdf521b91c5710ff4cb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s085_output"
	    wget -O "n100.r08.s085_output/n100.r08.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s085_output/n100.r08.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s085_output/n100.r08.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s085_output/n100.r08.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s085_output/n100.r08.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s085_output/n100.r08.s085.reference.fas" "n100.r08.s085_output/n100.r08.s085.fq1.fastq" "n100.r08.s085_output/n100.r08.s085.fq2.fastq" | samtools view -bS - > "n100.r08.s085_output/n100.r08.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s085_output/n100.r08.s085.untrimmed.sorted.bam" "n100.r08.s085_output/n100.r08.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s085_output/n100.r08.s085.untrimmed.sorted.bam" -b "n100.r08.s085_output/n100.r08.s085.primers.bed" -p "n100.r08.s085_output/n100.r08.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" "n100.r08.s085_output/n100.r08.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s085_output/n100.r08.s085.reference.fas" "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" > "n100.r08.s085_output/n100.r08.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s085_output/n100.r08.s085.reference.fas" --call-indels "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" > "n100.r08.s085_output/n100.r08.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" > "n100.r08.s085_output/n100.r08.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s085_output/n100.r08.s085.depth.txt" "n100.r08.s085_output/n100.r08.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s085_output/n100.r08.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s085_output/n100.r08.s085.reference.fas" | bcftools consensus -m "n100.r08.s085_output/n100.r08.s085.low_depth.tsv" tmp.vcf.gz > "n100.r08.s085_output/n100.r08.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:52 scheduler task 35a36d68 (flow c0e958d6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:52 scheduler task 35a36d68 (flow c0e958d6): waiting for completion (try 0): started
2021/07/08 17:21:52  ->  n100.r08.s092.Main.out_file c0e958d6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:52 n100.r08.s092.Main.out_file c0e958d6 n100/r08/n100.r08.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:40fa461905a7c802fb80f90195ec20d6f699efffc863ab1b97981ae50b1ae7aa
	sha256:c0e958d63a5f9192e011246e74bc8c6232f65e824d345a1e1ea5da5774c0242b
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/35a36d68e82b59bcd59be95864ed29c036646bd1c7514b29835282194fd0b8c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s092_output"
	    wget -O "n100.r08.s092_output/n100.r08.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s092_output/n100.r08.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s092_output/n100.r08.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s092_output/n100.r08.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s092_output/n100.r08.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s092_output/n100.r08.s092.reference.fas" "n100.r08.s092_output/n100.r08.s092.fq1.fastq" "n100.r08.s092_output/n100.r08.s092.fq2.fastq" | samtools view -bS - > "n100.r08.s092_output/n100.r08.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s092_output/n100.r08.s092.untrimmed.sorted.bam" "n100.r08.s092_output/n100.r08.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s092_output/n100.r08.s092.untrimmed.sorted.bam" -b "n100.r08.s092_output/n100.r08.s092.primers.bed" -p "n100.r08.s092_output/n100.r08.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" "n100.r08.s092_output/n100.r08.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s092_output/n100.r08.s092.reference.fas" "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" > "n100.r08.s092_output/n100.r08.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s092_output/n100.r08.s092.reference.fas" --call-indels "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" > "n100.r08.s092_output/n100.r08.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" > "n100.r08.s092_output/n100.r08.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s092_output/n100.r08.s092.depth.txt" "n100.r08.s092_output/n100.r08.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s092_output/n100.r08.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s092_output/n100.r08.s092.reference.fas" | bcftools consensus -m "n100.r08.s092_output/n100.r08.s092.low_depth.tsv" tmp.vcf.gz > "n100.r08.s092_output/n100.r08.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:52 scheduler task be583c00 (flow 601a9c71): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:52 scheduler task 17f58eff (flow afb9c82e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:52 scheduler task be583c00 (flow 601a9c71): waiting for completion (try 0): started
2021/07/08 17:21:52  ->  n100.r08.s100.Main.out_file 601a9c71 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:52 n100.r08.s100.Main.out_file 601a9c71 n100/r08/n100.r08.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7593f8bbf1622c8f689f40078518b8cd7750f5fb87affe5cff7d2297d525113b
	sha256:601a9c71c5c86e17c639bd3f46e774dd4593376313beaf6011f09c0afd14e95f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/be583c00b1f13982b1e4b1d5944c36ec13956db470fe517031db35f3f8ca0065
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s100_output"
	    wget -O "n100.r08.s100_output/n100.r08.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s100_output/n100.r08.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s100_output/n100.r08.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s100_output/n100.r08.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s100_output/n100.r08.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s100_output/n100.r08.s100.reference.fas" "n100.r08.s100_output/n100.r08.s100.fq1.fastq" "n100.r08.s100_output/n100.r08.s100.fq2.fastq" | samtools view -bS - > "n100.r08.s100_output/n100.r08.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s100_output/n100.r08.s100.untrimmed.sorted.bam" "n100.r08.s100_output/n100.r08.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s100_output/n100.r08.s100.untrimmed.sorted.bam" -b "n100.r08.s100_output/n100.r08.s100.primers.bed" -p "n100.r08.s100_output/n100.r08.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" "n100.r08.s100_output/n100.r08.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s100_output/n100.r08.s100.reference.fas" "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" > "n100.r08.s100_output/n100.r08.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s100_output/n100.r08.s100.reference.fas" --call-indels "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" > "n100.r08.s100_output/n100.r08.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" > "n100.r08.s100_output/n100.r08.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s100_output/n100.r08.s100.depth.txt" "n100.r08.s100_output/n100.r08.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s100_output/n100.r08.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s100_output/n100.r08.s100.reference.fas" | bcftools consensus -m "n100.r08.s100_output/n100.r08.s100.low_depth.tsv" tmp.vcf.gz > "n100.r08.s100_output/n100.r08.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:52 scheduler task 17f58eff (flow afb9c82e): waiting for completion (try 0): started
2021/07/08 17:21:52  ->  n100.r08.s010.Main.out_file afb9c82e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:52 n100.r08.s010.Main.out_file afb9c82e n100/r08/n100.r08.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6b7618dabd1c31f57c9b82129ce3987e5b2d4913fa93657b3903e35a709b870f
	sha256:afb9c82ec37ac7fa43a770d8d0edd5908613d305a2fdbf4230d88d0869358164
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/17f58eff34b2a96925ccd05175ec81afc079ca6492539081e97ec80ed0a35f64
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s010_output"
	    wget -O "n100.r08.s010_output/n100.r08.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s010_output/n100.r08.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s010_output/n100.r08.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s010_output/n100.r08.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s010_output/n100.r08.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s010_output/n100.r08.s010.reference.fas" "n100.r08.s010_output/n100.r08.s010.fq1.fastq" "n100.r08.s010_output/n100.r08.s010.fq2.fastq" | samtools view -bS - > "n100.r08.s010_output/n100.r08.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s010_output/n100.r08.s010.untrimmed.sorted.bam" "n100.r08.s010_output/n100.r08.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s010_output/n100.r08.s010.untrimmed.sorted.bam" -b "n100.r08.s010_output/n100.r08.s010.primers.bed" -p "n100.r08.s010_output/n100.r08.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" "n100.r08.s010_output/n100.r08.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s010_output/n100.r08.s010.reference.fas" "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" > "n100.r08.s010_output/n100.r08.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s010_output/n100.r08.s010.reference.fas" --call-indels "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" > "n100.r08.s010_output/n100.r08.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" > "n100.r08.s010_output/n100.r08.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s010_output/n100.r08.s010.depth.txt" "n100.r08.s010_output/n100.r08.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s010_output/n100.r08.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s010_output/n100.r08.s010.reference.fas" | bcftools consensus -m "n100.r08.s010_output/n100.r08.s010.low_depth.tsv" tmp.vcf.gz > "n100.r08.s010_output/n100.r08.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:52 scheduler task 61314efc (flow eeef90ae): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:52 scheduler task 61314efc (flow eeef90ae): waiting for completion (try 0): started
2021/07/08 17:21:52  ->  n100.r08.s033.Main.out_file eeef90ae exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:52 n100.r08.s033.Main.out_file eeef90ae n100/r08/n100.r08.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:98f9fcb9ac8d80a325b821bbbfc83400512081e101b294ed617c5db73e692bcb
	sha256:eeef90ae4d22378254f879a6d207dc6fe35b9f90ea941caf3a43afde94332da0
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/61314efc237f3009856d90d39b1c00c44f6a1477bbcaa7dddf68c1fdd27183d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s033_output"
	    wget -O "n100.r08.s033_output/n100.r08.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s033_output/n100.r08.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s033_output/n100.r08.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s033_output/n100.r08.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s033_output/n100.r08.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s033_output/n100.r08.s033.reference.fas" "n100.r08.s033_output/n100.r08.s033.fq1.fastq" "n100.r08.s033_output/n100.r08.s033.fq2.fastq" | samtools view -bS - > "n100.r08.s033_output/n100.r08.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s033_output/n100.r08.s033.untrimmed.sorted.bam" "n100.r08.s033_output/n100.r08.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s033_output/n100.r08.s033.untrimmed.sorted.bam" -b "n100.r08.s033_output/n100.r08.s033.primers.bed" -p "n100.r08.s033_output/n100.r08.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" "n100.r08.s033_output/n100.r08.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s033_output/n100.r08.s033.reference.fas" "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" > "n100.r08.s033_output/n100.r08.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s033_output/n100.r08.s033.reference.fas" --call-indels "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" > "n100.r08.s033_output/n100.r08.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" > "n100.r08.s033_output/n100.r08.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s033_output/n100.r08.s033.depth.txt" "n100.r08.s033_output/n100.r08.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s033_output/n100.r08.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s033_output/n100.r08.s033.reference.fas" | bcftools consensus -m "n100.r08.s033_output/n100.r08.s033.low_depth.tsv" tmp.vcf.gz > "n100.r08.s033_output/n100.r08.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:52 scheduler task bdd078c4 (flow 19f87377): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:52 scheduler task bdd078c4 (flow 19f87377): waiting for completion (try 0): started
2021/07/08 17:21:52  ->  n100.r08.s037.Main.out_file 19f87377 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:52 n100.r08.s037.Main.out_file 19f87377 n100/r08/n100.r08.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4a09ad1d4683764bc228ccb36d5594a1e540d2dcf500cb5177e9a7417a46f6d4
	sha256:19f8737731103fbbcc622ea6a9ed08d9b3eb3c0604789f05f8d7539909beae1a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bdd078c4c3f73f350a33b24f31383a135738df5e253330fb727fa5b0a956b43b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s037_output"
	    wget -O "n100.r08.s037_output/n100.r08.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s037_output/n100.r08.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s037_output/n100.r08.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s037_output/n100.r08.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s037_output/n100.r08.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s037_output/n100.r08.s037.reference.fas" "n100.r08.s037_output/n100.r08.s037.fq1.fastq" "n100.r08.s037_output/n100.r08.s037.fq2.fastq" | samtools view -bS - > "n100.r08.s037_output/n100.r08.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s037_output/n100.r08.s037.untrimmed.sorted.bam" "n100.r08.s037_output/n100.r08.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s037_output/n100.r08.s037.untrimmed.sorted.bam" -b "n100.r08.s037_output/n100.r08.s037.primers.bed" -p "n100.r08.s037_output/n100.r08.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" "n100.r08.s037_output/n100.r08.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s037_output/n100.r08.s037.reference.fas" "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" > "n100.r08.s037_output/n100.r08.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s037_output/n100.r08.s037.reference.fas" --call-indels "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" > "n100.r08.s037_output/n100.r08.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" > "n100.r08.s037_output/n100.r08.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s037_output/n100.r08.s037.depth.txt" "n100.r08.s037_output/n100.r08.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s037_output/n100.r08.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s037_output/n100.r08.s037.reference.fas" | bcftools consensus -m "n100.r08.s037_output/n100.r08.s037.low_depth.tsv" tmp.vcf.gz > "n100.r08.s037_output/n100.r08.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:52 scheduler task 42d18dc0 (flow 30cb4af0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:52 scheduler task 42d18dc0 (flow 30cb4af0): waiting for completion (try 0): started
2021/07/08 17:21:52  ->  n100.r08.s020.Main.out_file 30cb4af0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:52 n100.r08.s020.Main.out_file 30cb4af0 n100/r08/n100.r08.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1eae554b9998573348c5a64ba4ad3ac29922e619f8683cbe29e0ffe0bb59d350
	sha256:30cb4af0ffdb3cd5a7f32aea1df792451e19881b1664e9216c778c45d410251a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/42d18dc0f67d0cdb672a8821dc8aafdbc0c7a47df1fff70f07e154a599291b4b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s020_output"
	    wget -O "n100.r08.s020_output/n100.r08.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s020_output/n100.r08.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s020_output/n100.r08.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s020_output/n100.r08.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s020_output/n100.r08.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s020_output/n100.r08.s020.reference.fas" "n100.r08.s020_output/n100.r08.s020.fq1.fastq" "n100.r08.s020_output/n100.r08.s020.fq2.fastq" | samtools view -bS - > "n100.r08.s020_output/n100.r08.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s020_output/n100.r08.s020.untrimmed.sorted.bam" "n100.r08.s020_output/n100.r08.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s020_output/n100.r08.s020.untrimmed.sorted.bam" -b "n100.r08.s020_output/n100.r08.s020.primers.bed" -p "n100.r08.s020_output/n100.r08.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" "n100.r08.s020_output/n100.r08.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s020_output/n100.r08.s020.reference.fas" "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" > "n100.r08.s020_output/n100.r08.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s020_output/n100.r08.s020.reference.fas" --call-indels "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" > "n100.r08.s020_output/n100.r08.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" > "n100.r08.s020_output/n100.r08.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s020_output/n100.r08.s020.depth.txt" "n100.r08.s020_output/n100.r08.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s020_output/n100.r08.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s020_output/n100.r08.s020.reference.fas" | bcftools consensus -m "n100.r08.s020_output/n100.r08.s020.low_depth.tsv" tmp.vcf.gz > "n100.r08.s020_output/n100.r08.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task 19f1fa9b (flow 8358078b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task 19f1fa9b (flow 8358078b): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s082.Main.out_file 8358078b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s082.Main.out_file 8358078b n100/r08/n100.r08.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8033fb867079a83a5819a8ed0a0a8bd65fef6f9dc442414ab0136956af02705f
	sha256:8358078b9783add9f18b34a7e1109d23c4d27ae792f2322042513fbe8cb2d86c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/19f1fa9b9fb5ebdc5462a2ac88d79a5c4d335171435e449cc6a2283b997e6a71
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s082_output"
	    wget -O "n100.r08.s082_output/n100.r08.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s082_output/n100.r08.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s082_output/n100.r08.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s082_output/n100.r08.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s082_output/n100.r08.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s082_output/n100.r08.s082.reference.fas" "n100.r08.s082_output/n100.r08.s082.fq1.fastq" "n100.r08.s082_output/n100.r08.s082.fq2.fastq" | samtools view -bS - > "n100.r08.s082_output/n100.r08.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s082_output/n100.r08.s082.untrimmed.sorted.bam" "n100.r08.s082_output/n100.r08.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s082_output/n100.r08.s082.untrimmed.sorted.bam" -b "n100.r08.s082_output/n100.r08.s082.primers.bed" -p "n100.r08.s082_output/n100.r08.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" "n100.r08.s082_output/n100.r08.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s082_output/n100.r08.s082.reference.fas" "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" > "n100.r08.s082_output/n100.r08.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s082_output/n100.r08.s082.reference.fas" --call-indels "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" > "n100.r08.s082_output/n100.r08.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" > "n100.r08.s082_output/n100.r08.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s082_output/n100.r08.s082.depth.txt" "n100.r08.s082_output/n100.r08.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s082_output/n100.r08.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s082_output/n100.r08.s082.reference.fas" | bcftools consensus -m "n100.r08.s082_output/n100.r08.s082.low_depth.tsv" tmp.vcf.gz > "n100.r08.s082_output/n100.r08.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task f714587f (flow ffcb62ed): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task 2c812c39 (flow 0d5ce47b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task 4f36edfc (flow 7a476ecb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task f714587f (flow ffcb62ed): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s072.Main.out_file ffcb62ed exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s072.Main.out_file ffcb62ed n100/r08/n100.r08.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:084be69703f9ba00bad4d4849a93f43541abae905c1f4ba9e15c2f733590c254
	sha256:ffcb62ed099affbfe44e9b9ab7a8edd15e4964439e6fb92ebedd4396d972a56f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f714587f7aa5c450280276e0aceb11bb09e15aa452698efd090a815dccb55cde
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s072_output"
	    wget -O "n100.r08.s072_output/n100.r08.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s072_output/n100.r08.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s072_output/n100.r08.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s072_output/n100.r08.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s072_output/n100.r08.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s072_output/n100.r08.s072.reference.fas" "n100.r08.s072_output/n100.r08.s072.fq1.fastq" "n100.r08.s072_output/n100.r08.s072.fq2.fastq" | samtools view -bS - > "n100.r08.s072_output/n100.r08.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s072_output/n100.r08.s072.untrimmed.sorted.bam" "n100.r08.s072_output/n100.r08.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s072_output/n100.r08.s072.untrimmed.sorted.bam" -b "n100.r08.s072_output/n100.r08.s072.primers.bed" -p "n100.r08.s072_output/n100.r08.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" "n100.r08.s072_output/n100.r08.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s072_output/n100.r08.s072.reference.fas" "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" > "n100.r08.s072_output/n100.r08.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s072_output/n100.r08.s072.reference.fas" --call-indels "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" > "n100.r08.s072_output/n100.r08.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" > "n100.r08.s072_output/n100.r08.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s072_output/n100.r08.s072.depth.txt" "n100.r08.s072_output/n100.r08.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s072_output/n100.r08.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s072_output/n100.r08.s072.reference.fas" | bcftools consensus -m "n100.r08.s072_output/n100.r08.s072.low_depth.tsv" tmp.vcf.gz > "n100.r08.s072_output/n100.r08.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task 2c812c39 (flow 0d5ce47b): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s049.Main.out_file 0d5ce47b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s049.Main.out_file 0d5ce47b n100/r08/n100.r08.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:341cb9df4244aed1e2089e73e79967161fe12ce29f4dbdd4eb9794d15465c2d5
	sha256:0d5ce47b3458d4d815c854a9aa49b1083495d09437315015409e17f51ea44ff9
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c812c391afdb73613ceb18c0d34a5c1852ec5dfab2879a3d0de40f27872bbcd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s049_output"
	    wget -O "n100.r08.s049_output/n100.r08.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s049_output/n100.r08.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s049_output/n100.r08.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s049_output/n100.r08.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s049_output/n100.r08.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s049_output/n100.r08.s049.reference.fas" "n100.r08.s049_output/n100.r08.s049.fq1.fastq" "n100.r08.s049_output/n100.r08.s049.fq2.fastq" | samtools view -bS - > "n100.r08.s049_output/n100.r08.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s049_output/n100.r08.s049.untrimmed.sorted.bam" "n100.r08.s049_output/n100.r08.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s049_output/n100.r08.s049.untrimmed.sorted.bam" -b "n100.r08.s049_output/n100.r08.s049.primers.bed" -p "n100.r08.s049_output/n100.r08.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" "n100.r08.s049_output/n100.r08.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s049_output/n100.r08.s049.reference.fas" "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" > "n100.r08.s049_output/n100.r08.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s049_output/n100.r08.s049.reference.fas" --call-indels "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" > "n100.r08.s049_output/n100.r08.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" > "n100.r08.s049_output/n100.r08.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s049_output/n100.r08.s049.depth.txt" "n100.r08.s049_output/n100.r08.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s049_output/n100.r08.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s049_output/n100.r08.s049.reference.fas" | bcftools consensus -m "n100.r08.s049_output/n100.r08.s049.low_depth.tsv" tmp.vcf.gz > "n100.r08.s049_output/n100.r08.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task 4f36edfc (flow 7a476ecb): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s023.Main.out_file 7a476ecb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s023.Main.out_file 7a476ecb n100/r08/n100.r08.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:137d5964a2f55a0e29f253759dd805d27fef69f99fb374a275c0f39ebc108f2f
	sha256:7a476ecb27694108720cd81ee655999fc01ab2ef76eb539f50489bb45b390594
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4f36edfc657f765b98a976b6f8a26fb5314bc12ca7f0f2419194e0f322ec7978
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s023_output"
	    wget -O "n100.r08.s023_output/n100.r08.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s023_output/n100.r08.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s023_output/n100.r08.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s023_output/n100.r08.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s023_output/n100.r08.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s023_output/n100.r08.s023.reference.fas" "n100.r08.s023_output/n100.r08.s023.fq1.fastq" "n100.r08.s023_output/n100.r08.s023.fq2.fastq" | samtools view -bS - > "n100.r08.s023_output/n100.r08.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s023_output/n100.r08.s023.untrimmed.sorted.bam" "n100.r08.s023_output/n100.r08.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s023_output/n100.r08.s023.untrimmed.sorted.bam" -b "n100.r08.s023_output/n100.r08.s023.primers.bed" -p "n100.r08.s023_output/n100.r08.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" "n100.r08.s023_output/n100.r08.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s023_output/n100.r08.s023.reference.fas" "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" > "n100.r08.s023_output/n100.r08.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s023_output/n100.r08.s023.reference.fas" --call-indels "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" > "n100.r08.s023_output/n100.r08.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" > "n100.r08.s023_output/n100.r08.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s023_output/n100.r08.s023.depth.txt" "n100.r08.s023_output/n100.r08.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s023_output/n100.r08.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s023_output/n100.r08.s023.reference.fas" | bcftools consensus -m "n100.r08.s023_output/n100.r08.s023.low_depth.tsv" tmp.vcf.gz > "n100.r08.s023_output/n100.r08.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task 625ac6d7 (flow c1c3792a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task 625ac6d7 (flow c1c3792a): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s018.Main.out_file c1c3792a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s018.Main.out_file c1c3792a n100/r08/n100.r08.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:91664b6424b6cf3aeb57c0a1998302e437165d8254dccea8348baa732450f9b2
	sha256:c1c3792ad2e4e152e934365ad578ccb66dbc646eef8349bf18781d4e8cf5e0ac
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/625ac6d7d86bc1880893d10bbee4a0c8fd9a34b513376544c1c37079cd07b118
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s018_output"
	    wget -O "n100.r08.s018_output/n100.r08.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s018_output/n100.r08.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s018_output/n100.r08.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s018_output/n100.r08.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s018_output/n100.r08.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s018_output/n100.r08.s018.reference.fas" "n100.r08.s018_output/n100.r08.s018.fq1.fastq" "n100.r08.s018_output/n100.r08.s018.fq2.fastq" | samtools view -bS - > "n100.r08.s018_output/n100.r08.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s018_output/n100.r08.s018.untrimmed.sorted.bam" "n100.r08.s018_output/n100.r08.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s018_output/n100.r08.s018.untrimmed.sorted.bam" -b "n100.r08.s018_output/n100.r08.s018.primers.bed" -p "n100.r08.s018_output/n100.r08.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" "n100.r08.s018_output/n100.r08.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s018_output/n100.r08.s018.reference.fas" "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" > "n100.r08.s018_output/n100.r08.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s018_output/n100.r08.s018.reference.fas" --call-indels "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" > "n100.r08.s018_output/n100.r08.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" > "n100.r08.s018_output/n100.r08.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s018_output/n100.r08.s018.depth.txt" "n100.r08.s018_output/n100.r08.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s018_output/n100.r08.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s018_output/n100.r08.s018.reference.fas" | bcftools consensus -m "n100.r08.s018_output/n100.r08.s018.low_depth.tsv" tmp.vcf.gz > "n100.r08.s018_output/n100.r08.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task a9954f8b (flow 6c9f7fef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task a9954f8b (flow 6c9f7fef): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s076.Main.out_file 6c9f7fef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s076.Main.out_file 6c9f7fef n100/r08/n100.r08.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e016d81cb2c64ea2957e18c434c63b2d7021b5cbf3a0e3c96ee9156d935413f
	sha256:6c9f7fef5468bd3b4788d19ccd245c12d84b94547d808ae9442389562fc5556c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a9954f8b8ada217092f8e252df6322fb0807239f3cd636345511c0b4bd465f3f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s076_output"
	    wget -O "n100.r08.s076_output/n100.r08.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s076_output/n100.r08.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s076_output/n100.r08.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s076_output/n100.r08.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s076_output/n100.r08.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s076_output/n100.r08.s076.reference.fas" "n100.r08.s076_output/n100.r08.s076.fq1.fastq" "n100.r08.s076_output/n100.r08.s076.fq2.fastq" | samtools view -bS - > "n100.r08.s076_output/n100.r08.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s076_output/n100.r08.s076.untrimmed.sorted.bam" "n100.r08.s076_output/n100.r08.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s076_output/n100.r08.s076.untrimmed.sorted.bam" -b "n100.r08.s076_output/n100.r08.s076.primers.bed" -p "n100.r08.s076_output/n100.r08.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" "n100.r08.s076_output/n100.r08.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s076_output/n100.r08.s076.reference.fas" "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" > "n100.r08.s076_output/n100.r08.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s076_output/n100.r08.s076.reference.fas" --call-indels "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" > "n100.r08.s076_output/n100.r08.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" > "n100.r08.s076_output/n100.r08.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s076_output/n100.r08.s076.depth.txt" "n100.r08.s076_output/n100.r08.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s076_output/n100.r08.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s076_output/n100.r08.s076.reference.fas" | bcftools consensus -m "n100.r08.s076_output/n100.r08.s076.low_depth.tsv" tmp.vcf.gz > "n100.r08.s076_output/n100.r08.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task 8ee17ca7 (flow cc702d2f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task 8ee17ca7 (flow cc702d2f): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s016.Main.out_file cc702d2f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s016.Main.out_file cc702d2f n100/r08/n100.r08.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03fc94feb5122c67e7451635e17fea842a7c4050551877ab347db2a758a40f04
	sha256:cc702d2fc5ad19f2bac204fe41d8f3cc65ede52fc7d8d1e5448bd97ff1b96393
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8ee17ca789d15f2adb830c44e4069d158da207dd835d8626da9916f37ddcba38
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s016_output"
	    wget -O "n100.r08.s016_output/n100.r08.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s016_output/n100.r08.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s016_output/n100.r08.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s016_output/n100.r08.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s016_output/n100.r08.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s016_output/n100.r08.s016.reference.fas" "n100.r08.s016_output/n100.r08.s016.fq1.fastq" "n100.r08.s016_output/n100.r08.s016.fq2.fastq" | samtools view -bS - > "n100.r08.s016_output/n100.r08.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s016_output/n100.r08.s016.untrimmed.sorted.bam" "n100.r08.s016_output/n100.r08.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s016_output/n100.r08.s016.untrimmed.sorted.bam" -b "n100.r08.s016_output/n100.r08.s016.primers.bed" -p "n100.r08.s016_output/n100.r08.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" "n100.r08.s016_output/n100.r08.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s016_output/n100.r08.s016.reference.fas" "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" > "n100.r08.s016_output/n100.r08.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s016_output/n100.r08.s016.reference.fas" --call-indels "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" > "n100.r08.s016_output/n100.r08.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" > "n100.r08.s016_output/n100.r08.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s016_output/n100.r08.s016.depth.txt" "n100.r08.s016_output/n100.r08.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s016_output/n100.r08.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s016_output/n100.r08.s016.reference.fas" | bcftools consensus -m "n100.r08.s016_output/n100.r08.s016.low_depth.tsv" tmp.vcf.gz > "n100.r08.s016_output/n100.r08.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:53 scheduler task e4711d1d (flow 40d58762): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:53 scheduler task e4711d1d (flow 40d58762): waiting for completion (try 0): started
2021/07/08 17:21:53  ->  n100.r08.s067.Main.out_file 40d58762 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:53 n100.r08.s067.Main.out_file 40d58762 n100/r08/n100.r08.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1d1ce294d0a17b79760e7c0f3925866b179bdd5ff98a70b26a9af7d567635846
	sha256:40d58762ac9ad0581ce3b94a414496b089db2529bea9e1414ce26cfb5762f664
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e4711d1d3b895583effbd186469d57a7ca41e5e5057639e68f97a94120b38cde
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s067_output"
	    wget -O "n100.r08.s067_output/n100.r08.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s067_output/n100.r08.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s067_output/n100.r08.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s067_output/n100.r08.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s067_output/n100.r08.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s067_output/n100.r08.s067.reference.fas" "n100.r08.s067_output/n100.r08.s067.fq1.fastq" "n100.r08.s067_output/n100.r08.s067.fq2.fastq" | samtools view -bS - > "n100.r08.s067_output/n100.r08.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s067_output/n100.r08.s067.untrimmed.sorted.bam" "n100.r08.s067_output/n100.r08.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s067_output/n100.r08.s067.untrimmed.sorted.bam" -b "n100.r08.s067_output/n100.r08.s067.primers.bed" -p "n100.r08.s067_output/n100.r08.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" "n100.r08.s067_output/n100.r08.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s067_output/n100.r08.s067.reference.fas" "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" > "n100.r08.s067_output/n100.r08.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s067_output/n100.r08.s067.reference.fas" --call-indels "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" > "n100.r08.s067_output/n100.r08.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" > "n100.r08.s067_output/n100.r08.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s067_output/n100.r08.s067.depth.txt" "n100.r08.s067_output/n100.r08.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s067_output/n100.r08.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s067_output/n100.r08.s067.reference.fas" | bcftools consensus -m "n100.r08.s067_output/n100.r08.s067.low_depth.tsv" tmp.vcf.gz > "n100.r08.s067_output/n100.r08.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:54 scheduler task e3e2fbc0 (flow b7aad0a1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:54 scheduler task e3e2fbc0 (flow b7aad0a1): waiting for completion (try 0): started
2021/07/08 17:21:54  ->  n100.r08.s075.Main.out_file b7aad0a1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:54 n100.r08.s075.Main.out_file b7aad0a1 n100/r08/n100.r08.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0641e2129ac0b0d86a687c14ac4bead0f110f5e9095a4b126c95e94473a69be8
	sha256:b7aad0a12a351a1028263e392d69be1dc2287770e8d3f843fe2516ae01d8e3b3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e3e2fbc00806796934b0ffb95c1d3be5559769ecb1516a49fdcd4a636134d729
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s075_output"
	    wget -O "n100.r08.s075_output/n100.r08.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s075_output/n100.r08.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s075_output/n100.r08.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s075_output/n100.r08.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s075_output/n100.r08.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s075_output/n100.r08.s075.reference.fas" "n100.r08.s075_output/n100.r08.s075.fq1.fastq" "n100.r08.s075_output/n100.r08.s075.fq2.fastq" | samtools view -bS - > "n100.r08.s075_output/n100.r08.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s075_output/n100.r08.s075.untrimmed.sorted.bam" "n100.r08.s075_output/n100.r08.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s075_output/n100.r08.s075.untrimmed.sorted.bam" -b "n100.r08.s075_output/n100.r08.s075.primers.bed" -p "n100.r08.s075_output/n100.r08.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" "n100.r08.s075_output/n100.r08.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s075_output/n100.r08.s075.reference.fas" "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" > "n100.r08.s075_output/n100.r08.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s075_output/n100.r08.s075.reference.fas" --call-indels "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" > "n100.r08.s075_output/n100.r08.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" > "n100.r08.s075_output/n100.r08.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s075_output/n100.r08.s075.depth.txt" "n100.r08.s075_output/n100.r08.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s075_output/n100.r08.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s075_output/n100.r08.s075.reference.fas" | bcftools consensus -m "n100.r08.s075_output/n100.r08.s075.low_depth.tsv" tmp.vcf.gz > "n100.r08.s075_output/n100.r08.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:54 scheduler task ba1130bd (flow c6f7e8d0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:54 scheduler task ba1130bd (flow c6f7e8d0): waiting for completion (try 0): started
2021/07/08 17:21:54  ->  n100.r08.s099.Main.out_file c6f7e8d0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:54 n100.r08.s099.Main.out_file c6f7e8d0 n100/r08/n100.r08.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a91d42dd07f2da21d0d93f7b8ddaa1aec4b009716a301455b747d05d858576a3
	sha256:c6f7e8d0fb93d7ef5267952e90a387e08d4668b9d6f1419f18a1139c0a35fba8
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ba1130bdc40146e137aa1ec57ce7adbb9829fbe5ce713c952beb9c8b17ee0210
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s099_output"
	    wget -O "n100.r08.s099_output/n100.r08.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s099_output/n100.r08.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s099_output/n100.r08.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s099_output/n100.r08.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s099_output/n100.r08.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s099_output/n100.r08.s099.reference.fas" "n100.r08.s099_output/n100.r08.s099.fq1.fastq" "n100.r08.s099_output/n100.r08.s099.fq2.fastq" | samtools view -bS - > "n100.r08.s099_output/n100.r08.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s099_output/n100.r08.s099.untrimmed.sorted.bam" "n100.r08.s099_output/n100.r08.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s099_output/n100.r08.s099.untrimmed.sorted.bam" -b "n100.r08.s099_output/n100.r08.s099.primers.bed" -p "n100.r08.s099_output/n100.r08.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" "n100.r08.s099_output/n100.r08.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s099_output/n100.r08.s099.reference.fas" "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" > "n100.r08.s099_output/n100.r08.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s099_output/n100.r08.s099.reference.fas" --call-indels "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" > "n100.r08.s099_output/n100.r08.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" > "n100.r08.s099_output/n100.r08.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s099_output/n100.r08.s099.depth.txt" "n100.r08.s099_output/n100.r08.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s099_output/n100.r08.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s099_output/n100.r08.s099.reference.fas" | bcftools consensus -m "n100.r08.s099_output/n100.r08.s099.low_depth.tsv" tmp.vcf.gz > "n100.r08.s099_output/n100.r08.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:54 scheduler task cef151a9 (flow ae810609): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:54 scheduler task cef151a9 (flow ae810609): waiting for completion (try 0): started
2021/07/08 17:21:54  ->  n100.r08.s096.Main.out_file ae810609 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:54 n100.r08.s096.Main.out_file ae810609 n100/r08/n100.r08.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:47d098d08bb3d2faf09b554213e7b856582dc0893ca86b52228f445dec346bf6
	sha256:ae810609a343778179413aef4483b65bc9dc9a94658578a519fee4178de94f1a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cef151a942fa95a5fe11b09520658fda4c999cbf9e875d2869b84c425a8b2786
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s096_output"
	    wget -O "n100.r08.s096_output/n100.r08.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s096_output/n100.r08.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s096_output/n100.r08.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s096_output/n100.r08.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s096_output/n100.r08.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s096_output/n100.r08.s096.reference.fas" "n100.r08.s096_output/n100.r08.s096.fq1.fastq" "n100.r08.s096_output/n100.r08.s096.fq2.fastq" | samtools view -bS - > "n100.r08.s096_output/n100.r08.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s096_output/n100.r08.s096.untrimmed.sorted.bam" "n100.r08.s096_output/n100.r08.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s096_output/n100.r08.s096.untrimmed.sorted.bam" -b "n100.r08.s096_output/n100.r08.s096.primers.bed" -p "n100.r08.s096_output/n100.r08.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" "n100.r08.s096_output/n100.r08.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s096_output/n100.r08.s096.reference.fas" "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" > "n100.r08.s096_output/n100.r08.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s096_output/n100.r08.s096.reference.fas" --call-indels "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" > "n100.r08.s096_output/n100.r08.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" > "n100.r08.s096_output/n100.r08.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s096_output/n100.r08.s096.depth.txt" "n100.r08.s096_output/n100.r08.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s096_output/n100.r08.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s096_output/n100.r08.s096.reference.fas" | bcftools consensus -m "n100.r08.s096_output/n100.r08.s096.low_depth.tsv" tmp.vcf.gz > "n100.r08.s096_output/n100.r08.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:54 scheduler task 4b7d1db7 (flow 0c27eb3e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:54 scheduler task 4b7d1db7 (flow 0c27eb3e): waiting for completion (try 0): started
2021/07/08 17:21:54  ->  n100.r08.s097.Main.out_file 0c27eb3e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:54 n100.r08.s097.Main.out_file 0c27eb3e n100/r08/n100.r08.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42e7f1e278e274d2d2e458ad68ebe5822d996f887e4340b802948b5e01c77750
	sha256:0c27eb3eb3ecdf71507c64450a9a21865ff69f9ef4396914807653bcb53246d3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4b7d1db713f4defb227d9e8d96aba8f1b81087d8a211ba5fff563123a1a9fc9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s097_output"
	    wget -O "n100.r08.s097_output/n100.r08.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s097_output/n100.r08.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s097_output/n100.r08.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s097_output/n100.r08.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s097_output/n100.r08.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s097_output/n100.r08.s097.reference.fas" "n100.r08.s097_output/n100.r08.s097.fq1.fastq" "n100.r08.s097_output/n100.r08.s097.fq2.fastq" | samtools view -bS - > "n100.r08.s097_output/n100.r08.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s097_output/n100.r08.s097.untrimmed.sorted.bam" "n100.r08.s097_output/n100.r08.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s097_output/n100.r08.s097.untrimmed.sorted.bam" -b "n100.r08.s097_output/n100.r08.s097.primers.bed" -p "n100.r08.s097_output/n100.r08.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" "n100.r08.s097_output/n100.r08.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s097_output/n100.r08.s097.reference.fas" "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" > "n100.r08.s097_output/n100.r08.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s097_output/n100.r08.s097.reference.fas" --call-indels "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" > "n100.r08.s097_output/n100.r08.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" > "n100.r08.s097_output/n100.r08.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s097_output/n100.r08.s097.depth.txt" "n100.r08.s097_output/n100.r08.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s097_output/n100.r08.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s097_output/n100.r08.s097.reference.fas" | bcftools consensus -m "n100.r08.s097_output/n100.r08.s097.low_depth.tsv" tmp.vcf.gz > "n100.r08.s097_output/n100.r08.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:54 scheduler task cef49e65 (flow 56e46f6d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:54 scheduler task cef49e65 (flow 56e46f6d): waiting for completion (try 0): started
2021/07/08 17:21:54  ->  n100.r08.s009.Main.out_file 56e46f6d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:54 n100.r08.s009.Main.out_file 56e46f6d n100/r08/n100.r08.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e2fe04b7426e95e91fed1dec4d4eef2d724d29c0b4c2a2ede2cdb7356fe16b3a
	sha256:56e46f6dbada50c476c369fe0f2c8901d21e2dd75d9a86b9a823a78aafafcc76
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cef49e65adb5a7d02e0f35111f6a980d5845f91aa25eba4a7214babcb9c99878
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s009_output"
	    wget -O "n100.r08.s009_output/n100.r08.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s009_output/n100.r08.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s009_output/n100.r08.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s009_output/n100.r08.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s009_output/n100.r08.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s009_output/n100.r08.s009.reference.fas" "n100.r08.s009_output/n100.r08.s009.fq1.fastq" "n100.r08.s009_output/n100.r08.s009.fq2.fastq" | samtools view -bS - > "n100.r08.s009_output/n100.r08.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s009_output/n100.r08.s009.untrimmed.sorted.bam" "n100.r08.s009_output/n100.r08.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s009_output/n100.r08.s009.untrimmed.sorted.bam" -b "n100.r08.s009_output/n100.r08.s009.primers.bed" -p "n100.r08.s009_output/n100.r08.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" "n100.r08.s009_output/n100.r08.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s009_output/n100.r08.s009.reference.fas" "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" > "n100.r08.s009_output/n100.r08.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s009_output/n100.r08.s009.reference.fas" --call-indels "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" > "n100.r08.s009_output/n100.r08.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" > "n100.r08.s009_output/n100.r08.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s009_output/n100.r08.s009.depth.txt" "n100.r08.s009_output/n100.r08.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s009_output/n100.r08.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s009_output/n100.r08.s009.reference.fas" | bcftools consensus -m "n100.r08.s009_output/n100.r08.s009.low_depth.tsv" tmp.vcf.gz > "n100.r08.s009_output/n100.r08.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task 0004b3b5 (flow 509a6465): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:55 scheduler task 0004b3b5 (flow 509a6465): waiting for completion (try 0): started
2021/07/08 17:21:55  ->  n100.r08.s011.Main.out_file 509a6465 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:55 n100.r08.s011.Main.out_file 509a6465 n100/r08/n100.r08.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61eaff955adbe06e2dc660ac395514894b00e2bc4179f1de3b39b7492e5b5afb
	sha256:509a64656d574bca1131419fc87d0bb603e5a2a323b5014c3d1a65f755ee9e4c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0004b3b5a3660f54386fd82e36be40835b729dc306d4352dc8d2584d63fa1849
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s011_output"
	    wget -O "n100.r08.s011_output/n100.r08.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s011_output/n100.r08.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s011_output/n100.r08.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s011_output/n100.r08.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s011_output/n100.r08.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s011_output/n100.r08.s011.reference.fas" "n100.r08.s011_output/n100.r08.s011.fq1.fastq" "n100.r08.s011_output/n100.r08.s011.fq2.fastq" | samtools view -bS - > "n100.r08.s011_output/n100.r08.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s011_output/n100.r08.s011.untrimmed.sorted.bam" "n100.r08.s011_output/n100.r08.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s011_output/n100.r08.s011.untrimmed.sorted.bam" -b "n100.r08.s011_output/n100.r08.s011.primers.bed" -p "n100.r08.s011_output/n100.r08.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" "n100.r08.s011_output/n100.r08.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s011_output/n100.r08.s011.reference.fas" "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" > "n100.r08.s011_output/n100.r08.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s011_output/n100.r08.s011.reference.fas" --call-indels "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" > "n100.r08.s011_output/n100.r08.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" > "n100.r08.s011_output/n100.r08.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s011_output/n100.r08.s011.depth.txt" "n100.r08.s011_output/n100.r08.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s011_output/n100.r08.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s011_output/n100.r08.s011.reference.fas" | bcftools consensus -m "n100.r08.s011_output/n100.r08.s011.low_depth.tsv" tmp.vcf.gz > "n100.r08.s011_output/n100.r08.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task 6fc6d1e0 (flow edf8b1db): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:55 scheduler task 6fc6d1e0 (flow edf8b1db): waiting for completion (try 0): started
2021/07/08 17:21:55  ->  n100.r08.s054.Main.out_file edf8b1db exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:55 n100.r08.s054.Main.out_file edf8b1db n100/r08/n100.r08.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca960b06e479c0e2ef022528e1d49bd392965e462cd6c19141dc208d138705c3
	sha256:edf8b1dbdb53b92a346cc8cf0bd970b43ca5d102b3397e2e3f20021dd52834dd
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6fc6d1e04d655150906cf23dbd043a04020a51f20d81ee3622faa6f5d30d2234
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s054_output"
	    wget -O "n100.r08.s054_output/n100.r08.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s054_output/n100.r08.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s054_output/n100.r08.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s054_output/n100.r08.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s054_output/n100.r08.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s054_output/n100.r08.s054.reference.fas" "n100.r08.s054_output/n100.r08.s054.fq1.fastq" "n100.r08.s054_output/n100.r08.s054.fq2.fastq" | samtools view -bS - > "n100.r08.s054_output/n100.r08.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s054_output/n100.r08.s054.untrimmed.sorted.bam" "n100.r08.s054_output/n100.r08.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s054_output/n100.r08.s054.untrimmed.sorted.bam" -b "n100.r08.s054_output/n100.r08.s054.primers.bed" -p "n100.r08.s054_output/n100.r08.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" "n100.r08.s054_output/n100.r08.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s054_output/n100.r08.s054.reference.fas" "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" > "n100.r08.s054_output/n100.r08.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s054_output/n100.r08.s054.reference.fas" --call-indels "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" > "n100.r08.s054_output/n100.r08.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" > "n100.r08.s054_output/n100.r08.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s054_output/n100.r08.s054.depth.txt" "n100.r08.s054_output/n100.r08.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s054_output/n100.r08.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s054_output/n100.r08.s054.reference.fas" | bcftools consensus -m "n100.r08.s054_output/n100.r08.s054.low_depth.tsv" tmp.vcf.gz > "n100.r08.s054_output/n100.r08.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task 13af5d5a (flow 0b3effbc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:55 scheduler task 13af5d5a (flow 0b3effbc): waiting for completion (try 0): started
2021/07/08 17:21:55  ->  n100.r08.s027.Main.out_file 0b3effbc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:55 n100.r08.s027.Main.out_file 0b3effbc n100/r08/n100.r08.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:87fe4e05abb82d4856c0f478e3519f1ede1275a4d2367d68fac15bb678e66bd5
	sha256:0b3effbccf204369dae95ff9c248d72002a350fc45a1d5fdb1de4eeab0b8cf52
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13af5d5a665161b0abf1683f718d53523506bdd9b03950c970607f0783d97432
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s027_output"
	    wget -O "n100.r08.s027_output/n100.r08.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s027_output/n100.r08.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s027_output/n100.r08.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s027_output/n100.r08.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s027_output/n100.r08.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s027_output/n100.r08.s027.reference.fas" "n100.r08.s027_output/n100.r08.s027.fq1.fastq" "n100.r08.s027_output/n100.r08.s027.fq2.fastq" | samtools view -bS - > "n100.r08.s027_output/n100.r08.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s027_output/n100.r08.s027.untrimmed.sorted.bam" "n100.r08.s027_output/n100.r08.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s027_output/n100.r08.s027.untrimmed.sorted.bam" -b "n100.r08.s027_output/n100.r08.s027.primers.bed" -p "n100.r08.s027_output/n100.r08.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" "n100.r08.s027_output/n100.r08.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s027_output/n100.r08.s027.reference.fas" "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" > "n100.r08.s027_output/n100.r08.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s027_output/n100.r08.s027.reference.fas" --call-indels "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" > "n100.r08.s027_output/n100.r08.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" > "n100.r08.s027_output/n100.r08.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s027_output/n100.r08.s027.depth.txt" "n100.r08.s027_output/n100.r08.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s027_output/n100.r08.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s027_output/n100.r08.s027.reference.fas" | bcftools consensus -m "n100.r08.s027_output/n100.r08.s027.low_depth.tsv" tmp.vcf.gz > "n100.r08.s027_output/n100.r08.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task 2304077e (flow 683e2f72): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:55 scheduler task 2304077e (flow 683e2f72): waiting for completion (try 0): started
2021/07/08 17:21:55  ->  n100.r08.s035.Main.out_file 683e2f72 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:55 n100.r08.s035.Main.out_file 683e2f72 n100/r08/n100.r08.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:57f35a29ad269dcb96201238d3fb16015b585a06d52a121f2e3eb795c53ab31f
	sha256:683e2f72a4323a39f4be4e3e91e68619f1a5f2e2b6e0edf4ea8e4255aa769c1e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2304077e82ffecbc6ec1d1b07eb68c36308265ab728363a8ce561d4198adea5f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s035_output"
	    wget -O "n100.r08.s035_output/n100.r08.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s035_output/n100.r08.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s035_output/n100.r08.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s035_output/n100.r08.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s035_output/n100.r08.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s035_output/n100.r08.s035.reference.fas" "n100.r08.s035_output/n100.r08.s035.fq1.fastq" "n100.r08.s035_output/n100.r08.s035.fq2.fastq" | samtools view -bS - > "n100.r08.s035_output/n100.r08.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s035_output/n100.r08.s035.untrimmed.sorted.bam" "n100.r08.s035_output/n100.r08.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s035_output/n100.r08.s035.untrimmed.sorted.bam" -b "n100.r08.s035_output/n100.r08.s035.primers.bed" -p "n100.r08.s035_output/n100.r08.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" "n100.r08.s035_output/n100.r08.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s035_output/n100.r08.s035.reference.fas" "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" > "n100.r08.s035_output/n100.r08.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s035_output/n100.r08.s035.reference.fas" --call-indels "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" > "n100.r08.s035_output/n100.r08.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" > "n100.r08.s035_output/n100.r08.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s035_output/n100.r08.s035.depth.txt" "n100.r08.s035_output/n100.r08.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s035_output/n100.r08.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s035_output/n100.r08.s035.reference.fas" | bcftools consensus -m "n100.r08.s035_output/n100.r08.s035.low_depth.tsv" tmp.vcf.gz > "n100.r08.s035_output/n100.r08.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task a3702691 (flow f12b0ac7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:55 scheduler task a3702691 (flow f12b0ac7): waiting for completion (try 0): started
2021/07/08 17:21:55  ->  n100.r08.s080.Main.out_file f12b0ac7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:55 n100.r08.s080.Main.out_file f12b0ac7 n100/r08/n100.r08.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c9acd2574dfab7a99ab2d6f5458561fb1cbff59379f572d2fcc03824bc15fc1
	sha256:f12b0ac79616ce70d85c6f9bf1a32d1323fc23b4bd60d4b7a9cd463bae3ef5bb
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a370269176f68a9f8d7e5adecde5168d3126c67462e865c26765d907b8a4028d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s080_output"
	    wget -O "n100.r08.s080_output/n100.r08.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s080_output/n100.r08.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s080_output/n100.r08.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s080_output/n100.r08.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s080_output/n100.r08.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s080_output/n100.r08.s080.reference.fas" "n100.r08.s080_output/n100.r08.s080.fq1.fastq" "n100.r08.s080_output/n100.r08.s080.fq2.fastq" | samtools view -bS - > "n100.r08.s080_output/n100.r08.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s080_output/n100.r08.s080.untrimmed.sorted.bam" "n100.r08.s080_output/n100.r08.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s080_output/n100.r08.s080.untrimmed.sorted.bam" -b "n100.r08.s080_output/n100.r08.s080.primers.bed" -p "n100.r08.s080_output/n100.r08.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" "n100.r08.s080_output/n100.r08.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s080_output/n100.r08.s080.reference.fas" "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" > "n100.r08.s080_output/n100.r08.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s080_output/n100.r08.s080.reference.fas" --call-indels "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" > "n100.r08.s080_output/n100.r08.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" > "n100.r08.s080_output/n100.r08.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s080_output/n100.r08.s080.depth.txt" "n100.r08.s080_output/n100.r08.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s080_output/n100.r08.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s080_output/n100.r08.s080.reference.fas" | bcftools consensus -m "n100.r08.s080_output/n100.r08.s080.low_depth.tsv" tmp.vcf.gz > "n100.r08.s080_output/n100.r08.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task a14d135e (flow 37c80ebd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:55 scheduler task a14d135e (flow 37c80ebd): waiting for completion (try 0): started
2021/07/08 17:21:55  ->  n100.r08.s002.Main.out_file 37c80ebd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:55 n100.r08.s002.Main.out_file 37c80ebd n100/r08/n100.r08.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:316a5461297ccc6d7d6f957d5ef1d1460e49c7c45659e1da7f01ae5ca10e7588
	sha256:37c80ebd66ec77e05f01cd8baf053e4118330d633198c386964c03987a5ec756
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a14d135ec23507977e58c00c09c041909381aea1faa9c98032b5109ebe0b66bd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s002_output"
	    wget -O "n100.r08.s002_output/n100.r08.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s002_output/n100.r08.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s002_output/n100.r08.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s002_output/n100.r08.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s002_output/n100.r08.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s002_output/n100.r08.s002.reference.fas" "n100.r08.s002_output/n100.r08.s002.fq1.fastq" "n100.r08.s002_output/n100.r08.s002.fq2.fastq" | samtools view -bS - > "n100.r08.s002_output/n100.r08.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s002_output/n100.r08.s002.untrimmed.sorted.bam" "n100.r08.s002_output/n100.r08.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s002_output/n100.r08.s002.untrimmed.sorted.bam" -b "n100.r08.s002_output/n100.r08.s002.primers.bed" -p "n100.r08.s002_output/n100.r08.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" "n100.r08.s002_output/n100.r08.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s002_output/n100.r08.s002.reference.fas" "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" > "n100.r08.s002_output/n100.r08.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s002_output/n100.r08.s002.reference.fas" --call-indels "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" > "n100.r08.s002_output/n100.r08.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" > "n100.r08.s002_output/n100.r08.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s002_output/n100.r08.s002.depth.txt" "n100.r08.s002_output/n100.r08.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s002_output/n100.r08.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s002_output/n100.r08.s002.reference.fas" | bcftools consensus -m "n100.r08.s002_output/n100.r08.s002.low_depth.tsv" tmp.vcf.gz > "n100.r08.s002_output/n100.r08.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:55 scheduler task 991d72a7 (flow 5307f7d5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task 991d72a7 (flow 5307f7d5): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s095.Main.out_file 5307f7d5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s095.Main.out_file 5307f7d5 n100/r08/n100.r08.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cf0b17362051702b2316f7678bd69604b1688b111fa5f837babd62e1512deca1
	sha256:5307f7d5f38dae1fe310228a60036e2451427d0c5fd15d1828d2ac2438e39113
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/991d72a70f4a23b52a260ee83c46fc3cfbbb46381547a6ffdc2e9778725b83f1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s095_output"
	    wget -O "n100.r08.s095_output/n100.r08.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s095_output/n100.r08.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s095_output/n100.r08.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s095_output/n100.r08.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s095_output/n100.r08.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s095_output/n100.r08.s095.reference.fas" "n100.r08.s095_output/n100.r08.s095.fq1.fastq" "n100.r08.s095_output/n100.r08.s095.fq2.fastq" | samtools view -bS - > "n100.r08.s095_output/n100.r08.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s095_output/n100.r08.s095.untrimmed.sorted.bam" "n100.r08.s095_output/n100.r08.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s095_output/n100.r08.s095.untrimmed.sorted.bam" -b "n100.r08.s095_output/n100.r08.s095.primers.bed" -p "n100.r08.s095_output/n100.r08.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" "n100.r08.s095_output/n100.r08.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s095_output/n100.r08.s095.reference.fas" "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" > "n100.r08.s095_output/n100.r08.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s095_output/n100.r08.s095.reference.fas" --call-indels "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" > "n100.r08.s095_output/n100.r08.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" > "n100.r08.s095_output/n100.r08.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s095_output/n100.r08.s095.depth.txt" "n100.r08.s095_output/n100.r08.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s095_output/n100.r08.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s095_output/n100.r08.s095.reference.fas" | bcftools consensus -m "n100.r08.s095_output/n100.r08.s095.low_depth.tsv" tmp.vcf.gz > "n100.r08.s095_output/n100.r08.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:56 scheduler task f62422fc (flow 7c1d2985): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task f62422fc (flow 7c1d2985): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s008.Main.out_file 7c1d2985 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s008.Main.out_file 7c1d2985 n100/r08/n100.r08.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f9289abf0fdbb3bd81400de70ab1277beeba2f7be7d6667ceda9c1bb96db8d8
	sha256:7c1d2985cc20bf433d0650147f0aa48d3b0a8a89105c3118e6fa044aa7af46df
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f62422fc3193a72a6166ce83bbb2e6d01b3379d624a729c110c0c52f1db32be2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s008_output"
	    wget -O "n100.r08.s008_output/n100.r08.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s008_output/n100.r08.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s008_output/n100.r08.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s008_output/n100.r08.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s008_output/n100.r08.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s008_output/n100.r08.s008.reference.fas" "n100.r08.s008_output/n100.r08.s008.fq1.fastq" "n100.r08.s008_output/n100.r08.s008.fq2.fastq" | samtools view -bS - > "n100.r08.s008_output/n100.r08.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s008_output/n100.r08.s008.untrimmed.sorted.bam" "n100.r08.s008_output/n100.r08.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s008_output/n100.r08.s008.untrimmed.sorted.bam" -b "n100.r08.s008_output/n100.r08.s008.primers.bed" -p "n100.r08.s008_output/n100.r08.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" "n100.r08.s008_output/n100.r08.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s008_output/n100.r08.s008.reference.fas" "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" > "n100.r08.s008_output/n100.r08.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s008_output/n100.r08.s008.reference.fas" --call-indels "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" > "n100.r08.s008_output/n100.r08.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" > "n100.r08.s008_output/n100.r08.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s008_output/n100.r08.s008.depth.txt" "n100.r08.s008_output/n100.r08.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s008_output/n100.r08.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s008_output/n100.r08.s008.reference.fas" | bcftools consensus -m "n100.r08.s008_output/n100.r08.s008.low_depth.tsv" tmp.vcf.gz > "n100.r08.s008_output/n100.r08.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:56 scheduler task 21ae2bff (flow 7bb8abed): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task 21ae2bff (flow 7bb8abed): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s044.Main.out_file 7bb8abed exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s044.Main.out_file 7bb8abed n100/r08/n100.r08.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0f077c9002992ab08efff43f8678a19242dc104817657f2a459686b511eb1bb8
	sha256:7bb8abed18207b80bbadb4ab6227bde3d164ae5a058b4944a2fb03c075944e2b
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21ae2bffeb12a01abd8643a9beb0fe2b741e0f456d1a01d452b170ffc488ac20
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s044_output"
	    wget -O "n100.r08.s044_output/n100.r08.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s044_output/n100.r08.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s044_output/n100.r08.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s044_output/n100.r08.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s044_output/n100.r08.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s044_output/n100.r08.s044.reference.fas" "n100.r08.s044_output/n100.r08.s044.fq1.fastq" "n100.r08.s044_output/n100.r08.s044.fq2.fastq" | samtools view -bS - > "n100.r08.s044_output/n100.r08.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s044_output/n100.r08.s044.untrimmed.sorted.bam" "n100.r08.s044_output/n100.r08.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s044_output/n100.r08.s044.untrimmed.sorted.bam" -b "n100.r08.s044_output/n100.r08.s044.primers.bed" -p "n100.r08.s044_output/n100.r08.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" "n100.r08.s044_output/n100.r08.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s044_output/n100.r08.s044.reference.fas" "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" > "n100.r08.s044_output/n100.r08.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s044_output/n100.r08.s044.reference.fas" --call-indels "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" > "n100.r08.s044_output/n100.r08.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" > "n100.r08.s044_output/n100.r08.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s044_output/n100.r08.s044.depth.txt" "n100.r08.s044_output/n100.r08.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s044_output/n100.r08.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s044_output/n100.r08.s044.reference.fas" | bcftools consensus -m "n100.r08.s044_output/n100.r08.s044.low_depth.tsv" tmp.vcf.gz > "n100.r08.s044_output/n100.r08.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:56 scheduler task cd7dca86 (flow 59cfb075): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task cd7dca86 (flow 59cfb075): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s093.Main.out_file 59cfb075 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s093.Main.out_file 59cfb075 n100/r08/n100.r08.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:686230e53ea9e9cd68a333bfe5b6a63265733caab7e95fdd28ece89f726d6bdd
	sha256:59cfb075e951c574ee259f3e70d2e1ec435468c1a831286c0aeac50e2c6aac76
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cd7dca86e216eea002990bc5cb4a7c65e028da07e4684e539a73c12a54268c34
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s093_output"
	    wget -O "n100.r08.s093_output/n100.r08.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s093_output/n100.r08.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s093_output/n100.r08.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s093_output/n100.r08.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s093_output/n100.r08.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s093_output/n100.r08.s093.reference.fas" "n100.r08.s093_output/n100.r08.s093.fq1.fastq" "n100.r08.s093_output/n100.r08.s093.fq2.fastq" | samtools view -bS - > "n100.r08.s093_output/n100.r08.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s093_output/n100.r08.s093.untrimmed.sorted.bam" "n100.r08.s093_output/n100.r08.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s093_output/n100.r08.s093.untrimmed.sorted.bam" -b "n100.r08.s093_output/n100.r08.s093.primers.bed" -p "n100.r08.s093_output/n100.r08.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" "n100.r08.s093_output/n100.r08.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s093_output/n100.r08.s093.reference.fas" "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" > "n100.r08.s093_output/n100.r08.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s093_output/n100.r08.s093.reference.fas" --call-indels "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" > "n100.r08.s093_output/n100.r08.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" > "n100.r08.s093_output/n100.r08.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s093_output/n100.r08.s093.depth.txt" "n100.r08.s093_output/n100.r08.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s093_output/n100.r08.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s093_output/n100.r08.s093.reference.fas" | bcftools consensus -m "n100.r08.s093_output/n100.r08.s093.low_depth.tsv" tmp.vcf.gz > "n100.r08.s093_output/n100.r08.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:56 scheduler task cdee6bfa (flow f460701b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task cdee6bfa (flow f460701b): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s029.Main.out_file f460701b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s029.Main.out_file f460701b n100/r08/n100.r08.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5994092e096b3b5e5ddaffc56b05f47f92b717d1388f113f39d111eca105145
	sha256:f460701be83f52a32c8ac4de3aeccb6742fe3d8c5de5776db2bd32f83917aa4c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cdee6bfae2f4172e40e1e60bcfcf86b75892d345678279ac52f5949327a65fb7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s029_output"
	    wget -O "n100.r08.s029_output/n100.r08.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s029_output/n100.r08.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s029_output/n100.r08.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s029_output/n100.r08.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s029_output/n100.r08.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s029_output/n100.r08.s029.reference.fas" "n100.r08.s029_output/n100.r08.s029.fq1.fastq" "n100.r08.s029_output/n100.r08.s029.fq2.fastq" | samtools view -bS - > "n100.r08.s029_output/n100.r08.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s029_output/n100.r08.s029.untrimmed.sorted.bam" "n100.r08.s029_output/n100.r08.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s029_output/n100.r08.s029.untrimmed.sorted.bam" -b "n100.r08.s029_output/n100.r08.s029.primers.bed" -p "n100.r08.s029_output/n100.r08.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" "n100.r08.s029_output/n100.r08.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s029_output/n100.r08.s029.reference.fas" "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" > "n100.r08.s029_output/n100.r08.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s029_output/n100.r08.s029.reference.fas" --call-indels "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" > "n100.r08.s029_output/n100.r08.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" > "n100.r08.s029_output/n100.r08.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s029_output/n100.r08.s029.depth.txt" "n100.r08.s029_output/n100.r08.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s029_output/n100.r08.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s029_output/n100.r08.s029.reference.fas" | bcftools consensus -m "n100.r08.s029_output/n100.r08.s029.low_depth.tsv" tmp.vcf.gz > "n100.r08.s029_output/n100.r08.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:56 scheduler task 43e62e27 (flow a215c969): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task 43e62e27 (flow a215c969): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s012.Main.out_file a215c969 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s012.Main.out_file a215c969 n100/r08/n100.r08.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d5bbb7382d625ca4410ce70481008a0d248cf15cab5c37cba9884caa5a75f306
	sha256:a215c9690fc52a382b69f5fb1e1b45747f132b33fc79282d652ff2277c05a927
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43e62e27fc743f134b7f67f3b62b0c6da770bcf8eec71ef179e856c59e9e069b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s012_output"
	    wget -O "n100.r08.s012_output/n100.r08.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s012_output/n100.r08.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s012_output/n100.r08.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s012_output/n100.r08.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s012_output/n100.r08.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s012_output/n100.r08.s012.reference.fas" "n100.r08.s012_output/n100.r08.s012.fq1.fastq" "n100.r08.s012_output/n100.r08.s012.fq2.fastq" | samtools view -bS - > "n100.r08.s012_output/n100.r08.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s012_output/n100.r08.s012.untrimmed.sorted.bam" "n100.r08.s012_output/n100.r08.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s012_output/n100.r08.s012.untrimmed.sorted.bam" -b "n100.r08.s012_output/n100.r08.s012.primers.bed" -p "n100.r08.s012_output/n100.r08.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" "n100.r08.s012_output/n100.r08.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s012_output/n100.r08.s012.reference.fas" "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" > "n100.r08.s012_output/n100.r08.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s012_output/n100.r08.s012.reference.fas" --call-indels "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" > "n100.r08.s012_output/n100.r08.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" > "n100.r08.s012_output/n100.r08.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s012_output/n100.r08.s012.depth.txt" "n100.r08.s012_output/n100.r08.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s012_output/n100.r08.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s012_output/n100.r08.s012.reference.fas" | bcftools consensus -m "n100.r08.s012_output/n100.r08.s012.low_depth.tsv" tmp.vcf.gz > "n100.r08.s012_output/n100.r08.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:56 scheduler task 0b48b7f4 (flow 3c31b57e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:56 scheduler task 0b48b7f4 (flow 3c31b57e): waiting for completion (try 0): started
2021/07/08 17:21:56  ->  n100.r08.s084.Main.out_file 3c31b57e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:56 n100.r08.s084.Main.out_file 3c31b57e n100/r08/n100.r08.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:26d6cfad5d9473de9f5b3ba23d8673d4d5c327d577c933933e53055957c27e82
	sha256:3c31b57efb817b5b7e821d2aa711d28bb31754c022e5dd378a89f02de46ca3d4
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b48b7f42092e385ba527b00d02d7f2647c302498fc8a05c0218e0470d5b7032
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s084_output"
	    wget -O "n100.r08.s084_output/n100.r08.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s084_output/n100.r08.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s084_output/n100.r08.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s084_output/n100.r08.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s084_output/n100.r08.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s084_output/n100.r08.s084.reference.fas" "n100.r08.s084_output/n100.r08.s084.fq1.fastq" "n100.r08.s084_output/n100.r08.s084.fq2.fastq" | samtools view -bS - > "n100.r08.s084_output/n100.r08.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s084_output/n100.r08.s084.untrimmed.sorted.bam" "n100.r08.s084_output/n100.r08.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s084_output/n100.r08.s084.untrimmed.sorted.bam" -b "n100.r08.s084_output/n100.r08.s084.primers.bed" -p "n100.r08.s084_output/n100.r08.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" "n100.r08.s084_output/n100.r08.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s084_output/n100.r08.s084.reference.fas" "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" > "n100.r08.s084_output/n100.r08.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s084_output/n100.r08.s084.reference.fas" --call-indels "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" > "n100.r08.s084_output/n100.r08.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" > "n100.r08.s084_output/n100.r08.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s084_output/n100.r08.s084.depth.txt" "n100.r08.s084_output/n100.r08.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s084_output/n100.r08.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s084_output/n100.r08.s084.reference.fas" | bcftools consensus -m "n100.r08.s084_output/n100.r08.s084.low_depth.tsv" tmp.vcf.gz > "n100.r08.s084_output/n100.r08.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 776b5e82 (flow 6ac026c6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 776b5e82 (flow 6ac026c6): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s063.Main.out_file 6ac026c6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s063.Main.out_file 6ac026c6 n100/r08/n100.r08.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:19bf7bbe406059b5d4bfbcb99a01d979deb4cdc83c2cea78bc2bd0f1bb859897
	sha256:6ac026c6b0f01f019af9d9a2842d10ce8123e1e8deaca956736a8fa1eb8c7171
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/776b5e8292018aea48ade5e64a093d515c0f99e38f5bf5afec78da99288adc6b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s063_output"
	    wget -O "n100.r08.s063_output/n100.r08.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s063_output/n100.r08.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s063_output/n100.r08.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s063_output/n100.r08.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s063_output/n100.r08.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s063_output/n100.r08.s063.reference.fas" "n100.r08.s063_output/n100.r08.s063.fq1.fastq" "n100.r08.s063_output/n100.r08.s063.fq2.fastq" | samtools view -bS - > "n100.r08.s063_output/n100.r08.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s063_output/n100.r08.s063.untrimmed.sorted.bam" "n100.r08.s063_output/n100.r08.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s063_output/n100.r08.s063.untrimmed.sorted.bam" -b "n100.r08.s063_output/n100.r08.s063.primers.bed" -p "n100.r08.s063_output/n100.r08.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" "n100.r08.s063_output/n100.r08.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s063_output/n100.r08.s063.reference.fas" "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" > "n100.r08.s063_output/n100.r08.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s063_output/n100.r08.s063.reference.fas" --call-indels "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" > "n100.r08.s063_output/n100.r08.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" > "n100.r08.s063_output/n100.r08.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s063_output/n100.r08.s063.depth.txt" "n100.r08.s063_output/n100.r08.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s063_output/n100.r08.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s063_output/n100.r08.s063.reference.fas" | bcftools consensus -m "n100.r08.s063_output/n100.r08.s063.low_depth.tsv" tmp.vcf.gz > "n100.r08.s063_output/n100.r08.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 55bfb398 (flow ad6bd26e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 55bfb398 (flow ad6bd26e): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s079.Main.out_file ad6bd26e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s079.Main.out_file ad6bd26e n100/r08/n100.r08.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d64b7a67977b8ec79d47836abdb5281b36724a95a77989aeff57c1fca722f115
	sha256:ad6bd26ebfdb2c08611c7552ea323a0570735ba52b62fac5f6441d2bd5c803a3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/55bfb398130cabbe86f9cbd2614a36a9ebd66fa9fbec7e0b01848fab8a443c2c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s079_output"
	    wget -O "n100.r08.s079_output/n100.r08.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s079_output/n100.r08.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s079_output/n100.r08.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s079_output/n100.r08.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s079_output/n100.r08.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s079_output/n100.r08.s079.reference.fas" "n100.r08.s079_output/n100.r08.s079.fq1.fastq" "n100.r08.s079_output/n100.r08.s079.fq2.fastq" | samtools view -bS - > "n100.r08.s079_output/n100.r08.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s079_output/n100.r08.s079.untrimmed.sorted.bam" "n100.r08.s079_output/n100.r08.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s079_output/n100.r08.s079.untrimmed.sorted.bam" -b "n100.r08.s079_output/n100.r08.s079.primers.bed" -p "n100.r08.s079_output/n100.r08.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" "n100.r08.s079_output/n100.r08.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s079_output/n100.r08.s079.reference.fas" "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" > "n100.r08.s079_output/n100.r08.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s079_output/n100.r08.s079.reference.fas" --call-indels "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" > "n100.r08.s079_output/n100.r08.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" > "n100.r08.s079_output/n100.r08.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s079_output/n100.r08.s079.depth.txt" "n100.r08.s079_output/n100.r08.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s079_output/n100.r08.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s079_output/n100.r08.s079.reference.fas" | bcftools consensus -m "n100.r08.s079_output/n100.r08.s079.low_depth.tsv" tmp.vcf.gz > "n100.r08.s079_output/n100.r08.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 371d17ff (flow 2a447479): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 371d17ff (flow 2a447479): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s025.Main.out_file 2a447479 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s025.Main.out_file 2a447479 n100/r08/n100.r08.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:02a77ae0ee88ca794eef65f918b66a095b8228410d4bb5d65a8408e33b400386
	sha256:2a4474799a7448babdc3930104f238f8b0a4b2b360eb9d20f19b75121c396059
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/371d17ff833e84b037dafe2a561eb5f38e986ffb37e59745bdbdb8d14e254c21
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s025_output"
	    wget -O "n100.r08.s025_output/n100.r08.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s025_output/n100.r08.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s025_output/n100.r08.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s025_output/n100.r08.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s025_output/n100.r08.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s025_output/n100.r08.s025.reference.fas" "n100.r08.s025_output/n100.r08.s025.fq1.fastq" "n100.r08.s025_output/n100.r08.s025.fq2.fastq" | samtools view -bS - > "n100.r08.s025_output/n100.r08.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s025_output/n100.r08.s025.untrimmed.sorted.bam" "n100.r08.s025_output/n100.r08.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s025_output/n100.r08.s025.untrimmed.sorted.bam" -b "n100.r08.s025_output/n100.r08.s025.primers.bed" -p "n100.r08.s025_output/n100.r08.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" "n100.r08.s025_output/n100.r08.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s025_output/n100.r08.s025.reference.fas" "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" > "n100.r08.s025_output/n100.r08.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s025_output/n100.r08.s025.reference.fas" --call-indels "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" > "n100.r08.s025_output/n100.r08.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" > "n100.r08.s025_output/n100.r08.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s025_output/n100.r08.s025.depth.txt" "n100.r08.s025_output/n100.r08.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s025_output/n100.r08.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s025_output/n100.r08.s025.reference.fas" | bcftools consensus -m "n100.r08.s025_output/n100.r08.s025.low_depth.tsv" tmp.vcf.gz > "n100.r08.s025_output/n100.r08.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 123263b5 (flow d2a9e9c7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 123263b5 (flow d2a9e9c7): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s050.Main.out_file d2a9e9c7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s050.Main.out_file d2a9e9c7 n100/r08/n100.r08.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b4e7d54118774012d7e31160d5756b2cb8ce58f18cb3b733f8325c5428c92fc5
	sha256:d2a9e9c720ee38287a3c1364124a971e9aad9d184882bd2c5b9df66fc3165691
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/123263b5f44826b6829478c447efdcbbd458719379ab14a247cd84e6672fbaf9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s050_output"
	    wget -O "n100.r08.s050_output/n100.r08.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s050_output/n100.r08.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s050_output/n100.r08.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s050_output/n100.r08.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s050_output/n100.r08.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s050_output/n100.r08.s050.reference.fas" "n100.r08.s050_output/n100.r08.s050.fq1.fastq" "n100.r08.s050_output/n100.r08.s050.fq2.fastq" | samtools view -bS - > "n100.r08.s050_output/n100.r08.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s050_output/n100.r08.s050.untrimmed.sorted.bam" "n100.r08.s050_output/n100.r08.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s050_output/n100.r08.s050.untrimmed.sorted.bam" -b "n100.r08.s050_output/n100.r08.s050.primers.bed" -p "n100.r08.s050_output/n100.r08.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" "n100.r08.s050_output/n100.r08.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s050_output/n100.r08.s050.reference.fas" "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" > "n100.r08.s050_output/n100.r08.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s050_output/n100.r08.s050.reference.fas" --call-indels "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" > "n100.r08.s050_output/n100.r08.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" > "n100.r08.s050_output/n100.r08.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s050_output/n100.r08.s050.depth.txt" "n100.r08.s050_output/n100.r08.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s050_output/n100.r08.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s050_output/n100.r08.s050.reference.fas" | bcftools consensus -m "n100.r08.s050_output/n100.r08.s050.low_depth.tsv" tmp.vcf.gz > "n100.r08.s050_output/n100.r08.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 83e8a2d0 (flow cb20e356): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 83e8a2d0 (flow cb20e356): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s017.Main.out_file cb20e356 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s017.Main.out_file cb20e356 n100/r08/n100.r08.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d38648879b4adc8224aab316fbb59a54fff7be941df4e4c39ee7af9b043dfcb6
	sha256:cb20e356b22c0da6d7264fa680c34389620b795c6c7cf70611f0d5c920148acd
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83e8a2d0db1f9b698deed0266ff5825a9a19b1a0e703a1abeae2dea63d3172da
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s017_output"
	    wget -O "n100.r08.s017_output/n100.r08.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s017_output/n100.r08.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s017_output/n100.r08.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s017_output/n100.r08.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s017_output/n100.r08.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s017_output/n100.r08.s017.reference.fas" "n100.r08.s017_output/n100.r08.s017.fq1.fastq" "n100.r08.s017_output/n100.r08.s017.fq2.fastq" | samtools view -bS - > "n100.r08.s017_output/n100.r08.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s017_output/n100.r08.s017.untrimmed.sorted.bam" "n100.r08.s017_output/n100.r08.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s017_output/n100.r08.s017.untrimmed.sorted.bam" -b "n100.r08.s017_output/n100.r08.s017.primers.bed" -p "n100.r08.s017_output/n100.r08.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" "n100.r08.s017_output/n100.r08.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s017_output/n100.r08.s017.reference.fas" "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" > "n100.r08.s017_output/n100.r08.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s017_output/n100.r08.s017.reference.fas" --call-indels "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" > "n100.r08.s017_output/n100.r08.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" > "n100.r08.s017_output/n100.r08.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s017_output/n100.r08.s017.depth.txt" "n100.r08.s017_output/n100.r08.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s017_output/n100.r08.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s017_output/n100.r08.s017.reference.fas" | bcftools consensus -m "n100.r08.s017_output/n100.r08.s017.low_depth.tsv" tmp.vcf.gz > "n100.r08.s017_output/n100.r08.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 67ce347f (flow 32d2695b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 67ce347f (flow 32d2695b): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s081.Main.out_file 32d2695b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s081.Main.out_file 32d2695b n100/r08/n100.r08.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f2a0b9c3c9f330cdb186d055e9f3ac7dd8b616c875ac9cd10dfd2d83cb45d9c9
	sha256:32d2695b97b5d5017bff8b58bc1693c1bbd626eea6b9f33ff96d47fa728f3a3a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67ce347f9a08defa66e63980a8ab4b1f00f49c00a102c7f2fb9edcd346582cdf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s081_output"
	    wget -O "n100.r08.s081_output/n100.r08.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s081_output/n100.r08.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s081_output/n100.r08.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s081_output/n100.r08.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s081_output/n100.r08.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s081_output/n100.r08.s081.reference.fas" "n100.r08.s081_output/n100.r08.s081.fq1.fastq" "n100.r08.s081_output/n100.r08.s081.fq2.fastq" | samtools view -bS - > "n100.r08.s081_output/n100.r08.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s081_output/n100.r08.s081.untrimmed.sorted.bam" "n100.r08.s081_output/n100.r08.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s081_output/n100.r08.s081.untrimmed.sorted.bam" -b "n100.r08.s081_output/n100.r08.s081.primers.bed" -p "n100.r08.s081_output/n100.r08.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" "n100.r08.s081_output/n100.r08.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s081_output/n100.r08.s081.reference.fas" "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" > "n100.r08.s081_output/n100.r08.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s081_output/n100.r08.s081.reference.fas" --call-indels "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" > "n100.r08.s081_output/n100.r08.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" > "n100.r08.s081_output/n100.r08.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s081_output/n100.r08.s081.depth.txt" "n100.r08.s081_output/n100.r08.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s081_output/n100.r08.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s081_output/n100.r08.s081.reference.fas" | bcftools consensus -m "n100.r08.s081_output/n100.r08.s081.low_depth.tsv" tmp.vcf.gz > "n100.r08.s081_output/n100.r08.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:57 scheduler task 4e98971e (flow f26e5aef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:57 scheduler task 4e98971e (flow f26e5aef): waiting for completion (try 0): started
2021/07/08 17:21:57  ->  n100.r08.s088.Main.out_file f26e5aef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:57 n100.r08.s088.Main.out_file f26e5aef n100/r08/n100.r08.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e5c557ec298914f3b5fca7c79a0605478dbc349d90e3c9cd5c609d914494ed84
	sha256:f26e5aef3d498a72104a2e2fa181693d40ddc3652c24556c52377fb1845d5e43
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e98971e8296eb5589d899d1b8366c57c752f427015ad508d76404453f5cf94a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s088_output"
	    wget -O "n100.r08.s088_output/n100.r08.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s088_output/n100.r08.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s088_output/n100.r08.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s088_output/n100.r08.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s088_output/n100.r08.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s088_output/n100.r08.s088.reference.fas" "n100.r08.s088_output/n100.r08.s088.fq1.fastq" "n100.r08.s088_output/n100.r08.s088.fq2.fastq" | samtools view -bS - > "n100.r08.s088_output/n100.r08.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s088_output/n100.r08.s088.untrimmed.sorted.bam" "n100.r08.s088_output/n100.r08.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s088_output/n100.r08.s088.untrimmed.sorted.bam" -b "n100.r08.s088_output/n100.r08.s088.primers.bed" -p "n100.r08.s088_output/n100.r08.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" "n100.r08.s088_output/n100.r08.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s088_output/n100.r08.s088.reference.fas" "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" > "n100.r08.s088_output/n100.r08.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s088_output/n100.r08.s088.reference.fas" --call-indels "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" > "n100.r08.s088_output/n100.r08.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" > "n100.r08.s088_output/n100.r08.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s088_output/n100.r08.s088.depth.txt" "n100.r08.s088_output/n100.r08.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s088_output/n100.r08.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s088_output/n100.r08.s088.reference.fas" | bcftools consensus -m "n100.r08.s088_output/n100.r08.s088.low_depth.tsv" tmp.vcf.gz > "n100.r08.s088_output/n100.r08.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:58 scheduler task 7e57f1b6 (flow 8e45de36): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:58 scheduler task 7e57f1b6 (flow 8e45de36): waiting for completion (try 0): started
2021/07/08 17:21:58  ->  n100.r08.s026.Main.out_file 8e45de36 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:58 n100.r08.s026.Main.out_file 8e45de36 n100/r08/n100.r08.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:be6bb4db30971cdf5b78598a0589c76c4523eef0a7a8a13c0c4b894c7226b68e
	sha256:8e45de36719300572aa1abc73de53cb00175140fb16aab1c73238b60f372a9aa
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7e57f1b6eb1099894a15cf2302cf370f39c0756982e7b8dfe255a91e5607d253
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s026_output"
	    wget -O "n100.r08.s026_output/n100.r08.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s026_output/n100.r08.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s026_output/n100.r08.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s026_output/n100.r08.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s026_output/n100.r08.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s026_output/n100.r08.s026.reference.fas" "n100.r08.s026_output/n100.r08.s026.fq1.fastq" "n100.r08.s026_output/n100.r08.s026.fq2.fastq" | samtools view -bS - > "n100.r08.s026_output/n100.r08.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s026_output/n100.r08.s026.untrimmed.sorted.bam" "n100.r08.s026_output/n100.r08.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s026_output/n100.r08.s026.untrimmed.sorted.bam" -b "n100.r08.s026_output/n100.r08.s026.primers.bed" -p "n100.r08.s026_output/n100.r08.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" "n100.r08.s026_output/n100.r08.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s026_output/n100.r08.s026.reference.fas" "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" > "n100.r08.s026_output/n100.r08.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s026_output/n100.r08.s026.reference.fas" --call-indels "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" > "n100.r08.s026_output/n100.r08.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" > "n100.r08.s026_output/n100.r08.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s026_output/n100.r08.s026.depth.txt" "n100.r08.s026_output/n100.r08.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s026_output/n100.r08.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s026_output/n100.r08.s026.reference.fas" | bcftools consensus -m "n100.r08.s026_output/n100.r08.s026.low_depth.tsv" tmp.vcf.gz > "n100.r08.s026_output/n100.r08.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:58 scheduler task a660f2ec (flow abfbfcf5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:58 scheduler task a660f2ec (flow abfbfcf5): waiting for completion (try 0): started
2021/07/08 17:21:58  ->  n100.r08.s003.Main.out_file abfbfcf5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:58 n100.r08.s003.Main.out_file abfbfcf5 n100/r08/n100.r08.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:abed775d4a80959d684930d407c68897ab1047f71eddea192484fdb7d3018edc
	sha256:abfbfcf5f0ef386445e969ad87af5a3765a7488317c1ea027207f6316787ec59
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a660f2ec42102d426bd88abb3f8bf05a16c25801cd36fc607fd8ceb3c667d24d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s003_output"
	    wget -O "n100.r08.s003_output/n100.r08.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s003_output/n100.r08.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s003_output/n100.r08.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s003_output/n100.r08.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s003_output/n100.r08.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s003_output/n100.r08.s003.reference.fas" "n100.r08.s003_output/n100.r08.s003.fq1.fastq" "n100.r08.s003_output/n100.r08.s003.fq2.fastq" | samtools view -bS - > "n100.r08.s003_output/n100.r08.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s003_output/n100.r08.s003.untrimmed.sorted.bam" "n100.r08.s003_output/n100.r08.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s003_output/n100.r08.s003.untrimmed.sorted.bam" -b "n100.r08.s003_output/n100.r08.s003.primers.bed" -p "n100.r08.s003_output/n100.r08.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" "n100.r08.s003_output/n100.r08.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s003_output/n100.r08.s003.reference.fas" "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" > "n100.r08.s003_output/n100.r08.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s003_output/n100.r08.s003.reference.fas" --call-indels "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" > "n100.r08.s003_output/n100.r08.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" > "n100.r08.s003_output/n100.r08.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s003_output/n100.r08.s003.depth.txt" "n100.r08.s003_output/n100.r08.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s003_output/n100.r08.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s003_output/n100.r08.s003.reference.fas" | bcftools consensus -m "n100.r08.s003_output/n100.r08.s003.low_depth.tsv" tmp.vcf.gz > "n100.r08.s003_output/n100.r08.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:58 scheduler task 0daa8d96 (flow 6a75b3c2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:58 scheduler task 0daa8d96 (flow 6a75b3c2): waiting for completion (try 0): started
2021/07/08 17:21:58  ->  n100.r08.s041.Main.out_file 6a75b3c2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:58 n100.r08.s041.Main.out_file 6a75b3c2 n100/r08/n100.r08.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2a2606ae0d2a66c999f37603593c15392f366c6ee0af855e6396fc44779bb0b9
	sha256:6a75b3c296e68d52fa4944a99a98bae23a85539f634513d646bb83719651da50
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0daa8d9667e8d8ca2ad74aebce0de6c9e6fbe1cd7c37f9b0e27c678afa29260f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s041_output"
	    wget -O "n100.r08.s041_output/n100.r08.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s041_output/n100.r08.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s041_output/n100.r08.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s041_output/n100.r08.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s041_output/n100.r08.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s041_output/n100.r08.s041.reference.fas" "n100.r08.s041_output/n100.r08.s041.fq1.fastq" "n100.r08.s041_output/n100.r08.s041.fq2.fastq" | samtools view -bS - > "n100.r08.s041_output/n100.r08.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s041_output/n100.r08.s041.untrimmed.sorted.bam" "n100.r08.s041_output/n100.r08.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s041_output/n100.r08.s041.untrimmed.sorted.bam" -b "n100.r08.s041_output/n100.r08.s041.primers.bed" -p "n100.r08.s041_output/n100.r08.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" "n100.r08.s041_output/n100.r08.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s041_output/n100.r08.s041.reference.fas" "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" > "n100.r08.s041_output/n100.r08.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s041_output/n100.r08.s041.reference.fas" --call-indels "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" > "n100.r08.s041_output/n100.r08.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" > "n100.r08.s041_output/n100.r08.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s041_output/n100.r08.s041.depth.txt" "n100.r08.s041_output/n100.r08.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s041_output/n100.r08.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s041_output/n100.r08.s041.reference.fas" | bcftools consensus -m "n100.r08.s041_output/n100.r08.s041.low_depth.tsv" tmp.vcf.gz > "n100.r08.s041_output/n100.r08.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:58 scheduler task 8d3ebe19 (flow 31c07028): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:58 scheduler task 8d3ebe19 (flow 31c07028): waiting for completion (try 0): started
2021/07/08 17:21:58  ->  n100.r08.s043.Main.out_file 31c07028 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:58 n100.r08.s043.Main.out_file 31c07028 n100/r08/n100.r08.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f094f4bcd32395e621936ca4fab0e8fe0233d7a3ae45461c7ad8f1e4c6c0309a
	sha256:31c07028591a37d7afbcf973c80162f1664a125ee55dcc056fd7dca0e31ed12c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8d3ebe19e70eab7b15b4a1fb7d596f74f7a3d73828c80d8525efe7690da9c26f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s043_output"
	    wget -O "n100.r08.s043_output/n100.r08.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s043_output/n100.r08.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s043_output/n100.r08.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s043_output/n100.r08.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s043_output/n100.r08.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s043_output/n100.r08.s043.reference.fas" "n100.r08.s043_output/n100.r08.s043.fq1.fastq" "n100.r08.s043_output/n100.r08.s043.fq2.fastq" | samtools view -bS - > "n100.r08.s043_output/n100.r08.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s043_output/n100.r08.s043.untrimmed.sorted.bam" "n100.r08.s043_output/n100.r08.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s043_output/n100.r08.s043.untrimmed.sorted.bam" -b "n100.r08.s043_output/n100.r08.s043.primers.bed" -p "n100.r08.s043_output/n100.r08.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" "n100.r08.s043_output/n100.r08.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s043_output/n100.r08.s043.reference.fas" "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" > "n100.r08.s043_output/n100.r08.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s043_output/n100.r08.s043.reference.fas" --call-indels "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" > "n100.r08.s043_output/n100.r08.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" > "n100.r08.s043_output/n100.r08.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s043_output/n100.r08.s043.depth.txt" "n100.r08.s043_output/n100.r08.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s043_output/n100.r08.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s043_output/n100.r08.s043.reference.fas" | bcftools consensus -m "n100.r08.s043_output/n100.r08.s043.low_depth.tsv" tmp.vcf.gz > "n100.r08.s043_output/n100.r08.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:58 scheduler task acb01e0b (flow b6de7c5d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:58 scheduler task acb01e0b (flow b6de7c5d): waiting for completion (try 0): started
2021/07/08 17:21:58  ->  n100.r08.s058.Main.out_file b6de7c5d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:58 n100.r08.s058.Main.out_file b6de7c5d n100/r08/n100.r08.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:abf20422be7eedc59036e25173e47030457253b1ebeb89a24352af2582225e02
	sha256:b6de7c5d16e4795577b3e9c138474fefcf9e36701f19abf6e7f0404bf0500fd2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/acb01e0bc3fc3628d8e9fb75cad8f93c6e1dd51196928dc6949c59cdb66eaf8a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s058_output"
	    wget -O "n100.r08.s058_output/n100.r08.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s058_output/n100.r08.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s058_output/n100.r08.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s058_output/n100.r08.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s058_output/n100.r08.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s058_output/n100.r08.s058.reference.fas" "n100.r08.s058_output/n100.r08.s058.fq1.fastq" "n100.r08.s058_output/n100.r08.s058.fq2.fastq" | samtools view -bS - > "n100.r08.s058_output/n100.r08.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s058_output/n100.r08.s058.untrimmed.sorted.bam" "n100.r08.s058_output/n100.r08.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s058_output/n100.r08.s058.untrimmed.sorted.bam" -b "n100.r08.s058_output/n100.r08.s058.primers.bed" -p "n100.r08.s058_output/n100.r08.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" "n100.r08.s058_output/n100.r08.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s058_output/n100.r08.s058.reference.fas" "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" > "n100.r08.s058_output/n100.r08.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s058_output/n100.r08.s058.reference.fas" --call-indels "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" > "n100.r08.s058_output/n100.r08.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" > "n100.r08.s058_output/n100.r08.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s058_output/n100.r08.s058.depth.txt" "n100.r08.s058_output/n100.r08.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s058_output/n100.r08.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s058_output/n100.r08.s058.reference.fas" | bcftools consensus -m "n100.r08.s058_output/n100.r08.s058.low_depth.tsv" tmp.vcf.gz > "n100.r08.s058_output/n100.r08.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task 1e17310e (flow 4be7c800): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task 1e17310e (flow 4be7c800): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s015.Main.out_file 4be7c800 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s015.Main.out_file 4be7c800 n100/r08/n100.r08.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8ec17b9b72554dc0da886ad6f38ba75cb117c1a33b1513b0c8507fe2fb97d792
	sha256:4be7c800f9879a9a7433756c4617ec4858b055b59ceee495c37a1ecb892a58aa
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e17310e75049149d1275925e75bb845fb9713a9f99c7f56bfdd179c1c8e9b12
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s015_output"
	    wget -O "n100.r08.s015_output/n100.r08.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s015_output/n100.r08.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s015_output/n100.r08.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s015_output/n100.r08.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s015_output/n100.r08.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s015_output/n100.r08.s015.reference.fas" "n100.r08.s015_output/n100.r08.s015.fq1.fastq" "n100.r08.s015_output/n100.r08.s015.fq2.fastq" | samtools view -bS - > "n100.r08.s015_output/n100.r08.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s015_output/n100.r08.s015.untrimmed.sorted.bam" "n100.r08.s015_output/n100.r08.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s015_output/n100.r08.s015.untrimmed.sorted.bam" -b "n100.r08.s015_output/n100.r08.s015.primers.bed" -p "n100.r08.s015_output/n100.r08.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" "n100.r08.s015_output/n100.r08.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s015_output/n100.r08.s015.reference.fas" "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" > "n100.r08.s015_output/n100.r08.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s015_output/n100.r08.s015.reference.fas" --call-indels "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" > "n100.r08.s015_output/n100.r08.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" > "n100.r08.s015_output/n100.r08.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s015_output/n100.r08.s015.depth.txt" "n100.r08.s015_output/n100.r08.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s015_output/n100.r08.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s015_output/n100.r08.s015.reference.fas" | bcftools consensus -m "n100.r08.s015_output/n100.r08.s015.low_depth.tsv" tmp.vcf.gz > "n100.r08.s015_output/n100.r08.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task 27109b10 (flow 11e863f7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task 27109b10 (flow 11e863f7): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s005.Main.out_file 11e863f7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s005.Main.out_file 11e863f7 n100/r08/n100.r08.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:58b19a706c042799cb74094d29589d75b49e6daed3ac7148bfe8f29145a0b4ec
	sha256:11e863f705e76c3c4ec1ff216195c5c128c2614f901d82a3857b2a904bf82289
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27109b10b4cc93ca33cd9cb8f9df09f278f55bd8d74555c7e2942d4b272968d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s005_output"
	    wget -O "n100.r08.s005_output/n100.r08.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s005_output/n100.r08.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s005_output/n100.r08.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s005_output/n100.r08.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s005_output/n100.r08.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s005_output/n100.r08.s005.reference.fas" "n100.r08.s005_output/n100.r08.s005.fq1.fastq" "n100.r08.s005_output/n100.r08.s005.fq2.fastq" | samtools view -bS - > "n100.r08.s005_output/n100.r08.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s005_output/n100.r08.s005.untrimmed.sorted.bam" "n100.r08.s005_output/n100.r08.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s005_output/n100.r08.s005.untrimmed.sorted.bam" -b "n100.r08.s005_output/n100.r08.s005.primers.bed" -p "n100.r08.s005_output/n100.r08.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" "n100.r08.s005_output/n100.r08.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s005_output/n100.r08.s005.reference.fas" "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" > "n100.r08.s005_output/n100.r08.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s005_output/n100.r08.s005.reference.fas" --call-indels "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" > "n100.r08.s005_output/n100.r08.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" > "n100.r08.s005_output/n100.r08.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s005_output/n100.r08.s005.depth.txt" "n100.r08.s005_output/n100.r08.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s005_output/n100.r08.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s005_output/n100.r08.s005.reference.fas" | bcftools consensus -m "n100.r08.s005_output/n100.r08.s005.low_depth.tsv" tmp.vcf.gz > "n100.r08.s005_output/n100.r08.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task e73506b2 (flow 6e531834): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task e73506b2 (flow 6e531834): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s051.Main.out_file 6e531834 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s051.Main.out_file 6e531834 n100/r08/n100.r08.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebe7937df90c33f5e726e9a9f84f3be305b8736a7230f906bd0e41a47265ebb4
	sha256:6e531834be0b3f0c2b773ec8bce0ef5a6265589d3faa766e38ef5dca5c34d526
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e73506b2205f6b1fb48451fcb8f58610453817c8195b8de905ba430d8dab740d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s051_output"
	    wget -O "n100.r08.s051_output/n100.r08.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s051_output/n100.r08.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s051_output/n100.r08.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s051_output/n100.r08.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s051_output/n100.r08.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s051_output/n100.r08.s051.reference.fas" "n100.r08.s051_output/n100.r08.s051.fq1.fastq" "n100.r08.s051_output/n100.r08.s051.fq2.fastq" | samtools view -bS - > "n100.r08.s051_output/n100.r08.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s051_output/n100.r08.s051.untrimmed.sorted.bam" "n100.r08.s051_output/n100.r08.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s051_output/n100.r08.s051.untrimmed.sorted.bam" -b "n100.r08.s051_output/n100.r08.s051.primers.bed" -p "n100.r08.s051_output/n100.r08.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" "n100.r08.s051_output/n100.r08.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s051_output/n100.r08.s051.reference.fas" "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" > "n100.r08.s051_output/n100.r08.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s051_output/n100.r08.s051.reference.fas" --call-indels "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" > "n100.r08.s051_output/n100.r08.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" > "n100.r08.s051_output/n100.r08.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s051_output/n100.r08.s051.depth.txt" "n100.r08.s051_output/n100.r08.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s051_output/n100.r08.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s051_output/n100.r08.s051.reference.fas" | bcftools consensus -m "n100.r08.s051_output/n100.r08.s051.low_depth.tsv" tmp.vcf.gz > "n100.r08.s051_output/n100.r08.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task c4ff5c5f (flow 14e5610e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task c4ff5c5f (flow 14e5610e): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s098.Main.out_file 14e5610e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s098.Main.out_file 14e5610e n100/r08/n100.r08.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:984aa8043289cfd0ddeb9a5f928cc11b2266fb7b23a4c20c2bff9ad231b35139
	sha256:14e5610e86e85d65f5f1ccc589c5ed7195d2e3fbfa18150e5d482f6286bf76d4
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c4ff5c5f1dc6ca1eaf3d0419966118ecabac74f322d3888bcfa86a15665c431d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s098_output"
	    wget -O "n100.r08.s098_output/n100.r08.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s098_output/n100.r08.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s098_output/n100.r08.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s098_output/n100.r08.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s098_output/n100.r08.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s098_output/n100.r08.s098.reference.fas" "n100.r08.s098_output/n100.r08.s098.fq1.fastq" "n100.r08.s098_output/n100.r08.s098.fq2.fastq" | samtools view -bS - > "n100.r08.s098_output/n100.r08.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s098_output/n100.r08.s098.untrimmed.sorted.bam" "n100.r08.s098_output/n100.r08.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s098_output/n100.r08.s098.untrimmed.sorted.bam" -b "n100.r08.s098_output/n100.r08.s098.primers.bed" -p "n100.r08.s098_output/n100.r08.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" "n100.r08.s098_output/n100.r08.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s098_output/n100.r08.s098.reference.fas" "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" > "n100.r08.s098_output/n100.r08.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s098_output/n100.r08.s098.reference.fas" --call-indels "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" > "n100.r08.s098_output/n100.r08.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" > "n100.r08.s098_output/n100.r08.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s098_output/n100.r08.s098.depth.txt" "n100.r08.s098_output/n100.r08.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s098_output/n100.r08.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s098_output/n100.r08.s098.reference.fas" | bcftools consensus -m "n100.r08.s098_output/n100.r08.s098.low_depth.tsv" tmp.vcf.gz > "n100.r08.s098_output/n100.r08.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task 96cdb789 (flow 37acff54): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task 96cdb789 (flow 37acff54): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s087.Main.out_file 37acff54 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s087.Main.out_file 37acff54 n100/r08/n100.r08.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f46d05aa14a63b4c36ee78496f965aead876d498962a607da934feeea17f228
	sha256:37acff54faf58f05bbb8e6d531c1a1016726c067b16a4b76f95e2ba64ef314e2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/96cdb789a1c14b30fe26336a98c003ffbbc1655471955a00a0467651d6ea4a75
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s087_output"
	    wget -O "n100.r08.s087_output/n100.r08.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s087_output/n100.r08.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s087_output/n100.r08.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s087_output/n100.r08.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s087_output/n100.r08.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s087_output/n100.r08.s087.reference.fas" "n100.r08.s087_output/n100.r08.s087.fq1.fastq" "n100.r08.s087_output/n100.r08.s087.fq2.fastq" | samtools view -bS - > "n100.r08.s087_output/n100.r08.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s087_output/n100.r08.s087.untrimmed.sorted.bam" "n100.r08.s087_output/n100.r08.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s087_output/n100.r08.s087.untrimmed.sorted.bam" -b "n100.r08.s087_output/n100.r08.s087.primers.bed" -p "n100.r08.s087_output/n100.r08.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" "n100.r08.s087_output/n100.r08.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s087_output/n100.r08.s087.reference.fas" "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" > "n100.r08.s087_output/n100.r08.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s087_output/n100.r08.s087.reference.fas" --call-indels "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" > "n100.r08.s087_output/n100.r08.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" > "n100.r08.s087_output/n100.r08.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s087_output/n100.r08.s087.depth.txt" "n100.r08.s087_output/n100.r08.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s087_output/n100.r08.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s087_output/n100.r08.s087.reference.fas" | bcftools consensus -m "n100.r08.s087_output/n100.r08.s087.low_depth.tsv" tmp.vcf.gz > "n100.r08.s087_output/n100.r08.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task 3579f14e (flow ec208550): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task 3579f14e (flow ec208550): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s059.Main.out_file ec208550 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s059.Main.out_file ec208550 n100/r08/n100.r08.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:314bed296a9ca5664687c3ac45cd35bb4418de624ccab5b065f43aa52f5327cb
	sha256:ec208550a3b8a6a95954e2bda0f28abdb765924ee4394bdee41ef7c14961d825
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3579f14ef1dddd9d66291b4dd28a36dd11162b0e39e493c75141b5dbf730439e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s059_output"
	    wget -O "n100.r08.s059_output/n100.r08.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s059_output/n100.r08.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s059_output/n100.r08.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s059_output/n100.r08.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s059_output/n100.r08.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s059_output/n100.r08.s059.reference.fas" "n100.r08.s059_output/n100.r08.s059.fq1.fastq" "n100.r08.s059_output/n100.r08.s059.fq2.fastq" | samtools view -bS - > "n100.r08.s059_output/n100.r08.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s059_output/n100.r08.s059.untrimmed.sorted.bam" "n100.r08.s059_output/n100.r08.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s059_output/n100.r08.s059.untrimmed.sorted.bam" -b "n100.r08.s059_output/n100.r08.s059.primers.bed" -p "n100.r08.s059_output/n100.r08.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" "n100.r08.s059_output/n100.r08.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s059_output/n100.r08.s059.reference.fas" "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" > "n100.r08.s059_output/n100.r08.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s059_output/n100.r08.s059.reference.fas" --call-indels "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" > "n100.r08.s059_output/n100.r08.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" > "n100.r08.s059_output/n100.r08.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s059_output/n100.r08.s059.depth.txt" "n100.r08.s059_output/n100.r08.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s059_output/n100.r08.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s059_output/n100.r08.s059.reference.fas" | bcftools consensus -m "n100.r08.s059_output/n100.r08.s059.low_depth.tsv" tmp.vcf.gz > "n100.r08.s059_output/n100.r08.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:21:59 scheduler task 7c80984b (flow f133966a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:21:59 scheduler task 7c80984b (flow f133966a): waiting for completion (try 0): started
2021/07/08 17:21:59  ->  n100.r08.s028.Main.out_file f133966a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:21:59 n100.r08.s028.Main.out_file f133966a n100/r08/n100.r08.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4e178b2b94c4e34a08190e0e818e13d5723115ebfdc32f3e20d71832290557f
	sha256:f133966abd93e4ee78e096f0f9f34fdd9b9a001a8125c2bb3c18fb3c0d171876
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7c80984b2723dea829e0c02e719978e15e8849e15e7299b538ab7071b7d5829e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s028_output"
	    wget -O "n100.r08.s028_output/n100.r08.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s028_output/n100.r08.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s028_output/n100.r08.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s028_output/n100.r08.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s028_output/n100.r08.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s028_output/n100.r08.s028.reference.fas" "n100.r08.s028_output/n100.r08.s028.fq1.fastq" "n100.r08.s028_output/n100.r08.s028.fq2.fastq" | samtools view -bS - > "n100.r08.s028_output/n100.r08.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s028_output/n100.r08.s028.untrimmed.sorted.bam" "n100.r08.s028_output/n100.r08.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s028_output/n100.r08.s028.untrimmed.sorted.bam" -b "n100.r08.s028_output/n100.r08.s028.primers.bed" -p "n100.r08.s028_output/n100.r08.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" "n100.r08.s028_output/n100.r08.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s028_output/n100.r08.s028.reference.fas" "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" > "n100.r08.s028_output/n100.r08.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s028_output/n100.r08.s028.reference.fas" --call-indels "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" > "n100.r08.s028_output/n100.r08.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" > "n100.r08.s028_output/n100.r08.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s028_output/n100.r08.s028.depth.txt" "n100.r08.s028_output/n100.r08.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s028_output/n100.r08.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s028_output/n100.r08.s028.reference.fas" | bcftools consensus -m "n100.r08.s028_output/n100.r08.s028.low_depth.tsv" tmp.vcf.gz > "n100.r08.s028_output/n100.r08.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:00 scheduler task c04eb0c7 (flow 37139f88): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:00 scheduler task e266f779 (flow 89895078): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:00 scheduler task c04eb0c7 (flow 37139f88): waiting for completion (try 0): started
2021/07/08 17:22:00  ->  n100.r08.s052.Main.out_file 37139f88 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:00 n100.r08.s052.Main.out_file 37139f88 n100/r08/n100.r08.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07c4a7f5658b4a15481dc76d293a6859444848e0aaa32adee680cf6bab929824
	sha256:37139f886b25d0be584a8baa6e29bfcbe7ae940ed50a15d5c778a4e9cd395457
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c04eb0c7f9c3b7237141ae5c1d60f6970d834cfce0ef6369184d8e743d5ec4d1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s052_output"
	    wget -O "n100.r08.s052_output/n100.r08.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s052_output/n100.r08.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s052_output/n100.r08.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s052_output/n100.r08.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s052_output/n100.r08.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s052_output/n100.r08.s052.reference.fas" "n100.r08.s052_output/n100.r08.s052.fq1.fastq" "n100.r08.s052_output/n100.r08.s052.fq2.fastq" | samtools view -bS - > "n100.r08.s052_output/n100.r08.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s052_output/n100.r08.s052.untrimmed.sorted.bam" "n100.r08.s052_output/n100.r08.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s052_output/n100.r08.s052.untrimmed.sorted.bam" -b "n100.r08.s052_output/n100.r08.s052.primers.bed" -p "n100.r08.s052_output/n100.r08.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" "n100.r08.s052_output/n100.r08.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s052_output/n100.r08.s052.reference.fas" "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" > "n100.r08.s052_output/n100.r08.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s052_output/n100.r08.s052.reference.fas" --call-indels "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" > "n100.r08.s052_output/n100.r08.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" > "n100.r08.s052_output/n100.r08.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s052_output/n100.r08.s052.depth.txt" "n100.r08.s052_output/n100.r08.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s052_output/n100.r08.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s052_output/n100.r08.s052.reference.fas" | bcftools consensus -m "n100.r08.s052_output/n100.r08.s052.low_depth.tsv" tmp.vcf.gz > "n100.r08.s052_output/n100.r08.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:00 scheduler task e266f779 (flow 89895078): waiting for completion (try 0): started
2021/07/08 17:22:00  ->  n100.r08.s066.Main.out_file 89895078 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:00 n100.r08.s066.Main.out_file 89895078 n100/r08/n100.r08.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d49adf60e5ddff932714c5f14da3b8d2afd4472e2e844afc27ca2e7e3883535b
	sha256:89895078e584ff8b65518ecc70c7f43dbf7752cfa5daf4826e33dd11297c2c93
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e266f7796f48a09cf754d29d77fc979a7e8e610dea11b4ea50f9e3c8105c7bc7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s066_output"
	    wget -O "n100.r08.s066_output/n100.r08.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s066_output/n100.r08.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s066_output/n100.r08.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s066_output/n100.r08.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s066_output/n100.r08.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s066_output/n100.r08.s066.reference.fas" "n100.r08.s066_output/n100.r08.s066.fq1.fastq" "n100.r08.s066_output/n100.r08.s066.fq2.fastq" | samtools view -bS - > "n100.r08.s066_output/n100.r08.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s066_output/n100.r08.s066.untrimmed.sorted.bam" "n100.r08.s066_output/n100.r08.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s066_output/n100.r08.s066.untrimmed.sorted.bam" -b "n100.r08.s066_output/n100.r08.s066.primers.bed" -p "n100.r08.s066_output/n100.r08.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" "n100.r08.s066_output/n100.r08.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s066_output/n100.r08.s066.reference.fas" "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" > "n100.r08.s066_output/n100.r08.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s066_output/n100.r08.s066.reference.fas" --call-indels "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" > "n100.r08.s066_output/n100.r08.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" > "n100.r08.s066_output/n100.r08.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s066_output/n100.r08.s066.depth.txt" "n100.r08.s066_output/n100.r08.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s066_output/n100.r08.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s066_output/n100.r08.s066.reference.fas" | bcftools consensus -m "n100.r08.s066_output/n100.r08.s066.low_depth.tsv" tmp.vcf.gz > "n100.r08.s066_output/n100.r08.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:00 scheduler task 9ae8bc0a (flow b42d9724): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:00 scheduler task 9ae8bc0a (flow b42d9724): waiting for completion (try 0): started
2021/07/08 17:22:00  ->  n100.r08.s042.Main.out_file b42d9724 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:00 n100.r08.s042.Main.out_file b42d9724 n100/r08/n100.r08.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad963e168f362750128bbb7fceb2e89caacb3eec5f92903da0ce6177cefc6652
	sha256:b42d972410bcc5e5576df2a8c3595b49a718ea125c2fad988f9741b6da5a2fb9
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9ae8bc0a4bf1bb5d54523b153539ad351d506e3e9d2500031cc34a47128d84cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s042_output"
	    wget -O "n100.r08.s042_output/n100.r08.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s042_output/n100.r08.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s042_output/n100.r08.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s042_output/n100.r08.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s042_output/n100.r08.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s042_output/n100.r08.s042.reference.fas" "n100.r08.s042_output/n100.r08.s042.fq1.fastq" "n100.r08.s042_output/n100.r08.s042.fq2.fastq" | samtools view -bS - > "n100.r08.s042_output/n100.r08.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s042_output/n100.r08.s042.untrimmed.sorted.bam" "n100.r08.s042_output/n100.r08.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s042_output/n100.r08.s042.untrimmed.sorted.bam" -b "n100.r08.s042_output/n100.r08.s042.primers.bed" -p "n100.r08.s042_output/n100.r08.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" "n100.r08.s042_output/n100.r08.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s042_output/n100.r08.s042.reference.fas" "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" > "n100.r08.s042_output/n100.r08.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s042_output/n100.r08.s042.reference.fas" --call-indels "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" > "n100.r08.s042_output/n100.r08.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" > "n100.r08.s042_output/n100.r08.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s042_output/n100.r08.s042.depth.txt" "n100.r08.s042_output/n100.r08.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s042_output/n100.r08.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s042_output/n100.r08.s042.reference.fas" | bcftools consensus -m "n100.r08.s042_output/n100.r08.s042.low_depth.tsv" tmp.vcf.gz > "n100.r08.s042_output/n100.r08.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:00 scheduler task 4990178e (flow eda0dc49): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:00 scheduler task 4990178e (flow eda0dc49): waiting for completion (try 0): started
2021/07/08 17:22:00  ->  n100.r08.s031.Main.out_file eda0dc49 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:00 n100.r08.s031.Main.out_file eda0dc49 n100/r08/n100.r08.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1543c3118f993f7283b74a9b9eb9d688f9b782c229b0dbf7d0a6df747038bcc3
	sha256:eda0dc492a69af6f16705efc2658308547c1dd7db8335286f983862728a9b6ce
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4990178e9f397070dfde4a9cd0b9dc34a414968b025513bb74132fb05f3b1284
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s031_output"
	    wget -O "n100.r08.s031_output/n100.r08.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s031_output/n100.r08.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s031_output/n100.r08.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s031_output/n100.r08.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s031_output/n100.r08.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s031_output/n100.r08.s031.reference.fas" "n100.r08.s031_output/n100.r08.s031.fq1.fastq" "n100.r08.s031_output/n100.r08.s031.fq2.fastq" | samtools view -bS - > "n100.r08.s031_output/n100.r08.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s031_output/n100.r08.s031.untrimmed.sorted.bam" "n100.r08.s031_output/n100.r08.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s031_output/n100.r08.s031.untrimmed.sorted.bam" -b "n100.r08.s031_output/n100.r08.s031.primers.bed" -p "n100.r08.s031_output/n100.r08.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" "n100.r08.s031_output/n100.r08.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s031_output/n100.r08.s031.reference.fas" "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" > "n100.r08.s031_output/n100.r08.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s031_output/n100.r08.s031.reference.fas" --call-indels "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" > "n100.r08.s031_output/n100.r08.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" > "n100.r08.s031_output/n100.r08.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s031_output/n100.r08.s031.depth.txt" "n100.r08.s031_output/n100.r08.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s031_output/n100.r08.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s031_output/n100.r08.s031.reference.fas" | bcftools consensus -m "n100.r08.s031_output/n100.r08.s031.low_depth.tsv" tmp.vcf.gz > "n100.r08.s031_output/n100.r08.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:00 scheduler task d1b0c57e (flow 769f8790): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:00 scheduler task d1b0c57e (flow 769f8790): waiting for completion (try 0): started
2021/07/08 17:22:00  ->  n100.r08.s013.Main.out_file 769f8790 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:00 n100.r08.s013.Main.out_file 769f8790 n100/r08/n100.r08.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca0100a82576b7abbe89330e6f38bc20c3357bc303a6e4bd40a5ebea5fe34388
	sha256:769f87902af990c9146d0f96548faa5ecc3a0c80c357226ff2f5f78a2ee8fe9d
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d1b0c57e7a546ab72adcb6e270b035bc610f4082fdce12fa8d3622f42277cbe4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s013_output"
	    wget -O "n100.r08.s013_output/n100.r08.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s013_output/n100.r08.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s013_output/n100.r08.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s013_output/n100.r08.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s013_output/n100.r08.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s013_output/n100.r08.s013.reference.fas" "n100.r08.s013_output/n100.r08.s013.fq1.fastq" "n100.r08.s013_output/n100.r08.s013.fq2.fastq" | samtools view -bS - > "n100.r08.s013_output/n100.r08.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s013_output/n100.r08.s013.untrimmed.sorted.bam" "n100.r08.s013_output/n100.r08.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s013_output/n100.r08.s013.untrimmed.sorted.bam" -b "n100.r08.s013_output/n100.r08.s013.primers.bed" -p "n100.r08.s013_output/n100.r08.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" "n100.r08.s013_output/n100.r08.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s013_output/n100.r08.s013.reference.fas" "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" > "n100.r08.s013_output/n100.r08.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s013_output/n100.r08.s013.reference.fas" --call-indels "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" > "n100.r08.s013_output/n100.r08.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" > "n100.r08.s013_output/n100.r08.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s013_output/n100.r08.s013.depth.txt" "n100.r08.s013_output/n100.r08.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s013_output/n100.r08.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s013_output/n100.r08.s013.reference.fas" | bcftools consensus -m "n100.r08.s013_output/n100.r08.s013.low_depth.tsv" tmp.vcf.gz > "n100.r08.s013_output/n100.r08.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:00 scheduler task 0e91bc71 (flow ac83cb33): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:00 scheduler task 0e91bc71 (flow ac83cb33): waiting for completion (try 0): started
2021/07/08 17:22:00  ->  n100.r08.s065.Main.out_file ac83cb33 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:00 n100.r08.s065.Main.out_file ac83cb33 n100/r08/n100.r08.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b15172ebe2d67d21cdc1a212a90908e2b5958c917c91cdcf10bc1722baea77ea
	sha256:ac83cb33690caa4355c11458e7d9d8bc588c640e92d3909884b481eaebd7cdf2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e91bc7176b4369bb6495f8272f837e3a05063f86b5207df32daaf79354e196b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s065_output"
	    wget -O "n100.r08.s065_output/n100.r08.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s065_output/n100.r08.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s065_output/n100.r08.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s065_output/n100.r08.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s065_output/n100.r08.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s065_output/n100.r08.s065.reference.fas" "n100.r08.s065_output/n100.r08.s065.fq1.fastq" "n100.r08.s065_output/n100.r08.s065.fq2.fastq" | samtools view -bS - > "n100.r08.s065_output/n100.r08.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s065_output/n100.r08.s065.untrimmed.sorted.bam" "n100.r08.s065_output/n100.r08.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s065_output/n100.r08.s065.untrimmed.sorted.bam" -b "n100.r08.s065_output/n100.r08.s065.primers.bed" -p "n100.r08.s065_output/n100.r08.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" "n100.r08.s065_output/n100.r08.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s065_output/n100.r08.s065.reference.fas" "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" > "n100.r08.s065_output/n100.r08.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s065_output/n100.r08.s065.reference.fas" --call-indels "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" > "n100.r08.s065_output/n100.r08.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" > "n100.r08.s065_output/n100.r08.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s065_output/n100.r08.s065.depth.txt" "n100.r08.s065_output/n100.r08.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s065_output/n100.r08.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s065_output/n100.r08.s065.reference.fas" | bcftools consensus -m "n100.r08.s065_output/n100.r08.s065.low_depth.tsv" tmp.vcf.gz > "n100.r08.s065_output/n100.r08.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task e37887ba (flow 3f3f0aa1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task e37887ba (flow 3f3f0aa1): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s071.Main.out_file 3f3f0aa1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s071.Main.out_file 3f3f0aa1 n100/r08/n100.r08.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e6f67086cd49cc123821185466c2c7b6177017e0c9e8341521534ee4d3c33d1c
	sha256:3f3f0aa1ebf068024cf0b432eae8071369caad775097c297dfd40a93db3d0c77
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e37887ba894def252023575de2f197fcf4a3b75b1241d14e0141149af8670586
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s071_output"
	    wget -O "n100.r08.s071_output/n100.r08.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s071_output/n100.r08.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s071_output/n100.r08.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s071_output/n100.r08.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s071_output/n100.r08.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s071_output/n100.r08.s071.reference.fas" "n100.r08.s071_output/n100.r08.s071.fq1.fastq" "n100.r08.s071_output/n100.r08.s071.fq2.fastq" | samtools view -bS - > "n100.r08.s071_output/n100.r08.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s071_output/n100.r08.s071.untrimmed.sorted.bam" "n100.r08.s071_output/n100.r08.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s071_output/n100.r08.s071.untrimmed.sorted.bam" -b "n100.r08.s071_output/n100.r08.s071.primers.bed" -p "n100.r08.s071_output/n100.r08.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" "n100.r08.s071_output/n100.r08.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s071_output/n100.r08.s071.reference.fas" "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" > "n100.r08.s071_output/n100.r08.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s071_output/n100.r08.s071.reference.fas" --call-indels "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" > "n100.r08.s071_output/n100.r08.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" > "n100.r08.s071_output/n100.r08.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s071_output/n100.r08.s071.depth.txt" "n100.r08.s071_output/n100.r08.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s071_output/n100.r08.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s071_output/n100.r08.s071.reference.fas" | bcftools consensus -m "n100.r08.s071_output/n100.r08.s071.low_depth.tsv" tmp.vcf.gz > "n100.r08.s071_output/n100.r08.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task d57d51d4 (flow 714a362d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task d57d51d4 (flow 714a362d): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s038.Main.out_file 714a362d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s038.Main.out_file 714a362d n100/r08/n100.r08.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1ea4cd0a6163b9e1e6d3f140b78f542a67c7a74c19fe350d0053b6e89ff55640
	sha256:714a362d163e52c137a30e9e1f233965a4eb212589671f3b8babcd59cf9f929f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d57d51d421f28e77b5c6ddd8f87a9589beb301212f52c1ef628a7d3c8d580fb0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s038_output"
	    wget -O "n100.r08.s038_output/n100.r08.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s038_output/n100.r08.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s038_output/n100.r08.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s038_output/n100.r08.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s038_output/n100.r08.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s038_output/n100.r08.s038.reference.fas" "n100.r08.s038_output/n100.r08.s038.fq1.fastq" "n100.r08.s038_output/n100.r08.s038.fq2.fastq" | samtools view -bS - > "n100.r08.s038_output/n100.r08.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s038_output/n100.r08.s038.untrimmed.sorted.bam" "n100.r08.s038_output/n100.r08.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s038_output/n100.r08.s038.untrimmed.sorted.bam" -b "n100.r08.s038_output/n100.r08.s038.primers.bed" -p "n100.r08.s038_output/n100.r08.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" "n100.r08.s038_output/n100.r08.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s038_output/n100.r08.s038.reference.fas" "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" > "n100.r08.s038_output/n100.r08.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s038_output/n100.r08.s038.reference.fas" --call-indels "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" > "n100.r08.s038_output/n100.r08.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" > "n100.r08.s038_output/n100.r08.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s038_output/n100.r08.s038.depth.txt" "n100.r08.s038_output/n100.r08.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s038_output/n100.r08.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s038_output/n100.r08.s038.reference.fas" | bcftools consensus -m "n100.r08.s038_output/n100.r08.s038.low_depth.tsv" tmp.vcf.gz > "n100.r08.s038_output/n100.r08.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task 4fc2765c (flow b30b76d2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task 4fc2765c (flow b30b76d2): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s022.Main.out_file b30b76d2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s022.Main.out_file b30b76d2 n100/r08/n100.r08.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c0ce480a285d7d114ebfcf89fb30237777a7ea63d53f1840e190fdf789b8a07
	sha256:b30b76d268944aff56448163d378f25fa4ef193953caad8421b91b123c98b5ff
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4fc2765c93b4d7bcaeb5586473a25f0fff7c718eac5413f46e52a2133fc3cef3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s022_output"
	    wget -O "n100.r08.s022_output/n100.r08.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s022_output/n100.r08.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s022_output/n100.r08.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s022_output/n100.r08.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s022_output/n100.r08.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s022_output/n100.r08.s022.reference.fas" "n100.r08.s022_output/n100.r08.s022.fq1.fastq" "n100.r08.s022_output/n100.r08.s022.fq2.fastq" | samtools view -bS - > "n100.r08.s022_output/n100.r08.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s022_output/n100.r08.s022.untrimmed.sorted.bam" "n100.r08.s022_output/n100.r08.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s022_output/n100.r08.s022.untrimmed.sorted.bam" -b "n100.r08.s022_output/n100.r08.s022.primers.bed" -p "n100.r08.s022_output/n100.r08.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" "n100.r08.s022_output/n100.r08.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s022_output/n100.r08.s022.reference.fas" "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" > "n100.r08.s022_output/n100.r08.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s022_output/n100.r08.s022.reference.fas" --call-indels "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" > "n100.r08.s022_output/n100.r08.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" > "n100.r08.s022_output/n100.r08.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s022_output/n100.r08.s022.depth.txt" "n100.r08.s022_output/n100.r08.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s022_output/n100.r08.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s022_output/n100.r08.s022.reference.fas" | bcftools consensus -m "n100.r08.s022_output/n100.r08.s022.low_depth.tsv" tmp.vcf.gz > "n100.r08.s022_output/n100.r08.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task be960135 (flow 20c58820): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task be960135 (flow 20c58820): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s046.Main.out_file 20c58820 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s046.Main.out_file 20c58820 n100/r08/n100.r08.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b0ec0a537418aaf9ed6014b4eb74b36a9bde1751af24f7a06a0f583d12d393bc
	sha256:20c58820a432cd00deb496e0ec45f083b1d86d08c1d9e25558e544d22146e1be
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/be9601357aa9c43db47462ac4ae52a84d24f5c1079d4340cc869ea537c8d3a11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s046_output"
	    wget -O "n100.r08.s046_output/n100.r08.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s046_output/n100.r08.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s046_output/n100.r08.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s046_output/n100.r08.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s046_output/n100.r08.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s046_output/n100.r08.s046.reference.fas" "n100.r08.s046_output/n100.r08.s046.fq1.fastq" "n100.r08.s046_output/n100.r08.s046.fq2.fastq" | samtools view -bS - > "n100.r08.s046_output/n100.r08.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s046_output/n100.r08.s046.untrimmed.sorted.bam" "n100.r08.s046_output/n100.r08.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s046_output/n100.r08.s046.untrimmed.sorted.bam" -b "n100.r08.s046_output/n100.r08.s046.primers.bed" -p "n100.r08.s046_output/n100.r08.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" "n100.r08.s046_output/n100.r08.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s046_output/n100.r08.s046.reference.fas" "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" > "n100.r08.s046_output/n100.r08.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s046_output/n100.r08.s046.reference.fas" --call-indels "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" > "n100.r08.s046_output/n100.r08.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" > "n100.r08.s046_output/n100.r08.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s046_output/n100.r08.s046.depth.txt" "n100.r08.s046_output/n100.r08.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s046_output/n100.r08.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s046_output/n100.r08.s046.reference.fas" | bcftools consensus -m "n100.r08.s046_output/n100.r08.s046.low_depth.tsv" tmp.vcf.gz > "n100.r08.s046_output/n100.r08.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task 72dc116b (flow 0403b41d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task f10c7dd1 (flow d4a953a5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task 72dc116b (flow 0403b41d): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s019.Main.out_file 0403b41d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s019.Main.out_file 0403b41d n100/r08/n100.r08.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b91b54c5c274b689ac3a54d288343f24e2b42c0d6c04e471d16c869f8b738412
	sha256:0403b41d6e7c59ca389f3c80c7e131d4b19063bde1b71d4624bf121b871e9207
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/72dc116b04334380573eca4fbbb362a26bccf4ad3889ce827356631350c2c175
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s019_output"
	    wget -O "n100.r08.s019_output/n100.r08.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s019_output/n100.r08.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s019_output/n100.r08.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s019_output/n100.r08.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s019_output/n100.r08.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s019_output/n100.r08.s019.reference.fas" "n100.r08.s019_output/n100.r08.s019.fq1.fastq" "n100.r08.s019_output/n100.r08.s019.fq2.fastq" | samtools view -bS - > "n100.r08.s019_output/n100.r08.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s019_output/n100.r08.s019.untrimmed.sorted.bam" "n100.r08.s019_output/n100.r08.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s019_output/n100.r08.s019.untrimmed.sorted.bam" -b "n100.r08.s019_output/n100.r08.s019.primers.bed" -p "n100.r08.s019_output/n100.r08.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" "n100.r08.s019_output/n100.r08.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s019_output/n100.r08.s019.reference.fas" "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" > "n100.r08.s019_output/n100.r08.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s019_output/n100.r08.s019.reference.fas" --call-indels "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" > "n100.r08.s019_output/n100.r08.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" > "n100.r08.s019_output/n100.r08.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s019_output/n100.r08.s019.depth.txt" "n100.r08.s019_output/n100.r08.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s019_output/n100.r08.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s019_output/n100.r08.s019.reference.fas" | bcftools consensus -m "n100.r08.s019_output/n100.r08.s019.low_depth.tsv" tmp.vcf.gz > "n100.r08.s019_output/n100.r08.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task f10c7dd1 (flow d4a953a5): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s078.Main.out_file d4a953a5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s078.Main.out_file d4a953a5 n100/r08/n100.r08.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3b27a4f7605f6ce025f0b4b7ec9b3369e40a23bb2497b01d58042adb9f29f929
	sha256:d4a953a5d5e24456878bd3a80327065cc2c2d426f8dc80ebb75f3142cd881fe2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f10c7dd1ee222393d01c85a0b71ce8a84ad45b4027a8fdf625e4cc20f90f8e60
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s078_output"
	    wget -O "n100.r08.s078_output/n100.r08.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s078_output/n100.r08.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s078_output/n100.r08.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s078_output/n100.r08.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s078_output/n100.r08.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s078_output/n100.r08.s078.reference.fas" "n100.r08.s078_output/n100.r08.s078.fq1.fastq" "n100.r08.s078_output/n100.r08.s078.fq2.fastq" | samtools view -bS - > "n100.r08.s078_output/n100.r08.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s078_output/n100.r08.s078.untrimmed.sorted.bam" "n100.r08.s078_output/n100.r08.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s078_output/n100.r08.s078.untrimmed.sorted.bam" -b "n100.r08.s078_output/n100.r08.s078.primers.bed" -p "n100.r08.s078_output/n100.r08.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" "n100.r08.s078_output/n100.r08.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s078_output/n100.r08.s078.reference.fas" "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" > "n100.r08.s078_output/n100.r08.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s078_output/n100.r08.s078.reference.fas" --call-indels "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" > "n100.r08.s078_output/n100.r08.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" > "n100.r08.s078_output/n100.r08.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s078_output/n100.r08.s078.depth.txt" "n100.r08.s078_output/n100.r08.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s078_output/n100.r08.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s078_output/n100.r08.s078.reference.fas" | bcftools consensus -m "n100.r08.s078_output/n100.r08.s078.low_depth.tsv" tmp.vcf.gz > "n100.r08.s078_output/n100.r08.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:01 scheduler task b3c857b7 (flow 5fa48c75): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:01 scheduler task b3c857b7 (flow 5fa48c75): waiting for completion (try 0): started
2021/07/08 17:22:01  ->  n100.r08.s068.Main.out_file 5fa48c75 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:01 n100.r08.s068.Main.out_file 5fa48c75 n100/r08/n100.r08.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7fefc93fa75dd182187813d78a7d8e977b82a7ddca11b2c5d24c3934ee72732d
	sha256:5fa48c7571ed208d02298655b5191d8f72764822f17587510b626b27db6ad072
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b3c857b78725bad7271aebc8cb8a5e9dfa80c7aad4ffa6c6b1335623d969bdee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s068_output"
	    wget -O "n100.r08.s068_output/n100.r08.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s068_output/n100.r08.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s068_output/n100.r08.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s068_output/n100.r08.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s068_output/n100.r08.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s068_output/n100.r08.s068.reference.fas" "n100.r08.s068_output/n100.r08.s068.fq1.fastq" "n100.r08.s068_output/n100.r08.s068.fq2.fastq" | samtools view -bS - > "n100.r08.s068_output/n100.r08.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s068_output/n100.r08.s068.untrimmed.sorted.bam" "n100.r08.s068_output/n100.r08.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s068_output/n100.r08.s068.untrimmed.sorted.bam" -b "n100.r08.s068_output/n100.r08.s068.primers.bed" -p "n100.r08.s068_output/n100.r08.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" "n100.r08.s068_output/n100.r08.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s068_output/n100.r08.s068.reference.fas" "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" > "n100.r08.s068_output/n100.r08.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s068_output/n100.r08.s068.reference.fas" --call-indels "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" > "n100.r08.s068_output/n100.r08.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" > "n100.r08.s068_output/n100.r08.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s068_output/n100.r08.s068.depth.txt" "n100.r08.s068_output/n100.r08.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s068_output/n100.r08.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s068_output/n100.r08.s068.reference.fas" | bcftools consensus -m "n100.r08.s068_output/n100.r08.s068.low_depth.tsv" tmp.vcf.gz > "n100.r08.s068_output/n100.r08.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:02 scheduler task 8270b132 (flow 53910cbe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:02 scheduler task 8270b132 (flow 53910cbe): waiting for completion (try 0): started
2021/07/08 17:22:02  ->  n100.r08.s064.Main.out_file 53910cbe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:02 n100.r08.s064.Main.out_file 53910cbe n100/r08/n100.r08.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4c517c43aef94a8b4d1056a17bd614488f23e2d3f1c241180c16492f61166e0
	sha256:53910cbed0e088e213ebbb81b43540f8fcc9730cd62d24f62e6c54aafefa02fb
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8270b132e7175700da14e354ffeffebce4f16b2829b63e13992e79c4482df474
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s064_output"
	    wget -O "n100.r08.s064_output/n100.r08.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s064_output/n100.r08.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s064_output/n100.r08.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s064_output/n100.r08.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s064_output/n100.r08.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s064_output/n100.r08.s064.reference.fas" "n100.r08.s064_output/n100.r08.s064.fq1.fastq" "n100.r08.s064_output/n100.r08.s064.fq2.fastq" | samtools view -bS - > "n100.r08.s064_output/n100.r08.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s064_output/n100.r08.s064.untrimmed.sorted.bam" "n100.r08.s064_output/n100.r08.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s064_output/n100.r08.s064.untrimmed.sorted.bam" -b "n100.r08.s064_output/n100.r08.s064.primers.bed" -p "n100.r08.s064_output/n100.r08.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" "n100.r08.s064_output/n100.r08.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s064_output/n100.r08.s064.reference.fas" "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" > "n100.r08.s064_output/n100.r08.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s064_output/n100.r08.s064.reference.fas" --call-indels "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" > "n100.r08.s064_output/n100.r08.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" > "n100.r08.s064_output/n100.r08.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s064_output/n100.r08.s064.depth.txt" "n100.r08.s064_output/n100.r08.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s064_output/n100.r08.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s064_output/n100.r08.s064.reference.fas" | bcftools consensus -m "n100.r08.s064_output/n100.r08.s064.low_depth.tsv" tmp.vcf.gz > "n100.r08.s064_output/n100.r08.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:02 scheduler task 77090a8d (flow 6db5a9b8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:02 scheduler task 77090a8d (flow 6db5a9b8): waiting for completion (try 0): started
2021/07/08 17:22:02  ->  n100.r08.s007.Main.out_file 6db5a9b8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:02 n100.r08.s007.Main.out_file 6db5a9b8 n100/r08/n100.r08.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:01eff617aa542797aeba1adf6e07e7a8ac93cdb53908a47353eabf8f670d8826
	sha256:6db5a9b804eacc50edbc6bbbdce1c661efb43d776028cba37bf03778156bdae2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77090a8d2a158d7fbf44f6961bc1814b2ce048659e04cde280af8692c88f539e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s007_output"
	    wget -O "n100.r08.s007_output/n100.r08.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s007_output/n100.r08.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s007_output/n100.r08.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s007_output/n100.r08.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s007_output/n100.r08.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s007_output/n100.r08.s007.reference.fas" "n100.r08.s007_output/n100.r08.s007.fq1.fastq" "n100.r08.s007_output/n100.r08.s007.fq2.fastq" | samtools view -bS - > "n100.r08.s007_output/n100.r08.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s007_output/n100.r08.s007.untrimmed.sorted.bam" "n100.r08.s007_output/n100.r08.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s007_output/n100.r08.s007.untrimmed.sorted.bam" -b "n100.r08.s007_output/n100.r08.s007.primers.bed" -p "n100.r08.s007_output/n100.r08.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" "n100.r08.s007_output/n100.r08.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s007_output/n100.r08.s007.reference.fas" "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" > "n100.r08.s007_output/n100.r08.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s007_output/n100.r08.s007.reference.fas" --call-indels "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" > "n100.r08.s007_output/n100.r08.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" > "n100.r08.s007_output/n100.r08.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s007_output/n100.r08.s007.depth.txt" "n100.r08.s007_output/n100.r08.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s007_output/n100.r08.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s007_output/n100.r08.s007.reference.fas" | bcftools consensus -m "n100.r08.s007_output/n100.r08.s007.low_depth.tsv" tmp.vcf.gz > "n100.r08.s007_output/n100.r08.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:02 scheduler task dee4f7a4 (flow 63e7c0c0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:02 scheduler task dee4f7a4 (flow 63e7c0c0): waiting for completion (try 0): started
2021/07/08 17:22:02  ->  n100.r08.s034.Main.out_file 63e7c0c0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:02 n100.r08.s034.Main.out_file 63e7c0c0 n100/r08/n100.r08.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:11758d565319370a1e80bbc6a2443569c9595b37a0d84251967548afa82b9459
	sha256:63e7c0c012ad95a33bb6d00db7a475639572abc23432b24c9426858590338471
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dee4f7a4e38b9a559ec46c4b20596b680d693d59c65c0bce29ed1ccc293d0b67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s034_output"
	    wget -O "n100.r08.s034_output/n100.r08.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s034_output/n100.r08.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s034_output/n100.r08.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s034_output/n100.r08.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s034_output/n100.r08.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s034_output/n100.r08.s034.reference.fas" "n100.r08.s034_output/n100.r08.s034.fq1.fastq" "n100.r08.s034_output/n100.r08.s034.fq2.fastq" | samtools view -bS - > "n100.r08.s034_output/n100.r08.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s034_output/n100.r08.s034.untrimmed.sorted.bam" "n100.r08.s034_output/n100.r08.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s034_output/n100.r08.s034.untrimmed.sorted.bam" -b "n100.r08.s034_output/n100.r08.s034.primers.bed" -p "n100.r08.s034_output/n100.r08.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" "n100.r08.s034_output/n100.r08.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s034_output/n100.r08.s034.reference.fas" "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" > "n100.r08.s034_output/n100.r08.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s034_output/n100.r08.s034.reference.fas" --call-indels "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" > "n100.r08.s034_output/n100.r08.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" > "n100.r08.s034_output/n100.r08.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s034_output/n100.r08.s034.depth.txt" "n100.r08.s034_output/n100.r08.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s034_output/n100.r08.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s034_output/n100.r08.s034.reference.fas" | bcftools consensus -m "n100.r08.s034_output/n100.r08.s034.low_depth.tsv" tmp.vcf.gz > "n100.r08.s034_output/n100.r08.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:02 scheduler task bf7e40f2 (flow d91ad154): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:02 scheduler task bf7e40f2 (flow d91ad154): waiting for completion (try 0): started
2021/07/08 17:22:02  ->  n100.r08.s077.Main.out_file d91ad154 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:02 n100.r08.s077.Main.out_file d91ad154 n100/r08/n100.r08.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e7ec65aac484078a7ae690688f5351235c90cae7983c8695190907b62cb5e983
	sha256:d91ad154fe5297ed5dd191028b89c049ac850bfe6d47e6776bfb70342d39412f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bf7e40f2eba1865caca65845f635a4c15f661f03bf8907f4cbfc9635a64926c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s077_output"
	    wget -O "n100.r08.s077_output/n100.r08.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s077_output/n100.r08.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s077_output/n100.r08.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s077_output/n100.r08.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s077_output/n100.r08.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s077_output/n100.r08.s077.reference.fas" "n100.r08.s077_output/n100.r08.s077.fq1.fastq" "n100.r08.s077_output/n100.r08.s077.fq2.fastq" | samtools view -bS - > "n100.r08.s077_output/n100.r08.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s077_output/n100.r08.s077.untrimmed.sorted.bam" "n100.r08.s077_output/n100.r08.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s077_output/n100.r08.s077.untrimmed.sorted.bam" -b "n100.r08.s077_output/n100.r08.s077.primers.bed" -p "n100.r08.s077_output/n100.r08.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" "n100.r08.s077_output/n100.r08.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s077_output/n100.r08.s077.reference.fas" "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" > "n100.r08.s077_output/n100.r08.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s077_output/n100.r08.s077.reference.fas" --call-indels "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" > "n100.r08.s077_output/n100.r08.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" > "n100.r08.s077_output/n100.r08.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s077_output/n100.r08.s077.depth.txt" "n100.r08.s077_output/n100.r08.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s077_output/n100.r08.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s077_output/n100.r08.s077.reference.fas" | bcftools consensus -m "n100.r08.s077_output/n100.r08.s077.low_depth.tsv" tmp.vcf.gz > "n100.r08.s077_output/n100.r08.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task 533c7302 (flow f2462fba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task 533c7302 (flow f2462fba): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s069.Main.out_file f2462fba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s069.Main.out_file f2462fba n100/r08/n100.r08.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3f8aa0ef1c9e95cb69b3f87fb8fd34bcd75ee8134d743837ba7457196bc3114b
	sha256:f2462fbaf3f9956314042b01371a0de7cdecd52dee4cf1fd58aa5b176f11d381
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/533c7302ff1610763d99558bbabbdb7bc9e66322d3a942f15511782fdb0067de
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s069_output"
	    wget -O "n100.r08.s069_output/n100.r08.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s069_output/n100.r08.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s069_output/n100.r08.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s069_output/n100.r08.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s069_output/n100.r08.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s069_output/n100.r08.s069.reference.fas" "n100.r08.s069_output/n100.r08.s069.fq1.fastq" "n100.r08.s069_output/n100.r08.s069.fq2.fastq" | samtools view -bS - > "n100.r08.s069_output/n100.r08.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s069_output/n100.r08.s069.untrimmed.sorted.bam" "n100.r08.s069_output/n100.r08.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s069_output/n100.r08.s069.untrimmed.sorted.bam" -b "n100.r08.s069_output/n100.r08.s069.primers.bed" -p "n100.r08.s069_output/n100.r08.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" "n100.r08.s069_output/n100.r08.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s069_output/n100.r08.s069.reference.fas" "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" > "n100.r08.s069_output/n100.r08.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s069_output/n100.r08.s069.reference.fas" --call-indels "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" > "n100.r08.s069_output/n100.r08.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" > "n100.r08.s069_output/n100.r08.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s069_output/n100.r08.s069.depth.txt" "n100.r08.s069_output/n100.r08.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s069_output/n100.r08.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s069_output/n100.r08.s069.reference.fas" | bcftools consensus -m "n100.r08.s069_output/n100.r08.s069.low_depth.tsv" tmp.vcf.gz > "n100.r08.s069_output/n100.r08.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task aad793f7 (flow eaaaa641): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task aad793f7 (flow eaaaa641): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s094.Main.out_file eaaaa641 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s094.Main.out_file eaaaa641 n100/r08/n100.r08.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2b708a6095293fde2e11a4561652e4fb4326f76c2187d00aa225692f8f070aaa
	sha256:eaaaa641675bb0577b8091276725f58b3c4dfc8470f69991c693923211cc3d65
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aad793f71985ddb9f5b24f44bd6647fe90ce6ae49143e4f2dd357731f57b71a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s094_output"
	    wget -O "n100.r08.s094_output/n100.r08.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s094_output/n100.r08.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s094_output/n100.r08.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s094_output/n100.r08.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s094_output/n100.r08.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s094_output/n100.r08.s094.reference.fas" "n100.r08.s094_output/n100.r08.s094.fq1.fastq" "n100.r08.s094_output/n100.r08.s094.fq2.fastq" | samtools view -bS - > "n100.r08.s094_output/n100.r08.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s094_output/n100.r08.s094.untrimmed.sorted.bam" "n100.r08.s094_output/n100.r08.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s094_output/n100.r08.s094.untrimmed.sorted.bam" -b "n100.r08.s094_output/n100.r08.s094.primers.bed" -p "n100.r08.s094_output/n100.r08.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" "n100.r08.s094_output/n100.r08.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s094_output/n100.r08.s094.reference.fas" "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" > "n100.r08.s094_output/n100.r08.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s094_output/n100.r08.s094.reference.fas" --call-indels "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" > "n100.r08.s094_output/n100.r08.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" > "n100.r08.s094_output/n100.r08.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s094_output/n100.r08.s094.depth.txt" "n100.r08.s094_output/n100.r08.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s094_output/n100.r08.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s094_output/n100.r08.s094.reference.fas" | bcftools consensus -m "n100.r08.s094_output/n100.r08.s094.low_depth.tsv" tmp.vcf.gz > "n100.r08.s094_output/n100.r08.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task 95ea60c7 (flow 53b65fb8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task 95ea60c7 (flow 53b65fb8): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s045.Main.out_file 53b65fb8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s045.Main.out_file 53b65fb8 n100/r08/n100.r08.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ccd9eb1f41514928637f4d557b593641a587b52164d850c4af121f252f60fe01
	sha256:53b65fb803b549477b9831b654dc6a21a13f90901dbbc6ac7276b2fbde23b15f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95ea60c75d8d047d61fcc0e2b8c183e741d612689a6ca5d2beac35e3e0a33499
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s045_output"
	    wget -O "n100.r08.s045_output/n100.r08.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s045_output/n100.r08.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s045_output/n100.r08.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s045_output/n100.r08.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s045_output/n100.r08.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s045_output/n100.r08.s045.reference.fas" "n100.r08.s045_output/n100.r08.s045.fq1.fastq" "n100.r08.s045_output/n100.r08.s045.fq2.fastq" | samtools view -bS - > "n100.r08.s045_output/n100.r08.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s045_output/n100.r08.s045.untrimmed.sorted.bam" "n100.r08.s045_output/n100.r08.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s045_output/n100.r08.s045.untrimmed.sorted.bam" -b "n100.r08.s045_output/n100.r08.s045.primers.bed" -p "n100.r08.s045_output/n100.r08.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" "n100.r08.s045_output/n100.r08.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s045_output/n100.r08.s045.reference.fas" "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" > "n100.r08.s045_output/n100.r08.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s045_output/n100.r08.s045.reference.fas" --call-indels "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" > "n100.r08.s045_output/n100.r08.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" > "n100.r08.s045_output/n100.r08.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s045_output/n100.r08.s045.depth.txt" "n100.r08.s045_output/n100.r08.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s045_output/n100.r08.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s045_output/n100.r08.s045.reference.fas" | bcftools consensus -m "n100.r08.s045_output/n100.r08.s045.low_depth.tsv" tmp.vcf.gz > "n100.r08.s045_output/n100.r08.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task 264d0316 (flow 29e265bf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task 264d0316 (flow 29e265bf): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s040.Main.out_file 29e265bf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s040.Main.out_file 29e265bf n100/r08/n100.r08.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a26e643fdfdab97375b17e6349d84250985381304b00de14b5cf2cbfaa032e66
	sha256:29e265bfa49596228dcf2a52fd77c07a48c112b26f1c38f1c1b12c753a7e446e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/264d031622314d13bb4d42ff576050d492cf1748e646c036642505a75f985b17
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s040_output"
	    wget -O "n100.r08.s040_output/n100.r08.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s040_output/n100.r08.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s040_output/n100.r08.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s040_output/n100.r08.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s040_output/n100.r08.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s040_output/n100.r08.s040.reference.fas" "n100.r08.s040_output/n100.r08.s040.fq1.fastq" "n100.r08.s040_output/n100.r08.s040.fq2.fastq" | samtools view -bS - > "n100.r08.s040_output/n100.r08.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s040_output/n100.r08.s040.untrimmed.sorted.bam" "n100.r08.s040_output/n100.r08.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s040_output/n100.r08.s040.untrimmed.sorted.bam" -b "n100.r08.s040_output/n100.r08.s040.primers.bed" -p "n100.r08.s040_output/n100.r08.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" "n100.r08.s040_output/n100.r08.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s040_output/n100.r08.s040.reference.fas" "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" > "n100.r08.s040_output/n100.r08.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s040_output/n100.r08.s040.reference.fas" --call-indels "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" > "n100.r08.s040_output/n100.r08.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" > "n100.r08.s040_output/n100.r08.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s040_output/n100.r08.s040.depth.txt" "n100.r08.s040_output/n100.r08.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s040_output/n100.r08.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s040_output/n100.r08.s040.reference.fas" | bcftools consensus -m "n100.r08.s040_output/n100.r08.s040.low_depth.tsv" tmp.vcf.gz > "n100.r08.s040_output/n100.r08.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task 77ea896f (flow 6e71356b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task 77ea896f (flow 6e71356b): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s055.Main.out_file 6e71356b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s055.Main.out_file 6e71356b n100/r08/n100.r08.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:96e1a3194d34f13c77828748db94c22e725b5d3e112cf72d57cf34447b2d966e
	sha256:6e71356b98c51b8b0b33d9e31dc03ff34763687efe7a8bcd55ba82b5b0b03621
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77ea896fcbf23b91d343c1aca1211c202a48852f3cb46ff1431ae0ba62ce9df9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s055_output"
	    wget -O "n100.r08.s055_output/n100.r08.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s055_output/n100.r08.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s055_output/n100.r08.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s055_output/n100.r08.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s055_output/n100.r08.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s055_output/n100.r08.s055.reference.fas" "n100.r08.s055_output/n100.r08.s055.fq1.fastq" "n100.r08.s055_output/n100.r08.s055.fq2.fastq" | samtools view -bS - > "n100.r08.s055_output/n100.r08.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s055_output/n100.r08.s055.untrimmed.sorted.bam" "n100.r08.s055_output/n100.r08.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s055_output/n100.r08.s055.untrimmed.sorted.bam" -b "n100.r08.s055_output/n100.r08.s055.primers.bed" -p "n100.r08.s055_output/n100.r08.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" "n100.r08.s055_output/n100.r08.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s055_output/n100.r08.s055.reference.fas" "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" > "n100.r08.s055_output/n100.r08.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s055_output/n100.r08.s055.reference.fas" --call-indels "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" > "n100.r08.s055_output/n100.r08.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" > "n100.r08.s055_output/n100.r08.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s055_output/n100.r08.s055.depth.txt" "n100.r08.s055_output/n100.r08.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s055_output/n100.r08.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s055_output/n100.r08.s055.reference.fas" | bcftools consensus -m "n100.r08.s055_output/n100.r08.s055.low_depth.tsv" tmp.vcf.gz > "n100.r08.s055_output/n100.r08.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task 8a56961a (flow 9099bf90): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task 8a56961a (flow 9099bf90): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s061.Main.out_file 9099bf90 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s061.Main.out_file 9099bf90 n100/r08/n100.r08.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdee0fd2b46248b4b09cfacd53878bf647477fff77a86d4b39cfeebe0d8c4553
	sha256:9099bf901b07d2ac21121556809ec1b03a46f6058e4352829356af861644d01a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a56961af8434264d93d09f0ddf7ac02cbc3dda1bc000a94b135525438b6425f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s061_output"
	    wget -O "n100.r08.s061_output/n100.r08.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s061_output/n100.r08.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s061_output/n100.r08.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s061_output/n100.r08.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s061_output/n100.r08.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s061_output/n100.r08.s061.reference.fas" "n100.r08.s061_output/n100.r08.s061.fq1.fastq" "n100.r08.s061_output/n100.r08.s061.fq2.fastq" | samtools view -bS - > "n100.r08.s061_output/n100.r08.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s061_output/n100.r08.s061.untrimmed.sorted.bam" "n100.r08.s061_output/n100.r08.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s061_output/n100.r08.s061.untrimmed.sorted.bam" -b "n100.r08.s061_output/n100.r08.s061.primers.bed" -p "n100.r08.s061_output/n100.r08.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" "n100.r08.s061_output/n100.r08.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s061_output/n100.r08.s061.reference.fas" "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" > "n100.r08.s061_output/n100.r08.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s061_output/n100.r08.s061.reference.fas" --call-indels "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" > "n100.r08.s061_output/n100.r08.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" > "n100.r08.s061_output/n100.r08.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s061_output/n100.r08.s061.depth.txt" "n100.r08.s061_output/n100.r08.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s061_output/n100.r08.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s061_output/n100.r08.s061.reference.fas" | bcftools consensus -m "n100.r08.s061_output/n100.r08.s061.low_depth.tsv" tmp.vcf.gz > "n100.r08.s061_output/n100.r08.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:03 scheduler task 2bd7a6bf (flow ebe32457): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:03 scheduler task 2bd7a6bf (flow ebe32457): waiting for completion (try 0): started
2021/07/08 17:22:03  ->  n100.r08.s001.Main.out_file ebe32457 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:03 n100.r08.s001.Main.out_file ebe32457 n100/r08/n100.r08.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a57801c3b2ce4da3982b360db643dc4216719fd85a97e69111348e4194641220
	sha256:ebe32457321c0a00417da761d630f79dcdbb75177339a8df7c37f12cf374b216
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2bd7a6bf47e8d0c4e94e36cebef07f2096bc3e9df9fbe7436661673af15f82a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s001_output"
	    wget -O "n100.r08.s001_output/n100.r08.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s001_output/n100.r08.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s001_output/n100.r08.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s001_output/n100.r08.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s001_output/n100.r08.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s001_output/n100.r08.s001.reference.fas" "n100.r08.s001_output/n100.r08.s001.fq1.fastq" "n100.r08.s001_output/n100.r08.s001.fq2.fastq" | samtools view -bS - > "n100.r08.s001_output/n100.r08.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s001_output/n100.r08.s001.untrimmed.sorted.bam" "n100.r08.s001_output/n100.r08.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s001_output/n100.r08.s001.untrimmed.sorted.bam" -b "n100.r08.s001_output/n100.r08.s001.primers.bed" -p "n100.r08.s001_output/n100.r08.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" "n100.r08.s001_output/n100.r08.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s001_output/n100.r08.s001.reference.fas" "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" > "n100.r08.s001_output/n100.r08.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s001_output/n100.r08.s001.reference.fas" --call-indels "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" > "n100.r08.s001_output/n100.r08.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" > "n100.r08.s001_output/n100.r08.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s001_output/n100.r08.s001.depth.txt" "n100.r08.s001_output/n100.r08.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s001_output/n100.r08.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s001_output/n100.r08.s001.reference.fas" | bcftools consensus -m "n100.r08.s001_output/n100.r08.s001.low_depth.tsv" tmp.vcf.gz > "n100.r08.s001_output/n100.r08.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task ecca53e1 (flow bb3142a9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task ecca53e1 (flow bb3142a9): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s036.Main.out_file bb3142a9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s036.Main.out_file bb3142a9 n100/r08/n100.r08.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2312c8c2d9236eec1b80c83bf282d67c2cb3f9135ce14f122cc65e3043e71b46
	sha256:bb3142a939c9bf7a65847f659b28d1275fa029fd8203a7b5bf5ca3a20f37ca91
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ecca53e1da1b43676a7eb5c753c384501ad193adb26c0591d28b340047cc0f88
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s036_output"
	    wget -O "n100.r08.s036_output/n100.r08.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s036_output/n100.r08.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s036_output/n100.r08.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s036_output/n100.r08.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s036_output/n100.r08.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s036_output/n100.r08.s036.reference.fas" "n100.r08.s036_output/n100.r08.s036.fq1.fastq" "n100.r08.s036_output/n100.r08.s036.fq2.fastq" | samtools view -bS - > "n100.r08.s036_output/n100.r08.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s036_output/n100.r08.s036.untrimmed.sorted.bam" "n100.r08.s036_output/n100.r08.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s036_output/n100.r08.s036.untrimmed.sorted.bam" -b "n100.r08.s036_output/n100.r08.s036.primers.bed" -p "n100.r08.s036_output/n100.r08.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" "n100.r08.s036_output/n100.r08.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s036_output/n100.r08.s036.reference.fas" "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" > "n100.r08.s036_output/n100.r08.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s036_output/n100.r08.s036.reference.fas" --call-indels "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" > "n100.r08.s036_output/n100.r08.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" > "n100.r08.s036_output/n100.r08.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s036_output/n100.r08.s036.depth.txt" "n100.r08.s036_output/n100.r08.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s036_output/n100.r08.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s036_output/n100.r08.s036.reference.fas" | bcftools consensus -m "n100.r08.s036_output/n100.r08.s036.low_depth.tsv" tmp.vcf.gz > "n100.r08.s036_output/n100.r08.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task e7dd9705 (flow 15301ea9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task e7dd9705 (flow 15301ea9): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s039.Main.out_file 15301ea9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s039.Main.out_file 15301ea9 n100/r08/n100.r08.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e1882833d8b618ed1d9cf13b6f2c9f12689ec044db9c1e0773c44a3d8995a0c8
	sha256:15301ea991a6ed4a123be58f518592cb2334cfe866b0521608dea5bb64033b9f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7dd9705b03f259ac4378384761ea09c5f49b1b8e512d853580264e0d15d7397
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s039_output"
	    wget -O "n100.r08.s039_output/n100.r08.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s039_output/n100.r08.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s039_output/n100.r08.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s039_output/n100.r08.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s039_output/n100.r08.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s039_output/n100.r08.s039.reference.fas" "n100.r08.s039_output/n100.r08.s039.fq1.fastq" "n100.r08.s039_output/n100.r08.s039.fq2.fastq" | samtools view -bS - > "n100.r08.s039_output/n100.r08.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s039_output/n100.r08.s039.untrimmed.sorted.bam" "n100.r08.s039_output/n100.r08.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s039_output/n100.r08.s039.untrimmed.sorted.bam" -b "n100.r08.s039_output/n100.r08.s039.primers.bed" -p "n100.r08.s039_output/n100.r08.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" "n100.r08.s039_output/n100.r08.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s039_output/n100.r08.s039.reference.fas" "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" > "n100.r08.s039_output/n100.r08.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s039_output/n100.r08.s039.reference.fas" --call-indels "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" > "n100.r08.s039_output/n100.r08.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" > "n100.r08.s039_output/n100.r08.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s039_output/n100.r08.s039.depth.txt" "n100.r08.s039_output/n100.r08.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s039_output/n100.r08.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s039_output/n100.r08.s039.reference.fas" | bcftools consensus -m "n100.r08.s039_output/n100.r08.s039.low_depth.tsv" tmp.vcf.gz > "n100.r08.s039_output/n100.r08.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task 5f2477ba (flow aa8092e5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task 5f2477ba (flow aa8092e5): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s070.Main.out_file aa8092e5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s070.Main.out_file aa8092e5 n100/r08/n100.r08.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cedcc469a8df2e3a2b8aae3afdd2abc1a4ef8a85fb9e8a34fb3dafe8cf1d2c5c
	sha256:aa8092e5e3fe98095c0011909240c5d78876ef49153468a35065507fb89948ca
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f2477ba2c846d104c50e1efa834c30900ae21412a2fc64537db70785b65466f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s070_output"
	    wget -O "n100.r08.s070_output/n100.r08.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s070_output/n100.r08.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s070_output/n100.r08.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s070_output/n100.r08.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s070_output/n100.r08.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s070_output/n100.r08.s070.reference.fas" "n100.r08.s070_output/n100.r08.s070.fq1.fastq" "n100.r08.s070_output/n100.r08.s070.fq2.fastq" | samtools view -bS - > "n100.r08.s070_output/n100.r08.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s070_output/n100.r08.s070.untrimmed.sorted.bam" "n100.r08.s070_output/n100.r08.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s070_output/n100.r08.s070.untrimmed.sorted.bam" -b "n100.r08.s070_output/n100.r08.s070.primers.bed" -p "n100.r08.s070_output/n100.r08.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" "n100.r08.s070_output/n100.r08.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s070_output/n100.r08.s070.reference.fas" "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" > "n100.r08.s070_output/n100.r08.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s070_output/n100.r08.s070.reference.fas" --call-indels "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" > "n100.r08.s070_output/n100.r08.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" > "n100.r08.s070_output/n100.r08.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s070_output/n100.r08.s070.depth.txt" "n100.r08.s070_output/n100.r08.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s070_output/n100.r08.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s070_output/n100.r08.s070.reference.fas" | bcftools consensus -m "n100.r08.s070_output/n100.r08.s070.low_depth.tsv" tmp.vcf.gz > "n100.r08.s070_output/n100.r08.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task f032da36 (flow dd8a72fb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task f032da36 (flow dd8a72fb): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s053.Main.out_file dd8a72fb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s053.Main.out_file dd8a72fb n100/r08/n100.r08.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8e7a9bdf7a240335c9102eb7babe42512ea10ec10da90eb32dfe58c8b2c54ea0
	sha256:dd8a72fbbf5ab80fc1a70038187aa99314986a0c6558d5da53f5bc13aab7ca7f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f032da36ef17402e53561e3eea83519bfe879ed8aef11da700c1d6facb612612
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s053_output"
	    wget -O "n100.r08.s053_output/n100.r08.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s053_output/n100.r08.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s053_output/n100.r08.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s053_output/n100.r08.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s053_output/n100.r08.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s053_output/n100.r08.s053.reference.fas" "n100.r08.s053_output/n100.r08.s053.fq1.fastq" "n100.r08.s053_output/n100.r08.s053.fq2.fastq" | samtools view -bS - > "n100.r08.s053_output/n100.r08.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s053_output/n100.r08.s053.untrimmed.sorted.bam" "n100.r08.s053_output/n100.r08.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s053_output/n100.r08.s053.untrimmed.sorted.bam" -b "n100.r08.s053_output/n100.r08.s053.primers.bed" -p "n100.r08.s053_output/n100.r08.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" "n100.r08.s053_output/n100.r08.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s053_output/n100.r08.s053.reference.fas" "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" > "n100.r08.s053_output/n100.r08.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s053_output/n100.r08.s053.reference.fas" --call-indels "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" > "n100.r08.s053_output/n100.r08.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" > "n100.r08.s053_output/n100.r08.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s053_output/n100.r08.s053.depth.txt" "n100.r08.s053_output/n100.r08.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s053_output/n100.r08.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s053_output/n100.r08.s053.reference.fas" | bcftools consensus -m "n100.r08.s053_output/n100.r08.s053.low_depth.tsv" tmp.vcf.gz > "n100.r08.s053_output/n100.r08.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task 82ea7c30 (flow 9a696a11): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task 82ea7c30 (flow 9a696a11): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s091.Main.out_file 9a696a11 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s091.Main.out_file 9a696a11 n100/r08/n100.r08.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9e37fe6fd1805caa555f68f723baae072c919edb5c86d796e5bb8ac3fb853269
	sha256:9a696a11dc6163013eee6f742edc7b180e91991c30ebbe21a154359ecba0f82c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/82ea7c302c98664aa155db187df11661b1fcf32791072a7f7b93ea199426c417
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s091_output"
	    wget -O "n100.r08.s091_output/n100.r08.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s091_output/n100.r08.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s091_output/n100.r08.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s091_output/n100.r08.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s091_output/n100.r08.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s091_output/n100.r08.s091.reference.fas" "n100.r08.s091_output/n100.r08.s091.fq1.fastq" "n100.r08.s091_output/n100.r08.s091.fq2.fastq" | samtools view -bS - > "n100.r08.s091_output/n100.r08.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s091_output/n100.r08.s091.untrimmed.sorted.bam" "n100.r08.s091_output/n100.r08.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s091_output/n100.r08.s091.untrimmed.sorted.bam" -b "n100.r08.s091_output/n100.r08.s091.primers.bed" -p "n100.r08.s091_output/n100.r08.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" "n100.r08.s091_output/n100.r08.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s091_output/n100.r08.s091.reference.fas" "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" > "n100.r08.s091_output/n100.r08.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s091_output/n100.r08.s091.reference.fas" --call-indels "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" > "n100.r08.s091_output/n100.r08.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" > "n100.r08.s091_output/n100.r08.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s091_output/n100.r08.s091.depth.txt" "n100.r08.s091_output/n100.r08.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s091_output/n100.r08.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s091_output/n100.r08.s091.reference.fas" | bcftools consensus -m "n100.r08.s091_output/n100.r08.s091.low_depth.tsv" tmp.vcf.gz > "n100.r08.s091_output/n100.r08.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task cb5519bf (flow b7426dfd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task cb5519bf (flow b7426dfd): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s032.Main.out_file b7426dfd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s032.Main.out_file b7426dfd n100/r08/n100.r08.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6ea9208509337acdfc45354df1d67f5e4143ec3b7f38b2f3ba4141cfb074f46f
	sha256:b7426dfd8ceb872d2894b2d822faf39b1aaae57f5a674108388c1e616151977d
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cb5519bf0bc35689b9da2512970d19a18fedbda70a8cb97f95b84086fccfb80d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s032_output"
	    wget -O "n100.r08.s032_output/n100.r08.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s032_output/n100.r08.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s032_output/n100.r08.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s032_output/n100.r08.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s032_output/n100.r08.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s032_output/n100.r08.s032.reference.fas" "n100.r08.s032_output/n100.r08.s032.fq1.fastq" "n100.r08.s032_output/n100.r08.s032.fq2.fastq" | samtools view -bS - > "n100.r08.s032_output/n100.r08.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s032_output/n100.r08.s032.untrimmed.sorted.bam" "n100.r08.s032_output/n100.r08.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s032_output/n100.r08.s032.untrimmed.sorted.bam" -b "n100.r08.s032_output/n100.r08.s032.primers.bed" -p "n100.r08.s032_output/n100.r08.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" "n100.r08.s032_output/n100.r08.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s032_output/n100.r08.s032.reference.fas" "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" > "n100.r08.s032_output/n100.r08.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s032_output/n100.r08.s032.reference.fas" --call-indels "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" > "n100.r08.s032_output/n100.r08.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" > "n100.r08.s032_output/n100.r08.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s032_output/n100.r08.s032.depth.txt" "n100.r08.s032_output/n100.r08.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s032_output/n100.r08.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s032_output/n100.r08.s032.reference.fas" | bcftools consensus -m "n100.r08.s032_output/n100.r08.s032.low_depth.tsv" tmp.vcf.gz > "n100.r08.s032_output/n100.r08.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:04 scheduler task 7ba99413 (flow 45b5a090): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:04 scheduler task 7ba99413 (flow 45b5a090): waiting for completion (try 0): started
2021/07/08 17:22:04  ->  n100.r08.s086.Main.out_file 45b5a090 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:04 n100.r08.s086.Main.out_file 45b5a090 n100/r08/n100.r08.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ad6a5a982548ff7e5f0007c8b6152be93b578f1193e8625dbfc972c7362ddec
	sha256:45b5a09054e22472469492db4c4adbdbce35a0ca1c30770ce390b0a169b2e4c7
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ba99413c535d4755bc344b3d0a05325f02cc3f96260fe828a1a387588095115
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s086_output"
	    wget -O "n100.r08.s086_output/n100.r08.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s086_output/n100.r08.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s086_output/n100.r08.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s086_output/n100.r08.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s086_output/n100.r08.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s086_output/n100.r08.s086.reference.fas" "n100.r08.s086_output/n100.r08.s086.fq1.fastq" "n100.r08.s086_output/n100.r08.s086.fq2.fastq" | samtools view -bS - > "n100.r08.s086_output/n100.r08.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s086_output/n100.r08.s086.untrimmed.sorted.bam" "n100.r08.s086_output/n100.r08.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s086_output/n100.r08.s086.untrimmed.sorted.bam" -b "n100.r08.s086_output/n100.r08.s086.primers.bed" -p "n100.r08.s086_output/n100.r08.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" "n100.r08.s086_output/n100.r08.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s086_output/n100.r08.s086.reference.fas" "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" > "n100.r08.s086_output/n100.r08.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s086_output/n100.r08.s086.reference.fas" --call-indels "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" > "n100.r08.s086_output/n100.r08.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" > "n100.r08.s086_output/n100.r08.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s086_output/n100.r08.s086.depth.txt" "n100.r08.s086_output/n100.r08.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s086_output/n100.r08.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s086_output/n100.r08.s086.reference.fas" | bcftools consensus -m "n100.r08.s086_output/n100.r08.s086.low_depth.tsv" tmp.vcf.gz > "n100.r08.s086_output/n100.r08.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:05 scheduler task 11cbb428 (flow 6e2216d0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:05 scheduler task 11cbb428 (flow 6e2216d0): waiting for completion (try 0): started
2021/07/08 17:22:05  ->  n100.r08.s004.Main.out_file 6e2216d0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:05 n100.r08.s004.Main.out_file 6e2216d0 n100/r08/n100.r08.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52d1ff8e0332ef496f1a09cea1c61aa2374b2472d9abb634aa917db268413cde
	sha256:6e2216d06fefecdafed3ced326e390ef93c557d6b9908da8c613f7bc60df3804
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11cbb4284819f61a418d15ac6733a275df46f8a8fb76dc8c12e44ac9fcd1dfa1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s004_output"
	    wget -O "n100.r08.s004_output/n100.r08.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s004_output/n100.r08.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s004_output/n100.r08.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s004_output/n100.r08.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s004_output/n100.r08.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s004_output/n100.r08.s004.reference.fas" "n100.r08.s004_output/n100.r08.s004.fq1.fastq" "n100.r08.s004_output/n100.r08.s004.fq2.fastq" | samtools view -bS - > "n100.r08.s004_output/n100.r08.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s004_output/n100.r08.s004.untrimmed.sorted.bam" "n100.r08.s004_output/n100.r08.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s004_output/n100.r08.s004.untrimmed.sorted.bam" -b "n100.r08.s004_output/n100.r08.s004.primers.bed" -p "n100.r08.s004_output/n100.r08.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" "n100.r08.s004_output/n100.r08.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s004_output/n100.r08.s004.reference.fas" "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" > "n100.r08.s004_output/n100.r08.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s004_output/n100.r08.s004.reference.fas" --call-indels "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" > "n100.r08.s004_output/n100.r08.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" > "n100.r08.s004_output/n100.r08.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s004_output/n100.r08.s004.depth.txt" "n100.r08.s004_output/n100.r08.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s004_output/n100.r08.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s004_output/n100.r08.s004.reference.fas" | bcftools consensus -m "n100.r08.s004_output/n100.r08.s004.low_depth.tsv" tmp.vcf.gz > "n100.r08.s004_output/n100.r08.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:05 scheduler task e923c46c (flow 4b5a804b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:05 scheduler task e923c46c (flow 4b5a804b): waiting for completion (try 0): started
2021/07/08 17:22:05  ->  n100.r08.s006.Main.out_file 4b5a804b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:05 n100.r08.s006.Main.out_file 4b5a804b n100/r08/n100.r08.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c72148ca318739ef04da65e4863c35af351090638260ba3d1881928c9f58193
	sha256:4b5a804b2dd81c704c2781be0fd04bb59e6e0a69941f83f3aff03d99aa9df007
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e923c46c8967c382267274a6490c1f6120c7fa57ae54f0ddabfed204f3797ab6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s006_output"
	    wget -O "n100.r08.s006_output/n100.r08.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s006_output/n100.r08.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s006_output/n100.r08.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s006_output/n100.r08.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s006_output/n100.r08.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s006_output/n100.r08.s006.reference.fas" "n100.r08.s006_output/n100.r08.s006.fq1.fastq" "n100.r08.s006_output/n100.r08.s006.fq2.fastq" | samtools view -bS - > "n100.r08.s006_output/n100.r08.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s006_output/n100.r08.s006.untrimmed.sorted.bam" "n100.r08.s006_output/n100.r08.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s006_output/n100.r08.s006.untrimmed.sorted.bam" -b "n100.r08.s006_output/n100.r08.s006.primers.bed" -p "n100.r08.s006_output/n100.r08.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" "n100.r08.s006_output/n100.r08.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s006_output/n100.r08.s006.reference.fas" "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" > "n100.r08.s006_output/n100.r08.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s006_output/n100.r08.s006.reference.fas" --call-indels "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" > "n100.r08.s006_output/n100.r08.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" > "n100.r08.s006_output/n100.r08.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s006_output/n100.r08.s006.depth.txt" "n100.r08.s006_output/n100.r08.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s006_output/n100.r08.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s006_output/n100.r08.s006.reference.fas" | bcftools consensus -m "n100.r08.s006_output/n100.r08.s006.low_depth.tsv" tmp.vcf.gz > "n100.r08.s006_output/n100.r08.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:22:05 scheduler task fd88e144 (flow 30072890): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:22:05 scheduler task fd88e144 (flow 30072890): waiting for completion (try 0): started
2021/07/08 17:22:05  ->  n100.r08.s030.Main.out_file 30072890 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:22:05 n100.r08.s030.Main.out_file 30072890 n100/r08/n100.r08.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dc65c189fa29afacca78983aca7c8331a8e0aae1c4868b9b6421ecbb0741d8fa
	sha256:30072890b447ab5c3b2092c749257a877c6f6ab32f7a8776d53b6713a2139f2e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd88e14495a4727f554d9b33648b41b6a67a55381ae947753c2e7854c01d2353
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s030_output"
	    wget -O "n100.r08.s030_output/n100.r08.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s030_output/n100.r08.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s030_output/n100.r08.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s030_output/n100.r08.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s030_output/n100.r08.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s030_output/n100.r08.s030.reference.fas" "n100.r08.s030_output/n100.r08.s030.fq1.fastq" "n100.r08.s030_output/n100.r08.s030.fq2.fastq" | samtools view -bS - > "n100.r08.s030_output/n100.r08.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s030_output/n100.r08.s030.untrimmed.sorted.bam" "n100.r08.s030_output/n100.r08.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s030_output/n100.r08.s030.untrimmed.sorted.bam" -b "n100.r08.s030_output/n100.r08.s030.primers.bed" -p "n100.r08.s030_output/n100.r08.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" "n100.r08.s030_output/n100.r08.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s030_output/n100.r08.s030.reference.fas" "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" > "n100.r08.s030_output/n100.r08.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s030_output/n100.r08.s030.reference.fas" --call-indels "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" > "n100.r08.s030_output/n100.r08.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" > "n100.r08.s030_output/n100.r08.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s030_output/n100.r08.s030.depth.txt" "n100.r08.s030_output/n100.r08.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s030_output/n100.r08.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s030_output/n100.r08.s030.reference.fas" | bcftools consensus -m "n100.r08.s030_output/n100.r08.s030.low_depth.tsv" tmp.vcf.gz > "n100.r08.s030_output/n100.r08.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): promoting objects (try 0): started
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): promoting objects (try 0): started
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): retrieving diagnostic output (try 0): started
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): retrieving diagnostic output (try 0): started
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): retrieving result (try 0): started
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): retrieving result (try 0): started
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): promoting objects (try 0): started
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:25:31 scheduler task dff020c6 (flow 644d6c1e): transferring output (try 0): started
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:25:31 scheduler task a6e24a24 (flow 043fd0be): transferring output (try 0): started
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): retrieving diagnostic output (try 0): started
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): retrieving result (try 0): started
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:25:31 scheduler task 08eabe9e (flow e5f51180): transferring output (try 0): started
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloading (try 0): started
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloading val<.=c63fcc04 35.4MiB>
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloading list<val<.=eb9702e5 35.7MiB> 35.7MiB>
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloading val<.=e17185f8 35.4MiB>
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): transferring output (try 0): successful, next state: unloading
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloading (try 0): started
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloading list<val<.=7d2298d4 35.7MiB> 35.7MiB>
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloading val<.=ab17b0f3 35.4MiB>
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloading val<.=de928a81 35.4MiB>
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloaded val<.=c63fcc04 35.4MiB>
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloaded val<.=e17185f8 35.4MiB>
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloaded list<val<.=eb9702e5 35.7MiB> 35.7MiB>
2021/07/08 17:25:32 scheduler task dff020c6 (flow 644d6c1e): unloading (try 0): successful, next state: complete
2021/07/08 17:25:32  <-  n100.r08.s089.Main.out_file 644d6c1e ok     exec 3m57s 35.7MiB
2021/07/08 17:25:32 n100.r08.s089.Main.out_file 644d6c1e n100/r08/n100.r08.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:01e93c5c32b827c3007eb10862e38be6e5b4a21a00b2a15e993c43b2bd2e93e9
	sha256:644d6c1ea1b02c9797b205628e3155480452e5d5953cb4ae4ee86b4ffd2875ac
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dff020c60decb04753845a56f2d59f5d4754a0ccfa5ede13271ef79b14d9c5d3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s089_output"
	    wget -O "n100.r08.s089_output/n100.r08.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s089_output/n100.r08.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s089_output/n100.r08.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s089_output/n100.r08.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s089_output/n100.r08.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s089_output/n100.r08.s089.reference.fas" "n100.r08.s089_output/n100.r08.s089.fq1.fastq" "n100.r08.s089_output/n100.r08.s089.fq2.fastq" | samtools view -bS - > "n100.r08.s089_output/n100.r08.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s089_output/n100.r08.s089.untrimmed.sorted.bam" "n100.r08.s089_output/n100.r08.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s089_output/n100.r08.s089.untrimmed.sorted.bam" -b "n100.r08.s089_output/n100.r08.s089.primers.bed" -p "n100.r08.s089_output/n100.r08.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" "n100.r08.s089_output/n100.r08.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s089_output/n100.r08.s089.reference.fas" "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" > "n100.r08.s089_output/n100.r08.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s089_output/n100.r08.s089.reference.fas" --call-indels "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" > "n100.r08.s089_output/n100.r08.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s089_output/n100.r08.s089.trimmed.sorted.bam" > "n100.r08.s089_output/n100.r08.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s089_output/n100.r08.s089.depth.txt" "n100.r08.s089_output/n100.r08.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s089_output/n100.r08.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s089_output/n100.r08.s089.reference.fas" | bcftools consensus -m "n100.r08.s089_output/n100.r08.s089.low_depth.tsv" tmp.vcf.gz > "n100.r08.s089_output/n100.r08.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eb9702e5df1dc704ac201f14ac61a4646d4fffb9c43360ed2d9a93c76fb3454d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.1MiB max=125.1MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloaded list<val<.=7d2298d4 35.7MiB> 35.7MiB>
2021/07/08 17:25:32 scheduler task b23baa1c (flow 1b7a7a22): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s089.tar.gz resources {}
2021/07/08 17:25:32  ->  n100.r08.s089.Main.cp_out_file 1b7a7a22 exec extern s3://niema-test/n100/r08/n100.r08.s089.tar.gz 35.7MiB
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloaded val<.=ab17b0f3 35.4MiB>
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloaded val<.=de928a81 35.4MiB>
2021/07/08 17:25:32 scheduler task a6e24a24 (flow 043fd0be): unloading (try 0): successful, next state: complete
2021/07/08 17:25:32  <-  n100.r08.s083.Main.out_file 043fd0be ok     exec 3m57s 35.7MiB
2021/07/08 17:25:32 n100.r08.s083.Main.out_file 043fd0be n100/r08/n100.r08.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:238cdcb5fcbbbc4f37d106771339094663bf8d801b6009ac0c096f25ac8b437a
	sha256:043fd0be06de0baea873624d463246c6280c8c753199a59fb4ba9492213e77b0
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a6e24a241d4ceb96e5086a5a501d93ae9691c2465196864b8ed3404dc26d8819
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s083_output"
	    wget -O "n100.r08.s083_output/n100.r08.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s083_output/n100.r08.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s083_output/n100.r08.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s083_output/n100.r08.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s083_output/n100.r08.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s083_output/n100.r08.s083.reference.fas" "n100.r08.s083_output/n100.r08.s083.fq1.fastq" "n100.r08.s083_output/n100.r08.s083.fq2.fastq" | samtools view -bS - > "n100.r08.s083_output/n100.r08.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s083_output/n100.r08.s083.untrimmed.sorted.bam" "n100.r08.s083_output/n100.r08.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s083_output/n100.r08.s083.untrimmed.sorted.bam" -b "n100.r08.s083_output/n100.r08.s083.primers.bed" -p "n100.r08.s083_output/n100.r08.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" "n100.r08.s083_output/n100.r08.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s083_output/n100.r08.s083.reference.fas" "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" > "n100.r08.s083_output/n100.r08.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s083_output/n100.r08.s083.reference.fas" --call-indels "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" > "n100.r08.s083_output/n100.r08.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s083_output/n100.r08.s083.trimmed.sorted.bam" > "n100.r08.s083_output/n100.r08.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s083_output/n100.r08.s083.depth.txt" "n100.r08.s083_output/n100.r08.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s083_output/n100.r08.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s083_output/n100.r08.s083.reference.fas" | bcftools consensus -m "n100.r08.s083_output/n100.r08.s083.low_depth.tsv" tmp.vcf.gz > "n100.r08.s083_output/n100.r08.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7d2298d4e981c2e4de394171c330bcf37e96382362fc5213e1a1a138a48ce2cf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.7MiB max=123.6MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:25:32 scheduler task 43619af8 (flow 51080011): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s083.tar.gz resources {}
2021/07/08 17:25:32  ->  n100.r08.s083.Main.cp_out_file 51080011 exec extern s3://niema-test/n100/r08/n100.r08.s083.tar.gz 35.7MiB
2021/07/08 17:25:32 scheduler task 08eabe9e (flow e5f51180): transferring output (try 0): successful, next state: unloading
2021/07/08 17:25:32 scheduler task 08eabe9e (flow e5f51180): unloading (try 0): started
2021/07/08 17:25:32 scheduler task 08eabe9e (flow e5f51180): unloading list<val<.=9156cf7a 35.7MiB> 35.7MiB>
2021/07/08 17:25:32 scheduler task 08eabe9e (flow e5f51180): unloading val<.=ba9ce902 35.4MiB>
2021/07/08 17:25:32 scheduler task 08eabe9e (flow e5f51180): unloading val<.=5b98aeb6 35.4MiB>
2021/07/08 17:25:33 scheduler task 08eabe9e (flow e5f51180): unloaded val<.=5b98aeb6 35.4MiB>
2021/07/08 17:25:33 scheduler task 08eabe9e (flow e5f51180): unloaded list<val<.=9156cf7a 35.7MiB> 35.7MiB>
2021/07/08 17:25:33 scheduler task 08eabe9e (flow e5f51180): unloaded val<.=ba9ce902 35.4MiB>
2021/07/08 17:25:33 scheduler task 08eabe9e (flow e5f51180): unloading (try 0): successful, next state: complete
2021/07/08 17:25:33  <-  n100.r08.s047.Main.out_file e5f51180 ok     exec 3m57s 35.7MiB
2021/07/08 17:25:33 n100.r08.s047.Main.out_file e5f51180 n100/r08/n100.r08.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:592af9125e422e44f8f5ee6d0dfe0c0b72694ae01c4ba3ce37a132e4bccc99c7
	sha256:e5f5118011c00d8354daa4d70ef31003a91a6d30c39e1a86d5d3647863bf7be2
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/08eabe9ec0d7b918f3d8940618b834bdb09957aafa5138cd743d8bab58fc7ef2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s047_output"
	    wget -O "n100.r08.s047_output/n100.r08.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s047_output/n100.r08.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s047_output/n100.r08.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s047_output/n100.r08.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s047_output/n100.r08.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s047_output/n100.r08.s047.reference.fas" "n100.r08.s047_output/n100.r08.s047.fq1.fastq" "n100.r08.s047_output/n100.r08.s047.fq2.fastq" | samtools view -bS - > "n100.r08.s047_output/n100.r08.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s047_output/n100.r08.s047.untrimmed.sorted.bam" "n100.r08.s047_output/n100.r08.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s047_output/n100.r08.s047.untrimmed.sorted.bam" -b "n100.r08.s047_output/n100.r08.s047.primers.bed" -p "n100.r08.s047_output/n100.r08.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" "n100.r08.s047_output/n100.r08.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s047_output/n100.r08.s047.reference.fas" "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" > "n100.r08.s047_output/n100.r08.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s047_output/n100.r08.s047.reference.fas" --call-indels "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" > "n100.r08.s047_output/n100.r08.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s047_output/n100.r08.s047.trimmed.sorted.bam" > "n100.r08.s047_output/n100.r08.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s047_output/n100.r08.s047.depth.txt" "n100.r08.s047_output/n100.r08.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s047_output/n100.r08.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s047_output/n100.r08.s047.reference.fas" | bcftools consensus -m "n100.r08.s047_output/n100.r08.s047.low_depth.tsv" tmp.vcf.gz > "n100.r08.s047_output/n100.r08.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9156cf7aea7a157a351826f925228a00c8a8b5a622c7ccad79dc339c20ce1957 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=125.7MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:25:33 scheduler task a887c421 (flow fba7bc8e): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s047.tar.gz resources {}
2021/07/08 17:25:33  ->  n100.r08.s047.Main.cp_out_file fba7bc8e exec extern s3://niema-test/n100/r08/n100.r08.s047.tar.gz 35.7MiB
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): promoting objects (try 0): started
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): retrieving diagnostic output (try 0): started
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): retrieving result (try 0): started
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:25:33 scheduler task 8fe40f12 (flow a788dda5): transferring output (try 0): started
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloading (try 0): started
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloading list<val<.=8c58ba30 35.8MiB> 35.8MiB>
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloading val<.=d01697ac 35.4MiB>
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloading val<.=d9211b4d 35.4MiB>
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloaded val<.=d9211b4d 35.4MiB>
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloaded val<.=d01697ac 35.4MiB>
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloaded list<val<.=8c58ba30 35.8MiB> 35.8MiB>
2021/07/08 17:25:34 scheduler task 8fe40f12 (flow a788dda5): unloading (try 0): successful, next state: complete
2021/07/08 17:25:34  <-  n100.r08.s073.Main.out_file a788dda5 ok     exec 3m59s 35.8MiB
2021/07/08 17:25:34 n100.r08.s073.Main.out_file a788dda5 n100/r08/n100.r08.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:385f14836def0673bd9002bf473eb3b636a6d631af86b19c52e1f00b9fa048a5
	sha256:a788dda59088d2449ee15c6b2ff559c6488d39ad69b51b364866e35746c3400c
	ec2-18-117-105-155.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8fe40f12b89402dc330d538ccd36fa01a0b2cae95eab1faee4ece08ebc314d86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s073_output"
	    wget -O "n100.r08.s073_output/n100.r08.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s073_output/n100.r08.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s073_output/n100.r08.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s073_output/n100.r08.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s073_output/n100.r08.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s073_output/n100.r08.s073.reference.fas" "n100.r08.s073_output/n100.r08.s073.fq1.fastq" "n100.r08.s073_output/n100.r08.s073.fq2.fastq" | samtools view -bS - > "n100.r08.s073_output/n100.r08.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s073_output/n100.r08.s073.untrimmed.sorted.bam" "n100.r08.s073_output/n100.r08.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s073_output/n100.r08.s073.untrimmed.sorted.bam" -b "n100.r08.s073_output/n100.r08.s073.primers.bed" -p "n100.r08.s073_output/n100.r08.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" "n100.r08.s073_output/n100.r08.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s073_output/n100.r08.s073.reference.fas" "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" > "n100.r08.s073_output/n100.r08.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s073_output/n100.r08.s073.reference.fas" --call-indels "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" > "n100.r08.s073_output/n100.r08.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s073_output/n100.r08.s073.trimmed.sorted.bam" > "n100.r08.s073_output/n100.r08.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s073_output/n100.r08.s073.depth.txt" "n100.r08.s073_output/n100.r08.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s073_output/n100.r08.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s073_output/n100.r08.s073.reference.fas" | bcftools consensus -m "n100.r08.s073_output/n100.r08.s073.low_depth.tsv" tmp.vcf.gz > "n100.r08.s073_output/n100.r08.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8c58ba3088291b0c1fa6d249de7f7b02605ce7197f125d83f250a427c89d1d64 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=125.5MiB
	    disk mean=8.9MiB max=35.8MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 17:25:34 scheduler task a1656508 (flow 776b22d6): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s073.tar.gz resources {}
2021/07/08 17:25:34  ->  n100.r08.s073.Main.cp_out_file 776b22d6 exec extern s3://niema-test/n100/r08/n100.r08.s073.tar.gz 35.8MiB
2021/07/08 17:25:34 scheduler task b23baa1c (flow 1b7a7a22): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eb9702e5df1dc704ac201f14ac61a4646d4fffb9c43360ed2d9a93c76fb3454d -> s3://niema-test/n100/r08/n100.r08.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:25:34  <-  n100.r08.s089.Main.cp_out_file 1b7a7a22 ok   extern 0s 35.7MiB
2021/07/08 17:25:34 scheduler task a887c421 (flow fba7bc8e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9156cf7aea7a157a351826f925228a00c8a8b5a622c7ccad79dc339c20ce1957 -> s3://niema-test/n100/r08/n100.r08.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:25:34 scheduler task 43619af8 (flow 51080011): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7d2298d4e981c2e4de394171c330bcf37e96382362fc5213e1a1a138a48ce2cf -> s3://niema-test/n100/r08/n100.r08.s083.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:25:34  <-  n100.r08.s047.Main.cp_out_file fba7bc8e ok   extern 0s 35.7MiB
2021/07/08 17:25:34  <-  n100.r08.s083.Main.cp_out_file 51080011 ok   extern 0s 35.7MiB
2021/07/08 17:25:34 scheduler task a1656508 (flow 776b22d6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8c58ba3088291b0c1fa6d249de7f7b02605ce7197f125d83f250a427c89d1d64 -> s3://niema-test/n100/r08/n100.r08.s073.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:25:34  <-  n100.r08.s073.Main.cp_out_file 776b22d6 ok   extern 0s 35.8MiB
2021/07/08 17:27:11 scheduler task a9954f8b (flow 6c9f7fef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:11 scheduler task a9954f8b (flow 6c9f7fef): promoting objects (try 0): started
2021/07/08 17:27:11 scheduler task a9954f8b (flow 6c9f7fef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:11 scheduler task a9954f8b (flow 6c9f7fef): retrieving diagnostic output (try 0): started
2021/07/08 17:27:12 scheduler task a9954f8b (flow 6c9f7fef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:12 scheduler task a9954f8b (flow 6c9f7fef): retrieving result (try 0): started
2021/07/08 17:27:12 scheduler task a9954f8b (flow 6c9f7fef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:12 scheduler task a9954f8b (flow 6c9f7fef): transferring output (try 0): started
2021/07/08 17:27:12 scheduler task 13af5d5a (flow 0b3effbc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:12 scheduler task 13af5d5a (flow 0b3effbc): promoting objects (try 0): started
2021/07/08 17:27:12 scheduler task 13af5d5a (flow 0b3effbc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:12 scheduler task 13af5d5a (flow 0b3effbc): retrieving diagnostic output (try 0): started
2021/07/08 17:27:12 scheduler task 13af5d5a (flow 0b3effbc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:12 scheduler task 13af5d5a (flow 0b3effbc): retrieving result (try 0): started
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): transferring output (try 0): started
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloading (try 0): started
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloading list<val<.=78a25dbe 35.7MiB> 35.7MiB>
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloading val<.=8f7a627f 35.4MiB>
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloading val<.=3b1b1c72 35.4MiB>
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloaded list<val<.=78a25dbe 35.7MiB> 35.7MiB>
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloaded val<.=8f7a627f 35.4MiB>
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloaded val<.=3b1b1c72 35.4MiB>
2021/07/08 17:27:13 scheduler task a9954f8b (flow 6c9f7fef): unloading (try 0): successful, next state: complete
2021/07/08 17:27:13  <-  n100.r08.s076.Main.out_file 6c9f7fef ok     exec 4m54s 35.7MiB
2021/07/08 17:27:13 n100.r08.s076.Main.out_file 6c9f7fef n100/r08/n100.r08.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e016d81cb2c64ea2957e18c434c63b2d7021b5cbf3a0e3c96ee9156d935413f
	sha256:6c9f7fef5468bd3b4788d19ccd245c12d84b94547d808ae9442389562fc5556c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a9954f8b8ada217092f8e252df6322fb0807239f3cd636345511c0b4bd465f3f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s076_output"
	    wget -O "n100.r08.s076_output/n100.r08.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s076_output/n100.r08.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s076_output/n100.r08.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s076_output/n100.r08.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s076_output/n100.r08.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s076_output/n100.r08.s076.reference.fas" "n100.r08.s076_output/n100.r08.s076.fq1.fastq" "n100.r08.s076_output/n100.r08.s076.fq2.fastq" | samtools view -bS - > "n100.r08.s076_output/n100.r08.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s076_output/n100.r08.s076.untrimmed.sorted.bam" "n100.r08.s076_output/n100.r08.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s076_output/n100.r08.s076.untrimmed.sorted.bam" -b "n100.r08.s076_output/n100.r08.s076.primers.bed" -p "n100.r08.s076_output/n100.r08.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" "n100.r08.s076_output/n100.r08.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s076_output/n100.r08.s076.reference.fas" "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" > "n100.r08.s076_output/n100.r08.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s076_output/n100.r08.s076.reference.fas" --call-indels "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" > "n100.r08.s076_output/n100.r08.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s076_output/n100.r08.s076.trimmed.sorted.bam" > "n100.r08.s076_output/n100.r08.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s076_output/n100.r08.s076.depth.txt" "n100.r08.s076_output/n100.r08.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s076_output/n100.r08.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s076_output/n100.r08.s076.reference.fas" | bcftools consensus -m "n100.r08.s076_output/n100.r08.s076.low_depth.tsv" tmp.vcf.gz > "n100.r08.s076_output/n100.r08.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:78a25dbe55e1b2280887895986ce56d30682365344e59e17248fb2d5a696437b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.1MiB max=129.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:27:13 scheduler task 28241d70 (flow 8b1d4d4a): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s076.tar.gz resources {}
2021/07/08 17:27:13  ->  n100.r08.s076.Main.cp_out_file 8b1d4d4a exec extern s3://niema-test/n100/r08/n100.r08.s076.tar.gz 35.7MiB
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloading (try 0): started
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloading list<val<.=0b04c2f7 35.7MiB> 35.7MiB>
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloading val<.=dc58be7b 35.4MiB>
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloading val<.=dee97ea6 35.4MiB>
2021/07/08 17:27:13 scheduler task 2304077e (flow 683e2f72): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:13 scheduler task 2304077e (flow 683e2f72): promoting objects (try 0): started
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloaded val<.=dee97ea6 35.4MiB>
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloaded val<.=dc58be7b 35.4MiB>
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloaded list<val<.=0b04c2f7 35.7MiB> 35.7MiB>
2021/07/08 17:27:13 scheduler task 13af5d5a (flow 0b3effbc): unloading (try 0): successful, next state: complete
2021/07/08 17:27:13  <-  n100.r08.s027.Main.out_file 0b3effbc ok     exec 4m55s 35.7MiB
2021/07/08 17:27:13 n100.r08.s027.Main.out_file 0b3effbc n100/r08/n100.r08.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:87fe4e05abb82d4856c0f478e3519f1ede1275a4d2367d68fac15bb678e66bd5
	sha256:0b3effbccf204369dae95ff9c248d72002a350fc45a1d5fdb1de4eeab0b8cf52
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13af5d5a665161b0abf1683f718d53523506bdd9b03950c970607f0783d97432
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s027_output"
	    wget -O "n100.r08.s027_output/n100.r08.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s027_output/n100.r08.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s027_output/n100.r08.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s027_output/n100.r08.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s027_output/n100.r08.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s027_output/n100.r08.s027.reference.fas" "n100.r08.s027_output/n100.r08.s027.fq1.fastq" "n100.r08.s027_output/n100.r08.s027.fq2.fastq" | samtools view -bS - > "n100.r08.s027_output/n100.r08.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s027_output/n100.r08.s027.untrimmed.sorted.bam" "n100.r08.s027_output/n100.r08.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s027_output/n100.r08.s027.untrimmed.sorted.bam" -b "n100.r08.s027_output/n100.r08.s027.primers.bed" -p "n100.r08.s027_output/n100.r08.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" "n100.r08.s027_output/n100.r08.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s027_output/n100.r08.s027.reference.fas" "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" > "n100.r08.s027_output/n100.r08.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s027_output/n100.r08.s027.reference.fas" --call-indels "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" > "n100.r08.s027_output/n100.r08.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s027_output/n100.r08.s027.trimmed.sorted.bam" > "n100.r08.s027_output/n100.r08.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s027_output/n100.r08.s027.depth.txt" "n100.r08.s027_output/n100.r08.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s027_output/n100.r08.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s027_output/n100.r08.s027.reference.fas" | bcftools consensus -m "n100.r08.s027_output/n100.r08.s027.low_depth.tsv" tmp.vcf.gz > "n100.r08.s027_output/n100.r08.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0b04c2f75a3af3c9a9c8dc122b15d30fbaab03c046d81cd6da66b7986b57f2a2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=133.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:27:13 scheduler task a916451c (flow ab4b65af): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s027.tar.gz resources {}
2021/07/08 17:27:13  ->  n100.r08.s027.Main.cp_out_file ab4b65af exec extern s3://niema-test/n100/r08/n100.r08.s027.tar.gz 35.7MiB
2021/07/08 17:27:13 scheduler task 2304077e (flow 683e2f72): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:13 scheduler task 2304077e (flow 683e2f72): retrieving diagnostic output (try 0): started
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): retrieving result (try 0): started
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): transferring output (try 0): started
2021/07/08 17:27:14 scheduler task 28241d70 (flow 8b1d4d4a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:78a25dbe55e1b2280887895986ce56d30682365344e59e17248fb2d5a696437b -> s3://niema-test/n100/r08/n100.r08.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:14  <-  n100.r08.s076.Main.cp_out_file 8b1d4d4a ok   extern 0s 35.7MiB
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): promoting objects (try 0): started
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): retrieving diagnostic output (try 0): started
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): promoting objects (try 0): started
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): retrieving result (try 0): started
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): retrieving diagnostic output (try 0): started
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:14 scheduler task 0695043b (flow c0270ffe): transferring output (try 0): started
2021/07/08 17:27:14 scheduler task a916451c (flow ab4b65af): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0b04c2f75a3af3c9a9c8dc122b15d30fbaab03c046d81cd6da66b7986b57f2a2 -> s3://niema-test/n100/r08/n100.r08.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:14  <-  n100.r08.s027.Main.cp_out_file ab4b65af ok   extern 0s 35.7MiB
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): retrieving result (try 0): started
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:14 scheduler task ef32d510 (flow 7c721fb5): transferring output (try 0): started
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): unloading (try 0): started
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): unloading list<val<.=bd17d22a 35.8MiB> 35.8MiB>
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): unloading val<.=fdd37629 35.4MiB>
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): unloading val<.=922e0617 35.4MiB>
2021/07/08 17:27:14 scheduler task 2304077e (flow 683e2f72): unloaded list<val<.=bd17d22a 35.8MiB> 35.8MiB>
2021/07/08 17:27:15 scheduler task 2304077e (flow 683e2f72): unloaded val<.=922e0617 35.4MiB>
2021/07/08 17:27:15 scheduler task 2304077e (flow 683e2f72): unloaded val<.=fdd37629 35.4MiB>
2021/07/08 17:27:15 scheduler task 2304077e (flow 683e2f72): unloading (try 0): successful, next state: complete
2021/07/08 17:27:15  <-  n100.r08.s035.Main.out_file 683e2f72 ok     exec 4m57s 35.8MiB
2021/07/08 17:27:15 n100.r08.s035.Main.out_file 683e2f72 n100/r08/n100.r08.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:57f35a29ad269dcb96201238d3fb16015b585a06d52a121f2e3eb795c53ab31f
	sha256:683e2f72a4323a39f4be4e3e91e68619f1a5f2e2b6e0edf4ea8e4255aa769c1e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2304077e82ffecbc6ec1d1b07eb68c36308265ab728363a8ce561d4198adea5f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s035_output"
	    wget -O "n100.r08.s035_output/n100.r08.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s035_output/n100.r08.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s035_output/n100.r08.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s035_output/n100.r08.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s035_output/n100.r08.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s035_output/n100.r08.s035.reference.fas" "n100.r08.s035_output/n100.r08.s035.fq1.fastq" "n100.r08.s035_output/n100.r08.s035.fq2.fastq" | samtools view -bS - > "n100.r08.s035_output/n100.r08.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s035_output/n100.r08.s035.untrimmed.sorted.bam" "n100.r08.s035_output/n100.r08.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s035_output/n100.r08.s035.untrimmed.sorted.bam" -b "n100.r08.s035_output/n100.r08.s035.primers.bed" -p "n100.r08.s035_output/n100.r08.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" "n100.r08.s035_output/n100.r08.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s035_output/n100.r08.s035.reference.fas" "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" > "n100.r08.s035_output/n100.r08.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s035_output/n100.r08.s035.reference.fas" --call-indels "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" > "n100.r08.s035_output/n100.r08.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s035_output/n100.r08.s035.trimmed.sorted.bam" > "n100.r08.s035_output/n100.r08.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s035_output/n100.r08.s035.depth.txt" "n100.r08.s035_output/n100.r08.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s035_output/n100.r08.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s035_output/n100.r08.s035.reference.fas" | bcftools consensus -m "n100.r08.s035_output/n100.r08.s035.low_depth.tsv" tmp.vcf.gz > "n100.r08.s035_output/n100.r08.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bd17d22a2e4b562ec0f06284cfd54e13e2f06b4cb07bf54413050aca968c8702 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.2MiB max=129.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:27:15 scheduler task 1b077504 (flow 6f073daa): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s035.tar.gz resources {}
2021/07/08 17:27:15  ->  n100.r08.s035.Main.cp_out_file 6f073daa exec extern s3://niema-test/n100/r08/n100.r08.s035.tar.gz 35.8MiB
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloading (try 0): started
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloading list<val<.=e71ab01a 35.8MiB> 35.8MiB>
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloading val<.=684b6610 35.4MiB>
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloading val<.=9eabe52d 35.4MiB>
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloading (try 0): started
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloading list<val<.=9e3ac426 35.8MiB> 35.8MiB>
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloading val<.=4d0465b4 35.4MiB>
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloading val<.=5025a711 35.4MiB>
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): promoting objects (try 0): started
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloaded list<val<.=e71ab01a 35.8MiB> 35.8MiB>
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloaded val<.=9eabe52d 35.4MiB>
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloaded val<.=684b6610 35.4MiB>
2021/07/08 17:27:15 scheduler task 0695043b (flow c0270ffe): unloading (try 0): successful, next state: complete
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloaded list<val<.=9e3ac426 35.8MiB> 35.8MiB>
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloaded val<.=5025a711 35.4MiB>
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloaded val<.=4d0465b4 35.4MiB>
2021/07/08 17:27:15 scheduler task ef32d510 (flow 7c721fb5): unloading (try 0): successful, next state: complete
2021/07/08 17:27:15  <-  n100.r08.s074.Main.out_file c0270ffe ok     exec 4m57s 35.8MiB
2021/07/08 17:27:15 n100.r08.s074.Main.out_file c0270ffe n100/r08/n100.r08.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2d3ec2564f05593d3092ddf80177c6f151e91970685f87a7efead2864958ae12
	sha256:c0270ffed5d5503bef56d357d0f2b61e466b32428e96968c67ce8fceefbae74f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0695043bc1d47d103b37d5ff182a60ec6612db8a548344ee7013349ca3837576
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s074_output"
	    wget -O "n100.r08.s074_output/n100.r08.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s074_output/n100.r08.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s074_output/n100.r08.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s074_output/n100.r08.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s074_output/n100.r08.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s074_output/n100.r08.s074.reference.fas" "n100.r08.s074_output/n100.r08.s074.fq1.fastq" "n100.r08.s074_output/n100.r08.s074.fq2.fastq" | samtools view -bS - > "n100.r08.s074_output/n100.r08.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s074_output/n100.r08.s074.untrimmed.sorted.bam" "n100.r08.s074_output/n100.r08.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s074_output/n100.r08.s074.untrimmed.sorted.bam" -b "n100.r08.s074_output/n100.r08.s074.primers.bed" -p "n100.r08.s074_output/n100.r08.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" "n100.r08.s074_output/n100.r08.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s074_output/n100.r08.s074.reference.fas" "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" > "n100.r08.s074_output/n100.r08.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s074_output/n100.r08.s074.reference.fas" --call-indels "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" > "n100.r08.s074_output/n100.r08.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s074_output/n100.r08.s074.trimmed.sorted.bam" > "n100.r08.s074_output/n100.r08.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s074_output/n100.r08.s074.depth.txt" "n100.r08.s074_output/n100.r08.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s074_output/n100.r08.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s074_output/n100.r08.s074.reference.fas" | bcftools consensus -m "n100.r08.s074_output/n100.r08.s074.low_depth.tsv" tmp.vcf.gz > "n100.r08.s074_output/n100.r08.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e71ab01ae0092c845af71fc04dfce387dcb9c2a577dfe0d486e55abf708db416 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.0MiB max=127.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:27:15 scheduler task 787362b1 (flow 47bed039): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s074.tar.gz resources {}
2021/07/08 17:27:15  ->  n100.r08.s074.Main.cp_out_file 47bed039 exec extern s3://niema-test/n100/r08/n100.r08.s074.tar.gz 35.8MiB
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:15  <-  n100.r08.s090.Main.out_file 7c721fb5 ok     exec 4m57s 35.8MiB
2021/07/08 17:27:15 n100.r08.s090.Main.out_file 7c721fb5 n100/r08/n100.r08.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2709e14e2fed1aaee194880aea4c29b3686d3749686d2c8035ebfb7ecfcaa5c5
	sha256:7c721fb5bb856badf6b9f3c1f6130c1147a8fc7c3cf27a00c47a37114228702a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ef32d5104995297d162ac7f01bfb772c370ee670abac3f3f8187dcea15e2c5f9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s090_output"
	    wget -O "n100.r08.s090_output/n100.r08.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s090_output/n100.r08.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s090_output/n100.r08.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s090_output/n100.r08.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s090_output/n100.r08.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s090_output/n100.r08.s090.reference.fas" "n100.r08.s090_output/n100.r08.s090.fq1.fastq" "n100.r08.s090_output/n100.r08.s090.fq2.fastq" | samtools view -bS - > "n100.r08.s090_output/n100.r08.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s090_output/n100.r08.s090.untrimmed.sorted.bam" "n100.r08.s090_output/n100.r08.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s090_output/n100.r08.s090.untrimmed.sorted.bam" -b "n100.r08.s090_output/n100.r08.s090.primers.bed" -p "n100.r08.s090_output/n100.r08.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" "n100.r08.s090_output/n100.r08.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s090_output/n100.r08.s090.reference.fas" "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" > "n100.r08.s090_output/n100.r08.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s090_output/n100.r08.s090.reference.fas" --call-indels "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" > "n100.r08.s090_output/n100.r08.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s090_output/n100.r08.s090.trimmed.sorted.bam" > "n100.r08.s090_output/n100.r08.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s090_output/n100.r08.s090.depth.txt" "n100.r08.s090_output/n100.r08.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s090_output/n100.r08.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s090_output/n100.r08.s090.reference.fas" | bcftools consensus -m "n100.r08.s090_output/n100.r08.s090.low_depth.tsv" tmp.vcf.gz > "n100.r08.s090_output/n100.r08.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9e3ac426b804af8e3f4346334182d15d95eb206921262eb74175009bf2480071 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.7MiB max=128.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:27:15 scheduler task 589abeff (flow 2fb2889b): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s090.tar.gz resources {}
2021/07/08 17:27:15  ->  n100.r08.s090.Main.cp_out_file 2fb2889b exec extern s3://niema-test/n100/r08/n100.r08.s090.tar.gz 35.8MiB
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): retrieving diagnostic output (try 0): started
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): retrieving result (try 0): started
2021/07/08 17:27:15 scheduler task 1b077504 (flow 6f073daa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bd17d22a2e4b562ec0f06284cfd54e13e2f06b4cb07bf54413050aca968c8702 -> s3://niema-test/n100/r08/n100.r08.s035.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:15  <-  n100.r08.s035.Main.cp_out_file 6f073daa ok   extern 0s 35.8MiB
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:15 scheduler task 55bfb398 (flow ad6bd26e): transferring output (try 0): started
2021/07/08 17:27:16 scheduler task 787362b1 (flow 47bed039): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e71ab01ae0092c845af71fc04dfce387dcb9c2a577dfe0d486e55abf708db416 -> s3://niema-test/n100/r08/n100.r08.s074.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:16  <-  n100.r08.s074.Main.cp_out_file 47bed039 ok   extern 0s 35.8MiB
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:16 scheduler task 589abeff (flow 2fb2889b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9e3ac426b804af8e3f4346334182d15d95eb206921262eb74175009bf2480071 -> s3://niema-test/n100/r08/n100.r08.s090.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:16  <-  n100.r08.s090.Main.cp_out_file 2fb2889b ok   extern 0s 35.8MiB
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloading (try 0): started
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloading list<val<.=16aa4a39 35.7MiB> 35.7MiB>
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloading val<.=72e3d570 35.4MiB>
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloading val<.=1fe0352e 35.4MiB>
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloaded val<.=1fe0352e 35.4MiB>
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloaded val<.=72e3d570 35.4MiB>
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloaded list<val<.=16aa4a39 35.7MiB> 35.7MiB>
2021/07/08 17:27:16 scheduler task 55bfb398 (flow ad6bd26e): unloading (try 0): successful, next state: complete
2021/07/08 17:27:16  <-  n100.r08.s079.Main.out_file ad6bd26e ok     exec 4m58s 35.7MiB
2021/07/08 17:27:16 n100.r08.s079.Main.out_file ad6bd26e n100/r08/n100.r08.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d64b7a67977b8ec79d47836abdb5281b36724a95a77989aeff57c1fca722f115
	sha256:ad6bd26ebfdb2c08611c7552ea323a0570735ba52b62fac5f6441d2bd5c803a3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/55bfb398130cabbe86f9cbd2614a36a9ebd66fa9fbec7e0b01848fab8a443c2c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s079_output"
	    wget -O "n100.r08.s079_output/n100.r08.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s079_output/n100.r08.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s079_output/n100.r08.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s079_output/n100.r08.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s079_output/n100.r08.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s079_output/n100.r08.s079.reference.fas" "n100.r08.s079_output/n100.r08.s079.fq1.fastq" "n100.r08.s079_output/n100.r08.s079.fq2.fastq" | samtools view -bS - > "n100.r08.s079_output/n100.r08.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s079_output/n100.r08.s079.untrimmed.sorted.bam" "n100.r08.s079_output/n100.r08.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s079_output/n100.r08.s079.untrimmed.sorted.bam" -b "n100.r08.s079_output/n100.r08.s079.primers.bed" -p "n100.r08.s079_output/n100.r08.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" "n100.r08.s079_output/n100.r08.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s079_output/n100.r08.s079.reference.fas" "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" > "n100.r08.s079_output/n100.r08.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s079_output/n100.r08.s079.reference.fas" --call-indels "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" > "n100.r08.s079_output/n100.r08.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s079_output/n100.r08.s079.trimmed.sorted.bam" > "n100.r08.s079_output/n100.r08.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s079_output/n100.r08.s079.depth.txt" "n100.r08.s079_output/n100.r08.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s079_output/n100.r08.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s079_output/n100.r08.s079.reference.fas" | bcftools consensus -m "n100.r08.s079_output/n100.r08.s079.low_depth.tsv" tmp.vcf.gz > "n100.r08.s079_output/n100.r08.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:16aa4a39c2f7756bcafb2691c5f8ba330196421845798e358a4b10dd757549c2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=126.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 17:27:16 scheduler task b1d00d9a (flow b7dddf78): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s079.tar.gz resources {}
2021/07/08 17:27:16  ->  n100.r08.s079.Main.cp_out_file b7dddf78 exec extern s3://niema-test/n100/r08/n100.r08.s079.tar.gz 35.7MiB
2021/07/08 17:27:16 scheduler task d1b0c57e (flow 769f8790): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:16 scheduler task d1b0c57e (flow 769f8790): promoting objects (try 0): started
2021/07/08 17:27:16 scheduler task d1b0c57e (flow 769f8790): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:16 scheduler task d1b0c57e (flow 769f8790): retrieving diagnostic output (try 0): started
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): retrieving result (try 0): started
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): transferring output (try 0): started
2021/07/08 17:27:17 scheduler task b1d00d9a (flow b7dddf78): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:16aa4a39c2f7756bcafb2691c5f8ba330196421845798e358a4b10dd757549c2 -> s3://niema-test/n100/r08/n100.r08.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:17  <-  n100.r08.s079.Main.cp_out_file b7dddf78 ok   extern 0s 35.7MiB
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloading (try 0): started
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloading list<val<.=2712ec3a 35.8MiB> 35.8MiB>
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloading val<.=92c04ff6 35.4MiB>
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloading val<.=c8aa4257 35.4MiB>
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloaded val<.=92c04ff6 35.4MiB>
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloaded list<val<.=2712ec3a 35.8MiB> 35.8MiB>
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloaded val<.=c8aa4257 35.4MiB>
2021/07/08 17:27:17 scheduler task d1b0c57e (flow 769f8790): unloading (try 0): successful, next state: complete
2021/07/08 17:27:17  <-  n100.r08.s013.Main.out_file 769f8790 ok     exec 4m59s 35.8MiB
2021/07/08 17:27:17 n100.r08.s013.Main.out_file 769f8790 n100/r08/n100.r08.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca0100a82576b7abbe89330e6f38bc20c3357bc303a6e4bd40a5ebea5fe34388
	sha256:769f87902af990c9146d0f96548faa5ecc3a0c80c357226ff2f5f78a2ee8fe9d
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d1b0c57e7a546ab72adcb6e270b035bc610f4082fdce12fa8d3622f42277cbe4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s013_output"
	    wget -O "n100.r08.s013_output/n100.r08.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s013_output/n100.r08.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s013_output/n100.r08.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s013_output/n100.r08.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s013_output/n100.r08.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s013_output/n100.r08.s013.reference.fas" "n100.r08.s013_output/n100.r08.s013.fq1.fastq" "n100.r08.s013_output/n100.r08.s013.fq2.fastq" | samtools view -bS - > "n100.r08.s013_output/n100.r08.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s013_output/n100.r08.s013.untrimmed.sorted.bam" "n100.r08.s013_output/n100.r08.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s013_output/n100.r08.s013.untrimmed.sorted.bam" -b "n100.r08.s013_output/n100.r08.s013.primers.bed" -p "n100.r08.s013_output/n100.r08.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" "n100.r08.s013_output/n100.r08.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s013_output/n100.r08.s013.reference.fas" "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" > "n100.r08.s013_output/n100.r08.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s013_output/n100.r08.s013.reference.fas" --call-indels "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" > "n100.r08.s013_output/n100.r08.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s013_output/n100.r08.s013.trimmed.sorted.bam" > "n100.r08.s013_output/n100.r08.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s013_output/n100.r08.s013.depth.txt" "n100.r08.s013_output/n100.r08.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s013_output/n100.r08.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s013_output/n100.r08.s013.reference.fas" | bcftools consensus -m "n100.r08.s013_output/n100.r08.s013.low_depth.tsv" tmp.vcf.gz > "n100.r08.s013_output/n100.r08.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2712ec3a35a0426b7de0015183e262a1426b2280448fec07093811273cba7bd3 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.9MiB max=127.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 17:27:17 scheduler task 5cc5ee4a (flow 0fc88f05): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s013.tar.gz resources {}
2021/07/08 17:27:17  ->  n100.r08.s013.Main.cp_out_file 0fc88f05 exec extern s3://niema-test/n100/r08/n100.r08.s013.tar.gz 35.8MiB
2021/07/08 17:27:18 scheduler task 5cc5ee4a (flow 0fc88f05): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2712ec3a35a0426b7de0015183e262a1426b2280448fec07093811273cba7bd3 -> s3://niema-test/n100/r08/n100.r08.s013.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:18  <-  n100.r08.s013.Main.cp_out_file 0fc88f05 ok   extern 0s 35.8MiB
2021/07/08 17:27:21 scheduler task 61314efc (flow eeef90ae): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:21 scheduler task 61314efc (flow eeef90ae): promoting objects (try 0): started
2021/07/08 17:27:21 scheduler task 61314efc (flow eeef90ae): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:21 scheduler task 61314efc (flow eeef90ae): retrieving diagnostic output (try 0): started
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): promoting objects (try 0): started
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): retrieving result (try 0): started
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): retrieving diagnostic output (try 0): started
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): transferring output (try 0): started
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): retrieving result (try 0): started
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): transferring output (try 0): started
2021/07/08 17:27:22 scheduler task cef151a9 (flow ae810609): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:22 scheduler task cef151a9 (flow ae810609): promoting objects (try 0): started
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloading (try 0): started
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloading list<val<.=4e2812cf 35.8MiB> 35.8MiB>
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloading val<.=9e30de33 35.4MiB>
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloading val<.=89e562fd 35.4MiB>
2021/07/08 17:27:22 scheduler task cef151a9 (flow ae810609): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:22 scheduler task cef151a9 (flow ae810609): retrieving diagnostic output (try 0): started
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloaded val<.=89e562fd 35.4MiB>
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloaded list<val<.=4e2812cf 35.8MiB> 35.8MiB>
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloaded val<.=9e30de33 35.4MiB>
2021/07/08 17:27:22 scheduler task 61314efc (flow eeef90ae): unloading (try 0): successful, next state: complete
2021/07/08 17:27:22  <-  n100.r08.s033.Main.out_file eeef90ae ok     exec 5m2s 35.8MiB
2021/07/08 17:27:22 n100.r08.s033.Main.out_file eeef90ae n100/r08/n100.r08.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:98f9fcb9ac8d80a325b821bbbfc83400512081e101b294ed617c5db73e692bcb
	sha256:eeef90ae4d22378254f879a6d207dc6fe35b9f90ea941caf3a43afde94332da0
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/61314efc237f3009856d90d39b1c00c44f6a1477bbcaa7dddf68c1fdd27183d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s033_output"
	    wget -O "n100.r08.s033_output/n100.r08.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s033_output/n100.r08.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s033_output/n100.r08.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s033_output/n100.r08.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s033_output/n100.r08.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s033_output/n100.r08.s033.reference.fas" "n100.r08.s033_output/n100.r08.s033.fq1.fastq" "n100.r08.s033_output/n100.r08.s033.fq2.fastq" | samtools view -bS - > "n100.r08.s033_output/n100.r08.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s033_output/n100.r08.s033.untrimmed.sorted.bam" "n100.r08.s033_output/n100.r08.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s033_output/n100.r08.s033.untrimmed.sorted.bam" -b "n100.r08.s033_output/n100.r08.s033.primers.bed" -p "n100.r08.s033_output/n100.r08.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" "n100.r08.s033_output/n100.r08.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s033_output/n100.r08.s033.reference.fas" "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" > "n100.r08.s033_output/n100.r08.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s033_output/n100.r08.s033.reference.fas" --call-indels "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" > "n100.r08.s033_output/n100.r08.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s033_output/n100.r08.s033.trimmed.sorted.bam" > "n100.r08.s033_output/n100.r08.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s033_output/n100.r08.s033.depth.txt" "n100.r08.s033_output/n100.r08.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s033_output/n100.r08.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s033_output/n100.r08.s033.reference.fas" | bcftools consensus -m "n100.r08.s033_output/n100.r08.s033.low_depth.tsv" tmp.vcf.gz > "n100.r08.s033_output/n100.r08.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4e2812cf6bfa2c80bf985db2b3cb1230c6aba2136dbeafcf032a41fbee834b2f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.5MiB max=125.7MiB
	    disk mean=6.6MiB max=35.8MiB
	    tmp mean=349B max=1.0KiB
2021/07/08 17:27:22 scheduler task 18d70184 (flow fccce8b1): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s033.tar.gz resources {}
2021/07/08 17:27:22  ->  n100.r08.s033.Main.cp_out_file fccce8b1 exec extern s3://niema-test/n100/r08/n100.r08.s033.tar.gz 35.8MiB
2021/07/08 17:27:22 scheduler task 0e91bc71 (flow ac83cb33): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloading (try 0): started
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloading list<val<.=5f90ea4d 35.7MiB> 35.7MiB>
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloading val<.=6832aa33 35.4MiB>
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloading val<.=c276bebb 35.4MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): retrieving result (try 0): started
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloaded val<.=c276bebb 35.4MiB>
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloaded val<.=6832aa33 35.4MiB>
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloaded list<val<.=5f90ea4d 35.7MiB> 35.7MiB>
2021/07/08 17:27:23 scheduler task 0e91bc71 (flow ac83cb33): unloading (try 0): successful, next state: complete
2021/07/08 17:27:23  <-  n100.r08.s065.Main.out_file ac83cb33 ok     exec 5m4s 35.7MiB
2021/07/08 17:27:23 n100.r08.s065.Main.out_file ac83cb33 n100/r08/n100.r08.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b15172ebe2d67d21cdc1a212a90908e2b5958c917c91cdcf10bc1722baea77ea
	sha256:ac83cb33690caa4355c11458e7d9d8bc588c640e92d3909884b481eaebd7cdf2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e91bc7176b4369bb6495f8272f837e3a05063f86b5207df32daaf79354e196b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s065_output"
	    wget -O "n100.r08.s065_output/n100.r08.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s065_output/n100.r08.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s065_output/n100.r08.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s065_output/n100.r08.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s065_output/n100.r08.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s065_output/n100.r08.s065.reference.fas" "n100.r08.s065_output/n100.r08.s065.fq1.fastq" "n100.r08.s065_output/n100.r08.s065.fq2.fastq" | samtools view -bS - > "n100.r08.s065_output/n100.r08.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s065_output/n100.r08.s065.untrimmed.sorted.bam" "n100.r08.s065_output/n100.r08.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s065_output/n100.r08.s065.untrimmed.sorted.bam" -b "n100.r08.s065_output/n100.r08.s065.primers.bed" -p "n100.r08.s065_output/n100.r08.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" "n100.r08.s065_output/n100.r08.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s065_output/n100.r08.s065.reference.fas" "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" > "n100.r08.s065_output/n100.r08.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s065_output/n100.r08.s065.reference.fas" --call-indels "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" > "n100.r08.s065_output/n100.r08.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s065_output/n100.r08.s065.trimmed.sorted.bam" > "n100.r08.s065_output/n100.r08.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s065_output/n100.r08.s065.depth.txt" "n100.r08.s065_output/n100.r08.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s065_output/n100.r08.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s065_output/n100.r08.s065.reference.fas" | bcftools consensus -m "n100.r08.s065_output/n100.r08.s065.low_depth.tsv" tmp.vcf.gz > "n100.r08.s065_output/n100.r08.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5f90ea4d63420c2f142a5fe3525b793d0258431db2f1c929dabe90788ee9d439 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=18.6MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:27:23 scheduler task 6089bcb0 (flow 4dc5f31b): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s065.tar.gz resources {}
2021/07/08 17:27:23  ->  n100.r08.s065.Main.cp_out_file 4dc5f31b exec extern s3://niema-test/n100/r08/n100.r08.s065.tar.gz 35.7MiB
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): transferring output (try 0): started
2021/07/08 17:27:23 scheduler task 18d70184 (flow fccce8b1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4e2812cf6bfa2c80bf985db2b3cb1230c6aba2136dbeafcf032a41fbee834b2f -> s3://niema-test/n100/r08/n100.r08.s033.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:23  <-  n100.r08.s033.Main.cp_out_file fccce8b1 ok   extern 0s 35.8MiB
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloading (try 0): started
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloading list<val<.=a66a58b5 35.7MiB> 35.7MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloading val<.=92f4626a 35.4MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloading val<.=5363db87 35.4MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloaded list<val<.=a66a58b5 35.7MiB> 35.7MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloaded val<.=5363db87 35.4MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloaded val<.=92f4626a 35.4MiB>
2021/07/08 17:27:23 scheduler task cef151a9 (flow ae810609): unloading (try 0): successful, next state: complete
2021/07/08 17:27:23  <-  n100.r08.s096.Main.out_file ae810609 ok     exec 5m5s 35.7MiB
2021/07/08 17:27:23 n100.r08.s096.Main.out_file ae810609 n100/r08/n100.r08.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:47d098d08bb3d2faf09b554213e7b856582dc0893ca86b52228f445dec346bf6
	sha256:ae810609a343778179413aef4483b65bc9dc9a94658578a519fee4178de94f1a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cef151a942fa95a5fe11b09520658fda4c999cbf9e875d2869b84c425a8b2786
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s096_output"
	    wget -O "n100.r08.s096_output/n100.r08.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s096_output/n100.r08.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s096_output/n100.r08.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s096_output/n100.r08.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s096_output/n100.r08.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s096_output/n100.r08.s096.reference.fas" "n100.r08.s096_output/n100.r08.s096.fq1.fastq" "n100.r08.s096_output/n100.r08.s096.fq2.fastq" | samtools view -bS - > "n100.r08.s096_output/n100.r08.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s096_output/n100.r08.s096.untrimmed.sorted.bam" "n100.r08.s096_output/n100.r08.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s096_output/n100.r08.s096.untrimmed.sorted.bam" -b "n100.r08.s096_output/n100.r08.s096.primers.bed" -p "n100.r08.s096_output/n100.r08.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" "n100.r08.s096_output/n100.r08.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s096_output/n100.r08.s096.reference.fas" "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" > "n100.r08.s096_output/n100.r08.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s096_output/n100.r08.s096.reference.fas" --call-indels "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" > "n100.r08.s096_output/n100.r08.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s096_output/n100.r08.s096.trimmed.sorted.bam" > "n100.r08.s096_output/n100.r08.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s096_output/n100.r08.s096.depth.txt" "n100.r08.s096_output/n100.r08.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s096_output/n100.r08.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s096_output/n100.r08.s096.reference.fas" | bcftools consensus -m "n100.r08.s096_output/n100.r08.s096.low_depth.tsv" tmp.vcf.gz > "n100.r08.s096_output/n100.r08.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a66a58b599f21814c0e2d673050cd3fca7c80e6d9e034de96175d94e59e0bd06 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=18.4MiB max=125.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:27:23 scheduler task 8a6681d5 (flow 88615ab8): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s096.tar.gz resources {}
2021/07/08 17:27:23  ->  n100.r08.s096.Main.cp_out_file 88615ab8 exec extern s3://niema-test/n100/r08/n100.r08.s096.tar.gz 35.7MiB
2021/07/08 17:27:24 scheduler task 6089bcb0 (flow 4dc5f31b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5f90ea4d63420c2f142a5fe3525b793d0258431db2f1c929dabe90788ee9d439 -> s3://niema-test/n100/r08/n100.r08.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:24  <-  n100.r08.s065.Main.cp_out_file 4dc5f31b ok   extern 0s 35.7MiB
2021/07/08 17:27:24 scheduler task 8a6681d5 (flow 88615ab8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a66a58b599f21814c0e2d673050cd3fca7c80e6d9e034de96175d94e59e0bd06 -> s3://niema-test/n100/r08/n100.r08.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:24  <-  n100.r08.s096.Main.cp_out_file 88615ab8 ok   extern 0s 35.7MiB
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): promoting objects (try 0): started
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): retrieving diagnostic output (try 0): started
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): retrieving result (try 0): started
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:31 scheduler task 96cdb789 (flow 37acff54): transferring output (try 0): started
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloading (try 0): started
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloading list<val<.=6d1ef2d1 35.7MiB> 35.7MiB>
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloading val<.=1584c541 35.4MiB>
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloading val<.=9007f4ae 35.4MiB>
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): promoting objects (try 0): started
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloaded list<val<.=6d1ef2d1 35.7MiB> 35.7MiB>
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloaded val<.=1584c541 35.4MiB>
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloaded val<.=9007f4ae 35.4MiB>
2021/07/08 17:27:32 scheduler task 96cdb789 (flow 37acff54): unloading (try 0): successful, next state: complete
2021/07/08 17:27:32  <-  n100.r08.s087.Main.out_file 37acff54 ok     exec 5m2s 35.7MiB
2021/07/08 17:27:32 n100.r08.s087.Main.out_file 37acff54 n100/r08/n100.r08.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f46d05aa14a63b4c36ee78496f965aead876d498962a607da934feeea17f228
	sha256:37acff54faf58f05bbb8e6d531c1a1016726c067b16a4b76f95e2ba64ef314e2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/96cdb789a1c14b30fe26336a98c003ffbbc1655471955a00a0467651d6ea4a75
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s087_output"
	    wget -O "n100.r08.s087_output/n100.r08.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s087_output/n100.r08.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s087_output/n100.r08.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s087_output/n100.r08.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s087_output/n100.r08.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s087_output/n100.r08.s087.reference.fas" "n100.r08.s087_output/n100.r08.s087.fq1.fastq" "n100.r08.s087_output/n100.r08.s087.fq2.fastq" | samtools view -bS - > "n100.r08.s087_output/n100.r08.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s087_output/n100.r08.s087.untrimmed.sorted.bam" "n100.r08.s087_output/n100.r08.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s087_output/n100.r08.s087.untrimmed.sorted.bam" -b "n100.r08.s087_output/n100.r08.s087.primers.bed" -p "n100.r08.s087_output/n100.r08.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" "n100.r08.s087_output/n100.r08.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s087_output/n100.r08.s087.reference.fas" "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" > "n100.r08.s087_output/n100.r08.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s087_output/n100.r08.s087.reference.fas" --call-indels "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" > "n100.r08.s087_output/n100.r08.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s087_output/n100.r08.s087.trimmed.sorted.bam" > "n100.r08.s087_output/n100.r08.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s087_output/n100.r08.s087.depth.txt" "n100.r08.s087_output/n100.r08.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s087_output/n100.r08.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s087_output/n100.r08.s087.reference.fas" | bcftools consensus -m "n100.r08.s087_output/n100.r08.s087.low_depth.tsv" tmp.vcf.gz > "n100.r08.s087_output/n100.r08.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6d1ef2d1ca22b720f8e592db4a0a4b4555385d7119e5908b4bc3c88d1a73728a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.0MiB max=129.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:32 scheduler task 32b7262d (flow d7f0bbce): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s087.tar.gz resources {}
2021/07/08 17:27:32  ->  n100.r08.s087.Main.cp_out_file d7f0bbce exec extern s3://niema-test/n100/r08/n100.r08.s087.tar.gz 35.7MiB
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): retrieving diagnostic output (try 0): started
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): retrieving result (try 0): started
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): transferring output (try 0): started
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): promoting objects (try 0): started
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): retrieving diagnostic output (try 0): started
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): retrieving result (try 0): started
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:32 scheduler task 4990178e (flow eda0dc49): transferring output (try 0): started
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): unloading (try 0): started
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): unloading list<val<.=f1290a19 35.7MiB> 35.7MiB>
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): unloading val<.=a66b3d91 35.4MiB>
2021/07/08 17:27:32 scheduler task 264d0316 (flow 29e265bf): unloading val<.=107003ea 35.4MiB>
2021/07/08 17:27:33 scheduler task 264d0316 (flow 29e265bf): unloaded val<.=107003ea 35.4MiB>
2021/07/08 17:27:33 scheduler task 264d0316 (flow 29e265bf): unloaded list<val<.=f1290a19 35.7MiB> 35.7MiB>
2021/07/08 17:27:33 scheduler task 264d0316 (flow 29e265bf): unloaded val<.=a66b3d91 35.4MiB>
2021/07/08 17:27:33 scheduler task 264d0316 (flow 29e265bf): unloading (try 0): successful, next state: complete
2021/07/08 17:27:33  <-  n100.r08.s040.Main.out_file 29e265bf ok     exec 5m6s 35.7MiB
2021/07/08 17:27:33 n100.r08.s040.Main.out_file 29e265bf n100/r08/n100.r08.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a26e643fdfdab97375b17e6349d84250985381304b00de14b5cf2cbfaa032e66
	sha256:29e265bfa49596228dcf2a52fd77c07a48c112b26f1c38f1c1b12c753a7e446e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/264d031622314d13bb4d42ff576050d492cf1748e646c036642505a75f985b17
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s040_output"
	    wget -O "n100.r08.s040_output/n100.r08.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s040_output/n100.r08.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s040_output/n100.r08.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s040_output/n100.r08.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s040_output/n100.r08.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s040_output/n100.r08.s040.reference.fas" "n100.r08.s040_output/n100.r08.s040.fq1.fastq" "n100.r08.s040_output/n100.r08.s040.fq2.fastq" | samtools view -bS - > "n100.r08.s040_output/n100.r08.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s040_output/n100.r08.s040.untrimmed.sorted.bam" "n100.r08.s040_output/n100.r08.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s040_output/n100.r08.s040.untrimmed.sorted.bam" -b "n100.r08.s040_output/n100.r08.s040.primers.bed" -p "n100.r08.s040_output/n100.r08.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" "n100.r08.s040_output/n100.r08.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s040_output/n100.r08.s040.reference.fas" "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" > "n100.r08.s040_output/n100.r08.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s040_output/n100.r08.s040.reference.fas" --call-indels "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" > "n100.r08.s040_output/n100.r08.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s040_output/n100.r08.s040.trimmed.sorted.bam" > "n100.r08.s040_output/n100.r08.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s040_output/n100.r08.s040.depth.txt" "n100.r08.s040_output/n100.r08.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s040_output/n100.r08.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s040_output/n100.r08.s040.reference.fas" | bcftools consensus -m "n100.r08.s040_output/n100.r08.s040.low_depth.tsv" tmp.vcf.gz > "n100.r08.s040_output/n100.r08.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f1290a195cfcd7cce7f6311172500ec1cc2673117b7616b87e1b9f57a3feb087 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.5MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=875B max=2.1KiB
2021/07/08 17:27:33 scheduler task 419902ca (flow 82475927): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s040.tar.gz resources {}
2021/07/08 17:27:33  ->  n100.r08.s040.Main.cp_out_file 82475927 exec extern s3://niema-test/n100/r08/n100.r08.s040.tar.gz 35.7MiB
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloading (try 0): started
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloading list<val<.=8058e245 35.7MiB> 35.7MiB>
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloading val<.=eec6b930 35.4MiB>
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloading val<.=3a7bb5e9 35.4MiB>
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloaded list<val<.=8058e245 35.7MiB> 35.7MiB>
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloaded val<.=eec6b930 35.4MiB>
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloaded val<.=3a7bb5e9 35.4MiB>
2021/07/08 17:27:33 scheduler task 4990178e (flow eda0dc49): unloading (try 0): successful, next state: complete
2021/07/08 17:27:33  <-  n100.r08.s031.Main.out_file eda0dc49 ok     exec 5m7s 35.7MiB
2021/07/08 17:27:33 n100.r08.s031.Main.out_file eda0dc49 n100/r08/n100.r08.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1543c3118f993f7283b74a9b9eb9d688f9b782c229b0dbf7d0a6df747038bcc3
	sha256:eda0dc492a69af6f16705efc2658308547c1dd7db8335286f983862728a9b6ce
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4990178e9f397070dfde4a9cd0b9dc34a414968b025513bb74132fb05f3b1284
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s031_output"
	    wget -O "n100.r08.s031_output/n100.r08.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s031_output/n100.r08.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s031_output/n100.r08.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s031_output/n100.r08.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s031_output/n100.r08.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s031_output/n100.r08.s031.reference.fas" "n100.r08.s031_output/n100.r08.s031.fq1.fastq" "n100.r08.s031_output/n100.r08.s031.fq2.fastq" | samtools view -bS - > "n100.r08.s031_output/n100.r08.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s031_output/n100.r08.s031.untrimmed.sorted.bam" "n100.r08.s031_output/n100.r08.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s031_output/n100.r08.s031.untrimmed.sorted.bam" -b "n100.r08.s031_output/n100.r08.s031.primers.bed" -p "n100.r08.s031_output/n100.r08.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" "n100.r08.s031_output/n100.r08.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s031_output/n100.r08.s031.reference.fas" "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" > "n100.r08.s031_output/n100.r08.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s031_output/n100.r08.s031.reference.fas" --call-indels "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" > "n100.r08.s031_output/n100.r08.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s031_output/n100.r08.s031.trimmed.sorted.bam" > "n100.r08.s031_output/n100.r08.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s031_output/n100.r08.s031.depth.txt" "n100.r08.s031_output/n100.r08.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s031_output/n100.r08.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s031_output/n100.r08.s031.reference.fas" | bcftools consensus -m "n100.r08.s031_output/n100.r08.s031.low_depth.tsv" tmp.vcf.gz > "n100.r08.s031_output/n100.r08.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8058e245ccbfd1da6b7250ef80b10566eae48aa3ebc46e31bbf389f40319a161 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.5MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 17:27:33 scheduler task b79a8eae (flow 9eba58a9): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s031.tar.gz resources {}
2021/07/08 17:27:33  ->  n100.r08.s031.Main.cp_out_file 9eba58a9 exec extern s3://niema-test/n100/r08/n100.r08.s031.tar.gz 35.7MiB
2021/07/08 17:27:33 scheduler task 32b7262d (flow d7f0bbce): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6d1ef2d1ca22b720f8e592db4a0a4b4555385d7119e5908b4bc3c88d1a73728a -> s3://niema-test/n100/r08/n100.r08.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:33  <-  n100.r08.s087.Main.cp_out_file d7f0bbce ok   extern 0s 35.7MiB
2021/07/08 17:27:33 scheduler task 419902ca (flow 82475927): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f1290a195cfcd7cce7f6311172500ec1cc2673117b7616b87e1b9f57a3feb087 -> s3://niema-test/n100/r08/n100.r08.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:33  <-  n100.r08.s040.Main.cp_out_file 82475927 ok   extern 0s 35.7MiB
2021/07/08 17:27:33 scheduler task a14d135e (flow 37c80ebd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:33 scheduler task a14d135e (flow 37c80ebd): promoting objects (try 0): started
2021/07/08 17:27:33 scheduler task a14d135e (flow 37c80ebd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:33 scheduler task a14d135e (flow 37c80ebd): retrieving diagnostic output (try 0): started
2021/07/08 17:27:33 scheduler task a14d135e (flow 37c80ebd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): retrieving result (try 0): started
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): transferring output (try 0): started
2021/07/08 17:27:34 scheduler task b79a8eae (flow 9eba58a9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8058e245ccbfd1da6b7250ef80b10566eae48aa3ebc46e31bbf389f40319a161 -> s3://niema-test/n100/r08/n100.r08.s031.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:34  <-  n100.r08.s031.Main.cp_out_file 9eba58a9 ok   extern 0s 35.7MiB
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloading (try 0): started
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloading list<val<.=82c50b90 35.7MiB> 35.7MiB>
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloading val<.=047973a7 35.4MiB>
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloading val<.=04cdfeb1 35.4MiB>
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloaded val<.=047973a7 35.4MiB>
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloaded list<val<.=82c50b90 35.7MiB> 35.7MiB>
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloaded val<.=04cdfeb1 35.4MiB>
2021/07/08 17:27:34 scheduler task a14d135e (flow 37c80ebd): unloading (try 0): successful, next state: complete
2021/07/08 17:27:34  <-  n100.r08.s002.Main.out_file 37c80ebd ok     exec 5m4s 35.7MiB
2021/07/08 17:27:34 n100.r08.s002.Main.out_file 37c80ebd n100/r08/n100.r08.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:316a5461297ccc6d7d6f957d5ef1d1460e49c7c45659e1da7f01ae5ca10e7588
	sha256:37c80ebd66ec77e05f01cd8baf053e4118330d633198c386964c03987a5ec756
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a14d135ec23507977e58c00c09c041909381aea1faa9c98032b5109ebe0b66bd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s002_output"
	    wget -O "n100.r08.s002_output/n100.r08.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s002_output/n100.r08.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s002_output/n100.r08.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s002_output/n100.r08.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s002_output/n100.r08.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s002_output/n100.r08.s002.reference.fas" "n100.r08.s002_output/n100.r08.s002.fq1.fastq" "n100.r08.s002_output/n100.r08.s002.fq2.fastq" | samtools view -bS - > "n100.r08.s002_output/n100.r08.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s002_output/n100.r08.s002.untrimmed.sorted.bam" "n100.r08.s002_output/n100.r08.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s002_output/n100.r08.s002.untrimmed.sorted.bam" -b "n100.r08.s002_output/n100.r08.s002.primers.bed" -p "n100.r08.s002_output/n100.r08.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" "n100.r08.s002_output/n100.r08.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s002_output/n100.r08.s002.reference.fas" "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" > "n100.r08.s002_output/n100.r08.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s002_output/n100.r08.s002.reference.fas" --call-indels "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" > "n100.r08.s002_output/n100.r08.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s002_output/n100.r08.s002.trimmed.sorted.bam" > "n100.r08.s002_output/n100.r08.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s002_output/n100.r08.s002.depth.txt" "n100.r08.s002_output/n100.r08.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s002_output/n100.r08.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s002_output/n100.r08.s002.reference.fas" | bcftools consensus -m "n100.r08.s002_output/n100.r08.s002.low_depth.tsv" tmp.vcf.gz > "n100.r08.s002_output/n100.r08.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:82c50b9040fcfd855afec7f418b86a38204dceb84ebe200ff4e50a2836c03d8d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.6MiB max=128.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:27:34 scheduler task 9bbedfca (flow f682de5a): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s002.tar.gz resources {}
2021/07/08 17:27:34  ->  n100.r08.s002.Main.cp_out_file f682de5a exec extern s3://niema-test/n100/r08/n100.r08.s002.tar.gz 35.7MiB
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): promoting objects (try 0): started
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): retrieving diagnostic output (try 0): started
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): retrieving result (try 0): started
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): transferring output (try 0): started
2021/07/08 17:27:35 scheduler task 9bbedfca (flow f682de5a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:82c50b9040fcfd855afec7f418b86a38204dceb84ebe200ff4e50a2836c03d8d -> s3://niema-test/n100/r08/n100.r08.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:35  <-  n100.r08.s002.Main.cp_out_file f682de5a ok   extern 0s 35.7MiB
2021/07/08 17:27:35 scheduler task bdd078c4 (flow 19f87377): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:35 scheduler task bdd078c4 (flow 19f87377): promoting objects (try 0): started
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): unloading (try 0): started
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): unloading list<val<.=b643296d 35.7MiB> 35.7MiB>
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): unloading val<.=f1d55b21 35.4MiB>
2021/07/08 17:27:35 scheduler task c04eb0c7 (flow 37139f88): unloading val<.=5b51018b 35.4MiB>
2021/07/08 17:27:35 scheduler task bdd078c4 (flow 19f87377): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:35 scheduler task bdd078c4 (flow 19f87377): retrieving diagnostic output (try 0): started
2021/07/08 17:27:36 scheduler task c04eb0c7 (flow 37139f88): unloaded val<.=5b51018b 35.4MiB>
2021/07/08 17:27:36 scheduler task c04eb0c7 (flow 37139f88): unloaded list<val<.=b643296d 35.7MiB> 35.7MiB>
2021/07/08 17:27:36 scheduler task c04eb0c7 (flow 37139f88): unloaded val<.=f1d55b21 35.4MiB>
2021/07/08 17:27:36 scheduler task c04eb0c7 (flow 37139f88): unloading (try 0): successful, next state: complete
2021/07/08 17:27:36  <-  n100.r08.s052.Main.out_file 37139f88 ok     exec 5m6s 35.7MiB
2021/07/08 17:27:36 n100.r08.s052.Main.out_file 37139f88 n100/r08/n100.r08.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07c4a7f5658b4a15481dc76d293a6859444848e0aaa32adee680cf6bab929824
	sha256:37139f886b25d0be584a8baa6e29bfcbe7ae940ed50a15d5c778a4e9cd395457
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c04eb0c7f9c3b7237141ae5c1d60f6970d834cfce0ef6369184d8e743d5ec4d1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s052_output"
	    wget -O "n100.r08.s052_output/n100.r08.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s052_output/n100.r08.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s052_output/n100.r08.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s052_output/n100.r08.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s052_output/n100.r08.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s052_output/n100.r08.s052.reference.fas" "n100.r08.s052_output/n100.r08.s052.fq1.fastq" "n100.r08.s052_output/n100.r08.s052.fq2.fastq" | samtools view -bS - > "n100.r08.s052_output/n100.r08.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s052_output/n100.r08.s052.untrimmed.sorted.bam" "n100.r08.s052_output/n100.r08.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s052_output/n100.r08.s052.untrimmed.sorted.bam" -b "n100.r08.s052_output/n100.r08.s052.primers.bed" -p "n100.r08.s052_output/n100.r08.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" "n100.r08.s052_output/n100.r08.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s052_output/n100.r08.s052.reference.fas" "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" > "n100.r08.s052_output/n100.r08.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s052_output/n100.r08.s052.reference.fas" --call-indels "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" > "n100.r08.s052_output/n100.r08.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s052_output/n100.r08.s052.trimmed.sorted.bam" > "n100.r08.s052_output/n100.r08.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s052_output/n100.r08.s052.depth.txt" "n100.r08.s052_output/n100.r08.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s052_output/n100.r08.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s052_output/n100.r08.s052.reference.fas" | bcftools consensus -m "n100.r08.s052_output/n100.r08.s052.low_depth.tsv" tmp.vcf.gz > "n100.r08.s052_output/n100.r08.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b643296dcef8a5a73d297ebc40ae7103f223d4e52941a96fd37e7344a9b62908 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=873B max=2.1KiB
2021/07/08 17:27:36 scheduler task 84562843 (flow 9c19a564): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s052.tar.gz resources {}
2021/07/08 17:27:36  ->  n100.r08.s052.Main.cp_out_file 9c19a564 exec extern s3://niema-test/n100/r08/n100.r08.s052.tar.gz 35.7MiB
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): retrieving result (try 0): started
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): transferring output (try 0): started
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): promoting objects (try 0): started
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): retrieving diagnostic output (try 0): started
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): retrieving result (try 0): started
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloading (try 0): started
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloading list<val<.=0491c52a 35.7MiB> 35.7MiB>
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloading val<.=ca9b9ecc 35.4MiB>
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloading val<.=bb7baeb9 35.4MiB>
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:36 scheduler task a660f2ec (flow abfbfcf5): transferring output (try 0): started
2021/07/08 17:27:36 scheduler task 84562843 (flow 9c19a564): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b643296dcef8a5a73d297ebc40ae7103f223d4e52941a96fd37e7344a9b62908 -> s3://niema-test/n100/r08/n100.r08.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:36  <-  n100.r08.s052.Main.cp_out_file 9c19a564 ok   extern 0s 35.7MiB
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloaded list<val<.=0491c52a 35.7MiB> 35.7MiB>
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloaded val<.=bb7baeb9 35.4MiB>
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloaded val<.=ca9b9ecc 35.4MiB>
2021/07/08 17:27:36 scheduler task bdd078c4 (flow 19f87377): unloading (try 0): successful, next state: complete
2021/07/08 17:27:36  <-  n100.r08.s037.Main.out_file 19f87377 ok     exec 5m7s 35.7MiB
2021/07/08 17:27:36 n100.r08.s037.Main.out_file 19f87377 n100/r08/n100.r08.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4a09ad1d4683764bc228ccb36d5594a1e540d2dcf500cb5177e9a7417a46f6d4
	sha256:19f8737731103fbbcc622ea6a9ed08d9b3eb3c0604789f05f8d7539909beae1a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bdd078c4c3f73f350a33b24f31383a135738df5e253330fb727fa5b0a956b43b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s037_output"
	    wget -O "n100.r08.s037_output/n100.r08.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s037_output/n100.r08.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s037_output/n100.r08.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s037_output/n100.r08.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s037_output/n100.r08.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s037_output/n100.r08.s037.reference.fas" "n100.r08.s037_output/n100.r08.s037.fq1.fastq" "n100.r08.s037_output/n100.r08.s037.fq2.fastq" | samtools view -bS - > "n100.r08.s037_output/n100.r08.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s037_output/n100.r08.s037.untrimmed.sorted.bam" "n100.r08.s037_output/n100.r08.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s037_output/n100.r08.s037.untrimmed.sorted.bam" -b "n100.r08.s037_output/n100.r08.s037.primers.bed" -p "n100.r08.s037_output/n100.r08.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" "n100.r08.s037_output/n100.r08.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s037_output/n100.r08.s037.reference.fas" "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" > "n100.r08.s037_output/n100.r08.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s037_output/n100.r08.s037.reference.fas" --call-indels "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" > "n100.r08.s037_output/n100.r08.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s037_output/n100.r08.s037.trimmed.sorted.bam" > "n100.r08.s037_output/n100.r08.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s037_output/n100.r08.s037.depth.txt" "n100.r08.s037_output/n100.r08.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s037_output/n100.r08.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s037_output/n100.r08.s037.reference.fas" | bcftools consensus -m "n100.r08.s037_output/n100.r08.s037.low_depth.tsv" tmp.vcf.gz > "n100.r08.s037_output/n100.r08.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0491c52a15dd521e27c75483edb6101d603900b44af96f595df7006501a47d72 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.9MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:27:36 scheduler task db585eab (flow b301e1d0): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s037.tar.gz resources {}
2021/07/08 17:27:36  ->  n100.r08.s037.Main.cp_out_file b301e1d0 exec extern s3://niema-test/n100/r08/n100.r08.s037.tar.gz 35.7MiB
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloading (try 0): started
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloading list<val<.=187cc8a9 35.7MiB> 35.7MiB>
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloading val<.=cfe18868 35.4MiB>
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloading val<.=9b864141 35.4MiB>
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloaded list<val<.=187cc8a9 35.7MiB> 35.7MiB>
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloaded val<.=9b864141 35.4MiB>
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloaded val<.=cfe18868 35.4MiB>
2021/07/08 17:27:37 scheduler task a660f2ec (flow abfbfcf5): unloading (try 0): successful, next state: complete
2021/07/08 17:27:37  <-  n100.r08.s003.Main.out_file abfbfcf5 ok     exec 5m9s 35.7MiB
2021/07/08 17:27:37 n100.r08.s003.Main.out_file abfbfcf5 n100/r08/n100.r08.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:abed775d4a80959d684930d407c68897ab1047f71eddea192484fdb7d3018edc
	sha256:abfbfcf5f0ef386445e969ad87af5a3765a7488317c1ea027207f6316787ec59
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a660f2ec42102d426bd88abb3f8bf05a16c25801cd36fc607fd8ceb3c667d24d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s003_output"
	    wget -O "n100.r08.s003_output/n100.r08.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s003_output/n100.r08.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s003_output/n100.r08.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s003_output/n100.r08.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s003_output/n100.r08.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s003_output/n100.r08.s003.reference.fas" "n100.r08.s003_output/n100.r08.s003.fq1.fastq" "n100.r08.s003_output/n100.r08.s003.fq2.fastq" | samtools view -bS - > "n100.r08.s003_output/n100.r08.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s003_output/n100.r08.s003.untrimmed.sorted.bam" "n100.r08.s003_output/n100.r08.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s003_output/n100.r08.s003.untrimmed.sorted.bam" -b "n100.r08.s003_output/n100.r08.s003.primers.bed" -p "n100.r08.s003_output/n100.r08.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" "n100.r08.s003_output/n100.r08.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s003_output/n100.r08.s003.reference.fas" "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" > "n100.r08.s003_output/n100.r08.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s003_output/n100.r08.s003.reference.fas" --call-indels "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" > "n100.r08.s003_output/n100.r08.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s003_output/n100.r08.s003.trimmed.sorted.bam" > "n100.r08.s003_output/n100.r08.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s003_output/n100.r08.s003.depth.txt" "n100.r08.s003_output/n100.r08.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s003_output/n100.r08.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s003_output/n100.r08.s003.reference.fas" | bcftools consensus -m "n100.r08.s003_output/n100.r08.s003.low_depth.tsv" tmp.vcf.gz > "n100.r08.s003_output/n100.r08.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:187cc8a95c11e74b076104164b7fc4805390162046c936b78e5aae570294ba4d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.8MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:27:37 scheduler task 135ec28a (flow 059f2578): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s003.tar.gz resources {}
2021/07/08 17:27:37  ->  n100.r08.s003.Main.cp_out_file 059f2578 exec extern s3://niema-test/n100/r08/n100.r08.s003.tar.gz 35.7MiB
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): promoting objects (try 0): started
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): retrieving diagnostic output (try 0): started
2021/07/08 17:27:37 scheduler task db585eab (flow b301e1d0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0491c52a15dd521e27c75483edb6101d603900b44af96f595df7006501a47d72 -> s3://niema-test/n100/r08/n100.r08.s037.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:37  <-  n100.r08.s037.Main.cp_out_file b301e1d0 ok   extern 0s 35.7MiB
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): retrieving result (try 0): started
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:37 scheduler task 7e57f1b6 (flow 8e45de36): transferring output (try 0): started
2021/07/08 17:27:37 scheduler task d990b33b (flow 4f4f56d4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:37 scheduler task d990b33b (flow 4f4f56d4): promoting objects (try 0): started
2021/07/08 17:27:37 scheduler task d990b33b (flow 4f4f56d4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:37 scheduler task d990b33b (flow 4f4f56d4): retrieving diagnostic output (try 0): started
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): retrieving result (try 0): started
2021/07/08 17:27:38 scheduler task 135ec28a (flow 059f2578): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:187cc8a95c11e74b076104164b7fc4805390162046c936b78e5aae570294ba4d -> s3://niema-test/n100/r08/n100.r08.s003.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:38  <-  n100.r08.s003.Main.cp_out_file 059f2578 ok   extern 0s 35.7MiB
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloading (try 0): started
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloading list<val<.=4d0a91a6 35.7MiB> 35.7MiB>
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloading val<.=b476b33e 35.4MiB>
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloading val<.=9a7e7afc 35.4MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): transferring output (try 0): started
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloaded val<.=b476b33e 35.4MiB>
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloaded list<val<.=4d0a91a6 35.7MiB> 35.7MiB>
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloaded val<.=9a7e7afc 35.4MiB>
2021/07/08 17:27:38 scheduler task 7e57f1b6 (flow 8e45de36): unloading (try 0): successful, next state: complete
2021/07/08 17:27:38  <-  n100.r08.s026.Main.out_file 8e45de36 ok     exec 5m8s 35.7MiB
2021/07/08 17:27:38 n100.r08.s026.Main.out_file 8e45de36 n100/r08/n100.r08.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:be6bb4db30971cdf5b78598a0589c76c4523eef0a7a8a13c0c4b894c7226b68e
	sha256:8e45de36719300572aa1abc73de53cb00175140fb16aab1c73238b60f372a9aa
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7e57f1b6eb1099894a15cf2302cf370f39c0756982e7b8dfe255a91e5607d253
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s026_output"
	    wget -O "n100.r08.s026_output/n100.r08.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s026_output/n100.r08.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s026_output/n100.r08.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s026_output/n100.r08.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s026_output/n100.r08.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s026_output/n100.r08.s026.reference.fas" "n100.r08.s026_output/n100.r08.s026.fq1.fastq" "n100.r08.s026_output/n100.r08.s026.fq2.fastq" | samtools view -bS - > "n100.r08.s026_output/n100.r08.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s026_output/n100.r08.s026.untrimmed.sorted.bam" "n100.r08.s026_output/n100.r08.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s026_output/n100.r08.s026.untrimmed.sorted.bam" -b "n100.r08.s026_output/n100.r08.s026.primers.bed" -p "n100.r08.s026_output/n100.r08.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" "n100.r08.s026_output/n100.r08.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s026_output/n100.r08.s026.reference.fas" "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" > "n100.r08.s026_output/n100.r08.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s026_output/n100.r08.s026.reference.fas" --call-indels "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" > "n100.r08.s026_output/n100.r08.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s026_output/n100.r08.s026.trimmed.sorted.bam" > "n100.r08.s026_output/n100.r08.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s026_output/n100.r08.s026.depth.txt" "n100.r08.s026_output/n100.r08.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s026_output/n100.r08.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s026_output/n100.r08.s026.reference.fas" | bcftools consensus -m "n100.r08.s026_output/n100.r08.s026.low_depth.tsv" tmp.vcf.gz > "n100.r08.s026_output/n100.r08.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4d0a91a68cccea48bc49e0030d7c4b5e4635e3f1f306e91a39a64464eb5fa3f0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.8MiB max=124.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:27:38 scheduler task 5b24b5f3 (flow 50ebdd49): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s026.tar.gz resources {}
2021/07/08 17:27:38  ->  n100.r08.s026.Main.cp_out_file 50ebdd49 exec extern s3://niema-test/n100/r08/n100.r08.s026.tar.gz 35.7MiB
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): promoting objects (try 0): started
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): retrieving diagnostic output (try 0): started
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): retrieving result (try 0): started
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:38 scheduler task ba1130bd (flow c6f7e8d0): transferring output (try 0): started
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloading (try 0): started
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloading list<val<.=b37631c6 35.7MiB> 35.7MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloading val<.=3e5e6c43 35.4MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloading val<.=24a0457d 35.4MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloaded val<.=24a0457d 35.4MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloaded list<val<.=b37631c6 35.7MiB> 35.7MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloaded val<.=3e5e6c43 35.4MiB>
2021/07/08 17:27:38 scheduler task d990b33b (flow 4f4f56d4): unloading (try 0): successful, next state: complete
2021/07/08 17:27:38  <-  n100.r08.s057.Main.out_file 4f4f56d4 ok     exec 5m8s 35.7MiB
2021/07/08 17:27:38 n100.r08.s057.Main.out_file 4f4f56d4 n100/r08/n100.r08.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:333ea765781501e7d1aed04def759be87ed966434b478fc2c92d7029beb1cc41
	sha256:4f4f56d40484fd9c5a8d83d88ae9fab0a2b2bab6ac7205547a6cf33bc11f2aa7
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d990b33b40fb8578610dd0305868d94a7ae5e0a28ee42ce9863fbefe0e4a85e6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s057_output"
	    wget -O "n100.r08.s057_output/n100.r08.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s057_output/n100.r08.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s057_output/n100.r08.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s057_output/n100.r08.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s057_output/n100.r08.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s057_output/n100.r08.s057.reference.fas" "n100.r08.s057_output/n100.r08.s057.fq1.fastq" "n100.r08.s057_output/n100.r08.s057.fq2.fastq" | samtools view -bS - > "n100.r08.s057_output/n100.r08.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s057_output/n100.r08.s057.untrimmed.sorted.bam" "n100.r08.s057_output/n100.r08.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s057_output/n100.r08.s057.untrimmed.sorted.bam" -b "n100.r08.s057_output/n100.r08.s057.primers.bed" -p "n100.r08.s057_output/n100.r08.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" "n100.r08.s057_output/n100.r08.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s057_output/n100.r08.s057.reference.fas" "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" > "n100.r08.s057_output/n100.r08.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s057_output/n100.r08.s057.reference.fas" --call-indels "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" > "n100.r08.s057_output/n100.r08.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s057_output/n100.r08.s057.trimmed.sorted.bam" > "n100.r08.s057_output/n100.r08.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s057_output/n100.r08.s057.depth.txt" "n100.r08.s057_output/n100.r08.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s057_output/n100.r08.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s057_output/n100.r08.s057.reference.fas" | bcftools consensus -m "n100.r08.s057_output/n100.r08.s057.low_depth.tsv" tmp.vcf.gz > "n100.r08.s057_output/n100.r08.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b37631c698e8e73c04122685a4b79e67f85ab682bf013e22fdfe9e06b7f34485 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=18.9MiB max=126.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:27:38 scheduler task c21ca287 (flow f47428d4): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s057.tar.gz resources {}
2021/07/08 17:27:38  ->  n100.r08.s057.Main.cp_out_file f47428d4 exec extern s3://niema-test/n100/r08/n100.r08.s057.tar.gz 35.7MiB
2021/07/08 17:27:38 scheduler task 5b24b5f3 (flow 50ebdd49): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4d0a91a68cccea48bc49e0030d7c4b5e4635e3f1f306e91a39a64464eb5fa3f0 -> s3://niema-test/n100/r08/n100.r08.s026.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:38  <-  n100.r08.s026.Main.cp_out_file 50ebdd49 ok   extern 0s 35.7MiB
2021/07/08 17:27:39 scheduler task c21ca287 (flow f47428d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b37631c698e8e73c04122685a4b79e67f85ab682bf013e22fdfe9e06b7f34485 -> s3://niema-test/n100/r08/n100.r08.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:39  <-  n100.r08.s057.Main.cp_out_file f47428d4 ok   extern 0s 35.7MiB
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): promoting objects (try 0): started
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): promoting objects (try 0): started
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): retrieving diagnostic output (try 0): started
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): retrieving diagnostic output (try 0): started
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): retrieving result (try 0): started
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): retrieving result (try 0): started
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:39 scheduler task 991d72a7 (flow 5307f7d5): transferring output (try 0): started
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:39 scheduler task cd7dca86 (flow 59cfb075): transferring output (try 0): started
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloading (try 0): started
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloading list<val<.=7168f764 35.7MiB> 35.7MiB>
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloading val<.=d46b3dae 35.4MiB>
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloading val<.=08e17e86 35.4MiB>
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloaded list<val<.=7168f764 35.7MiB> 35.7MiB>
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloaded val<.=d46b3dae 35.4MiB>
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloaded val<.=08e17e86 35.4MiB>
2021/07/08 17:27:40 scheduler task ba1130bd (flow c6f7e8d0): unloading (try 0): successful, next state: complete
2021/07/08 17:27:40  <-  n100.r08.s099.Main.out_file c6f7e8d0 ok     exec 5m12s 35.7MiB
2021/07/08 17:27:40 n100.r08.s099.Main.out_file c6f7e8d0 n100/r08/n100.r08.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a91d42dd07f2da21d0d93f7b8ddaa1aec4b009716a301455b747d05d858576a3
	sha256:c6f7e8d0fb93d7ef5267952e90a387e08d4668b9d6f1419f18a1139c0a35fba8
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ba1130bdc40146e137aa1ec57ce7adbb9829fbe5ce713c952beb9c8b17ee0210
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s099_output"
	    wget -O "n100.r08.s099_output/n100.r08.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s099_output/n100.r08.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s099_output/n100.r08.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s099_output/n100.r08.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s099_output/n100.r08.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s099_output/n100.r08.s099.reference.fas" "n100.r08.s099_output/n100.r08.s099.fq1.fastq" "n100.r08.s099_output/n100.r08.s099.fq2.fastq" | samtools view -bS - > "n100.r08.s099_output/n100.r08.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s099_output/n100.r08.s099.untrimmed.sorted.bam" "n100.r08.s099_output/n100.r08.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s099_output/n100.r08.s099.untrimmed.sorted.bam" -b "n100.r08.s099_output/n100.r08.s099.primers.bed" -p "n100.r08.s099_output/n100.r08.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" "n100.r08.s099_output/n100.r08.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s099_output/n100.r08.s099.reference.fas" "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" > "n100.r08.s099_output/n100.r08.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s099_output/n100.r08.s099.reference.fas" --call-indels "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" > "n100.r08.s099_output/n100.r08.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s099_output/n100.r08.s099.trimmed.sorted.bam" > "n100.r08.s099_output/n100.r08.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s099_output/n100.r08.s099.depth.txt" "n100.r08.s099_output/n100.r08.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s099_output/n100.r08.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s099_output/n100.r08.s099.reference.fas" | bcftools consensus -m "n100.r08.s099_output/n100.r08.s099.low_depth.tsv" tmp.vcf.gz > "n100.r08.s099_output/n100.r08.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7168f764b9db547d2f525ac381b1f8ee9fbadb6edaec45c08de9efc048bf6bc8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.7MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=689B max=2.0KiB
2021/07/08 17:27:40 scheduler task d99d26cd (flow 6e42d924): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s099.tar.gz resources {}
2021/07/08 17:27:40  ->  n100.r08.s099.Main.cp_out_file 6e42d924 exec extern s3://niema-test/n100/r08/n100.r08.s099.tar.gz 35.7MiB
2021/07/08 17:27:41 scheduler task d99d26cd (flow 6e42d924): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7168f764b9db547d2f525ac381b1f8ee9fbadb6edaec45c08de9efc048bf6bc8 -> s3://niema-test/n100/r08/n100.r08.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:41  <-  n100.r08.s099.Main.cp_out_file 6e42d924 ok   extern 0s 35.7MiB
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): promoting objects (try 0): started
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): retrieving diagnostic output (try 0): started
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloading (try 0): started
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloading list<val<.=72d0f0a5 35.7MiB> 35.7MiB>
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloading val<.=2a8dfee6 35.4MiB>
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloading val<.=55fd9988 35.4MiB>
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloaded val<.=55fd9988 35.4MiB>
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloaded list<val<.=72d0f0a5 35.7MiB> 35.7MiB>
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloaded val<.=2a8dfee6 35.4MiB>
2021/07/08 17:27:41 scheduler task cd7dca86 (flow 59cfb075): unloading (try 0): successful, next state: complete
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): retrieving result (try 0): started
2021/07/08 17:27:41  <-  n100.r08.s093.Main.out_file 59cfb075 ok     exec 5m8s 35.7MiB
2021/07/08 17:27:41 n100.r08.s093.Main.out_file 59cfb075 n100/r08/n100.r08.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:686230e53ea9e9cd68a333bfe5b6a63265733caab7e95fdd28ece89f726d6bdd
	sha256:59cfb075e951c574ee259f3e70d2e1ec435468c1a831286c0aeac50e2c6aac76
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cd7dca86e216eea002990bc5cb4a7c65e028da07e4684e539a73c12a54268c34
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s093_output"
	    wget -O "n100.r08.s093_output/n100.r08.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s093_output/n100.r08.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s093_output/n100.r08.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s093_output/n100.r08.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s093_output/n100.r08.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s093_output/n100.r08.s093.reference.fas" "n100.r08.s093_output/n100.r08.s093.fq1.fastq" "n100.r08.s093_output/n100.r08.s093.fq2.fastq" | samtools view -bS - > "n100.r08.s093_output/n100.r08.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s093_output/n100.r08.s093.untrimmed.sorted.bam" "n100.r08.s093_output/n100.r08.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s093_output/n100.r08.s093.untrimmed.sorted.bam" -b "n100.r08.s093_output/n100.r08.s093.primers.bed" -p "n100.r08.s093_output/n100.r08.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" "n100.r08.s093_output/n100.r08.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s093_output/n100.r08.s093.reference.fas" "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" > "n100.r08.s093_output/n100.r08.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s093_output/n100.r08.s093.reference.fas" --call-indels "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" > "n100.r08.s093_output/n100.r08.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s093_output/n100.r08.s093.trimmed.sorted.bam" > "n100.r08.s093_output/n100.r08.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s093_output/n100.r08.s093.depth.txt" "n100.r08.s093_output/n100.r08.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s093_output/n100.r08.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s093_output/n100.r08.s093.reference.fas" | bcftools consensus -m "n100.r08.s093_output/n100.r08.s093.low_depth.tsv" tmp.vcf.gz > "n100.r08.s093_output/n100.r08.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:72d0f0a50c4fd3ac57af6f5cd47286e53d7b9d8d8f5215b872a49f80108836cc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.2MiB max=124.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=688B max=2.0KiB
2021/07/08 17:27:41 scheduler task 921d4bdd (flow 6be4d837): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s093.tar.gz resources {}
2021/07/08 17:27:41  ->  n100.r08.s093.Main.cp_out_file 6be4d837 exec extern s3://niema-test/n100/r08/n100.r08.s093.tar.gz 35.7MiB
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:41 scheduler task 2bd7a6bf (flow ebe32457): transferring output (try 0): started
2021/07/08 17:27:41 scheduler task 3579f14e (flow ec208550): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:41 scheduler task 3579f14e (flow ec208550): promoting objects (try 0): started
2021/07/08 17:27:41 scheduler task 8270b132 (flow 53910cbe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:41 scheduler task 8270b132 (flow 53910cbe): promoting objects (try 0): started
2021/07/08 17:27:41 scheduler task 3579f14e (flow ec208550): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:41 scheduler task 3579f14e (flow ec208550): retrieving diagnostic output (try 0): started
2021/07/08 17:27:41 scheduler task 8270b132 (flow 53910cbe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:41 scheduler task 8270b132 (flow 53910cbe): retrieving diagnostic output (try 0): started
2021/07/08 17:27:41 scheduler task 3579f14e (flow ec208550): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:41 scheduler task 3579f14e (flow ec208550): retrieving result (try 0): started
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): retrieving result (try 0): started
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): transferring output (try 0): started
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloading (try 0): started
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloading list<val<.=0dd12e71 35.7MiB> 35.7MiB>
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloading val<.=6cc1c9ab 35.4MiB>
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloading val<.=ec703a7c 35.4MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): transferring output (try 0): started
2021/07/08 17:27:42 scheduler task 921d4bdd (flow 6be4d837): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:72d0f0a50c4fd3ac57af6f5cd47286e53d7b9d8d8f5215b872a49f80108836cc -> s3://niema-test/n100/r08/n100.r08.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:42  <-  n100.r08.s093.Main.cp_out_file 6be4d837 ok   extern 0s 35.7MiB
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloaded val<.=6cc1c9ab 35.4MiB>
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloaded list<val<.=0dd12e71 35.7MiB> 35.7MiB>
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloaded val<.=ec703a7c 35.4MiB>
2021/07/08 17:27:42 scheduler task 2bd7a6bf (flow ebe32457): unloading (try 0): successful, next state: complete
2021/07/08 17:27:42  <-  n100.r08.s001.Main.out_file ebe32457 ok     exec 5m10s 35.7MiB
2021/07/08 17:27:42 n100.r08.s001.Main.out_file ebe32457 n100/r08/n100.r08.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a57801c3b2ce4da3982b360db643dc4216719fd85a97e69111348e4194641220
	sha256:ebe32457321c0a00417da761d630f79dcdbb75177339a8df7c37f12cf374b216
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2bd7a6bf47e8d0c4e94e36cebef07f2096bc3e9df9fbe7436661673af15f82a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s001_output"
	    wget -O "n100.r08.s001_output/n100.r08.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s001_output/n100.r08.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s001_output/n100.r08.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s001_output/n100.r08.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s001_output/n100.r08.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s001_output/n100.r08.s001.reference.fas" "n100.r08.s001_output/n100.r08.s001.fq1.fastq" "n100.r08.s001_output/n100.r08.s001.fq2.fastq" | samtools view -bS - > "n100.r08.s001_output/n100.r08.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s001_output/n100.r08.s001.untrimmed.sorted.bam" "n100.r08.s001_output/n100.r08.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s001_output/n100.r08.s001.untrimmed.sorted.bam" -b "n100.r08.s001_output/n100.r08.s001.primers.bed" -p "n100.r08.s001_output/n100.r08.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" "n100.r08.s001_output/n100.r08.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s001_output/n100.r08.s001.reference.fas" "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" > "n100.r08.s001_output/n100.r08.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s001_output/n100.r08.s001.reference.fas" --call-indels "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" > "n100.r08.s001_output/n100.r08.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s001_output/n100.r08.s001.trimmed.sorted.bam" > "n100.r08.s001_output/n100.r08.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s001_output/n100.r08.s001.depth.txt" "n100.r08.s001_output/n100.r08.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s001_output/n100.r08.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s001_output/n100.r08.s001.reference.fas" | bcftools consensus -m "n100.r08.s001_output/n100.r08.s001.low_depth.tsv" tmp.vcf.gz > "n100.r08.s001_output/n100.r08.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0dd12e71d96a95116dfed0be4efc61cbdf7fdf222d75e758b3222aea69f17808 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=126.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=866B max=2.0KiB
2021/07/08 17:27:42 scheduler task 69344b52 (flow 55d2070d): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s001.tar.gz resources {}
2021/07/08 17:27:42  ->  n100.r08.s001.Main.cp_out_file 55d2070d exec extern s3://niema-test/n100/r08/n100.r08.s001.tar.gz 35.7MiB
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloading (try 0): started
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloading list<val<.=8b26b14a 35.8MiB> 35.8MiB>
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloading val<.=ad308fe6 35.4MiB>
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloading val<.=a38f6e10 35.4MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloading (try 0): started
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloading list<val<.=c5ce000e 35.7MiB> 35.7MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloading val<.=5791ce94 35.4MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloading val<.=c0abfe3d 35.4MiB>
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloaded val<.=ad308fe6 35.4MiB>
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloaded val<.=a38f6e10 35.4MiB>
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloaded list<val<.=8b26b14a 35.8MiB> 35.8MiB>
2021/07/08 17:27:42 scheduler task 3579f14e (flow ec208550): unloading (try 0): successful, next state: complete
2021/07/08 17:27:42  <-  n100.r08.s059.Main.out_file ec208550 ok     exec 5m12s 35.8MiB
2021/07/08 17:27:42 n100.r08.s059.Main.out_file ec208550 n100/r08/n100.r08.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:314bed296a9ca5664687c3ac45cd35bb4418de624ccab5b065f43aa52f5327cb
	sha256:ec208550a3b8a6a95954e2bda0f28abdb765924ee4394bdee41ef7c14961d825
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3579f14ef1dddd9d66291b4dd28a36dd11162b0e39e493c75141b5dbf730439e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s059_output"
	    wget -O "n100.r08.s059_output/n100.r08.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s059_output/n100.r08.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s059_output/n100.r08.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s059_output/n100.r08.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s059_output/n100.r08.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s059_output/n100.r08.s059.reference.fas" "n100.r08.s059_output/n100.r08.s059.fq1.fastq" "n100.r08.s059_output/n100.r08.s059.fq2.fastq" | samtools view -bS - > "n100.r08.s059_output/n100.r08.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s059_output/n100.r08.s059.untrimmed.sorted.bam" "n100.r08.s059_output/n100.r08.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s059_output/n100.r08.s059.untrimmed.sorted.bam" -b "n100.r08.s059_output/n100.r08.s059.primers.bed" -p "n100.r08.s059_output/n100.r08.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" "n100.r08.s059_output/n100.r08.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s059_output/n100.r08.s059.reference.fas" "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" > "n100.r08.s059_output/n100.r08.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s059_output/n100.r08.s059.reference.fas" --call-indels "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" > "n100.r08.s059_output/n100.r08.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s059_output/n100.r08.s059.trimmed.sorted.bam" > "n100.r08.s059_output/n100.r08.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s059_output/n100.r08.s059.depth.txt" "n100.r08.s059_output/n100.r08.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s059_output/n100.r08.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s059_output/n100.r08.s059.reference.fas" | bcftools consensus -m "n100.r08.s059_output/n100.r08.s059.low_depth.tsv" tmp.vcf.gz > "n100.r08.s059_output/n100.r08.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8b26b14a6d32ace032e0a0ea1da7c0bda8d61b730a941f233b6d36b137eac131 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.7MiB max=126.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:27:42 scheduler task a9e81f90 (flow 15b9821c): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s059.tar.gz resources {}
2021/07/08 17:27:42  ->  n100.r08.s059.Main.cp_out_file 15b9821c exec extern s3://niema-test/n100/r08/n100.r08.s059.tar.gz 35.8MiB
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloading (try 0): started
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloading list<val<.=67f20ea9 35.7MiB> 35.7MiB>
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloading val<.=58990418 35.4MiB>
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloading val<.=b4d502d8 35.4MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloaded val<.=c0abfe3d 35.4MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloaded val<.=5791ce94 35.4MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloaded list<val<.=c5ce000e 35.7MiB> 35.7MiB>
2021/07/08 17:27:42 scheduler task 8270b132 (flow 53910cbe): unloading (try 0): successful, next state: complete
2021/07/08 17:27:42  <-  n100.r08.s064.Main.out_file 53910cbe ok     exec 5m10s 35.7MiB
2021/07/08 17:27:42 n100.r08.s064.Main.out_file 53910cbe n100/r08/n100.r08.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4c517c43aef94a8b4d1056a17bd614488f23e2d3f1c241180c16492f61166e0
	sha256:53910cbed0e088e213ebbb81b43540f8fcc9730cd62d24f62e6c54aafefa02fb
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8270b132e7175700da14e354ffeffebce4f16b2829b63e13992e79c4482df474
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s064_output"
	    wget -O "n100.r08.s064_output/n100.r08.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s064_output/n100.r08.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s064_output/n100.r08.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s064_output/n100.r08.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s064_output/n100.r08.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s064_output/n100.r08.s064.reference.fas" "n100.r08.s064_output/n100.r08.s064.fq1.fastq" "n100.r08.s064_output/n100.r08.s064.fq2.fastq" | samtools view -bS - > "n100.r08.s064_output/n100.r08.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s064_output/n100.r08.s064.untrimmed.sorted.bam" "n100.r08.s064_output/n100.r08.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s064_output/n100.r08.s064.untrimmed.sorted.bam" -b "n100.r08.s064_output/n100.r08.s064.primers.bed" -p "n100.r08.s064_output/n100.r08.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" "n100.r08.s064_output/n100.r08.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s064_output/n100.r08.s064.reference.fas" "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" > "n100.r08.s064_output/n100.r08.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s064_output/n100.r08.s064.reference.fas" --call-indels "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" > "n100.r08.s064_output/n100.r08.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s064_output/n100.r08.s064.trimmed.sorted.bam" > "n100.r08.s064_output/n100.r08.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s064_output/n100.r08.s064.depth.txt" "n100.r08.s064_output/n100.r08.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s064_output/n100.r08.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s064_output/n100.r08.s064.reference.fas" | bcftools consensus -m "n100.r08.s064_output/n100.r08.s064.low_depth.tsv" tmp.vcf.gz > "n100.r08.s064_output/n100.r08.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c5ce000e965bb3e7861a28ea48f2299f41b5b37dc749489db77019b64ebcf33b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.5MiB max=124.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=876B max=2.1KiB
2021/07/08 17:27:42 scheduler task a397d1bc (flow 09344a3d): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s064.tar.gz resources {}
2021/07/08 17:27:42  ->  n100.r08.s064.Main.cp_out_file 09344a3d exec extern s3://niema-test/n100/r08/n100.r08.s064.tar.gz 35.7MiB
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloaded list<val<.=67f20ea9 35.7MiB> 35.7MiB>
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloaded val<.=b4d502d8 35.4MiB>
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloaded val<.=58990418 35.4MiB>
2021/07/08 17:27:42 scheduler task 991d72a7 (flow 5307f7d5): unloading (try 0): successful, next state: complete
2021/07/08 17:27:42  <-  n100.r08.s095.Main.out_file 5307f7d5 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:42 n100.r08.s095.Main.out_file 5307f7d5 n100/r08/n100.r08.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cf0b17362051702b2316f7678bd69604b1688b111fa5f837babd62e1512deca1
	sha256:5307f7d5f38dae1fe310228a60036e2451427d0c5fd15d1828d2ac2438e39113
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/991d72a70f4a23b52a260ee83c46fc3cfbbb46381547a6ffdc2e9778725b83f1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s095_output"
	    wget -O "n100.r08.s095_output/n100.r08.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s095_output/n100.r08.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s095_output/n100.r08.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s095_output/n100.r08.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s095_output/n100.r08.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s095_output/n100.r08.s095.reference.fas" "n100.r08.s095_output/n100.r08.s095.fq1.fastq" "n100.r08.s095_output/n100.r08.s095.fq2.fastq" | samtools view -bS - > "n100.r08.s095_output/n100.r08.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s095_output/n100.r08.s095.untrimmed.sorted.bam" "n100.r08.s095_output/n100.r08.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s095_output/n100.r08.s095.untrimmed.sorted.bam" -b "n100.r08.s095_output/n100.r08.s095.primers.bed" -p "n100.r08.s095_output/n100.r08.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" "n100.r08.s095_output/n100.r08.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s095_output/n100.r08.s095.reference.fas" "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" > "n100.r08.s095_output/n100.r08.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s095_output/n100.r08.s095.reference.fas" --call-indels "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" > "n100.r08.s095_output/n100.r08.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s095_output/n100.r08.s095.trimmed.sorted.bam" > "n100.r08.s095_output/n100.r08.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s095_output/n100.r08.s095.depth.txt" "n100.r08.s095_output/n100.r08.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s095_output/n100.r08.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s095_output/n100.r08.s095.reference.fas" | bcftools consensus -m "n100.r08.s095_output/n100.r08.s095.low_depth.tsv" tmp.vcf.gz > "n100.r08.s095_output/n100.r08.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:67f20ea9934424f87361c10139e9e05bd2837a7737cf0cc1c8c195e69f173ce4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.2MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=875B max=2.1KiB
2021/07/08 17:27:42 scheduler task 6ca2e38f (flow 97e9e4d9): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s095.tar.gz resources {}
2021/07/08 17:27:42  ->  n100.r08.s095.Main.cp_out_file 97e9e4d9 exec extern s3://niema-test/n100/r08/n100.r08.s095.tar.gz 35.7MiB
2021/07/08 17:27:42 scheduler task 69344b52 (flow 55d2070d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0dd12e71d96a95116dfed0be4efc61cbdf7fdf222d75e758b3222aea69f17808 -> s3://niema-test/n100/r08/n100.r08.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:42  <-  n100.r08.s001.Main.cp_out_file 55d2070d ok   extern 0s 35.7MiB
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:43 scheduler task a9e81f90 (flow 15b9821c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8b26b14a6d32ace032e0a0ea1da7c0bda8d61b730a941f233b6d36b137eac131 -> s3://niema-test/n100/r08/n100.r08.s059.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:43  <-  n100.r08.s059.Main.cp_out_file 15b9821c ok   extern 0s 35.8MiB
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): promoting objects (try 0): started
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:43 scheduler task a397d1bc (flow 09344a3d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c5ce000e965bb3e7861a28ea48f2299f41b5b37dc749489db77019b64ebcf33b -> s3://niema-test/n100/r08/n100.r08.s064.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:43  <-  n100.r08.s064.Main.cp_out_file 09344a3d ok   extern 0s 35.7MiB
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): promoting objects (try 0): started
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): retrieving diagnostic output (try 0): started
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:43 scheduler task 4e98971e (flow f26e5aef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): retrieving diagnostic output (try 0): started
2021/07/08 17:27:43 scheduler task 4e98971e (flow f26e5aef): promoting objects (try 0): started
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): retrieving result (try 0): started
2021/07/08 17:27:43 scheduler task 4e98971e (flow f26e5aef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:43 scheduler task 6ca2e38f (flow 97e9e4d9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:67f20ea9934424f87361c10139e9e05bd2837a7737cf0cc1c8c195e69f173ce4 -> s3://niema-test/n100/r08/n100.r08.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:43  <-  n100.r08.s095.Main.cp_out_file 97e9e4d9 ok   extern 0s 35.7MiB
2021/07/08 17:27:43 scheduler task 4e98971e (flow f26e5aef): retrieving diagnostic output (try 0): started
2021/07/08 17:27:43 scheduler task e7dd9705 (flow 15301ea9): transferring output (try 0): started
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): retrieving result (try 0): started
2021/07/08 17:27:43 scheduler task 4e98971e (flow f26e5aef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:43 scheduler task 4e98971e (flow f26e5aef): retrieving result (try 0): started
2021/07/08 17:27:43 scheduler task d57d51d4 (flow 714a362d): transferring output (try 0): started
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): transferring output (try 0): started
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloading (try 0): started
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloading list<val<.=79d382c7 35.7MiB> 35.7MiB>
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloading val<.=5e597434 35.4MiB>
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloading val<.=d96a3be0 35.4MiB>
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloaded list<val<.=79d382c7 35.7MiB> 35.7MiB>
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloaded val<.=5e597434 35.4MiB>
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloaded val<.=d96a3be0 35.4MiB>
2021/07/08 17:27:44 scheduler task e7dd9705 (flow 15301ea9): unloading (try 0): successful, next state: complete
2021/07/08 17:27:44  <-  n100.r08.s039.Main.out_file 15301ea9 ok     exec 5m11s 35.7MiB
2021/07/08 17:27:44 n100.r08.s039.Main.out_file 15301ea9 n100/r08/n100.r08.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e1882833d8b618ed1d9cf13b6f2c9f12689ec044db9c1e0773c44a3d8995a0c8
	sha256:15301ea991a6ed4a123be58f518592cb2334cfe866b0521608dea5bb64033b9f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7dd9705b03f259ac4378384761ea09c5f49b1b8e512d853580264e0d15d7397
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s039_output"
	    wget -O "n100.r08.s039_output/n100.r08.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s039_output/n100.r08.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s039_output/n100.r08.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s039_output/n100.r08.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s039_output/n100.r08.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s039_output/n100.r08.s039.reference.fas" "n100.r08.s039_output/n100.r08.s039.fq1.fastq" "n100.r08.s039_output/n100.r08.s039.fq2.fastq" | samtools view -bS - > "n100.r08.s039_output/n100.r08.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s039_output/n100.r08.s039.untrimmed.sorted.bam" "n100.r08.s039_output/n100.r08.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s039_output/n100.r08.s039.untrimmed.sorted.bam" -b "n100.r08.s039_output/n100.r08.s039.primers.bed" -p "n100.r08.s039_output/n100.r08.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" "n100.r08.s039_output/n100.r08.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s039_output/n100.r08.s039.reference.fas" "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" > "n100.r08.s039_output/n100.r08.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s039_output/n100.r08.s039.reference.fas" --call-indels "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" > "n100.r08.s039_output/n100.r08.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s039_output/n100.r08.s039.trimmed.sorted.bam" > "n100.r08.s039_output/n100.r08.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s039_output/n100.r08.s039.depth.txt" "n100.r08.s039_output/n100.r08.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s039_output/n100.r08.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s039_output/n100.r08.s039.reference.fas" | bcftools consensus -m "n100.r08.s039_output/n100.r08.s039.low_depth.tsv" tmp.vcf.gz > "n100.r08.s039_output/n100.r08.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:79d382c7e04df6fc4c561ae619eb0c3c966a7e0937efb5b9782a65f3ca2f64ab 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.2MiB max=126.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 17:27:44 scheduler task 07d69edc (flow 54be7574): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s039.tar.gz resources {}
2021/07/08 17:27:44  ->  n100.r08.s039.Main.cp_out_file 54be7574 exec extern s3://niema-test/n100/r08/n100.r08.s039.tar.gz 35.7MiB
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloading (try 0): started
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloading list<val<.=589a599f 35.7MiB> 35.7MiB>
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloading val<.=4c0734c6 35.4MiB>
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloading val<.=08be6948 35.4MiB>
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): promoting objects (try 0): started
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloaded val<.=08be6948 35.4MiB>
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloaded val<.=4c0734c6 35.4MiB>
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloaded list<val<.=589a599f 35.7MiB> 35.7MiB>
2021/07/08 17:27:44 scheduler task d57d51d4 (flow 714a362d): unloading (try 0): successful, next state: complete
2021/07/08 17:27:44  <-  n100.r08.s038.Main.out_file 714a362d ok     exec 5m12s 35.7MiB
2021/07/08 17:27:44 n100.r08.s038.Main.out_file 714a362d n100/r08/n100.r08.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1ea4cd0a6163b9e1e6d3f140b78f542a67c7a74c19fe350d0053b6e89ff55640
	sha256:714a362d163e52c137a30e9e1f233965a4eb212589671f3b8babcd59cf9f929f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d57d51d421f28e77b5c6ddd8f87a9589beb301212f52c1ef628a7d3c8d580fb0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s038_output"
	    wget -O "n100.r08.s038_output/n100.r08.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s038_output/n100.r08.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s038_output/n100.r08.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s038_output/n100.r08.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s038_output/n100.r08.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s038_output/n100.r08.s038.reference.fas" "n100.r08.s038_output/n100.r08.s038.fq1.fastq" "n100.r08.s038_output/n100.r08.s038.fq2.fastq" | samtools view -bS - > "n100.r08.s038_output/n100.r08.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s038_output/n100.r08.s038.untrimmed.sorted.bam" "n100.r08.s038_output/n100.r08.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s038_output/n100.r08.s038.untrimmed.sorted.bam" -b "n100.r08.s038_output/n100.r08.s038.primers.bed" -p "n100.r08.s038_output/n100.r08.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" "n100.r08.s038_output/n100.r08.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s038_output/n100.r08.s038.reference.fas" "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" > "n100.r08.s038_output/n100.r08.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s038_output/n100.r08.s038.reference.fas" --call-indels "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" > "n100.r08.s038_output/n100.r08.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s038_output/n100.r08.s038.trimmed.sorted.bam" > "n100.r08.s038_output/n100.r08.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s038_output/n100.r08.s038.depth.txt" "n100.r08.s038_output/n100.r08.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s038_output/n100.r08.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s038_output/n100.r08.s038.reference.fas" | bcftools consensus -m "n100.r08.s038_output/n100.r08.s038.low_depth.tsv" tmp.vcf.gz > "n100.r08.s038_output/n100.r08.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:589a599f294f46d99f279cade5bffd44f5c1fe7d7d6c0c15fcc458e5ee7af05e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.0MiB max=125.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=696B max=2.1KiB
2021/07/08 17:27:44 scheduler task 204cf6ec (flow 4977a6f5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s038.tar.gz resources {}
2021/07/08 17:27:44  ->  n100.r08.s038.Main.cp_out_file 4977a6f5 exec extern s3://niema-test/n100/r08/n100.r08.s038.tar.gz 35.7MiB
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): retrieving diagnostic output (try 0): started
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloading (try 0): started
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloading list<val<.=d1cbefa6 35.7MiB> 35.7MiB>
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloading val<.=77a94b1f 35.4MiB>
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloading val<.=f372a351 35.4MiB>
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): retrieving result (try 0): started
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloaded list<val<.=d1cbefa6 35.7MiB> 35.7MiB>
2021/07/08 17:27:44 scheduler task 43e62e27 (flow a215c969): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloaded val<.=f372a351 35.4MiB>
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloaded val<.=77a94b1f 35.4MiB>
2021/07/08 17:27:44 scheduler task 4e98971e (flow f26e5aef): unloading (try 0): successful, next state: complete
2021/07/08 17:27:44 scheduler task 43e62e27 (flow a215c969): promoting objects (try 0): started
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:44  <-  n100.r08.s088.Main.out_file f26e5aef ok     exec 5m12s 35.7MiB
2021/07/08 17:27:44 n100.r08.s088.Main.out_file f26e5aef n100/r08/n100.r08.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e5c557ec298914f3b5fca7c79a0605478dbc349d90e3c9cd5c609d914494ed84
	sha256:f26e5aef3d498a72104a2e2fa181693d40ddc3652c24556c52377fb1845d5e43
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e98971e8296eb5589d899d1b8366c57c752f427015ad508d76404453f5cf94a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s088_output"
	    wget -O "n100.r08.s088_output/n100.r08.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s088_output/n100.r08.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s088_output/n100.r08.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s088_output/n100.r08.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s088_output/n100.r08.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s088_output/n100.r08.s088.reference.fas" "n100.r08.s088_output/n100.r08.s088.fq1.fastq" "n100.r08.s088_output/n100.r08.s088.fq2.fastq" | samtools view -bS - > "n100.r08.s088_output/n100.r08.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s088_output/n100.r08.s088.untrimmed.sorted.bam" "n100.r08.s088_output/n100.r08.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s088_output/n100.r08.s088.untrimmed.sorted.bam" -b "n100.r08.s088_output/n100.r08.s088.primers.bed" -p "n100.r08.s088_output/n100.r08.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" "n100.r08.s088_output/n100.r08.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s088_output/n100.r08.s088.reference.fas" "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" > "n100.r08.s088_output/n100.r08.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s088_output/n100.r08.s088.reference.fas" --call-indels "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" > "n100.r08.s088_output/n100.r08.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s088_output/n100.r08.s088.trimmed.sorted.bam" > "n100.r08.s088_output/n100.r08.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s088_output/n100.r08.s088.depth.txt" "n100.r08.s088_output/n100.r08.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s088_output/n100.r08.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s088_output/n100.r08.s088.reference.fas" | bcftools consensus -m "n100.r08.s088_output/n100.r08.s088.low_depth.tsv" tmp.vcf.gz > "n100.r08.s088_output/n100.r08.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d1cbefa6183d19c73d2ada663898f8d2adb09797a88094d548192052e87a0c03 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.8MiB max=129.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:27:44 scheduler task e6819541 (flow 178f6ed7): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s088.tar.gz resources {}
2021/07/08 17:27:44  ->  n100.r08.s088.Main.cp_out_file 178f6ed7 exec extern s3://niema-test/n100/r08/n100.r08.s088.tar.gz 35.7MiB
2021/07/08 17:27:44 scheduler task 7c80984b (flow f133966a): transferring output (try 0): started
2021/07/08 17:27:44 scheduler task 43e62e27 (flow a215c969): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:44 scheduler task 43e62e27 (flow a215c969): retrieving diagnostic output (try 0): started
2021/07/08 17:27:45 scheduler task 07d69edc (flow 54be7574): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:79d382c7e04df6fc4c561ae619eb0c3c966a7e0937efb5b9782a65f3ca2f64ab -> s3://niema-test/n100/r08/n100.r08.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:45  <-  n100.r08.s039.Main.cp_out_file 54be7574 ok   extern 0s 35.7MiB
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): retrieving result (try 0): started
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): transferring output (try 0): started
2021/07/08 17:27:45 scheduler task 204cf6ec (flow 4977a6f5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:589a599f294f46d99f279cade5bffd44f5c1fe7d7d6c0c15fcc458e5ee7af05e -> s3://niema-test/n100/r08/n100.r08.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:45  <-  n100.r08.s038.Main.cp_out_file 4977a6f5 ok   extern 0s 35.7MiB
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloading (try 0): started
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloading list<val<.=4063029f 35.7MiB> 35.7MiB>
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloading val<.=eb5f94e9 35.4MiB>
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloading val<.=eec58353 35.4MiB>
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloaded list<val<.=4063029f 35.7MiB> 35.7MiB>
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloaded val<.=eec58353 35.4MiB>
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloaded val<.=eb5f94e9 35.4MiB>
2021/07/08 17:27:45 scheduler task 7c80984b (flow f133966a): unloading (try 0): successful, next state: complete
2021/07/08 17:27:45  <-  n100.r08.s028.Main.out_file f133966a ok     exec 5m9s 35.7MiB
2021/07/08 17:27:45 n100.r08.s028.Main.out_file f133966a n100/r08/n100.r08.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4e178b2b94c4e34a08190e0e818e13d5723115ebfdc32f3e20d71832290557f
	sha256:f133966abd93e4ee78e096f0f9f34fdd9b9a001a8125c2bb3c18fb3c0d171876
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7c80984b2723dea829e0c02e719978e15e8849e15e7299b538ab7071b7d5829e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s028_output"
	    wget -O "n100.r08.s028_output/n100.r08.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s028_output/n100.r08.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s028_output/n100.r08.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s028_output/n100.r08.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s028_output/n100.r08.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s028_output/n100.r08.s028.reference.fas" "n100.r08.s028_output/n100.r08.s028.fq1.fastq" "n100.r08.s028_output/n100.r08.s028.fq2.fastq" | samtools view -bS - > "n100.r08.s028_output/n100.r08.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s028_output/n100.r08.s028.untrimmed.sorted.bam" "n100.r08.s028_output/n100.r08.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s028_output/n100.r08.s028.untrimmed.sorted.bam" -b "n100.r08.s028_output/n100.r08.s028.primers.bed" -p "n100.r08.s028_output/n100.r08.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" "n100.r08.s028_output/n100.r08.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s028_output/n100.r08.s028.reference.fas" "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" > "n100.r08.s028_output/n100.r08.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s028_output/n100.r08.s028.reference.fas" --call-indels "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" > "n100.r08.s028_output/n100.r08.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s028_output/n100.r08.s028.trimmed.sorted.bam" > "n100.r08.s028_output/n100.r08.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s028_output/n100.r08.s028.depth.txt" "n100.r08.s028_output/n100.r08.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s028_output/n100.r08.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s028_output/n100.r08.s028.reference.fas" | bcftools consensus -m "n100.r08.s028_output/n100.r08.s028.low_depth.tsv" tmp.vcf.gz > "n100.r08.s028_output/n100.r08.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4063029f92809b36b5ae14e9a1086e14b57bf15f27863eafa4881432d6a0546e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.6MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=703B max=2.1KiB
2021/07/08 17:27:45 scheduler task ce3a936e (flow 73e1e829): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s028.tar.gz resources {}
2021/07/08 17:27:45  ->  n100.r08.s028.Main.cp_out_file 73e1e829 exec extern s3://niema-test/n100/r08/n100.r08.s028.tar.gz 35.7MiB
2021/07/08 17:27:45 scheduler task e6819541 (flow 178f6ed7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d1cbefa6183d19c73d2ada663898f8d2adb09797a88094d548192052e87a0c03 -> s3://niema-test/n100/r08/n100.r08.s088.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:45  <-  n100.r08.s088.Main.cp_out_file 178f6ed7 ok   extern 0s 35.7MiB
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): promoting objects (try 0): started
2021/07/08 17:27:45 scheduler task 4b7d1db7 (flow 0c27eb3e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:45 scheduler task 4b7d1db7 (flow 0c27eb3e): promoting objects (try 0): started
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): retrieving diagnostic output (try 0): started
2021/07/08 17:27:45 scheduler task 4b7d1db7 (flow 0c27eb3e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:45 scheduler task 4b7d1db7 (flow 0c27eb3e): retrieving diagnostic output (try 0): started
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloading (try 0): started
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloading list<val<.=86118e6c 35.8MiB> 35.8MiB>
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloading val<.=14f9ceae 35.4MiB>
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloading val<.=705d7a13 35.4MiB>
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): retrieving result (try 0): started
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloaded val<.=705d7a13 35.4MiB>
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloaded val<.=14f9ceae 35.4MiB>
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloaded list<val<.=86118e6c 35.8MiB> 35.8MiB>
2021/07/08 17:27:45 scheduler task 43e62e27 (flow a215c969): unloading (try 0): successful, next state: complete
2021/07/08 17:27:45 scheduler task 4b7d1db7 (flow 0c27eb3e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:45  <-  n100.r08.s012.Main.out_file a215c969 ok     exec 5m7s 35.8MiB
2021/07/08 17:27:45 n100.r08.s012.Main.out_file a215c969 n100/r08/n100.r08.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d5bbb7382d625ca4410ce70481008a0d248cf15cab5c37cba9884caa5a75f306
	sha256:a215c9690fc52a382b69f5fb1e1b45747f132b33fc79282d652ff2277c05a927
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43e62e27fc743f134b7f67f3b62b0c6da770bcf8eec71ef179e856c59e9e069b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s012_output"
	    wget -O "n100.r08.s012_output/n100.r08.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s012_output/n100.r08.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s012_output/n100.r08.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s012_output/n100.r08.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s012_output/n100.r08.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s012_output/n100.r08.s012.reference.fas" "n100.r08.s012_output/n100.r08.s012.fq1.fastq" "n100.r08.s012_output/n100.r08.s012.fq2.fastq" | samtools view -bS - > "n100.r08.s012_output/n100.r08.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s012_output/n100.r08.s012.untrimmed.sorted.bam" "n100.r08.s012_output/n100.r08.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s012_output/n100.r08.s012.untrimmed.sorted.bam" -b "n100.r08.s012_output/n100.r08.s012.primers.bed" -p "n100.r08.s012_output/n100.r08.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" "n100.r08.s012_output/n100.r08.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s012_output/n100.r08.s012.reference.fas" "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" > "n100.r08.s012_output/n100.r08.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s012_output/n100.r08.s012.reference.fas" --call-indels "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" > "n100.r08.s012_output/n100.r08.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s012_output/n100.r08.s012.trimmed.sorted.bam" > "n100.r08.s012_output/n100.r08.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s012_output/n100.r08.s012.depth.txt" "n100.r08.s012_output/n100.r08.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s012_output/n100.r08.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s012_output/n100.r08.s012.reference.fas" | bcftools consensus -m "n100.r08.s012_output/n100.r08.s012.low_depth.tsv" tmp.vcf.gz > "n100.r08.s012_output/n100.r08.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:86118e6cd35f9324ccf1a9c32f30591591fa27ebb1dd8ed9998756dffa1bcf9d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=130.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:27:45 scheduler task 68ffb863 (flow 051ca8d4): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s012.tar.gz resources {}
2021/07/08 17:27:45  ->  n100.r08.s012.Main.cp_out_file 051ca8d4 exec extern s3://niema-test/n100/r08/n100.r08.s012.tar.gz 35.8MiB
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:45 scheduler task 4b7d1db7 (flow 0c27eb3e): retrieving result (try 0): started
2021/07/08 17:27:45 scheduler task 371d17ff (flow 2a447479): transferring output (try 0): started
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): transferring output (try 0): started
2021/07/08 17:27:46 scheduler task ce3a936e (flow 73e1e829): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4063029f92809b36b5ae14e9a1086e14b57bf15f27863eafa4881432d6a0546e -> s3://niema-test/n100/r08/n100.r08.s028.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:46  <-  n100.r08.s028.Main.cp_out_file 73e1e829 ok   extern 0s 35.7MiB
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloading (try 0): started
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloading list<val<.=6404f551 35.7MiB> 35.7MiB>
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloading val<.=56a31e98 35.4MiB>
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloading val<.=30a35ac2 35.4MiB>
2021/07/08 17:27:46 scheduler task 68ffb863 (flow 051ca8d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:86118e6cd35f9324ccf1a9c32f30591591fa27ebb1dd8ed9998756dffa1bcf9d -> s3://niema-test/n100/r08/n100.r08.s012.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:46  <-  n100.r08.s012.Main.cp_out_file 051ca8d4 ok   extern 0s 35.8MiB
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloading (try 0): started
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloading list<val<.=ea7add41 35.7MiB> 35.7MiB>
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloading val<.=1384e2cb 35.4MiB>
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloading val<.=07a8e3ca 35.4MiB>
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloaded list<val<.=6404f551 35.7MiB> 35.7MiB>
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloaded val<.=56a31e98 35.4MiB>
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloaded val<.=30a35ac2 35.4MiB>
2021/07/08 17:27:46 scheduler task 371d17ff (flow 2a447479): unloading (try 0): successful, next state: complete
2021/07/08 17:27:46  <-  n100.r08.s025.Main.out_file 2a447479 ok     exec 5m11s 35.7MiB
2021/07/08 17:27:46 n100.r08.s025.Main.out_file 2a447479 n100/r08/n100.r08.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:02a77ae0ee88ca794eef65f918b66a095b8228410d4bb5d65a8408e33b400386
	sha256:2a4474799a7448babdc3930104f238f8b0a4b2b360eb9d20f19b75121c396059
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/371d17ff833e84b037dafe2a561eb5f38e986ffb37e59745bdbdb8d14e254c21
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s025_output"
	    wget -O "n100.r08.s025_output/n100.r08.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s025_output/n100.r08.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s025_output/n100.r08.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s025_output/n100.r08.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s025_output/n100.r08.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s025_output/n100.r08.s025.reference.fas" "n100.r08.s025_output/n100.r08.s025.fq1.fastq" "n100.r08.s025_output/n100.r08.s025.fq2.fastq" | samtools view -bS - > "n100.r08.s025_output/n100.r08.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s025_output/n100.r08.s025.untrimmed.sorted.bam" "n100.r08.s025_output/n100.r08.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s025_output/n100.r08.s025.untrimmed.sorted.bam" -b "n100.r08.s025_output/n100.r08.s025.primers.bed" -p "n100.r08.s025_output/n100.r08.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" "n100.r08.s025_output/n100.r08.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s025_output/n100.r08.s025.reference.fas" "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" > "n100.r08.s025_output/n100.r08.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s025_output/n100.r08.s025.reference.fas" --call-indels "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" > "n100.r08.s025_output/n100.r08.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s025_output/n100.r08.s025.trimmed.sorted.bam" > "n100.r08.s025_output/n100.r08.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s025_output/n100.r08.s025.depth.txt" "n100.r08.s025_output/n100.r08.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s025_output/n100.r08.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s025_output/n100.r08.s025.reference.fas" | bcftools consensus -m "n100.r08.s025_output/n100.r08.s025.low_depth.tsv" tmp.vcf.gz > "n100.r08.s025_output/n100.r08.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6404f5518dd063ab00f0a2f35660a04f6d0db23ea636e51e31c489ef2cd78f75 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.3MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:27:46 scheduler task 10686fab (flow 11c6613e): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s025.tar.gz resources {}
2021/07/08 17:27:46  ->  n100.r08.s025.Main.cp_out_file 11c6613e exec extern s3://niema-test/n100/r08/n100.r08.s025.tar.gz 35.7MiB
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloaded val<.=1384e2cb 35.4MiB>
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloaded list<val<.=ea7add41 35.7MiB> 35.7MiB>
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloaded val<.=07a8e3ca 35.4MiB>
2021/07/08 17:27:46 scheduler task 4b7d1db7 (flow 0c27eb3e): unloading (try 0): successful, next state: complete
2021/07/08 17:27:46  <-  n100.r08.s097.Main.out_file 0c27eb3e ok     exec 5m15s 35.7MiB
2021/07/08 17:27:46 n100.r08.s097.Main.out_file 0c27eb3e n100/r08/n100.r08.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42e7f1e278e274d2d2e458ad68ebe5822d996f887e4340b802948b5e01c77750
	sha256:0c27eb3eb3ecdf71507c64450a9a21865ff69f9ef4396914807653bcb53246d3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4b7d1db713f4defb227d9e8d96aba8f1b81087d8a211ba5fff563123a1a9fc9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s097_output"
	    wget -O "n100.r08.s097_output/n100.r08.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s097_output/n100.r08.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s097_output/n100.r08.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s097_output/n100.r08.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s097_output/n100.r08.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s097_output/n100.r08.s097.reference.fas" "n100.r08.s097_output/n100.r08.s097.fq1.fastq" "n100.r08.s097_output/n100.r08.s097.fq2.fastq" | samtools view -bS - > "n100.r08.s097_output/n100.r08.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s097_output/n100.r08.s097.untrimmed.sorted.bam" "n100.r08.s097_output/n100.r08.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s097_output/n100.r08.s097.untrimmed.sorted.bam" -b "n100.r08.s097_output/n100.r08.s097.primers.bed" -p "n100.r08.s097_output/n100.r08.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" "n100.r08.s097_output/n100.r08.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s097_output/n100.r08.s097.reference.fas" "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" > "n100.r08.s097_output/n100.r08.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s097_output/n100.r08.s097.reference.fas" --call-indels "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" > "n100.r08.s097_output/n100.r08.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s097_output/n100.r08.s097.trimmed.sorted.bam" > "n100.r08.s097_output/n100.r08.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s097_output/n100.r08.s097.depth.txt" "n100.r08.s097_output/n100.r08.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s097_output/n100.r08.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s097_output/n100.r08.s097.reference.fas" | bcftools consensus -m "n100.r08.s097_output/n100.r08.s097.low_depth.tsv" tmp.vcf.gz > "n100.r08.s097_output/n100.r08.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ea7add41a33cec43a12589256397156aa1c838a1a788eb0a57a42fed9e96e55e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.0MiB max=124.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=878B max=2.1KiB
2021/07/08 17:27:46 scheduler task 2db47a85 (flow e35ae795): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s097.tar.gz resources {}
2021/07/08 17:27:46  ->  n100.r08.s097.Main.cp_out_file e35ae795 exec extern s3://niema-test/n100/r08/n100.r08.s097.tar.gz 35.7MiB
2021/07/08 17:27:47 scheduler task 10686fab (flow 11c6613e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6404f5518dd063ab00f0a2f35660a04f6d0db23ea636e51e31c489ef2cd78f75 -> s3://niema-test/n100/r08/n100.r08.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:47  <-  n100.r08.s025.Main.cp_out_file 11c6613e ok   extern 0s 35.7MiB
2021/07/08 17:27:47 scheduler task 2db47a85 (flow e35ae795): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ea7add41a33cec43a12589256397156aa1c838a1a788eb0a57a42fed9e96e55e -> s3://niema-test/n100/r08/n100.r08.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:47  <-  n100.r08.s097.Main.cp_out_file e35ae795 ok   extern 0s 35.7MiB
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): promoting objects (try 0): started
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): promoting objects (try 0): started
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): retrieving diagnostic output (try 0): started
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): retrieving diagnostic output (try 0): started
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): retrieving result (try 0): started
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): retrieving result (try 0): started
2021/07/08 17:27:48 scheduler task 719f8479 (flow bc3f293a): transferring output (try 0): started
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): promoting objects (try 0): started
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:48 scheduler task cef49e65 (flow 56e46f6d): transferring output (try 0): started
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): retrieving diagnostic output (try 0): started
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): retrieving result (try 0): started
2021/07/08 17:27:48 scheduler task 72dc116b (flow 0403b41d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:48 scheduler task 72dc116b (flow 0403b41d): promoting objects (try 0): started
2021/07/08 17:27:48 scheduler task 776b5e82 (flow 6ac026c6): transferring output (try 0): started
2021/07/08 17:27:48 scheduler task cdee6bfa (flow f460701b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:48 scheduler task cdee6bfa (flow f460701b): promoting objects (try 0): started
2021/07/08 17:27:48 scheduler task 72dc116b (flow 0403b41d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:48 scheduler task 72dc116b (flow 0403b41d): retrieving diagnostic output (try 0): started
2021/07/08 17:27:48 scheduler task cdee6bfa (flow f460701b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:48 scheduler task cdee6bfa (flow f460701b): retrieving diagnostic output (try 0): started
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloading (try 0): started
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloading list<val<.=05ff2aef 35.7MiB> 35.7MiB>
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloading val<.=2aaac432 35.4MiB>
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloading val<.=fb9a106b 35.4MiB>
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): retrieving result (try 0): started
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): promoting objects (try 0): started
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloading (try 0): started
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloading list<val<.=6b77c450 35.8MiB> 35.8MiB>
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloading val<.=abf317b3 35.4MiB>
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloading val<.=d1add5b7 35.4MiB>
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): retrieving result (try 0): started
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): promoting objects (try 0): started
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloaded list<val<.=05ff2aef 35.7MiB> 35.7MiB>
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloaded val<.=fb9a106b 35.4MiB>
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloaded val<.=2aaac432 35.4MiB>
2021/07/08 17:27:49 scheduler task 719f8479 (flow bc3f293a): unloading (try 0): successful, next state: complete
2021/07/08 17:27:49  <-  n100.r08.s060.Main.out_file bc3f293a ok     exec 5m13s 35.7MiB
2021/07/08 17:27:49 n100.r08.s060.Main.out_file bc3f293a n100/r08/n100.r08.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b820168e406b5245e8bdb04f26ba8e1152faa248fb480c0c29df5409315d77dc
	sha256:bc3f293a65d1afb77bbec7ea9c5107f915cbb2b6b08cf8d3ba292858913b4a25
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/719f8479a1bec2a6eebd0f8fa7a0ba4c6ea98be9606c45ad69a0395f006ceec9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s060_output"
	    wget -O "n100.r08.s060_output/n100.r08.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s060_output/n100.r08.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s060_output/n100.r08.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s060_output/n100.r08.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s060_output/n100.r08.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s060_output/n100.r08.s060.reference.fas" "n100.r08.s060_output/n100.r08.s060.fq1.fastq" "n100.r08.s060_output/n100.r08.s060.fq2.fastq" | samtools view -bS - > "n100.r08.s060_output/n100.r08.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s060_output/n100.r08.s060.untrimmed.sorted.bam" "n100.r08.s060_output/n100.r08.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s060_output/n100.r08.s060.untrimmed.sorted.bam" -b "n100.r08.s060_output/n100.r08.s060.primers.bed" -p "n100.r08.s060_output/n100.r08.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" "n100.r08.s060_output/n100.r08.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s060_output/n100.r08.s060.reference.fas" "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" > "n100.r08.s060_output/n100.r08.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s060_output/n100.r08.s060.reference.fas" --call-indels "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" > "n100.r08.s060_output/n100.r08.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s060_output/n100.r08.s060.trimmed.sorted.bam" > "n100.r08.s060_output/n100.r08.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s060_output/n100.r08.s060.depth.txt" "n100.r08.s060_output/n100.r08.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s060_output/n100.r08.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s060_output/n100.r08.s060.reference.fas" | bcftools consensus -m "n100.r08.s060_output/n100.r08.s060.low_depth.tsv" tmp.vcf.gz > "n100.r08.s060_output/n100.r08.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:05ff2aef842a3b2c40d1fbb996246794519dc72f36152f40aab7da5adceab24a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.6MiB max=127.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:49 scheduler task cc326cdb (flow 3e93840d): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s060.tar.gz resources {}
2021/07/08 17:27:49  ->  n100.r08.s060.Main.cp_out_file 3e93840d exec extern s3://niema-test/n100/r08/n100.r08.s060.tar.gz 35.7MiB
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): transferring output (try 0): started
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): retrieving diagnostic output (try 0): started
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloaded val<.=abf317b3 35.4MiB>
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloaded list<val<.=6b77c450 35.8MiB> 35.8MiB>
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloaded val<.=d1add5b7 35.4MiB>
2021/07/08 17:27:49 scheduler task cef49e65 (flow 56e46f6d): unloading (try 0): successful, next state: complete
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): promoting objects (try 0): started
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): retrieving diagnostic output (try 0): started
2021/07/08 17:27:49  <-  n100.r08.s009.Main.out_file 56e46f6d ok     exec 5m15s 35.8MiB
2021/07/08 17:27:49 n100.r08.s009.Main.out_file 56e46f6d n100/r08/n100.r08.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e2fe04b7426e95e91fed1dec4d4eef2d724d29c0b4c2a2ede2cdb7356fe16b3a
	sha256:56e46f6dbada50c476c369fe0f2c8901d21e2dd75d9a86b9a823a78aafafcc76
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cef49e65adb5a7d02e0f35111f6a980d5845f91aa25eba4a7214babcb9c99878
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s009_output"
	    wget -O "n100.r08.s009_output/n100.r08.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s009_output/n100.r08.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s009_output/n100.r08.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s009_output/n100.r08.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s009_output/n100.r08.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s009_output/n100.r08.s009.reference.fas" "n100.r08.s009_output/n100.r08.s009.fq1.fastq" "n100.r08.s009_output/n100.r08.s009.fq2.fastq" | samtools view -bS - > "n100.r08.s009_output/n100.r08.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s009_output/n100.r08.s009.untrimmed.sorted.bam" "n100.r08.s009_output/n100.r08.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s009_output/n100.r08.s009.untrimmed.sorted.bam" -b "n100.r08.s009_output/n100.r08.s009.primers.bed" -p "n100.r08.s009_output/n100.r08.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" "n100.r08.s009_output/n100.r08.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s009_output/n100.r08.s009.reference.fas" "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" > "n100.r08.s009_output/n100.r08.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s009_output/n100.r08.s009.reference.fas" --call-indels "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" > "n100.r08.s009_output/n100.r08.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s009_output/n100.r08.s009.trimmed.sorted.bam" > "n100.r08.s009_output/n100.r08.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s009_output/n100.r08.s009.depth.txt" "n100.r08.s009_output/n100.r08.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s009_output/n100.r08.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s009_output/n100.r08.s009.reference.fas" | bcftools consensus -m "n100.r08.s009_output/n100.r08.s009.low_depth.tsv" tmp.vcf.gz > "n100.r08.s009_output/n100.r08.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6b77c450ac69831edbc55c859386927420c664387a16faec69cc4e894cc1f0d7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.4MiB max=128.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 17:27:49 scheduler task 0b629c4f (flow 5c2d2ed3): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s009.tar.gz resources {}
2021/07/08 17:27:49  ->  n100.r08.s009.Main.cp_out_file 5c2d2ed3 exec extern s3://niema-test/n100/r08/n100.r08.s009.tar.gz 35.8MiB
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): transferring output (try 0): started
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): promoting objects (try 0): started
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): retrieving result (try 0): started
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): retrieving diagnostic output (try 0): started
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloading (try 0): started
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloading list<val<.=3bd9e926 35.7MiB> 35.7MiB>
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloading val<.=2867e288 35.4MiB>
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloading val<.=914152f9 35.4MiB>
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): retrieving result (try 0): started
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): retrieving diagnostic output (try 0): started
2021/07/08 17:27:49 scheduler task 77090a8d (flow 6db5a9b8): transferring output (try 0): started
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloaded val<.=2867e288 35.4MiB>
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloaded list<val<.=3bd9e926 35.7MiB> 35.7MiB>
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloaded val<.=914152f9 35.4MiB>
2021/07/08 17:27:49 scheduler task 776b5e82 (flow 6ac026c6): unloading (try 0): successful, next state: complete
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): retrieving result (try 0): started
2021/07/08 17:27:49  <-  n100.r08.s063.Main.out_file 6ac026c6 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:49 n100.r08.s063.Main.out_file 6ac026c6 n100/r08/n100.r08.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:19bf7bbe406059b5d4bfbcb99a01d979deb4cdc83c2cea78bc2bd0f1bb859897
	sha256:6ac026c6b0f01f019af9d9a2842d10ce8123e1e8deaca956736a8fa1eb8c7171
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/776b5e8292018aea48ade5e64a093d515c0f99e38f5bf5afec78da99288adc6b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s063_output"
	    wget -O "n100.r08.s063_output/n100.r08.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s063_output/n100.r08.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s063_output/n100.r08.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s063_output/n100.r08.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s063_output/n100.r08.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s063_output/n100.r08.s063.reference.fas" "n100.r08.s063_output/n100.r08.s063.fq1.fastq" "n100.r08.s063_output/n100.r08.s063.fq2.fastq" | samtools view -bS - > "n100.r08.s063_output/n100.r08.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s063_output/n100.r08.s063.untrimmed.sorted.bam" "n100.r08.s063_output/n100.r08.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s063_output/n100.r08.s063.untrimmed.sorted.bam" -b "n100.r08.s063_output/n100.r08.s063.primers.bed" -p "n100.r08.s063_output/n100.r08.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" "n100.r08.s063_output/n100.r08.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s063_output/n100.r08.s063.reference.fas" "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" > "n100.r08.s063_output/n100.r08.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s063_output/n100.r08.s063.reference.fas" --call-indels "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" > "n100.r08.s063_output/n100.r08.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s063_output/n100.r08.s063.trimmed.sorted.bam" > "n100.r08.s063_output/n100.r08.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s063_output/n100.r08.s063.depth.txt" "n100.r08.s063_output/n100.r08.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s063_output/n100.r08.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s063_output/n100.r08.s063.reference.fas" | bcftools consensus -m "n100.r08.s063_output/n100.r08.s063.low_depth.tsv" tmp.vcf.gz > "n100.r08.s063_output/n100.r08.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3bd9e926ad123d4321512c4fccd8087480fdf6322e0117b420d1f14998d03f08 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.8MiB max=126.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:27:49 scheduler task 4b03449e (flow 49eec393): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s063.tar.gz resources {}
2021/07/08 17:27:49  ->  n100.r08.s063.Main.cp_out_file 49eec393 exec extern s3://niema-test/n100/r08/n100.r08.s063.tar.gz 35.7MiB
2021/07/08 17:27:49 scheduler task b3c857b7 (flow 5fa48c75): transferring output (try 0): started
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloading (try 0): started
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloading list<val<.=89c0f4ad 35.8MiB> 35.8MiB>
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloading val<.=20aa9e90 35.4MiB>
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloading val<.=b55e413c 35.4MiB>
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): retrieving result (try 0): started
2021/07/08 17:27:49 scheduler task 123263b5 (flow d2a9e9c7): transferring output (try 0): started
2021/07/08 17:27:49 scheduler task 27109b10 (flow 11e863f7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:49 scheduler task 27109b10 (flow 11e863f7): promoting objects (try 0): started
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloaded list<val<.=89c0f4ad 35.8MiB> 35.8MiB>
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloaded val<.=b55e413c 35.4MiB>
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloaded val<.=20aa9e90 35.4MiB>
2021/07/08 17:27:49 scheduler task 72dc116b (flow 0403b41d): unloading (try 0): successful, next state: complete
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloading (try 0): started
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloading list<val<.=b810dedd 35.7MiB> 35.7MiB>
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloading val<.=71718c35 35.4MiB>
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloading val<.=ff88f31a 35.4MiB>
2021/07/08 17:27:49 scheduler task dc62e337 (flow 98ca279e): transferring output (try 0): started
2021/07/08 17:27:49  <-  n100.r08.s019.Main.out_file 0403b41d ok     exec 5m7s 35.8MiB
2021/07/08 17:27:49 n100.r08.s019.Main.out_file 0403b41d n100/r08/n100.r08.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b91b54c5c274b689ac3a54d288343f24e2b42c0d6c04e471d16c869f8b738412
	sha256:0403b41d6e7c59ca389f3c80c7e131d4b19063bde1b71d4624bf121b871e9207
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/72dc116b04334380573eca4fbbb362a26bccf4ad3889ce827356631350c2c175
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s019_output"
	    wget -O "n100.r08.s019_output/n100.r08.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s019_output/n100.r08.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s019_output/n100.r08.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s019_output/n100.r08.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s019_output/n100.r08.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s019_output/n100.r08.s019.reference.fas" "n100.r08.s019_output/n100.r08.s019.fq1.fastq" "n100.r08.s019_output/n100.r08.s019.fq2.fastq" | samtools view -bS - > "n100.r08.s019_output/n100.r08.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s019_output/n100.r08.s019.untrimmed.sorted.bam" "n100.r08.s019_output/n100.r08.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s019_output/n100.r08.s019.untrimmed.sorted.bam" -b "n100.r08.s019_output/n100.r08.s019.primers.bed" -p "n100.r08.s019_output/n100.r08.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" "n100.r08.s019_output/n100.r08.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s019_output/n100.r08.s019.reference.fas" "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" > "n100.r08.s019_output/n100.r08.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s019_output/n100.r08.s019.reference.fas" --call-indels "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" > "n100.r08.s019_output/n100.r08.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s019_output/n100.r08.s019.trimmed.sorted.bam" > "n100.r08.s019_output/n100.r08.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s019_output/n100.r08.s019.depth.txt" "n100.r08.s019_output/n100.r08.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s019_output/n100.r08.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s019_output/n100.r08.s019.reference.fas" | bcftools consensus -m "n100.r08.s019_output/n100.r08.s019.low_depth.tsv" tmp.vcf.gz > "n100.r08.s019_output/n100.r08.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:89c0f4ad91389dab016e3cade21997f6cff190d6179b14631ff6802c2e3d0ba8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.9MiB max=127.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=694B max=3.0KiB
2021/07/08 17:27:49 scheduler task 2b7d97e2 (flow b92d9f6a): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s019.tar.gz resources {}
2021/07/08 17:27:49  ->  n100.r08.s019.Main.cp_out_file b92d9f6a exec extern s3://niema-test/n100/r08/n100.r08.s019.tar.gz 35.8MiB
2021/07/08 17:27:49 scheduler task 27109b10 (flow 11e863f7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:49 scheduler task 27109b10 (flow 11e863f7): retrieving diagnostic output (try 0): started
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloaded list<val<.=b810dedd 35.7MiB> 35.7MiB>
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloaded val<.=ff88f31a 35.4MiB>
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloaded val<.=71718c35 35.4MiB>
2021/07/08 17:27:49 scheduler task cdee6bfa (flow f460701b): unloading (try 0): successful, next state: complete
2021/07/08 17:27:49  <-  n100.r08.s029.Main.out_file f460701b ok     exec 5m8s 35.7MiB
2021/07/08 17:27:49 n100.r08.s029.Main.out_file f460701b n100/r08/n100.r08.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5994092e096b3b5e5ddaffc56b05f47f92b717d1388f113f39d111eca105145
	sha256:f460701be83f52a32c8ac4de3aeccb6742fe3d8c5de5776db2bd32f83917aa4c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cdee6bfae2f4172e40e1e60bcfcf86b75892d345678279ac52f5949327a65fb7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s029_output"
	    wget -O "n100.r08.s029_output/n100.r08.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s029_output/n100.r08.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s029_output/n100.r08.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s029_output/n100.r08.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s029_output/n100.r08.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s029_output/n100.r08.s029.reference.fas" "n100.r08.s029_output/n100.r08.s029.fq1.fastq" "n100.r08.s029_output/n100.r08.s029.fq2.fastq" | samtools view -bS - > "n100.r08.s029_output/n100.r08.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s029_output/n100.r08.s029.untrimmed.sorted.bam" "n100.r08.s029_output/n100.r08.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s029_output/n100.r08.s029.untrimmed.sorted.bam" -b "n100.r08.s029_output/n100.r08.s029.primers.bed" -p "n100.r08.s029_output/n100.r08.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" "n100.r08.s029_output/n100.r08.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s029_output/n100.r08.s029.reference.fas" "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" > "n100.r08.s029_output/n100.r08.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s029_output/n100.r08.s029.reference.fas" --call-indels "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" > "n100.r08.s029_output/n100.r08.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s029_output/n100.r08.s029.trimmed.sorted.bam" > "n100.r08.s029_output/n100.r08.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s029_output/n100.r08.s029.depth.txt" "n100.r08.s029_output/n100.r08.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s029_output/n100.r08.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s029_output/n100.r08.s029.reference.fas" | bcftools consensus -m "n100.r08.s029_output/n100.r08.s029.low_depth.tsv" tmp.vcf.gz > "n100.r08.s029_output/n100.r08.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b810deddd56046267574b2d3cda01a9d11e748a48d4b38f1f25073c3a71689b5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.7MiB max=125.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:27:49 scheduler task eab334d9 (flow 4e03f12c): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s029.tar.gz resources {}
2021/07/08 17:27:49  ->  n100.r08.s029.Main.cp_out_file 4e03f12c exec extern s3://niema-test/n100/r08/n100.r08.s029.tar.gz 35.7MiB
2021/07/08 17:27:50 scheduler task 0b629c4f (flow 5c2d2ed3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6b77c450ac69831edbc55c859386927420c664387a16faec69cc4e894cc1f0d7 -> s3://niema-test/n100/r08/n100.r08.s009.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s009.Main.cp_out_file 5c2d2ed3 ok   extern 0s 35.8MiB
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): retrieving result (try 0): started
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloading (try 0): started
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloading list<val<.=aaa30c43 35.7MiB> 35.7MiB>
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloading val<.=821a1f5c 35.4MiB>
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloading val<.=d1a1cd62 35.4MiB>
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloaded val<.=821a1f5c 35.4MiB>
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloaded list<val<.=aaa30c43 35.7MiB> 35.7MiB>
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloaded val<.=d1a1cd62 35.4MiB>
2021/07/08 17:27:50 scheduler task 77090a8d (flow 6db5a9b8): unloading (try 0): successful, next state: complete
2021/07/08 17:27:50 scheduler task cc326cdb (flow 3e93840d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:05ff2aef842a3b2c40d1fbb996246794519dc72f36152f40aab7da5adceab24a -> s3://niema-test/n100/r08/n100.r08.s060.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s060.Main.cp_out_file 3e93840d ok   extern 0s 35.7MiB
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): transferring output (try 0): started
2021/07/08 17:27:50  <-  n100.r08.s007.Main.out_file 6db5a9b8 ok     exec 5m17s 35.7MiB
2021/07/08 17:27:50 n100.r08.s007.Main.out_file 6db5a9b8 n100/r08/n100.r08.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:01eff617aa542797aeba1adf6e07e7a8ac93cdb53908a47353eabf8f670d8826
	sha256:6db5a9b804eacc50edbc6bbbdce1c661efb43d776028cba37bf03778156bdae2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77090a8d2a158d7fbf44f6961bc1814b2ce048659e04cde280af8692c88f539e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s007_output"
	    wget -O "n100.r08.s007_output/n100.r08.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s007_output/n100.r08.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s007_output/n100.r08.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s007_output/n100.r08.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s007_output/n100.r08.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s007_output/n100.r08.s007.reference.fas" "n100.r08.s007_output/n100.r08.s007.fq1.fastq" "n100.r08.s007_output/n100.r08.s007.fq2.fastq" | samtools view -bS - > "n100.r08.s007_output/n100.r08.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s007_output/n100.r08.s007.untrimmed.sorted.bam" "n100.r08.s007_output/n100.r08.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s007_output/n100.r08.s007.untrimmed.sorted.bam" -b "n100.r08.s007_output/n100.r08.s007.primers.bed" -p "n100.r08.s007_output/n100.r08.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" "n100.r08.s007_output/n100.r08.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s007_output/n100.r08.s007.reference.fas" "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" > "n100.r08.s007_output/n100.r08.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s007_output/n100.r08.s007.reference.fas" --call-indels "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" > "n100.r08.s007_output/n100.r08.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s007_output/n100.r08.s007.trimmed.sorted.bam" > "n100.r08.s007_output/n100.r08.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s007_output/n100.r08.s007.depth.txt" "n100.r08.s007_output/n100.r08.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s007_output/n100.r08.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s007_output/n100.r08.s007.reference.fas" | bcftools consensus -m "n100.r08.s007_output/n100.r08.s007.low_depth.tsv" tmp.vcf.gz > "n100.r08.s007_output/n100.r08.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aaa30c434a9d4e73c7a9cab6c97df7dd959774cd6d60e0539b4febc29586e5b1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=128.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:27:50 scheduler task dfe6c979 (flow 9a1617dd): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s007.tar.gz resources {}
2021/07/08 17:27:50  ->  n100.r08.s007.Main.cp_out_file 9a1617dd exec extern s3://niema-test/n100/r08/n100.r08.s007.tar.gz 35.7MiB
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloading (try 0): started
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloading list<val<.=4c435beb 35.7MiB> 35.7MiB>
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloading val<.=7e36d81d 35.4MiB>
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloading val<.=cae6b3c6 35.4MiB>
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloading (try 0): started
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloading list<val<.=86ba9d2a 35.8MiB> 35.8MiB>
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloading val<.=fc8cc797 35.4MiB>
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloading val<.=a0366a07 35.4MiB>
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloaded list<val<.=4c435beb 35.7MiB> 35.7MiB>
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloaded val<.=cae6b3c6 35.4MiB>
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloaded val<.=7e36d81d 35.4MiB>
2021/07/08 17:27:50 scheduler task b3c857b7 (flow 5fa48c75): unloading (try 0): successful, next state: complete
2021/07/08 17:27:50  <-  n100.r08.s068.Main.out_file 5fa48c75 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:50 n100.r08.s068.Main.out_file 5fa48c75 n100/r08/n100.r08.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7fefc93fa75dd182187813d78a7d8e977b82a7ddca11b2c5d24c3934ee72732d
	sha256:5fa48c7571ed208d02298655b5191d8f72764822f17587510b626b27db6ad072
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b3c857b78725bad7271aebc8cb8a5e9dfa80c7aad4ffa6c6b1335623d969bdee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s068_output"
	    wget -O "n100.r08.s068_output/n100.r08.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s068_output/n100.r08.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s068_output/n100.r08.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s068_output/n100.r08.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s068_output/n100.r08.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s068_output/n100.r08.s068.reference.fas" "n100.r08.s068_output/n100.r08.s068.fq1.fastq" "n100.r08.s068_output/n100.r08.s068.fq2.fastq" | samtools view -bS - > "n100.r08.s068_output/n100.r08.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s068_output/n100.r08.s068.untrimmed.sorted.bam" "n100.r08.s068_output/n100.r08.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s068_output/n100.r08.s068.untrimmed.sorted.bam" -b "n100.r08.s068_output/n100.r08.s068.primers.bed" -p "n100.r08.s068_output/n100.r08.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" "n100.r08.s068_output/n100.r08.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s068_output/n100.r08.s068.reference.fas" "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" > "n100.r08.s068_output/n100.r08.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s068_output/n100.r08.s068.reference.fas" --call-indels "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" > "n100.r08.s068_output/n100.r08.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s068_output/n100.r08.s068.trimmed.sorted.bam" > "n100.r08.s068_output/n100.r08.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s068_output/n100.r08.s068.depth.txt" "n100.r08.s068_output/n100.r08.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s068_output/n100.r08.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s068_output/n100.r08.s068.reference.fas" | bcftools consensus -m "n100.r08.s068_output/n100.r08.s068.low_depth.tsv" tmp.vcf.gz > "n100.r08.s068_output/n100.r08.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4c435beb300c25733e1c42b4ccf10aadcecc771dbf823a1ad972a546100e3f99 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=125.2MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=872B max=2.1KiB
2021/07/08 17:27:50 scheduler task d06c81b2 (flow d057d5c1): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s068.tar.gz resources {}
2021/07/08 17:27:50  ->  n100.r08.s068.Main.cp_out_file d057d5c1 exec extern s3://niema-test/n100/r08/n100.r08.s068.tar.gz 35.7MiB
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): promoting objects (try 0): started
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloaded val<.=fc8cc797 35.4MiB>
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloaded list<val<.=86ba9d2a 35.8MiB> 35.8MiB>
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloaded val<.=a0366a07 35.4MiB>
2021/07/08 17:27:50 scheduler task 123263b5 (flow d2a9e9c7): unloading (try 0): successful, next state: complete
2021/07/08 17:27:50  <-  n100.r08.s050.Main.out_file d2a9e9c7 ok     exec 5m10s 35.8MiB
2021/07/08 17:27:50 n100.r08.s050.Main.out_file d2a9e9c7 n100/r08/n100.r08.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b4e7d54118774012d7e31160d5756b2cb8ce58f18cb3b733f8325c5428c92fc5
	sha256:d2a9e9c720ee38287a3c1364124a971e9aad9d184882bd2c5b9df66fc3165691
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/123263b5f44826b6829478c447efdcbbd458719379ab14a247cd84e6672fbaf9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s050_output"
	    wget -O "n100.r08.s050_output/n100.r08.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s050_output/n100.r08.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s050_output/n100.r08.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s050_output/n100.r08.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s050_output/n100.r08.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s050_output/n100.r08.s050.reference.fas" "n100.r08.s050_output/n100.r08.s050.fq1.fastq" "n100.r08.s050_output/n100.r08.s050.fq2.fastq" | samtools view -bS - > "n100.r08.s050_output/n100.r08.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s050_output/n100.r08.s050.untrimmed.sorted.bam" "n100.r08.s050_output/n100.r08.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s050_output/n100.r08.s050.untrimmed.sorted.bam" -b "n100.r08.s050_output/n100.r08.s050.primers.bed" -p "n100.r08.s050_output/n100.r08.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" "n100.r08.s050_output/n100.r08.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s050_output/n100.r08.s050.reference.fas" "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" > "n100.r08.s050_output/n100.r08.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s050_output/n100.r08.s050.reference.fas" --call-indels "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" > "n100.r08.s050_output/n100.r08.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s050_output/n100.r08.s050.trimmed.sorted.bam" > "n100.r08.s050_output/n100.r08.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s050_output/n100.r08.s050.depth.txt" "n100.r08.s050_output/n100.r08.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s050_output/n100.r08.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s050_output/n100.r08.s050.reference.fas" | bcftools consensus -m "n100.r08.s050_output/n100.r08.s050.low_depth.tsv" tmp.vcf.gz > "n100.r08.s050_output/n100.r08.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:86ba9d2a69bc4827713b1769d77abb0a123ca9efedc2b0e01a94cdf9b4955b7e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=130.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:50 scheduler task b6c6a85d (flow d75e550a): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s050.tar.gz resources {}
2021/07/08 17:27:50  ->  n100.r08.s050.Main.cp_out_file d75e550a exec extern s3://niema-test/n100/r08/n100.r08.s050.tar.gz 35.8MiB
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloading (try 0): started
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloading list<val<.=7983d601 35.6MiB> 35.6MiB>
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloading val<.=7962671e 35.4MiB>
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloading val<.=f8034cb5 35.4MiB>
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): retrieving diagnostic output (try 0): started
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloaded val<.=7962671e 35.4MiB>
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloaded val<.=f8034cb5 35.4MiB>
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloaded list<val<.=7983d601 35.6MiB> 35.6MiB>
2021/07/08 17:27:50 scheduler task dc62e337 (flow 98ca279e): unloading (try 0): successful, next state: complete
2021/07/08 17:27:50  <-  n100.r08.s024.Main.out_file 98ca279e ok     exec 5m8s 35.6MiB
2021/07/08 17:27:50 n100.r08.s024.Main.out_file 98ca279e n100/r08/n100.r08.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8bf96b945aec496311988e4546fd80fb0bb325729aa8135147218aea9608bdea
	sha256:98ca279ec2a62edace4e616c3a941929918f034be302da97d0e0fd39ba3c123d
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dc62e337486771553f7f86252be2f73cfc3c23f2d3f8c4844d682aa330971935
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s024_output"
	    wget -O "n100.r08.s024_output/n100.r08.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s024_output/n100.r08.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s024_output/n100.r08.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s024_output/n100.r08.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s024_output/n100.r08.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s024_output/n100.r08.s024.reference.fas" "n100.r08.s024_output/n100.r08.s024.fq1.fastq" "n100.r08.s024_output/n100.r08.s024.fq2.fastq" | samtools view -bS - > "n100.r08.s024_output/n100.r08.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s024_output/n100.r08.s024.untrimmed.sorted.bam" "n100.r08.s024_output/n100.r08.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s024_output/n100.r08.s024.untrimmed.sorted.bam" -b "n100.r08.s024_output/n100.r08.s024.primers.bed" -p "n100.r08.s024_output/n100.r08.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" "n100.r08.s024_output/n100.r08.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s024_output/n100.r08.s024.reference.fas" "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" > "n100.r08.s024_output/n100.r08.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s024_output/n100.r08.s024.reference.fas" --call-indels "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" > "n100.r08.s024_output/n100.r08.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s024_output/n100.r08.s024.trimmed.sorted.bam" > "n100.r08.s024_output/n100.r08.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s024_output/n100.r08.s024.depth.txt" "n100.r08.s024_output/n100.r08.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s024_output/n100.r08.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s024_output/n100.r08.s024.reference.fas" | bcftools consensus -m "n100.r08.s024_output/n100.r08.s024.low_depth.tsv" tmp.vcf.gz > "n100.r08.s024_output/n100.r08.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7983d601c2c634faf01c93e6e041df1d9d5c5aa74cfe40c220467ba5abc4febc 35.6MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=128.2MiB
	    disk mean=5.9MiB max=35.6MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:27:50 scheduler task 980d1876 (flow 9237dc29): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s024.tar.gz resources {}
2021/07/08 17:27:50  ->  n100.r08.s024.Main.cp_out_file 9237dc29 exec extern s3://niema-test/n100/r08/n100.r08.s024.tar.gz 35.6MiB
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:50 scheduler task eab334d9 (flow 4e03f12c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b810deddd56046267574b2d3cda01a9d11e748a48d4b38f1f25073c3a71689b5 -> s3://niema-test/n100/r08/n100.r08.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s029.Main.cp_out_file 4e03f12c ok   extern 0s 35.7MiB
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): retrieving result (try 0): started
2021/07/08 17:27:50 scheduler task 2b7d97e2 (flow b92d9f6a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:89c0f4ad91389dab016e3cade21997f6cff190d6179b14631ff6802c2e3d0ba8 -> s3://niema-test/n100/r08/n100.r08.s019.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s019.Main.cp_out_file b92d9f6a ok   extern 0s 35.8MiB
2021/07/08 17:27:50 scheduler task 17f58eff (flow afb9c82e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:50 scheduler task 17f58eff (flow afb9c82e): promoting objects (try 0): started
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:50 scheduler task f10c7dd1 (flow d4a953a5): transferring output (try 0): started
2021/07/08 17:27:50 scheduler task 4b03449e (flow 49eec393): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3bd9e926ad123d4321512c4fccd8087480fdf6322e0117b420d1f14998d03f08 -> s3://niema-test/n100/r08/n100.r08.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s063.Main.cp_out_file 49eec393 ok   extern 0s 35.7MiB
2021/07/08 17:27:50 scheduler task 17f58eff (flow afb9c82e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:50 scheduler task 17f58eff (flow afb9c82e): retrieving diagnostic output (try 0): started
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloading (try 0): started
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloading list<val<.=1567230f 35.7MiB> 35.7MiB>
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloading val<.=3492ebc6 35.4MiB>
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloading val<.=ca0e09b1 35.4MiB>
2021/07/08 17:27:50 scheduler task 35a36d68 (flow c0e958d6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:50 scheduler task 35a36d68 (flow c0e958d6): promoting objects (try 0): started
2021/07/08 17:27:50 scheduler task 5f2477ba (flow aa8092e5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:50 scheduler task 5f2477ba (flow aa8092e5): promoting objects (try 0): started
2021/07/08 17:27:50 scheduler task 35a36d68 (flow c0e958d6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloaded list<val<.=1567230f 35.7MiB> 35.7MiB>
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloaded val<.=3492ebc6 35.4MiB>
2021/07/08 17:27:50 scheduler task 67ce347f (flow 32d2695b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloaded val<.=ca0e09b1 35.4MiB>
2021/07/08 17:27:50 scheduler task 27109b10 (flow 11e863f7): unloading (try 0): successful, next state: complete
2021/07/08 17:27:50 scheduler task 17f58eff (flow afb9c82e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:50 scheduler task 35a36d68 (flow c0e958d6): retrieving diagnostic output (try 0): started
2021/07/08 17:27:50 scheduler task 67ce347f (flow 32d2695b): promoting objects (try 0): started
2021/07/08 17:27:50  <-  n100.r08.s005.Main.out_file 11e863f7 ok     exec 5m12s 35.7MiB
2021/07/08 17:27:50 n100.r08.s005.Main.out_file 11e863f7 n100/r08/n100.r08.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:58b19a706c042799cb74094d29589d75b49e6daed3ac7148bfe8f29145a0b4ec
	sha256:11e863f705e76c3c4ec1ff216195c5c128c2614f901d82a3857b2a904bf82289
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27109b10b4cc93ca33cd9cb8f9df09f278f55bd8d74555c7e2942d4b272968d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s005_output"
	    wget -O "n100.r08.s005_output/n100.r08.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s005_output/n100.r08.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s005_output/n100.r08.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s005_output/n100.r08.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s005_output/n100.r08.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s005_output/n100.r08.s005.reference.fas" "n100.r08.s005_output/n100.r08.s005.fq1.fastq" "n100.r08.s005_output/n100.r08.s005.fq2.fastq" | samtools view -bS - > "n100.r08.s005_output/n100.r08.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s005_output/n100.r08.s005.untrimmed.sorted.bam" "n100.r08.s005_output/n100.r08.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s005_output/n100.r08.s005.untrimmed.sorted.bam" -b "n100.r08.s005_output/n100.r08.s005.primers.bed" -p "n100.r08.s005_output/n100.r08.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" "n100.r08.s005_output/n100.r08.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s005_output/n100.r08.s005.reference.fas" "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" > "n100.r08.s005_output/n100.r08.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s005_output/n100.r08.s005.reference.fas" --call-indels "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" > "n100.r08.s005_output/n100.r08.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s005_output/n100.r08.s005.trimmed.sorted.bam" > "n100.r08.s005_output/n100.r08.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s005_output/n100.r08.s005.depth.txt" "n100.r08.s005_output/n100.r08.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s005_output/n100.r08.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s005_output/n100.r08.s005.reference.fas" | bcftools consensus -m "n100.r08.s005_output/n100.r08.s005.low_depth.tsv" tmp.vcf.gz > "n100.r08.s005_output/n100.r08.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1567230fb5d5e31c175ab94972e1aa2c2a56fa718805f73ec80c22e6181de869 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.1MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:27:50 scheduler task c951cba7 (flow 4e39c98d): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s005.tar.gz resources {}
2021/07/08 17:27:50  ->  n100.r08.s005.Main.cp_out_file 4e39c98d exec extern s3://niema-test/n100/r08/n100.r08.s005.tar.gz 35.7MiB
2021/07/08 17:27:50 scheduler task 5f2477ba (flow aa8092e5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:50 scheduler task 17f58eff (flow afb9c82e): retrieving result (try 0): started
2021/07/08 17:27:50 scheduler task 5f2477ba (flow aa8092e5): retrieving diagnostic output (try 0): started
2021/07/08 17:27:50 scheduler task dfe6c979 (flow 9a1617dd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aaa30c434a9d4e73c7a9cab6c97df7dd959774cd6d60e0539b4febc29586e5b1 -> s3://niema-test/n100/r08/n100.r08.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s007.Main.cp_out_file 9a1617dd ok   extern 0s 35.7MiB
2021/07/08 17:27:50 scheduler task b6c6a85d (flow d75e550a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:86ba9d2a69bc4827713b1769d77abb0a123ca9efedc2b0e01a94cdf9b4955b7e -> s3://niema-test/n100/r08/n100.r08.s050.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s050.Main.cp_out_file d75e550a ok   extern 0s 35.8MiB
2021/07/08 17:27:50 scheduler task d06c81b2 (flow d057d5c1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4c435beb300c25733e1c42b4ccf10aadcecc771dbf823a1ad972a546100e3f99 -> s3://niema-test/n100/r08/n100.r08.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:50  <-  n100.r08.s068.Main.cp_out_file d057d5c1 ok   extern 0s 35.7MiB
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): retrieving diagnostic output (try 0): started
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): retrieving result (try 0): started
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): transferring output (try 0): started
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): retrieving result (try 0): started
2021/07/08 17:27:51 scheduler task 980d1876 (flow 9237dc29): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7983d601c2c634faf01c93e6e041df1d9d5c5aa74cfe40c220467ba5abc4febc -> s3://niema-test/n100/r08/n100.r08.s024.tar.gz (35.6MiB) in 1s (35.6MiB/s) 
2021/07/08 17:27:51  <-  n100.r08.s024.Main.cp_out_file 9237dc29 ok   extern 0s 35.6MiB
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloading (try 0): started
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloading list<val<.=b2271ad4 35.8MiB> 35.8MiB>
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloading val<.=3c4278dc 35.4MiB>
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloading val<.=f44c0a41 35.4MiB>
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): retrieving result (try 0): started
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): transferring output (try 0): started
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): transferring output (try 0): started
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloaded list<val<.=b2271ad4 35.8MiB> 35.8MiB>
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloaded val<.=3c4278dc 35.4MiB>
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloaded val<.=f44c0a41 35.4MiB>
2021/07/08 17:27:51 scheduler task f10c7dd1 (flow d4a953a5): unloading (try 0): successful, next state: complete
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:51  <-  n100.r08.s078.Main.out_file d4a953a5 ok     exec 5m16s 35.8MiB
2021/07/08 17:27:51 n100.r08.s078.Main.out_file d4a953a5 n100/r08/n100.r08.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3b27a4f7605f6ce025f0b4b7ec9b3369e40a23bb2497b01d58042adb9f29f929
	sha256:d4a953a5d5e24456878bd3a80327065cc2c2d426f8dc80ebb75f3142cd881fe2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f10c7dd1ee222393d01c85a0b71ce8a84ad45b4027a8fdf625e4cc20f90f8e60
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s078_output"
	    wget -O "n100.r08.s078_output/n100.r08.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s078_output/n100.r08.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s078_output/n100.r08.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s078_output/n100.r08.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s078_output/n100.r08.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s078_output/n100.r08.s078.reference.fas" "n100.r08.s078_output/n100.r08.s078.fq1.fastq" "n100.r08.s078_output/n100.r08.s078.fq2.fastq" | samtools view -bS - > "n100.r08.s078_output/n100.r08.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s078_output/n100.r08.s078.untrimmed.sorted.bam" "n100.r08.s078_output/n100.r08.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s078_output/n100.r08.s078.untrimmed.sorted.bam" -b "n100.r08.s078_output/n100.r08.s078.primers.bed" -p "n100.r08.s078_output/n100.r08.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" "n100.r08.s078_output/n100.r08.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s078_output/n100.r08.s078.reference.fas" "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" > "n100.r08.s078_output/n100.r08.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s078_output/n100.r08.s078.reference.fas" --call-indels "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" > "n100.r08.s078_output/n100.r08.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s078_output/n100.r08.s078.trimmed.sorted.bam" > "n100.r08.s078_output/n100.r08.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s078_output/n100.r08.s078.depth.txt" "n100.r08.s078_output/n100.r08.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s078_output/n100.r08.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s078_output/n100.r08.s078.reference.fas" | bcftools consensus -m "n100.r08.s078_output/n100.r08.s078.low_depth.tsv" tmp.vcf.gz > "n100.r08.s078_output/n100.r08.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b2271ad4d5ba2105be5af178fa7b8c4ea5f3e02def0d426252f9b95665fd8f23 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.2MiB max=127.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=699B max=2.0KiB
2021/07/08 17:27:51 scheduler task deed6f58 (flow 847dce2c): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s078.tar.gz resources {}
2021/07/08 17:27:51  ->  n100.r08.s078.Main.cp_out_file 847dce2c exec extern s3://niema-test/n100/r08/n100.r08.s078.tar.gz 35.8MiB
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): transferring output (try 0): started
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): promoting objects (try 0): started
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): retrieving diagnostic output (try 0): started
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): promoting objects (try 0): started
2021/07/08 17:27:51 scheduler task c951cba7 (flow 4e39c98d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1567230fb5d5e31c175ab94972e1aa2c2a56fa718805f73ec80c22e6181de869 -> s3://niema-test/n100/r08/n100.r08.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:51  <-  n100.r08.s005.Main.cp_out_file 4e39c98d ok   extern 0s 35.7MiB
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): retrieving diagnostic output (try 0): started
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): retrieving result (try 0): started
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloading (try 0): started
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloading list<val<.=aa140d63 35.8MiB> 35.8MiB>
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloading val<.=15073296 35.4MiB>
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloading val<.=6b6f10be 35.4MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloaded val<.=15073296 35.4MiB>
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloaded list<val<.=aa140d63 35.8MiB> 35.8MiB>
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloaded val<.=6b6f10be 35.4MiB>
2021/07/08 17:27:51 scheduler task 17f58eff (flow afb9c82e): unloading (try 0): successful, next state: complete
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:51 scheduler task 8d3ebe19 (flow 31c07028): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloading (try 0): started
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloading list<val<.=3555bad6 35.8MiB> 35.8MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloading val<.=2b27ca39 35.4MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloading val<.=7237d65e 35.4MiB>
2021/07/08 17:27:51  <-  n100.r08.s010.Main.out_file afb9c82e ok     exec 5m12s 35.8MiB
2021/07/08 17:27:51 n100.r08.s010.Main.out_file afb9c82e n100/r08/n100.r08.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6b7618dabd1c31f57c9b82129ce3987e5b2d4913fa93657b3903e35a709b870f
	sha256:afb9c82ec37ac7fa43a770d8d0edd5908613d305a2fdbf4230d88d0869358164
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/17f58eff34b2a96925ccd05175ec81afc079ca6492539081e97ec80ed0a35f64
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s010_output"
	    wget -O "n100.r08.s010_output/n100.r08.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s010_output/n100.r08.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s010_output/n100.r08.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s010_output/n100.r08.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s010_output/n100.r08.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s010_output/n100.r08.s010.reference.fas" "n100.r08.s010_output/n100.r08.s010.fq1.fastq" "n100.r08.s010_output/n100.r08.s010.fq2.fastq" | samtools view -bS - > "n100.r08.s010_output/n100.r08.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s010_output/n100.r08.s010.untrimmed.sorted.bam" "n100.r08.s010_output/n100.r08.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s010_output/n100.r08.s010.untrimmed.sorted.bam" -b "n100.r08.s010_output/n100.r08.s010.primers.bed" -p "n100.r08.s010_output/n100.r08.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" "n100.r08.s010_output/n100.r08.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s010_output/n100.r08.s010.reference.fas" "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" > "n100.r08.s010_output/n100.r08.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s010_output/n100.r08.s010.reference.fas" --call-indels "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" > "n100.r08.s010_output/n100.r08.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s010_output/n100.r08.s010.trimmed.sorted.bam" > "n100.r08.s010_output/n100.r08.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s010_output/n100.r08.s010.depth.txt" "n100.r08.s010_output/n100.r08.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s010_output/n100.r08.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s010_output/n100.r08.s010.reference.fas" | bcftools consensus -m "n100.r08.s010_output/n100.r08.s010.low_depth.tsv" tmp.vcf.gz > "n100.r08.s010_output/n100.r08.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aa140d63b161de145241e3ee80e85ca59b66b5fe3aa68365e079d2b6ef46542c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.5MiB max=129.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:51 scheduler task 0668fd1b (flow 9251ac94): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s010.tar.gz resources {}
2021/07/08 17:27:51  ->  n100.r08.s010.Main.cp_out_file 9251ac94 exec extern s3://niema-test/n100/r08/n100.r08.s010.tar.gz 35.8MiB
2021/07/08 17:27:51 scheduler task bf7e40f2 (flow d91ad154): transferring output (try 0): started
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): retrieving result (try 0): started
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloading (try 0): started
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloading list<val<.=0fc0a8bd 35.7MiB> 35.7MiB>
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloading val<.=5ca84b8e 35.4MiB>
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloading val<.=dc9e2aab 35.4MiB>
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:51 scheduler task 8d3ebe19 (flow 31c07028): promoting objects (try 0): started
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloading (try 0): started
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloading list<val<.=fb566e36 35.7MiB> 35.7MiB>
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloading val<.=faea88dd 35.4MiB>
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloading val<.=ccb47a12 35.4MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloaded val<.=7237d65e 35.4MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloaded list<val<.=3555bad6 35.8MiB> 35.8MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloaded val<.=2b27ca39 35.4MiB>
2021/07/08 17:27:51 scheduler task 5f2477ba (flow aa8092e5): unloading (try 0): successful, next state: complete
2021/07/08 17:27:51  <-  n100.r08.s070.Main.out_file aa8092e5 ok     exec 5m16s 35.8MiB
2021/07/08 17:27:51 n100.r08.s070.Main.out_file aa8092e5 n100/r08/n100.r08.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cedcc469a8df2e3a2b8aae3afdd2abc1a4ef8a85fb9e8a34fb3dafe8cf1d2c5c
	sha256:aa8092e5e3fe98095c0011909240c5d78876ef49153468a35065507fb89948ca
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f2477ba2c846d104c50e1efa834c30900ae21412a2fc64537db70785b65466f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s070_output"
	    wget -O "n100.r08.s070_output/n100.r08.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s070_output/n100.r08.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s070_output/n100.r08.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s070_output/n100.r08.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s070_output/n100.r08.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s070_output/n100.r08.s070.reference.fas" "n100.r08.s070_output/n100.r08.s070.fq1.fastq" "n100.r08.s070_output/n100.r08.s070.fq2.fastq" | samtools view -bS - > "n100.r08.s070_output/n100.r08.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s070_output/n100.r08.s070.untrimmed.sorted.bam" "n100.r08.s070_output/n100.r08.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s070_output/n100.r08.s070.untrimmed.sorted.bam" -b "n100.r08.s070_output/n100.r08.s070.primers.bed" -p "n100.r08.s070_output/n100.r08.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" "n100.r08.s070_output/n100.r08.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s070_output/n100.r08.s070.reference.fas" "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" > "n100.r08.s070_output/n100.r08.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s070_output/n100.r08.s070.reference.fas" --call-indels "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" > "n100.r08.s070_output/n100.r08.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s070_output/n100.r08.s070.trimmed.sorted.bam" > "n100.r08.s070_output/n100.r08.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s070_output/n100.r08.s070.depth.txt" "n100.r08.s070_output/n100.r08.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s070_output/n100.r08.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s070_output/n100.r08.s070.reference.fas" | bcftools consensus -m "n100.r08.s070_output/n100.r08.s070.low_depth.tsv" tmp.vcf.gz > "n100.r08.s070_output/n100.r08.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3555bad6a06c88132348ccaf0de4683cb75e319f3f2daf2c435fed0c1e38554f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.7MiB max=125.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:51 scheduler task 1f838a32 (flow a67fa9fe): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s070.tar.gz resources {}
2021/07/08 17:27:51  ->  n100.r08.s070.Main.cp_out_file a67fa9fe exec extern s3://niema-test/n100/r08/n100.r08.s070.tar.gz 35.8MiB
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloaded list<val<.=0fc0a8bd 35.7MiB> 35.7MiB>
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:51 scheduler task 533c7302 (flow f2462fba): transferring output (try 0): started
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloaded val<.=5ca84b8e 35.4MiB>
2021/07/08 17:27:51 scheduler task 0daa8d96 (flow 6a75b3c2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloaded val<.=dc9e2aab 35.4MiB>
2021/07/08 17:27:51 scheduler task 35a36d68 (flow c0e958d6): unloading (try 0): successful, next state: complete
2021/07/08 17:27:51 scheduler task 0daa8d96 (flow 6a75b3c2): promoting objects (try 0): started
2021/07/08 17:27:51  <-  n100.r08.s092.Main.out_file c0e958d6 ok     exec 5m13s 35.7MiB
2021/07/08 17:27:51 n100.r08.s092.Main.out_file c0e958d6 n100/r08/n100.r08.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:40fa461905a7c802fb80f90195ec20d6f699efffc863ab1b97981ae50b1ae7aa
	sha256:c0e958d63a5f9192e011246e74bc8c6232f65e824d345a1e1ea5da5774c0242b
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/35a36d68e82b59bcd59be95864ed29c036646bd1c7514b29835282194fd0b8c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s092_output"
	    wget -O "n100.r08.s092_output/n100.r08.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s092_output/n100.r08.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s092_output/n100.r08.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s092_output/n100.r08.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s092_output/n100.r08.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s092_output/n100.r08.s092.reference.fas" "n100.r08.s092_output/n100.r08.s092.fq1.fastq" "n100.r08.s092_output/n100.r08.s092.fq2.fastq" | samtools view -bS - > "n100.r08.s092_output/n100.r08.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s092_output/n100.r08.s092.untrimmed.sorted.bam" "n100.r08.s092_output/n100.r08.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s092_output/n100.r08.s092.untrimmed.sorted.bam" -b "n100.r08.s092_output/n100.r08.s092.primers.bed" -p "n100.r08.s092_output/n100.r08.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" "n100.r08.s092_output/n100.r08.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s092_output/n100.r08.s092.reference.fas" "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" > "n100.r08.s092_output/n100.r08.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s092_output/n100.r08.s092.reference.fas" --call-indels "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" > "n100.r08.s092_output/n100.r08.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s092_output/n100.r08.s092.trimmed.sorted.bam" > "n100.r08.s092_output/n100.r08.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s092_output/n100.r08.s092.depth.txt" "n100.r08.s092_output/n100.r08.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s092_output/n100.r08.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s092_output/n100.r08.s092.reference.fas" | bcftools consensus -m "n100.r08.s092_output/n100.r08.s092.low_depth.tsv" tmp.vcf.gz > "n100.r08.s092_output/n100.r08.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0fc0a8bd9f290d1d75de290abf8d8bb6cd647d76fcb361e1b9fb5b0b42cf482a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=125.9MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:51 scheduler task 8d0978c3 (flow 0442b2c0): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s092.tar.gz resources {}
2021/07/08 17:27:51  ->  n100.r08.s092.Main.cp_out_file 0442b2c0 exec extern s3://niema-test/n100/r08/n100.r08.s092.tar.gz 35.7MiB
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloaded val<.=ccb47a12 35.4MiB>
2021/07/08 17:27:51 scheduler task 8d3ebe19 (flow 31c07028): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloaded val<.=faea88dd 35.4MiB>
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloaded list<val<.=fb566e36 35.7MiB> 35.7MiB>
2021/07/08 17:27:51 scheduler task 67ce347f (flow 32d2695b): unloading (try 0): successful, next state: complete
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): retrieving diagnostic output (try 0): started
2021/07/08 17:27:52 scheduler task deed6f58 (flow 847dce2c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b2271ad4d5ba2105be5af178fa7b8c4ea5f3e02def0d426252f9b95665fd8f23 -> s3://niema-test/n100/r08/n100.r08.s078.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:52  <-  n100.r08.s078.Main.cp_out_file 847dce2c ok   extern 0s 35.8MiB
2021/07/08 17:27:52  <-  n100.r08.s081.Main.out_file 32d2695b ok     exec 5m12s 35.7MiB
2021/07/08 17:27:52 n100.r08.s081.Main.out_file 32d2695b n100/r08/n100.r08.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f2a0b9c3c9f330cdb186d055e9f3ac7dd8b616c875ac9cd10dfd2d83cb45d9c9
	sha256:32d2695b97b5d5017bff8b58bc1693c1bbd626eea6b9f33ff96d47fa728f3a3a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67ce347f9a08defa66e63980a8ab4b1f00f49c00a102c7f2fb9edcd346582cdf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s081_output"
	    wget -O "n100.r08.s081_output/n100.r08.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s081_output/n100.r08.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s081_output/n100.r08.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s081_output/n100.r08.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s081_output/n100.r08.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s081_output/n100.r08.s081.reference.fas" "n100.r08.s081_output/n100.r08.s081.fq1.fastq" "n100.r08.s081_output/n100.r08.s081.fq2.fastq" | samtools view -bS - > "n100.r08.s081_output/n100.r08.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s081_output/n100.r08.s081.untrimmed.sorted.bam" "n100.r08.s081_output/n100.r08.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s081_output/n100.r08.s081.untrimmed.sorted.bam" -b "n100.r08.s081_output/n100.r08.s081.primers.bed" -p "n100.r08.s081_output/n100.r08.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" "n100.r08.s081_output/n100.r08.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s081_output/n100.r08.s081.reference.fas" "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" > "n100.r08.s081_output/n100.r08.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s081_output/n100.r08.s081.reference.fas" --call-indels "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" > "n100.r08.s081_output/n100.r08.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s081_output/n100.r08.s081.trimmed.sorted.bam" > "n100.r08.s081_output/n100.r08.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s081_output/n100.r08.s081.depth.txt" "n100.r08.s081_output/n100.r08.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s081_output/n100.r08.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s081_output/n100.r08.s081.reference.fas" | bcftools consensus -m "n100.r08.s081_output/n100.r08.s081.low_depth.tsv" tmp.vcf.gz > "n100.r08.s081_output/n100.r08.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fb566e36bff06232587cfce18e4e7a6a193fed518b4f08bb726588cc50af1ebb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=130.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:27:52 scheduler task 1292ed80 (flow 6a15c9fc): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s081.tar.gz resources {}
2021/07/08 17:27:52  ->  n100.r08.s081.Main.cp_out_file 6a15c9fc exec extern s3://niema-test/n100/r08/n100.r08.s081.tar.gz 35.7MiB
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): retrieving diagnostic output (try 0): started
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): retrieving result (try 0): started
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): retrieving result (try 0): started
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): transferring output (try 0): started
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): promoting objects (try 0): started
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): transferring output (try 0): started
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): retrieving diagnostic output (try 0): started
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloading (try 0): started
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloading list<val<.=cdadc8a4 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloading val<.=d1bc9417 35.4MiB>
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloading val<.=27aa3262 35.4MiB>
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloaded list<val<.=cdadc8a4 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloaded val<.=d1bc9417 35.4MiB>
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloaded val<.=27aa3262 35.4MiB>
2021/07/08 17:27:52 scheduler task bf7e40f2 (flow d91ad154): unloading (try 0): successful, next state: complete
2021/07/08 17:27:52  <-  n100.r08.s077.Main.out_file d91ad154 ok     exec 5m10s 35.7MiB
2021/07/08 17:27:52 n100.r08.s077.Main.out_file d91ad154 n100/r08/n100.r08.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e7ec65aac484078a7ae690688f5351235c90cae7983c8695190907b62cb5e983
	sha256:d91ad154fe5297ed5dd191028b89c049ac850bfe6d47e6776bfb70342d39412f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bf7e40f2eba1865caca65845f635a4c15f661f03bf8907f4cbfc9635a64926c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s077_output"
	    wget -O "n100.r08.s077_output/n100.r08.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s077_output/n100.r08.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s077_output/n100.r08.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s077_output/n100.r08.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s077_output/n100.r08.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s077_output/n100.r08.s077.reference.fas" "n100.r08.s077_output/n100.r08.s077.fq1.fastq" "n100.r08.s077_output/n100.r08.s077.fq2.fastq" | samtools view -bS - > "n100.r08.s077_output/n100.r08.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s077_output/n100.r08.s077.untrimmed.sorted.bam" "n100.r08.s077_output/n100.r08.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s077_output/n100.r08.s077.untrimmed.sorted.bam" -b "n100.r08.s077_output/n100.r08.s077.primers.bed" -p "n100.r08.s077_output/n100.r08.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" "n100.r08.s077_output/n100.r08.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s077_output/n100.r08.s077.reference.fas" "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" > "n100.r08.s077_output/n100.r08.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s077_output/n100.r08.s077.reference.fas" --call-indels "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" > "n100.r08.s077_output/n100.r08.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s077_output/n100.r08.s077.trimmed.sorted.bam" > "n100.r08.s077_output/n100.r08.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s077_output/n100.r08.s077.depth.txt" "n100.r08.s077_output/n100.r08.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s077_output/n100.r08.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s077_output/n100.r08.s077.reference.fas" | bcftools consensus -m "n100.r08.s077_output/n100.r08.s077.low_depth.tsv" tmp.vcf.gz > "n100.r08.s077_output/n100.r08.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cdadc8a4645818527f555bbdb987cdb1f9473eb85f0779b9ca29f821e8977caa 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.2MiB max=130.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:52 scheduler task c7f6c631 (flow 1a742a40): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s077.tar.gz resources {}
2021/07/08 17:27:52  ->  n100.r08.s077.Main.cp_out_file 1a742a40 exec extern s3://niema-test/n100/r08/n100.r08.s077.tar.gz 35.7MiB
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): retrieving result (try 0): started
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloading (try 0): started
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloading list<val<.=e5fc5113 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloading val<.=1003b204 35.4MiB>
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloading val<.=e1fa96e5 35.4MiB>
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:52 scheduler task e73506b2 (flow 6e531834): transferring output (try 0): started
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloaded val<.=1003b204 35.4MiB>
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloaded val<.=e1fa96e5 35.4MiB>
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloaded list<val<.=e5fc5113 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task 533c7302 (flow f2462fba): unloading (try 0): successful, next state: complete
2021/07/08 17:27:52  <-  n100.r08.s069.Main.out_file f2462fba ok     exec 5m10s 35.7MiB
2021/07/08 17:27:52 n100.r08.s069.Main.out_file f2462fba n100/r08/n100.r08.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3f8aa0ef1c9e95cb69b3f87fb8fd34bcd75ee8134d743837ba7457196bc3114b
	sha256:f2462fbaf3f9956314042b01371a0de7cdecd52dee4cf1fd58aa5b176f11d381
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/533c7302ff1610763d99558bbabbdb7bc9e66322d3a942f15511782fdb0067de
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s069_output"
	    wget -O "n100.r08.s069_output/n100.r08.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s069_output/n100.r08.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s069_output/n100.r08.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s069_output/n100.r08.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s069_output/n100.r08.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s069_output/n100.r08.s069.reference.fas" "n100.r08.s069_output/n100.r08.s069.fq1.fastq" "n100.r08.s069_output/n100.r08.s069.fq2.fastq" | samtools view -bS - > "n100.r08.s069_output/n100.r08.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s069_output/n100.r08.s069.untrimmed.sorted.bam" "n100.r08.s069_output/n100.r08.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s069_output/n100.r08.s069.untrimmed.sorted.bam" -b "n100.r08.s069_output/n100.r08.s069.primers.bed" -p "n100.r08.s069_output/n100.r08.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" "n100.r08.s069_output/n100.r08.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s069_output/n100.r08.s069.reference.fas" "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" > "n100.r08.s069_output/n100.r08.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s069_output/n100.r08.s069.reference.fas" --call-indels "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" > "n100.r08.s069_output/n100.r08.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s069_output/n100.r08.s069.trimmed.sorted.bam" > "n100.r08.s069_output/n100.r08.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s069_output/n100.r08.s069.depth.txt" "n100.r08.s069_output/n100.r08.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s069_output/n100.r08.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s069_output/n100.r08.s069.reference.fas" | bcftools consensus -m "n100.r08.s069_output/n100.r08.s069.low_depth.tsv" tmp.vcf.gz > "n100.r08.s069_output/n100.r08.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e5fc5113d742cb15d3073d292b912600d45c18e57a8e70ecfc525e77aa205acf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.9MiB max=129.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:27:52 scheduler task b040b6c0 (flow 4479e7de): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s069.tar.gz resources {}
2021/07/08 17:27:52  ->  n100.r08.s069.Main.cp_out_file 4479e7de exec extern s3://niema-test/n100/r08/n100.r08.s069.tar.gz 35.7MiB
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloading (try 0): started
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloading list<val<.=38cc5bf4 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloading val<.=78e86a7b 35.4MiB>
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloading val<.=ff781a38 35.4MiB>
2021/07/08 17:27:52 scheduler task 0668fd1b (flow 9251ac94): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aa140d63b161de145241e3ee80e85ca59b66b5fe3aa68365e079d2b6ef46542c -> s3://niema-test/n100/r08/n100.r08.s010.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:52  <-  n100.r08.s010.Main.cp_out_file 9251ac94 ok   extern 0s 35.8MiB
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloaded val<.=78e86a7b 35.4MiB>
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloaded list<val<.=38cc5bf4 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloaded val<.=ff781a38 35.4MiB>
2021/07/08 17:27:52 scheduler task 8d3ebe19 (flow 31c07028): unloading (try 0): successful, next state: complete
2021/07/08 17:27:52  <-  n100.r08.s043.Main.out_file 31c07028 ok     exec 5m10s 35.7MiB
2021/07/08 17:27:52 n100.r08.s043.Main.out_file 31c07028 n100/r08/n100.r08.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f094f4bcd32395e621936ca4fab0e8fe0233d7a3ae45461c7ad8f1e4c6c0309a
	sha256:31c07028591a37d7afbcf973c80162f1664a125ee55dcc056fd7dca0e31ed12c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8d3ebe19e70eab7b15b4a1fb7d596f74f7a3d73828c80d8525efe7690da9c26f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s043_output"
	    wget -O "n100.r08.s043_output/n100.r08.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s043_output/n100.r08.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s043_output/n100.r08.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s043_output/n100.r08.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s043_output/n100.r08.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s043_output/n100.r08.s043.reference.fas" "n100.r08.s043_output/n100.r08.s043.fq1.fastq" "n100.r08.s043_output/n100.r08.s043.fq2.fastq" | samtools view -bS - > "n100.r08.s043_output/n100.r08.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s043_output/n100.r08.s043.untrimmed.sorted.bam" "n100.r08.s043_output/n100.r08.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s043_output/n100.r08.s043.untrimmed.sorted.bam" -b "n100.r08.s043_output/n100.r08.s043.primers.bed" -p "n100.r08.s043_output/n100.r08.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" "n100.r08.s043_output/n100.r08.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s043_output/n100.r08.s043.reference.fas" "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" > "n100.r08.s043_output/n100.r08.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s043_output/n100.r08.s043.reference.fas" --call-indels "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" > "n100.r08.s043_output/n100.r08.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s043_output/n100.r08.s043.trimmed.sorted.bam" > "n100.r08.s043_output/n100.r08.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s043_output/n100.r08.s043.depth.txt" "n100.r08.s043_output/n100.r08.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s043_output/n100.r08.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s043_output/n100.r08.s043.reference.fas" | bcftools consensus -m "n100.r08.s043_output/n100.r08.s043.low_depth.tsv" tmp.vcf.gz > "n100.r08.s043_output/n100.r08.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:38cc5bf40ee127854fa3f085dccaeac4da524de42c19791180be3cf51b7520d8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=128.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:27:52 scheduler task 9b93502c (flow 2a0c3267): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s043.tar.gz resources {}
2021/07/08 17:27:52  ->  n100.r08.s043.Main.cp_out_file 2a0c3267 exec extern s3://niema-test/n100/r08/n100.r08.s043.tar.gz 35.7MiB
2021/07/08 17:27:52 scheduler task 1f838a32 (flow a67fa9fe): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3555bad6a06c88132348ccaf0de4683cb75e319f3f2daf2c435fed0c1e38554f -> s3://niema-test/n100/r08/n100.r08.s070.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:52  <-  n100.r08.s070.Main.cp_out_file a67fa9fe ok   extern 0s 35.8MiB
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloading (try 0): started
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloading list<val<.=60e6fe20 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloading val<.=39ce44a9 35.4MiB>
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloading val<.=465ad269 35.4MiB>
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloaded val<.=465ad269 35.4MiB>
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloaded val<.=39ce44a9 35.4MiB>
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloaded list<val<.=60e6fe20 35.7MiB> 35.7MiB>
2021/07/08 17:27:52 scheduler task 0daa8d96 (flow 6a75b3c2): unloading (try 0): successful, next state: complete
2021/07/08 17:27:52  <-  n100.r08.s041.Main.out_file 6a75b3c2 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:52 n100.r08.s041.Main.out_file 6a75b3c2 n100/r08/n100.r08.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2a2606ae0d2a66c999f37603593c15392f366c6ee0af855e6396fc44779bb0b9
	sha256:6a75b3c296e68d52fa4944a99a98bae23a85539f634513d646bb83719651da50
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0daa8d9667e8d8ca2ad74aebce0de6c9e6fbe1cd7c37f9b0e27c678afa29260f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s041_output"
	    wget -O "n100.r08.s041_output/n100.r08.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s041_output/n100.r08.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s041_output/n100.r08.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s041_output/n100.r08.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s041_output/n100.r08.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s041_output/n100.r08.s041.reference.fas" "n100.r08.s041_output/n100.r08.s041.fq1.fastq" "n100.r08.s041_output/n100.r08.s041.fq2.fastq" | samtools view -bS - > "n100.r08.s041_output/n100.r08.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s041_output/n100.r08.s041.untrimmed.sorted.bam" "n100.r08.s041_output/n100.r08.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s041_output/n100.r08.s041.untrimmed.sorted.bam" -b "n100.r08.s041_output/n100.r08.s041.primers.bed" -p "n100.r08.s041_output/n100.r08.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" "n100.r08.s041_output/n100.r08.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s041_output/n100.r08.s041.reference.fas" "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" > "n100.r08.s041_output/n100.r08.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s041_output/n100.r08.s041.reference.fas" --call-indels "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" > "n100.r08.s041_output/n100.r08.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s041_output/n100.r08.s041.trimmed.sorted.bam" > "n100.r08.s041_output/n100.r08.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s041_output/n100.r08.s041.depth.txt" "n100.r08.s041_output/n100.r08.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s041_output/n100.r08.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s041_output/n100.r08.s041.reference.fas" | bcftools consensus -m "n100.r08.s041_output/n100.r08.s041.low_depth.tsv" tmp.vcf.gz > "n100.r08.s041_output/n100.r08.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:60e6fe20e6d5afc94359d60fea68948db06de50a3b3ebda5327cbddd2f049a9d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=2.0KiB
2021/07/08 17:27:52 scheduler task c3671c50 (flow edc0ae44): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s041.tar.gz resources {}
2021/07/08 17:27:52  ->  n100.r08.s041.Main.cp_out_file edc0ae44 exec extern s3://niema-test/n100/r08/n100.r08.s041.tar.gz 35.7MiB
2021/07/08 17:27:53 scheduler task 8d0978c3 (flow 0442b2c0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0fc0a8bd9f290d1d75de290abf8d8bb6cd647d76fcb361e1b9fb5b0b42cf482a -> s3://niema-test/n100/r08/n100.r08.s092.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s092.Main.cp_out_file 0442b2c0 ok   extern 0s 35.7MiB
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:53 scheduler task 1292ed80 (flow 6a15c9fc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fb566e36bff06232587cfce18e4e7a6a193fed518b4f08bb726588cc50af1ebb -> s3://niema-test/n100/r08/n100.r08.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s081.Main.cp_out_file 6a15c9fc ok   extern 0s 35.7MiB
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): promoting objects (try 0): started
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloading (try 0): started
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloading list<val<.=5d39732c 35.8MiB> 35.8MiB>
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloading val<.=62566f05 35.4MiB>
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloading val<.=38297540 35.4MiB>
2021/07/08 17:27:53 scheduler task c7f6c631 (flow 1a742a40): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cdadc8a4645818527f555bbdb987cdb1f9473eb85f0779b9ca29f821e8977caa -> s3://niema-test/n100/r08/n100.r08.s077.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s077.Main.cp_out_file 1a742a40 ok   extern 0s 35.7MiB
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloaded list<val<.=5d39732c 35.8MiB> 35.8MiB>
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): retrieving diagnostic output (try 0): started
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloaded val<.=38297540 35.4MiB>
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloaded val<.=62566f05 35.4MiB>
2021/07/08 17:27:53 scheduler task e73506b2 (flow 6e531834): unloading (try 0): successful, next state: complete
2021/07/08 17:27:53  <-  n100.r08.s051.Main.out_file 6e531834 ok     exec 5m10s 35.8MiB
2021/07/08 17:27:53 n100.r08.s051.Main.out_file 6e531834 n100/r08/n100.r08.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebe7937df90c33f5e726e9a9f84f3be305b8736a7230f906bd0e41a47265ebb4
	sha256:6e531834be0b3f0c2b773ec8bce0ef5a6265589d3faa766e38ef5dca5c34d526
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e73506b2205f6b1fb48451fcb8f58610453817c8195b8de905ba430d8dab740d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s051_output"
	    wget -O "n100.r08.s051_output/n100.r08.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s051_output/n100.r08.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s051_output/n100.r08.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s051_output/n100.r08.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s051_output/n100.r08.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s051_output/n100.r08.s051.reference.fas" "n100.r08.s051_output/n100.r08.s051.fq1.fastq" "n100.r08.s051_output/n100.r08.s051.fq2.fastq" | samtools view -bS - > "n100.r08.s051_output/n100.r08.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s051_output/n100.r08.s051.untrimmed.sorted.bam" "n100.r08.s051_output/n100.r08.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s051_output/n100.r08.s051.untrimmed.sorted.bam" -b "n100.r08.s051_output/n100.r08.s051.primers.bed" -p "n100.r08.s051_output/n100.r08.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" "n100.r08.s051_output/n100.r08.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s051_output/n100.r08.s051.reference.fas" "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" > "n100.r08.s051_output/n100.r08.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s051_output/n100.r08.s051.reference.fas" --call-indels "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" > "n100.r08.s051_output/n100.r08.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s051_output/n100.r08.s051.trimmed.sorted.bam" > "n100.r08.s051_output/n100.r08.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s051_output/n100.r08.s051.depth.txt" "n100.r08.s051_output/n100.r08.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s051_output/n100.r08.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s051_output/n100.r08.s051.reference.fas" | bcftools consensus -m "n100.r08.s051_output/n100.r08.s051.low_depth.tsv" tmp.vcf.gz > "n100.r08.s051_output/n100.r08.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5d39732caf71974fb9017b16103291539318346e44c37111ded6cdf99b7c107d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=123.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:53 scheduler task 2eaa9c82 (flow 1830cf47): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s051.tar.gz resources {}
2021/07/08 17:27:53  ->  n100.r08.s051.Main.cp_out_file 1830cf47 exec extern s3://niema-test/n100/r08/n100.r08.s051.tar.gz 35.8MiB
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): retrieving result (try 0): started
2021/07/08 17:27:53 scheduler task b040b6c0 (flow 4479e7de): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e5fc5113d742cb15d3073d292b912600d45c18e57a8e70ecfc525e77aa205acf -> s3://niema-test/n100/r08/n100.r08.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s069.Main.cp_out_file 4479e7de ok   extern 0s 35.7MiB
2021/07/08 17:27:53 scheduler task 9b93502c (flow 2a0c3267): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:38cc5bf40ee127854fa3f085dccaeac4da524de42c19791180be3cf51b7520d8 -> s3://niema-test/n100/r08/n100.r08.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s043.Main.cp_out_file 2a0c3267 ok   extern 0s 35.7MiB
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): transferring output (try 0): started
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): promoting objects (try 0): started
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): retrieving diagnostic output (try 0): started
2021/07/08 17:27:53 scheduler task 77ea896f (flow 6e71356b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:53 scheduler task 77ea896f (flow 6e71356b): promoting objects (try 0): started
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): retrieving result (try 0): started
2021/07/08 17:27:53 scheduler task 77ea896f (flow 6e71356b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:53 scheduler task 77ea896f (flow 6e71356b): retrieving diagnostic output (try 0): started
2021/07/08 17:27:53 scheduler task c3671c50 (flow edc0ae44): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:60e6fe20e6d5afc94359d60fea68948db06de50a3b3ebda5327cbddd2f049a9d -> s3://niema-test/n100/r08/n100.r08.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s041.Main.cp_out_file edc0ae44 ok   extern 0s 35.7MiB
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:53 scheduler task 4ef1336d (flow bc17d794): transferring output (try 0): started
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): unloading (try 0): started
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): unloading list<val<.=e381bd41 35.7MiB> 35.7MiB>
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): unloading val<.=13a329eb 35.4MiB>
2021/07/08 17:27:53 scheduler task f714587f (flow ffcb62ed): unloading val<.=90cefd8b 35.4MiB>
2021/07/08 17:27:53 scheduler task 2eaa9c82 (flow 1830cf47): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5d39732caf71974fb9017b16103291539318346e44c37111ded6cdf99b7c107d -> s3://niema-test/n100/r08/n100.r08.s051.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:53  <-  n100.r08.s051.Main.cp_out_file 1830cf47 ok   extern 0s 35.8MiB
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task f714587f (flow ffcb62ed): unloaded val<.=90cefd8b 35.4MiB>
2021/07/08 17:27:54 scheduler task f714587f (flow ffcb62ed): unloaded list<val<.=e381bd41 35.7MiB> 35.7MiB>
2021/07/08 17:27:54 scheduler task f714587f (flow ffcb62ed): unloaded val<.=13a329eb 35.4MiB>
2021/07/08 17:27:54 scheduler task f714587f (flow ffcb62ed): unloading (try 0): successful, next state: complete
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): promoting objects (try 0): started
2021/07/08 17:27:54  <-  n100.r08.s072.Main.out_file ffcb62ed ok     exec 5m12s 35.7MiB
2021/07/08 17:27:54 n100.r08.s072.Main.out_file ffcb62ed n100/r08/n100.r08.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:084be69703f9ba00bad4d4849a93f43541abae905c1f4ba9e15c2f733590c254
	sha256:ffcb62ed099affbfe44e9b9ab7a8edd15e4964439e6fb92ebedd4396d972a56f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f714587f7aa5c450280276e0aceb11bb09e15aa452698efd090a815dccb55cde
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s072_output"
	    wget -O "n100.r08.s072_output/n100.r08.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s072_output/n100.r08.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s072_output/n100.r08.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s072_output/n100.r08.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s072_output/n100.r08.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s072_output/n100.r08.s072.reference.fas" "n100.r08.s072_output/n100.r08.s072.fq1.fastq" "n100.r08.s072_output/n100.r08.s072.fq2.fastq" | samtools view -bS - > "n100.r08.s072_output/n100.r08.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s072_output/n100.r08.s072.untrimmed.sorted.bam" "n100.r08.s072_output/n100.r08.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s072_output/n100.r08.s072.untrimmed.sorted.bam" -b "n100.r08.s072_output/n100.r08.s072.primers.bed" -p "n100.r08.s072_output/n100.r08.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" "n100.r08.s072_output/n100.r08.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s072_output/n100.r08.s072.reference.fas" "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" > "n100.r08.s072_output/n100.r08.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s072_output/n100.r08.s072.reference.fas" --call-indels "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" > "n100.r08.s072_output/n100.r08.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s072_output/n100.r08.s072.trimmed.sorted.bam" > "n100.r08.s072_output/n100.r08.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s072_output/n100.r08.s072.depth.txt" "n100.r08.s072_output/n100.r08.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s072_output/n100.r08.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s072_output/n100.r08.s072.reference.fas" | bcftools consensus -m "n100.r08.s072_output/n100.r08.s072.low_depth.tsv" tmp.vcf.gz > "n100.r08.s072_output/n100.r08.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e381bd411e652f4fcd59369d4235ef50fd4f9c528ede881bddfb9195ca208437 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.9MiB max=128.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:54 scheduler task e7e6c30d (flow 683d7aa3): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s072.tar.gz resources {}
2021/07/08 17:27:54  ->  n100.r08.s072.Main.cp_out_file 683d7aa3 exec extern s3://niema-test/n100/r08/n100.r08.s072.tar.gz 35.7MiB
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): retrieving result (try 0): started
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): promoting objects (try 0): started
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): retrieving diagnostic output (try 0): started
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): transferring output (try 0): started
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): promoting objects (try 0): started
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): retrieving diagnostic output (try 0): started
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloading (try 0): started
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloading list<val<.=8dfaba4f 35.7MiB> 35.7MiB>
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloading val<.=3db7144a 35.4MiB>
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloading val<.=55bfff28 35.4MiB>
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): promoting objects (try 0): started
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): retrieving diagnostic output (try 0): started
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): retrieving result (try 0): started
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloaded list<val<.=8dfaba4f 35.7MiB> 35.7MiB>
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloaded val<.=3db7144a 35.4MiB>
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloaded val<.=55bfff28 35.4MiB>
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task 4ef1336d (flow bc17d794): unloading (try 0): successful, next state: complete
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): promoting objects (try 0): started
2021/07/08 17:27:54 scheduler task ecca53e1 (flow bb3142a9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): retrieving result (try 0): started
2021/07/08 17:27:54  <-  n100.r08.s021.Main.out_file bc17d794 ok     exec 5m10s 35.7MiB
2021/07/08 17:27:54 n100.r08.s021.Main.out_file bc17d794 n100/r08/n100.r08.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:134a0528cb8dd97a80636b674dbbd1a125a63b853eb5f83fb3c9cbf138ed559a
	sha256:bc17d79472cce61f3da764fe6cde35710b695538620d460b847ab349b3788149
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ef1336d8116f8a8665738bfa54b450fe5389e1984b069db332a6e43be886ddb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s021_output"
	    wget -O "n100.r08.s021_output/n100.r08.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s021_output/n100.r08.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s021_output/n100.r08.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s021_output/n100.r08.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s021_output/n100.r08.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s021_output/n100.r08.s021.reference.fas" "n100.r08.s021_output/n100.r08.s021.fq1.fastq" "n100.r08.s021_output/n100.r08.s021.fq2.fastq" | samtools view -bS - > "n100.r08.s021_output/n100.r08.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s021_output/n100.r08.s021.untrimmed.sorted.bam" "n100.r08.s021_output/n100.r08.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s021_output/n100.r08.s021.untrimmed.sorted.bam" -b "n100.r08.s021_output/n100.r08.s021.primers.bed" -p "n100.r08.s021_output/n100.r08.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" "n100.r08.s021_output/n100.r08.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s021_output/n100.r08.s021.reference.fas" "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" > "n100.r08.s021_output/n100.r08.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s021_output/n100.r08.s021.reference.fas" --call-indels "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" > "n100.r08.s021_output/n100.r08.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s021_output/n100.r08.s021.trimmed.sorted.bam" > "n100.r08.s021_output/n100.r08.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s021_output/n100.r08.s021.depth.txt" "n100.r08.s021_output/n100.r08.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s021_output/n100.r08.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s021_output/n100.r08.s021.reference.fas" | bcftools consensus -m "n100.r08.s021_output/n100.r08.s021.low_depth.tsv" tmp.vcf.gz > "n100.r08.s021_output/n100.r08.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8dfaba4fdd13ec97064aafee4428b1e7c76036b53b14f47c84e8cdb2e9e8e94c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=129.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:27:54 scheduler task a6814f1c (flow 72a5a821): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s021.tar.gz resources {}
2021/07/08 17:27:54  ->  n100.r08.s021.Main.cp_out_file 72a5a821 exec extern s3://niema-test/n100/r08/n100.r08.s021.tar.gz 35.7MiB
2021/07/08 17:27:54 scheduler task ecca53e1 (flow bb3142a9): promoting objects (try 0): started
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): retrieving diagnostic output (try 0): started
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): retrieving diagnostic output (try 0): started
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:54 scheduler task 9ae8bc0a (flow b42d9724): transferring output (try 0): started
2021/07/08 17:27:54 scheduler task ecca53e1 (flow bb3142a9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): retrieving result (try 0): started
2021/07/08 17:27:54 scheduler task 83e8a2d0 (flow cb20e356): transferring output (try 0): started
2021/07/08 17:27:54 scheduler task ecca53e1 (flow bb3142a9): retrieving diagnostic output (try 0): started
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): retrieving result (try 0): started
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task 8a56961a (flow 9099bf90): transferring output (try 0): started
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): retrieving result (try 0): started
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:54 scheduler task e37887ba (flow 3f3f0aa1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:54 scheduler task ecca53e1 (flow bb3142a9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloading (try 0): started
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloading list<val<.=768c54bb 35.7MiB> 35.7MiB>
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloading val<.=6b07b478 35.4MiB>
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloading val<.=a18ba02f 35.4MiB>
2021/07/08 17:27:54 scheduler task e37887ba (flow 3f3f0aa1): promoting objects (try 0): started
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:54 scheduler task ecca53e1 (flow bb3142a9): retrieving result (try 0): started
2021/07/08 17:27:54 scheduler task e7e6c30d (flow 683d7aa3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e381bd411e652f4fcd59369d4235ef50fd4f9c528ede881bddfb9195ca208437 -> s3://niema-test/n100/r08/n100.r08.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:54  <-  n100.r08.s072.Main.cp_out_file 683d7aa3 ok   extern 0s 35.7MiB
2021/07/08 17:27:54 scheduler task aad793f7 (flow eaaaa641): transferring output (try 0): started
2021/07/08 17:27:54 scheduler task 19f1fa9b (flow 8358078b): transferring output (try 0): started
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloaded val<.=6b07b478 35.4MiB>
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloaded list<val<.=768c54bb 35.7MiB> 35.7MiB>
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloaded val<.=a18ba02f 35.4MiB>
2021/07/08 17:27:54 scheduler task 77ea896f (flow 6e71356b): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:55  <-  n100.r08.s055.Main.out_file 6e71356b ok     exec 5m13s 35.7MiB
2021/07/08 17:27:55 n100.r08.s055.Main.out_file 6e71356b n100/r08/n100.r08.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:96e1a3194d34f13c77828748db94c22e725b5d3e112cf72d57cf34447b2d966e
	sha256:6e71356b98c51b8b0b33d9e31dc03ff34763687efe7a8bcd55ba82b5b0b03621
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77ea896fcbf23b91d343c1aca1211c202a48852f3cb46ff1431ae0ba62ce9df9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s055_output"
	    wget -O "n100.r08.s055_output/n100.r08.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s055_output/n100.r08.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s055_output/n100.r08.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s055_output/n100.r08.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s055_output/n100.r08.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s055_output/n100.r08.s055.reference.fas" "n100.r08.s055_output/n100.r08.s055.fq1.fastq" "n100.r08.s055_output/n100.r08.s055.fq2.fastq" | samtools view -bS - > "n100.r08.s055_output/n100.r08.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s055_output/n100.r08.s055.untrimmed.sorted.bam" "n100.r08.s055_output/n100.r08.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s055_output/n100.r08.s055.untrimmed.sorted.bam" -b "n100.r08.s055_output/n100.r08.s055.primers.bed" -p "n100.r08.s055_output/n100.r08.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" "n100.r08.s055_output/n100.r08.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s055_output/n100.r08.s055.reference.fas" "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" > "n100.r08.s055_output/n100.r08.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s055_output/n100.r08.s055.reference.fas" --call-indels "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" > "n100.r08.s055_output/n100.r08.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s055_output/n100.r08.s055.trimmed.sorted.bam" > "n100.r08.s055_output/n100.r08.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s055_output/n100.r08.s055.depth.txt" "n100.r08.s055_output/n100.r08.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s055_output/n100.r08.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s055_output/n100.r08.s055.reference.fas" | bcftools consensus -m "n100.r08.s055_output/n100.r08.s055.low_depth.tsv" tmp.vcf.gz > "n100.r08.s055_output/n100.r08.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:768c54bb5ec0b36c2f16180875c32e4aff26797cfba927ddfbda6d870d5327fd 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.7MiB max=130.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.0KiB
2021/07/08 17:27:55 scheduler task 07f3f04d (flow 20e43a9a): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s055.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s055.Main.cp_out_file 20e43a9a exec extern s3://niema-test/n100/r08/n100.r08.s055.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): retrieving diagnostic output (try 0): started
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): promoting objects (try 0): started
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): transferring output (try 0): started
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): retrieving result (try 0): started
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): retrieving diagnostic output (try 0): started
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): transferring output (try 0): started
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloading (try 0): started
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloading list<val<.=f05e16d7 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloading val<.=3e72924d 35.4MiB>
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloading val<.=bb2c3e75 35.4MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): retrieving result (try 0): started
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloading (try 0): started
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloading list<val<.=0a6999b1 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloading val<.=61425bad 35.4MiB>
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloading val<.=59471b32 35.4MiB>
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloaded val<.=3e72924d 35.4MiB>
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloaded list<val<.=f05e16d7 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloaded val<.=bb2c3e75 35.4MiB>
2021/07/08 17:27:55 scheduler task 83e8a2d0 (flow cb20e356): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:55  <-  n100.r08.s017.Main.out_file cb20e356 ok     exec 5m12s 35.7MiB
2021/07/08 17:27:55 n100.r08.s017.Main.out_file cb20e356 n100/r08/n100.r08.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d38648879b4adc8224aab316fbb59a54fff7be941df4e4c39ee7af9b043dfcb6
	sha256:cb20e356b22c0da6d7264fa680c34389620b795c6c7cf70611f0d5c920148acd
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/83e8a2d0db1f9b698deed0266ff5825a9a19b1a0e703a1abeae2dea63d3172da
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s017_output"
	    wget -O "n100.r08.s017_output/n100.r08.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s017_output/n100.r08.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s017_output/n100.r08.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s017_output/n100.r08.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s017_output/n100.r08.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s017_output/n100.r08.s017.reference.fas" "n100.r08.s017_output/n100.r08.s017.fq1.fastq" "n100.r08.s017_output/n100.r08.s017.fq2.fastq" | samtools view -bS - > "n100.r08.s017_output/n100.r08.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s017_output/n100.r08.s017.untrimmed.sorted.bam" "n100.r08.s017_output/n100.r08.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s017_output/n100.r08.s017.untrimmed.sorted.bam" -b "n100.r08.s017_output/n100.r08.s017.primers.bed" -p "n100.r08.s017_output/n100.r08.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" "n100.r08.s017_output/n100.r08.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s017_output/n100.r08.s017.reference.fas" "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" > "n100.r08.s017_output/n100.r08.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s017_output/n100.r08.s017.reference.fas" --call-indels "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" > "n100.r08.s017_output/n100.r08.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s017_output/n100.r08.s017.trimmed.sorted.bam" > "n100.r08.s017_output/n100.r08.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s017_output/n100.r08.s017.depth.txt" "n100.r08.s017_output/n100.r08.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s017_output/n100.r08.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s017_output/n100.r08.s017.reference.fas" | bcftools consensus -m "n100.r08.s017_output/n100.r08.s017.low_depth.tsv" tmp.vcf.gz > "n100.r08.s017_output/n100.r08.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f05e16d75075efc626a90618ae236af1e72194685b1b9de8e071cd238b790eac 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=130.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:27:55 scheduler task 1f355804 (flow 8fa8eb91): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s017.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s017.Main.cp_out_file 8fa8eb91 exec extern s3://niema-test/n100/r08/n100.r08.s017.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): promoting objects (try 0): started
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): transferring output (try 0): started
2021/07/08 17:27:55 scheduler task a6814f1c (flow 72a5a821): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8dfaba4fdd13ec97064aafee4428b1e7c76036b53b14f47c84e8cdb2e9e8e94c -> s3://niema-test/n100/r08/n100.r08.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:55  <-  n100.r08.s021.Main.cp_out_file 72a5a821 ok   extern 0s 35.7MiB
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloaded list<val<.=0a6999b1 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloaded val<.=59471b32 35.4MiB>
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloaded val<.=61425bad 35.4MiB>
2021/07/08 17:27:55 scheduler task 9ae8bc0a (flow b42d9724): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55  <-  n100.r08.s042.Main.out_file b42d9724 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:55 n100.r08.s042.Main.out_file b42d9724 n100/r08/n100.r08.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad963e168f362750128bbb7fceb2e89caacb3eec5f92903da0ce6177cefc6652
	sha256:b42d972410bcc5e5576df2a8c3595b49a718ea125c2fad988f9741b6da5a2fb9
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9ae8bc0a4bf1bb5d54523b153539ad351d506e3e9d2500031cc34a47128d84cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s042_output"
	    wget -O "n100.r08.s042_output/n100.r08.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s042_output/n100.r08.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s042_output/n100.r08.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s042_output/n100.r08.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s042_output/n100.r08.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s042_output/n100.r08.s042.reference.fas" "n100.r08.s042_output/n100.r08.s042.fq1.fastq" "n100.r08.s042_output/n100.r08.s042.fq2.fastq" | samtools view -bS - > "n100.r08.s042_output/n100.r08.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s042_output/n100.r08.s042.untrimmed.sorted.bam" "n100.r08.s042_output/n100.r08.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s042_output/n100.r08.s042.untrimmed.sorted.bam" -b "n100.r08.s042_output/n100.r08.s042.primers.bed" -p "n100.r08.s042_output/n100.r08.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" "n100.r08.s042_output/n100.r08.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s042_output/n100.r08.s042.reference.fas" "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" > "n100.r08.s042_output/n100.r08.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s042_output/n100.r08.s042.reference.fas" --call-indels "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" > "n100.r08.s042_output/n100.r08.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s042_output/n100.r08.s042.trimmed.sorted.bam" > "n100.r08.s042_output/n100.r08.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s042_output/n100.r08.s042.depth.txt" "n100.r08.s042_output/n100.r08.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s042_output/n100.r08.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s042_output/n100.r08.s042.reference.fas" | bcftools consensus -m "n100.r08.s042_output/n100.r08.s042.low_depth.tsv" tmp.vcf.gz > "n100.r08.s042_output/n100.r08.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0a6999b1838694a88c79d7b493fcd4dacd86631b923334cb67a88a966ba0ffb2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=124.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:55 scheduler task 7111e883 (flow 9df958af): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s042.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s042.Main.cp_out_file 9df958af exec extern s3://niema-test/n100/r08/n100.r08.s042.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloading (try 0): started
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloading list<val<.=83d3e100 35.8MiB> 35.8MiB>
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloading val<.=9b3e6630 35.4MiB>
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloading val<.=933df345 35.4MiB>
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): retrieving diagnostic output (try 0): started
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloaded list<val<.=83d3e100 35.8MiB> 35.8MiB>
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloaded val<.=933df345 35.4MiB>
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloaded val<.=9b3e6630 35.4MiB>
2021/07/08 17:27:55 scheduler task 8a56961a (flow 9099bf90): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55  <-  n100.r08.s061.Main.out_file 9099bf90 ok     exec 5m13s 35.8MiB
2021/07/08 17:27:55 n100.r08.s061.Main.out_file 9099bf90 n100/r08/n100.r08.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdee0fd2b46248b4b09cfacd53878bf647477fff77a86d4b39cfeebe0d8c4553
	sha256:9099bf901b07d2ac21121556809ec1b03a46f6058e4352829356af861644d01a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a56961af8434264d93d09f0ddf7ac02cbc3dda1bc000a94b135525438b6425f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s061_output"
	    wget -O "n100.r08.s061_output/n100.r08.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s061_output/n100.r08.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s061_output/n100.r08.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s061_output/n100.r08.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s061_output/n100.r08.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s061_output/n100.r08.s061.reference.fas" "n100.r08.s061_output/n100.r08.s061.fq1.fastq" "n100.r08.s061_output/n100.r08.s061.fq2.fastq" | samtools view -bS - > "n100.r08.s061_output/n100.r08.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s061_output/n100.r08.s061.untrimmed.sorted.bam" "n100.r08.s061_output/n100.r08.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s061_output/n100.r08.s061.untrimmed.sorted.bam" -b "n100.r08.s061_output/n100.r08.s061.primers.bed" -p "n100.r08.s061_output/n100.r08.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" "n100.r08.s061_output/n100.r08.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s061_output/n100.r08.s061.reference.fas" "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" > "n100.r08.s061_output/n100.r08.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s061_output/n100.r08.s061.reference.fas" --call-indels "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" > "n100.r08.s061_output/n100.r08.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s061_output/n100.r08.s061.trimmed.sorted.bam" > "n100.r08.s061_output/n100.r08.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s061_output/n100.r08.s061.depth.txt" "n100.r08.s061_output/n100.r08.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s061_output/n100.r08.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s061_output/n100.r08.s061.reference.fas" | bcftools consensus -m "n100.r08.s061_output/n100.r08.s061.low_depth.tsv" tmp.vcf.gz > "n100.r08.s061_output/n100.r08.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:83d3e10063d081732879085428558f4764e38bd0d1ccc69f11a25eff9076063f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=127.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:27:55 scheduler task bd3b9a3f (flow 6c1e1810): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s061.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s061.Main.cp_out_file 6c1e1810 exec extern s3://niema-test/n100/r08/n100.r08.s061.tar.gz 35.8MiB
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloading (try 0): started
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloading list<val<.=b8ae0b01 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloading val<.=59d695cf 35.4MiB>
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloading val<.=622d9193 35.4MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloading (try 0): started
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloading list<val<.=e54b70db 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloading val<.=249683f6 35.4MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloading val<.=7e7296a0 35.4MiB>
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): retrieving result (try 0): started
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloaded list<val<.=b8ae0b01 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloaded val<.=622d9193 35.4MiB>
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloaded val<.=59d695cf 35.4MiB>
2021/07/08 17:27:55 scheduler task aad793f7 (flow eaaaa641): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55  <-  n100.r08.s094.Main.out_file eaaaa641 ok     exec 5m13s 35.7MiB
2021/07/08 17:27:55 n100.r08.s094.Main.out_file eaaaa641 n100/r08/n100.r08.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2b708a6095293fde2e11a4561652e4fb4326f76c2187d00aa225692f8f070aaa
	sha256:eaaaa641675bb0577b8091276725f58b3c4dfc8470f69991c693923211cc3d65
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aad793f71985ddb9f5b24f44bd6647fe90ce6ae49143e4f2dd357731f57b71a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s094_output"
	    wget -O "n100.r08.s094_output/n100.r08.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s094_output/n100.r08.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s094_output/n100.r08.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s094_output/n100.r08.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s094_output/n100.r08.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s094_output/n100.r08.s094.reference.fas" "n100.r08.s094_output/n100.r08.s094.fq1.fastq" "n100.r08.s094_output/n100.r08.s094.fq2.fastq" | samtools view -bS - > "n100.r08.s094_output/n100.r08.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s094_output/n100.r08.s094.untrimmed.sorted.bam" "n100.r08.s094_output/n100.r08.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s094_output/n100.r08.s094.untrimmed.sorted.bam" -b "n100.r08.s094_output/n100.r08.s094.primers.bed" -p "n100.r08.s094_output/n100.r08.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" "n100.r08.s094_output/n100.r08.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s094_output/n100.r08.s094.reference.fas" "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" > "n100.r08.s094_output/n100.r08.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s094_output/n100.r08.s094.reference.fas" --call-indels "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" > "n100.r08.s094_output/n100.r08.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s094_output/n100.r08.s094.trimmed.sorted.bam" > "n100.r08.s094_output/n100.r08.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s094_output/n100.r08.s094.depth.txt" "n100.r08.s094_output/n100.r08.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s094_output/n100.r08.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s094_output/n100.r08.s094.reference.fas" | bcftools consensus -m "n100.r08.s094_output/n100.r08.s094.low_depth.tsv" tmp.vcf.gz > "n100.r08.s094_output/n100.r08.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b8ae0b010b6c7c69a2adc1d40561fb84e7fc1cab245596a2273a88c8acb0bc42 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.5MiB max=130.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:55 scheduler task 2d93de32 (flow 8de3b601): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s094.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s094.Main.cp_out_file 8de3b601 exec extern s3://niema-test/n100/r08/n100.r08.s094.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloading (try 0): started
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloading list<val<.=97802ce4 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloading val<.=790f5436 35.4MiB>
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloading val<.=43dd4d61 35.4MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloaded val<.=7e7296a0 35.4MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloaded list<val<.=e54b70db 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloaded val<.=249683f6 35.4MiB>
2021/07/08 17:27:55 scheduler task 19f1fa9b (flow 8358078b): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:55  <-  n100.r08.s082.Main.out_file 8358078b ok     exec 5m13s 35.7MiB
2021/07/08 17:27:55 n100.r08.s082.Main.out_file 8358078b n100/r08/n100.r08.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8033fb867079a83a5819a8ed0a0a8bd65fef6f9dc442414ab0136956af02705f
	sha256:8358078b9783add9f18b34a7e1109d23c4d27ae792f2322042513fbe8cb2d86c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/19f1fa9b9fb5ebdc5462a2ac88d79a5c4d335171435e449cc6a2283b997e6a71
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s082_output"
	    wget -O "n100.r08.s082_output/n100.r08.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s082_output/n100.r08.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s082_output/n100.r08.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s082_output/n100.r08.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s082_output/n100.r08.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s082_output/n100.r08.s082.reference.fas" "n100.r08.s082_output/n100.r08.s082.fq1.fastq" "n100.r08.s082_output/n100.r08.s082.fq2.fastq" | samtools view -bS - > "n100.r08.s082_output/n100.r08.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s082_output/n100.r08.s082.untrimmed.sorted.bam" "n100.r08.s082_output/n100.r08.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s082_output/n100.r08.s082.untrimmed.sorted.bam" -b "n100.r08.s082_output/n100.r08.s082.primers.bed" -p "n100.r08.s082_output/n100.r08.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" "n100.r08.s082_output/n100.r08.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s082_output/n100.r08.s082.reference.fas" "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" > "n100.r08.s082_output/n100.r08.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s082_output/n100.r08.s082.reference.fas" --call-indels "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" > "n100.r08.s082_output/n100.r08.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s082_output/n100.r08.s082.trimmed.sorted.bam" > "n100.r08.s082_output/n100.r08.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s082_output/n100.r08.s082.depth.txt" "n100.r08.s082_output/n100.r08.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s082_output/n100.r08.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s082_output/n100.r08.s082.reference.fas" | bcftools consensus -m "n100.r08.s082_output/n100.r08.s082.low_depth.tsv" tmp.vcf.gz > "n100.r08.s082_output/n100.r08.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e54b70dbc2262572b2278ad2675fed8b2452e50898e65aabd659a67cc6493b76 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:55 scheduler task 84844e2b (flow d552246d): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s082.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s082.Main.cp_out_file d552246d exec extern s3://niema-test/n100/r08/n100.r08.s082.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloaded list<val<.=97802ce4 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task a3702691 (flow f12b0ac7): transferring output (try 0): started
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloaded val<.=43dd4d61 35.4MiB>
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloaded val<.=790f5436 35.4MiB>
2021/07/08 17:27:55 scheduler task ecca53e1 (flow bb3142a9): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55  <-  n100.r08.s036.Main.out_file bb3142a9 ok     exec 5m6s 35.7MiB
2021/07/08 17:27:55 n100.r08.s036.Main.out_file bb3142a9 n100/r08/n100.r08.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2312c8c2d9236eec1b80c83bf282d67c2cb3f9135ce14f122cc65e3043e71b46
	sha256:bb3142a939c9bf7a65847f659b28d1275fa029fd8203a7b5bf5ca3a20f37ca91
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ecca53e1da1b43676a7eb5c753c384501ad193adb26c0591d28b340047cc0f88
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s036_output"
	    wget -O "n100.r08.s036_output/n100.r08.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s036_output/n100.r08.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s036_output/n100.r08.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s036_output/n100.r08.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s036_output/n100.r08.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s036_output/n100.r08.s036.reference.fas" "n100.r08.s036_output/n100.r08.s036.fq1.fastq" "n100.r08.s036_output/n100.r08.s036.fq2.fastq" | samtools view -bS - > "n100.r08.s036_output/n100.r08.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s036_output/n100.r08.s036.untrimmed.sorted.bam" "n100.r08.s036_output/n100.r08.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s036_output/n100.r08.s036.untrimmed.sorted.bam" -b "n100.r08.s036_output/n100.r08.s036.primers.bed" -p "n100.r08.s036_output/n100.r08.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" "n100.r08.s036_output/n100.r08.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s036_output/n100.r08.s036.reference.fas" "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" > "n100.r08.s036_output/n100.r08.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s036_output/n100.r08.s036.reference.fas" --call-indels "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" > "n100.r08.s036_output/n100.r08.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s036_output/n100.r08.s036.trimmed.sorted.bam" > "n100.r08.s036_output/n100.r08.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s036_output/n100.r08.s036.depth.txt" "n100.r08.s036_output/n100.r08.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s036_output/n100.r08.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s036_output/n100.r08.s036.reference.fas" | bcftools consensus -m "n100.r08.s036_output/n100.r08.s036.low_depth.tsv" tmp.vcf.gz > "n100.r08.s036_output/n100.r08.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:97802ce46ef2be3da95ff629d1649a1f98701df5da4a8b34835432071de8ca0c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=131.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:27:55 scheduler task 27e56318 (flow d73f8bf9): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s036.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s036.Main.cp_out_file d73f8bf9 exec extern s3://niema-test/n100/r08/n100.r08.s036.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloading (try 0): started
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloading list<val<.=a1a26d8c 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloading val<.=80834609 35.4MiB>
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloading val<.=040ff013 35.4MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloading (try 0): started
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloading list<val<.=87ec9a9a 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloading val<.=54abc81e 35.4MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloading val<.=8c6296c1 35.4MiB>
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloaded val<.=040ff013 35.4MiB>
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloaded val<.=80834609 35.4MiB>
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloaded list<val<.=a1a26d8c 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task e37887ba (flow 3f3f0aa1): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55  <-  n100.r08.s071.Main.out_file 3f3f0aa1 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:55 n100.r08.s071.Main.out_file 3f3f0aa1 n100/r08/n100.r08.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e6f67086cd49cc123821185466c2c7b6177017e0c9e8341521534ee4d3c33d1c
	sha256:3f3f0aa1ebf068024cf0b432eae8071369caad775097c297dfd40a93db3d0c77
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e37887ba894def252023575de2f197fcf4a3b75b1241d14e0141149af8670586
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s071_output"
	    wget -O "n100.r08.s071_output/n100.r08.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s071_output/n100.r08.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s071_output/n100.r08.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s071_output/n100.r08.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s071_output/n100.r08.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s071_output/n100.r08.s071.reference.fas" "n100.r08.s071_output/n100.r08.s071.fq1.fastq" "n100.r08.s071_output/n100.r08.s071.fq2.fastq" | samtools view -bS - > "n100.r08.s071_output/n100.r08.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s071_output/n100.r08.s071.untrimmed.sorted.bam" "n100.r08.s071_output/n100.r08.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s071_output/n100.r08.s071.untrimmed.sorted.bam" -b "n100.r08.s071_output/n100.r08.s071.primers.bed" -p "n100.r08.s071_output/n100.r08.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" "n100.r08.s071_output/n100.r08.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s071_output/n100.r08.s071.reference.fas" "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" > "n100.r08.s071_output/n100.r08.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s071_output/n100.r08.s071.reference.fas" --call-indels "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" > "n100.r08.s071_output/n100.r08.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s071_output/n100.r08.s071.trimmed.sorted.bam" > "n100.r08.s071_output/n100.r08.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s071_output/n100.r08.s071.depth.txt" "n100.r08.s071_output/n100.r08.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s071_output/n100.r08.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s071_output/n100.r08.s071.reference.fas" | bcftools consensus -m "n100.r08.s071_output/n100.r08.s071.low_depth.tsv" tmp.vcf.gz > "n100.r08.s071_output/n100.r08.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a1a26d8ce0752abc659d65e7574f18fd189b3a6e6a9bd6023ae35a77afb1a137 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.2MiB max=126.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:55 scheduler task 02f68943 (flow f55433b4): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s071.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s071.Main.cp_out_file f55433b4 exec extern s3://niema-test/n100/r08/n100.r08.s071.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloaded list<val<.=87ec9a9a 35.7MiB> 35.7MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloaded val<.=54abc81e 35.4MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloaded val<.=8c6296c1 35.4MiB>
2021/07/08 17:27:55 scheduler task 4f36edfc (flow 7a476ecb): unloading (try 0): successful, next state: complete
2021/07/08 17:27:55  <-  n100.r08.s023.Main.out_file 7a476ecb ok     exec 5m13s 35.7MiB
2021/07/08 17:27:55 n100.r08.s023.Main.out_file 7a476ecb n100/r08/n100.r08.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:137d5964a2f55a0e29f253759dd805d27fef69f99fb374a275c0f39ebc108f2f
	sha256:7a476ecb27694108720cd81ee655999fc01ab2ef76eb539f50489bb45b390594
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4f36edfc657f765b98a976b6f8a26fb5314bc12ca7f0f2419194e0f322ec7978
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s023_output"
	    wget -O "n100.r08.s023_output/n100.r08.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s023_output/n100.r08.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s023_output/n100.r08.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s023_output/n100.r08.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s023_output/n100.r08.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s023_output/n100.r08.s023.reference.fas" "n100.r08.s023_output/n100.r08.s023.fq1.fastq" "n100.r08.s023_output/n100.r08.s023.fq2.fastq" | samtools view -bS - > "n100.r08.s023_output/n100.r08.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s023_output/n100.r08.s023.untrimmed.sorted.bam" "n100.r08.s023_output/n100.r08.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s023_output/n100.r08.s023.untrimmed.sorted.bam" -b "n100.r08.s023_output/n100.r08.s023.primers.bed" -p "n100.r08.s023_output/n100.r08.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" "n100.r08.s023_output/n100.r08.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s023_output/n100.r08.s023.reference.fas" "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" > "n100.r08.s023_output/n100.r08.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s023_output/n100.r08.s023.reference.fas" --call-indels "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" > "n100.r08.s023_output/n100.r08.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s023_output/n100.r08.s023.trimmed.sorted.bam" > "n100.r08.s023_output/n100.r08.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s023_output/n100.r08.s023.depth.txt" "n100.r08.s023_output/n100.r08.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s023_output/n100.r08.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s023_output/n100.r08.s023.reference.fas" | bcftools consensus -m "n100.r08.s023_output/n100.r08.s023.low_depth.tsv" tmp.vcf.gz > "n100.r08.s023_output/n100.r08.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:87ec9a9a3a94684a79b676a60d48ec996a7bb5203f5524ce982beac9064a9f99 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:55 scheduler task 1e2e82e0 (flow 2965f118): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s023.tar.gz resources {}
2021/07/08 17:27:55  ->  n100.r08.s023.Main.cp_out_file 2965f118 exec extern s3://niema-test/n100/r08/n100.r08.s023.tar.gz 35.7MiB
2021/07/08 17:27:55 scheduler task 07f3f04d (flow 20e43a9a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:768c54bb5ec0b36c2f16180875c32e4aff26797cfba927ddfbda6d870d5327fd -> s3://niema-test/n100/r08/n100.r08.s055.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:55  <-  n100.r08.s055.Main.cp_out_file 20e43a9a ok   extern 0s 35.7MiB
2021/07/08 17:27:55 scheduler task 1f355804 (flow 8fa8eb91): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f05e16d75075efc626a90618ae236af1e72194685b1b9de8e071cd238b790eac -> s3://niema-test/n100/r08/n100.r08.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:55  <-  n100.r08.s017.Main.cp_out_file 8fa8eb91 ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloading (try 0): started
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloading list<val<.=583f51dd 35.7MiB> 35.7MiB>
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloading val<.=0f3beef8 35.4MiB>
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloading val<.=978c0b55 35.4MiB>
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): promoting objects (try 0): started
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloaded val<.=0f3beef8 35.4MiB>
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloaded list<val<.=583f51dd 35.7MiB> 35.7MiB>
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloaded val<.=978c0b55 35.4MiB>
2021/07/08 17:27:56 scheduler task a3702691 (flow f12b0ac7): unloading (try 0): successful, next state: complete
2021/07/08 17:27:56  <-  n100.r08.s080.Main.out_file f12b0ac7 ok     exec 5m14s 35.7MiB
2021/07/08 17:27:56 n100.r08.s080.Main.out_file f12b0ac7 n100/r08/n100.r08.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c9acd2574dfab7a99ab2d6f5458561fb1cbff59379f572d2fcc03824bc15fc1
	sha256:f12b0ac79616ce70d85c6f9bf1a32d1323fc23b4bd60d4b7a9cd463bae3ef5bb
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a370269176f68a9f8d7e5adecde5168d3126c67462e865c26765d907b8a4028d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s080_output"
	    wget -O "n100.r08.s080_output/n100.r08.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s080_output/n100.r08.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s080_output/n100.r08.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s080_output/n100.r08.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s080_output/n100.r08.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s080_output/n100.r08.s080.reference.fas" "n100.r08.s080_output/n100.r08.s080.fq1.fastq" "n100.r08.s080_output/n100.r08.s080.fq2.fastq" | samtools view -bS - > "n100.r08.s080_output/n100.r08.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s080_output/n100.r08.s080.untrimmed.sorted.bam" "n100.r08.s080_output/n100.r08.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s080_output/n100.r08.s080.untrimmed.sorted.bam" -b "n100.r08.s080_output/n100.r08.s080.primers.bed" -p "n100.r08.s080_output/n100.r08.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" "n100.r08.s080_output/n100.r08.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s080_output/n100.r08.s080.reference.fas" "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" > "n100.r08.s080_output/n100.r08.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s080_output/n100.r08.s080.reference.fas" --call-indels "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" > "n100.r08.s080_output/n100.r08.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s080_output/n100.r08.s080.trimmed.sorted.bam" > "n100.r08.s080_output/n100.r08.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s080_output/n100.r08.s080.depth.txt" "n100.r08.s080_output/n100.r08.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s080_output/n100.r08.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s080_output/n100.r08.s080.reference.fas" | bcftools consensus -m "n100.r08.s080_output/n100.r08.s080.low_depth.tsv" tmp.vcf.gz > "n100.r08.s080_output/n100.r08.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:583f51dd0e3f80b2415c14fa213d47c035f7b515bd24da65041cbcf7cba814a7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.8MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 17:27:56 scheduler task 1d4713d8 (flow 24ed56a3): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s080.tar.gz resources {}
2021/07/08 17:27:56  ->  n100.r08.s080.Main.cp_out_file 24ed56a3 exec extern s3://niema-test/n100/r08/n100.r08.s080.tar.gz 35.7MiB
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): retrieving diagnostic output (try 0): started
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): retrieving result (try 0): started
2021/07/08 17:27:56 scheduler task 84844e2b (flow d552246d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e54b70dbc2262572b2278ad2675fed8b2452e50898e65aabd659a67cc6493b76 -> s3://niema-test/n100/r08/n100.r08.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s082.Main.cp_out_file d552246d ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task 2d93de32 (flow 8de3b601): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b8ae0b010b6c7c69a2adc1d40561fb84e7fc1cab245596a2273a88c8acb0bc42 -> s3://niema-test/n100/r08/n100.r08.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s094.Main.cp_out_file 8de3b601 ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:56 scheduler task bd3b9a3f (flow 6c1e1810): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:83d3e10063d081732879085428558f4764e38bd0d1ccc69f11a25eff9076063f -> s3://niema-test/n100/r08/n100.r08.s061.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s061.Main.cp_out_file 6c1e1810 ok   extern 0s 35.8MiB
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): transferring output (try 0): started
2021/07/08 17:27:56 scheduler task 7111e883 (flow 9df958af): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0a6999b1838694a88c79d7b493fcd4dacd86631b923334cb67a88a966ba0ffb2 -> s3://niema-test/n100/r08/n100.r08.s042.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s042.Main.cp_out_file 9df958af ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): promoting objects (try 0): started
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): promoting objects (try 0): started
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): retrieving diagnostic output (try 0): started
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): retrieving diagnostic output (try 0): started
2021/07/08 17:27:56 scheduler task 02f68943 (flow f55433b4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a1a26d8ce0752abc659d65e7574f18fd189b3a6e6a9bd6023ae35a77afb1a137 -> s3://niema-test/n100/r08/n100.r08.s071.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s071.Main.cp_out_file f55433b4 ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): retrieving result (try 0): started
2021/07/08 17:27:56 scheduler task 1e2e82e0 (flow 2965f118): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:87ec9a9a3a94684a79b676a60d48ec996a7bb5203f5524ce982beac9064a9f99 -> s3://niema-test/n100/r08/n100.r08.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s023.Main.cp_out_file 2965f118 ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task 27e56318 (flow d73f8bf9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:97802ce46ef2be3da95ff629d1649a1f98701df5da4a8b34835432071de8ca0c -> s3://niema-test/n100/r08/n100.r08.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:56  <-  n100.r08.s036.Main.cp_out_file d73f8bf9 ok   extern 0s 35.7MiB
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): retrieving result (try 0): started
2021/07/08 17:27:56 scheduler task dee4f7a4 (flow 63e7c0c0): transferring output (try 0): started
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:56 scheduler task e4711d1d (flow 40d58762): transferring output (try 0): started
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): unloading (try 0): started
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): unloading list<val<.=02249391 35.7MiB> 35.7MiB>
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): unloading val<.=cbdde9e9 35.4MiB>
2021/07/08 17:27:56 scheduler task 6fc6d1e0 (flow edf8b1db): unloading val<.=13f6cd7c 35.4MiB>
2021/07/08 17:27:56 scheduler task 0b48b7f4 (flow 3c31b57e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:56 scheduler task 0b48b7f4 (flow 3c31b57e): promoting objects (try 0): started
2021/07/08 17:27:57 scheduler task 6fc6d1e0 (flow edf8b1db): unloaded val<.=13f6cd7c 35.4MiB>
2021/07/08 17:27:57 scheduler task 6fc6d1e0 (flow edf8b1db): unloaded list<val<.=02249391 35.7MiB> 35.7MiB>
2021/07/08 17:27:57 scheduler task 6fc6d1e0 (flow edf8b1db): unloaded val<.=cbdde9e9 35.4MiB>
2021/07/08 17:27:57 scheduler task 6fc6d1e0 (flow edf8b1db): unloading (try 0): successful, next state: complete
2021/07/08 17:27:57  <-  n100.r08.s054.Main.out_file edf8b1db ok     exec 5m7s 35.7MiB
2021/07/08 17:27:57 n100.r08.s054.Main.out_file edf8b1db n100/r08/n100.r08.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca960b06e479c0e2ef022528e1d49bd392965e462cd6c19141dc208d138705c3
	sha256:edf8b1dbdb53b92a346cc8cf0bd970b43ca5d102b3397e2e3f20021dd52834dd
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6fc6d1e04d655150906cf23dbd043a04020a51f20d81ee3622faa6f5d30d2234
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s054_output"
	    wget -O "n100.r08.s054_output/n100.r08.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s054_output/n100.r08.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s054_output/n100.r08.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s054_output/n100.r08.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s054_output/n100.r08.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s054_output/n100.r08.s054.reference.fas" "n100.r08.s054_output/n100.r08.s054.fq1.fastq" "n100.r08.s054_output/n100.r08.s054.fq2.fastq" | samtools view -bS - > "n100.r08.s054_output/n100.r08.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s054_output/n100.r08.s054.untrimmed.sorted.bam" "n100.r08.s054_output/n100.r08.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s054_output/n100.r08.s054.untrimmed.sorted.bam" -b "n100.r08.s054_output/n100.r08.s054.primers.bed" -p "n100.r08.s054_output/n100.r08.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" "n100.r08.s054_output/n100.r08.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s054_output/n100.r08.s054.reference.fas" "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" > "n100.r08.s054_output/n100.r08.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s054_output/n100.r08.s054.reference.fas" --call-indels "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" > "n100.r08.s054_output/n100.r08.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s054_output/n100.r08.s054.trimmed.sorted.bam" > "n100.r08.s054_output/n100.r08.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s054_output/n100.r08.s054.depth.txt" "n100.r08.s054_output/n100.r08.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s054_output/n100.r08.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s054_output/n100.r08.s054.reference.fas" | bcftools consensus -m "n100.r08.s054_output/n100.r08.s054.low_depth.tsv" tmp.vcf.gz > "n100.r08.s054_output/n100.r08.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:02249391862a67024d012b6a33fb37207215c338ce92a1ce29e2e0accd5c4a18 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=520B max=2.0KiB
2021/07/08 17:27:57 scheduler task 88e00c6e (flow fecccee5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s054.tar.gz resources {}
2021/07/08 17:27:57  ->  n100.r08.s054.Main.cp_out_file fecccee5 exec extern s3://niema-test/n100/r08/n100.r08.s054.tar.gz 35.7MiB
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): retrieving diagnostic output (try 0): started
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): promoting objects (try 0): started
2021/07/08 17:27:57 scheduler task 1d4713d8 (flow 24ed56a3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:583f51dd0e3f80b2415c14fa213d47c035f7b515bd24da65041cbcf7cba814a7 -> s3://niema-test/n100/r08/n100.r08.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:57  <-  n100.r08.s080.Main.cp_out_file 24ed56a3 ok   extern 0s 35.7MiB
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): retrieving diagnostic output (try 0): started
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): retrieving result (try 0): started
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): transferring output (try 0): started
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): retrieving result (try 0): started
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloading (try 0): started
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloading list<val<.=6834e781 35.7MiB> 35.7MiB>
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloading val<.=985f6dd8 35.4MiB>
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloading val<.=99835b06 35.4MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): transferring output (try 0): started
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloading (try 0): started
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloading list<val<.=2da0fe16 35.8MiB> 35.8MiB>
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloading val<.=8d7446d7 35.4MiB>
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloading val<.=29afd6cc 35.4MiB>
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloaded list<val<.=6834e781 35.7MiB> 35.7MiB>
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloaded val<.=985f6dd8 35.4MiB>
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloaded val<.=99835b06 35.4MiB>
2021/07/08 17:27:57 scheduler task dee4f7a4 (flow 63e7c0c0): unloading (try 0): successful, next state: complete
2021/07/08 17:27:57  <-  n100.r08.s034.Main.out_file 63e7c0c0 ok     exec 5m8s 35.7MiB
2021/07/08 17:27:57 n100.r08.s034.Main.out_file 63e7c0c0 n100/r08/n100.r08.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:11758d565319370a1e80bbc6a2443569c9595b37a0d84251967548afa82b9459
	sha256:63e7c0c012ad95a33bb6d00db7a475639572abc23432b24c9426858590338471
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dee4f7a4e38b9a559ec46c4b20596b680d693d59c65c0bce29ed1ccc293d0b67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s034_output"
	    wget -O "n100.r08.s034_output/n100.r08.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s034_output/n100.r08.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s034_output/n100.r08.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s034_output/n100.r08.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s034_output/n100.r08.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s034_output/n100.r08.s034.reference.fas" "n100.r08.s034_output/n100.r08.s034.fq1.fastq" "n100.r08.s034_output/n100.r08.s034.fq2.fastq" | samtools view -bS - > "n100.r08.s034_output/n100.r08.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s034_output/n100.r08.s034.untrimmed.sorted.bam" "n100.r08.s034_output/n100.r08.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s034_output/n100.r08.s034.untrimmed.sorted.bam" -b "n100.r08.s034_output/n100.r08.s034.primers.bed" -p "n100.r08.s034_output/n100.r08.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" "n100.r08.s034_output/n100.r08.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s034_output/n100.r08.s034.reference.fas" "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" > "n100.r08.s034_output/n100.r08.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s034_output/n100.r08.s034.reference.fas" --call-indels "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" > "n100.r08.s034_output/n100.r08.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s034_output/n100.r08.s034.trimmed.sorted.bam" > "n100.r08.s034_output/n100.r08.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s034_output/n100.r08.s034.depth.txt" "n100.r08.s034_output/n100.r08.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s034_output/n100.r08.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s034_output/n100.r08.s034.reference.fas" | bcftools consensus -m "n100.r08.s034_output/n100.r08.s034.low_depth.tsv" tmp.vcf.gz > "n100.r08.s034_output/n100.r08.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6834e781d60424dc3d59729a74d9eaf8f5590ef22c9f877ce29ce1ae64051c62 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=129.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:57 scheduler task 464ce790 (flow 958124ac): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s034.tar.gz resources {}
2021/07/08 17:27:57  ->  n100.r08.s034.Main.cp_out_file 958124ac exec extern s3://niema-test/n100/r08/n100.r08.s034.tar.gz 35.7MiB
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloaded val<.=29afd6cc 35.4MiB>
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloaded list<val<.=2da0fe16 35.8MiB> 35.8MiB>
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloaded val<.=8d7446d7 35.4MiB>
2021/07/08 17:27:57 scheduler task e4711d1d (flow 40d58762): unloading (try 0): successful, next state: complete
2021/07/08 17:27:57  <-  n100.r08.s067.Main.out_file 40d58762 ok     exec 5m8s 35.8MiB
2021/07/08 17:27:57 n100.r08.s067.Main.out_file 40d58762 n100/r08/n100.r08.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1d1ce294d0a17b79760e7c0f3925866b179bdd5ff98a70b26a9af7d567635846
	sha256:40d58762ac9ad0581ce3b94a414496b089db2529bea9e1414ce26cfb5762f664
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e4711d1d3b895583effbd186469d57a7ca41e5e5057639e68f97a94120b38cde
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s067_output"
	    wget -O "n100.r08.s067_output/n100.r08.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s067_output/n100.r08.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s067_output/n100.r08.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s067_output/n100.r08.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s067_output/n100.r08.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s067_output/n100.r08.s067.reference.fas" "n100.r08.s067_output/n100.r08.s067.fq1.fastq" "n100.r08.s067_output/n100.r08.s067.fq2.fastq" | samtools view -bS - > "n100.r08.s067_output/n100.r08.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s067_output/n100.r08.s067.untrimmed.sorted.bam" "n100.r08.s067_output/n100.r08.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s067_output/n100.r08.s067.untrimmed.sorted.bam" -b "n100.r08.s067_output/n100.r08.s067.primers.bed" -p "n100.r08.s067_output/n100.r08.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" "n100.r08.s067_output/n100.r08.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s067_output/n100.r08.s067.reference.fas" "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" > "n100.r08.s067_output/n100.r08.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s067_output/n100.r08.s067.reference.fas" --call-indels "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" > "n100.r08.s067_output/n100.r08.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s067_output/n100.r08.s067.trimmed.sorted.bam" > "n100.r08.s067_output/n100.r08.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s067_output/n100.r08.s067.depth.txt" "n100.r08.s067_output/n100.r08.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s067_output/n100.r08.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s067_output/n100.r08.s067.reference.fas" | bcftools consensus -m "n100.r08.s067_output/n100.r08.s067.low_depth.tsv" tmp.vcf.gz > "n100.r08.s067_output/n100.r08.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2da0fe167df55535b1396448939e16fd21885547038590fd430aad36bdde4e9f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=126.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:57 scheduler task ec34c104 (flow 9577c458): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s067.tar.gz resources {}
2021/07/08 17:27:57  ->  n100.r08.s067.Main.cp_out_file 9577c458 exec extern s3://niema-test/n100/r08/n100.r08.s067.tar.gz 35.8MiB
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloading (try 0): started
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloading list<val<.=ebc80ff2 35.8MiB> 35.8MiB>
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloading val<.=a569eab4 35.4MiB>
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloading val<.=4867dad4 35.4MiB>
2021/07/08 17:27:57 scheduler task 88e00c6e (flow fecccee5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:02249391862a67024d012b6a33fb37207215c338ce92a1ce29e2e0accd5c4a18 -> s3://niema-test/n100/r08/n100.r08.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:57  <-  n100.r08.s054.Main.cp_out_file fecccee5 ok   extern 0s 35.7MiB
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloaded val<.=a569eab4 35.4MiB>
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloaded list<val<.=ebc80ff2 35.8MiB> 35.8MiB>
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloaded val<.=4867dad4 35.4MiB>
2021/07/08 17:27:57 scheduler task 0b48b7f4 (flow 3c31b57e): unloading (try 0): successful, next state: complete
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:57  <-  n100.r08.s084.Main.out_file 3c31b57e ok     exec 5m7s 35.8MiB
2021/07/08 17:27:57 n100.r08.s084.Main.out_file 3c31b57e n100/r08/n100.r08.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:26d6cfad5d9473de9f5b3ba23d8673d4d5c327d577c933933e53055957c27e82
	sha256:3c31b57efb817b5b7e821d2aa711d28bb31754c022e5dd378a89f02de46ca3d4
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b48b7f42092e385ba527b00d02d7f2647c302498fc8a05c0218e0470d5b7032
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s084_output"
	    wget -O "n100.r08.s084_output/n100.r08.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s084_output/n100.r08.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s084_output/n100.r08.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s084_output/n100.r08.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s084_output/n100.r08.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s084_output/n100.r08.s084.reference.fas" "n100.r08.s084_output/n100.r08.s084.fq1.fastq" "n100.r08.s084_output/n100.r08.s084.fq2.fastq" | samtools view -bS - > "n100.r08.s084_output/n100.r08.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s084_output/n100.r08.s084.untrimmed.sorted.bam" "n100.r08.s084_output/n100.r08.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s084_output/n100.r08.s084.untrimmed.sorted.bam" -b "n100.r08.s084_output/n100.r08.s084.primers.bed" -p "n100.r08.s084_output/n100.r08.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" "n100.r08.s084_output/n100.r08.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s084_output/n100.r08.s084.reference.fas" "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" > "n100.r08.s084_output/n100.r08.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s084_output/n100.r08.s084.reference.fas" --call-indels "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" > "n100.r08.s084_output/n100.r08.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s084_output/n100.r08.s084.trimmed.sorted.bam" > "n100.r08.s084_output/n100.r08.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s084_output/n100.r08.s084.depth.txt" "n100.r08.s084_output/n100.r08.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s084_output/n100.r08.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s084_output/n100.r08.s084.reference.fas" | bcftools consensus -m "n100.r08.s084_output/n100.r08.s084.low_depth.tsv" tmp.vcf.gz > "n100.r08.s084_output/n100.r08.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ebc80ff20b86a42e00aacd45ca9b5633ac6b0b98e09ba760d229b367bda3c7a4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=130.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:27:57 scheduler task f334a9fb (flow 10c7675b): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s084.tar.gz resources {}
2021/07/08 17:27:57  ->  n100.r08.s084.Main.cp_out_file 10c7675b exec extern s3://niema-test/n100/r08/n100.r08.s084.tar.gz 35.8MiB
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloading (try 0): started
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloading list<val<.=a4d27aa7 35.7MiB> 35.7MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloading val<.=4574fcf9 35.4MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloading val<.=e6846c7f 35.4MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloaded val<.=e6846c7f 35.4MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloaded val<.=4574fcf9 35.4MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloaded list<val<.=a4d27aa7 35.7MiB> 35.7MiB>
2021/07/08 17:27:57 scheduler task acb01e0b (flow b6de7c5d): unloading (try 0): successful, next state: complete
2021/07/08 17:27:57  <-  n100.r08.s058.Main.out_file b6de7c5d ok     exec 5m8s 35.7MiB
2021/07/08 17:27:57 n100.r08.s058.Main.out_file b6de7c5d n100/r08/n100.r08.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:abf20422be7eedc59036e25173e47030457253b1ebeb89a24352af2582225e02
	sha256:b6de7c5d16e4795577b3e9c138474fefcf9e36701f19abf6e7f0404bf0500fd2
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/acb01e0bc3fc3628d8e9fb75cad8f93c6e1dd51196928dc6949c59cdb66eaf8a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s058_output"
	    wget -O "n100.r08.s058_output/n100.r08.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s058_output/n100.r08.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s058_output/n100.r08.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s058_output/n100.r08.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s058_output/n100.r08.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s058_output/n100.r08.s058.reference.fas" "n100.r08.s058_output/n100.r08.s058.fq1.fastq" "n100.r08.s058_output/n100.r08.s058.fq2.fastq" | samtools view -bS - > "n100.r08.s058_output/n100.r08.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s058_output/n100.r08.s058.untrimmed.sorted.bam" "n100.r08.s058_output/n100.r08.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s058_output/n100.r08.s058.untrimmed.sorted.bam" -b "n100.r08.s058_output/n100.r08.s058.primers.bed" -p "n100.r08.s058_output/n100.r08.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" "n100.r08.s058_output/n100.r08.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s058_output/n100.r08.s058.reference.fas" "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" > "n100.r08.s058_output/n100.r08.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s058_output/n100.r08.s058.reference.fas" --call-indels "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" > "n100.r08.s058_output/n100.r08.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s058_output/n100.r08.s058.trimmed.sorted.bam" > "n100.r08.s058_output/n100.r08.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s058_output/n100.r08.s058.depth.txt" "n100.r08.s058_output/n100.r08.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s058_output/n100.r08.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s058_output/n100.r08.s058.reference.fas" | bcftools consensus -m "n100.r08.s058_output/n100.r08.s058.low_depth.tsv" tmp.vcf.gz > "n100.r08.s058_output/n100.r08.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a4d27aa7f489ca50cd2d9f1f24b3bf97ac6e3c24edc8e82f0af0ee0cfe42207d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=129.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:27:57 scheduler task c2f1ec04 (flow 137f4b74): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s058.tar.gz resources {}
2021/07/08 17:27:57  ->  n100.r08.s058.Main.cp_out_file 137f4b74 exec extern s3://niema-test/n100/r08/n100.r08.s058.tar.gz 35.7MiB
2021/07/08 17:27:57 scheduler task 95ea60c7 (flow 53b65fb8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:57 scheduler task 95ea60c7 (flow 53b65fb8): promoting objects (try 0): started
2021/07/08 17:27:57 scheduler task 464ce790 (flow 958124ac): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6834e781d60424dc3d59729a74d9eaf8f5590ef22c9f877ce29ce1ae64051c62 -> s3://niema-test/n100/r08/n100.r08.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:57  <-  n100.r08.s034.Main.cp_out_file 958124ac ok   extern 0s 35.7MiB
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): retrieving diagnostic output (try 0): started
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): retrieving result (try 0): started
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): transferring output (try 0): started
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): promoting objects (try 0): started
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): retrieving diagnostic output (try 0): started
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:58 scheduler task ec34c104 (flow 9577c458): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2da0fe167df55535b1396448939e16fd21885547038590fd430aad36bdde4e9f -> s3://niema-test/n100/r08/n100.r08.s067.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:58  <-  n100.r08.s067.Main.cp_out_file 9577c458 ok   extern 0s 35.8MiB
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): promoting objects (try 0): started
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): retrieving result (try 0): started
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): retrieving diagnostic output (try 0): started
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:58 scheduler task f334a9fb (flow 10c7675b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ebc80ff20b86a42e00aacd45ca9b5633ac6b0b98e09ba760d229b367bda3c7a4 -> s3://niema-test/n100/r08/n100.r08.s084.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:27:58  <-  n100.r08.s084.Main.cp_out_file 10c7675b ok   extern 0s 35.8MiB
2021/07/08 17:27:58 scheduler task d321bea4 (flow 6fbbdec0): transferring output (try 0): started
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:58 scheduler task c2f1ec04 (flow 137f4b74): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a4d27aa7f489ca50cd2d9f1f24b3bf97ac6e3c24edc8e82f0af0ee0cfe42207d -> s3://niema-test/n100/r08/n100.r08.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:58  <-  n100.r08.s058.Main.cp_out_file 137f4b74 ok   extern 0s 35.7MiB
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): promoting objects (try 0): started
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): retrieving result (try 0): started
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): retrieving diagnostic output (try 0): started
2021/07/08 17:27:58 scheduler task 1e17310e (flow 4be7c800): transferring output (try 0): started
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloading (try 0): started
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloading list<val<.=538c48ab 35.7MiB> 35.7MiB>
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloading val<.=9b2b7481 35.4MiB>
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloading val<.=07ba23ac 35.4MiB>
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): retrieving result (try 0): started
2021/07/08 17:27:58 scheduler task f032da36 (flow dd8a72fb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:58 scheduler task f032da36 (flow dd8a72fb): promoting objects (try 0): started
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloaded list<val<.=538c48ab 35.7MiB> 35.7MiB>
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloaded val<.=07ba23ac 35.4MiB>
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloaded val<.=9b2b7481 35.4MiB>
2021/07/08 17:27:58 scheduler task 95ea60c7 (flow 53b65fb8): unloading (try 0): successful, next state: complete
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:58  <-  n100.r08.s045.Main.out_file 53b65fb8 ok     exec 5m9s 35.7MiB
2021/07/08 17:27:58 n100.r08.s045.Main.out_file 53b65fb8 n100/r08/n100.r08.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ccd9eb1f41514928637f4d557b593641a587b52164d850c4af121f252f60fe01
	sha256:53b65fb803b549477b9831b654dc6a21a13f90901dbbc6ac7276b2fbde23b15f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95ea60c75d8d047d61fcc0e2b8c183e741d612689a6ca5d2beac35e3e0a33499
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s045_output"
	    wget -O "n100.r08.s045_output/n100.r08.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s045_output/n100.r08.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s045_output/n100.r08.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s045_output/n100.r08.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s045_output/n100.r08.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s045_output/n100.r08.s045.reference.fas" "n100.r08.s045_output/n100.r08.s045.fq1.fastq" "n100.r08.s045_output/n100.r08.s045.fq2.fastq" | samtools view -bS - > "n100.r08.s045_output/n100.r08.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s045_output/n100.r08.s045.untrimmed.sorted.bam" "n100.r08.s045_output/n100.r08.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s045_output/n100.r08.s045.untrimmed.sorted.bam" -b "n100.r08.s045_output/n100.r08.s045.primers.bed" -p "n100.r08.s045_output/n100.r08.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" "n100.r08.s045_output/n100.r08.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s045_output/n100.r08.s045.reference.fas" "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" > "n100.r08.s045_output/n100.r08.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s045_output/n100.r08.s045.reference.fas" --call-indels "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" > "n100.r08.s045_output/n100.r08.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s045_output/n100.r08.s045.trimmed.sorted.bam" > "n100.r08.s045_output/n100.r08.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s045_output/n100.r08.s045.depth.txt" "n100.r08.s045_output/n100.r08.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s045_output/n100.r08.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s045_output/n100.r08.s045.reference.fas" | bcftools consensus -m "n100.r08.s045_output/n100.r08.s045.low_depth.tsv" tmp.vcf.gz > "n100.r08.s045_output/n100.r08.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:538c48ab515049fc57d74f83b2164fd86e38bae17b4ba1dc56ee41727b4b3f2b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=131.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:27:58 scheduler task 8c26f617 (flow 0fe30da8): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s045.tar.gz resources {}
2021/07/08 17:27:58  ->  n100.r08.s045.Main.cp_out_file 0fe30da8 exec extern s3://niema-test/n100/r08/n100.r08.s045.tar.gz 35.7MiB
2021/07/08 17:27:58 scheduler task 17275071 (flow b5a84f70): transferring output (try 0): started
2021/07/08 17:27:58 scheduler task f032da36 (flow dd8a72fb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:58 scheduler task f032da36 (flow dd8a72fb): retrieving diagnostic output (try 0): started
2021/07/08 17:27:58 scheduler task e266f779 (flow 89895078): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:58 scheduler task f032da36 (flow dd8a72fb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:58 scheduler task e266f779 (flow 89895078): promoting objects (try 0): started
2021/07/08 17:27:58 scheduler task f032da36 (flow dd8a72fb): retrieving result (try 0): started
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloading (try 0): started
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloading list<val<.=78ab7a23 35.7MiB> 35.7MiB>
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloading val<.=8cf50129 35.4MiB>
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloading val<.=d5e64a7a 35.4MiB>
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): retrieving diagnostic output (try 0): started
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): transferring output (try 0): started
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloading (try 0): started
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloading list<val<.=7822635b 35.7MiB> 35.7MiB>
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloading val<.=7a5dd551 35.4MiB>
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloading val<.=79225587 35.4MiB>
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloaded list<val<.=78ab7a23 35.7MiB> 35.7MiB>
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloaded val<.=8cf50129 35.4MiB>
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloaded val<.=d5e64a7a 35.4MiB>
2021/07/08 17:27:59 scheduler task d321bea4 (flow 6fbbdec0): unloading (try 0): successful, next state: complete
2021/07/08 17:27:59  <-  n100.r08.s085.Main.out_file 6fbbdec0 ok     exec 5m10s 35.7MiB
2021/07/08 17:27:59 n100.r08.s085.Main.out_file 6fbbdec0 n100/r08/n100.r08.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e0944bcbb196ac77abb9666e008a7954e52d6be297f638bcdad5d9e194c8a314
	sha256:6fbbdec07200b0805807a7c6004243435393e00f8a4de5b4c18f46a677f065a3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d321bea40111fb2c32398e440b7492ea77e83b0a8dfa0fdf521b91c5710ff4cb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s085_output"
	    wget -O "n100.r08.s085_output/n100.r08.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s085_output/n100.r08.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s085_output/n100.r08.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s085_output/n100.r08.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s085_output/n100.r08.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s085_output/n100.r08.s085.reference.fas" "n100.r08.s085_output/n100.r08.s085.fq1.fastq" "n100.r08.s085_output/n100.r08.s085.fq2.fastq" | samtools view -bS - > "n100.r08.s085_output/n100.r08.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s085_output/n100.r08.s085.untrimmed.sorted.bam" "n100.r08.s085_output/n100.r08.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s085_output/n100.r08.s085.untrimmed.sorted.bam" -b "n100.r08.s085_output/n100.r08.s085.primers.bed" -p "n100.r08.s085_output/n100.r08.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" "n100.r08.s085_output/n100.r08.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s085_output/n100.r08.s085.reference.fas" "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" > "n100.r08.s085_output/n100.r08.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s085_output/n100.r08.s085.reference.fas" --call-indels "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" > "n100.r08.s085_output/n100.r08.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s085_output/n100.r08.s085.trimmed.sorted.bam" > "n100.r08.s085_output/n100.r08.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s085_output/n100.r08.s085.depth.txt" "n100.r08.s085_output/n100.r08.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s085_output/n100.r08.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s085_output/n100.r08.s085.reference.fas" | bcftools consensus -m "n100.r08.s085_output/n100.r08.s085.low_depth.tsv" tmp.vcf.gz > "n100.r08.s085_output/n100.r08.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:78ab7a2325fd0cd6a311d5efd538712b215d8fc0a21b72c3aa526f96a6f077e1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:27:59 scheduler task 09d16200 (flow 694904de): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s085.tar.gz resources {}
2021/07/08 17:27:59  ->  n100.r08.s085.Main.cp_out_file 694904de exec extern s3://niema-test/n100/r08/n100.r08.s085.tar.gz 35.7MiB
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): retrieving result (try 0): started
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloaded val<.=79225587 35.4MiB>
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloaded val<.=7a5dd551 35.4MiB>
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloaded list<val<.=7822635b 35.7MiB> 35.7MiB>
2021/07/08 17:27:59 scheduler task 1e17310e (flow 4be7c800): unloading (try 0): successful, next state: complete
2021/07/08 17:27:59  <-  n100.r08.s015.Main.out_file 4be7c800 ok     exec 5m10s 35.7MiB
2021/07/08 17:27:59 n100.r08.s015.Main.out_file 4be7c800 n100/r08/n100.r08.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8ec17b9b72554dc0da886ad6f38ba75cb117c1a33b1513b0c8507fe2fb97d792
	sha256:4be7c800f9879a9a7433756c4617ec4858b055b59ceee495c37a1ecb892a58aa
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e17310e75049149d1275925e75bb845fb9713a9f99c7f56bfdd179c1c8e9b12
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s015_output"
	    wget -O "n100.r08.s015_output/n100.r08.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s015_output/n100.r08.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s015_output/n100.r08.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s015_output/n100.r08.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s015_output/n100.r08.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s015_output/n100.r08.s015.reference.fas" "n100.r08.s015_output/n100.r08.s015.fq1.fastq" "n100.r08.s015_output/n100.r08.s015.fq2.fastq" | samtools view -bS - > "n100.r08.s015_output/n100.r08.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s015_output/n100.r08.s015.untrimmed.sorted.bam" "n100.r08.s015_output/n100.r08.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s015_output/n100.r08.s015.untrimmed.sorted.bam" -b "n100.r08.s015_output/n100.r08.s015.primers.bed" -p "n100.r08.s015_output/n100.r08.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" "n100.r08.s015_output/n100.r08.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s015_output/n100.r08.s015.reference.fas" "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" > "n100.r08.s015_output/n100.r08.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s015_output/n100.r08.s015.reference.fas" --call-indels "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" > "n100.r08.s015_output/n100.r08.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s015_output/n100.r08.s015.trimmed.sorted.bam" > "n100.r08.s015_output/n100.r08.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s015_output/n100.r08.s015.depth.txt" "n100.r08.s015_output/n100.r08.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s015_output/n100.r08.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s015_output/n100.r08.s015.reference.fas" | bcftools consensus -m "n100.r08.s015_output/n100.r08.s015.low_depth.tsv" tmp.vcf.gz > "n100.r08.s015_output/n100.r08.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7822635b50a36b1f097b759a443fa9b129fe3a1a3ba1ea9de2bf15b306766412 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=130.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:27:59 scheduler task da8bf7ee (flow 7e148be3): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s015.tar.gz resources {}
2021/07/08 17:27:59  ->  n100.r08.s015.Main.cp_out_file 7e148be3 exec extern s3://niema-test/n100/r08/n100.r08.s015.tar.gz 35.7MiB
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): promoting objects (try 0): started
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): transferring output (try 0): started
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): retrieving diagnostic output (try 0): started
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): promoting objects (try 0): started
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloading (try 0): started
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloading list<val<.=fc96769f 35.8MiB> 35.8MiB>
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloading val<.=051815de 35.4MiB>
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloading val<.=2f5d55fe 35.4MiB>
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): retrieving result (try 0): started
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloaded list<val<.=fc96769f 35.8MiB> 35.8MiB>
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): retrieving diagnostic output (try 0): started
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloaded val<.=2f5d55fe 35.4MiB>
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloaded val<.=051815de 35.4MiB>
2021/07/08 17:27:59 scheduler task 17275071 (flow b5a84f70): unloading (try 0): successful, next state: complete
2021/07/08 17:27:59  <-  n100.r08.s056.Main.out_file b5a84f70 ok     exec 5m10s 35.8MiB
2021/07/08 17:27:59 n100.r08.s056.Main.out_file b5a84f70 n100/r08/n100.r08.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:129007a61bd414d7987a145f7a421948f6c89d5d7ad3004df16e2a7f5a35db45
	sha256:b5a84f70ea0c5be8e986528d9c2f7cfa9b4bc361097e7c43aeeb5a4050a47472
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/17275071cd763e2532caaa3dc9ac387b6781c8e8eefd26d0589cc2c0e7f903eb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s056_output"
	    wget -O "n100.r08.s056_output/n100.r08.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s056_output/n100.r08.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s056_output/n100.r08.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s056_output/n100.r08.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s056_output/n100.r08.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s056_output/n100.r08.s056.reference.fas" "n100.r08.s056_output/n100.r08.s056.fq1.fastq" "n100.r08.s056_output/n100.r08.s056.fq2.fastq" | samtools view -bS - > "n100.r08.s056_output/n100.r08.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s056_output/n100.r08.s056.untrimmed.sorted.bam" "n100.r08.s056_output/n100.r08.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s056_output/n100.r08.s056.untrimmed.sorted.bam" -b "n100.r08.s056_output/n100.r08.s056.primers.bed" -p "n100.r08.s056_output/n100.r08.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" "n100.r08.s056_output/n100.r08.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s056_output/n100.r08.s056.reference.fas" "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" > "n100.r08.s056_output/n100.r08.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s056_output/n100.r08.s056.reference.fas" --call-indels "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" > "n100.r08.s056_output/n100.r08.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s056_output/n100.r08.s056.trimmed.sorted.bam" > "n100.r08.s056_output/n100.r08.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s056_output/n100.r08.s056.depth.txt" "n100.r08.s056_output/n100.r08.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s056_output/n100.r08.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s056_output/n100.r08.s056.reference.fas" | bcftools consensus -m "n100.r08.s056_output/n100.r08.s056.low_depth.tsv" tmp.vcf.gz > "n100.r08.s056_output/n100.r08.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fc96769f4f2f766d8679a89a52dd986c9c4c1412e94dba3a5fb018b5fc6b5299 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=129.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=698B max=3.1KiB
2021/07/08 17:27:59 scheduler task 364c6dd6 (flow 0046ee52): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s056.tar.gz resources {}
2021/07/08 17:27:59  ->  n100.r08.s056.Main.cp_out_file 0046ee52 exec extern s3://niema-test/n100/r08/n100.r08.s056.tar.gz 35.8MiB
2021/07/08 17:27:59 scheduler task 8c26f617 (flow 0fe30da8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:538c48ab515049fc57d74f83b2164fd86e38bae17b4ba1dc56ee41727b4b3f2b -> s3://niema-test/n100/r08/n100.r08.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:59  <-  n100.r08.s045.Main.cp_out_file 0fe30da8 ok   extern 0s 35.7MiB
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:59 scheduler task be583c00 (flow 601a9c71): transferring output (try 0): started
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): retrieving result (try 0): started
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:59 scheduler task 0004b3b5 (flow 509a6465): transferring output (try 0): started
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloading (try 0): started
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloading list<val<.=f72b2787 35.7MiB> 35.7MiB>
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloading val<.=bb8823f8 35.4MiB>
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloading val<.=6dbe2736 35.4MiB>
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): promoting objects (try 0): started
2021/07/08 17:27:59 scheduler task 8ee17ca7 (flow cc702d2f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:59 scheduler task 8ee17ca7 (flow cc702d2f): promoting objects (try 0): started
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloaded list<val<.=f72b2787 35.7MiB> 35.7MiB>
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloaded val<.=bb8823f8 35.4MiB>
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloaded val<.=6dbe2736 35.4MiB>
2021/07/08 17:27:59 scheduler task f032da36 (flow dd8a72fb): unloading (try 0): successful, next state: complete
2021/07/08 17:27:59  <-  n100.r08.s053.Main.out_file dd8a72fb ok     exec 5m2s 35.7MiB
2021/07/08 17:27:59 n100.r08.s053.Main.out_file dd8a72fb n100/r08/n100.r08.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8e7a9bdf7a240335c9102eb7babe42512ea10ec10da90eb32dfe58c8b2c54ea0
	sha256:dd8a72fbbf5ab80fc1a70038187aa99314986a0c6558d5da53f5bc13aab7ca7f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f032da36ef17402e53561e3eea83519bfe879ed8aef11da700c1d6facb612612
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s053_output"
	    wget -O "n100.r08.s053_output/n100.r08.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s053_output/n100.r08.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s053_output/n100.r08.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s053_output/n100.r08.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s053_output/n100.r08.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s053_output/n100.r08.s053.reference.fas" "n100.r08.s053_output/n100.r08.s053.fq1.fastq" "n100.r08.s053_output/n100.r08.s053.fq2.fastq" | samtools view -bS - > "n100.r08.s053_output/n100.r08.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s053_output/n100.r08.s053.untrimmed.sorted.bam" "n100.r08.s053_output/n100.r08.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s053_output/n100.r08.s053.untrimmed.sorted.bam" -b "n100.r08.s053_output/n100.r08.s053.primers.bed" -p "n100.r08.s053_output/n100.r08.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" "n100.r08.s053_output/n100.r08.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s053_output/n100.r08.s053.reference.fas" "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" > "n100.r08.s053_output/n100.r08.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s053_output/n100.r08.s053.reference.fas" --call-indels "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" > "n100.r08.s053_output/n100.r08.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s053_output/n100.r08.s053.trimmed.sorted.bam" > "n100.r08.s053_output/n100.r08.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s053_output/n100.r08.s053.depth.txt" "n100.r08.s053_output/n100.r08.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s053_output/n100.r08.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s053_output/n100.r08.s053.reference.fas" | bcftools consensus -m "n100.r08.s053_output/n100.r08.s053.low_depth.tsv" tmp.vcf.gz > "n100.r08.s053_output/n100.r08.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f72b278707a5ceed9cf84e22c3f3dfe021556d2a9c173587153fbc7b04d5cb72 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=131.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=3.1KiB
2021/07/08 17:27:59 scheduler task 6d5da328 (flow 26bdbede): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s053.tar.gz resources {}
2021/07/08 17:27:59  ->  n100.r08.s053.Main.cp_out_file 26bdbede exec extern s3://niema-test/n100/r08/n100.r08.s053.tar.gz 35.7MiB
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): retrieving diagnostic output (try 0): started
2021/07/08 17:27:59 scheduler task 8ee17ca7 (flow cc702d2f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task 8ee17ca7 (flow cc702d2f): retrieving diagnostic output (try 0): started
2021/07/08 17:27:59 scheduler task 899f5270 (flow c4aa557b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:59 scheduler task 899f5270 (flow c4aa557b): promoting objects (try 0): started
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:59 scheduler task fbea3b9c (flow 37f8d46a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): retrieving result (try 0): started
2021/07/08 17:27:59 scheduler task fbea3b9c (flow 37f8d46a): promoting objects (try 0): started
2021/07/08 17:27:59 scheduler task 899f5270 (flow c4aa557b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): transferring output (try 0): successful, next state: unloading
2021/07/08 17:27:59 scheduler task 8ee17ca7 (flow cc702d2f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:27:59 scheduler task 899f5270 (flow c4aa557b): retrieving diagnostic output (try 0): started
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): unloading (try 0): started
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): unloading list<val<.=4c020719 35.8MiB> 35.8MiB>
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): unloading val<.=5738a076 35.4MiB>
2021/07/08 17:27:59 scheduler task e266f779 (flow 89895078): unloading val<.=222c85dc 35.4MiB>
2021/07/08 17:27:59 scheduler task 8ee17ca7 (flow cc702d2f): retrieving result (try 0): started
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:27:59 scheduler task fbea3b9c (flow 37f8d46a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:27:59 scheduler task 09d16200 (flow 694904de): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:78ab7a2325fd0cd6a311d5efd538712b215d8fc0a21b72c3aa526f96a6f077e1 -> s3://niema-test/n100/r08/n100.r08.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:27:59  <-  n100.r08.s085.Main.cp_out_file 694904de ok   extern 0s 35.7MiB
2021/07/08 17:27:59 scheduler task c4ff5c5f (flow 14e5610e): transferring output (try 0): started
2021/07/08 17:27:59 scheduler task fbea3b9c (flow 37f8d46a): retrieving diagnostic output (try 0): started
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): retrieving result (try 0): started
2021/07/08 17:28:00 scheduler task e266f779 (flow 89895078): unloaded list<val<.=4c020719 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task e266f779 (flow 89895078): unloaded val<.=5738a076 35.4MiB>
2021/07/08 17:28:00 scheduler task e266f779 (flow 89895078): unloaded val<.=222c85dc 35.4MiB>
2021/07/08 17:28:00 scheduler task e266f779 (flow 89895078): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:00  <-  n100.r08.s066.Main.out_file 89895078 ok     exec 5m2s 35.8MiB
2021/07/08 17:28:00 n100.r08.s066.Main.out_file 89895078 n100/r08/n100.r08.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d49adf60e5ddff932714c5f14da3b8d2afd4472e2e844afc27ca2e7e3883535b
	sha256:89895078e584ff8b65518ecc70c7f43dbf7752cfa5daf4826e33dd11297c2c93
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e266f7796f48a09cf754d29d77fc979a7e8e610dea11b4ea50f9e3c8105c7bc7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s066_output"
	    wget -O "n100.r08.s066_output/n100.r08.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s066_output/n100.r08.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s066_output/n100.r08.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s066_output/n100.r08.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s066_output/n100.r08.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s066_output/n100.r08.s066.reference.fas" "n100.r08.s066_output/n100.r08.s066.fq1.fastq" "n100.r08.s066_output/n100.r08.s066.fq2.fastq" | samtools view -bS - > "n100.r08.s066_output/n100.r08.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s066_output/n100.r08.s066.untrimmed.sorted.bam" "n100.r08.s066_output/n100.r08.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s066_output/n100.r08.s066.untrimmed.sorted.bam" -b "n100.r08.s066_output/n100.r08.s066.primers.bed" -p "n100.r08.s066_output/n100.r08.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" "n100.r08.s066_output/n100.r08.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s066_output/n100.r08.s066.reference.fas" "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" > "n100.r08.s066_output/n100.r08.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s066_output/n100.r08.s066.reference.fas" --call-indels "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" > "n100.r08.s066_output/n100.r08.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s066_output/n100.r08.s066.trimmed.sorted.bam" > "n100.r08.s066_output/n100.r08.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s066_output/n100.r08.s066.depth.txt" "n100.r08.s066_output/n100.r08.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s066_output/n100.r08.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s066_output/n100.r08.s066.reference.fas" | bcftools consensus -m "n100.r08.s066_output/n100.r08.s066.low_depth.tsv" tmp.vcf.gz > "n100.r08.s066_output/n100.r08.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4c0207191b8f590b2f6fd2a0a7d69bc73280959438faa859c96e24a2dbf21968 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=130.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=699B max=3.1KiB
2021/07/08 17:28:00 scheduler task 558e2d62 (flow 4eb85aa5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s066.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s066.Main.cp_out_file 4eb85aa5 exec extern s3://niema-test/n100/r08/n100.r08.s066.tar.gz 35.8MiB
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): transferring output (try 0): started
2021/07/08 17:28:00 scheduler task da8bf7ee (flow 7e148be3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7822635b50a36b1f097b759a443fa9b129fe3a1a3ba1ea9de2bf15b306766412 -> s3://niema-test/n100/r08/n100.r08.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:00  <-  n100.r08.s015.Main.cp_out_file 7e148be3 ok   extern 0s 35.7MiB
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): transferring output (try 0): started
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloading (try 0): started
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloading list<val<.=808aa359 35.7MiB> 35.7MiB>
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloading val<.=0eb952ca 35.4MiB>
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloading val<.=7f9876d1 35.4MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): retrieving result (try 0): started
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloading (try 0): started
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloading list<val<.=b5f0233c 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloading val<.=b3740d9c 35.4MiB>
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloading val<.=7255b23c 35.4MiB>
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloaded val<.=0eb952ca 35.4MiB>
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloaded val<.=7f9876d1 35.4MiB>
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloaded list<val<.=808aa359 35.7MiB> 35.7MiB>
2021/07/08 17:28:00 scheduler task be583c00 (flow 601a9c71): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00  <-  n100.r08.s100.Main.out_file 601a9c71 ok     exec 5m10s 35.7MiB
2021/07/08 17:28:00 n100.r08.s100.Main.out_file 601a9c71 n100/r08/n100.r08.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7593f8bbf1622c8f689f40078518b8cd7750f5fb87affe5cff7d2297d525113b
	sha256:601a9c71c5c86e17c639bd3f46e774dd4593376313beaf6011f09c0afd14e95f
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/be583c00b1f13982b1e4b1d5944c36ec13956db470fe517031db35f3f8ca0065
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s100_output"
	    wget -O "n100.r08.s100_output/n100.r08.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s100_output/n100.r08.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s100_output/n100.r08.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s100_output/n100.r08.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s100_output/n100.r08.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s100_output/n100.r08.s100.reference.fas" "n100.r08.s100_output/n100.r08.s100.fq1.fastq" "n100.r08.s100_output/n100.r08.s100.fq2.fastq" | samtools view -bS - > "n100.r08.s100_output/n100.r08.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s100_output/n100.r08.s100.untrimmed.sorted.bam" "n100.r08.s100_output/n100.r08.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s100_output/n100.r08.s100.untrimmed.sorted.bam" -b "n100.r08.s100_output/n100.r08.s100.primers.bed" -p "n100.r08.s100_output/n100.r08.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" "n100.r08.s100_output/n100.r08.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s100_output/n100.r08.s100.reference.fas" "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" > "n100.r08.s100_output/n100.r08.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s100_output/n100.r08.s100.reference.fas" --call-indels "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" > "n100.r08.s100_output/n100.r08.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s100_output/n100.r08.s100.trimmed.sorted.bam" > "n100.r08.s100_output/n100.r08.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s100_output/n100.r08.s100.depth.txt" "n100.r08.s100_output/n100.r08.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s100_output/n100.r08.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s100_output/n100.r08.s100.reference.fas" | bcftools consensus -m "n100.r08.s100_output/n100.r08.s100.low_depth.tsv" tmp.vcf.gz > "n100.r08.s100_output/n100.r08.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:808aa359facfe67e8a22f5103b79ab849849633de83cc1c59a62ce9e017ccc63 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=125.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:28:00 scheduler task 7179dd91 (flow 32aa1397): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s100.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s100.Main.cp_out_file 32aa1397 exec extern s3://niema-test/n100/r08/n100.r08.s100.tar.gz 35.7MiB
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): transferring output (try 0): started
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloaded list<val<.=b5f0233c 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloaded val<.=b3740d9c 35.4MiB>
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloaded val<.=7255b23c 35.4MiB>
2021/07/08 17:28:00 scheduler task 0004b3b5 (flow 509a6465): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00  <-  n100.r08.s011.Main.out_file 509a6465 ok     exec 5m9s 35.8MiB
2021/07/08 17:28:00 n100.r08.s011.Main.out_file 509a6465 n100/r08/n100.r08.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61eaff955adbe06e2dc660ac395514894b00e2bc4179f1de3b39b7492e5b5afb
	sha256:509a64656d574bca1131419fc87d0bb603e5a2a323b5014c3d1a65f755ee9e4c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0004b3b5a3660f54386fd82e36be40835b729dc306d4352dc8d2584d63fa1849
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s011_output"
	    wget -O "n100.r08.s011_output/n100.r08.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s011_output/n100.r08.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s011_output/n100.r08.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s011_output/n100.r08.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s011_output/n100.r08.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s011_output/n100.r08.s011.reference.fas" "n100.r08.s011_output/n100.r08.s011.fq1.fastq" "n100.r08.s011_output/n100.r08.s011.fq2.fastq" | samtools view -bS - > "n100.r08.s011_output/n100.r08.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s011_output/n100.r08.s011.untrimmed.sorted.bam" "n100.r08.s011_output/n100.r08.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s011_output/n100.r08.s011.untrimmed.sorted.bam" -b "n100.r08.s011_output/n100.r08.s011.primers.bed" -p "n100.r08.s011_output/n100.r08.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" "n100.r08.s011_output/n100.r08.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s011_output/n100.r08.s011.reference.fas" "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" > "n100.r08.s011_output/n100.r08.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s011_output/n100.r08.s011.reference.fas" --call-indels "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" > "n100.r08.s011_output/n100.r08.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s011_output/n100.r08.s011.trimmed.sorted.bam" > "n100.r08.s011_output/n100.r08.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s011_output/n100.r08.s011.depth.txt" "n100.r08.s011_output/n100.r08.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s011_output/n100.r08.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s011_output/n100.r08.s011.reference.fas" | bcftools consensus -m "n100.r08.s011_output/n100.r08.s011.low_depth.tsv" tmp.vcf.gz > "n100.r08.s011_output/n100.r08.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b5f0233c6e24d1dfc2b3f2686f0abf82d9cc036a54c252edc94278803541c4ea 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=128.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:00 scheduler task 9329609c (flow 91cbb1d1): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s011.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s011.Main.cp_out_file 91cbb1d1 exec extern s3://niema-test/n100/r08/n100.r08.s011.tar.gz 35.8MiB
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): promoting objects (try 0): started
2021/07/08 17:28:00 scheduler task 364c6dd6 (flow 0046ee52): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fc96769f4f2f766d8679a89a52dd986c9c4c1412e94dba3a5fb018b5fc6b5299 -> s3://niema-test/n100/r08/n100.r08.s056.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:00  <-  n100.r08.s056.Main.cp_out_file 0046ee52 ok   extern 0s 35.8MiB
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloading (try 0): started
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloading list<val<.=33628b23 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloading val<.=ab94ed7c 35.4MiB>
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloading val<.=b075def8 35.4MiB>
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): retrieving diagnostic output (try 0): started
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): promoting objects (try 0): started
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloaded val<.=ab94ed7c 35.4MiB>
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloaded val<.=b075def8 35.4MiB>
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloaded list<val<.=33628b23 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task c4ff5c5f (flow 14e5610e): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00  <-  n100.r08.s098.Main.out_file 14e5610e ok     exec 5m3s 35.8MiB
2021/07/08 17:28:00 n100.r08.s098.Main.out_file 14e5610e n100/r08/n100.r08.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:984aa8043289cfd0ddeb9a5f928cc11b2266fb7b23a4c20c2bff9ad231b35139
	sha256:14e5610e86e85d65f5f1ccc589c5ed7195d2e3fbfa18150e5d482f6286bf76d4
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c4ff5c5f1dc6ca1eaf3d0419966118ecabac74f322d3888bcfa86a15665c431d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s098_output"
	    wget -O "n100.r08.s098_output/n100.r08.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s098_output/n100.r08.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s098_output/n100.r08.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s098_output/n100.r08.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s098_output/n100.r08.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s098_output/n100.r08.s098.reference.fas" "n100.r08.s098_output/n100.r08.s098.fq1.fastq" "n100.r08.s098_output/n100.r08.s098.fq2.fastq" | samtools view -bS - > "n100.r08.s098_output/n100.r08.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s098_output/n100.r08.s098.untrimmed.sorted.bam" "n100.r08.s098_output/n100.r08.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s098_output/n100.r08.s098.untrimmed.sorted.bam" -b "n100.r08.s098_output/n100.r08.s098.primers.bed" -p "n100.r08.s098_output/n100.r08.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" "n100.r08.s098_output/n100.r08.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s098_output/n100.r08.s098.reference.fas" "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" > "n100.r08.s098_output/n100.r08.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s098_output/n100.r08.s098.reference.fas" --call-indels "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" > "n100.r08.s098_output/n100.r08.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s098_output/n100.r08.s098.trimmed.sorted.bam" > "n100.r08.s098_output/n100.r08.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s098_output/n100.r08.s098.depth.txt" "n100.r08.s098_output/n100.r08.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s098_output/n100.r08.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s098_output/n100.r08.s098.reference.fas" | bcftools consensus -m "n100.r08.s098_output/n100.r08.s098.low_depth.tsv" tmp.vcf.gz > "n100.r08.s098_output/n100.r08.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:33628b2350f487d20f0587982cc86d9fdf0a90e6040d5794d884b463b564e077 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=128.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=694B max=3.1KiB
2021/07/08 17:28:00 scheduler task 2e8e2da3 (flow fa1ccefc): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s098.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s098.Main.cp_out_file fa1ccefc exec extern s3://niema-test/n100/r08/n100.r08.s098.tar.gz 35.8MiB
2021/07/08 17:28:00 scheduler task 6d5da328 (flow 26bdbede): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f72b278707a5ceed9cf84e22c3f3dfe021556d2a9c173587153fbc7b04d5cb72 -> s3://niema-test/n100/r08/n100.r08.s053.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:00  <-  n100.r08.s053.Main.cp_out_file 26bdbede ok   extern 0s 35.7MiB
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): retrieving result (try 0): started
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloading (try 0): started
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloading list<val<.=2261d1f9 35.7MiB> 35.7MiB>
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloading val<.=7bda9355 35.4MiB>
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloading val<.=392264ed 35.4MiB>
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): retrieving diagnostic output (try 0): started
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:00 scheduler task 625ac6d7 (flow c1c3792a): transferring output (try 0): started
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloaded list<val<.=2261d1f9 35.7MiB> 35.7MiB>
2021/07/08 17:28:00 scheduler task 558e2d62 (flow 4eb85aa5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4c0207191b8f590b2f6fd2a0a7d69bc73280959438faa859c96e24a2dbf21968 -> s3://niema-test/n100/r08/n100.r08.s066.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:00  <-  n100.r08.s066.Main.cp_out_file 4eb85aa5 ok   extern 0s 35.8MiB
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloaded val<.=392264ed 35.4MiB>
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloaded val<.=7bda9355 35.4MiB>
2021/07/08 17:28:00 scheduler task 8ee17ca7 (flow cc702d2f): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00  <-  n100.r08.s016.Main.out_file cc702d2f ok     exec 5m11s 35.7MiB
2021/07/08 17:28:00 n100.r08.s016.Main.out_file cc702d2f n100/r08/n100.r08.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03fc94feb5122c67e7451635e17fea842a7c4050551877ab347db2a758a40f04
	sha256:cc702d2fc5ad19f2bac204fe41d8f3cc65ede52fc7d8d1e5448bd97ff1b96393
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8ee17ca789d15f2adb830c44e4069d158da207dd835d8626da9916f37ddcba38
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s016_output"
	    wget -O "n100.r08.s016_output/n100.r08.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s016_output/n100.r08.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s016_output/n100.r08.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s016_output/n100.r08.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s016_output/n100.r08.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s016_output/n100.r08.s016.reference.fas" "n100.r08.s016_output/n100.r08.s016.fq1.fastq" "n100.r08.s016_output/n100.r08.s016.fq2.fastq" | samtools view -bS - > "n100.r08.s016_output/n100.r08.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s016_output/n100.r08.s016.untrimmed.sorted.bam" "n100.r08.s016_output/n100.r08.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s016_output/n100.r08.s016.untrimmed.sorted.bam" -b "n100.r08.s016_output/n100.r08.s016.primers.bed" -p "n100.r08.s016_output/n100.r08.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" "n100.r08.s016_output/n100.r08.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s016_output/n100.r08.s016.reference.fas" "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" > "n100.r08.s016_output/n100.r08.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s016_output/n100.r08.s016.reference.fas" --call-indels "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" > "n100.r08.s016_output/n100.r08.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s016_output/n100.r08.s016.trimmed.sorted.bam" > "n100.r08.s016_output/n100.r08.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s016_output/n100.r08.s016.depth.txt" "n100.r08.s016_output/n100.r08.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s016_output/n100.r08.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s016_output/n100.r08.s016.reference.fas" | bcftools consensus -m "n100.r08.s016_output/n100.r08.s016.low_depth.tsv" tmp.vcf.gz > "n100.r08.s016_output/n100.r08.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2261d1f92c0f580a1c617dbcecf26ed99d40b22d30aad8c97cb88e266dd15098 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.4MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:28:00 scheduler task 0e09eab0 (flow 42d6f9d7): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s016.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s016.Main.cp_out_file 42d6f9d7 exec extern s3://niema-test/n100/r08/n100.r08.s016.tar.gz 35.7MiB
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): retrieving result (try 0): started
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloading (try 0): started
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloading val<.=5cededaf 35.4MiB>
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloading val<.=8f73cc7f 35.4MiB>
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloading list<val<.=f03ba311 35.7MiB> 35.7MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloading (try 0): started
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloading list<val<.=3ef952dc 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloading val<.=7e63bee2 35.4MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloading val<.=a3f7bcba 35.4MiB>
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:00 scheduler task cc6f4951 (flow db5af4da): transferring output (try 0): started
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloaded val<.=5cededaf 35.4MiB>
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloaded val<.=8f73cc7f 35.4MiB>
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloaded list<val<.=f03ba311 35.7MiB> 35.7MiB>
2021/07/08 17:28:00 scheduler task 899f5270 (flow c4aa557b): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00  <-  n100.r08.s062.Main.out_file c4aa557b ok     exec 5m11s 35.7MiB
2021/07/08 17:28:00 n100.r08.s062.Main.out_file c4aa557b n100/r08/n100.r08.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df73d914df4f12c0a4c8672c3e5ce1af627d5d2ec2944b7e02685208cadc4d87
	sha256:c4aa557bd0879ebc07101058377749344891be3393626f4c583b149d8f05234a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/899f5270dbc64a883e4e9b1a624dd4f91e8dbcb9250c148d8e3f75ec7de70785
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s062_output"
	    wget -O "n100.r08.s062_output/n100.r08.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s062_output/n100.r08.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s062_output/n100.r08.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s062_output/n100.r08.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s062_output/n100.r08.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s062_output/n100.r08.s062.reference.fas" "n100.r08.s062_output/n100.r08.s062.fq1.fastq" "n100.r08.s062_output/n100.r08.s062.fq2.fastq" | samtools view -bS - > "n100.r08.s062_output/n100.r08.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s062_output/n100.r08.s062.untrimmed.sorted.bam" "n100.r08.s062_output/n100.r08.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s062_output/n100.r08.s062.untrimmed.sorted.bam" -b "n100.r08.s062_output/n100.r08.s062.primers.bed" -p "n100.r08.s062_output/n100.r08.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" "n100.r08.s062_output/n100.r08.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s062_output/n100.r08.s062.reference.fas" "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" > "n100.r08.s062_output/n100.r08.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s062_output/n100.r08.s062.reference.fas" --call-indels "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" > "n100.r08.s062_output/n100.r08.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s062_output/n100.r08.s062.trimmed.sorted.bam" > "n100.r08.s062_output/n100.r08.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s062_output/n100.r08.s062.depth.txt" "n100.r08.s062_output/n100.r08.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s062_output/n100.r08.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s062_output/n100.r08.s062.reference.fas" | bcftools consensus -m "n100.r08.s062_output/n100.r08.s062.low_depth.tsv" tmp.vcf.gz > "n100.r08.s062_output/n100.r08.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f03ba31150776df1dc497f62d2ba74799296f39125c7c8c54182cda8b1f1b53b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=124.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:00 scheduler task daf5b401 (flow 858c4bb5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s062.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s062.Main.cp_out_file 858c4bb5 exec extern s3://niema-test/n100/r08/n100.r08.s062.tar.gz 35.7MiB
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloaded list<val<.=3ef952dc 35.8MiB> 35.8MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloaded val<.=7e63bee2 35.4MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloaded val<.=a3f7bcba 35.4MiB>
2021/07/08 17:28:00 scheduler task fbea3b9c (flow 37f8d46a): unloading (try 0): successful, next state: complete
2021/07/08 17:28:00  <-  n100.r08.s048.Main.out_file 37f8d46a ok     exec 5m3s 35.8MiB
2021/07/08 17:28:00 n100.r08.s048.Main.out_file 37f8d46a n100/r08/n100.r08.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a0173e099755d893da2e2bf82e02863980ab07d419f499dae4d0dbd869d84387
	sha256:37f8d46a8fc51a7e09b7f8486133bbff83a72cfd000d24dda6283cd16a70605e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fbea3b9cb3c615730c908380d3016a4a232b20bcac6530cfe0257373fcabb38a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s048_output"
	    wget -O "n100.r08.s048_output/n100.r08.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s048_output/n100.r08.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s048_output/n100.r08.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s048_output/n100.r08.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s048_output/n100.r08.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s048_output/n100.r08.s048.reference.fas" "n100.r08.s048_output/n100.r08.s048.fq1.fastq" "n100.r08.s048_output/n100.r08.s048.fq2.fastq" | samtools view -bS - > "n100.r08.s048_output/n100.r08.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s048_output/n100.r08.s048.untrimmed.sorted.bam" "n100.r08.s048_output/n100.r08.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s048_output/n100.r08.s048.untrimmed.sorted.bam" -b "n100.r08.s048_output/n100.r08.s048.primers.bed" -p "n100.r08.s048_output/n100.r08.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" "n100.r08.s048_output/n100.r08.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s048_output/n100.r08.s048.reference.fas" "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" > "n100.r08.s048_output/n100.r08.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s048_output/n100.r08.s048.reference.fas" --call-indels "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" > "n100.r08.s048_output/n100.r08.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s048_output/n100.r08.s048.trimmed.sorted.bam" > "n100.r08.s048_output/n100.r08.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s048_output/n100.r08.s048.depth.txt" "n100.r08.s048_output/n100.r08.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s048_output/n100.r08.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s048_output/n100.r08.s048.reference.fas" | bcftools consensus -m "n100.r08.s048_output/n100.r08.s048.low_depth.tsv" tmp.vcf.gz > "n100.r08.s048_output/n100.r08.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3ef952dcf01e7370ad78667ae725c4db3df845b4e0c277b82b560e1291e7607c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=131.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:28:00 scheduler task 00a1e3c3 (flow 1a0b5093): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s048.tar.gz resources {}
2021/07/08 17:28:00  ->  n100.r08.s048.Main.cp_out_file 1a0b5093 exec extern s3://niema-test/n100/r08/n100.r08.s048.tar.gz 35.8MiB
2021/07/08 17:28:00 scheduler task 4fc2765c (flow b30b76d2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:00 scheduler task 4fc2765c (flow b30b76d2): promoting objects (try 0): started
2021/07/08 17:28:00 scheduler task 7179dd91 (flow 32aa1397): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:808aa359facfe67e8a22f5103b79ab849849633de83cc1c59a62ce9e017ccc63 -> s3://niema-test/n100/r08/n100.r08.s100.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:00  <-  n100.r08.s100.Main.cp_out_file 32aa1397 ok   extern 0s 35.7MiB
2021/07/08 17:28:00 scheduler task 4fc2765c (flow b30b76d2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:00 scheduler task 4fc2765c (flow b30b76d2): retrieving diagnostic output (try 0): started
2021/07/08 17:28:01 scheduler task 4fc2765c (flow b30b76d2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:01 scheduler task 4fc2765c (flow b30b76d2): retrieving result (try 0): started
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): promoting objects (try 0): started
2021/07/08 17:28:01 scheduler task 2e8e2da3 (flow fa1ccefc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:33628b2350f487d20f0587982cc86d9fdf0a90e6040d5794d884b463b564e077 -> s3://niema-test/n100/r08/n100.r08.s098.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:01  <-  n100.r08.s098.Main.cp_out_file fa1ccefc ok   extern 0s 35.8MiB
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:01 scheduler task 4fc2765c (flow b30b76d2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloading (try 0): started
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloading list<val<.=9f018295 35.7MiB> 35.7MiB>
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloading val<.=afdcf693 35.4MiB>
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloading val<.=ceb29a72 35.4MiB>
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): retrieving diagnostic output (try 0): started
2021/07/08 17:28:01 scheduler task 4fc2765c (flow b30b76d2): transferring output (try 0): started
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloading (try 0): started
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloading list<val<.=0c2878f2 35.7MiB> 35.7MiB>
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloading val<.=c2c8863a 35.4MiB>
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloading val<.=27f83e05 35.4MiB>
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloaded list<val<.=9f018295 35.7MiB> 35.7MiB>
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloaded val<.=afdcf693 35.4MiB>
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloaded val<.=ceb29a72 35.4MiB>
2021/07/08 17:28:01 scheduler task cc6f4951 (flow db5af4da): unloading (try 0): successful, next state: complete
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloaded list<val<.=0c2878f2 35.7MiB> 35.7MiB>
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloaded val<.=c2c8863a 35.4MiB>
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): retrieving result (try 0): started
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloaded val<.=27f83e05 35.4MiB>
2021/07/08 17:28:01 scheduler task 625ac6d7 (flow c1c3792a): unloading (try 0): successful, next state: complete
2021/07/08 17:28:01  <-  n100.r08.s014.Main.out_file db5af4da ok     exec 5m12s 35.7MiB
2021/07/08 17:28:01 n100.r08.s014.Main.out_file db5af4da n100/r08/n100.r08.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0da70468ee22a727d689a52031f67e9c3c1dfae5630b311055ed6c5f686efc6e
	sha256:db5af4da45424ed3b48e0a27d64f00a770d5b92811379bd3a3684f2f2c47e6f9
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc6f4951636d0cad89317657c68fea21b39446c54602714ddf3b680167e71542
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s014_output"
	    wget -O "n100.r08.s014_output/n100.r08.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s014_output/n100.r08.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s014_output/n100.r08.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s014_output/n100.r08.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s014_output/n100.r08.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s014_output/n100.r08.s014.reference.fas" "n100.r08.s014_output/n100.r08.s014.fq1.fastq" "n100.r08.s014_output/n100.r08.s014.fq2.fastq" | samtools view -bS - > "n100.r08.s014_output/n100.r08.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s014_output/n100.r08.s014.untrimmed.sorted.bam" "n100.r08.s014_output/n100.r08.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s014_output/n100.r08.s014.untrimmed.sorted.bam" -b "n100.r08.s014_output/n100.r08.s014.primers.bed" -p "n100.r08.s014_output/n100.r08.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" "n100.r08.s014_output/n100.r08.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s014_output/n100.r08.s014.reference.fas" "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" > "n100.r08.s014_output/n100.r08.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s014_output/n100.r08.s014.reference.fas" --call-indels "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" > "n100.r08.s014_output/n100.r08.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s014_output/n100.r08.s014.trimmed.sorted.bam" > "n100.r08.s014_output/n100.r08.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s014_output/n100.r08.s014.depth.txt" "n100.r08.s014_output/n100.r08.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s014_output/n100.r08.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s014_output/n100.r08.s014.reference.fas" | bcftools consensus -m "n100.r08.s014_output/n100.r08.s014.low_depth.tsv" tmp.vcf.gz > "n100.r08.s014_output/n100.r08.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9f01829588705f5f8a3e26ca1951d3c55d2f72ae2417d951df67df6181308dfe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=128.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:01 scheduler task 4d34a9d1 (flow 3c74c86c): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s014.tar.gz resources {}
2021/07/08 17:28:01  ->  n100.r08.s014.Main.cp_out_file 3c74c86c exec extern s3://niema-test/n100/r08/n100.r08.s014.tar.gz 35.7MiB
2021/07/08 17:28:01  <-  n100.r08.s018.Main.out_file c1c3792a ok     exec 5m11s 35.7MiB
2021/07/08 17:28:01 n100.r08.s018.Main.out_file c1c3792a n100/r08/n100.r08.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:91664b6424b6cf3aeb57c0a1998302e437165d8254dccea8348baa732450f9b2
	sha256:c1c3792ad2e4e152e934365ad578ccb66dbc646eef8349bf18781d4e8cf5e0ac
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/625ac6d7d86bc1880893d10bbee4a0c8fd9a34b513376544c1c37079cd07b118
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s018_output"
	    wget -O "n100.r08.s018_output/n100.r08.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s018_output/n100.r08.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s018_output/n100.r08.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s018_output/n100.r08.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s018_output/n100.r08.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s018_output/n100.r08.s018.reference.fas" "n100.r08.s018_output/n100.r08.s018.fq1.fastq" "n100.r08.s018_output/n100.r08.s018.fq2.fastq" | samtools view -bS - > "n100.r08.s018_output/n100.r08.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s018_output/n100.r08.s018.untrimmed.sorted.bam" "n100.r08.s018_output/n100.r08.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s018_output/n100.r08.s018.untrimmed.sorted.bam" -b "n100.r08.s018_output/n100.r08.s018.primers.bed" -p "n100.r08.s018_output/n100.r08.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" "n100.r08.s018_output/n100.r08.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s018_output/n100.r08.s018.reference.fas" "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" > "n100.r08.s018_output/n100.r08.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s018_output/n100.r08.s018.reference.fas" --call-indels "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" > "n100.r08.s018_output/n100.r08.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s018_output/n100.r08.s018.trimmed.sorted.bam" > "n100.r08.s018_output/n100.r08.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s018_output/n100.r08.s018.depth.txt" "n100.r08.s018_output/n100.r08.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s018_output/n100.r08.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s018_output/n100.r08.s018.reference.fas" | bcftools consensus -m "n100.r08.s018_output/n100.r08.s018.low_depth.tsv" tmp.vcf.gz > "n100.r08.s018_output/n100.r08.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0c2878f21a5c7fdd6056d7e029e6ec5cdf37aa38c031909747099bb5668bd899 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=128.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:01 scheduler task f5f7f38e (flow 76d0c5a1): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s018.tar.gz resources {}
2021/07/08 17:28:01  ->  n100.r08.s018.Main.cp_out_file 76d0c5a1 exec extern s3://niema-test/n100/r08/n100.r08.s018.tar.gz 35.7MiB
2021/07/08 17:28:01 scheduler task 0e09eab0 (flow 42d6f9d7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2261d1f92c0f580a1c617dbcecf26ed99d40b22d30aad8c97cb88e266dd15098 -> s3://niema-test/n100/r08/n100.r08.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:01  <-  n100.r08.s016.Main.cp_out_file 42d6f9d7 ok   extern 0s 35.7MiB
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:01 scheduler task e923c46c (flow 4b5a804b): transferring output (try 0): started
2021/07/08 17:28:01 scheduler task 00a1e3c3 (flow 1a0b5093): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3ef952dcf01e7370ad78667ae725c4db3df845b4e0c277b82b560e1291e7607c -> s3://niema-test/n100/r08/n100.r08.s048.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:01  <-  n100.r08.s048.Main.cp_out_file 1a0b5093 ok   extern 0s 35.8MiB
2021/07/08 17:28:01 scheduler task daf5b401 (flow 858c4bb5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f03ba31150776df1dc497f62d2ba74799296f39125c7c8c54182cda8b1f1b53b -> s3://niema-test/n100/r08/n100.r08.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:01  <-  n100.r08.s062.Main.cp_out_file 858c4bb5 ok   extern 0s 35.7MiB
2021/07/08 17:28:01 scheduler task e3e2fbc0 (flow b7aad0a1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:01 scheduler task e3e2fbc0 (flow b7aad0a1): promoting objects (try 0): started
2021/07/08 17:28:01 scheduler task e3e2fbc0 (flow b7aad0a1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:01 scheduler task e3e2fbc0 (flow b7aad0a1): retrieving diagnostic output (try 0): started
2021/07/08 17:28:01 scheduler task 11cbb428 (flow 6e2216d0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:01 scheduler task e3e2fbc0 (flow b7aad0a1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:01 scheduler task 11cbb428 (flow 6e2216d0): promoting objects (try 0): started
2021/07/08 17:28:01 scheduler task e3e2fbc0 (flow b7aad0a1): retrieving result (try 0): started
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloading (try 0): started
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloading list<val<.=997d85ea 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloading val<.=d49f400a 35.4MiB>
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloading val<.=7eb11879 35.4MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): retrieving diagnostic output (try 0): started
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): transferring output (try 0): started
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloading (try 0): started
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloading list<val<.=dd459162 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloading val<.=b477129a 35.4MiB>
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloading val<.=f26ae7f6 35.4MiB>
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): promoting objects (try 0): started
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloaded list<val<.=997d85ea 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloaded val<.=7eb11879 35.4MiB>
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloaded val<.=d49f400a 35.4MiB>
2021/07/08 17:28:02 scheduler task 4fc2765c (flow b30b76d2): unloading (try 0): successful, next state: complete
2021/07/08 17:28:02  <-  n100.r08.s022.Main.out_file b30b76d2 ok     exec 5m12s 35.7MiB
2021/07/08 17:28:02 n100.r08.s022.Main.out_file b30b76d2 n100/r08/n100.r08.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c0ce480a285d7d114ebfcf89fb30237777a7ea63d53f1840e190fdf789b8a07
	sha256:b30b76d268944aff56448163d378f25fa4ef193953caad8421b91b123c98b5ff
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4fc2765c93b4d7bcaeb5586473a25f0fff7c718eac5413f46e52a2133fc3cef3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s022_output"
	    wget -O "n100.r08.s022_output/n100.r08.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s022_output/n100.r08.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s022_output/n100.r08.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s022_output/n100.r08.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s022_output/n100.r08.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s022_output/n100.r08.s022.reference.fas" "n100.r08.s022_output/n100.r08.s022.fq1.fastq" "n100.r08.s022_output/n100.r08.s022.fq2.fastq" | samtools view -bS - > "n100.r08.s022_output/n100.r08.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s022_output/n100.r08.s022.untrimmed.sorted.bam" "n100.r08.s022_output/n100.r08.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s022_output/n100.r08.s022.untrimmed.sorted.bam" -b "n100.r08.s022_output/n100.r08.s022.primers.bed" -p "n100.r08.s022_output/n100.r08.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" "n100.r08.s022_output/n100.r08.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s022_output/n100.r08.s022.reference.fas" "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" > "n100.r08.s022_output/n100.r08.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s022_output/n100.r08.s022.reference.fas" --call-indels "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" > "n100.r08.s022_output/n100.r08.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s022_output/n100.r08.s022.trimmed.sorted.bam" > "n100.r08.s022_output/n100.r08.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s022_output/n100.r08.s022.depth.txt" "n100.r08.s022_output/n100.r08.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s022_output/n100.r08.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s022_output/n100.r08.s022.reference.fas" | bcftools consensus -m "n100.r08.s022_output/n100.r08.s022.low_depth.tsv" tmp.vcf.gz > "n100.r08.s022_output/n100.r08.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:997d85ead7e49b462a74ba4c6674af5bec32478a7e7fa0330b17c39b9673075c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=126.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:28:02 scheduler task 068f1c4e (flow 4d7e62f5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s022.tar.gz resources {}
2021/07/08 17:28:02  ->  n100.r08.s022.Main.cp_out_file 4d7e62f5 exec extern s3://niema-test/n100/r08/n100.r08.s022.tar.gz 35.7MiB
2021/07/08 17:28:02 scheduler task 4d34a9d1 (flow 3c74c86c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9f01829588705f5f8a3e26ca1951d3c55d2f72ae2417d951df67df6181308dfe -> s3://niema-test/n100/r08/n100.r08.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:02  <-  n100.r08.s014.Main.cp_out_file 3c74c86c ok   extern 0s 35.7MiB
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloaded val<.=f26ae7f6 35.4MiB>
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloaded list<val<.=dd459162 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloaded val<.=b477129a 35.4MiB>
2021/07/08 17:28:02 scheduler task e923c46c (flow 4b5a804b): unloading (try 0): successful, next state: complete
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): promoting objects (try 0): started
2021/07/08 17:28:02 scheduler task f5f7f38e (flow 76d0c5a1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0c2878f21a5c7fdd6056d7e029e6ec5cdf37aa38c031909747099bb5668bd899 -> s3://niema-test/n100/r08/n100.r08.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:02  <-  n100.r08.s018.Main.cp_out_file 76d0c5a1 ok   extern 0s 35.7MiB
2021/07/08 17:28:02  <-  n100.r08.s006.Main.out_file 4b5a804b ok     exec 5m4s 35.7MiB
2021/07/08 17:28:02 n100.r08.s006.Main.out_file 4b5a804b n100/r08/n100.r08.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0c72148ca318739ef04da65e4863c35af351090638260ba3d1881928c9f58193
	sha256:4b5a804b2dd81c704c2781be0fd04bb59e6e0a69941f83f3aff03d99aa9df007
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e923c46c8967c382267274a6490c1f6120c7fa57ae54f0ddabfed204f3797ab6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s006_output"
	    wget -O "n100.r08.s006_output/n100.r08.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s006_output/n100.r08.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s006_output/n100.r08.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s006_output/n100.r08.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s006_output/n100.r08.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s006_output/n100.r08.s006.reference.fas" "n100.r08.s006_output/n100.r08.s006.fq1.fastq" "n100.r08.s006_output/n100.r08.s006.fq2.fastq" | samtools view -bS - > "n100.r08.s006_output/n100.r08.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s006_output/n100.r08.s006.untrimmed.sorted.bam" "n100.r08.s006_output/n100.r08.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s006_output/n100.r08.s006.untrimmed.sorted.bam" -b "n100.r08.s006_output/n100.r08.s006.primers.bed" -p "n100.r08.s006_output/n100.r08.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" "n100.r08.s006_output/n100.r08.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s006_output/n100.r08.s006.reference.fas" "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" > "n100.r08.s006_output/n100.r08.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s006_output/n100.r08.s006.reference.fas" --call-indels "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" > "n100.r08.s006_output/n100.r08.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s006_output/n100.r08.s006.trimmed.sorted.bam" > "n100.r08.s006_output/n100.r08.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s006_output/n100.r08.s006.depth.txt" "n100.r08.s006_output/n100.r08.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s006_output/n100.r08.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s006_output/n100.r08.s006.reference.fas" | bcftools consensus -m "n100.r08.s006_output/n100.r08.s006.low_depth.tsv" tmp.vcf.gz > "n100.r08.s006_output/n100.r08.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:dd45916266e0e7708190bd039ee1ca6e873012287de3521eba00bd38669dd53b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=694B max=3.1KiB
2021/07/08 17:28:02 scheduler task cea20010 (flow 038f2e70): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s006.tar.gz resources {}
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): retrieving result (try 0): started
2021/07/08 17:28:02  ->  n100.r08.s006.Main.cp_out_file 038f2e70 exec extern s3://niema-test/n100/r08/n100.r08.s006.tar.gz 35.7MiB
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): retrieving diagnostic output (try 0): started
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): retrieving diagnostic output (try 0): started
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): transferring output (try 0): started
2021/07/08 17:28:02 scheduler task 9329609c (flow 91cbb1d1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b5f0233c6e24d1dfc2b3f2686f0abf82d9cc036a54c252edc94278803541c4ea -> s3://niema-test/n100/r08/n100.r08.s011.tar.gz (35.8MiB) in 2s (17.9MiB/s) 
2021/07/08 17:28:02  <-  n100.r08.s011.Main.cp_out_file 91cbb1d1 ok   extern 0s 35.8MiB
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): retrieving result (try 0): started
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): retrieving result (try 0): started
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:02 scheduler task fd88e144 (flow 30072890): transferring output (try 0): started
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:02 scheduler task 82ea7c30 (flow 9a696a11): transferring output (try 0): started
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloading (try 0): started
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloading list<val<.=0fce250b 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloading val<.=2359c283 35.4MiB>
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloading val<.=cb486b83 35.4MiB>
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloaded list<val<.=0fce250b 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloaded val<.=2359c283 35.4MiB>
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloaded val<.=cb486b83 35.4MiB>
2021/07/08 17:28:02 scheduler task e3e2fbc0 (flow b7aad0a1): unloading (try 0): successful, next state: complete
2021/07/08 17:28:02  <-  n100.r08.s075.Main.out_file b7aad0a1 ok     exec 5m5s 35.7MiB
2021/07/08 17:28:02 n100.r08.s075.Main.out_file b7aad0a1 n100/r08/n100.r08.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0641e2129ac0b0d86a687c14ac4bead0f110f5e9095a4b126c95e94473a69be8
	sha256:b7aad0a12a351a1028263e392d69be1dc2287770e8d3f843fe2516ae01d8e3b3
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e3e2fbc00806796934b0ffb95c1d3be5559769ecb1516a49fdcd4a636134d729
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s075_output"
	    wget -O "n100.r08.s075_output/n100.r08.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s075_output/n100.r08.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s075_output/n100.r08.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s075_output/n100.r08.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s075_output/n100.r08.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s075_output/n100.r08.s075.reference.fas" "n100.r08.s075_output/n100.r08.s075.fq1.fastq" "n100.r08.s075_output/n100.r08.s075.fq2.fastq" | samtools view -bS - > "n100.r08.s075_output/n100.r08.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s075_output/n100.r08.s075.untrimmed.sorted.bam" "n100.r08.s075_output/n100.r08.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s075_output/n100.r08.s075.untrimmed.sorted.bam" -b "n100.r08.s075_output/n100.r08.s075.primers.bed" -p "n100.r08.s075_output/n100.r08.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" "n100.r08.s075_output/n100.r08.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s075_output/n100.r08.s075.reference.fas" "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" > "n100.r08.s075_output/n100.r08.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s075_output/n100.r08.s075.reference.fas" --call-indels "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" > "n100.r08.s075_output/n100.r08.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s075_output/n100.r08.s075.trimmed.sorted.bam" > "n100.r08.s075_output/n100.r08.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s075_output/n100.r08.s075.depth.txt" "n100.r08.s075_output/n100.r08.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s075_output/n100.r08.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s075_output/n100.r08.s075.reference.fas" | bcftools consensus -m "n100.r08.s075_output/n100.r08.s075.low_depth.tsv" tmp.vcf.gz > "n100.r08.s075_output/n100.r08.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0fce250bd48e0b9d0dfc592da0307fdad97f2aaae5cd55df8bd784a56496c957 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=130.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:28:02 scheduler task 17197293 (flow 0df5dce6): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s075.tar.gz resources {}
2021/07/08 17:28:02  ->  n100.r08.s075.Main.cp_out_file 0df5dce6 exec extern s3://niema-test/n100/r08/n100.r08.s075.tar.gz 35.7MiB
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloading (try 0): started
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloading list<val<.=55ab91f6 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloading val<.=69062588 35.4MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloading val<.=d50a9818 35.4MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloaded val<.=69062588 35.4MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloaded list<val<.=55ab91f6 35.7MiB> 35.7MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloaded val<.=d50a9818 35.4MiB>
2021/07/08 17:28:02 scheduler task 11cbb428 (flow 6e2216d0): unloading (try 0): successful, next state: complete
2021/07/08 17:28:02  <-  n100.r08.s004.Main.out_file 6e2216d0 ok     exec 5m5s 35.7MiB
2021/07/08 17:28:02 n100.r08.s004.Main.out_file 6e2216d0 n100/r08/n100.r08.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52d1ff8e0332ef496f1a09cea1c61aa2374b2472d9abb634aa917db268413cde
	sha256:6e2216d06fefecdafed3ced326e390ef93c557d6b9908da8c613f7bc60df3804
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11cbb4284819f61a418d15ac6733a275df46f8a8fb76dc8c12e44ac9fcd1dfa1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s004_output"
	    wget -O "n100.r08.s004_output/n100.r08.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s004_output/n100.r08.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s004_output/n100.r08.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s004_output/n100.r08.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s004_output/n100.r08.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s004_output/n100.r08.s004.reference.fas" "n100.r08.s004_output/n100.r08.s004.fq1.fastq" "n100.r08.s004_output/n100.r08.s004.fq2.fastq" | samtools view -bS - > "n100.r08.s004_output/n100.r08.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s004_output/n100.r08.s004.untrimmed.sorted.bam" "n100.r08.s004_output/n100.r08.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s004_output/n100.r08.s004.untrimmed.sorted.bam" -b "n100.r08.s004_output/n100.r08.s004.primers.bed" -p "n100.r08.s004_output/n100.r08.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" "n100.r08.s004_output/n100.r08.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s004_output/n100.r08.s004.reference.fas" "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" > "n100.r08.s004_output/n100.r08.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s004_output/n100.r08.s004.reference.fas" --call-indels "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" > "n100.r08.s004_output/n100.r08.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s004_output/n100.r08.s004.trimmed.sorted.bam" > "n100.r08.s004_output/n100.r08.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s004_output/n100.r08.s004.depth.txt" "n100.r08.s004_output/n100.r08.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s004_output/n100.r08.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s004_output/n100.r08.s004.reference.fas" | bcftools consensus -m "n100.r08.s004_output/n100.r08.s004.low_depth.tsv" tmp.vcf.gz > "n100.r08.s004_output/n100.r08.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:55ab91f6117c574818a2e73e3a408e2cefd9be406f50cc77a40dfbda096c814f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 17:28:02 scheduler task f42340ad (flow 32786d60): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s004.tar.gz resources {}
2021/07/08 17:28:02  ->  n100.r08.s004.Main.cp_out_file 32786d60 exec extern s3://niema-test/n100/r08/n100.r08.s004.tar.gz 35.7MiB
2021/07/08 17:28:02 scheduler task cea20010 (flow 038f2e70): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:dd45916266e0e7708190bd039ee1ca6e873012287de3521eba00bd38669dd53b -> s3://niema-test/n100/r08/n100.r08.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:02  <-  n100.r08.s006.Main.cp_out_file 038f2e70 ok   extern 0s 35.7MiB
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:03 scheduler task 068f1c4e (flow 4d7e62f5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:997d85ead7e49b462a74ba4c6674af5bec32478a7e7fa0330b17c39b9673075c -> s3://niema-test/n100/r08/n100.r08.s022.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:03  <-  n100.r08.s022.Main.cp_out_file 4d7e62f5 ok   extern 0s 35.7MiB
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloading (try 0): started
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloading list<val<.=eea858ff 35.8MiB> 35.8MiB>
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloading val<.=94af5bac 35.4MiB>
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloading val<.=15341e5b 35.4MiB>
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloaded val<.=15341e5b 35.4MiB>
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloaded val<.=94af5bac 35.4MiB>
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloaded list<val<.=eea858ff 35.8MiB> 35.8MiB>
2021/07/08 17:28:03 scheduler task fd88e144 (flow 30072890): unloading (try 0): successful, next state: complete
2021/07/08 17:28:03  <-  n100.r08.s030.Main.out_file 30072890 ok     exec 5m5s 35.8MiB
2021/07/08 17:28:03 n100.r08.s030.Main.out_file 30072890 n100/r08/n100.r08.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dc65c189fa29afacca78983aca7c8331a8e0aae1c4868b9b6421ecbb0741d8fa
	sha256:30072890b447ab5c3b2092c749257a877c6f6ab32f7a8776d53b6713a2139f2e
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd88e14495a4727f554d9b33648b41b6a67a55381ae947753c2e7854c01d2353
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s030_output"
	    wget -O "n100.r08.s030_output/n100.r08.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s030_output/n100.r08.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s030_output/n100.r08.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s030_output/n100.r08.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s030_output/n100.r08.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s030_output/n100.r08.s030.reference.fas" "n100.r08.s030_output/n100.r08.s030.fq1.fastq" "n100.r08.s030_output/n100.r08.s030.fq2.fastq" | samtools view -bS - > "n100.r08.s030_output/n100.r08.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s030_output/n100.r08.s030.untrimmed.sorted.bam" "n100.r08.s030_output/n100.r08.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s030_output/n100.r08.s030.untrimmed.sorted.bam" -b "n100.r08.s030_output/n100.r08.s030.primers.bed" -p "n100.r08.s030_output/n100.r08.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" "n100.r08.s030_output/n100.r08.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s030_output/n100.r08.s030.reference.fas" "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" > "n100.r08.s030_output/n100.r08.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s030_output/n100.r08.s030.reference.fas" --call-indels "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" > "n100.r08.s030_output/n100.r08.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s030_output/n100.r08.s030.trimmed.sorted.bam" > "n100.r08.s030_output/n100.r08.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s030_output/n100.r08.s030.depth.txt" "n100.r08.s030_output/n100.r08.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s030_output/n100.r08.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s030_output/n100.r08.s030.reference.fas" | bcftools consensus -m "n100.r08.s030_output/n100.r08.s030.low_depth.tsv" tmp.vcf.gz > "n100.r08.s030_output/n100.r08.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eea858ff93994ff9011397719757547f4a0f2be439750c5dc371f875e5e09a6d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=129.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:03 scheduler task a417345d (flow 6f3889f5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s030.tar.gz resources {}
2021/07/08 17:28:03  ->  n100.r08.s030.Main.cp_out_file 6f3889f5 exec extern s3://niema-test/n100/r08/n100.r08.s030.tar.gz 35.8MiB
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloading (try 0): started
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloading list<val<.=ce37f9e9 35.8MiB> 35.8MiB>
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloading val<.=2b90497e 35.4MiB>
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloading val<.=655569f2 35.4MiB>
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloaded list<val<.=ce37f9e9 35.8MiB> 35.8MiB>
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloaded val<.=655569f2 35.4MiB>
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloaded val<.=2b90497e 35.4MiB>
2021/07/08 17:28:03 scheduler task 82ea7c30 (flow 9a696a11): unloading (try 0): successful, next state: complete
2021/07/08 17:28:03  <-  n100.r08.s091.Main.out_file 9a696a11 ok     exec 5m5s 35.8MiB
2021/07/08 17:28:03 n100.r08.s091.Main.out_file 9a696a11 n100/r08/n100.r08.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9e37fe6fd1805caa555f68f723baae072c919edb5c86d796e5bb8ac3fb853269
	sha256:9a696a11dc6163013eee6f742edc7b180e91991c30ebbe21a154359ecba0f82c
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/82ea7c302c98664aa155db187df11661b1fcf32791072a7f7b93ea199426c417
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s091_output"
	    wget -O "n100.r08.s091_output/n100.r08.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s091_output/n100.r08.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s091_output/n100.r08.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s091_output/n100.r08.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s091_output/n100.r08.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s091_output/n100.r08.s091.reference.fas" "n100.r08.s091_output/n100.r08.s091.fq1.fastq" "n100.r08.s091_output/n100.r08.s091.fq2.fastq" | samtools view -bS - > "n100.r08.s091_output/n100.r08.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s091_output/n100.r08.s091.untrimmed.sorted.bam" "n100.r08.s091_output/n100.r08.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s091_output/n100.r08.s091.untrimmed.sorted.bam" -b "n100.r08.s091_output/n100.r08.s091.primers.bed" -p "n100.r08.s091_output/n100.r08.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" "n100.r08.s091_output/n100.r08.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s091_output/n100.r08.s091.reference.fas" "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" > "n100.r08.s091_output/n100.r08.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s091_output/n100.r08.s091.reference.fas" --call-indels "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" > "n100.r08.s091_output/n100.r08.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s091_output/n100.r08.s091.trimmed.sorted.bam" > "n100.r08.s091_output/n100.r08.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s091_output/n100.r08.s091.depth.txt" "n100.r08.s091_output/n100.r08.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s091_output/n100.r08.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s091_output/n100.r08.s091.reference.fas" | bcftools consensus -m "n100.r08.s091_output/n100.r08.s091.low_depth.tsv" tmp.vcf.gz > "n100.r08.s091_output/n100.r08.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ce37f9e9ba78d2bf3c25c49023cdb7c84f964740a04fbd56a3a9154c76d2fb3b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=130.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 17:28:03 scheduler task e783efd8 (flow 7b40b768): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s091.tar.gz resources {}
2021/07/08 17:28:03  ->  n100.r08.s091.Main.cp_out_file 7b40b768 exec extern s3://niema-test/n100/r08/n100.r08.s091.tar.gz 35.8MiB
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): promoting objects (try 0): started
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): retrieving diagnostic output (try 0): started
2021/07/08 17:28:03 scheduler task 17197293 (flow 0df5dce6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0fce250bd48e0b9d0dfc592da0307fdad97f2aaae5cd55df8bd784a56496c957 -> s3://niema-test/n100/r08/n100.r08.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:03  <-  n100.r08.s075.Main.cp_out_file 0df5dce6 ok   extern 0s 35.7MiB
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): promoting objects (try 0): started
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): retrieving result (try 0): started
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): retrieving diagnostic output (try 0): started
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:03 scheduler task be960135 (flow 20c58820): transferring output (try 0): started
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): retrieving result (try 0): started
2021/07/08 17:28:03 scheduler task f42340ad (flow 32786d60): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:55ab91f6117c574818a2e73e3a408e2cefd9be406f50cc77a40dfbda096c814f -> s3://niema-test/n100/r08/n100.r08.s004.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:03  <-  n100.r08.s004.Main.cp_out_file 32786d60 ok   extern 0s 35.7MiB
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:03 scheduler task cb5519bf (flow b7426dfd): transferring output (try 0): started
2021/07/08 17:28:03 scheduler task a417345d (flow 6f3889f5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eea858ff93994ff9011397719757547f4a0f2be439750c5dc371f875e5e09a6d -> s3://niema-test/n100/r08/n100.r08.s030.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:03  <-  n100.r08.s030.Main.cp_out_file 6f3889f5 ok   extern 0s 35.8MiB
2021/07/08 17:28:03 scheduler task e783efd8 (flow 7b40b768): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ce37f9e9ba78d2bf3c25c49023cdb7c84f964740a04fbd56a3a9154c76d2fb3b -> s3://niema-test/n100/r08/n100.r08.s091.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:03  <-  n100.r08.s091.Main.cp_out_file 7b40b768 ok   extern 0s 35.8MiB
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): promoting objects (try 0): started
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): promoting objects (try 0): started
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloading (try 0): started
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloading list<val<.=c7fe6e73 35.7MiB> 35.7MiB>
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloading val<.=23f19e96 35.4MiB>
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloading val<.=89e80f9f 35.4MiB>
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): promoting objects (try 0): started
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): promoting objects (try 0): started
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): retrieving diagnostic output (try 0): started
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloading (try 0): started
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloading list<val<.=9c89b931 35.8MiB> 35.8MiB>
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloading val<.=f2a10fb6 35.4MiB>
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloading val<.=a4e0dc6c 35.4MiB>
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): retrieving diagnostic output (try 0): started
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloaded list<val<.=c7fe6e73 35.7MiB> 35.7MiB>
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloaded val<.=23f19e96 35.4MiB>
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloaded val<.=89e80f9f 35.4MiB>
2021/07/08 17:28:04 scheduler task be960135 (flow 20c58820): unloading (try 0): successful, next state: complete
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): retrieving diagnostic output (try 0): started
2021/07/08 17:28:04  <-  n100.r08.s046.Main.out_file 20c58820 ok     exec 5m7s 35.7MiB
2021/07/08 17:28:04 n100.r08.s046.Main.out_file 20c58820 n100/r08/n100.r08.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b0ec0a537418aaf9ed6014b4eb74b36a9bde1751af24f7a06a0f583d12d393bc
	sha256:20c58820a432cd00deb496e0ec45f083b1d86d08c1d9e25558e544d22146e1be
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/be9601357aa9c43db47462ac4ae52a84d24f5c1079d4340cc869ea537c8d3a11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s046_output"
	    wget -O "n100.r08.s046_output/n100.r08.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s046_output/n100.r08.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s046_output/n100.r08.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s046_output/n100.r08.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s046_output/n100.r08.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s046_output/n100.r08.s046.reference.fas" "n100.r08.s046_output/n100.r08.s046.fq1.fastq" "n100.r08.s046_output/n100.r08.s046.fq2.fastq" | samtools view -bS - > "n100.r08.s046_output/n100.r08.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s046_output/n100.r08.s046.untrimmed.sorted.bam" "n100.r08.s046_output/n100.r08.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s046_output/n100.r08.s046.untrimmed.sorted.bam" -b "n100.r08.s046_output/n100.r08.s046.primers.bed" -p "n100.r08.s046_output/n100.r08.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" "n100.r08.s046_output/n100.r08.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s046_output/n100.r08.s046.reference.fas" "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" > "n100.r08.s046_output/n100.r08.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s046_output/n100.r08.s046.reference.fas" --call-indels "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" > "n100.r08.s046_output/n100.r08.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s046_output/n100.r08.s046.trimmed.sorted.bam" > "n100.r08.s046_output/n100.r08.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s046_output/n100.r08.s046.depth.txt" "n100.r08.s046_output/n100.r08.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s046_output/n100.r08.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s046_output/n100.r08.s046.reference.fas" | bcftools consensus -m "n100.r08.s046_output/n100.r08.s046.low_depth.tsv" tmp.vcf.gz > "n100.r08.s046_output/n100.r08.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c7fe6e73c2ee2677335265badb5d6130017b2cd70e82667138ea8cca23ce058c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=131.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:28:04 scheduler task 56ca08b6 (flow 366fc7f5): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s046.tar.gz resources {}
2021/07/08 17:28:04  ->  n100.r08.s046.Main.cp_out_file 366fc7f5 exec extern s3://niema-test/n100/r08/n100.r08.s046.tar.gz 35.7MiB
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): retrieving diagnostic output (try 0): started
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloaded list<val<.=9c89b931 35.8MiB> 35.8MiB>
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloaded val<.=a4e0dc6c 35.4MiB>
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloaded val<.=f2a10fb6 35.4MiB>
2021/07/08 17:28:04 scheduler task cb5519bf (flow b7426dfd): unloading (try 0): successful, next state: complete
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:04  <-  n100.r08.s032.Main.out_file b7426dfd ok     exec 5m7s 35.8MiB
2021/07/08 17:28:04 n100.r08.s032.Main.out_file b7426dfd n100/r08/n100.r08.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6ea9208509337acdfc45354df1d67f5e4143ec3b7f38b2f3ba4141cfb074f46f
	sha256:b7426dfd8ceb872d2894b2d822faf39b1aaae57f5a674108388c1e616151977d
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cb5519bf0bc35689b9da2512970d19a18fedbda70a8cb97f95b84086fccfb80d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s032_output"
	    wget -O "n100.r08.s032_output/n100.r08.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s032_output/n100.r08.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s032_output/n100.r08.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s032_output/n100.r08.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s032_output/n100.r08.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s032_output/n100.r08.s032.reference.fas" "n100.r08.s032_output/n100.r08.s032.fq1.fastq" "n100.r08.s032_output/n100.r08.s032.fq2.fastq" | samtools view -bS - > "n100.r08.s032_output/n100.r08.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s032_output/n100.r08.s032.untrimmed.sorted.bam" "n100.r08.s032_output/n100.r08.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s032_output/n100.r08.s032.untrimmed.sorted.bam" -b "n100.r08.s032_output/n100.r08.s032.primers.bed" -p "n100.r08.s032_output/n100.r08.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" "n100.r08.s032_output/n100.r08.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s032_output/n100.r08.s032.reference.fas" "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" > "n100.r08.s032_output/n100.r08.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s032_output/n100.r08.s032.reference.fas" --call-indels "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" > "n100.r08.s032_output/n100.r08.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s032_output/n100.r08.s032.trimmed.sorted.bam" > "n100.r08.s032_output/n100.r08.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s032_output/n100.r08.s032.depth.txt" "n100.r08.s032_output/n100.r08.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s032_output/n100.r08.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s032_output/n100.r08.s032.reference.fas" | bcftools consensus -m "n100.r08.s032_output/n100.r08.s032.low_depth.tsv" tmp.vcf.gz > "n100.r08.s032_output/n100.r08.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c89b9310c68444adab306ce0cf00b87982fee8cc54c2fc31709d2b4849eacdc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=131.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=520B max=2.0KiB
2021/07/08 17:28:04 scheduler task 440bb422 (flow ecd012af): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s032.tar.gz resources {}
2021/07/08 17:28:04  ->  n100.r08.s032.Main.cp_out_file ecd012af exec extern s3://niema-test/n100/r08/n100.r08.s032.tar.gz 35.8MiB
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): retrieving result (try 0): started
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): retrieving result (try 0): started
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): retrieving result (try 0): started
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:04 scheduler task 42d18dc0 (flow 30cb4af0): transferring output (try 0): started
2021/07/08 17:28:04 scheduler task f62422fc (flow 7c1d2985): transferring output (try 0): started
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): retrieving result (try 0): started
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): promoting objects (try 0): started
2021/07/08 17:28:04 scheduler task 7ba99413 (flow 45b5a090): transferring output (try 0): started
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:04 scheduler task 2c812c39 (flow 0d5ce47b): transferring output (try 0): started
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): retrieving diagnostic output (try 0): started
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): retrieving result (try 0): started
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:28:04 scheduler task 21ae2bff (flow 7bb8abed): transferring output (try 0): started
2021/07/08 17:28:05 scheduler task 56ca08b6 (flow 366fc7f5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c7fe6e73c2ee2677335265badb5d6130017b2cd70e82667138ea8cca23ce058c -> s3://niema-test/n100/r08/n100.r08.s046.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:05  <-  n100.r08.s046.Main.cp_out_file 366fc7f5 ok   extern 0s 35.7MiB
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloading (try 0): started
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloading list<val<.=d0154310 35.8MiB> 35.8MiB>
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloading val<.=2c092c89 35.4MiB>
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloading val<.=58941e05 35.4MiB>
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloading (try 0): started
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloading list<val<.=ffa20b1b 35.7MiB> 35.7MiB>
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloading val<.=2d661933 35.4MiB>
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloading val<.=a8f0f227 35.4MiB>
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:05 scheduler task 440bb422 (flow ecd012af): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c89b9310c68444adab306ce0cf00b87982fee8cc54c2fc31709d2b4849eacdc -> s3://niema-test/n100/r08/n100.r08.s032.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:05  <-  n100.r08.s032.Main.cp_out_file ecd012af ok   extern 0s 35.8MiB
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloading (try 0): started
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloading list<val<.=46fde2b1 35.8MiB> 35.8MiB>
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloading val<.=666229fa 35.4MiB>
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloading val<.=e56d5033 35.4MiB>
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloaded val<.=58941e05 35.4MiB>
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloaded list<val<.=d0154310 35.8MiB> 35.8MiB>
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloaded val<.=2c092c89 35.4MiB>
2021/07/08 17:28:05 scheduler task 42d18dc0 (flow 30cb4af0): unloading (try 0): successful, next state: complete
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloaded val<.=2d661933 35.4MiB>
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloaded list<val<.=ffa20b1b 35.7MiB> 35.7MiB>
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloaded val<.=a8f0f227 35.4MiB>
2021/07/08 17:28:05 scheduler task f62422fc (flow 7c1d2985): unloading (try 0): successful, next state: complete
2021/07/08 17:28:05  <-  n100.r08.s020.Main.out_file 30cb4af0 ok     exec 5m7s 35.8MiB
2021/07/08 17:28:05 n100.r08.s020.Main.out_file 30cb4af0 n100/r08/n100.r08.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1eae554b9998573348c5a64ba4ad3ac29922e619f8683cbe29e0ffe0bb59d350
	sha256:30cb4af0ffdb3cd5a7f32aea1df792451e19881b1664e9216c778c45d410251a
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/42d18dc0f67d0cdb672a8821dc8aafdbc0c7a47df1fff70f07e154a599291b4b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s020_output"
	    wget -O "n100.r08.s020_output/n100.r08.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s020_output/n100.r08.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s020_output/n100.r08.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s020_output/n100.r08.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s020_output/n100.r08.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s020_output/n100.r08.s020.reference.fas" "n100.r08.s020_output/n100.r08.s020.fq1.fastq" "n100.r08.s020_output/n100.r08.s020.fq2.fastq" | samtools view -bS - > "n100.r08.s020_output/n100.r08.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s020_output/n100.r08.s020.untrimmed.sorted.bam" "n100.r08.s020_output/n100.r08.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s020_output/n100.r08.s020.untrimmed.sorted.bam" -b "n100.r08.s020_output/n100.r08.s020.primers.bed" -p "n100.r08.s020_output/n100.r08.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" "n100.r08.s020_output/n100.r08.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s020_output/n100.r08.s020.reference.fas" "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" > "n100.r08.s020_output/n100.r08.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s020_output/n100.r08.s020.reference.fas" --call-indels "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" > "n100.r08.s020_output/n100.r08.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s020_output/n100.r08.s020.trimmed.sorted.bam" > "n100.r08.s020_output/n100.r08.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s020_output/n100.r08.s020.depth.txt" "n100.r08.s020_output/n100.r08.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s020_output/n100.r08.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s020_output/n100.r08.s020.reference.fas" | bcftools consensus -m "n100.r08.s020_output/n100.r08.s020.low_depth.tsv" tmp.vcf.gz > "n100.r08.s020_output/n100.r08.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d01543108a555f414bc641deb34d3b4229408050b054b19feb43b277b8da53a3 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=131.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:28:05 scheduler task f965cb49 (flow 07865dc3): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s020.tar.gz resources {}
2021/07/08 17:28:05  ->  n100.r08.s020.Main.cp_out_file 07865dc3 exec extern s3://niema-test/n100/r08/n100.r08.s020.tar.gz 35.8MiB
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloading (try 0): started
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloading list<val<.=6027320d 35.8MiB> 35.8MiB>
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloading val<.=1a38a400 35.4MiB>
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloading val<.=96d633e6 35.4MiB>
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloaded list<val<.=46fde2b1 35.8MiB> 35.8MiB>
2021/07/08 17:28:05  <-  n100.r08.s008.Main.out_file 7c1d2985 ok     exec 5m7s 35.7MiB
2021/07/08 17:28:05 n100.r08.s008.Main.out_file 7c1d2985 n100/r08/n100.r08.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f9289abf0fdbb3bd81400de70ab1277beeba2f7be7d6667ceda9c1bb96db8d8
	sha256:7c1d2985cc20bf433d0650147f0aa48d3b0a8a89105c3118e6fa044aa7af46df
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f62422fc3193a72a6166ce83bbb2e6d01b3379d624a729c110c0c52f1db32be2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s008_output"
	    wget -O "n100.r08.s008_output/n100.r08.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s008_output/n100.r08.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s008_output/n100.r08.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s008_output/n100.r08.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s008_output/n100.r08.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s008_output/n100.r08.s008.reference.fas" "n100.r08.s008_output/n100.r08.s008.fq1.fastq" "n100.r08.s008_output/n100.r08.s008.fq2.fastq" | samtools view -bS - > "n100.r08.s008_output/n100.r08.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s008_output/n100.r08.s008.untrimmed.sorted.bam" "n100.r08.s008_output/n100.r08.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s008_output/n100.r08.s008.untrimmed.sorted.bam" -b "n100.r08.s008_output/n100.r08.s008.primers.bed" -p "n100.r08.s008_output/n100.r08.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" "n100.r08.s008_output/n100.r08.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s008_output/n100.r08.s008.reference.fas" "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" > "n100.r08.s008_output/n100.r08.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s008_output/n100.r08.s008.reference.fas" --call-indels "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" > "n100.r08.s008_output/n100.r08.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s008_output/n100.r08.s008.trimmed.sorted.bam" > "n100.r08.s008_output/n100.r08.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s008_output/n100.r08.s008.depth.txt" "n100.r08.s008_output/n100.r08.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s008_output/n100.r08.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s008_output/n100.r08.s008.reference.fas" | bcftools consensus -m "n100.r08.s008_output/n100.r08.s008.low_depth.tsv" tmp.vcf.gz > "n100.r08.s008_output/n100.r08.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ffa20b1ba65cdd57b5c5188599b366e81836c7576d5f387142d5821b862c6256 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:05 scheduler task ea2924a7 (flow 139d3837): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s008.tar.gz resources {}
2021/07/08 17:28:05  ->  n100.r08.s008.Main.cp_out_file 139d3837 exec extern s3://niema-test/n100/r08/n100.r08.s008.tar.gz 35.7MiB
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloaded val<.=666229fa 35.4MiB>
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloaded val<.=e56d5033 35.4MiB>
2021/07/08 17:28:05 scheduler task 2c812c39 (flow 0d5ce47b): unloading (try 0): successful, next state: complete
2021/07/08 17:28:05  <-  n100.r08.s049.Main.out_file 0d5ce47b ok     exec 5m8s 35.8MiB
2021/07/08 17:28:05 n100.r08.s049.Main.out_file 0d5ce47b n100/r08/n100.r08.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:341cb9df4244aed1e2089e73e79967161fe12ce29f4dbdd4eb9794d15465c2d5
	sha256:0d5ce47b3458d4d815c854a9aa49b1083495d09437315015409e17f51ea44ff9
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c812c391afdb73613ceb18c0d34a5c1852ec5dfab2879a3d0de40f27872bbcd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s049_output"
	    wget -O "n100.r08.s049_output/n100.r08.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s049_output/n100.r08.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s049_output/n100.r08.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s049_output/n100.r08.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s049_output/n100.r08.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s049_output/n100.r08.s049.reference.fas" "n100.r08.s049_output/n100.r08.s049.fq1.fastq" "n100.r08.s049_output/n100.r08.s049.fq2.fastq" | samtools view -bS - > "n100.r08.s049_output/n100.r08.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s049_output/n100.r08.s049.untrimmed.sorted.bam" "n100.r08.s049_output/n100.r08.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s049_output/n100.r08.s049.untrimmed.sorted.bam" -b "n100.r08.s049_output/n100.r08.s049.primers.bed" -p "n100.r08.s049_output/n100.r08.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" "n100.r08.s049_output/n100.r08.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s049_output/n100.r08.s049.reference.fas" "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" > "n100.r08.s049_output/n100.r08.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s049_output/n100.r08.s049.reference.fas" --call-indels "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" > "n100.r08.s049_output/n100.r08.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s049_output/n100.r08.s049.trimmed.sorted.bam" > "n100.r08.s049_output/n100.r08.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s049_output/n100.r08.s049.depth.txt" "n100.r08.s049_output/n100.r08.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s049_output/n100.r08.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s049_output/n100.r08.s049.reference.fas" | bcftools consensus -m "n100.r08.s049_output/n100.r08.s049.low_depth.tsv" tmp.vcf.gz > "n100.r08.s049_output/n100.r08.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:46fde2b16deaed99b384851274e521f3193458643d99cf42a8ddc2d7278c5dcd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=129.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:28:05 scheduler task 0bad9c5c (flow f1390cc7): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s049.tar.gz resources {}
2021/07/08 17:28:05  ->  n100.r08.s049.Main.cp_out_file f1390cc7 exec extern s3://niema-test/n100/r08/n100.r08.s049.tar.gz 35.8MiB
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloaded list<val<.=6027320d 35.8MiB> 35.8MiB>
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloaded val<.=1a38a400 35.4MiB>
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloaded val<.=96d633e6 35.4MiB>
2021/07/08 17:28:05 scheduler task 7ba99413 (flow 45b5a090): unloading (try 0): successful, next state: complete
2021/07/08 17:28:05  <-  n100.r08.s086.Main.out_file 45b5a090 ok     exec 5m7s 35.8MiB
2021/07/08 17:28:05 n100.r08.s086.Main.out_file 45b5a090 n100/r08/n100.r08.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ad6a5a982548ff7e5f0007c8b6152be93b578f1193e8625dbfc972c7362ddec
	sha256:45b5a09054e22472469492db4c4adbdbce35a0ca1c30770ce390b0a169b2e4c7
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ba99413c535d4755bc344b3d0a05325f02cc3f96260fe828a1a387588095115
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s086_output"
	    wget -O "n100.r08.s086_output/n100.r08.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s086_output/n100.r08.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s086_output/n100.r08.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s086_output/n100.r08.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s086_output/n100.r08.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s086_output/n100.r08.s086.reference.fas" "n100.r08.s086_output/n100.r08.s086.fq1.fastq" "n100.r08.s086_output/n100.r08.s086.fq2.fastq" | samtools view -bS - > "n100.r08.s086_output/n100.r08.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s086_output/n100.r08.s086.untrimmed.sorted.bam" "n100.r08.s086_output/n100.r08.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s086_output/n100.r08.s086.untrimmed.sorted.bam" -b "n100.r08.s086_output/n100.r08.s086.primers.bed" -p "n100.r08.s086_output/n100.r08.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" "n100.r08.s086_output/n100.r08.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s086_output/n100.r08.s086.reference.fas" "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" > "n100.r08.s086_output/n100.r08.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s086_output/n100.r08.s086.reference.fas" --call-indels "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" > "n100.r08.s086_output/n100.r08.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s086_output/n100.r08.s086.trimmed.sorted.bam" > "n100.r08.s086_output/n100.r08.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s086_output/n100.r08.s086.depth.txt" "n100.r08.s086_output/n100.r08.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s086_output/n100.r08.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s086_output/n100.r08.s086.reference.fas" | bcftools consensus -m "n100.r08.s086_output/n100.r08.s086.low_depth.tsv" tmp.vcf.gz > "n100.r08.s086_output/n100.r08.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6027320dd59cc07407f850d9df7589127bcaf0c8c2675551b166c985ab007294 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=128.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:28:05 scheduler task 69fc8ab2 (flow a0cd1f1b): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s086.tar.gz resources {}
2021/07/08 17:28:05  ->  n100.r08.s086.Main.cp_out_file a0cd1f1b exec extern s3://niema-test/n100/r08/n100.r08.s086.tar.gz 35.8MiB
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): transferring output (try 0): successful, next state: unloading
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloading (try 0): started
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloading list<val<.=c10b704f 35.7MiB> 35.7MiB>
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloading val<.=17d99b6c 35.4MiB>
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloading val<.=89c64f07 35.4MiB>
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloaded val<.=89c64f07 35.4MiB>
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloaded list<val<.=c10b704f 35.7MiB> 35.7MiB>
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloaded val<.=17d99b6c 35.4MiB>
2021/07/08 17:28:05 scheduler task 21ae2bff (flow 7bb8abed): unloading (try 0): successful, next state: complete
2021/07/08 17:28:05  <-  n100.r08.s044.Main.out_file 7bb8abed ok     exec 5m8s 35.7MiB
2021/07/08 17:28:05 n100.r08.s044.Main.out_file 7bb8abed n100/r08/n100.r08.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0f077c9002992ab08efff43f8678a19242dc104817657f2a459686b511eb1bb8
	sha256:7bb8abed18207b80bbadb4ab6227bde3d164ae5a058b4944a2fb03c075944e2b
	ec2-13-58-229-231.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21ae2bffeb12a01abd8643a9beb0fe2b741e0f456d1a01d452b170ffc488ac20
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r08.s044_output"
	    wget -O "n100.r08.s044_output/n100.r08.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r08.s044_output/n100.r08.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r08.s044_output/n100.r08.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r08.s044_output/n100.r08.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r08.s044_output/n100.r08.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r08.s044_output/n100.r08.s044.reference.fas" "n100.r08.s044_output/n100.r08.s044.fq1.fastq" "n100.r08.s044_output/n100.r08.s044.fq2.fastq" | samtools view -bS - > "n100.r08.s044_output/n100.r08.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s044_output/n100.r08.s044.untrimmed.sorted.bam" "n100.r08.s044_output/n100.r08.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r08.s044_output/n100.r08.s044.untrimmed.sorted.bam" -b "n100.r08.s044_output/n100.r08.s044.primers.bed" -p "n100.r08.s044_output/n100.r08.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" "n100.r08.s044_output/n100.r08.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r08.s044_output/n100.r08.s044.reference.fas" "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" > "n100.r08.s044_output/n100.r08.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r08.s044_output/n100.r08.s044.reference.fas" --call-indels "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" > "n100.r08.s044_output/n100.r08.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r08.s044_output/n100.r08.s044.trimmed.sorted.bam" > "n100.r08.s044_output/n100.r08.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r08.s044_output/n100.r08.s044.depth.txt" "n100.r08.s044_output/n100.r08.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r08.s044_output/n100.r08.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r08.s044_output/n100.r08.s044.reference.fas" | bcftools consensus -m "n100.r08.s044_output/n100.r08.s044.low_depth.tsv" tmp.vcf.gz > "n100.r08.s044_output/n100.r08.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r08.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c10b704f58d2969943914b9b39ab9bf09ec627755dbba3044397f8f432a09407 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=131.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:28:05 scheduler task fa1c4298 (flow 4ee03bc9): submitted with execconfig extern url s3://niema-test/n100/r08/n100.r08.s044.tar.gz resources {}
2021/07/08 17:28:05  ->  n100.r08.s044.Main.cp_out_file 4ee03bc9 exec extern s3://niema-test/n100/r08/n100.r08.s044.tar.gz 35.7MiB
2021/07/08 17:28:06 scheduler task f965cb49 (flow 07865dc3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d01543108a555f414bc641deb34d3b4229408050b054b19feb43b277b8da53a3 -> s3://niema-test/n100/r08/n100.r08.s020.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:06  <-  n100.r08.s020.Main.cp_out_file 07865dc3 ok   extern 0s 35.8MiB
2021/07/08 17:28:06 scheduler task ea2924a7 (flow 139d3837): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ffa20b1ba65cdd57b5c5188599b366e81836c7576d5f387142d5821b862c6256 -> s3://niema-test/n100/r08/n100.r08.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:06  <-  n100.r08.s008.Main.cp_out_file 139d3837 ok   extern 0s 35.7MiB
2021/07/08 17:28:06 scheduler task 0bad9c5c (flow f1390cc7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:46fde2b16deaed99b384851274e521f3193458643d99cf42a8ddc2d7278c5dcd -> s3://niema-test/n100/r08/n100.r08.s049.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:06  <-  n100.r08.s049.Main.cp_out_file f1390cc7 ok   extern 0s 35.8MiB
2021/07/08 17:28:06 scheduler task 69fc8ab2 (flow a0cd1f1b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6027320dd59cc07407f850d9df7589127bcaf0c8c2675551b166c985ab007294 -> s3://niema-test/n100/r08/n100.r08.s086.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:28:06  <-  n100.r08.s086.Main.cp_out_file a0cd1f1b ok   extern 0s 35.8MiB
2021/07/08 17:28:06 scheduler task fa1c4298 (flow 4ee03bc9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c10b704f58d2969943914b9b39ab9bf09ec627755dbba3044397f8f432a09407 -> s3://niema-test/n100/r08/n100.r08.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:28:06  <-  n100.r08.s044.Main.cp_out_file 4ee03bc9 ok   extern 0s 35.7MiB
2021/07/08 17:28:06 total n=400 time=7m38s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r08.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s001.Main.fq1         1   0      0B                                                      
	n100.r08.s001.Main.fq2         1   0      0B                                                      
	n100.r08.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s002.Main.fq1         1   0      0B                                                      
	n100.r08.s002.Main.fq2         1   0      0B                                                      
	n100.r08.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s003.Main.fq1         1   0      0B                                                      
	n100.r08.s003.Main.fq2         1   0      0B                                                      
	n100.r08.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s004.Main.fq1         1   0      0B                                                      
	n100.r08.s004.Main.fq2         1   0      0B                                                      
	n100.r08.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s005.Main.fq1         1   0      0B                                                      
	n100.r08.s005.Main.fq2         1   0      0B                                                      
	n100.r08.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s006.Main.fq1         1   0      0B                                                      
	n100.r08.s006.Main.fq2         1   0      0B                                                      
	n100.r08.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s007.Main.fq1         1   0      0B                                                      
	n100.r08.s007.Main.fq2         1   0      0B                                                      
	n100.r08.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s008.Main.fq1         1   0      0B                                                      
	n100.r08.s008.Main.fq2         1   0      0B                                                      
	n100.r08.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s009.Main.fq1         1   0      0B                                                      
	n100.r08.s009.Main.fq2         1   0      0B                                                      
	n100.r08.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s010.Main.fq1         1   0      0B                                                      
	n100.r08.s010.Main.fq2         1   0      0B                                                      
	n100.r08.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s011.Main.fq1         1   0      0B                                                      
	n100.r08.s011.Main.fq2         1   0      0B                                                      
	n100.r08.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s012.Main.fq1         1   0      0B                                                      
	n100.r08.s012.Main.fq2         1   0      0B                                                      
	n100.r08.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s013.Main.fq1         1   0      0B                                                      
	n100.r08.s013.Main.fq2         1   0      0B                                                      
	n100.r08.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s014.Main.fq1         1   0      0B                                                      
	n100.r08.s014.Main.fq2         1   0      0B                                                      
	n100.r08.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s015.Main.fq1         1   0      0B                                                      
	n100.r08.s015.Main.fq2         1   0      0B                                                      
	n100.r08.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s016.Main.fq1         1   0      0B                                                      
	n100.r08.s016.Main.fq2         1   0      0B                                                      
	n100.r08.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s017.Main.fq1         1   0      0B                                                      
	n100.r08.s017.Main.fq2         1   0      0B                                                      
	n100.r08.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s018.Main.fq1         1   0      0B                                                      
	n100.r08.s018.Main.fq2         1   0      0B                                                      
	n100.r08.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s019.Main.fq1         1   0      0B                                                      
	n100.r08.s019.Main.fq2         1   0      0B                                                      
	n100.r08.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s020.Main.fq1         1   0      0B                                                      
	n100.r08.s020.Main.fq2         1   0      0B                                                      
	n100.r08.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s021.Main.fq1         1   0      0B                                                      
	n100.r08.s021.Main.fq2         1   0      0B                                                      
	n100.r08.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s022.Main.fq1         1   0      0B                                                      
	n100.r08.s022.Main.fq2         1   0      0B                                                      
	n100.r08.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s023.Main.fq1         1   0      0B                                                      
	n100.r08.s023.Main.fq2         1   0      0B                                                      
	n100.r08.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s024.Main.fq1         1   0      0B                                                      
	n100.r08.s024.Main.fq2         1   0      0B                                                      
	n100.r08.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s025.Main.fq1         1   0      0B                                                      
	n100.r08.s025.Main.fq2         1   0      0B                                                      
	n100.r08.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s026.Main.fq1         1   0      0B                                                      
	n100.r08.s026.Main.fq2         1   0      0B                                                      
	n100.r08.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s027.Main.fq1         1   0      0B                                                      
	n100.r08.s027.Main.fq2         1   0      0B                                                      
	n100.r08.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s028.Main.fq1         1   0      0B                                                      
	n100.r08.s028.Main.fq2         1   0      0B                                                      
	n100.r08.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s029.Main.fq1         1   0      0B                                                      
	n100.r08.s029.Main.fq2         1   0      0B                                                      
	n100.r08.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s030.Main.fq1         1   0      0B                                                      
	n100.r08.s030.Main.fq2         1   0      0B                                                      
	n100.r08.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s031.Main.fq1         1   0      0B                                                      
	n100.r08.s031.Main.fq2         1   0      0B                                                      
	n100.r08.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s032.Main.fq1         1   0      0B                                                      
	n100.r08.s032.Main.fq2         1   0      0B                                                      
	n100.r08.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s033.Main.fq1         1   0      0B                                                      
	n100.r08.s033.Main.fq2         1   0      0B                                                      
	n100.r08.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s034.Main.fq1         1   0      0B                                                      
	n100.r08.s034.Main.fq2         1   0      0B                                                      
	n100.r08.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s035.Main.fq1         1   0      0B                                                      
	n100.r08.s035.Main.fq2         1   0      0B                                                      
	n100.r08.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s036.Main.fq1         1   0      0B                                                      
	n100.r08.s036.Main.fq2         1   0      0B                                                      
	n100.r08.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s037.Main.fq1         1   0      0B                                                      
	n100.r08.s037.Main.fq2         1   0      0B                                                      
	n100.r08.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s038.Main.fq1         1   0      0B                                                      
	n100.r08.s038.Main.fq2         1   0      0B                                                      
	n100.r08.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s039.Main.fq1         1   0      0B                                                      
	n100.r08.s039.Main.fq2         1   0      0B                                                      
	n100.r08.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s040.Main.fq1         1   0      0B                                                      
	n100.r08.s040.Main.fq2         1   0      0B                                                      
	n100.r08.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s041.Main.fq1         1   0      0B                                                      
	n100.r08.s041.Main.fq2         1   0      0B                                                      
	n100.r08.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s042.Main.fq1         1   0      0B                                                      
	n100.r08.s042.Main.fq2         1   0      0B                                                      
	n100.r08.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s043.Main.fq1         1   0      0B                                                      
	n100.r08.s043.Main.fq2         1   0      0B                                                      
	n100.r08.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s044.Main.fq1         1   0      0B                                                      
	n100.r08.s044.Main.fq2         1   0      0B                                                      
	n100.r08.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s045.Main.fq1         1   0      0B                                                      
	n100.r08.s045.Main.fq2         1   0      0B                                                      
	n100.r08.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s046.Main.fq1         1   0      0B                                                      
	n100.r08.s046.Main.fq2         1   0      0B                                                      
	n100.r08.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s047.Main.fq1         1   0      0B                                                      
	n100.r08.s047.Main.fq2         1   0      0B                                                      
	n100.r08.s047.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s048.Main.fq1         1   0      0B                                                      
	n100.r08.s048.Main.fq2         1   0      0B                                                      
	n100.r08.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s049.Main.fq1         1   0      0B                                                      
	n100.r08.s049.Main.fq2         1   0      0B                                                      
	n100.r08.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s050.Main.fq1         1   0      0B                                                      
	n100.r08.s050.Main.fq2         1   0      0B                                                      
	n100.r08.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s051.Main.fq1         1   0      0B                                                      
	n100.r08.s051.Main.fq2         1   0      0B                                                      
	n100.r08.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s052.Main.fq1         1   0      0B                                                      
	n100.r08.s052.Main.fq2         1   0      0B                                                      
	n100.r08.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s053.Main.fq1         1   0      0B                                                      
	n100.r08.s053.Main.fq2         1   0      0B                                                      
	n100.r08.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s054.Main.fq1         1   0      0B                                                      
	n100.r08.s054.Main.fq2         1   0      0B                                                      
	n100.r08.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s055.Main.fq1         1   0      0B                                                      
	n100.r08.s055.Main.fq2         1   0      0B                                                      
	n100.r08.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s056.Main.fq1         1   0      0B                                                      
	n100.r08.s056.Main.fq2         1   0      0B                                                      
	n100.r08.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s057.Main.fq1         1   0      0B                                                      
	n100.r08.s057.Main.fq2         1   0      0B                                                      
	n100.r08.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s058.Main.fq1         1   0      0B                                                      
	n100.r08.s058.Main.fq2         1   0      0B                                                      
	n100.r08.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s059.Main.fq1         1   0      0B                                                      
	n100.r08.s059.Main.fq2         1   0      0B                                                      
	n100.r08.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s060.Main.fq1         1   0      0B                                                      
	n100.r08.s060.Main.fq2         1   0      0B                                                      
	n100.r08.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s061.Main.fq1         1   0      0B                                                      
	n100.r08.s061.Main.fq2         1   0      0B                                                      
	n100.r08.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s062.Main.fq1         1   0      0B                                                      
	n100.r08.s062.Main.fq2         1   0      0B                                                      
	n100.r08.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s063.Main.fq1         1   0      0B                                                      
	n100.r08.s063.Main.fq2         1   0      0B                                                      
	n100.r08.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s064.Main.fq1         1   0      0B                                                      
	n100.r08.s064.Main.fq2         1   0      0B                                                      
	n100.r08.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s065.Main.fq1         1   0      0B                                                      
	n100.r08.s065.Main.fq2         1   0      0B                                                      
	n100.r08.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s066.Main.fq1         1   0      0B                                                      
	n100.r08.s066.Main.fq2         1   0      0B                                                      
	n100.r08.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s067.Main.fq1         1   0      0B                                                      
	n100.r08.s067.Main.fq2         1   0      0B                                                      
	n100.r08.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s068.Main.fq1         1   0      0B                                                      
	n100.r08.s068.Main.fq2         1   0      0B                                                      
	n100.r08.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s069.Main.fq1         1   0      0B                                                      
	n100.r08.s069.Main.fq2         1   0      0B                                                      
	n100.r08.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s070.Main.fq1         1   0      0B                                                      
	n100.r08.s070.Main.fq2         1   0      0B                                                      
	n100.r08.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s071.Main.fq1         1   0      0B                                                      
	n100.r08.s071.Main.fq2         1   0      0B                                                      
	n100.r08.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s072.Main.fq1         1   0      0B                                                      
	n100.r08.s072.Main.fq2         1   0      0B                                                      
	n100.r08.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s073.Main.fq1         1   0      0B                                                      
	n100.r08.s073.Main.fq2         1   0      0B                                                      
	n100.r08.s073.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s074.Main.fq1         1   0      0B                                                      
	n100.r08.s074.Main.fq2         1   0      0B                                                      
	n100.r08.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s075.Main.fq1         1   0      0B                                                      
	n100.r08.s075.Main.fq2         1   0      0B                                                      
	n100.r08.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s076.Main.fq1         1   0      0B                                                      
	n100.r08.s076.Main.fq2         1   0      0B                                                      
	n100.r08.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s077.Main.fq1         1   0      0B                                                      
	n100.r08.s077.Main.fq2         1   0      0B                                                      
	n100.r08.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s078.Main.fq1         1   0      0B                                                      
	n100.r08.s078.Main.fq2         1   0      0B                                                      
	n100.r08.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s079.Main.fq1         1   0      0B                                                      
	n100.r08.s079.Main.fq2         1   0      0B                                                      
	n100.r08.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s080.Main.fq1         1   0      0B                                                      
	n100.r08.s080.Main.fq2         1   0      0B                                                      
	n100.r08.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s081.Main.fq1         1   0      0B                                                      
	n100.r08.s081.Main.fq2         1   0      0B                                                      
	n100.r08.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s082.Main.fq1         1   0      0B                                                      
	n100.r08.s082.Main.fq2         1   0      0B                                                      
	n100.r08.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s083.Main.fq1         1   0      0B                                                      
	n100.r08.s083.Main.fq2         1   0      0B                                                      
	n100.r08.s083.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s084.Main.fq1         1   0      0B                                                      
	n100.r08.s084.Main.fq2         1   0      0B                                                      
	n100.r08.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s085.Main.fq1         1   0      0B                                                      
	n100.r08.s085.Main.fq2         1   0      0B                                                      
	n100.r08.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s086.Main.fq1         1   0      0B                                                      
	n100.r08.s086.Main.fq2         1   0      0B                                                      
	n100.r08.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s087.Main.fq1         1   0      0B                                                      
	n100.r08.s087.Main.fq2         1   0      0B                                                      
	n100.r08.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s088.Main.fq1         1   0      0B                                                      
	n100.r08.s088.Main.fq2         1   0      0B                                                      
	n100.r08.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s089.Main.fq1         1   0      0B                                                      
	n100.r08.s089.Main.fq2         1   0      0B                                                      
	n100.r08.s089.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s090.Main.fq1         1   0      0B                                                      
	n100.r08.s090.Main.fq2         1   0      0B                                                      
	n100.r08.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s091.Main.fq1         1   0      0B                                                      
	n100.r08.s091.Main.fq2         1   0      0B                                                      
	n100.r08.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s092.Main.fq1         1   0      0B                                                      
	n100.r08.s092.Main.fq2         1   0      0B                                                      
	n100.r08.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s093.Main.fq1         1   0      0B                                                      
	n100.r08.s093.Main.fq2         1   0      0B                                                      
	n100.r08.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s094.Main.fq1         1   0      0B                                                      
	n100.r08.s094.Main.fq2         1   0      0B                                                      
	n100.r08.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s095.Main.fq1         1   0      0B                                                      
	n100.r08.s095.Main.fq2         1   0      0B                                                      
	n100.r08.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s096.Main.fq1         1   0      0B                                                      
	n100.r08.s096.Main.fq2         1   0      0B                                                      
	n100.r08.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s097.Main.fq1         1   0      0B                                                      
	n100.r08.s097.Main.fq2         1   0      0B                                                      
	n100.r08.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s098.Main.fq1         1   0      0B                                                      
	n100.r08.s098.Main.fq2         1   0      0B                                                      
	n100.r08.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s099.Main.fq1         1   0      0B                                                      
	n100.r08.s099.Main.fq2         1   0      0B                                                      
	n100.r08.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r08.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r08.s100.Main.fq1         1   0      0B                                                      
	n100.r08.s100.Main.fq2         1   0      0B                                                      
	n100.r08.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r08.s001.Main.out_file, n100.r08.s002.Main.out_file, n100.r08.s003.Main.out_file, n100.r08.s004.Main.out_file, n100.r08.s005.Main.out_file, n100.r08.s006.Main.out_file, n100.r08.s007.Main.out_file, n100.r08.s008.Main.out_file, n100.r08.s009.Main.out_file, n100.r08.s010.Main.out_file, n100.r08.s011.Main.out_file, n100.r08.s012.Main.out_file, n100.r08.s013.Main.out_file, n100.r08.s014.Main.out_file, n100.r08.s015.Main.out_file, n100.r08.s016.Main.out_file, n100.r08.s017.Main.out_file, n100.r08.s018.Main.out_file, n100.r08.s019.Main.out_file, n100.r08.s020.Main.out_file, n100.r08.s021.Main.out_file, n100.r08.s022.Main.out_file, n100.r08.s023.Main.out_file, n100.r08.s024.Main.out_file, n100.r08.s025.Main.out_file, n100.r08.s026.Main.out_file, n100.r08.s027.Main.out_file, n100.r08.s028.Main.out_file, n100.r08.s029.Main.out_file, n100.r08.s030.Main.out_file, n100.r08.s031.Main.out_file, n100.r08.s032.Main.out_file, n100.r08.s033.Main.out_file, n100.r08.s034.Main.out_file, n100.r08.s035.Main.out_file, n100.r08.s036.Main.out_file, n100.r08.s037.Main.out_file, n100.r08.s038.Main.out_file, n100.r08.s039.Main.out_file, n100.r08.s040.Main.out_file, n100.r08.s041.Main.out_file, n100.r08.s042.Main.out_file, n100.r08.s043.Main.out_file, n100.r08.s044.Main.out_file, n100.r08.s045.Main.out_file, n100.r08.s046.Main.out_file, n100.r08.s047.Main.out_file, n100.r08.s048.Main.out_file, n100.r08.s049.Main.out_file, n100.r08.s050.Main.out_file, n100.r08.s051.Main.out_file, n100.r08.s052.Main.out_file, n100.r08.s053.Main.out_file, n100.r08.s054.Main.out_file, n100.r08.s055.Main.out_file, n100.r08.s056.Main.out_file, n100.r08.s057.Main.out_file, n100.r08.s058.Main.out_file, n100.r08.s059.Main.out_file, n100.r08.s060.Main.out_file, n100.r08.s061.Main.out_file, n100.r08.s062.Main.out_file, n100.r08.s063.Main.out_file, n100.r08.s064.Main.out_file, n100.r08.s065.Main.out_file, n100.r08.s066.Main.out_file, n100.r08.s067.Main.out_file, n100.r08.s068.Main.out_file, n100.r08.s069.Main.out_file, n100.r08.s070.Main.out_file, n100.r08.s071.Main.out_file, n100.r08.s072.Main.out_file, n100.r08.s073.Main.out_file, n100.r08.s074.Main.out_file, n100.r08.s075.Main.out_file, n100.r08.s076.Main.out_file, n100.r08.s077.Main.out_file, n100.r08.s078.Main.out_file, n100.r08.s079.Main.out_file, n100.r08.s080.Main.out_file, n100.r08.s081.Main.out_file, n100.r08.s082.Main.out_file, n100.r08.s083.Main.out_file, n100.r08.s084.Main.out_file, n100.r08.s085.Main.out_file, n100.r08.s086.Main.out_file, n100.r08.s087.Main.out_file, n100.r08.s088.Main.out_file, n100.r08.s089.Main.out_file, n100.r08.s090.Main.out_file, n100.r08.s091.Main.out_file, n100.r08.s092.Main.out_file, n100.r08.s093.Main.out_file, n100.r08.s094.Main.out_file, n100.r08.s095.Main.out_file, n100.r08.s096.Main.out_file, n100.r08.s097.Main.out_file, n100.r08.s098.Main.out_file, n100.r08.s099.Main.out_file, n100.r08.s100.Main.out_file
2021/07/08 17:28:06 result: [val<.=0dd12e71 35.7MiB>, val<.=82c50b90 35.7MiB>, val<.=187cc8a9 35.7MiB>, val<.=55ab91f6 35.7MiB>, val<.=1567230f 35.7MiB>, val<.=dd459162 35.7MiB>, val<.=aaa30c43 35.7MiB>, val<.=ffa20b1b 35.7MiB>, val<.=6b77c450 35.8MiB>, val<.=aa140d63 35.8MiB>, val<.=b5f0233c 35.8MiB>, val<.=86118e6c 35.8MiB>, val<.=2712ec3a 35.8MiB>, val<.=9f018295 35.7MiB>, val<.=7822635b 35.7MiB>, val<.=2261d1f9 35.7MiB>, val<.=f05e16d7 35.7MiB>, val<.=0c2878f2 35.7MiB>, val<.=89c0f4ad 35.8MiB>, val<.=d0154310 35.8MiB>, val<.=8dfaba4f 35.7MiB>, val<.=997d85ea 35.7MiB>, val<.=87ec9a9a 35.7MiB>, val<.=7983d601 35.6MiB>, val<.=6404f551 35.7MiB>, val<.=4d0a91a6 35.7MiB>, val<.=0b04c2f7 35.7MiB>, val<.=4063029f 35.7MiB>, val<.=b810dedd 35.7MiB>, val<.=eea858ff 35.8MiB>, val<.=8058e245 35.7MiB>, val<.=9c89b931 35.8MiB>, val<.=4e2812cf 35.8MiB>, val<.=6834e781 35.7MiB>, val<.=bd17d22a 35.8MiB>, val<.=97802ce4 35.7MiB>, val<.=0491c52a 35.7MiB>, val<.=589a599f 35.7MiB>, val<.=79d382c7 35.7MiB>, val<.=f1290a19 35.7MiB>, val<.=60e6fe20 35.7MiB>, val<.=0a6999b1 35.7MiB>, val<.=38cc5bf4 35.7MiB>, val<.=c10b704f 35.7MiB>, val<.=538c48ab 35.7MiB>, val<.=c7fe6e73 35.7MiB>, val<.=9156cf7a 35.7MiB>, val<.=3ef952dc 35.8MiB>, val<.=46fde2b1 35.8MiB>, val<.=86ba9d2a 35.8MiB>, val<.=5d39732c 35.8MiB>, val<.=b643296d 35.7MiB>, val<.=f72b2787 35.7MiB>, val<.=02249391 35.7MiB>, val<.=768c54bb 35.7MiB>, val<.=fc96769f 35.8MiB>, val<.=b37631c6 35.7MiB>, val<.=a4d27aa7 35.7MiB>, val<.=8b26b14a 35.8MiB>, val<.=05ff2aef 35.7MiB>, val<.=83d3e100 35.8MiB>, val<.=f03ba311 35.7MiB>, val<.=3bd9e926 35.7MiB>, val<.=c5ce000e 35.7MiB>, val<.=5f90ea4d 35.7MiB>, val<.=4c020719 35.8MiB>, val<.=2da0fe16 35.8MiB>, val<.=4c435beb 35.7MiB>, val<.=e5fc5113 35.7MiB>, val<.=3555bad6 35.8MiB>, val<.=a1a26d8c 35.7MiB>, val<.=e381bd41 35.7MiB>, val<.=8c58ba30 35.8MiB>, val<.=e71ab01a 35.8MiB>, val<.=0fce250b 35.7MiB>, val<.=78a25dbe 35.7MiB>, val<.=cdadc8a4 35.7MiB>, val<.=b2271ad4 35.8MiB>, val<.=16aa4a39 35.7MiB>, val<.=583f51dd 35.7MiB>, val<.=fb566e36 35.7MiB>, val<.=e54b70db 35.7MiB>, val<.=7d2298d4 35.7MiB>, val<.=ebc80ff2 35.8MiB>, val<.=78ab7a23 35.7MiB>, val<.=6027320d 35.8MiB>, val<.=6d1ef2d1 35.7MiB>, val<.=d1cbefa6 35.7MiB>, val<.=eb9702e5 35.7MiB>, val<.=9e3ac426 35.8MiB>, val<.=ce37f9e9 35.8MiB>, val<.=0fc0a8bd 35.7MiB>, val<.=72d0f0a5 35.7MiB>, val<.=b8ae0b01 35.7MiB>, val<.=67f20ea9 35.7MiB>, val<.=a66a58b5 35.7MiB>, val<.=ea7add41 35.7MiB>, val<.=33628b23 35.8MiB>, val<.=7168f764 35.7MiB>, val<.=808aa359 35.7MiB>]
2021/07/08 17:28:06 waiting for 1 background tasks to complete
