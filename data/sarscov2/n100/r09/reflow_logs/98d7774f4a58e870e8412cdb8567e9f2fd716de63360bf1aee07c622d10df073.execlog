2021/07/08 17:28:48 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 17:28:48 run ID: 98d7774f
2021/07/08 17:28:48 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r09.rf
	(no params)
	(no arguments)
2021/07/08 17:28:48 Trace: /home/niema/.reflow/runs/98d7774f4a58e870e8412cdb8567e9f2fd716de63360bf1aee07c622d10df073.trace
2021/07/08 17:28:48 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 17:28:49 scheduler task 3838912f (flow 65bdc09d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s025_output\"\n        wget -O \"n100.r09.s025_output/n100.r09.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s025_output/n100.r09.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s025_output/n100.r09.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s025_output/n100.r09.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s025_output/n100.r09.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s025_output/n100.r09.s025.reference.fas\" \"n100.r09.s025_output/n100.r09.s025.fq1.fastq\" \"n100.r09.s025_output/n100.r09.s025.fq2.fastq\" | samtools view -bS - > \"n100.r09.s025_output/n100.r09.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s025_output/n100.r09.s025.untrimmed.sorted.bam\" \"n100.r09.s025_output/n100.r09.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s025_output/n100.r09.s025.untrimmed.sorted.bam\" -b \"n100.r09.s025_output/n100.r09.s025.primers.bed\" -p \"n100.r09.s025_output/n100.r09.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam\" \"n100.r09.s025_output/n100.r09.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s025_output/n100.r09.s025.reference.fas\" \"n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam\" > \"n100.r09.s025_output/n100.r09.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s025_output/n100.r09.s025.reference.fas\" --call-indels \"n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam\" > \"n100.r09.s025_output/n100.r09.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam\" > \"n100.r09.s025_output/n100.r09.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s025_output/n100.r09.s025.depth.txt\" \"n100.r09.s025_output/n100.r09.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s025_output/n100.r09.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s025_output/n100.r09.s025.reference.fas\" | bcftools consensus -m \"n100.r09.s025_output/n100.r09.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s025_output/n100.r09.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 71a2240f (flow b69f3a08): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s004_output\"\n        wget -O \"n100.r09.s004_output/n100.r09.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s004_output/n100.r09.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s004_output/n100.r09.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s004_output/n100.r09.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s004_output/n100.r09.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s004_output/n100.r09.s004.reference.fas\" \"n100.r09.s004_output/n100.r09.s004.fq1.fastq\" \"n100.r09.s004_output/n100.r09.s004.fq2.fastq\" | samtools view -bS - > \"n100.r09.s004_output/n100.r09.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s004_output/n100.r09.s004.untrimmed.sorted.bam\" \"n100.r09.s004_output/n100.r09.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s004_output/n100.r09.s004.untrimmed.sorted.bam\" -b \"n100.r09.s004_output/n100.r09.s004.primers.bed\" -p \"n100.r09.s004_output/n100.r09.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam\" \"n100.r09.s004_output/n100.r09.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s004_output/n100.r09.s004.reference.fas\" \"n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam\" > \"n100.r09.s004_output/n100.r09.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s004_output/n100.r09.s004.reference.fas\" --call-indels \"n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam\" > \"n100.r09.s004_output/n100.r09.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam\" > \"n100.r09.s004_output/n100.r09.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s004_output/n100.r09.s004.depth.txt\" \"n100.r09.s004_output/n100.r09.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s004_output/n100.r09.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s004_output/n100.r09.s004.reference.fas\" | bcftools consensus -m \"n100.r09.s004_output/n100.r09.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s004_output/n100.r09.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task b29faaca (flow 74146abc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s040_output\"\n        wget -O \"n100.r09.s040_output/n100.r09.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s040_output/n100.r09.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s040_output/n100.r09.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s040_output/n100.r09.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s040_output/n100.r09.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s040_output/n100.r09.s040.reference.fas\" \"n100.r09.s040_output/n100.r09.s040.fq1.fastq\" \"n100.r09.s040_output/n100.r09.s040.fq2.fastq\" | samtools view -bS - > \"n100.r09.s040_output/n100.r09.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s040_output/n100.r09.s040.untrimmed.sorted.bam\" \"n100.r09.s040_output/n100.r09.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s040_output/n100.r09.s040.untrimmed.sorted.bam\" -b \"n100.r09.s040_output/n100.r09.s040.primers.bed\" -p \"n100.r09.s040_output/n100.r09.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam\" \"n100.r09.s040_output/n100.r09.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s040_output/n100.r09.s040.reference.fas\" \"n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam\" > \"n100.r09.s040_output/n100.r09.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s040_output/n100.r09.s040.reference.fas\" --call-indels \"n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam\" > \"n100.r09.s040_output/n100.r09.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam\" > \"n100.r09.s040_output/n100.r09.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s040_output/n100.r09.s040.depth.txt\" \"n100.r09.s040_output/n100.r09.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s040_output/n100.r09.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s040_output/n100.r09.s040.reference.fas\" | bcftools consensus -m \"n100.r09.s040_output/n100.r09.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s040_output/n100.r09.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 4e39b363 (flow 2cf75932): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s012_output\"\n        wget -O \"n100.r09.s012_output/n100.r09.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s012_output/n100.r09.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s012_output/n100.r09.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s012_output/n100.r09.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s012_output/n100.r09.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s012_output/n100.r09.s012.reference.fas\" \"n100.r09.s012_output/n100.r09.s012.fq1.fastq\" \"n100.r09.s012_output/n100.r09.s012.fq2.fastq\" | samtools view -bS - > \"n100.r09.s012_output/n100.r09.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s012_output/n100.r09.s012.untrimmed.sorted.bam\" \"n100.r09.s012_output/n100.r09.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s012_output/n100.r09.s012.untrimmed.sorted.bam\" -b \"n100.r09.s012_output/n100.r09.s012.primers.bed\" -p \"n100.r09.s012_output/n100.r09.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam\" \"n100.r09.s012_output/n100.r09.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s012_output/n100.r09.s012.reference.fas\" \"n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam\" > \"n100.r09.s012_output/n100.r09.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s012_output/n100.r09.s012.reference.fas\" --call-indels \"n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam\" > \"n100.r09.s012_output/n100.r09.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam\" > \"n100.r09.s012_output/n100.r09.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s012_output/n100.r09.s012.depth.txt\" \"n100.r09.s012_output/n100.r09.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s012_output/n100.r09.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s012_output/n100.r09.s012.reference.fas\" | bcftools consensus -m \"n100.r09.s012_output/n100.r09.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s012_output/n100.r09.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 7f57889b (flow bbdb3d14): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s039_output\"\n        wget -O \"n100.r09.s039_output/n100.r09.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s039_output/n100.r09.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s039_output/n100.r09.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s039_output/n100.r09.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s039_output/n100.r09.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s039_output/n100.r09.s039.reference.fas\" \"n100.r09.s039_output/n100.r09.s039.fq1.fastq\" \"n100.r09.s039_output/n100.r09.s039.fq2.fastq\" | samtools view -bS - > \"n100.r09.s039_output/n100.r09.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s039_output/n100.r09.s039.untrimmed.sorted.bam\" \"n100.r09.s039_output/n100.r09.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s039_output/n100.r09.s039.untrimmed.sorted.bam\" -b \"n100.r09.s039_output/n100.r09.s039.primers.bed\" -p \"n100.r09.s039_output/n100.r09.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam\" \"n100.r09.s039_output/n100.r09.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s039_output/n100.r09.s039.reference.fas\" \"n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam\" > \"n100.r09.s039_output/n100.r09.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s039_output/n100.r09.s039.reference.fas\" --call-indels \"n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam\" > \"n100.r09.s039_output/n100.r09.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam\" > \"n100.r09.s039_output/n100.r09.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s039_output/n100.r09.s039.depth.txt\" \"n100.r09.s039_output/n100.r09.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s039_output/n100.r09.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s039_output/n100.r09.s039.reference.fas\" | bcftools consensus -m \"n100.r09.s039_output/n100.r09.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s039_output/n100.r09.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 4b51afe4 (flow 88409fe3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s027_output\"\n        wget -O \"n100.r09.s027_output/n100.r09.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s027_output/n100.r09.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s027_output/n100.r09.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s027_output/n100.r09.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s027_output/n100.r09.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s027_output/n100.r09.s027.reference.fas\" \"n100.r09.s027_output/n100.r09.s027.fq1.fastq\" \"n100.r09.s027_output/n100.r09.s027.fq2.fastq\" | samtools view -bS - > \"n100.r09.s027_output/n100.r09.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s027_output/n100.r09.s027.untrimmed.sorted.bam\" \"n100.r09.s027_output/n100.r09.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s027_output/n100.r09.s027.untrimmed.sorted.bam\" -b \"n100.r09.s027_output/n100.r09.s027.primers.bed\" -p \"n100.r09.s027_output/n100.r09.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam\" \"n100.r09.s027_output/n100.r09.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s027_output/n100.r09.s027.reference.fas\" \"n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam\" > \"n100.r09.s027_output/n100.r09.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s027_output/n100.r09.s027.reference.fas\" --call-indels \"n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam\" > \"n100.r09.s027_output/n100.r09.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam\" > \"n100.r09.s027_output/n100.r09.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s027_output/n100.r09.s027.depth.txt\" \"n100.r09.s027_output/n100.r09.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s027_output/n100.r09.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s027_output/n100.r09.s027.reference.fas\" | bcftools consensus -m \"n100.r09.s027_output/n100.r09.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s027_output/n100.r09.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 301872db (flow f4514b15): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s010_output\"\n        wget -O \"n100.r09.s010_output/n100.r09.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s010_output/n100.r09.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s010_output/n100.r09.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s010_output/n100.r09.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s010_output/n100.r09.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s010_output/n100.r09.s010.reference.fas\" \"n100.r09.s010_output/n100.r09.s010.fq1.fastq\" \"n100.r09.s010_output/n100.r09.s010.fq2.fastq\" | samtools view -bS - > \"n100.r09.s010_output/n100.r09.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s010_output/n100.r09.s010.untrimmed.sorted.bam\" \"n100.r09.s010_output/n100.r09.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s010_output/n100.r09.s010.untrimmed.sorted.bam\" -b \"n100.r09.s010_output/n100.r09.s010.primers.bed\" -p \"n100.r09.s010_output/n100.r09.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam\" \"n100.r09.s010_output/n100.r09.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s010_output/n100.r09.s010.reference.fas\" \"n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam\" > \"n100.r09.s010_output/n100.r09.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s010_output/n100.r09.s010.reference.fas\" --call-indels \"n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam\" > \"n100.r09.s010_output/n100.r09.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam\" > \"n100.r09.s010_output/n100.r09.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s010_output/n100.r09.s010.depth.txt\" \"n100.r09.s010_output/n100.r09.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s010_output/n100.r09.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s010_output/n100.r09.s010.reference.fas\" | bcftools consensus -m \"n100.r09.s010_output/n100.r09.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s010_output/n100.r09.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task b49db477 (flow 591b29d1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s066_output\"\n        wget -O \"n100.r09.s066_output/n100.r09.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s066_output/n100.r09.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s066_output/n100.r09.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s066_output/n100.r09.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s066_output/n100.r09.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s066_output/n100.r09.s066.reference.fas\" \"n100.r09.s066_output/n100.r09.s066.fq1.fastq\" \"n100.r09.s066_output/n100.r09.s066.fq2.fastq\" | samtools view -bS - > \"n100.r09.s066_output/n100.r09.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s066_output/n100.r09.s066.untrimmed.sorted.bam\" \"n100.r09.s066_output/n100.r09.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s066_output/n100.r09.s066.untrimmed.sorted.bam\" -b \"n100.r09.s066_output/n100.r09.s066.primers.bed\" -p \"n100.r09.s066_output/n100.r09.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam\" \"n100.r09.s066_output/n100.r09.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s066_output/n100.r09.s066.reference.fas\" \"n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam\" > \"n100.r09.s066_output/n100.r09.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s066_output/n100.r09.s066.reference.fas\" --call-indels \"n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam\" > \"n100.r09.s066_output/n100.r09.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam\" > \"n100.r09.s066_output/n100.r09.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s066_output/n100.r09.s066.depth.txt\" \"n100.r09.s066_output/n100.r09.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s066_output/n100.r09.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s066_output/n100.r09.s066.reference.fas\" | bcftools consensus -m \"n100.r09.s066_output/n100.r09.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s066_output/n100.r09.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 4e597b0a (flow b6b37969): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s008_output\"\n        wget -O \"n100.r09.s008_output/n100.r09.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s008_output/n100.r09.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s008_output/n100.r09.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s008_output/n100.r09.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s008_output/n100.r09.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s008_output/n100.r09.s008.reference.fas\" \"n100.r09.s008_output/n100.r09.s008.fq1.fastq\" \"n100.r09.s008_output/n100.r09.s008.fq2.fastq\" | samtools view -bS - > \"n100.r09.s008_output/n100.r09.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s008_output/n100.r09.s008.untrimmed.sorted.bam\" \"n100.r09.s008_output/n100.r09.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s008_output/n100.r09.s008.untrimmed.sorted.bam\" -b \"n100.r09.s008_output/n100.r09.s008.primers.bed\" -p \"n100.r09.s008_output/n100.r09.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam\" \"n100.r09.s008_output/n100.r09.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s008_output/n100.r09.s008.reference.fas\" \"n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam\" > \"n100.r09.s008_output/n100.r09.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s008_output/n100.r09.s008.reference.fas\" --call-indels \"n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam\" > \"n100.r09.s008_output/n100.r09.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam\" > \"n100.r09.s008_output/n100.r09.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s008_output/n100.r09.s008.depth.txt\" \"n100.r09.s008_output/n100.r09.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s008_output/n100.r09.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s008_output/n100.r09.s008.reference.fas\" | bcftools consensus -m \"n100.r09.s008_output/n100.r09.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s008_output/n100.r09.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 909dc8d5 (flow b75a80ea): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s082_output\"\n        wget -O \"n100.r09.s082_output/n100.r09.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s082_output/n100.r09.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s082_output/n100.r09.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s082_output/n100.r09.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s082_output/n100.r09.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s082_output/n100.r09.s082.reference.fas\" \"n100.r09.s082_output/n100.r09.s082.fq1.fastq\" \"n100.r09.s082_output/n100.r09.s082.fq2.fastq\" | samtools view -bS - > \"n100.r09.s082_output/n100.r09.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s082_output/n100.r09.s082.untrimmed.sorted.bam\" \"n100.r09.s082_output/n100.r09.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s082_output/n100.r09.s082.untrimmed.sorted.bam\" -b \"n100.r09.s082_output/n100.r09.s082.primers.bed\" -p \"n100.r09.s082_output/n100.r09.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam\" \"n100.r09.s082_output/n100.r09.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s082_output/n100.r09.s082.reference.fas\" \"n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam\" > \"n100.r09.s082_output/n100.r09.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s082_output/n100.r09.s082.reference.fas\" --call-indels \"n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam\" > \"n100.r09.s082_output/n100.r09.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam\" > \"n100.r09.s082_output/n100.r09.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s082_output/n100.r09.s082.depth.txt\" \"n100.r09.s082_output/n100.r09.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s082_output/n100.r09.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s082_output/n100.r09.s082.reference.fas\" | bcftools consensus -m \"n100.r09.s082_output/n100.r09.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s082_output/n100.r09.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 0bb80e08 (flow 6ea6ac51): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s074_output\"\n        wget -O \"n100.r09.s074_output/n100.r09.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s074_output/n100.r09.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s074_output/n100.r09.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s074_output/n100.r09.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s074_output/n100.r09.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s074_output/n100.r09.s074.reference.fas\" \"n100.r09.s074_output/n100.r09.s074.fq1.fastq\" \"n100.r09.s074_output/n100.r09.s074.fq2.fastq\" | samtools view -bS - > \"n100.r09.s074_output/n100.r09.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s074_output/n100.r09.s074.untrimmed.sorted.bam\" \"n100.r09.s074_output/n100.r09.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s074_output/n100.r09.s074.untrimmed.sorted.bam\" -b \"n100.r09.s074_output/n100.r09.s074.primers.bed\" -p \"n100.r09.s074_output/n100.r09.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam\" \"n100.r09.s074_output/n100.r09.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s074_output/n100.r09.s074.reference.fas\" \"n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam\" > \"n100.r09.s074_output/n100.r09.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s074_output/n100.r09.s074.reference.fas\" --call-indels \"n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam\" > \"n100.r09.s074_output/n100.r09.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam\" > \"n100.r09.s074_output/n100.r09.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s074_output/n100.r09.s074.depth.txt\" \"n100.r09.s074_output/n100.r09.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s074_output/n100.r09.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s074_output/n100.r09.s074.reference.fas\" | bcftools consensus -m \"n100.r09.s074_output/n100.r09.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s074_output/n100.r09.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c3ca00c6 (flow 511c1700): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s073_output\"\n        wget -O \"n100.r09.s073_output/n100.r09.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s073_output/n100.r09.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s073_output/n100.r09.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s073_output/n100.r09.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s073_output/n100.r09.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s073_output/n100.r09.s073.reference.fas\" \"n100.r09.s073_output/n100.r09.s073.fq1.fastq\" \"n100.r09.s073_output/n100.r09.s073.fq2.fastq\" | samtools view -bS - > \"n100.r09.s073_output/n100.r09.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s073_output/n100.r09.s073.untrimmed.sorted.bam\" \"n100.r09.s073_output/n100.r09.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s073_output/n100.r09.s073.untrimmed.sorted.bam\" -b \"n100.r09.s073_output/n100.r09.s073.primers.bed\" -p \"n100.r09.s073_output/n100.r09.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam\" \"n100.r09.s073_output/n100.r09.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s073_output/n100.r09.s073.reference.fas\" \"n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam\" > \"n100.r09.s073_output/n100.r09.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s073_output/n100.r09.s073.reference.fas\" --call-indels \"n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam\" > \"n100.r09.s073_output/n100.r09.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam\" > \"n100.r09.s073_output/n100.r09.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s073_output/n100.r09.s073.depth.txt\" \"n100.r09.s073_output/n100.r09.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s073_output/n100.r09.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s073_output/n100.r09.s073.reference.fas\" | bcftools consensus -m \"n100.r09.s073_output/n100.r09.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s073_output/n100.r09.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 2230bc53 (flow 62a0035c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s030_output\"\n        wget -O \"n100.r09.s030_output/n100.r09.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s030_output/n100.r09.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s030_output/n100.r09.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s030_output/n100.r09.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s030_output/n100.r09.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s030_output/n100.r09.s030.reference.fas\" \"n100.r09.s030_output/n100.r09.s030.fq1.fastq\" \"n100.r09.s030_output/n100.r09.s030.fq2.fastq\" | samtools view -bS - > \"n100.r09.s030_output/n100.r09.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s030_output/n100.r09.s030.untrimmed.sorted.bam\" \"n100.r09.s030_output/n100.r09.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s030_output/n100.r09.s030.untrimmed.sorted.bam\" -b \"n100.r09.s030_output/n100.r09.s030.primers.bed\" -p \"n100.r09.s030_output/n100.r09.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam\" \"n100.r09.s030_output/n100.r09.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s030_output/n100.r09.s030.reference.fas\" \"n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam\" > \"n100.r09.s030_output/n100.r09.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s030_output/n100.r09.s030.reference.fas\" --call-indels \"n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam\" > \"n100.r09.s030_output/n100.r09.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam\" > \"n100.r09.s030_output/n100.r09.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s030_output/n100.r09.s030.depth.txt\" \"n100.r09.s030_output/n100.r09.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s030_output/n100.r09.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s030_output/n100.r09.s030.reference.fas\" | bcftools consensus -m \"n100.r09.s030_output/n100.r09.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s030_output/n100.r09.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 339efe72 (flow ac3f4213): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s015_output\"\n        wget -O \"n100.r09.s015_output/n100.r09.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s015_output/n100.r09.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s015_output/n100.r09.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s015_output/n100.r09.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s015_output/n100.r09.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s015_output/n100.r09.s015.reference.fas\" \"n100.r09.s015_output/n100.r09.s015.fq1.fastq\" \"n100.r09.s015_output/n100.r09.s015.fq2.fastq\" | samtools view -bS - > \"n100.r09.s015_output/n100.r09.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s015_output/n100.r09.s015.untrimmed.sorted.bam\" \"n100.r09.s015_output/n100.r09.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s015_output/n100.r09.s015.untrimmed.sorted.bam\" -b \"n100.r09.s015_output/n100.r09.s015.primers.bed\" -p \"n100.r09.s015_output/n100.r09.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam\" \"n100.r09.s015_output/n100.r09.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s015_output/n100.r09.s015.reference.fas\" \"n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam\" > \"n100.r09.s015_output/n100.r09.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s015_output/n100.r09.s015.reference.fas\" --call-indels \"n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam\" > \"n100.r09.s015_output/n100.r09.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam\" > \"n100.r09.s015_output/n100.r09.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s015_output/n100.r09.s015.depth.txt\" \"n100.r09.s015_output/n100.r09.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s015_output/n100.r09.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s015_output/n100.r09.s015.reference.fas\" | bcftools consensus -m \"n100.r09.s015_output/n100.r09.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s015_output/n100.r09.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task d843f9bd (flow 960857c0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s069_output\"\n        wget -O \"n100.r09.s069_output/n100.r09.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s069_output/n100.r09.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s069_output/n100.r09.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s069_output/n100.r09.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s069_output/n100.r09.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s069_output/n100.r09.s069.reference.fas\" \"n100.r09.s069_output/n100.r09.s069.fq1.fastq\" \"n100.r09.s069_output/n100.r09.s069.fq2.fastq\" | samtools view -bS - > \"n100.r09.s069_output/n100.r09.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s069_output/n100.r09.s069.untrimmed.sorted.bam\" \"n100.r09.s069_output/n100.r09.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s069_output/n100.r09.s069.untrimmed.sorted.bam\" -b \"n100.r09.s069_output/n100.r09.s069.primers.bed\" -p \"n100.r09.s069_output/n100.r09.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam\" \"n100.r09.s069_output/n100.r09.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s069_output/n100.r09.s069.reference.fas\" \"n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam\" > \"n100.r09.s069_output/n100.r09.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s069_output/n100.r09.s069.reference.fas\" --call-indels \"n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam\" > \"n100.r09.s069_output/n100.r09.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam\" > \"n100.r09.s069_output/n100.r09.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s069_output/n100.r09.s069.depth.txt\" \"n100.r09.s069_output/n100.r09.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s069_output/n100.r09.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s069_output/n100.r09.s069.reference.fas\" | bcftools consensus -m \"n100.r09.s069_output/n100.r09.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s069_output/n100.r09.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task bcbe460f (flow 032e076c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s002_output\"\n        wget -O \"n100.r09.s002_output/n100.r09.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s002_output/n100.r09.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s002_output/n100.r09.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s002_output/n100.r09.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s002_output/n100.r09.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s002_output/n100.r09.s002.reference.fas\" \"n100.r09.s002_output/n100.r09.s002.fq1.fastq\" \"n100.r09.s002_output/n100.r09.s002.fq2.fastq\" | samtools view -bS - > \"n100.r09.s002_output/n100.r09.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s002_output/n100.r09.s002.untrimmed.sorted.bam\" \"n100.r09.s002_output/n100.r09.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s002_output/n100.r09.s002.untrimmed.sorted.bam\" -b \"n100.r09.s002_output/n100.r09.s002.primers.bed\" -p \"n100.r09.s002_output/n100.r09.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam\" \"n100.r09.s002_output/n100.r09.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s002_output/n100.r09.s002.reference.fas\" \"n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam\" > \"n100.r09.s002_output/n100.r09.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s002_output/n100.r09.s002.reference.fas\" --call-indels \"n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam\" > \"n100.r09.s002_output/n100.r09.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam\" > \"n100.r09.s002_output/n100.r09.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s002_output/n100.r09.s002.depth.txt\" \"n100.r09.s002_output/n100.r09.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s002_output/n100.r09.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s002_output/n100.r09.s002.reference.fas\" | bcftools consensus -m \"n100.r09.s002_output/n100.r09.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s002_output/n100.r09.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 8aa24e0c (flow fd4c25ab): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s050_output\"\n        wget -O \"n100.r09.s050_output/n100.r09.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s050_output/n100.r09.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s050_output/n100.r09.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s050_output/n100.r09.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s050_output/n100.r09.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s050_output/n100.r09.s050.reference.fas\" \"n100.r09.s050_output/n100.r09.s050.fq1.fastq\" \"n100.r09.s050_output/n100.r09.s050.fq2.fastq\" | samtools view -bS - > \"n100.r09.s050_output/n100.r09.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s050_output/n100.r09.s050.untrimmed.sorted.bam\" \"n100.r09.s050_output/n100.r09.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s050_output/n100.r09.s050.untrimmed.sorted.bam\" -b \"n100.r09.s050_output/n100.r09.s050.primers.bed\" -p \"n100.r09.s050_output/n100.r09.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam\" \"n100.r09.s050_output/n100.r09.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s050_output/n100.r09.s050.reference.fas\" \"n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam\" > \"n100.r09.s050_output/n100.r09.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s050_output/n100.r09.s050.reference.fas\" --call-indels \"n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam\" > \"n100.r09.s050_output/n100.r09.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam\" > \"n100.r09.s050_output/n100.r09.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s050_output/n100.r09.s050.depth.txt\" \"n100.r09.s050_output/n100.r09.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s050_output/n100.r09.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s050_output/n100.r09.s050.reference.fas\" | bcftools consensus -m \"n100.r09.s050_output/n100.r09.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s050_output/n100.r09.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 4dd42029 (flow 3d6d80a3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s042_output\"\n        wget -O \"n100.r09.s042_output/n100.r09.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s042_output/n100.r09.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s042_output/n100.r09.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s042_output/n100.r09.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s042_output/n100.r09.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s042_output/n100.r09.s042.reference.fas\" \"n100.r09.s042_output/n100.r09.s042.fq1.fastq\" \"n100.r09.s042_output/n100.r09.s042.fq2.fastq\" | samtools view -bS - > \"n100.r09.s042_output/n100.r09.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s042_output/n100.r09.s042.untrimmed.sorted.bam\" \"n100.r09.s042_output/n100.r09.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s042_output/n100.r09.s042.untrimmed.sorted.bam\" -b \"n100.r09.s042_output/n100.r09.s042.primers.bed\" -p \"n100.r09.s042_output/n100.r09.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam\" \"n100.r09.s042_output/n100.r09.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s042_output/n100.r09.s042.reference.fas\" \"n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam\" > \"n100.r09.s042_output/n100.r09.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s042_output/n100.r09.s042.reference.fas\" --call-indels \"n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam\" > \"n100.r09.s042_output/n100.r09.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam\" > \"n100.r09.s042_output/n100.r09.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s042_output/n100.r09.s042.depth.txt\" \"n100.r09.s042_output/n100.r09.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s042_output/n100.r09.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s042_output/n100.r09.s042.reference.fas\" | bcftools consensus -m \"n100.r09.s042_output/n100.r09.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s042_output/n100.r09.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 6dd29d24 (flow 3e29d10c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s051_output\"\n        wget -O \"n100.r09.s051_output/n100.r09.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s051_output/n100.r09.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s051_output/n100.r09.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s051_output/n100.r09.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s051_output/n100.r09.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s051_output/n100.r09.s051.reference.fas\" \"n100.r09.s051_output/n100.r09.s051.fq1.fastq\" \"n100.r09.s051_output/n100.r09.s051.fq2.fastq\" | samtools view -bS - > \"n100.r09.s051_output/n100.r09.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s051_output/n100.r09.s051.untrimmed.sorted.bam\" \"n100.r09.s051_output/n100.r09.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s051_output/n100.r09.s051.untrimmed.sorted.bam\" -b \"n100.r09.s051_output/n100.r09.s051.primers.bed\" -p \"n100.r09.s051_output/n100.r09.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam\" \"n100.r09.s051_output/n100.r09.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s051_output/n100.r09.s051.reference.fas\" \"n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam\" > \"n100.r09.s051_output/n100.r09.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s051_output/n100.r09.s051.reference.fas\" --call-indels \"n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam\" > \"n100.r09.s051_output/n100.r09.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam\" > \"n100.r09.s051_output/n100.r09.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s051_output/n100.r09.s051.depth.txt\" \"n100.r09.s051_output/n100.r09.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s051_output/n100.r09.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s051_output/n100.r09.s051.reference.fas\" | bcftools consensus -m \"n100.r09.s051_output/n100.r09.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s051_output/n100.r09.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 8cebfe33 (flow 85081685): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s085_output\"\n        wget -O \"n100.r09.s085_output/n100.r09.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s085_output/n100.r09.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s085_output/n100.r09.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s085_output/n100.r09.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s085_output/n100.r09.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s085_output/n100.r09.s085.reference.fas\" \"n100.r09.s085_output/n100.r09.s085.fq1.fastq\" \"n100.r09.s085_output/n100.r09.s085.fq2.fastq\" | samtools view -bS - > \"n100.r09.s085_output/n100.r09.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s085_output/n100.r09.s085.untrimmed.sorted.bam\" \"n100.r09.s085_output/n100.r09.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s085_output/n100.r09.s085.untrimmed.sorted.bam\" -b \"n100.r09.s085_output/n100.r09.s085.primers.bed\" -p \"n100.r09.s085_output/n100.r09.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam\" \"n100.r09.s085_output/n100.r09.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s085_output/n100.r09.s085.reference.fas\" \"n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam\" > \"n100.r09.s085_output/n100.r09.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s085_output/n100.r09.s085.reference.fas\" --call-indels \"n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam\" > \"n100.r09.s085_output/n100.r09.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam\" > \"n100.r09.s085_output/n100.r09.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s085_output/n100.r09.s085.depth.txt\" \"n100.r09.s085_output/n100.r09.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s085_output/n100.r09.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s085_output/n100.r09.s085.reference.fas\" | bcftools consensus -m \"n100.r09.s085_output/n100.r09.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s085_output/n100.r09.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 0a19571a (flow 36f22554): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s063_output\"\n        wget -O \"n100.r09.s063_output/n100.r09.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s063_output/n100.r09.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s063_output/n100.r09.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s063_output/n100.r09.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s063_output/n100.r09.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s063_output/n100.r09.s063.reference.fas\" \"n100.r09.s063_output/n100.r09.s063.fq1.fastq\" \"n100.r09.s063_output/n100.r09.s063.fq2.fastq\" | samtools view -bS - > \"n100.r09.s063_output/n100.r09.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s063_output/n100.r09.s063.untrimmed.sorted.bam\" \"n100.r09.s063_output/n100.r09.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s063_output/n100.r09.s063.untrimmed.sorted.bam\" -b \"n100.r09.s063_output/n100.r09.s063.primers.bed\" -p \"n100.r09.s063_output/n100.r09.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam\" \"n100.r09.s063_output/n100.r09.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s063_output/n100.r09.s063.reference.fas\" \"n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam\" > \"n100.r09.s063_output/n100.r09.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s063_output/n100.r09.s063.reference.fas\" --call-indels \"n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam\" > \"n100.r09.s063_output/n100.r09.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam\" > \"n100.r09.s063_output/n100.r09.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s063_output/n100.r09.s063.depth.txt\" \"n100.r09.s063_output/n100.r09.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s063_output/n100.r09.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s063_output/n100.r09.s063.reference.fas\" | bcftools consensus -m \"n100.r09.s063_output/n100.r09.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s063_output/n100.r09.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 25cadac9 (flow bac83fae): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s095_output\"\n        wget -O \"n100.r09.s095_output/n100.r09.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s095_output/n100.r09.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s095_output/n100.r09.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s095_output/n100.r09.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s095_output/n100.r09.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s095_output/n100.r09.s095.reference.fas\" \"n100.r09.s095_output/n100.r09.s095.fq1.fastq\" \"n100.r09.s095_output/n100.r09.s095.fq2.fastq\" | samtools view -bS - > \"n100.r09.s095_output/n100.r09.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s095_output/n100.r09.s095.untrimmed.sorted.bam\" \"n100.r09.s095_output/n100.r09.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s095_output/n100.r09.s095.untrimmed.sorted.bam\" -b \"n100.r09.s095_output/n100.r09.s095.primers.bed\" -p \"n100.r09.s095_output/n100.r09.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam\" \"n100.r09.s095_output/n100.r09.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s095_output/n100.r09.s095.reference.fas\" \"n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam\" > \"n100.r09.s095_output/n100.r09.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s095_output/n100.r09.s095.reference.fas\" --call-indels \"n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam\" > \"n100.r09.s095_output/n100.r09.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam\" > \"n100.r09.s095_output/n100.r09.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s095_output/n100.r09.s095.depth.txt\" \"n100.r09.s095_output/n100.r09.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s095_output/n100.r09.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s095_output/n100.r09.s095.reference.fas\" | bcftools consensus -m \"n100.r09.s095_output/n100.r09.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s095_output/n100.r09.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 6a4e8d08 (flow 8ab86c50): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s020_output\"\n        wget -O \"n100.r09.s020_output/n100.r09.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s020_output/n100.r09.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s020_output/n100.r09.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s020_output/n100.r09.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s020_output/n100.r09.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s020_output/n100.r09.s020.reference.fas\" \"n100.r09.s020_output/n100.r09.s020.fq1.fastq\" \"n100.r09.s020_output/n100.r09.s020.fq2.fastq\" | samtools view -bS - > \"n100.r09.s020_output/n100.r09.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s020_output/n100.r09.s020.untrimmed.sorted.bam\" \"n100.r09.s020_output/n100.r09.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s020_output/n100.r09.s020.untrimmed.sorted.bam\" -b \"n100.r09.s020_output/n100.r09.s020.primers.bed\" -p \"n100.r09.s020_output/n100.r09.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam\" \"n100.r09.s020_output/n100.r09.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s020_output/n100.r09.s020.reference.fas\" \"n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam\" > \"n100.r09.s020_output/n100.r09.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s020_output/n100.r09.s020.reference.fas\" --call-indels \"n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam\" > \"n100.r09.s020_output/n100.r09.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam\" > \"n100.r09.s020_output/n100.r09.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s020_output/n100.r09.s020.depth.txt\" \"n100.r09.s020_output/n100.r09.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s020_output/n100.r09.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s020_output/n100.r09.s020.reference.fas\" | bcftools consensus -m \"n100.r09.s020_output/n100.r09.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s020_output/n100.r09.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 03ade628 (flow 6fcd9514): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s019_output\"\n        wget -O \"n100.r09.s019_output/n100.r09.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s019_output/n100.r09.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s019_output/n100.r09.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s019_output/n100.r09.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s019_output/n100.r09.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s019_output/n100.r09.s019.reference.fas\" \"n100.r09.s019_output/n100.r09.s019.fq1.fastq\" \"n100.r09.s019_output/n100.r09.s019.fq2.fastq\" | samtools view -bS - > \"n100.r09.s019_output/n100.r09.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s019_output/n100.r09.s019.untrimmed.sorted.bam\" \"n100.r09.s019_output/n100.r09.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s019_output/n100.r09.s019.untrimmed.sorted.bam\" -b \"n100.r09.s019_output/n100.r09.s019.primers.bed\" -p \"n100.r09.s019_output/n100.r09.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam\" \"n100.r09.s019_output/n100.r09.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s019_output/n100.r09.s019.reference.fas\" \"n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam\" > \"n100.r09.s019_output/n100.r09.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s019_output/n100.r09.s019.reference.fas\" --call-indels \"n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam\" > \"n100.r09.s019_output/n100.r09.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam\" > \"n100.r09.s019_output/n100.r09.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s019_output/n100.r09.s019.depth.txt\" \"n100.r09.s019_output/n100.r09.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s019_output/n100.r09.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s019_output/n100.r09.s019.reference.fas\" | bcftools consensus -m \"n100.r09.s019_output/n100.r09.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s019_output/n100.r09.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task b56b9115 (flow ca6c188a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s088_output\"\n        wget -O \"n100.r09.s088_output/n100.r09.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s088_output/n100.r09.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s088_output/n100.r09.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s088_output/n100.r09.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s088_output/n100.r09.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s088_output/n100.r09.s088.reference.fas\" \"n100.r09.s088_output/n100.r09.s088.fq1.fastq\" \"n100.r09.s088_output/n100.r09.s088.fq2.fastq\" | samtools view -bS - > \"n100.r09.s088_output/n100.r09.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s088_output/n100.r09.s088.untrimmed.sorted.bam\" \"n100.r09.s088_output/n100.r09.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s088_output/n100.r09.s088.untrimmed.sorted.bam\" -b \"n100.r09.s088_output/n100.r09.s088.primers.bed\" -p \"n100.r09.s088_output/n100.r09.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam\" \"n100.r09.s088_output/n100.r09.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s088_output/n100.r09.s088.reference.fas\" \"n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam\" > \"n100.r09.s088_output/n100.r09.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s088_output/n100.r09.s088.reference.fas\" --call-indels \"n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam\" > \"n100.r09.s088_output/n100.r09.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam\" > \"n100.r09.s088_output/n100.r09.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s088_output/n100.r09.s088.depth.txt\" \"n100.r09.s088_output/n100.r09.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s088_output/n100.r09.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s088_output/n100.r09.s088.reference.fas\" | bcftools consensus -m \"n100.r09.s088_output/n100.r09.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s088_output/n100.r09.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c5cc38da (flow 8dc0d360): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s059_output\"\n        wget -O \"n100.r09.s059_output/n100.r09.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s059_output/n100.r09.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s059_output/n100.r09.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s059_output/n100.r09.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s059_output/n100.r09.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s059_output/n100.r09.s059.reference.fas\" \"n100.r09.s059_output/n100.r09.s059.fq1.fastq\" \"n100.r09.s059_output/n100.r09.s059.fq2.fastq\" | samtools view -bS - > \"n100.r09.s059_output/n100.r09.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s059_output/n100.r09.s059.untrimmed.sorted.bam\" \"n100.r09.s059_output/n100.r09.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s059_output/n100.r09.s059.untrimmed.sorted.bam\" -b \"n100.r09.s059_output/n100.r09.s059.primers.bed\" -p \"n100.r09.s059_output/n100.r09.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam\" \"n100.r09.s059_output/n100.r09.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s059_output/n100.r09.s059.reference.fas\" \"n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam\" > \"n100.r09.s059_output/n100.r09.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s059_output/n100.r09.s059.reference.fas\" --call-indels \"n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam\" > \"n100.r09.s059_output/n100.r09.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam\" > \"n100.r09.s059_output/n100.r09.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s059_output/n100.r09.s059.depth.txt\" \"n100.r09.s059_output/n100.r09.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s059_output/n100.r09.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s059_output/n100.r09.s059.reference.fas\" | bcftools consensus -m \"n100.r09.s059_output/n100.r09.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s059_output/n100.r09.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 8bb87836 (flow 19c275b5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s026_output\"\n        wget -O \"n100.r09.s026_output/n100.r09.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s026_output/n100.r09.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s026_output/n100.r09.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s026_output/n100.r09.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s026_output/n100.r09.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s026_output/n100.r09.s026.reference.fas\" \"n100.r09.s026_output/n100.r09.s026.fq1.fastq\" \"n100.r09.s026_output/n100.r09.s026.fq2.fastq\" | samtools view -bS - > \"n100.r09.s026_output/n100.r09.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s026_output/n100.r09.s026.untrimmed.sorted.bam\" \"n100.r09.s026_output/n100.r09.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s026_output/n100.r09.s026.untrimmed.sorted.bam\" -b \"n100.r09.s026_output/n100.r09.s026.primers.bed\" -p \"n100.r09.s026_output/n100.r09.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam\" \"n100.r09.s026_output/n100.r09.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s026_output/n100.r09.s026.reference.fas\" \"n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam\" > \"n100.r09.s026_output/n100.r09.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s026_output/n100.r09.s026.reference.fas\" --call-indels \"n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam\" > \"n100.r09.s026_output/n100.r09.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam\" > \"n100.r09.s026_output/n100.r09.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s026_output/n100.r09.s026.depth.txt\" \"n100.r09.s026_output/n100.r09.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s026_output/n100.r09.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s026_output/n100.r09.s026.reference.fas\" | bcftools consensus -m \"n100.r09.s026_output/n100.r09.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s026_output/n100.r09.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 67bedddd (flow cb1ce740): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s009_output\"\n        wget -O \"n100.r09.s009_output/n100.r09.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s009_output/n100.r09.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s009_output/n100.r09.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s009_output/n100.r09.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s009_output/n100.r09.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s009_output/n100.r09.s009.reference.fas\" \"n100.r09.s009_output/n100.r09.s009.fq1.fastq\" \"n100.r09.s009_output/n100.r09.s009.fq2.fastq\" | samtools view -bS - > \"n100.r09.s009_output/n100.r09.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s009_output/n100.r09.s009.untrimmed.sorted.bam\" \"n100.r09.s009_output/n100.r09.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s009_output/n100.r09.s009.untrimmed.sorted.bam\" -b \"n100.r09.s009_output/n100.r09.s009.primers.bed\" -p \"n100.r09.s009_output/n100.r09.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam\" \"n100.r09.s009_output/n100.r09.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s009_output/n100.r09.s009.reference.fas\" \"n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam\" > \"n100.r09.s009_output/n100.r09.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s009_output/n100.r09.s009.reference.fas\" --call-indels \"n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam\" > \"n100.r09.s009_output/n100.r09.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam\" > \"n100.r09.s009_output/n100.r09.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s009_output/n100.r09.s009.depth.txt\" \"n100.r09.s009_output/n100.r09.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s009_output/n100.r09.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s009_output/n100.r09.s009.reference.fas\" | bcftools consensus -m \"n100.r09.s009_output/n100.r09.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s009_output/n100.r09.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task a4988c18 (flow e8b23611): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s044_output\"\n        wget -O \"n100.r09.s044_output/n100.r09.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s044_output/n100.r09.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s044_output/n100.r09.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s044_output/n100.r09.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s044_output/n100.r09.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s044_output/n100.r09.s044.reference.fas\" \"n100.r09.s044_output/n100.r09.s044.fq1.fastq\" \"n100.r09.s044_output/n100.r09.s044.fq2.fastq\" | samtools view -bS - > \"n100.r09.s044_output/n100.r09.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s044_output/n100.r09.s044.untrimmed.sorted.bam\" \"n100.r09.s044_output/n100.r09.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s044_output/n100.r09.s044.untrimmed.sorted.bam\" -b \"n100.r09.s044_output/n100.r09.s044.primers.bed\" -p \"n100.r09.s044_output/n100.r09.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam\" \"n100.r09.s044_output/n100.r09.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s044_output/n100.r09.s044.reference.fas\" \"n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam\" > \"n100.r09.s044_output/n100.r09.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s044_output/n100.r09.s044.reference.fas\" --call-indels \"n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam\" > \"n100.r09.s044_output/n100.r09.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam\" > \"n100.r09.s044_output/n100.r09.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s044_output/n100.r09.s044.depth.txt\" \"n100.r09.s044_output/n100.r09.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s044_output/n100.r09.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s044_output/n100.r09.s044.reference.fas\" | bcftools consensus -m \"n100.r09.s044_output/n100.r09.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s044_output/n100.r09.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 31dcb46d (flow ca642532): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s035_output\"\n        wget -O \"n100.r09.s035_output/n100.r09.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s035_output/n100.r09.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s035_output/n100.r09.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s035_output/n100.r09.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s035_output/n100.r09.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s035_output/n100.r09.s035.reference.fas\" \"n100.r09.s035_output/n100.r09.s035.fq1.fastq\" \"n100.r09.s035_output/n100.r09.s035.fq2.fastq\" | samtools view -bS - > \"n100.r09.s035_output/n100.r09.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s035_output/n100.r09.s035.untrimmed.sorted.bam\" \"n100.r09.s035_output/n100.r09.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s035_output/n100.r09.s035.untrimmed.sorted.bam\" -b \"n100.r09.s035_output/n100.r09.s035.primers.bed\" -p \"n100.r09.s035_output/n100.r09.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam\" \"n100.r09.s035_output/n100.r09.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s035_output/n100.r09.s035.reference.fas\" \"n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam\" > \"n100.r09.s035_output/n100.r09.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s035_output/n100.r09.s035.reference.fas\" --call-indels \"n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam\" > \"n100.r09.s035_output/n100.r09.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam\" > \"n100.r09.s035_output/n100.r09.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s035_output/n100.r09.s035.depth.txt\" \"n100.r09.s035_output/n100.r09.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s035_output/n100.r09.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s035_output/n100.r09.s035.reference.fas\" | bcftools consensus -m \"n100.r09.s035_output/n100.r09.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s035_output/n100.r09.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 03660aa3 (flow 0ff73e1f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s065_output\"\n        wget -O \"n100.r09.s065_output/n100.r09.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s065_output/n100.r09.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s065_output/n100.r09.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s065_output/n100.r09.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s065_output/n100.r09.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s065_output/n100.r09.s065.reference.fas\" \"n100.r09.s065_output/n100.r09.s065.fq1.fastq\" \"n100.r09.s065_output/n100.r09.s065.fq2.fastq\" | samtools view -bS - > \"n100.r09.s065_output/n100.r09.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s065_output/n100.r09.s065.untrimmed.sorted.bam\" \"n100.r09.s065_output/n100.r09.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s065_output/n100.r09.s065.untrimmed.sorted.bam\" -b \"n100.r09.s065_output/n100.r09.s065.primers.bed\" -p \"n100.r09.s065_output/n100.r09.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam\" \"n100.r09.s065_output/n100.r09.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s065_output/n100.r09.s065.reference.fas\" \"n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam\" > \"n100.r09.s065_output/n100.r09.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s065_output/n100.r09.s065.reference.fas\" --call-indels \"n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam\" > \"n100.r09.s065_output/n100.r09.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam\" > \"n100.r09.s065_output/n100.r09.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s065_output/n100.r09.s065.depth.txt\" \"n100.r09.s065_output/n100.r09.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s065_output/n100.r09.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s065_output/n100.r09.s065.reference.fas\" | bcftools consensus -m \"n100.r09.s065_output/n100.r09.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s065_output/n100.r09.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task a81322e0 (flow 03205e45): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s080_output\"\n        wget -O \"n100.r09.s080_output/n100.r09.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s080_output/n100.r09.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s080_output/n100.r09.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s080_output/n100.r09.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s080_output/n100.r09.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s080_output/n100.r09.s080.reference.fas\" \"n100.r09.s080_output/n100.r09.s080.fq1.fastq\" \"n100.r09.s080_output/n100.r09.s080.fq2.fastq\" | samtools view -bS - > \"n100.r09.s080_output/n100.r09.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s080_output/n100.r09.s080.untrimmed.sorted.bam\" \"n100.r09.s080_output/n100.r09.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s080_output/n100.r09.s080.untrimmed.sorted.bam\" -b \"n100.r09.s080_output/n100.r09.s080.primers.bed\" -p \"n100.r09.s080_output/n100.r09.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam\" \"n100.r09.s080_output/n100.r09.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s080_output/n100.r09.s080.reference.fas\" \"n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam\" > \"n100.r09.s080_output/n100.r09.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s080_output/n100.r09.s080.reference.fas\" --call-indels \"n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam\" > \"n100.r09.s080_output/n100.r09.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam\" > \"n100.r09.s080_output/n100.r09.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s080_output/n100.r09.s080.depth.txt\" \"n100.r09.s080_output/n100.r09.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s080_output/n100.r09.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s080_output/n100.r09.s080.reference.fas\" | bcftools consensus -m \"n100.r09.s080_output/n100.r09.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s080_output/n100.r09.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 177a80d4 (flow c571bec1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s061_output\"\n        wget -O \"n100.r09.s061_output/n100.r09.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s061_output/n100.r09.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s061_output/n100.r09.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s061_output/n100.r09.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s061_output/n100.r09.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s061_output/n100.r09.s061.reference.fas\" \"n100.r09.s061_output/n100.r09.s061.fq1.fastq\" \"n100.r09.s061_output/n100.r09.s061.fq2.fastq\" | samtools view -bS - > \"n100.r09.s061_output/n100.r09.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s061_output/n100.r09.s061.untrimmed.sorted.bam\" \"n100.r09.s061_output/n100.r09.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s061_output/n100.r09.s061.untrimmed.sorted.bam\" -b \"n100.r09.s061_output/n100.r09.s061.primers.bed\" -p \"n100.r09.s061_output/n100.r09.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam\" \"n100.r09.s061_output/n100.r09.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s061_output/n100.r09.s061.reference.fas\" \"n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam\" > \"n100.r09.s061_output/n100.r09.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s061_output/n100.r09.s061.reference.fas\" --call-indels \"n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam\" > \"n100.r09.s061_output/n100.r09.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam\" > \"n100.r09.s061_output/n100.r09.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s061_output/n100.r09.s061.depth.txt\" \"n100.r09.s061_output/n100.r09.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s061_output/n100.r09.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s061_output/n100.r09.s061.reference.fas\" | bcftools consensus -m \"n100.r09.s061_output/n100.r09.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s061_output/n100.r09.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task f75b41ab (flow 7f1c060b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s064_output\"\n        wget -O \"n100.r09.s064_output/n100.r09.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s064_output/n100.r09.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s064_output/n100.r09.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s064_output/n100.r09.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s064_output/n100.r09.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s064_output/n100.r09.s064.reference.fas\" \"n100.r09.s064_output/n100.r09.s064.fq1.fastq\" \"n100.r09.s064_output/n100.r09.s064.fq2.fastq\" | samtools view -bS - > \"n100.r09.s064_output/n100.r09.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s064_output/n100.r09.s064.untrimmed.sorted.bam\" \"n100.r09.s064_output/n100.r09.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s064_output/n100.r09.s064.untrimmed.sorted.bam\" -b \"n100.r09.s064_output/n100.r09.s064.primers.bed\" -p \"n100.r09.s064_output/n100.r09.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam\" \"n100.r09.s064_output/n100.r09.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s064_output/n100.r09.s064.reference.fas\" \"n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam\" > \"n100.r09.s064_output/n100.r09.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s064_output/n100.r09.s064.reference.fas\" --call-indels \"n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam\" > \"n100.r09.s064_output/n100.r09.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam\" > \"n100.r09.s064_output/n100.r09.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s064_output/n100.r09.s064.depth.txt\" \"n100.r09.s064_output/n100.r09.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s064_output/n100.r09.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s064_output/n100.r09.s064.reference.fas\" | bcftools consensus -m \"n100.r09.s064_output/n100.r09.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s064_output/n100.r09.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 1e64ec4b (flow d4b624e7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s016_output\"\n        wget -O \"n100.r09.s016_output/n100.r09.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s016_output/n100.r09.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s016_output/n100.r09.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s016_output/n100.r09.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s016_output/n100.r09.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s016_output/n100.r09.s016.reference.fas\" \"n100.r09.s016_output/n100.r09.s016.fq1.fastq\" \"n100.r09.s016_output/n100.r09.s016.fq2.fastq\" | samtools view -bS - > \"n100.r09.s016_output/n100.r09.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s016_output/n100.r09.s016.untrimmed.sorted.bam\" \"n100.r09.s016_output/n100.r09.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s016_output/n100.r09.s016.untrimmed.sorted.bam\" -b \"n100.r09.s016_output/n100.r09.s016.primers.bed\" -p \"n100.r09.s016_output/n100.r09.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam\" \"n100.r09.s016_output/n100.r09.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s016_output/n100.r09.s016.reference.fas\" \"n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam\" > \"n100.r09.s016_output/n100.r09.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s016_output/n100.r09.s016.reference.fas\" --call-indels \"n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam\" > \"n100.r09.s016_output/n100.r09.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam\" > \"n100.r09.s016_output/n100.r09.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s016_output/n100.r09.s016.depth.txt\" \"n100.r09.s016_output/n100.r09.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s016_output/n100.r09.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s016_output/n100.r09.s016.reference.fas\" | bcftools consensus -m \"n100.r09.s016_output/n100.r09.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s016_output/n100.r09.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task a9d54835 (flow 462eab90): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s053_output\"\n        wget -O \"n100.r09.s053_output/n100.r09.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s053_output/n100.r09.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s053_output/n100.r09.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s053_output/n100.r09.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s053_output/n100.r09.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s053_output/n100.r09.s053.reference.fas\" \"n100.r09.s053_output/n100.r09.s053.fq1.fastq\" \"n100.r09.s053_output/n100.r09.s053.fq2.fastq\" | samtools view -bS - > \"n100.r09.s053_output/n100.r09.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s053_output/n100.r09.s053.untrimmed.sorted.bam\" \"n100.r09.s053_output/n100.r09.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s053_output/n100.r09.s053.untrimmed.sorted.bam\" -b \"n100.r09.s053_output/n100.r09.s053.primers.bed\" -p \"n100.r09.s053_output/n100.r09.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam\" \"n100.r09.s053_output/n100.r09.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s053_output/n100.r09.s053.reference.fas\" \"n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam\" > \"n100.r09.s053_output/n100.r09.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s053_output/n100.r09.s053.reference.fas\" --call-indels \"n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam\" > \"n100.r09.s053_output/n100.r09.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam\" > \"n100.r09.s053_output/n100.r09.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s053_output/n100.r09.s053.depth.txt\" \"n100.r09.s053_output/n100.r09.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s053_output/n100.r09.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s053_output/n100.r09.s053.reference.fas\" | bcftools consensus -m \"n100.r09.s053_output/n100.r09.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s053_output/n100.r09.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 107b832c (flow c309afbb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s031_output\"\n        wget -O \"n100.r09.s031_output/n100.r09.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s031_output/n100.r09.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s031_output/n100.r09.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s031_output/n100.r09.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s031_output/n100.r09.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s031_output/n100.r09.s031.reference.fas\" \"n100.r09.s031_output/n100.r09.s031.fq1.fastq\" \"n100.r09.s031_output/n100.r09.s031.fq2.fastq\" | samtools view -bS - > \"n100.r09.s031_output/n100.r09.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s031_output/n100.r09.s031.untrimmed.sorted.bam\" \"n100.r09.s031_output/n100.r09.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s031_output/n100.r09.s031.untrimmed.sorted.bam\" -b \"n100.r09.s031_output/n100.r09.s031.primers.bed\" -p \"n100.r09.s031_output/n100.r09.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam\" \"n100.r09.s031_output/n100.r09.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s031_output/n100.r09.s031.reference.fas\" \"n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam\" > \"n100.r09.s031_output/n100.r09.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s031_output/n100.r09.s031.reference.fas\" --call-indels \"n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam\" > \"n100.r09.s031_output/n100.r09.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam\" > \"n100.r09.s031_output/n100.r09.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s031_output/n100.r09.s031.depth.txt\" \"n100.r09.s031_output/n100.r09.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s031_output/n100.r09.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s031_output/n100.r09.s031.reference.fas\" | bcftools consensus -m \"n100.r09.s031_output/n100.r09.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s031_output/n100.r09.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 6cbee719 (flow 30fe5ddd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s052_output\"\n        wget -O \"n100.r09.s052_output/n100.r09.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s052_output/n100.r09.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s052_output/n100.r09.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s052_output/n100.r09.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s052_output/n100.r09.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s052_output/n100.r09.s052.reference.fas\" \"n100.r09.s052_output/n100.r09.s052.fq1.fastq\" \"n100.r09.s052_output/n100.r09.s052.fq2.fastq\" | samtools view -bS - > \"n100.r09.s052_output/n100.r09.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s052_output/n100.r09.s052.untrimmed.sorted.bam\" \"n100.r09.s052_output/n100.r09.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s052_output/n100.r09.s052.untrimmed.sorted.bam\" -b \"n100.r09.s052_output/n100.r09.s052.primers.bed\" -p \"n100.r09.s052_output/n100.r09.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam\" \"n100.r09.s052_output/n100.r09.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s052_output/n100.r09.s052.reference.fas\" \"n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam\" > \"n100.r09.s052_output/n100.r09.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s052_output/n100.r09.s052.reference.fas\" --call-indels \"n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam\" > \"n100.r09.s052_output/n100.r09.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam\" > \"n100.r09.s052_output/n100.r09.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s052_output/n100.r09.s052.depth.txt\" \"n100.r09.s052_output/n100.r09.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s052_output/n100.r09.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s052_output/n100.r09.s052.reference.fas\" | bcftools consensus -m \"n100.r09.s052_output/n100.r09.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s052_output/n100.r09.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 62391e6e (flow 8039d92f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s037_output\"\n        wget -O \"n100.r09.s037_output/n100.r09.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s037_output/n100.r09.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s037_output/n100.r09.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s037_output/n100.r09.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s037_output/n100.r09.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s037_output/n100.r09.s037.reference.fas\" \"n100.r09.s037_output/n100.r09.s037.fq1.fastq\" \"n100.r09.s037_output/n100.r09.s037.fq2.fastq\" | samtools view -bS - > \"n100.r09.s037_output/n100.r09.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s037_output/n100.r09.s037.untrimmed.sorted.bam\" \"n100.r09.s037_output/n100.r09.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s037_output/n100.r09.s037.untrimmed.sorted.bam\" -b \"n100.r09.s037_output/n100.r09.s037.primers.bed\" -p \"n100.r09.s037_output/n100.r09.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam\" \"n100.r09.s037_output/n100.r09.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s037_output/n100.r09.s037.reference.fas\" \"n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam\" > \"n100.r09.s037_output/n100.r09.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s037_output/n100.r09.s037.reference.fas\" --call-indels \"n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam\" > \"n100.r09.s037_output/n100.r09.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam\" > \"n100.r09.s037_output/n100.r09.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s037_output/n100.r09.s037.depth.txt\" \"n100.r09.s037_output/n100.r09.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s037_output/n100.r09.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s037_output/n100.r09.s037.reference.fas\" | bcftools consensus -m \"n100.r09.s037_output/n100.r09.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s037_output/n100.r09.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task e830d1de (flow 86ffe226): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s092_output\"\n        wget -O \"n100.r09.s092_output/n100.r09.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s092_output/n100.r09.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s092_output/n100.r09.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s092_output/n100.r09.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s092_output/n100.r09.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s092_output/n100.r09.s092.reference.fas\" \"n100.r09.s092_output/n100.r09.s092.fq1.fastq\" \"n100.r09.s092_output/n100.r09.s092.fq2.fastq\" | samtools view -bS - > \"n100.r09.s092_output/n100.r09.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s092_output/n100.r09.s092.untrimmed.sorted.bam\" \"n100.r09.s092_output/n100.r09.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s092_output/n100.r09.s092.untrimmed.sorted.bam\" -b \"n100.r09.s092_output/n100.r09.s092.primers.bed\" -p \"n100.r09.s092_output/n100.r09.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam\" \"n100.r09.s092_output/n100.r09.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s092_output/n100.r09.s092.reference.fas\" \"n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam\" > \"n100.r09.s092_output/n100.r09.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s092_output/n100.r09.s092.reference.fas\" --call-indels \"n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam\" > \"n100.r09.s092_output/n100.r09.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam\" > \"n100.r09.s092_output/n100.r09.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s092_output/n100.r09.s092.depth.txt\" \"n100.r09.s092_output/n100.r09.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s092_output/n100.r09.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s092_output/n100.r09.s092.reference.fas\" | bcftools consensus -m \"n100.r09.s092_output/n100.r09.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s092_output/n100.r09.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task a118daf0 (flow 01eaeab9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s083_output\"\n        wget -O \"n100.r09.s083_output/n100.r09.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s083_output/n100.r09.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s083_output/n100.r09.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s083_output/n100.r09.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s083_output/n100.r09.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s083_output/n100.r09.s083.reference.fas\" \"n100.r09.s083_output/n100.r09.s083.fq1.fastq\" \"n100.r09.s083_output/n100.r09.s083.fq2.fastq\" | samtools view -bS - > \"n100.r09.s083_output/n100.r09.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s083_output/n100.r09.s083.untrimmed.sorted.bam\" \"n100.r09.s083_output/n100.r09.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s083_output/n100.r09.s083.untrimmed.sorted.bam\" -b \"n100.r09.s083_output/n100.r09.s083.primers.bed\" -p \"n100.r09.s083_output/n100.r09.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam\" \"n100.r09.s083_output/n100.r09.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s083_output/n100.r09.s083.reference.fas\" \"n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam\" > \"n100.r09.s083_output/n100.r09.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s083_output/n100.r09.s083.reference.fas\" --call-indels \"n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam\" > \"n100.r09.s083_output/n100.r09.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam\" > \"n100.r09.s083_output/n100.r09.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s083_output/n100.r09.s083.depth.txt\" \"n100.r09.s083_output/n100.r09.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s083_output/n100.r09.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s083_output/n100.r09.s083.reference.fas\" | bcftools consensus -m \"n100.r09.s083_output/n100.r09.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s083_output/n100.r09.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task a96b1313 (flow 2b827096): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s097_output\"\n        wget -O \"n100.r09.s097_output/n100.r09.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s097_output/n100.r09.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s097_output/n100.r09.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s097_output/n100.r09.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s097_output/n100.r09.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s097_output/n100.r09.s097.reference.fas\" \"n100.r09.s097_output/n100.r09.s097.fq1.fastq\" \"n100.r09.s097_output/n100.r09.s097.fq2.fastq\" | samtools view -bS - > \"n100.r09.s097_output/n100.r09.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s097_output/n100.r09.s097.untrimmed.sorted.bam\" \"n100.r09.s097_output/n100.r09.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s097_output/n100.r09.s097.untrimmed.sorted.bam\" -b \"n100.r09.s097_output/n100.r09.s097.primers.bed\" -p \"n100.r09.s097_output/n100.r09.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam\" \"n100.r09.s097_output/n100.r09.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s097_output/n100.r09.s097.reference.fas\" \"n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam\" > \"n100.r09.s097_output/n100.r09.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s097_output/n100.r09.s097.reference.fas\" --call-indels \"n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam\" > \"n100.r09.s097_output/n100.r09.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam\" > \"n100.r09.s097_output/n100.r09.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s097_output/n100.r09.s097.depth.txt\" \"n100.r09.s097_output/n100.r09.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s097_output/n100.r09.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s097_output/n100.r09.s097.reference.fas\" | bcftools consensus -m \"n100.r09.s097_output/n100.r09.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s097_output/n100.r09.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 97158a03 (flow 61535a0d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s091_output\"\n        wget -O \"n100.r09.s091_output/n100.r09.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s091_output/n100.r09.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s091_output/n100.r09.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s091_output/n100.r09.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s091_output/n100.r09.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s091_output/n100.r09.s091.reference.fas\" \"n100.r09.s091_output/n100.r09.s091.fq1.fastq\" \"n100.r09.s091_output/n100.r09.s091.fq2.fastq\" | samtools view -bS - > \"n100.r09.s091_output/n100.r09.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s091_output/n100.r09.s091.untrimmed.sorted.bam\" \"n100.r09.s091_output/n100.r09.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s091_output/n100.r09.s091.untrimmed.sorted.bam\" -b \"n100.r09.s091_output/n100.r09.s091.primers.bed\" -p \"n100.r09.s091_output/n100.r09.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam\" \"n100.r09.s091_output/n100.r09.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s091_output/n100.r09.s091.reference.fas\" \"n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam\" > \"n100.r09.s091_output/n100.r09.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s091_output/n100.r09.s091.reference.fas\" --call-indels \"n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam\" > \"n100.r09.s091_output/n100.r09.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam\" > \"n100.r09.s091_output/n100.r09.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s091_output/n100.r09.s091.depth.txt\" \"n100.r09.s091_output/n100.r09.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s091_output/n100.r09.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s091_output/n100.r09.s091.reference.fas\" | bcftools consensus -m \"n100.r09.s091_output/n100.r09.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s091_output/n100.r09.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 9547f06a (flow 85992f0f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s046_output\"\n        wget -O \"n100.r09.s046_output/n100.r09.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s046_output/n100.r09.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s046_output/n100.r09.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s046_output/n100.r09.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s046_output/n100.r09.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s046_output/n100.r09.s046.reference.fas\" \"n100.r09.s046_output/n100.r09.s046.fq1.fastq\" \"n100.r09.s046_output/n100.r09.s046.fq2.fastq\" | samtools view -bS - > \"n100.r09.s046_output/n100.r09.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s046_output/n100.r09.s046.untrimmed.sorted.bam\" \"n100.r09.s046_output/n100.r09.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s046_output/n100.r09.s046.untrimmed.sorted.bam\" -b \"n100.r09.s046_output/n100.r09.s046.primers.bed\" -p \"n100.r09.s046_output/n100.r09.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam\" \"n100.r09.s046_output/n100.r09.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s046_output/n100.r09.s046.reference.fas\" \"n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam\" > \"n100.r09.s046_output/n100.r09.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s046_output/n100.r09.s046.reference.fas\" --call-indels \"n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam\" > \"n100.r09.s046_output/n100.r09.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam\" > \"n100.r09.s046_output/n100.r09.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s046_output/n100.r09.s046.depth.txt\" \"n100.r09.s046_output/n100.r09.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s046_output/n100.r09.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s046_output/n100.r09.s046.reference.fas\" | bcftools consensus -m \"n100.r09.s046_output/n100.r09.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s046_output/n100.r09.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c0336850 (flow b1c048e5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s077_output\"\n        wget -O \"n100.r09.s077_output/n100.r09.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s077_output/n100.r09.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s077_output/n100.r09.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s077_output/n100.r09.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s077_output/n100.r09.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s077_output/n100.r09.s077.reference.fas\" \"n100.r09.s077_output/n100.r09.s077.fq1.fastq\" \"n100.r09.s077_output/n100.r09.s077.fq2.fastq\" | samtools view -bS - > \"n100.r09.s077_output/n100.r09.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s077_output/n100.r09.s077.untrimmed.sorted.bam\" \"n100.r09.s077_output/n100.r09.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s077_output/n100.r09.s077.untrimmed.sorted.bam\" -b \"n100.r09.s077_output/n100.r09.s077.primers.bed\" -p \"n100.r09.s077_output/n100.r09.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam\" \"n100.r09.s077_output/n100.r09.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s077_output/n100.r09.s077.reference.fas\" \"n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam\" > \"n100.r09.s077_output/n100.r09.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s077_output/n100.r09.s077.reference.fas\" --call-indels \"n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam\" > \"n100.r09.s077_output/n100.r09.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam\" > \"n100.r09.s077_output/n100.r09.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s077_output/n100.r09.s077.depth.txt\" \"n100.r09.s077_output/n100.r09.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s077_output/n100.r09.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s077_output/n100.r09.s077.reference.fas\" | bcftools consensus -m \"n100.r09.s077_output/n100.r09.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s077_output/n100.r09.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 7ef3289f (flow d1e76a3d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s067_output\"\n        wget -O \"n100.r09.s067_output/n100.r09.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s067_output/n100.r09.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s067_output/n100.r09.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s067_output/n100.r09.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s067_output/n100.r09.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s067_output/n100.r09.s067.reference.fas\" \"n100.r09.s067_output/n100.r09.s067.fq1.fastq\" \"n100.r09.s067_output/n100.r09.s067.fq2.fastq\" | samtools view -bS - > \"n100.r09.s067_output/n100.r09.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s067_output/n100.r09.s067.untrimmed.sorted.bam\" \"n100.r09.s067_output/n100.r09.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s067_output/n100.r09.s067.untrimmed.sorted.bam\" -b \"n100.r09.s067_output/n100.r09.s067.primers.bed\" -p \"n100.r09.s067_output/n100.r09.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam\" \"n100.r09.s067_output/n100.r09.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s067_output/n100.r09.s067.reference.fas\" \"n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam\" > \"n100.r09.s067_output/n100.r09.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s067_output/n100.r09.s067.reference.fas\" --call-indels \"n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam\" > \"n100.r09.s067_output/n100.r09.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam\" > \"n100.r09.s067_output/n100.r09.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s067_output/n100.r09.s067.depth.txt\" \"n100.r09.s067_output/n100.r09.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s067_output/n100.r09.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s067_output/n100.r09.s067.reference.fas\" | bcftools consensus -m \"n100.r09.s067_output/n100.r09.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s067_output/n100.r09.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 9691b24c (flow 3c2b3c63): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s049_output\"\n        wget -O \"n100.r09.s049_output/n100.r09.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s049_output/n100.r09.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s049_output/n100.r09.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s049_output/n100.r09.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s049_output/n100.r09.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s049_output/n100.r09.s049.reference.fas\" \"n100.r09.s049_output/n100.r09.s049.fq1.fastq\" \"n100.r09.s049_output/n100.r09.s049.fq2.fastq\" | samtools view -bS - > \"n100.r09.s049_output/n100.r09.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s049_output/n100.r09.s049.untrimmed.sorted.bam\" \"n100.r09.s049_output/n100.r09.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s049_output/n100.r09.s049.untrimmed.sorted.bam\" -b \"n100.r09.s049_output/n100.r09.s049.primers.bed\" -p \"n100.r09.s049_output/n100.r09.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam\" \"n100.r09.s049_output/n100.r09.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s049_output/n100.r09.s049.reference.fas\" \"n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam\" > \"n100.r09.s049_output/n100.r09.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s049_output/n100.r09.s049.reference.fas\" --call-indels \"n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam\" > \"n100.r09.s049_output/n100.r09.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam\" > \"n100.r09.s049_output/n100.r09.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s049_output/n100.r09.s049.depth.txt\" \"n100.r09.s049_output/n100.r09.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s049_output/n100.r09.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s049_output/n100.r09.s049.reference.fas\" | bcftools consensus -m \"n100.r09.s049_output/n100.r09.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s049_output/n100.r09.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task b00facdf (flow 202714e1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s005_output\"\n        wget -O \"n100.r09.s005_output/n100.r09.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s005_output/n100.r09.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s005_output/n100.r09.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s005_output/n100.r09.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s005_output/n100.r09.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s005_output/n100.r09.s005.reference.fas\" \"n100.r09.s005_output/n100.r09.s005.fq1.fastq\" \"n100.r09.s005_output/n100.r09.s005.fq2.fastq\" | samtools view -bS - > \"n100.r09.s005_output/n100.r09.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s005_output/n100.r09.s005.untrimmed.sorted.bam\" \"n100.r09.s005_output/n100.r09.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s005_output/n100.r09.s005.untrimmed.sorted.bam\" -b \"n100.r09.s005_output/n100.r09.s005.primers.bed\" -p \"n100.r09.s005_output/n100.r09.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam\" \"n100.r09.s005_output/n100.r09.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s005_output/n100.r09.s005.reference.fas\" \"n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam\" > \"n100.r09.s005_output/n100.r09.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s005_output/n100.r09.s005.reference.fas\" --call-indels \"n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam\" > \"n100.r09.s005_output/n100.r09.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam\" > \"n100.r09.s005_output/n100.r09.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s005_output/n100.r09.s005.depth.txt\" \"n100.r09.s005_output/n100.r09.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s005_output/n100.r09.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s005_output/n100.r09.s005.reference.fas\" | bcftools consensus -m \"n100.r09.s005_output/n100.r09.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s005_output/n100.r09.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task d868dd9b (flow 8715eadd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s081_output\"\n        wget -O \"n100.r09.s081_output/n100.r09.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s081_output/n100.r09.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s081_output/n100.r09.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s081_output/n100.r09.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s081_output/n100.r09.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s081_output/n100.r09.s081.reference.fas\" \"n100.r09.s081_output/n100.r09.s081.fq1.fastq\" \"n100.r09.s081_output/n100.r09.s081.fq2.fastq\" | samtools view -bS - > \"n100.r09.s081_output/n100.r09.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s081_output/n100.r09.s081.untrimmed.sorted.bam\" \"n100.r09.s081_output/n100.r09.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s081_output/n100.r09.s081.untrimmed.sorted.bam\" -b \"n100.r09.s081_output/n100.r09.s081.primers.bed\" -p \"n100.r09.s081_output/n100.r09.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam\" \"n100.r09.s081_output/n100.r09.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s081_output/n100.r09.s081.reference.fas\" \"n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam\" > \"n100.r09.s081_output/n100.r09.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s081_output/n100.r09.s081.reference.fas\" --call-indels \"n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam\" > \"n100.r09.s081_output/n100.r09.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam\" > \"n100.r09.s081_output/n100.r09.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s081_output/n100.r09.s081.depth.txt\" \"n100.r09.s081_output/n100.r09.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s081_output/n100.r09.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s081_output/n100.r09.s081.reference.fas\" | bcftools consensus -m \"n100.r09.s081_output/n100.r09.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s081_output/n100.r09.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task d108e3c8 (flow c686feee): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s045_output\"\n        wget -O \"n100.r09.s045_output/n100.r09.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s045_output/n100.r09.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s045_output/n100.r09.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s045_output/n100.r09.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s045_output/n100.r09.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s045_output/n100.r09.s045.reference.fas\" \"n100.r09.s045_output/n100.r09.s045.fq1.fastq\" \"n100.r09.s045_output/n100.r09.s045.fq2.fastq\" | samtools view -bS - > \"n100.r09.s045_output/n100.r09.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s045_output/n100.r09.s045.untrimmed.sorted.bam\" \"n100.r09.s045_output/n100.r09.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s045_output/n100.r09.s045.untrimmed.sorted.bam\" -b \"n100.r09.s045_output/n100.r09.s045.primers.bed\" -p \"n100.r09.s045_output/n100.r09.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam\" \"n100.r09.s045_output/n100.r09.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s045_output/n100.r09.s045.reference.fas\" \"n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam\" > \"n100.r09.s045_output/n100.r09.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s045_output/n100.r09.s045.reference.fas\" --call-indels \"n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam\" > \"n100.r09.s045_output/n100.r09.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam\" > \"n100.r09.s045_output/n100.r09.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s045_output/n100.r09.s045.depth.txt\" \"n100.r09.s045_output/n100.r09.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s045_output/n100.r09.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s045_output/n100.r09.s045.reference.fas\" | bcftools consensus -m \"n100.r09.s045_output/n100.r09.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s045_output/n100.r09.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task b2d0fd0c (flow 37d37b5c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s006_output\"\n        wget -O \"n100.r09.s006_output/n100.r09.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s006_output/n100.r09.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s006_output/n100.r09.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s006_output/n100.r09.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s006_output/n100.r09.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s006_output/n100.r09.s006.reference.fas\" \"n100.r09.s006_output/n100.r09.s006.fq1.fastq\" \"n100.r09.s006_output/n100.r09.s006.fq2.fastq\" | samtools view -bS - > \"n100.r09.s006_output/n100.r09.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s006_output/n100.r09.s006.untrimmed.sorted.bam\" \"n100.r09.s006_output/n100.r09.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s006_output/n100.r09.s006.untrimmed.sorted.bam\" -b \"n100.r09.s006_output/n100.r09.s006.primers.bed\" -p \"n100.r09.s006_output/n100.r09.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam\" \"n100.r09.s006_output/n100.r09.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s006_output/n100.r09.s006.reference.fas\" \"n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam\" > \"n100.r09.s006_output/n100.r09.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s006_output/n100.r09.s006.reference.fas\" --call-indels \"n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam\" > \"n100.r09.s006_output/n100.r09.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam\" > \"n100.r09.s006_output/n100.r09.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s006_output/n100.r09.s006.depth.txt\" \"n100.r09.s006_output/n100.r09.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s006_output/n100.r09.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s006_output/n100.r09.s006.reference.fas\" | bcftools consensus -m \"n100.r09.s006_output/n100.r09.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s006_output/n100.r09.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 2a30e645 (flow 4834e08f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s054_output\"\n        wget -O \"n100.r09.s054_output/n100.r09.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s054_output/n100.r09.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s054_output/n100.r09.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s054_output/n100.r09.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s054_output/n100.r09.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s054_output/n100.r09.s054.reference.fas\" \"n100.r09.s054_output/n100.r09.s054.fq1.fastq\" \"n100.r09.s054_output/n100.r09.s054.fq2.fastq\" | samtools view -bS - > \"n100.r09.s054_output/n100.r09.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s054_output/n100.r09.s054.untrimmed.sorted.bam\" \"n100.r09.s054_output/n100.r09.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s054_output/n100.r09.s054.untrimmed.sorted.bam\" -b \"n100.r09.s054_output/n100.r09.s054.primers.bed\" -p \"n100.r09.s054_output/n100.r09.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam\" \"n100.r09.s054_output/n100.r09.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s054_output/n100.r09.s054.reference.fas\" \"n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam\" > \"n100.r09.s054_output/n100.r09.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s054_output/n100.r09.s054.reference.fas\" --call-indels \"n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam\" > \"n100.r09.s054_output/n100.r09.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam\" > \"n100.r09.s054_output/n100.r09.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s054_output/n100.r09.s054.depth.txt\" \"n100.r09.s054_output/n100.r09.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s054_output/n100.r09.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s054_output/n100.r09.s054.reference.fas\" | bcftools consensus -m \"n100.r09.s054_output/n100.r09.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s054_output/n100.r09.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task f67f9364 (flow 99c25444): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s038_output\"\n        wget -O \"n100.r09.s038_output/n100.r09.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s038_output/n100.r09.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s038_output/n100.r09.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s038_output/n100.r09.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s038_output/n100.r09.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s038_output/n100.r09.s038.reference.fas\" \"n100.r09.s038_output/n100.r09.s038.fq1.fastq\" \"n100.r09.s038_output/n100.r09.s038.fq2.fastq\" | samtools view -bS - > \"n100.r09.s038_output/n100.r09.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s038_output/n100.r09.s038.untrimmed.sorted.bam\" \"n100.r09.s038_output/n100.r09.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s038_output/n100.r09.s038.untrimmed.sorted.bam\" -b \"n100.r09.s038_output/n100.r09.s038.primers.bed\" -p \"n100.r09.s038_output/n100.r09.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam\" \"n100.r09.s038_output/n100.r09.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s038_output/n100.r09.s038.reference.fas\" \"n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam\" > \"n100.r09.s038_output/n100.r09.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s038_output/n100.r09.s038.reference.fas\" --call-indels \"n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam\" > \"n100.r09.s038_output/n100.r09.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam\" > \"n100.r09.s038_output/n100.r09.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s038_output/n100.r09.s038.depth.txt\" \"n100.r09.s038_output/n100.r09.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s038_output/n100.r09.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s038_output/n100.r09.s038.reference.fas\" | bcftools consensus -m \"n100.r09.s038_output/n100.r09.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s038_output/n100.r09.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 3d1fe110 (flow 3e3233db): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s033_output\"\n        wget -O \"n100.r09.s033_output/n100.r09.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s033_output/n100.r09.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s033_output/n100.r09.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s033_output/n100.r09.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s033_output/n100.r09.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s033_output/n100.r09.s033.reference.fas\" \"n100.r09.s033_output/n100.r09.s033.fq1.fastq\" \"n100.r09.s033_output/n100.r09.s033.fq2.fastq\" | samtools view -bS - > \"n100.r09.s033_output/n100.r09.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s033_output/n100.r09.s033.untrimmed.sorted.bam\" \"n100.r09.s033_output/n100.r09.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s033_output/n100.r09.s033.untrimmed.sorted.bam\" -b \"n100.r09.s033_output/n100.r09.s033.primers.bed\" -p \"n100.r09.s033_output/n100.r09.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam\" \"n100.r09.s033_output/n100.r09.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s033_output/n100.r09.s033.reference.fas\" \"n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam\" > \"n100.r09.s033_output/n100.r09.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s033_output/n100.r09.s033.reference.fas\" --call-indels \"n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam\" > \"n100.r09.s033_output/n100.r09.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam\" > \"n100.r09.s033_output/n100.r09.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s033_output/n100.r09.s033.depth.txt\" \"n100.r09.s033_output/n100.r09.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s033_output/n100.r09.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s033_output/n100.r09.s033.reference.fas\" | bcftools consensus -m \"n100.r09.s033_output/n100.r09.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s033_output/n100.r09.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 5b93b009 (flow 214bd342): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s056_output\"\n        wget -O \"n100.r09.s056_output/n100.r09.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s056_output/n100.r09.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s056_output/n100.r09.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s056_output/n100.r09.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s056_output/n100.r09.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s056_output/n100.r09.s056.reference.fas\" \"n100.r09.s056_output/n100.r09.s056.fq1.fastq\" \"n100.r09.s056_output/n100.r09.s056.fq2.fastq\" | samtools view -bS - > \"n100.r09.s056_output/n100.r09.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s056_output/n100.r09.s056.untrimmed.sorted.bam\" \"n100.r09.s056_output/n100.r09.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s056_output/n100.r09.s056.untrimmed.sorted.bam\" -b \"n100.r09.s056_output/n100.r09.s056.primers.bed\" -p \"n100.r09.s056_output/n100.r09.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam\" \"n100.r09.s056_output/n100.r09.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s056_output/n100.r09.s056.reference.fas\" \"n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam\" > \"n100.r09.s056_output/n100.r09.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s056_output/n100.r09.s056.reference.fas\" --call-indels \"n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam\" > \"n100.r09.s056_output/n100.r09.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam\" > \"n100.r09.s056_output/n100.r09.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s056_output/n100.r09.s056.depth.txt\" \"n100.r09.s056_output/n100.r09.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s056_output/n100.r09.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s056_output/n100.r09.s056.reference.fas\" | bcftools consensus -m \"n100.r09.s056_output/n100.r09.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s056_output/n100.r09.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 72711129 (flow ca14132b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s036_output\"\n        wget -O \"n100.r09.s036_output/n100.r09.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s036_output/n100.r09.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s036_output/n100.r09.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s036_output/n100.r09.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s036_output/n100.r09.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s036_output/n100.r09.s036.reference.fas\" \"n100.r09.s036_output/n100.r09.s036.fq1.fastq\" \"n100.r09.s036_output/n100.r09.s036.fq2.fastq\" | samtools view -bS - > \"n100.r09.s036_output/n100.r09.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s036_output/n100.r09.s036.untrimmed.sorted.bam\" \"n100.r09.s036_output/n100.r09.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s036_output/n100.r09.s036.untrimmed.sorted.bam\" -b \"n100.r09.s036_output/n100.r09.s036.primers.bed\" -p \"n100.r09.s036_output/n100.r09.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam\" \"n100.r09.s036_output/n100.r09.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s036_output/n100.r09.s036.reference.fas\" \"n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam\" > \"n100.r09.s036_output/n100.r09.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s036_output/n100.r09.s036.reference.fas\" --call-indels \"n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam\" > \"n100.r09.s036_output/n100.r09.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam\" > \"n100.r09.s036_output/n100.r09.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s036_output/n100.r09.s036.depth.txt\" \"n100.r09.s036_output/n100.r09.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s036_output/n100.r09.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s036_output/n100.r09.s036.reference.fas\" | bcftools consensus -m \"n100.r09.s036_output/n100.r09.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s036_output/n100.r09.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 8a72f87e (flow 1eb78b40): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s032_output\"\n        wget -O \"n100.r09.s032_output/n100.r09.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s032_output/n100.r09.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s032_output/n100.r09.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s032_output/n100.r09.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s032_output/n100.r09.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s032_output/n100.r09.s032.reference.fas\" \"n100.r09.s032_output/n100.r09.s032.fq1.fastq\" \"n100.r09.s032_output/n100.r09.s032.fq2.fastq\" | samtools view -bS - > \"n100.r09.s032_output/n100.r09.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s032_output/n100.r09.s032.untrimmed.sorted.bam\" \"n100.r09.s032_output/n100.r09.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s032_output/n100.r09.s032.untrimmed.sorted.bam\" -b \"n100.r09.s032_output/n100.r09.s032.primers.bed\" -p \"n100.r09.s032_output/n100.r09.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam\" \"n100.r09.s032_output/n100.r09.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s032_output/n100.r09.s032.reference.fas\" \"n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam\" > \"n100.r09.s032_output/n100.r09.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s032_output/n100.r09.s032.reference.fas\" --call-indels \"n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam\" > \"n100.r09.s032_output/n100.r09.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam\" > \"n100.r09.s032_output/n100.r09.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s032_output/n100.r09.s032.depth.txt\" \"n100.r09.s032_output/n100.r09.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s032_output/n100.r09.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s032_output/n100.r09.s032.reference.fas\" | bcftools consensus -m \"n100.r09.s032_output/n100.r09.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s032_output/n100.r09.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task ec43ea83 (flow 7b4ec1c0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s014_output\"\n        wget -O \"n100.r09.s014_output/n100.r09.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s014_output/n100.r09.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s014_output/n100.r09.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s014_output/n100.r09.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s014_output/n100.r09.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s014_output/n100.r09.s014.reference.fas\" \"n100.r09.s014_output/n100.r09.s014.fq1.fastq\" \"n100.r09.s014_output/n100.r09.s014.fq2.fastq\" | samtools view -bS - > \"n100.r09.s014_output/n100.r09.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s014_output/n100.r09.s014.untrimmed.sorted.bam\" \"n100.r09.s014_output/n100.r09.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s014_output/n100.r09.s014.untrimmed.sorted.bam\" -b \"n100.r09.s014_output/n100.r09.s014.primers.bed\" -p \"n100.r09.s014_output/n100.r09.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam\" \"n100.r09.s014_output/n100.r09.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s014_output/n100.r09.s014.reference.fas\" \"n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam\" > \"n100.r09.s014_output/n100.r09.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s014_output/n100.r09.s014.reference.fas\" --call-indels \"n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam\" > \"n100.r09.s014_output/n100.r09.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam\" > \"n100.r09.s014_output/n100.r09.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s014_output/n100.r09.s014.depth.txt\" \"n100.r09.s014_output/n100.r09.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s014_output/n100.r09.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s014_output/n100.r09.s014.reference.fas\" | bcftools consensus -m \"n100.r09.s014_output/n100.r09.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s014_output/n100.r09.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c8bedcb7 (flow 89fd3d0f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s084_output\"\n        wget -O \"n100.r09.s084_output/n100.r09.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s084_output/n100.r09.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s084_output/n100.r09.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s084_output/n100.r09.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s084_output/n100.r09.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s084_output/n100.r09.s084.reference.fas\" \"n100.r09.s084_output/n100.r09.s084.fq1.fastq\" \"n100.r09.s084_output/n100.r09.s084.fq2.fastq\" | samtools view -bS - > \"n100.r09.s084_output/n100.r09.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s084_output/n100.r09.s084.untrimmed.sorted.bam\" \"n100.r09.s084_output/n100.r09.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s084_output/n100.r09.s084.untrimmed.sorted.bam\" -b \"n100.r09.s084_output/n100.r09.s084.primers.bed\" -p \"n100.r09.s084_output/n100.r09.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam\" \"n100.r09.s084_output/n100.r09.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s084_output/n100.r09.s084.reference.fas\" \"n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam\" > \"n100.r09.s084_output/n100.r09.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s084_output/n100.r09.s084.reference.fas\" --call-indels \"n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam\" > \"n100.r09.s084_output/n100.r09.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam\" > \"n100.r09.s084_output/n100.r09.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s084_output/n100.r09.s084.depth.txt\" \"n100.r09.s084_output/n100.r09.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s084_output/n100.r09.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s084_output/n100.r09.s084.reference.fas\" | bcftools consensus -m \"n100.r09.s084_output/n100.r09.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s084_output/n100.r09.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c61cb881 (flow 380dcf18): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s001_output\"\n        wget -O \"n100.r09.s001_output/n100.r09.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s001_output/n100.r09.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s001_output/n100.r09.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s001_output/n100.r09.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s001_output/n100.r09.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s001_output/n100.r09.s001.reference.fas\" \"n100.r09.s001_output/n100.r09.s001.fq1.fastq\" \"n100.r09.s001_output/n100.r09.s001.fq2.fastq\" | samtools view -bS - > \"n100.r09.s001_output/n100.r09.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s001_output/n100.r09.s001.untrimmed.sorted.bam\" \"n100.r09.s001_output/n100.r09.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s001_output/n100.r09.s001.untrimmed.sorted.bam\" -b \"n100.r09.s001_output/n100.r09.s001.primers.bed\" -p \"n100.r09.s001_output/n100.r09.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam\" \"n100.r09.s001_output/n100.r09.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s001_output/n100.r09.s001.reference.fas\" \"n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam\" > \"n100.r09.s001_output/n100.r09.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s001_output/n100.r09.s001.reference.fas\" --call-indels \"n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam\" > \"n100.r09.s001_output/n100.r09.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam\" > \"n100.r09.s001_output/n100.r09.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s001_output/n100.r09.s001.depth.txt\" \"n100.r09.s001_output/n100.r09.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s001_output/n100.r09.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s001_output/n100.r09.s001.reference.fas\" | bcftools consensus -m \"n100.r09.s001_output/n100.r09.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s001_output/n100.r09.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c5ef6095 (flow 7b48a912): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s055_output\"\n        wget -O \"n100.r09.s055_output/n100.r09.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s055_output/n100.r09.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s055_output/n100.r09.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s055_output/n100.r09.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s055_output/n100.r09.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s055_output/n100.r09.s055.reference.fas\" \"n100.r09.s055_output/n100.r09.s055.fq1.fastq\" \"n100.r09.s055_output/n100.r09.s055.fq2.fastq\" | samtools view -bS - > \"n100.r09.s055_output/n100.r09.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s055_output/n100.r09.s055.untrimmed.sorted.bam\" \"n100.r09.s055_output/n100.r09.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s055_output/n100.r09.s055.untrimmed.sorted.bam\" -b \"n100.r09.s055_output/n100.r09.s055.primers.bed\" -p \"n100.r09.s055_output/n100.r09.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam\" \"n100.r09.s055_output/n100.r09.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s055_output/n100.r09.s055.reference.fas\" \"n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam\" > \"n100.r09.s055_output/n100.r09.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s055_output/n100.r09.s055.reference.fas\" --call-indels \"n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam\" > \"n100.r09.s055_output/n100.r09.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam\" > \"n100.r09.s055_output/n100.r09.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s055_output/n100.r09.s055.depth.txt\" \"n100.r09.s055_output/n100.r09.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s055_output/n100.r09.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s055_output/n100.r09.s055.reference.fas\" | bcftools consensus -m \"n100.r09.s055_output/n100.r09.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s055_output/n100.r09.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 55154fab (flow 7e991e05): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s070_output\"\n        wget -O \"n100.r09.s070_output/n100.r09.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s070_output/n100.r09.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s070_output/n100.r09.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s070_output/n100.r09.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s070_output/n100.r09.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s070_output/n100.r09.s070.reference.fas\" \"n100.r09.s070_output/n100.r09.s070.fq1.fastq\" \"n100.r09.s070_output/n100.r09.s070.fq2.fastq\" | samtools view -bS - > \"n100.r09.s070_output/n100.r09.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s070_output/n100.r09.s070.untrimmed.sorted.bam\" \"n100.r09.s070_output/n100.r09.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s070_output/n100.r09.s070.untrimmed.sorted.bam\" -b \"n100.r09.s070_output/n100.r09.s070.primers.bed\" -p \"n100.r09.s070_output/n100.r09.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam\" \"n100.r09.s070_output/n100.r09.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s070_output/n100.r09.s070.reference.fas\" \"n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam\" > \"n100.r09.s070_output/n100.r09.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s070_output/n100.r09.s070.reference.fas\" --call-indels \"n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam\" > \"n100.r09.s070_output/n100.r09.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam\" > \"n100.r09.s070_output/n100.r09.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s070_output/n100.r09.s070.depth.txt\" \"n100.r09.s070_output/n100.r09.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s070_output/n100.r09.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s070_output/n100.r09.s070.reference.fas\" | bcftools consensus -m \"n100.r09.s070_output/n100.r09.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s070_output/n100.r09.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 6a9c93cc (flow 0e69c9bc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s068_output\"\n        wget -O \"n100.r09.s068_output/n100.r09.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s068_output/n100.r09.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s068_output/n100.r09.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s068_output/n100.r09.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s068_output/n100.r09.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s068_output/n100.r09.s068.reference.fas\" \"n100.r09.s068_output/n100.r09.s068.fq1.fastq\" \"n100.r09.s068_output/n100.r09.s068.fq2.fastq\" | samtools view -bS - > \"n100.r09.s068_output/n100.r09.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s068_output/n100.r09.s068.untrimmed.sorted.bam\" \"n100.r09.s068_output/n100.r09.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s068_output/n100.r09.s068.untrimmed.sorted.bam\" -b \"n100.r09.s068_output/n100.r09.s068.primers.bed\" -p \"n100.r09.s068_output/n100.r09.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam\" \"n100.r09.s068_output/n100.r09.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s068_output/n100.r09.s068.reference.fas\" \"n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam\" > \"n100.r09.s068_output/n100.r09.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s068_output/n100.r09.s068.reference.fas\" --call-indels \"n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam\" > \"n100.r09.s068_output/n100.r09.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam\" > \"n100.r09.s068_output/n100.r09.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s068_output/n100.r09.s068.depth.txt\" \"n100.r09.s068_output/n100.r09.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s068_output/n100.r09.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s068_output/n100.r09.s068.reference.fas\" | bcftools consensus -m \"n100.r09.s068_output/n100.r09.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s068_output/n100.r09.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 1f0f569e (flow 945735dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s028_output\"\n        wget -O \"n100.r09.s028_output/n100.r09.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s028_output/n100.r09.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s028_output/n100.r09.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s028_output/n100.r09.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s028_output/n100.r09.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s028_output/n100.r09.s028.reference.fas\" \"n100.r09.s028_output/n100.r09.s028.fq1.fastq\" \"n100.r09.s028_output/n100.r09.s028.fq2.fastq\" | samtools view -bS - > \"n100.r09.s028_output/n100.r09.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s028_output/n100.r09.s028.untrimmed.sorted.bam\" \"n100.r09.s028_output/n100.r09.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s028_output/n100.r09.s028.untrimmed.sorted.bam\" -b \"n100.r09.s028_output/n100.r09.s028.primers.bed\" -p \"n100.r09.s028_output/n100.r09.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam\" \"n100.r09.s028_output/n100.r09.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s028_output/n100.r09.s028.reference.fas\" \"n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam\" > \"n100.r09.s028_output/n100.r09.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s028_output/n100.r09.s028.reference.fas\" --call-indels \"n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam\" > \"n100.r09.s028_output/n100.r09.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam\" > \"n100.r09.s028_output/n100.r09.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s028_output/n100.r09.s028.depth.txt\" \"n100.r09.s028_output/n100.r09.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s028_output/n100.r09.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s028_output/n100.r09.s028.reference.fas\" | bcftools consensus -m \"n100.r09.s028_output/n100.r09.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s028_output/n100.r09.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task adaa95a9 (flow 48730549): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s086_output\"\n        wget -O \"n100.r09.s086_output/n100.r09.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s086_output/n100.r09.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s086_output/n100.r09.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s086_output/n100.r09.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s086_output/n100.r09.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s086_output/n100.r09.s086.reference.fas\" \"n100.r09.s086_output/n100.r09.s086.fq1.fastq\" \"n100.r09.s086_output/n100.r09.s086.fq2.fastq\" | samtools view -bS - > \"n100.r09.s086_output/n100.r09.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s086_output/n100.r09.s086.untrimmed.sorted.bam\" \"n100.r09.s086_output/n100.r09.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s086_output/n100.r09.s086.untrimmed.sorted.bam\" -b \"n100.r09.s086_output/n100.r09.s086.primers.bed\" -p \"n100.r09.s086_output/n100.r09.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam\" \"n100.r09.s086_output/n100.r09.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s086_output/n100.r09.s086.reference.fas\" \"n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam\" > \"n100.r09.s086_output/n100.r09.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s086_output/n100.r09.s086.reference.fas\" --call-indels \"n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam\" > \"n100.r09.s086_output/n100.r09.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam\" > \"n100.r09.s086_output/n100.r09.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s086_output/n100.r09.s086.depth.txt\" \"n100.r09.s086_output/n100.r09.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s086_output/n100.r09.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s086_output/n100.r09.s086.reference.fas\" | bcftools consensus -m \"n100.r09.s086_output/n100.r09.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s086_output/n100.r09.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 6798e2db (flow b27ceb8c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s079_output\"\n        wget -O \"n100.r09.s079_output/n100.r09.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s079_output/n100.r09.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s079_output/n100.r09.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s079_output/n100.r09.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s079_output/n100.r09.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s079_output/n100.r09.s079.reference.fas\" \"n100.r09.s079_output/n100.r09.s079.fq1.fastq\" \"n100.r09.s079_output/n100.r09.s079.fq2.fastq\" | samtools view -bS - > \"n100.r09.s079_output/n100.r09.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s079_output/n100.r09.s079.untrimmed.sorted.bam\" \"n100.r09.s079_output/n100.r09.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s079_output/n100.r09.s079.untrimmed.sorted.bam\" -b \"n100.r09.s079_output/n100.r09.s079.primers.bed\" -p \"n100.r09.s079_output/n100.r09.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam\" \"n100.r09.s079_output/n100.r09.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s079_output/n100.r09.s079.reference.fas\" \"n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam\" > \"n100.r09.s079_output/n100.r09.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s079_output/n100.r09.s079.reference.fas\" --call-indels \"n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam\" > \"n100.r09.s079_output/n100.r09.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam\" > \"n100.r09.s079_output/n100.r09.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s079_output/n100.r09.s079.depth.txt\" \"n100.r09.s079_output/n100.r09.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s079_output/n100.r09.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s079_output/n100.r09.s079.reference.fas\" | bcftools consensus -m \"n100.r09.s079_output/n100.r09.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s079_output/n100.r09.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task e67b8fea (flow ff045352): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s078_output\"\n        wget -O \"n100.r09.s078_output/n100.r09.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s078_output/n100.r09.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s078_output/n100.r09.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s078_output/n100.r09.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s078_output/n100.r09.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s078_output/n100.r09.s078.reference.fas\" \"n100.r09.s078_output/n100.r09.s078.fq1.fastq\" \"n100.r09.s078_output/n100.r09.s078.fq2.fastq\" | samtools view -bS - > \"n100.r09.s078_output/n100.r09.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s078_output/n100.r09.s078.untrimmed.sorted.bam\" \"n100.r09.s078_output/n100.r09.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s078_output/n100.r09.s078.untrimmed.sorted.bam\" -b \"n100.r09.s078_output/n100.r09.s078.primers.bed\" -p \"n100.r09.s078_output/n100.r09.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam\" \"n100.r09.s078_output/n100.r09.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s078_output/n100.r09.s078.reference.fas\" \"n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam\" > \"n100.r09.s078_output/n100.r09.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s078_output/n100.r09.s078.reference.fas\" --call-indels \"n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam\" > \"n100.r09.s078_output/n100.r09.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam\" > \"n100.r09.s078_output/n100.r09.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s078_output/n100.r09.s078.depth.txt\" \"n100.r09.s078_output/n100.r09.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s078_output/n100.r09.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s078_output/n100.r09.s078.reference.fas\" | bcftools consensus -m \"n100.r09.s078_output/n100.r09.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s078_output/n100.r09.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 02e1d72b (flow 9bb037fa): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s034_output\"\n        wget -O \"n100.r09.s034_output/n100.r09.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s034_output/n100.r09.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s034_output/n100.r09.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s034_output/n100.r09.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s034_output/n100.r09.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s034_output/n100.r09.s034.reference.fas\" \"n100.r09.s034_output/n100.r09.s034.fq1.fastq\" \"n100.r09.s034_output/n100.r09.s034.fq2.fastq\" | samtools view -bS - > \"n100.r09.s034_output/n100.r09.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s034_output/n100.r09.s034.untrimmed.sorted.bam\" \"n100.r09.s034_output/n100.r09.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s034_output/n100.r09.s034.untrimmed.sorted.bam\" -b \"n100.r09.s034_output/n100.r09.s034.primers.bed\" -p \"n100.r09.s034_output/n100.r09.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam\" \"n100.r09.s034_output/n100.r09.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s034_output/n100.r09.s034.reference.fas\" \"n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam\" > \"n100.r09.s034_output/n100.r09.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s034_output/n100.r09.s034.reference.fas\" --call-indels \"n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam\" > \"n100.r09.s034_output/n100.r09.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam\" > \"n100.r09.s034_output/n100.r09.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s034_output/n100.r09.s034.depth.txt\" \"n100.r09.s034_output/n100.r09.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s034_output/n100.r09.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s034_output/n100.r09.s034.reference.fas\" | bcftools consensus -m \"n100.r09.s034_output/n100.r09.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s034_output/n100.r09.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 89f12d5b (flow d6d4b6d9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s003_output\"\n        wget -O \"n100.r09.s003_output/n100.r09.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s003_output/n100.r09.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s003_output/n100.r09.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s003_output/n100.r09.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s003_output/n100.r09.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s003_output/n100.r09.s003.reference.fas\" \"n100.r09.s003_output/n100.r09.s003.fq1.fastq\" \"n100.r09.s003_output/n100.r09.s003.fq2.fastq\" | samtools view -bS - > \"n100.r09.s003_output/n100.r09.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s003_output/n100.r09.s003.untrimmed.sorted.bam\" \"n100.r09.s003_output/n100.r09.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s003_output/n100.r09.s003.untrimmed.sorted.bam\" -b \"n100.r09.s003_output/n100.r09.s003.primers.bed\" -p \"n100.r09.s003_output/n100.r09.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam\" \"n100.r09.s003_output/n100.r09.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s003_output/n100.r09.s003.reference.fas\" \"n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam\" > \"n100.r09.s003_output/n100.r09.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s003_output/n100.r09.s003.reference.fas\" --call-indels \"n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam\" > \"n100.r09.s003_output/n100.r09.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam\" > \"n100.r09.s003_output/n100.r09.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s003_output/n100.r09.s003.depth.txt\" \"n100.r09.s003_output/n100.r09.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s003_output/n100.r09.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s003_output/n100.r09.s003.reference.fas\" | bcftools consensus -m \"n100.r09.s003_output/n100.r09.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s003_output/n100.r09.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 0e04bf02 (flow 9e93f670): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s021_output\"\n        wget -O \"n100.r09.s021_output/n100.r09.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s021_output/n100.r09.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s021_output/n100.r09.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s021_output/n100.r09.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s021_output/n100.r09.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s021_output/n100.r09.s021.reference.fas\" \"n100.r09.s021_output/n100.r09.s021.fq1.fastq\" \"n100.r09.s021_output/n100.r09.s021.fq2.fastq\" | samtools view -bS - > \"n100.r09.s021_output/n100.r09.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s021_output/n100.r09.s021.untrimmed.sorted.bam\" \"n100.r09.s021_output/n100.r09.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s021_output/n100.r09.s021.untrimmed.sorted.bam\" -b \"n100.r09.s021_output/n100.r09.s021.primers.bed\" -p \"n100.r09.s021_output/n100.r09.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam\" \"n100.r09.s021_output/n100.r09.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s021_output/n100.r09.s021.reference.fas\" \"n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam\" > \"n100.r09.s021_output/n100.r09.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s021_output/n100.r09.s021.reference.fas\" --call-indels \"n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam\" > \"n100.r09.s021_output/n100.r09.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam\" > \"n100.r09.s021_output/n100.r09.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s021_output/n100.r09.s021.depth.txt\" \"n100.r09.s021_output/n100.r09.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s021_output/n100.r09.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s021_output/n100.r09.s021.reference.fas\" | bcftools consensus -m \"n100.r09.s021_output/n100.r09.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s021_output/n100.r09.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task e71d796c (flow ef0a70a3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s011_output\"\n        wget -O \"n100.r09.s011_output/n100.r09.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s011_output/n100.r09.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s011_output/n100.r09.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s011_output/n100.r09.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s011_output/n100.r09.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s011_output/n100.r09.s011.reference.fas\" \"n100.r09.s011_output/n100.r09.s011.fq1.fastq\" \"n100.r09.s011_output/n100.r09.s011.fq2.fastq\" | samtools view -bS - > \"n100.r09.s011_output/n100.r09.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s011_output/n100.r09.s011.untrimmed.sorted.bam\" \"n100.r09.s011_output/n100.r09.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s011_output/n100.r09.s011.untrimmed.sorted.bam\" -b \"n100.r09.s011_output/n100.r09.s011.primers.bed\" -p \"n100.r09.s011_output/n100.r09.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam\" \"n100.r09.s011_output/n100.r09.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s011_output/n100.r09.s011.reference.fas\" \"n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam\" > \"n100.r09.s011_output/n100.r09.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s011_output/n100.r09.s011.reference.fas\" --call-indels \"n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam\" > \"n100.r09.s011_output/n100.r09.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam\" > \"n100.r09.s011_output/n100.r09.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s011_output/n100.r09.s011.depth.txt\" \"n100.r09.s011_output/n100.r09.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s011_output/n100.r09.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s011_output/n100.r09.s011.reference.fas\" | bcftools consensus -m \"n100.r09.s011_output/n100.r09.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s011_output/n100.r09.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 41e87e7d (flow 4e911385): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s090_output\"\n        wget -O \"n100.r09.s090_output/n100.r09.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s090_output/n100.r09.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s090_output/n100.r09.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s090_output/n100.r09.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s090_output/n100.r09.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s090_output/n100.r09.s090.reference.fas\" \"n100.r09.s090_output/n100.r09.s090.fq1.fastq\" \"n100.r09.s090_output/n100.r09.s090.fq2.fastq\" | samtools view -bS - > \"n100.r09.s090_output/n100.r09.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s090_output/n100.r09.s090.untrimmed.sorted.bam\" \"n100.r09.s090_output/n100.r09.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s090_output/n100.r09.s090.untrimmed.sorted.bam\" -b \"n100.r09.s090_output/n100.r09.s090.primers.bed\" -p \"n100.r09.s090_output/n100.r09.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam\" \"n100.r09.s090_output/n100.r09.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s090_output/n100.r09.s090.reference.fas\" \"n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam\" > \"n100.r09.s090_output/n100.r09.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s090_output/n100.r09.s090.reference.fas\" --call-indels \"n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam\" > \"n100.r09.s090_output/n100.r09.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam\" > \"n100.r09.s090_output/n100.r09.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s090_output/n100.r09.s090.depth.txt\" \"n100.r09.s090_output/n100.r09.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s090_output/n100.r09.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s090_output/n100.r09.s090.reference.fas\" | bcftools consensus -m \"n100.r09.s090_output/n100.r09.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s090_output/n100.r09.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task eff50ab7 (flow 9176995d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s071_output\"\n        wget -O \"n100.r09.s071_output/n100.r09.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s071_output/n100.r09.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s071_output/n100.r09.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s071_output/n100.r09.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s071_output/n100.r09.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s071_output/n100.r09.s071.reference.fas\" \"n100.r09.s071_output/n100.r09.s071.fq1.fastq\" \"n100.r09.s071_output/n100.r09.s071.fq2.fastq\" | samtools view -bS - > \"n100.r09.s071_output/n100.r09.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s071_output/n100.r09.s071.untrimmed.sorted.bam\" \"n100.r09.s071_output/n100.r09.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s071_output/n100.r09.s071.untrimmed.sorted.bam\" -b \"n100.r09.s071_output/n100.r09.s071.primers.bed\" -p \"n100.r09.s071_output/n100.r09.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam\" \"n100.r09.s071_output/n100.r09.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s071_output/n100.r09.s071.reference.fas\" \"n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam\" > \"n100.r09.s071_output/n100.r09.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s071_output/n100.r09.s071.reference.fas\" --call-indels \"n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam\" > \"n100.r09.s071_output/n100.r09.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam\" > \"n100.r09.s071_output/n100.r09.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s071_output/n100.r09.s071.depth.txt\" \"n100.r09.s071_output/n100.r09.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s071_output/n100.r09.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s071_output/n100.r09.s071.reference.fas\" | bcftools consensus -m \"n100.r09.s071_output/n100.r09.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s071_output/n100.r09.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 8c6063fe (flow 926c1f50): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s096_output\"\n        wget -O \"n100.r09.s096_output/n100.r09.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s096_output/n100.r09.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s096_output/n100.r09.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s096_output/n100.r09.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s096_output/n100.r09.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s096_output/n100.r09.s096.reference.fas\" \"n100.r09.s096_output/n100.r09.s096.fq1.fastq\" \"n100.r09.s096_output/n100.r09.s096.fq2.fastq\" | samtools view -bS - > \"n100.r09.s096_output/n100.r09.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s096_output/n100.r09.s096.untrimmed.sorted.bam\" \"n100.r09.s096_output/n100.r09.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s096_output/n100.r09.s096.untrimmed.sorted.bam\" -b \"n100.r09.s096_output/n100.r09.s096.primers.bed\" -p \"n100.r09.s096_output/n100.r09.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam\" \"n100.r09.s096_output/n100.r09.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s096_output/n100.r09.s096.reference.fas\" \"n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam\" > \"n100.r09.s096_output/n100.r09.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s096_output/n100.r09.s096.reference.fas\" --call-indels \"n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam\" > \"n100.r09.s096_output/n100.r09.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam\" > \"n100.r09.s096_output/n100.r09.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s096_output/n100.r09.s096.depth.txt\" \"n100.r09.s096_output/n100.r09.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s096_output/n100.r09.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s096_output/n100.r09.s096.reference.fas\" | bcftools consensus -m \"n100.r09.s096_output/n100.r09.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s096_output/n100.r09.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 367eab87 (flow ce2eee55): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s022_output\"\n        wget -O \"n100.r09.s022_output/n100.r09.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s022_output/n100.r09.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s022_output/n100.r09.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s022_output/n100.r09.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s022_output/n100.r09.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s022_output/n100.r09.s022.reference.fas\" \"n100.r09.s022_output/n100.r09.s022.fq1.fastq\" \"n100.r09.s022_output/n100.r09.s022.fq2.fastq\" | samtools view -bS - > \"n100.r09.s022_output/n100.r09.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s022_output/n100.r09.s022.untrimmed.sorted.bam\" \"n100.r09.s022_output/n100.r09.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s022_output/n100.r09.s022.untrimmed.sorted.bam\" -b \"n100.r09.s022_output/n100.r09.s022.primers.bed\" -p \"n100.r09.s022_output/n100.r09.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam\" \"n100.r09.s022_output/n100.r09.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s022_output/n100.r09.s022.reference.fas\" \"n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam\" > \"n100.r09.s022_output/n100.r09.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s022_output/n100.r09.s022.reference.fas\" --call-indels \"n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam\" > \"n100.r09.s022_output/n100.r09.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam\" > \"n100.r09.s022_output/n100.r09.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s022_output/n100.r09.s022.depth.txt\" \"n100.r09.s022_output/n100.r09.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s022_output/n100.r09.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s022_output/n100.r09.s022.reference.fas\" | bcftools consensus -m \"n100.r09.s022_output/n100.r09.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s022_output/n100.r09.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task ec0f1f67 (flow 400d5ba5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s029_output\"\n        wget -O \"n100.r09.s029_output/n100.r09.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s029_output/n100.r09.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s029_output/n100.r09.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s029_output/n100.r09.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s029_output/n100.r09.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s029_output/n100.r09.s029.reference.fas\" \"n100.r09.s029_output/n100.r09.s029.fq1.fastq\" \"n100.r09.s029_output/n100.r09.s029.fq2.fastq\" | samtools view -bS - > \"n100.r09.s029_output/n100.r09.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s029_output/n100.r09.s029.untrimmed.sorted.bam\" \"n100.r09.s029_output/n100.r09.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s029_output/n100.r09.s029.untrimmed.sorted.bam\" -b \"n100.r09.s029_output/n100.r09.s029.primers.bed\" -p \"n100.r09.s029_output/n100.r09.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam\" \"n100.r09.s029_output/n100.r09.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s029_output/n100.r09.s029.reference.fas\" \"n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam\" > \"n100.r09.s029_output/n100.r09.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s029_output/n100.r09.s029.reference.fas\" --call-indels \"n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam\" > \"n100.r09.s029_output/n100.r09.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam\" > \"n100.r09.s029_output/n100.r09.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s029_output/n100.r09.s029.depth.txt\" \"n100.r09.s029_output/n100.r09.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s029_output/n100.r09.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s029_output/n100.r09.s029.reference.fas\" | bcftools consensus -m \"n100.r09.s029_output/n100.r09.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s029_output/n100.r09.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 0f528024 (flow ed8c06bc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s041_output\"\n        wget -O \"n100.r09.s041_output/n100.r09.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s041_output/n100.r09.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s041_output/n100.r09.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s041_output/n100.r09.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s041_output/n100.r09.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s041_output/n100.r09.s041.reference.fas\" \"n100.r09.s041_output/n100.r09.s041.fq1.fastq\" \"n100.r09.s041_output/n100.r09.s041.fq2.fastq\" | samtools view -bS - > \"n100.r09.s041_output/n100.r09.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s041_output/n100.r09.s041.untrimmed.sorted.bam\" \"n100.r09.s041_output/n100.r09.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s041_output/n100.r09.s041.untrimmed.sorted.bam\" -b \"n100.r09.s041_output/n100.r09.s041.primers.bed\" -p \"n100.r09.s041_output/n100.r09.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam\" \"n100.r09.s041_output/n100.r09.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s041_output/n100.r09.s041.reference.fas\" \"n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam\" > \"n100.r09.s041_output/n100.r09.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s041_output/n100.r09.s041.reference.fas\" --call-indels \"n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam\" > \"n100.r09.s041_output/n100.r09.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam\" > \"n100.r09.s041_output/n100.r09.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s041_output/n100.r09.s041.depth.txt\" \"n100.r09.s041_output/n100.r09.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s041_output/n100.r09.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s041_output/n100.r09.s041.reference.fas\" | bcftools consensus -m \"n100.r09.s041_output/n100.r09.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s041_output/n100.r09.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 2564252a (flow 071f7e69): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s060_output\"\n        wget -O \"n100.r09.s060_output/n100.r09.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s060_output/n100.r09.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s060_output/n100.r09.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s060_output/n100.r09.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s060_output/n100.r09.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s060_output/n100.r09.s060.reference.fas\" \"n100.r09.s060_output/n100.r09.s060.fq1.fastq\" \"n100.r09.s060_output/n100.r09.s060.fq2.fastq\" | samtools view -bS - > \"n100.r09.s060_output/n100.r09.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s060_output/n100.r09.s060.untrimmed.sorted.bam\" \"n100.r09.s060_output/n100.r09.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s060_output/n100.r09.s060.untrimmed.sorted.bam\" -b \"n100.r09.s060_output/n100.r09.s060.primers.bed\" -p \"n100.r09.s060_output/n100.r09.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam\" \"n100.r09.s060_output/n100.r09.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s060_output/n100.r09.s060.reference.fas\" \"n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam\" > \"n100.r09.s060_output/n100.r09.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s060_output/n100.r09.s060.reference.fas\" --call-indels \"n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam\" > \"n100.r09.s060_output/n100.r09.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam\" > \"n100.r09.s060_output/n100.r09.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s060_output/n100.r09.s060.depth.txt\" \"n100.r09.s060_output/n100.r09.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s060_output/n100.r09.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s060_output/n100.r09.s060.reference.fas\" | bcftools consensus -m \"n100.r09.s060_output/n100.r09.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s060_output/n100.r09.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task d1b88294 (flow e64b8e8e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s047_output\"\n        wget -O \"n100.r09.s047_output/n100.r09.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s047_output/n100.r09.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s047_output/n100.r09.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s047_output/n100.r09.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s047_output/n100.r09.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s047_output/n100.r09.s047.reference.fas\" \"n100.r09.s047_output/n100.r09.s047.fq1.fastq\" \"n100.r09.s047_output/n100.r09.s047.fq2.fastq\" | samtools view -bS - > \"n100.r09.s047_output/n100.r09.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s047_output/n100.r09.s047.untrimmed.sorted.bam\" \"n100.r09.s047_output/n100.r09.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s047_output/n100.r09.s047.untrimmed.sorted.bam\" -b \"n100.r09.s047_output/n100.r09.s047.primers.bed\" -p \"n100.r09.s047_output/n100.r09.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam\" \"n100.r09.s047_output/n100.r09.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s047_output/n100.r09.s047.reference.fas\" \"n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam\" > \"n100.r09.s047_output/n100.r09.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s047_output/n100.r09.s047.reference.fas\" --call-indels \"n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam\" > \"n100.r09.s047_output/n100.r09.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam\" > \"n100.r09.s047_output/n100.r09.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s047_output/n100.r09.s047.depth.txt\" \"n100.r09.s047_output/n100.r09.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s047_output/n100.r09.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s047_output/n100.r09.s047.reference.fas\" | bcftools consensus -m \"n100.r09.s047_output/n100.r09.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s047_output/n100.r09.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c303b8ca (flow 79b1766d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s017_output\"\n        wget -O \"n100.r09.s017_output/n100.r09.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s017_output/n100.r09.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s017_output/n100.r09.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s017_output/n100.r09.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s017_output/n100.r09.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s017_output/n100.r09.s017.reference.fas\" \"n100.r09.s017_output/n100.r09.s017.fq1.fastq\" \"n100.r09.s017_output/n100.r09.s017.fq2.fastq\" | samtools view -bS - > \"n100.r09.s017_output/n100.r09.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s017_output/n100.r09.s017.untrimmed.sorted.bam\" \"n100.r09.s017_output/n100.r09.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s017_output/n100.r09.s017.untrimmed.sorted.bam\" -b \"n100.r09.s017_output/n100.r09.s017.primers.bed\" -p \"n100.r09.s017_output/n100.r09.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam\" \"n100.r09.s017_output/n100.r09.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s017_output/n100.r09.s017.reference.fas\" \"n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam\" > \"n100.r09.s017_output/n100.r09.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s017_output/n100.r09.s017.reference.fas\" --call-indels \"n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam\" > \"n100.r09.s017_output/n100.r09.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam\" > \"n100.r09.s017_output/n100.r09.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s017_output/n100.r09.s017.depth.txt\" \"n100.r09.s017_output/n100.r09.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s017_output/n100.r09.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s017_output/n100.r09.s017.reference.fas\" | bcftools consensus -m \"n100.r09.s017_output/n100.r09.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s017_output/n100.r09.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 2c100d29 (flow e13da95a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s072_output\"\n        wget -O \"n100.r09.s072_output/n100.r09.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s072_output/n100.r09.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s072_output/n100.r09.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s072_output/n100.r09.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s072_output/n100.r09.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s072_output/n100.r09.s072.reference.fas\" \"n100.r09.s072_output/n100.r09.s072.fq1.fastq\" \"n100.r09.s072_output/n100.r09.s072.fq2.fastq\" | samtools view -bS - > \"n100.r09.s072_output/n100.r09.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s072_output/n100.r09.s072.untrimmed.sorted.bam\" \"n100.r09.s072_output/n100.r09.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s072_output/n100.r09.s072.untrimmed.sorted.bam\" -b \"n100.r09.s072_output/n100.r09.s072.primers.bed\" -p \"n100.r09.s072_output/n100.r09.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam\" \"n100.r09.s072_output/n100.r09.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s072_output/n100.r09.s072.reference.fas\" \"n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam\" > \"n100.r09.s072_output/n100.r09.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s072_output/n100.r09.s072.reference.fas\" --call-indels \"n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam\" > \"n100.r09.s072_output/n100.r09.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam\" > \"n100.r09.s072_output/n100.r09.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s072_output/n100.r09.s072.depth.txt\" \"n100.r09.s072_output/n100.r09.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s072_output/n100.r09.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s072_output/n100.r09.s072.reference.fas\" | bcftools consensus -m \"n100.r09.s072_output/n100.r09.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s072_output/n100.r09.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task f7e7564f (flow cdae4b3f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s007_output\"\n        wget -O \"n100.r09.s007_output/n100.r09.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s007_output/n100.r09.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s007_output/n100.r09.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s007_output/n100.r09.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s007_output/n100.r09.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s007_output/n100.r09.s007.reference.fas\" \"n100.r09.s007_output/n100.r09.s007.fq1.fastq\" \"n100.r09.s007_output/n100.r09.s007.fq2.fastq\" | samtools view -bS - > \"n100.r09.s007_output/n100.r09.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s007_output/n100.r09.s007.untrimmed.sorted.bam\" \"n100.r09.s007_output/n100.r09.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s007_output/n100.r09.s007.untrimmed.sorted.bam\" -b \"n100.r09.s007_output/n100.r09.s007.primers.bed\" -p \"n100.r09.s007_output/n100.r09.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam\" \"n100.r09.s007_output/n100.r09.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s007_output/n100.r09.s007.reference.fas\" \"n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam\" > \"n100.r09.s007_output/n100.r09.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s007_output/n100.r09.s007.reference.fas\" --call-indels \"n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam\" > \"n100.r09.s007_output/n100.r09.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam\" > \"n100.r09.s007_output/n100.r09.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s007_output/n100.r09.s007.depth.txt\" \"n100.r09.s007_output/n100.r09.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s007_output/n100.r09.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s007_output/n100.r09.s007.reference.fas\" | bcftools consensus -m \"n100.r09.s007_output/n100.r09.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s007_output/n100.r09.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 6c9cf8f0 (flow 87f0b2e1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s089_output\"\n        wget -O \"n100.r09.s089_output/n100.r09.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s089_output/n100.r09.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s089_output/n100.r09.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s089_output/n100.r09.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s089_output/n100.r09.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s089_output/n100.r09.s089.reference.fas\" \"n100.r09.s089_output/n100.r09.s089.fq1.fastq\" \"n100.r09.s089_output/n100.r09.s089.fq2.fastq\" | samtools view -bS - > \"n100.r09.s089_output/n100.r09.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s089_output/n100.r09.s089.untrimmed.sorted.bam\" \"n100.r09.s089_output/n100.r09.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s089_output/n100.r09.s089.untrimmed.sorted.bam\" -b \"n100.r09.s089_output/n100.r09.s089.primers.bed\" -p \"n100.r09.s089_output/n100.r09.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam\" \"n100.r09.s089_output/n100.r09.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s089_output/n100.r09.s089.reference.fas\" \"n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam\" > \"n100.r09.s089_output/n100.r09.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s089_output/n100.r09.s089.reference.fas\" --call-indels \"n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam\" > \"n100.r09.s089_output/n100.r09.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam\" > \"n100.r09.s089_output/n100.r09.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s089_output/n100.r09.s089.depth.txt\" \"n100.r09.s089_output/n100.r09.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s089_output/n100.r09.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s089_output/n100.r09.s089.reference.fas\" | bcftools consensus -m \"n100.r09.s089_output/n100.r09.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s089_output/n100.r09.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task df2d184f (flow 15b3bc1f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s023_output\"\n        wget -O \"n100.r09.s023_output/n100.r09.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s023_output/n100.r09.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s023_output/n100.r09.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s023_output/n100.r09.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s023_output/n100.r09.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s023_output/n100.r09.s023.reference.fas\" \"n100.r09.s023_output/n100.r09.s023.fq1.fastq\" \"n100.r09.s023_output/n100.r09.s023.fq2.fastq\" | samtools view -bS - > \"n100.r09.s023_output/n100.r09.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s023_output/n100.r09.s023.untrimmed.sorted.bam\" \"n100.r09.s023_output/n100.r09.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s023_output/n100.r09.s023.untrimmed.sorted.bam\" -b \"n100.r09.s023_output/n100.r09.s023.primers.bed\" -p \"n100.r09.s023_output/n100.r09.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam\" \"n100.r09.s023_output/n100.r09.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s023_output/n100.r09.s023.reference.fas\" \"n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam\" > \"n100.r09.s023_output/n100.r09.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s023_output/n100.r09.s023.reference.fas\" --call-indels \"n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam\" > \"n100.r09.s023_output/n100.r09.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam\" > \"n100.r09.s023_output/n100.r09.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s023_output/n100.r09.s023.depth.txt\" \"n100.r09.s023_output/n100.r09.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s023_output/n100.r09.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s023_output/n100.r09.s023.reference.fas\" | bcftools consensus -m \"n100.r09.s023_output/n100.r09.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s023_output/n100.r09.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task a6886853 (flow 3ff94c60): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s024_output\"\n        wget -O \"n100.r09.s024_output/n100.r09.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s024_output/n100.r09.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s024_output/n100.r09.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s024_output/n100.r09.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s024_output/n100.r09.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s024_output/n100.r09.s024.reference.fas\" \"n100.r09.s024_output/n100.r09.s024.fq1.fastq\" \"n100.r09.s024_output/n100.r09.s024.fq2.fastq\" | samtools view -bS - > \"n100.r09.s024_output/n100.r09.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s024_output/n100.r09.s024.untrimmed.sorted.bam\" \"n100.r09.s024_output/n100.r09.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s024_output/n100.r09.s024.untrimmed.sorted.bam\" -b \"n100.r09.s024_output/n100.r09.s024.primers.bed\" -p \"n100.r09.s024_output/n100.r09.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam\" \"n100.r09.s024_output/n100.r09.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s024_output/n100.r09.s024.reference.fas\" \"n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam\" > \"n100.r09.s024_output/n100.r09.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s024_output/n100.r09.s024.reference.fas\" --call-indels \"n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam\" > \"n100.r09.s024_output/n100.r09.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam\" > \"n100.r09.s024_output/n100.r09.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s024_output/n100.r09.s024.depth.txt\" \"n100.r09.s024_output/n100.r09.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s024_output/n100.r09.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s024_output/n100.r09.s024.reference.fas\" | bcftools consensus -m \"n100.r09.s024_output/n100.r09.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s024_output/n100.r09.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task dd516de3 (flow 4874cac6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s094_output\"\n        wget -O \"n100.r09.s094_output/n100.r09.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s094_output/n100.r09.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s094_output/n100.r09.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s094_output/n100.r09.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s094_output/n100.r09.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s094_output/n100.r09.s094.reference.fas\" \"n100.r09.s094_output/n100.r09.s094.fq1.fastq\" \"n100.r09.s094_output/n100.r09.s094.fq2.fastq\" | samtools view -bS - > \"n100.r09.s094_output/n100.r09.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s094_output/n100.r09.s094.untrimmed.sorted.bam\" \"n100.r09.s094_output/n100.r09.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s094_output/n100.r09.s094.untrimmed.sorted.bam\" -b \"n100.r09.s094_output/n100.r09.s094.primers.bed\" -p \"n100.r09.s094_output/n100.r09.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam\" \"n100.r09.s094_output/n100.r09.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s094_output/n100.r09.s094.reference.fas\" \"n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam\" > \"n100.r09.s094_output/n100.r09.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s094_output/n100.r09.s094.reference.fas\" --call-indels \"n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam\" > \"n100.r09.s094_output/n100.r09.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam\" > \"n100.r09.s094_output/n100.r09.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s094_output/n100.r09.s094.depth.txt\" \"n100.r09.s094_output/n100.r09.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s094_output/n100.r09.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s094_output/n100.r09.s094.reference.fas\" | bcftools consensus -m \"n100.r09.s094_output/n100.r09.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s094_output/n100.r09.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 43278a34 (flow 85764be5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s093_output\"\n        wget -O \"n100.r09.s093_output/n100.r09.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s093_output/n100.r09.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s093_output/n100.r09.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s093_output/n100.r09.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s093_output/n100.r09.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s093_output/n100.r09.s093.reference.fas\" \"n100.r09.s093_output/n100.r09.s093.fq1.fastq\" \"n100.r09.s093_output/n100.r09.s093.fq2.fastq\" | samtools view -bS - > \"n100.r09.s093_output/n100.r09.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s093_output/n100.r09.s093.untrimmed.sorted.bam\" \"n100.r09.s093_output/n100.r09.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s093_output/n100.r09.s093.untrimmed.sorted.bam\" -b \"n100.r09.s093_output/n100.r09.s093.primers.bed\" -p \"n100.r09.s093_output/n100.r09.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam\" \"n100.r09.s093_output/n100.r09.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s093_output/n100.r09.s093.reference.fas\" \"n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam\" > \"n100.r09.s093_output/n100.r09.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s093_output/n100.r09.s093.reference.fas\" --call-indels \"n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam\" > \"n100.r09.s093_output/n100.r09.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam\" > \"n100.r09.s093_output/n100.r09.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s093_output/n100.r09.s093.depth.txt\" \"n100.r09.s093_output/n100.r09.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s093_output/n100.r09.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s093_output/n100.r09.s093.reference.fas\" | bcftools consensus -m \"n100.r09.s093_output/n100.r09.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s093_output/n100.r09.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 1503efcb (flow 29954b22): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s043_output\"\n        wget -O \"n100.r09.s043_output/n100.r09.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s043_output/n100.r09.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s043_output/n100.r09.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s043_output/n100.r09.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s043_output/n100.r09.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s043_output/n100.r09.s043.reference.fas\" \"n100.r09.s043_output/n100.r09.s043.fq1.fastq\" \"n100.r09.s043_output/n100.r09.s043.fq2.fastq\" | samtools view -bS - > \"n100.r09.s043_output/n100.r09.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s043_output/n100.r09.s043.untrimmed.sorted.bam\" \"n100.r09.s043_output/n100.r09.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s043_output/n100.r09.s043.untrimmed.sorted.bam\" -b \"n100.r09.s043_output/n100.r09.s043.primers.bed\" -p \"n100.r09.s043_output/n100.r09.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam\" \"n100.r09.s043_output/n100.r09.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s043_output/n100.r09.s043.reference.fas\" \"n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam\" > \"n100.r09.s043_output/n100.r09.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s043_output/n100.r09.s043.reference.fas\" --call-indels \"n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam\" > \"n100.r09.s043_output/n100.r09.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam\" > \"n100.r09.s043_output/n100.r09.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s043_output/n100.r09.s043.depth.txt\" \"n100.r09.s043_output/n100.r09.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s043_output/n100.r09.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s043_output/n100.r09.s043.reference.fas\" | bcftools consensus -m \"n100.r09.s043_output/n100.r09.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s043_output/n100.r09.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task f0471d6b (flow 3e879b55): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s018_output\"\n        wget -O \"n100.r09.s018_output/n100.r09.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s018_output/n100.r09.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s018_output/n100.r09.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s018_output/n100.r09.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s018_output/n100.r09.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s018_output/n100.r09.s018.reference.fas\" \"n100.r09.s018_output/n100.r09.s018.fq1.fastq\" \"n100.r09.s018_output/n100.r09.s018.fq2.fastq\" | samtools view -bS - > \"n100.r09.s018_output/n100.r09.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s018_output/n100.r09.s018.untrimmed.sorted.bam\" \"n100.r09.s018_output/n100.r09.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s018_output/n100.r09.s018.untrimmed.sorted.bam\" -b \"n100.r09.s018_output/n100.r09.s018.primers.bed\" -p \"n100.r09.s018_output/n100.r09.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam\" \"n100.r09.s018_output/n100.r09.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s018_output/n100.r09.s018.reference.fas\" \"n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam\" > \"n100.r09.s018_output/n100.r09.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s018_output/n100.r09.s018.reference.fas\" --call-indels \"n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam\" > \"n100.r09.s018_output/n100.r09.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam\" > \"n100.r09.s018_output/n100.r09.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s018_output/n100.r09.s018.depth.txt\" \"n100.r09.s018_output/n100.r09.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s018_output/n100.r09.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s018_output/n100.r09.s018.reference.fas\" | bcftools consensus -m \"n100.r09.s018_output/n100.r09.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s018_output/n100.r09.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 704e844b (flow 7c7b20f0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s087_output\"\n        wget -O \"n100.r09.s087_output/n100.r09.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s087_output/n100.r09.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s087_output/n100.r09.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s087_output/n100.r09.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s087_output/n100.r09.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s087_output/n100.r09.s087.reference.fas\" \"n100.r09.s087_output/n100.r09.s087.fq1.fastq\" \"n100.r09.s087_output/n100.r09.s087.fq2.fastq\" | samtools view -bS - > \"n100.r09.s087_output/n100.r09.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s087_output/n100.r09.s087.untrimmed.sorted.bam\" \"n100.r09.s087_output/n100.r09.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s087_output/n100.r09.s087.untrimmed.sorted.bam\" -b \"n100.r09.s087_output/n100.r09.s087.primers.bed\" -p \"n100.r09.s087_output/n100.r09.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam\" \"n100.r09.s087_output/n100.r09.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s087_output/n100.r09.s087.reference.fas\" \"n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam\" > \"n100.r09.s087_output/n100.r09.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s087_output/n100.r09.s087.reference.fas\" --call-indels \"n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam\" > \"n100.r09.s087_output/n100.r09.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam\" > \"n100.r09.s087_output/n100.r09.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s087_output/n100.r09.s087.depth.txt\" \"n100.r09.s087_output/n100.r09.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s087_output/n100.r09.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s087_output/n100.r09.s087.reference.fas\" | bcftools consensus -m \"n100.r09.s087_output/n100.r09.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s087_output/n100.r09.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task c4a764b4 (flow 9fc13a0b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s098_output\"\n        wget -O \"n100.r09.s098_output/n100.r09.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s098_output/n100.r09.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s098_output/n100.r09.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s098_output/n100.r09.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s098_output/n100.r09.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s098_output/n100.r09.s098.reference.fas\" \"n100.r09.s098_output/n100.r09.s098.fq1.fastq\" \"n100.r09.s098_output/n100.r09.s098.fq2.fastq\" | samtools view -bS - > \"n100.r09.s098_output/n100.r09.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s098_output/n100.r09.s098.untrimmed.sorted.bam\" \"n100.r09.s098_output/n100.r09.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s098_output/n100.r09.s098.untrimmed.sorted.bam\" -b \"n100.r09.s098_output/n100.r09.s098.primers.bed\" -p \"n100.r09.s098_output/n100.r09.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam\" \"n100.r09.s098_output/n100.r09.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s098_output/n100.r09.s098.reference.fas\" \"n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam\" > \"n100.r09.s098_output/n100.r09.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s098_output/n100.r09.s098.reference.fas\" --call-indels \"n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam\" > \"n100.r09.s098_output/n100.r09.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam\" > \"n100.r09.s098_output/n100.r09.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s098_output/n100.r09.s098.depth.txt\" \"n100.r09.s098_output/n100.r09.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s098_output/n100.r09.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s098_output/n100.r09.s098.reference.fas\" | bcftools consensus -m \"n100.r09.s098_output/n100.r09.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s098_output/n100.r09.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task e5db6835 (flow a262e34f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s099_output\"\n        wget -O \"n100.r09.s099_output/n100.r09.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s099_output/n100.r09.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s099_output/n100.r09.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s099_output/n100.r09.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s099_output/n100.r09.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s099_output/n100.r09.s099.reference.fas\" \"n100.r09.s099_output/n100.r09.s099.fq1.fastq\" \"n100.r09.s099_output/n100.r09.s099.fq2.fastq\" | samtools view -bS - > \"n100.r09.s099_output/n100.r09.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s099_output/n100.r09.s099.untrimmed.sorted.bam\" \"n100.r09.s099_output/n100.r09.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s099_output/n100.r09.s099.untrimmed.sorted.bam\" -b \"n100.r09.s099_output/n100.r09.s099.primers.bed\" -p \"n100.r09.s099_output/n100.r09.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam\" \"n100.r09.s099_output/n100.r09.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s099_output/n100.r09.s099.reference.fas\" \"n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam\" > \"n100.r09.s099_output/n100.r09.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s099_output/n100.r09.s099.reference.fas\" --call-indels \"n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam\" > \"n100.r09.s099_output/n100.r09.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam\" > \"n100.r09.s099_output/n100.r09.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s099_output/n100.r09.s099.depth.txt\" \"n100.r09.s099_output/n100.r09.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s099_output/n100.r09.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s099_output/n100.r09.s099.reference.fas\" | bcftools consensus -m \"n100.r09.s099_output/n100.r09.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s099_output/n100.r09.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 67ea8735 (flow 75e64e3f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s013_output\"\n        wget -O \"n100.r09.s013_output/n100.r09.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s013_output/n100.r09.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s013_output/n100.r09.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s013_output/n100.r09.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s013_output/n100.r09.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s013_output/n100.r09.s013.reference.fas\" \"n100.r09.s013_output/n100.r09.s013.fq1.fastq\" \"n100.r09.s013_output/n100.r09.s013.fq2.fastq\" | samtools view -bS - > \"n100.r09.s013_output/n100.r09.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s013_output/n100.r09.s013.untrimmed.sorted.bam\" \"n100.r09.s013_output/n100.r09.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s013_output/n100.r09.s013.untrimmed.sorted.bam\" -b \"n100.r09.s013_output/n100.r09.s013.primers.bed\" -p \"n100.r09.s013_output/n100.r09.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam\" \"n100.r09.s013_output/n100.r09.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s013_output/n100.r09.s013.reference.fas\" \"n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam\" > \"n100.r09.s013_output/n100.r09.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s013_output/n100.r09.s013.reference.fas\" --call-indels \"n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam\" > \"n100.r09.s013_output/n100.r09.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam\" > \"n100.r09.s013_output/n100.r09.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s013_output/n100.r09.s013.depth.txt\" \"n100.r09.s013_output/n100.r09.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s013_output/n100.r09.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s013_output/n100.r09.s013.reference.fas\" | bcftools consensus -m \"n100.r09.s013_output/n100.r09.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s013_output/n100.r09.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 58a3aaa8 (flow 68848ea7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s075_output\"\n        wget -O \"n100.r09.s075_output/n100.r09.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s075_output/n100.r09.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s075_output/n100.r09.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s075_output/n100.r09.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s075_output/n100.r09.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s075_output/n100.r09.s075.reference.fas\" \"n100.r09.s075_output/n100.r09.s075.fq1.fastq\" \"n100.r09.s075_output/n100.r09.s075.fq2.fastq\" | samtools view -bS - > \"n100.r09.s075_output/n100.r09.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s075_output/n100.r09.s075.untrimmed.sorted.bam\" \"n100.r09.s075_output/n100.r09.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s075_output/n100.r09.s075.untrimmed.sorted.bam\" -b \"n100.r09.s075_output/n100.r09.s075.primers.bed\" -p \"n100.r09.s075_output/n100.r09.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam\" \"n100.r09.s075_output/n100.r09.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s075_output/n100.r09.s075.reference.fas\" \"n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam\" > \"n100.r09.s075_output/n100.r09.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s075_output/n100.r09.s075.reference.fas\" --call-indels \"n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam\" > \"n100.r09.s075_output/n100.r09.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam\" > \"n100.r09.s075_output/n100.r09.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s075_output/n100.r09.s075.depth.txt\" \"n100.r09.s075_output/n100.r09.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s075_output/n100.r09.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s075_output/n100.r09.s075.reference.fas\" | bcftools consensus -m \"n100.r09.s075_output/n100.r09.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s075_output/n100.r09.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task b5bd2ae1 (flow 2a7d8e22): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s076_output\"\n        wget -O \"n100.r09.s076_output/n100.r09.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s076_output/n100.r09.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s076_output/n100.r09.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s076_output/n100.r09.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s076_output/n100.r09.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s076_output/n100.r09.s076.reference.fas\" \"n100.r09.s076_output/n100.r09.s076.fq1.fastq\" \"n100.r09.s076_output/n100.r09.s076.fq2.fastq\" | samtools view -bS - > \"n100.r09.s076_output/n100.r09.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s076_output/n100.r09.s076.untrimmed.sorted.bam\" \"n100.r09.s076_output/n100.r09.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s076_output/n100.r09.s076.untrimmed.sorted.bam\" -b \"n100.r09.s076_output/n100.r09.s076.primers.bed\" -p \"n100.r09.s076_output/n100.r09.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam\" \"n100.r09.s076_output/n100.r09.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s076_output/n100.r09.s076.reference.fas\" \"n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam\" > \"n100.r09.s076_output/n100.r09.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s076_output/n100.r09.s076.reference.fas\" --call-indels \"n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam\" > \"n100.r09.s076_output/n100.r09.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam\" > \"n100.r09.s076_output/n100.r09.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s076_output/n100.r09.s076.depth.txt\" \"n100.r09.s076_output/n100.r09.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s076_output/n100.r09.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s076_output/n100.r09.s076.reference.fas\" | bcftools consensus -m \"n100.r09.s076_output/n100.r09.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s076_output/n100.r09.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 4ba314d6 (flow 631db24c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s100_output\"\n        wget -O \"n100.r09.s100_output/n100.r09.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s100_output/n100.r09.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s100_output/n100.r09.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s100_output/n100.r09.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s100_output/n100.r09.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s100_output/n100.r09.s100.reference.fas\" \"n100.r09.s100_output/n100.r09.s100.fq1.fastq\" \"n100.r09.s100_output/n100.r09.s100.fq2.fastq\" | samtools view -bS - > \"n100.r09.s100_output/n100.r09.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s100_output/n100.r09.s100.untrimmed.sorted.bam\" \"n100.r09.s100_output/n100.r09.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s100_output/n100.r09.s100.untrimmed.sorted.bam\" -b \"n100.r09.s100_output/n100.r09.s100.primers.bed\" -p \"n100.r09.s100_output/n100.r09.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam\" \"n100.r09.s100_output/n100.r09.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s100_output/n100.r09.s100.reference.fas\" \"n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam\" > \"n100.r09.s100_output/n100.r09.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s100_output/n100.r09.s100.reference.fas\" --call-indels \"n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam\" > \"n100.r09.s100_output/n100.r09.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam\" > \"n100.r09.s100_output/n100.r09.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s100_output/n100.r09.s100.depth.txt\" \"n100.r09.s100_output/n100.r09.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s100_output/n100.r09.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s100_output/n100.r09.s100.reference.fas\" | bcftools consensus -m \"n100.r09.s100_output/n100.r09.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s100_output/n100.r09.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task ca3bf7bf (flow 57c64a3d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s062_output\"\n        wget -O \"n100.r09.s062_output/n100.r09.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s062_output/n100.r09.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s062_output/n100.r09.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s062_output/n100.r09.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s062_output/n100.r09.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s062_output/n100.r09.s062.reference.fas\" \"n100.r09.s062_output/n100.r09.s062.fq1.fastq\" \"n100.r09.s062_output/n100.r09.s062.fq2.fastq\" | samtools view -bS - > \"n100.r09.s062_output/n100.r09.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s062_output/n100.r09.s062.untrimmed.sorted.bam\" \"n100.r09.s062_output/n100.r09.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s062_output/n100.r09.s062.untrimmed.sorted.bam\" -b \"n100.r09.s062_output/n100.r09.s062.primers.bed\" -p \"n100.r09.s062_output/n100.r09.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam\" \"n100.r09.s062_output/n100.r09.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s062_output/n100.r09.s062.reference.fas\" \"n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam\" > \"n100.r09.s062_output/n100.r09.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s062_output/n100.r09.s062.reference.fas\" --call-indels \"n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam\" > \"n100.r09.s062_output/n100.r09.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam\" > \"n100.r09.s062_output/n100.r09.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s062_output/n100.r09.s062.depth.txt\" \"n100.r09.s062_output/n100.r09.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s062_output/n100.r09.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s062_output/n100.r09.s062.reference.fas\" | bcftools consensus -m \"n100.r09.s062_output/n100.r09.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s062_output/n100.r09.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 813790ac (flow 4e9d02e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s058_output\"\n        wget -O \"n100.r09.s058_output/n100.r09.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s058_output/n100.r09.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s058_output/n100.r09.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s058_output/n100.r09.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s058_output/n100.r09.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s058_output/n100.r09.s058.reference.fas\" \"n100.r09.s058_output/n100.r09.s058.fq1.fastq\" \"n100.r09.s058_output/n100.r09.s058.fq2.fastq\" | samtools view -bS - > \"n100.r09.s058_output/n100.r09.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s058_output/n100.r09.s058.untrimmed.sorted.bam\" \"n100.r09.s058_output/n100.r09.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s058_output/n100.r09.s058.untrimmed.sorted.bam\" -b \"n100.r09.s058_output/n100.r09.s058.primers.bed\" -p \"n100.r09.s058_output/n100.r09.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam\" \"n100.r09.s058_output/n100.r09.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s058_output/n100.r09.s058.reference.fas\" \"n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam\" > \"n100.r09.s058_output/n100.r09.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s058_output/n100.r09.s058.reference.fas\" --call-indels \"n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam\" > \"n100.r09.s058_output/n100.r09.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam\" > \"n100.r09.s058_output/n100.r09.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s058_output/n100.r09.s058.depth.txt\" \"n100.r09.s058_output/n100.r09.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s058_output/n100.r09.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s058_output/n100.r09.s058.reference.fas\" | bcftools consensus -m \"n100.r09.s058_output/n100.r09.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s058_output/n100.r09.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task 4e103f12 (flow 59028377): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s057_output\"\n        wget -O \"n100.r09.s057_output/n100.r09.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s057_output/n100.r09.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s057_output/n100.r09.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s057_output/n100.r09.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s057_output/n100.r09.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s057_output/n100.r09.s057.reference.fas\" \"n100.r09.s057_output/n100.r09.s057.fq1.fastq\" \"n100.r09.s057_output/n100.r09.s057.fq2.fastq\" | samtools view -bS - > \"n100.r09.s057_output/n100.r09.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s057_output/n100.r09.s057.untrimmed.sorted.bam\" \"n100.r09.s057_output/n100.r09.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s057_output/n100.r09.s057.untrimmed.sorted.bam\" -b \"n100.r09.s057_output/n100.r09.s057.primers.bed\" -p \"n100.r09.s057_output/n100.r09.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam\" \"n100.r09.s057_output/n100.r09.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s057_output/n100.r09.s057.reference.fas\" \"n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam\" > \"n100.r09.s057_output/n100.r09.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s057_output/n100.r09.s057.reference.fas\" --call-indels \"n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam\" > \"n100.r09.s057_output/n100.r09.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam\" > \"n100.r09.s057_output/n100.r09.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s057_output/n100.r09.s057.depth.txt\" \"n100.r09.s057_output/n100.r09.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s057_output/n100.r09.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s057_output/n100.r09.s057.reference.fas\" | bcftools consensus -m \"n100.r09.s057_output/n100.r09.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s057_output/n100.r09.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:28:49 scheduler task bc405a66 (flow 4f626c55): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r09.s048_output\"\n        wget -O \"n100.r09.s048_output/n100.r09.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r09.s048_output/n100.r09.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r09.s048_output/n100.r09.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r09.s048_output/n100.r09.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r09.s048_output/n100.r09.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r09.s048_output/n100.r09.s048.reference.fas\" \"n100.r09.s048_output/n100.r09.s048.fq1.fastq\" \"n100.r09.s048_output/n100.r09.s048.fq2.fastq\" | samtools view -bS - > \"n100.r09.s048_output/n100.r09.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s048_output/n100.r09.s048.untrimmed.sorted.bam\" \"n100.r09.s048_output/n100.r09.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r09.s048_output/n100.r09.s048.untrimmed.sorted.bam\" -b \"n100.r09.s048_output/n100.r09.s048.primers.bed\" -p \"n100.r09.s048_output/n100.r09.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam\" \"n100.r09.s048_output/n100.r09.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r09.s048_output/n100.r09.s048.reference.fas\" \"n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam\" > \"n100.r09.s048_output/n100.r09.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r09.s048_output/n100.r09.s048.reference.fas\" --call-indels \"n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam\" > \"n100.r09.s048_output/n100.r09.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam\" > \"n100.r09.s048_output/n100.r09.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r09.s048_output/n100.r09.s048.depth.txt\" \"n100.r09.s048_output/n100.r09.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r09.s048_output/n100.r09.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r09.s048_output/n100.r09.s048.reference.fas\" | bcftools consensus -m \"n100.r09.s048_output/n100.r09.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r09.s048_output/n100.r09.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r09.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r09/n100.r09.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r09/n100.r09.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:29:37 scheduler task 3838912f (flow 65bdc09d): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task bc405a66 (flow 4f626c55): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 4e103f12 (flow 59028377): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 813790ac (flow 4e9d02e3): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task ca3bf7bf (flow 57c64a3d): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 4ba314d6 (flow 631db24c): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task b5bd2ae1 (flow 2a7d8e22): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 3838912f (flow 65bdc09d): loading (try 0): started
2021/07/08 17:29:37 scheduler task b5bd2ae1 (flow 2a7d8e22): loading (try 0): started
2021/07/08 17:29:37 scheduler task b5bd2ae1 (flow 2a7d8e22): loading val<.=s3://niema-test/n100/r09/n100.r09.s076_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 3838912f (flow 65bdc09d): loading val<.=s3://niema-test/n100/r09/n100.r09.s025_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ca3bf7bf (flow 57c64a3d): loading (try 0): started
2021/07/08 17:29:37 scheduler task b5bd2ae1 (flow 2a7d8e22): loading val<.=s3://niema-test/n100/r09/n100.r09.s076_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ca3bf7bf (flow 57c64a3d): loading val<.=s3://niema-test/n100/r09/n100.r09.s062_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 813790ac (flow 4e9d02e3): loading (try 0): started
2021/07/08 17:29:37 scheduler task 813790ac (flow 4e9d02e3): loading val<.=s3://niema-test/n100/r09/n100.r09.s058_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4e103f12 (flow 59028377): loading (try 0): started
2021/07/08 17:29:37 scheduler task 4e103f12 (flow 59028377): loading val<.=s3://niema-test/n100/r09/n100.r09.s057_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 3838912f (flow 65bdc09d): loading val<.=s3://niema-test/n100/r09/n100.r09.s025_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 813790ac (flow 4e9d02e3): loading val<.=s3://niema-test/n100/r09/n100.r09.s058_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task bc405a66 (flow 4f626c55): loading (try 0): started
2021/07/08 17:29:37 scheduler task bc405a66 (flow 4f626c55): loading val<.=s3://niema-test/n100/r09/n100.r09.s048_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 58a3aaa8 (flow 68848ea7): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 67ea8735 (flow 75e64e3f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task e5db6835 (flow a262e34f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c4a764b4 (flow 9fc13a0b): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 704e844b (flow 7c7b20f0): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task f0471d6b (flow 3e879b55): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 1503efcb (flow 29954b22): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 43278a34 (flow 85764be5): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task dd516de3 (flow 4874cac6): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task a6886853 (flow 3ff94c60): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 4e103f12 (flow 59028377): loading val<.=s3://niema-test/n100/r09/n100.r09.s057_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task e5db6835 (flow a262e34f): loading (try 0): started
2021/07/08 17:29:37 scheduler task 704e844b (flow 7c7b20f0): loading (try 0): started
2021/07/08 17:29:37 scheduler task 1503efcb (flow 29954b22): loading (try 0): started
2021/07/08 17:29:37 scheduler task f0471d6b (flow 3e879b55): loading (try 0): started
2021/07/08 17:29:37 scheduler task e5db6835 (flow a262e34f): loading val<.=s3://niema-test/n100/r09/n100.r09.s099_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 704e844b (flow 7c7b20f0): loading val<.=s3://niema-test/n100/r09/n100.r09.s087_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f0471d6b (flow 3e879b55): loading val<.=s3://niema-test/n100/r09/n100.r09.s018_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a6886853 (flow 3ff94c60): loading (try 0): started
2021/07/08 17:29:37 scheduler task 4ba314d6 (flow 631db24c): loading (try 0): started
2021/07/08 17:29:37 scheduler task a6886853 (flow 3ff94c60): loading val<.=s3://niema-test/n100/r09/n100.r09.s024_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4ba314d6 (flow 631db24c): loading val<.=s3://niema-test/n100/r09/n100.r09.s100_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a6886853 (flow 3ff94c60): loading val<.=s3://niema-test/n100/r09/n100.r09.s024_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4ba314d6 (flow 631db24c): loading val<.=s3://niema-test/n100/r09/n100.r09.s100_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 67ea8735 (flow 75e64e3f): loading (try 0): started
2021/07/08 17:29:37 scheduler task 67ea8735 (flow 75e64e3f): loading val<.=s3://niema-test/n100/r09/n100.r09.s013_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task df2d184f (flow 15b3bc1f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 6c9cf8f0 (flow 87f0b2e1): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task f7e7564f (flow cdae4b3f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 2c100d29 (flow e13da95a): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c303b8ca (flow 79b1766d): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task d1b88294 (flow e64b8e8e): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 2564252a (flow 071f7e69): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 0f528024 (flow ed8c06bc): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task ec0f1f67 (flow 400d5ba5): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 367eab87 (flow ce2eee55): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 8c6063fe (flow 926c1f50): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task eff50ab7 (flow 9176995d): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 41e87e7d (flow 4e911385): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task e71d796c (flow ef0a70a3): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 2564252a (flow 071f7e69): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6c9cf8f0 (flow 87f0b2e1): loading (try 0): started
2021/07/08 17:29:37 scheduler task e71d796c (flow ef0a70a3): loading (try 0): started
2021/07/08 17:29:37 scheduler task 2c100d29 (flow e13da95a): loading (try 0): started
2021/07/08 17:29:37 scheduler task e71d796c (flow ef0a70a3): loading val<.=s3://niema-test/n100/r09/n100.r09.s011_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6c9cf8f0 (flow 87f0b2e1): loading val<.=s3://niema-test/n100/r09/n100.r09.s089_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2c100d29 (flow e13da95a): loading val<.=s3://niema-test/n100/r09/n100.r09.s072_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2c100d29 (flow e13da95a): loading val<.=s3://niema-test/n100/r09/n100.r09.s072_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task df2d184f (flow 15b3bc1f): loading (try 0): started
2021/07/08 17:29:37 scheduler task df2d184f (flow 15b3bc1f): loading val<.=s3://niema-test/n100/r09/n100.r09.s023_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2564252a (flow 071f7e69): loading val<.=s3://niema-test/n100/r09/n100.r09.s060_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ec0f1f67 (flow 400d5ba5): loading (try 0): started
2021/07/08 17:29:37 scheduler task ec0f1f67 (flow 400d5ba5): loading val<.=s3://niema-test/n100/r09/n100.r09.s029_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task df2d184f (flow 15b3bc1f): loading val<.=s3://niema-test/n100/r09/n100.r09.s023_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 43278a34 (flow 85764be5): loading (try 0): started
2021/07/08 17:29:37 scheduler task e5db6835 (flow a262e34f): loading val<.=s3://niema-test/n100/r09/n100.r09.s099_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ca3bf7bf (flow 57c64a3d): loading val<.=s3://niema-test/n100/r09/n100.r09.s062_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task dd516de3 (flow 4874cac6): loading (try 0): started
2021/07/08 17:29:37 scheduler task dd516de3 (flow 4874cac6): loading val<.=s3://niema-test/n100/r09/n100.r09.s094_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 704e844b (flow 7c7b20f0): loading val<.=s3://niema-test/n100/r09/n100.r09.s087_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 58a3aaa8 (flow 68848ea7): loading (try 0): started
2021/07/08 17:29:37 scheduler task 58a3aaa8 (flow 68848ea7): loading val<.=s3://niema-test/n100/r09/n100.r09.s075_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task dd516de3 (flow 4874cac6): loading val<.=s3://niema-test/n100/r09/n100.r09.s094_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c4a764b4 (flow 9fc13a0b): loading (try 0): started
2021/07/08 17:29:37 scheduler task c4a764b4 (flow 9fc13a0b): loading val<.=s3://niema-test/n100/r09/n100.r09.s098_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 58a3aaa8 (flow 68848ea7): loading val<.=s3://niema-test/n100/r09/n100.r09.s075_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 1503efcb (flow 29954b22): loading val<.=s3://niema-test/n100/r09/n100.r09.s043_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 1503efcb (flow 29954b22): loading val<.=s3://niema-test/n100/r09/n100.r09.s043_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f0471d6b (flow 3e879b55): loading val<.=s3://niema-test/n100/r09/n100.r09.s018_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task eff50ab7 (flow 9176995d): loading (try 0): started
2021/07/08 17:29:37 scheduler task eff50ab7 (flow 9176995d): loading val<.=s3://niema-test/n100/r09/n100.r09.s071_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c4a764b4 (flow 9fc13a0b): loading val<.=s3://niema-test/n100/r09/n100.r09.s098_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c303b8ca (flow 79b1766d): loading (try 0): started
2021/07/08 17:29:37 scheduler task c303b8ca (flow 79b1766d): loading val<.=s3://niema-test/n100/r09/n100.r09.s017_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8c6063fe (flow 926c1f50): loading (try 0): started
2021/07/08 17:29:37 scheduler task c303b8ca (flow 79b1766d): loading val<.=s3://niema-test/n100/r09/n100.r09.s017_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 367eab87 (flow ce2eee55): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8c6063fe (flow 926c1f50): loading val<.=s3://niema-test/n100/r09/n100.r09.s096_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8c6063fe (flow 926c1f50): loading val<.=s3://niema-test/n100/r09/n100.r09.s096_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 367eab87 (flow ce2eee55): loading val<.=s3://niema-test/n100/r09/n100.r09.s022_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 367eab87 (flow ce2eee55): loading val<.=s3://niema-test/n100/r09/n100.r09.s022_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task bc405a66 (flow 4f626c55): loading val<.=s3://niema-test/n100/r09/n100.r09.s048_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d1b88294 (flow e64b8e8e): loading (try 0): started
2021/07/08 17:29:37 scheduler task d1b88294 (flow e64b8e8e): loading val<.=s3://niema-test/n100/r09/n100.r09.s047_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0f528024 (flow ed8c06bc): loading (try 0): started
2021/07/08 17:29:37 scheduler task 0f528024 (flow ed8c06bc): loading val<.=s3://niema-test/n100/r09/n100.r09.s041_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d1b88294 (flow e64b8e8e): loading val<.=s3://niema-test/n100/r09/n100.r09.s047_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0e04bf02 (flow 9e93f670): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 89f12d5b (flow d6d4b6d9): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 02e1d72b (flow 9bb037fa): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task e67b8fea (flow ff045352): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 6798e2db (flow b27ceb8c): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task adaa95a9 (flow 48730549): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 1f0f569e (flow 945735dc): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 6a9c93cc (flow 0e69c9bc): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 55154fab (flow 7e991e05): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c5ef6095 (flow 7b48a912): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c61cb881 (flow 380dcf18): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c8bedcb7 (flow 89fd3d0f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task ec43ea83 (flow 7b4ec1c0): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 8a72f87e (flow 1eb78b40): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 72711129 (flow ca14132b): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 5b93b009 (flow 214bd342): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 3d1fe110 (flow 3e3233db): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task f67f9364 (flow 99c25444): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 1f0f569e (flow 945735dc): loading (try 0): started
2021/07/08 17:29:37 scheduler task e67b8fea (flow ff045352): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8a72f87e (flow 1eb78b40): loading (try 0): started
2021/07/08 17:29:37 scheduler task 0e04bf02 (flow 9e93f670): loading (try 0): started
2021/07/08 17:29:37 scheduler task c61cb881 (flow 380dcf18): loading (try 0): started
2021/07/08 17:29:37 scheduler task 0e04bf02 (flow 9e93f670): loading val<.=s3://niema-test/n100/r09/n100.r09.s021_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 1f0f569e (flow 945735dc): loading val<.=s3://niema-test/n100/r09/n100.r09.s028_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task e67b8fea (flow ff045352): loading val<.=s3://niema-test/n100/r09/n100.r09.s078_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c61cb881 (flow 380dcf18): loading val<.=s3://niema-test/n100/r09/n100.r09.s001_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2a30e645 (flow 4834e08f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 0e04bf02 (flow 9e93f670): loading val<.=s3://niema-test/n100/r09/n100.r09.s021_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b2d0fd0c (flow 37d37b5c): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task d108e3c8 (flow c686feee): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 1f0f569e (flow 945735dc): loading val<.=s3://niema-test/n100/r09/n100.r09.s028_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d108e3c8 (flow c686feee): loading (try 0): started
2021/07/08 17:29:37 scheduler task d108e3c8 (flow c686feee): loading val<.=s3://niema-test/n100/r09/n100.r09.s045_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 55154fab (flow 7e991e05): loading (try 0): started
2021/07/08 17:29:37 scheduler task 55154fab (flow 7e991e05): loading val<.=s3://niema-test/n100/r09/n100.r09.s070_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2a30e645 (flow 4834e08f): loading (try 0): started
2021/07/08 17:29:37 scheduler task d108e3c8 (flow c686feee): loading val<.=s3://niema-test/n100/r09/n100.r09.s045_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2a30e645 (flow 4834e08f): loading val<.=s3://niema-test/n100/r09/n100.r09.s054_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b2d0fd0c (flow 37d37b5c): loading (try 0): started
2021/07/08 17:29:37 scheduler task b2d0fd0c (flow 37d37b5c): loading val<.=s3://niema-test/n100/r09/n100.r09.s006_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 3d1fe110 (flow 3e3233db): loading (try 0): started
2021/07/08 17:29:37 scheduler task 3d1fe110 (flow 3e3233db): loading val<.=s3://niema-test/n100/r09/n100.r09.s033_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b2d0fd0c (flow 37d37b5c): loading val<.=s3://niema-test/n100/r09/n100.r09.s006_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ec43ea83 (flow 7b4ec1c0): loading (try 0): started
2021/07/08 17:29:37 scheduler task ec43ea83 (flow 7b4ec1c0): loading val<.=s3://niema-test/n100/r09/n100.r09.s014_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 3d1fe110 (flow 3e3233db): loading val<.=s3://niema-test/n100/r09/n100.r09.s033_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6798e2db (flow b27ceb8c): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6798e2db (flow b27ceb8c): loading val<.=s3://niema-test/n100/r09/n100.r09.s079_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ec43ea83 (flow 7b4ec1c0): loading val<.=s3://niema-test/n100/r09/n100.r09.s014_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f7e7564f (flow cdae4b3f): loading (try 0): started
2021/07/08 17:29:37 scheduler task f7e7564f (flow cdae4b3f): loading val<.=s3://niema-test/n100/r09/n100.r09.s007_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6798e2db (flow b27ceb8c): loading val<.=s3://niema-test/n100/r09/n100.r09.s079_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2564252a (flow 071f7e69): loading val<.=s3://niema-test/n100/r09/n100.r09.s060_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f7e7564f (flow cdae4b3f): loading val<.=s3://niema-test/n100/r09/n100.r09.s007_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6c9cf8f0 (flow 87f0b2e1): loading val<.=s3://niema-test/n100/r09/n100.r09.s089_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task e71d796c (flow ef0a70a3): loading val<.=s3://niema-test/n100/r09/n100.r09.s011_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 43278a34 (flow 85764be5): loading val<.=s3://niema-test/n100/r09/n100.r09.s093_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task ec0f1f67 (flow 400d5ba5): loading val<.=s3://niema-test/n100/r09/n100.r09.s029_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 43278a34 (flow 85764be5): loading val<.=s3://niema-test/n100/r09/n100.r09.s093_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task eff50ab7 (flow 9176995d): loading val<.=s3://niema-test/n100/r09/n100.r09.s071_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 41e87e7d (flow 4e911385): loading (try 0): started
2021/07/08 17:29:37 scheduler task 41e87e7d (flow 4e911385): loading val<.=s3://niema-test/n100/r09/n100.r09.s090_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 89f12d5b (flow d6d4b6d9): loading (try 0): started
2021/07/08 17:29:37 scheduler task 89f12d5b (flow d6d4b6d9): loading val<.=s3://niema-test/n100/r09/n100.r09.s003_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 41e87e7d (flow 4e911385): loading val<.=s3://niema-test/n100/r09/n100.r09.s090_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c8bedcb7 (flow 89fd3d0f): loading (try 0): started
2021/07/08 17:29:37 scheduler task c8bedcb7 (flow 89fd3d0f): loading val<.=s3://niema-test/n100/r09/n100.r09.s084_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 89f12d5b (flow d6d4b6d9): loading val<.=s3://niema-test/n100/r09/n100.r09.s003_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0f528024 (flow ed8c06bc): loading val<.=s3://niema-test/n100/r09/n100.r09.s041_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 67ea8735 (flow 75e64e3f): loading val<.=s3://niema-test/n100/r09/n100.r09.s013_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c5ef6095 (flow 7b48a912): loading (try 0): started
2021/07/08 17:29:37 scheduler task c5ef6095 (flow 7b48a912): loading val<.=s3://niema-test/n100/r09/n100.r09.s055_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c8bedcb7 (flow 89fd3d0f): loading val<.=s3://niema-test/n100/r09/n100.r09.s084_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task e67b8fea (flow ff045352): loading val<.=s3://niema-test/n100/r09/n100.r09.s078_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c5ef6095 (flow 7b48a912): loading val<.=s3://niema-test/n100/r09/n100.r09.s055_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8a72f87e (flow 1eb78b40): loading val<.=s3://niema-test/n100/r09/n100.r09.s032_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task adaa95a9 (flow 48730549): loading (try 0): started
2021/07/08 17:29:37 scheduler task adaa95a9 (flow 48730549): loading val<.=s3://niema-test/n100/r09/n100.r09.s086_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 02e1d72b (flow 9bb037fa): loading (try 0): started
2021/07/08 17:29:37 scheduler task 02e1d72b (flow 9bb037fa): loading val<.=s3://niema-test/n100/r09/n100.r09.s034_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 5b93b009 (flow 214bd342): loading (try 0): started
2021/07/08 17:29:37 scheduler task 02e1d72b (flow 9bb037fa): loading val<.=s3://niema-test/n100/r09/n100.r09.s034_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 5b93b009 (flow 214bd342): loading val<.=s3://niema-test/n100/r09/n100.r09.s056_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f67f9364 (flow 99c25444): loading (try 0): started
2021/07/08 17:29:37 scheduler task c61cb881 (flow 380dcf18): loading val<.=s3://niema-test/n100/r09/n100.r09.s001_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 5b93b009 (flow 214bd342): loading val<.=s3://niema-test/n100/r09/n100.r09.s056_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f67f9364 (flow 99c25444): loading val<.=s3://niema-test/n100/r09/n100.r09.s038_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 72711129 (flow ca14132b): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6a9c93cc (flow 0e69c9bc): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8a72f87e (flow 1eb78b40): loading val<.=s3://niema-test/n100/r09/n100.r09.s032_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6a9c93cc (flow 0e69c9bc): loading val<.=s3://niema-test/n100/r09/n100.r09.s068_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6a9c93cc (flow 0e69c9bc): loading val<.=s3://niema-test/n100/r09/n100.r09.s068_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d868dd9b (flow 8715eadd): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task b00facdf (flow 202714e1): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 55154fab (flow 7e991e05): loading val<.=s3://niema-test/n100/r09/n100.r09.s070_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b00facdf (flow 202714e1): loading (try 0): started
2021/07/08 17:29:37 scheduler task 2a30e645 (flow 4834e08f): loading val<.=s3://niema-test/n100/r09/n100.r09.s054_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b00facdf (flow 202714e1): loading val<.=s3://niema-test/n100/r09/n100.r09.s005_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task adaa95a9 (flow 48730549): loading val<.=s3://niema-test/n100/r09/n100.r09.s086_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f67f9364 (flow 99c25444): loading val<.=s3://niema-test/n100/r09/n100.r09.s038_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b00facdf (flow 202714e1): loading val<.=s3://niema-test/n100/r09/n100.r09.s005_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 72711129 (flow ca14132b): loading val<.=s3://niema-test/n100/r09/n100.r09.s036_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 72711129 (flow ca14132b): loading val<.=s3://niema-test/n100/r09/n100.r09.s036_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 9691b24c (flow 3c2b3c63): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 7ef3289f (flow d1e76a3d): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c0336850 (flow b1c048e5): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 9547f06a (flow 85992f0f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 97158a03 (flow 61535a0d): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task a96b1313 (flow 2b827096): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task a118daf0 (flow 01eaeab9): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task e830d1de (flow 86ffe226): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 62391e6e (flow 8039d92f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 6cbee719 (flow 30fe5ddd): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 107b832c (flow c309afbb): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task a9d54835 (flow 462eab90): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 1e64ec4b (flow d4b624e7): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task f75b41ab (flow 7f1c060b): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 177a80d4 (flow c571bec1): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task a81322e0 (flow 03205e45): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 03660aa3 (flow 0ff73e1f): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 31dcb46d (flow ca642532): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task a4988c18 (flow e8b23611): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 67bedddd (flow cb1ce740): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 8bb87836 (flow 19c275b5): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task c5cc38da (flow 8dc0d360): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task b56b9115 (flow ca6c188a): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 03ade628 (flow 6fcd9514): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 6a4e8d08 (flow 8ab86c50): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 25cadac9 (flow bac83fae): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 0a19571a (flow 36f22554): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 8cebfe33 (flow 85081685): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 6dd29d24 (flow 3e29d10c): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 4dd42029 (flow 3d6d80a3): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 8aa24e0c (flow fd4c25ab): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task bcbe460f (flow 032e076c): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task d843f9bd (flow 960857c0): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 339efe72 (flow ac3f4213): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 2230bc53 (flow 62a0035c): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 03ade628 (flow 6fcd9514): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6a4e8d08 (flow 8ab86c50): loading (try 0): started
2021/07/08 17:29:37 scheduler task 03ade628 (flow 6fcd9514): loading val<.=s3://niema-test/n100/r09/n100.r09.s019_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 97158a03 (flow 61535a0d): loading (try 0): started
2021/07/08 17:29:37 scheduler task 25cadac9 (flow bac83fae): loading (try 0): started
2021/07/08 17:29:37 scheduler task 97158a03 (flow 61535a0d): loading val<.=s3://niema-test/n100/r09/n100.r09.s091_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 25cadac9 (flow bac83fae): loading val<.=s3://niema-test/n100/r09/n100.r09.s095_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b56b9115 (flow ca6c188a): loading (try 0): started
2021/07/08 17:29:37 scheduler task 9691b24c (flow 3c2b3c63): loading (try 0): started
2021/07/08 17:29:37 scheduler task c5cc38da (flow 8dc0d360): loading (try 0): started
2021/07/08 17:29:37 scheduler task 97158a03 (flow 61535a0d): loading val<.=s3://niema-test/n100/r09/n100.r09.s091_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a96b1313 (flow 2b827096): loading (try 0): started
2021/07/08 17:29:37 scheduler task 177a80d4 (flow c571bec1): loading (try 0): started
2021/07/08 17:29:37 scheduler task bcbe460f (flow 032e076c): loading (try 0): started
2021/07/08 17:29:37 scheduler task d843f9bd (flow 960857c0): loading (try 0): started
2021/07/08 17:29:37 scheduler task 107b832c (flow c309afbb): loading (try 0): started
2021/07/08 17:29:37 scheduler task e830d1de (flow 86ffe226): loading (try 0): started
2021/07/08 17:29:37 scheduler task a81322e0 (flow 03205e45): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8aa24e0c (flow fd4c25ab): loading (try 0): started
2021/07/08 17:29:37 scheduler task 107b832c (flow c309afbb): loading val<.=s3://niema-test/n100/r09/n100.r09.s031_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task e830d1de (flow 86ffe226): loading val<.=s3://niema-test/n100/r09/n100.r09.s092_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a96b1313 (flow 2b827096): loading val<.=s3://niema-test/n100/r09/n100.r09.s097_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c0336850 (flow b1c048e5): loading (try 0): started
2021/07/08 17:29:37 scheduler task c0336850 (flow b1c048e5): loading val<.=s3://niema-test/n100/r09/n100.r09.s077_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 62391e6e (flow 8039d92f): loading (try 0): started
2021/07/08 17:29:37 scheduler task 62391e6e (flow 8039d92f): loading val<.=s3://niema-test/n100/r09/n100.r09.s037_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c0336850 (flow b1c048e5): loading val<.=s3://niema-test/n100/r09/n100.r09.s077_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c3ca00c6 (flow 511c1700): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 8bb87836 (flow 19c275b5): loading (try 0): started
2021/07/08 17:29:37 scheduler task c3ca00c6 (flow 511c1700): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8bb87836 (flow 19c275b5): loading val<.=s3://niema-test/n100/r09/n100.r09.s026_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c3ca00c6 (flow 511c1700): loading val<.=s3://niema-test/n100/r09/n100.r09.s073_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d843f9bd (flow 960857c0): loading val<.=s3://niema-test/n100/r09/n100.r09.s069_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8cebfe33 (flow 85081685): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8bb87836 (flow 19c275b5): loading val<.=s3://niema-test/n100/r09/n100.r09.s026_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8cebfe33 (flow 85081685): loading val<.=s3://niema-test/n100/r09/n100.r09.s085_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d868dd9b (flow 8715eadd): loading (try 0): started
2021/07/08 17:29:37 scheduler task d868dd9b (flow 8715eadd): loading val<.=s3://niema-test/n100/r09/n100.r09.s081_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c3ca00c6 (flow 511c1700): loading val<.=s3://niema-test/n100/r09/n100.r09.s073_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8cebfe33 (flow 85081685): loading val<.=s3://niema-test/n100/r09/n100.r09.s085_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 9547f06a (flow 85992f0f): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6a4e8d08 (flow 8ab86c50): loading val<.=s3://niema-test/n100/r09/n100.r09.s020_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d868dd9b (flow 8715eadd): loading val<.=s3://niema-test/n100/r09/n100.r09.s081_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 7ef3289f (flow d1e76a3d): loading (try 0): started
2021/07/08 17:29:37 scheduler task 7ef3289f (flow d1e76a3d): loading val<.=s3://niema-test/n100/r09/n100.r09.s067_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 9547f06a (flow 85992f0f): loading val<.=s3://niema-test/n100/r09/n100.r09.s046_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 7ef3289f (flow d1e76a3d): loading val<.=s3://niema-test/n100/r09/n100.r09.s067_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b56b9115 (flow ca6c188a): loading val<.=s3://niema-test/n100/r09/n100.r09.s088_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 03ade628 (flow 6fcd9514): loading val<.=s3://niema-test/n100/r09/n100.r09.s019_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a9d54835 (flow 462eab90): loading (try 0): started
2021/07/08 17:29:37 scheduler task a9d54835 (flow 462eab90): loading val<.=s3://niema-test/n100/r09/n100.r09.s053_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 9691b24c (flow 3c2b3c63): loading val<.=s3://niema-test/n100/r09/n100.r09.s049_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a9d54835 (flow 462eab90): loading val<.=s3://niema-test/n100/r09/n100.r09.s053_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b56b9115 (flow ca6c188a): loading val<.=s3://niema-test/n100/r09/n100.r09.s088_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 1e64ec4b (flow d4b624e7): loading (try 0): started
2021/07/08 17:29:37 scheduler task 1e64ec4b (flow d4b624e7): loading val<.=s3://niema-test/n100/r09/n100.r09.s016_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6a4e8d08 (flow 8ab86c50): loading val<.=s3://niema-test/n100/r09/n100.r09.s020_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c5cc38da (flow 8dc0d360): loading val<.=s3://niema-test/n100/r09/n100.r09.s059_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 25cadac9 (flow bac83fae): loading val<.=s3://niema-test/n100/r09/n100.r09.s095_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 1e64ec4b (flow d4b624e7): loading val<.=s3://niema-test/n100/r09/n100.r09.s016_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6dd29d24 (flow 3e29d10c): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6dd29d24 (flow 3e29d10c): loading val<.=s3://niema-test/n100/r09/n100.r09.s051_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f75b41ab (flow 7f1c060b): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6dd29d24 (flow 3e29d10c): loading val<.=s3://niema-test/n100/r09/n100.r09.s051_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f75b41ab (flow 7f1c060b): loading val<.=s3://niema-test/n100/r09/n100.r09.s064_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a96b1313 (flow 2b827096): loading val<.=s3://niema-test/n100/r09/n100.r09.s097_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task f75b41ab (flow 7f1c060b): loading val<.=s3://niema-test/n100/r09/n100.r09.s064_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 03660aa3 (flow 0ff73e1f): loading (try 0): started
2021/07/08 17:29:37 scheduler task 9691b24c (flow 3c2b3c63): loading val<.=s3://niema-test/n100/r09/n100.r09.s049_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 03660aa3 (flow 0ff73e1f): loading val<.=s3://niema-test/n100/r09/n100.r09.s065_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a118daf0 (flow 01eaeab9): loading (try 0): started
2021/07/08 17:29:37 scheduler task 177a80d4 (flow c571bec1): loading val<.=s3://niema-test/n100/r09/n100.r09.s061_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task bcbe460f (flow 032e076c): loading val<.=s3://niema-test/n100/r09/n100.r09.s002_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task c5cc38da (flow 8dc0d360): loading val<.=s3://niema-test/n100/r09/n100.r09.s059_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 177a80d4 (flow c571bec1): loading val<.=s3://niema-test/n100/r09/n100.r09.s061_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 67bedddd (flow cb1ce740): loading (try 0): started
2021/07/08 17:29:37 scheduler task a4988c18 (flow e8b23611): loading (try 0): started
2021/07/08 17:29:37 scheduler task 107b832c (flow c309afbb): loading val<.=s3://niema-test/n100/r09/n100.r09.s031_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0a19571a (flow 36f22554): loading (try 0): started
2021/07/08 17:29:37 scheduler task 6cbee719 (flow 30fe5ddd): loading (try 0): started
2021/07/08 17:29:37 scheduler task 31dcb46d (flow ca642532): loading (try 0): started
2021/07/08 17:29:37 scheduler task bcbe460f (flow 032e076c): loading val<.=s3://niema-test/n100/r09/n100.r09.s002_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task e830d1de (flow 86ffe226): loading val<.=s3://niema-test/n100/r09/n100.r09.s092_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task d843f9bd (flow 960857c0): loading val<.=s3://niema-test/n100/r09/n100.r09.s069_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4dd42029 (flow 3d6d80a3): loading (try 0): started
2021/07/08 17:29:37 scheduler task a81322e0 (flow 03205e45): loading val<.=s3://niema-test/n100/r09/n100.r09.s080_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 339efe72 (flow ac3f4213): loading (try 0): started
2021/07/08 17:29:37 scheduler task 8aa24e0c (flow fd4c25ab): loading val<.=s3://niema-test/n100/r09/n100.r09.s050_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a81322e0 (flow 03205e45): loading val<.=s3://niema-test/n100/r09/n100.r09.s080_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 8aa24e0c (flow fd4c25ab): loading val<.=s3://niema-test/n100/r09/n100.r09.s050_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 62391e6e (flow 8039d92f): loading val<.=s3://niema-test/n100/r09/n100.r09.s037_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0bb80e08 (flow 6ea6ac51): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 9547f06a (flow 85992f0f): loading val<.=s3://niema-test/n100/r09/n100.r09.s046_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2230bc53 (flow 62a0035c): loading (try 0): started
2021/07/08 17:29:37 scheduler task 03660aa3 (flow 0ff73e1f): loading val<.=s3://niema-test/n100/r09/n100.r09.s065_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 2230bc53 (flow 62a0035c): loading val<.=s3://niema-test/n100/r09/n100.r09.s030_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a118daf0 (flow 01eaeab9): loading val<.=s3://niema-test/n100/r09/n100.r09.s083_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a118daf0 (flow 01eaeab9): loading val<.=s3://niema-test/n100/r09/n100.r09.s083_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 67bedddd (flow cb1ce740): loading val<.=s3://niema-test/n100/r09/n100.r09.s009_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a4988c18 (flow e8b23611): loading val<.=s3://niema-test/n100/r09/n100.r09.s044_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 67bedddd (flow cb1ce740): loading val<.=s3://niema-test/n100/r09/n100.r09.s009_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task a4988c18 (flow e8b23611): loading val<.=s3://niema-test/n100/r09/n100.r09.s044_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0a19571a (flow 36f22554): loading val<.=s3://niema-test/n100/r09/n100.r09.s063_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6cbee719 (flow 30fe5ddd): loading val<.=s3://niema-test/n100/r09/n100.r09.s052_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0a19571a (flow 36f22554): loading val<.=s3://niema-test/n100/r09/n100.r09.s063_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 31dcb46d (flow ca642532): loading val<.=s3://niema-test/n100/r09/n100.r09.s035_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 6cbee719 (flow 30fe5ddd): loading val<.=s3://niema-test/n100/r09/n100.r09.s052_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 31dcb46d (flow ca642532): loading val<.=s3://niema-test/n100/r09/n100.r09.s035_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4dd42029 (flow 3d6d80a3): loading val<.=s3://niema-test/n100/r09/n100.r09.s042_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4dd42029 (flow 3d6d80a3): loading val<.=s3://niema-test/n100/r09/n100.r09.s042_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 339efe72 (flow ac3f4213): loading val<.=s3://niema-test/n100/r09/n100.r09.s015_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 339efe72 (flow ac3f4213): loading val<.=s3://niema-test/n100/r09/n100.r09.s015_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 909dc8d5 (flow b75a80ea): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 4e597b0a (flow b6b37969): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task b49db477 (flow 591b29d1): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 301872db (flow f4514b15): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 4b51afe4 (flow 88409fe3): assigning to alloc ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:29:37 scheduler task 0bb80e08 (flow 6ea6ac51): loading (try 0): started
2021/07/08 17:29:37 scheduler task b49db477 (flow 591b29d1): loading (try 0): started
2021/07/08 17:29:37 scheduler task 2230bc53 (flow 62a0035c): loading val<.=s3://niema-test/n100/r09/n100.r09.s030_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b49db477 (flow 591b29d1): loading val<.=s3://niema-test/n100/r09/n100.r09.s066_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 909dc8d5 (flow b75a80ea): loading (try 0): started
2021/07/08 17:29:37 scheduler task 4e597b0a (flow b6b37969): loading (try 0): started
2021/07/08 17:29:37 scheduler task 909dc8d5 (flow b75a80ea): loading val<.=s3://niema-test/n100/r09/n100.r09.s082_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4e597b0a (flow b6b37969): loading val<.=s3://niema-test/n100/r09/n100.r09.s008_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4e597b0a (flow b6b37969): loading val<.=s3://niema-test/n100/r09/n100.r09.s008_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0bb80e08 (flow 6ea6ac51): loading val<.=s3://niema-test/n100/r09/n100.r09.s074_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 0bb80e08 (flow 6ea6ac51): loading val<.=s3://niema-test/n100/r09/n100.r09.s074_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task b49db477 (flow 591b29d1): loading val<.=s3://niema-test/n100/r09/n100.r09.s066_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 301872db (flow f4514b15): loading (try 0): started
2021/07/08 17:29:37 scheduler task 301872db (flow f4514b15): loading val<.=s3://niema-test/n100/r09/n100.r09.s010_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4b51afe4 (flow 88409fe3): loading (try 0): started
2021/07/08 17:29:37 scheduler task 4b51afe4 (flow 88409fe3): loading val<.=s3://niema-test/n100/r09/n100.r09.s027_R2.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 301872db (flow f4514b15): loading val<.=s3://niema-test/n100/r09/n100.r09.s010_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 909dc8d5 (flow b75a80ea): loading val<.=s3://niema-test/n100/r09/n100.r09.s082_R1.fastq 35.4MiB>
2021/07/08 17:29:37 scheduler task 4b51afe4 (flow 88409fe3): loading val<.=s3://niema-test/n100/r09/n100.r09.s027_R1.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): assigning to alloc ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): assigning to alloc ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): assigning to alloc ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): assigning to alloc ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): loading (try 0): started
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): loading val<.=s3://niema-test/n100/r09/n100.r09.s004_R2.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): loading (try 0): started
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): loading val<.=s3://niema-test/n100/r09/n100.r09.s040_R2.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): loading (try 0): started
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): loading val<.=s3://niema-test/n100/r09/n100.r09.s039_R2.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): loading (try 0): started
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): loading val<.=s3://niema-test/n100/r09/n100.r09.s012_R2.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): loading val<.=s3://niema-test/n100/r09/n100.r09.s004_R1.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): loading val<.=s3://niema-test/n100/r09/n100.r09.s012_R1.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): loading val<.=s3://niema-test/n100/r09/n100.r09.s039_R1.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): loading val<.=s3://niema-test/n100/r09/n100.r09.s040_R1.fastq 35.4MiB>
2021/07/08 17:29:38 scheduler task 67ea8735 (flow 75e64e3f): loaded val<.=74981f96 35.4MiB>
2021/07/08 17:29:38 scheduler task ca3bf7bf (flow 57c64a3d): loaded val<.=96274d70 35.4MiB>
2021/07/08 17:29:38 scheduler task f7e7564f (flow cdae4b3f): loaded val<.=84b5e81d 35.4MiB>
2021/07/08 17:29:38 scheduler task 2c100d29 (flow e13da95a): loaded val<.=334903af 35.4MiB>
2021/07/08 17:29:38 scheduler task a6886853 (flow 3ff94c60): loaded val<.=d1eef5ac 35.4MiB>
2021/07/08 17:29:38 scheduler task e5db6835 (flow a262e34f): loaded val<.=5e25cd7e 35.4MiB>
2021/07/08 17:29:38 scheduler task 4ba314d6 (flow 631db24c): loaded val<.=0bb1c895 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): loaded val<.=320f4429 35.4MiB>
2021/07/08 17:29:38 scheduler task 58a3aaa8 (flow 68848ea7): loaded val<.=0ac316c2 35.4MiB>
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): loaded val<.=03d5405c 35.4MiB>
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): loaded val<.=aead15e4 35.4MiB>
2021/07/08 17:29:38 scheduler task f0471d6b (flow 3e879b55): loaded val<.=28ce1c0c 35.4MiB>
2021/07/08 17:29:38 scheduler task 4ba314d6 (flow 631db24c): loaded val<.=31c7d19f 35.4MiB>
2021/07/08 17:29:38 scheduler task 4ba314d6 (flow 631db24c): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task dd516de3 (flow 4874cac6): loaded val<.=b55301b0 35.4MiB>
2021/07/08 17:29:38 scheduler task c4a764b4 (flow 9fc13a0b): loaded val<.=7edcc527 35.4MiB>
2021/07/08 17:29:38 scheduler task e5db6835 (flow a262e34f): loaded val<.=c7104e39 35.4MiB>
2021/07/08 17:29:38 scheduler task e5db6835 (flow a262e34f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 2c100d29 (flow e13da95a): loaded val<.=ae7421de 35.4MiB>
2021/07/08 17:29:38 scheduler task 2c100d29 (flow e13da95a): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task df2d184f (flow 15b3bc1f): loaded val<.=1aa04050 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e103f12 (flow 59028377): loaded val<.=08a3da3b 35.4MiB>
2021/07/08 17:29:38 scheduler task 4ba314d6 (flow 631db24c): submitting (try 0): started
2021/07/08 17:29:38 scheduler task e5db6835 (flow a262e34f): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): loaded val<.=69891a67 35.4MiB>
2021/07/08 17:29:38 scheduler task 2c100d29 (flow e13da95a): submitting (try 0): started
2021/07/08 17:29:38 scheduler task b5bd2ae1 (flow 2a7d8e22): loaded val<.=9b224147 35.4MiB>
2021/07/08 17:29:38 scheduler task bc405a66 (flow 4f626c55): loaded val<.=1099ecfa 35.4MiB>
2021/07/08 17:29:38 scheduler task f0471d6b (flow 3e879b55): loaded val<.=9e3f95d8 35.4MiB>
2021/07/08 17:29:38 scheduler task 1503efcb (flow 29954b22): loaded val<.=97afe9c3 35.4MiB>
2021/07/08 17:29:38 scheduler task f0471d6b (flow 3e879b55): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task e71d796c (flow ef0a70a3): loaded val<.=08b75226 35.4MiB>
2021/07/08 17:29:38 scheduler task 1503efcb (flow 29954b22): loaded val<.=489d0954 35.4MiB>
2021/07/08 17:29:38 scheduler task 1503efcb (flow 29954b22): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 367eab87 (flow ce2eee55): loaded val<.=1bec8af9 35.4MiB>
2021/07/08 17:29:38 scheduler task ca3bf7bf (flow 57c64a3d): loaded val<.=a5fd1e36 35.4MiB>
2021/07/08 17:29:38 scheduler task ca3bf7bf (flow 57c64a3d): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task f0471d6b (flow 3e879b55): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 1503efcb (flow 29954b22): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 4e103f12 (flow 59028377): loaded val<.=78ea69d3 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e103f12 (flow 59028377): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 6c9cf8f0 (flow 87f0b2e1): loaded val<.=ce8c7023 35.4MiB>
2021/07/08 17:29:38 scheduler task df2d184f (flow 15b3bc1f): loaded val<.=564e1dde 35.4MiB>
2021/07/08 17:29:38 scheduler task df2d184f (flow 15b3bc1f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task dd516de3 (flow 4874cac6): loaded val<.=cc01d6c6 35.4MiB>
2021/07/08 17:29:38 scheduler task dd516de3 (flow 4874cac6): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task ca3bf7bf (flow 57c64a3d): submitting (try 0): started
2021/07/08 17:29:38 scheduler task eff50ab7 (flow 9176995d): loaded val<.=16c3cfb9 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e103f12 (flow 59028377): submitting (try 0): started
2021/07/08 17:29:38 scheduler task d1b88294 (flow e64b8e8e): loaded val<.=29e94f5b 35.4MiB>
2021/07/08 17:29:38 scheduler task a6886853 (flow 3ff94c60): loaded val<.=79bd477b 35.4MiB>
2021/07/08 17:29:38 scheduler task a6886853 (flow 3ff94c60): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task d1b88294 (flow e64b8e8e): loaded val<.=e9e6c4fc 35.4MiB>
2021/07/08 17:29:38 scheduler task d1b88294 (flow e64b8e8e): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 3838912f (flow 65bdc09d): loaded val<.=54f0ef81 35.4MiB>
2021/07/08 17:29:38 scheduler task 0e04bf02 (flow 9e93f670): loaded val<.=7ef301d5 35.4MiB>
2021/07/08 17:29:38 scheduler task 813790ac (flow 4e9d02e3): loaded val<.=cd718d24 35.4MiB>
2021/07/08 17:29:38 scheduler task 58a3aaa8 (flow 68848ea7): loaded val<.=1a6b33c2 35.4MiB>
2021/07/08 17:29:38 scheduler task 58a3aaa8 (flow 68848ea7): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task df2d184f (flow 15b3bc1f): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 6798e2db (flow b27ceb8c): loaded val<.=a1803d27 35.4MiB>
2021/07/08 17:29:38 scheduler task dd516de3 (flow 4874cac6): submitting (try 0): started
2021/07/08 17:29:38 scheduler task a6886853 (flow 3ff94c60): submitting (try 0): started
2021/07/08 17:29:38 scheduler task d1b88294 (flow e64b8e8e): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): loaded val<.=2b7dece3 35.4MiB>
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task ec0f1f67 (flow 400d5ba5): loaded val<.=cfbec142 35.4MiB>
2021/07/08 17:29:38 scheduler task 367eab87 (flow ce2eee55): loaded val<.=2480e2d6 35.4MiB>
2021/07/08 17:29:38 scheduler task 367eab87 (flow ce2eee55): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task bc405a66 (flow 4f626c55): loaded val<.=5f2ee61b 35.4MiB>
2021/07/08 17:29:38 scheduler task bc405a66 (flow 4f626c55): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 0f528024 (flow ed8c06bc): loaded val<.=2e0b8144 35.4MiB>
2021/07/08 17:29:38 scheduler task 58a3aaa8 (flow 68848ea7): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 7f57889b (flow bbdb3d14): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 813790ac (flow 4e9d02e3): loaded val<.=053bd67f 35.4MiB>
2021/07/08 17:29:38 scheduler task 813790ac (flow 4e9d02e3): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task b5bd2ae1 (flow 2a7d8e22): loaded val<.=8984543f 35.4MiB>
2021/07/08 17:29:38 scheduler task b5bd2ae1 (flow 2a7d8e22): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 704e844b (flow 7c7b20f0): loaded val<.=e12683c5 35.4MiB>
2021/07/08 17:29:38 scheduler task c303b8ca (flow 79b1766d): loaded val<.=60f83df1 35.4MiB>
2021/07/08 17:29:38 scheduler task 3838912f (flow 65bdc09d): loaded val<.=d83235a4 35.4MiB>
2021/07/08 17:29:38 scheduler task 3838912f (flow 65bdc09d): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 367eab87 (flow ce2eee55): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 0e04bf02 (flow 9e93f670): loaded val<.=d70cbff9 35.4MiB>
2021/07/08 17:29:38 scheduler task 8c6063fe (flow 926c1f50): loaded val<.=8842697c 35.4MiB>
2021/07/08 17:29:38 scheduler task 0e04bf02 (flow 9e93f670): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task bc405a66 (flow 4f626c55): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 813790ac (flow 4e9d02e3): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 2564252a (flow 071f7e69): loaded val<.=45b15a62 35.4MiB>
2021/07/08 17:29:38 scheduler task b5bd2ae1 (flow 2a7d8e22): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 3838912f (flow 65bdc09d): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 2564252a (flow 071f7e69): loaded val<.=6b5268d6 35.4MiB>
2021/07/08 17:29:38 scheduler task c61cb881 (flow 380dcf18): loaded val<.=5dc6bcfd 35.4MiB>
2021/07/08 17:29:38 scheduler task c303b8ca (flow 79b1766d): loaded val<.=c76a2048 35.4MiB>
2021/07/08 17:29:38 scheduler task 2564252a (flow 071f7e69): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task c303b8ca (flow 79b1766d): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task c4a764b4 (flow 9fc13a0b): loaded val<.=124afdee 35.4MiB>
2021/07/08 17:29:38 scheduler task b2d0fd0c (flow 37d37b5c): loaded val<.=dcd626ec 35.4MiB>
2021/07/08 17:29:38 scheduler task 55154fab (flow 7e991e05): loaded val<.=0b794a89 35.4MiB>
2021/07/08 17:29:38 scheduler task c4a764b4 (flow 9fc13a0b): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 0e04bf02 (flow 9e93f670): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 2564252a (flow 071f7e69): submitting (try 0): started
2021/07/08 17:29:38 scheduler task d108e3c8 (flow c686feee): loaded val<.=3158a902 35.4MiB>
2021/07/08 17:29:38 scheduler task c303b8ca (flow 79b1766d): submitting (try 0): started
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): loaded val<.=2690dda7 35.4MiB>
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task c4a764b4 (flow 9fc13a0b): submitting (try 0): started
2021/07/08 17:29:38 scheduler task b29faaca (flow 74146abc): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): loaded val<.=c56af1e5 35.4MiB>
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 71a2240f (flow b69f3a08): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): loaded val<.=6e751ba1 35.4MiB>
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 4e39b363 (flow 2cf75932): submitting (try 0): started
2021/07/08 17:29:38 scheduler task 1f0f569e (flow 945735dc): loaded val<.=63f6168d 35.4MiB>
2021/07/08 17:29:38 scheduler task 1f0f569e (flow 945735dc): loaded val<.=9fa6150a 35.4MiB>
2021/07/08 17:29:38 scheduler task 1f0f569e (flow 945735dc): loading (try 0): successful, next state: submitting
2021/07/08 17:29:38 scheduler task 1f0f569e (flow 945735dc): submitting (try 0): started
2021/07/08 17:29:39 scheduler task b56b9115 (flow ca6c188a): loaded val<.=59697851 35.4MiB>
2021/07/08 17:29:39 scheduler task 8c6063fe (flow 926c1f50): loaded val<.=9e0c6319 35.4MiB>
2021/07/08 17:29:39 scheduler task 8c6063fe (flow 926c1f50): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 8c6063fe (flow 926c1f50): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 4ba314d6 (flow 631db24c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 4ba314d6 (flow 631db24c): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s100.Main.out_file 631db24c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s100.Main.out_file 631db24c n100/r09/n100.r09.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:807788092e729d09e9b3cddcd85910eb7409c346875ea4b00d65b48ba7a93530
	sha256:631db24ccba5c919e0e2b5716eaf4eb2ca86766af3af111d9ddedbf56f109c75
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ba314d6a94d67b7620fbabd81b2c0d4b7a881070fc5c429897606a0396e7e66
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s100_output"
	    wget -O "n100.r09.s100_output/n100.r09.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s100_output/n100.r09.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s100_output/n100.r09.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s100_output/n100.r09.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s100_output/n100.r09.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s100_output/n100.r09.s100.reference.fas" "n100.r09.s100_output/n100.r09.s100.fq1.fastq" "n100.r09.s100_output/n100.r09.s100.fq2.fastq" | samtools view -bS - > "n100.r09.s100_output/n100.r09.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s100_output/n100.r09.s100.untrimmed.sorted.bam" "n100.r09.s100_output/n100.r09.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s100_output/n100.r09.s100.untrimmed.sorted.bam" -b "n100.r09.s100_output/n100.r09.s100.primers.bed" -p "n100.r09.s100_output/n100.r09.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" "n100.r09.s100_output/n100.r09.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s100_output/n100.r09.s100.reference.fas" "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" > "n100.r09.s100_output/n100.r09.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s100_output/n100.r09.s100.reference.fas" --call-indels "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" > "n100.r09.s100_output/n100.r09.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" > "n100.r09.s100_output/n100.r09.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s100_output/n100.r09.s100.depth.txt" "n100.r09.s100_output/n100.r09.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s100_output/n100.r09.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s100_output/n100.r09.s100.reference.fas" | bcftools consensus -m "n100.r09.s100_output/n100.r09.s100.low_depth.tsv" tmp.vcf.gz > "n100.r09.s100_output/n100.r09.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task d108e3c8 (flow c686feee): loaded val<.=a12f0726 35.4MiB>
2021/07/08 17:29:39 scheduler task d108e3c8 (flow c686feee): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task d108e3c8 (flow c686feee): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 7f57889b (flow bbdb3d14): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 7f57889b (flow bbdb3d14): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s039.Main.out_file bbdb3d14 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s039.Main.out_file bbdb3d14 n100/r09/n100.r09.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:290805648e31ca3184061452ad07ef5a4d4595c8fdb9f1b2a65631316eb0404a
	sha256:bbdb3d14569fb5f443eaffc64f7cc797ef806698db0cc52fbbc0c549dde230cb
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7f57889beca7983b891849c25a54a485fbc1f439f7af26fb960b836612d0d7fb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s039_output"
	    wget -O "n100.r09.s039_output/n100.r09.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s039_output/n100.r09.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s039_output/n100.r09.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s039_output/n100.r09.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s039_output/n100.r09.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s039_output/n100.r09.s039.reference.fas" "n100.r09.s039_output/n100.r09.s039.fq1.fastq" "n100.r09.s039_output/n100.r09.s039.fq2.fastq" | samtools view -bS - > "n100.r09.s039_output/n100.r09.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s039_output/n100.r09.s039.untrimmed.sorted.bam" "n100.r09.s039_output/n100.r09.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s039_output/n100.r09.s039.untrimmed.sorted.bam" -b "n100.r09.s039_output/n100.r09.s039.primers.bed" -p "n100.r09.s039_output/n100.r09.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" "n100.r09.s039_output/n100.r09.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s039_output/n100.r09.s039.reference.fas" "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" > "n100.r09.s039_output/n100.r09.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s039_output/n100.r09.s039.reference.fas" --call-indels "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" > "n100.r09.s039_output/n100.r09.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" > "n100.r09.s039_output/n100.r09.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s039_output/n100.r09.s039.depth.txt" "n100.r09.s039_output/n100.r09.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s039_output/n100.r09.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s039_output/n100.r09.s039.reference.fas" | bcftools consensus -m "n100.r09.s039_output/n100.r09.s039.low_depth.tsv" tmp.vcf.gz > "n100.r09.s039_output/n100.r09.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task e5db6835 (flow a262e34f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task e5db6835 (flow a262e34f): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s099.Main.out_file a262e34f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 scheduler task e67b8fea (flow ff045352): loaded val<.=5f9b8cad 35.4MiB>
2021/07/08 17:29:39 n100.r09.s099.Main.out_file a262e34f n100/r09/n100.r09.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ee6ddcf63820d8a90d413dbb992cac9a7042c19b811056c760eb9e268f4e58ea
	sha256:a262e34f5e0fc2e70d9c9538a8fc4116061fd4339d0e74e17093d226a2907122
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e5db683568814586da47ef0dc33a61975698c49ea26ce11dbb673dd675536429
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s099_output"
	    wget -O "n100.r09.s099_output/n100.r09.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s099_output/n100.r09.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s099_output/n100.r09.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s099_output/n100.r09.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s099_output/n100.r09.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s099_output/n100.r09.s099.reference.fas" "n100.r09.s099_output/n100.r09.s099.fq1.fastq" "n100.r09.s099_output/n100.r09.s099.fq2.fastq" | samtools view -bS - > "n100.r09.s099_output/n100.r09.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s099_output/n100.r09.s099.untrimmed.sorted.bam" "n100.r09.s099_output/n100.r09.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s099_output/n100.r09.s099.untrimmed.sorted.bam" -b "n100.r09.s099_output/n100.r09.s099.primers.bed" -p "n100.r09.s099_output/n100.r09.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" "n100.r09.s099_output/n100.r09.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s099_output/n100.r09.s099.reference.fas" "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" > "n100.r09.s099_output/n100.r09.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s099_output/n100.r09.s099.reference.fas" --call-indels "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" > "n100.r09.s099_output/n100.r09.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" > "n100.r09.s099_output/n100.r09.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s099_output/n100.r09.s099.depth.txt" "n100.r09.s099_output/n100.r09.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s099_output/n100.r09.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s099_output/n100.r09.s099.reference.fas" | bcftools consensus -m "n100.r09.s099_output/n100.r09.s099.low_depth.tsv" tmp.vcf.gz > "n100.r09.s099_output/n100.r09.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task c5ef6095 (flow 7b48a912): loaded val<.=4551de97 35.4MiB>
2021/07/08 17:29:39 scheduler task b29faaca (flow 74146abc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task b29faaca (flow 74146abc): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s040.Main.out_file 74146abc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s040.Main.out_file 74146abc n100/r09/n100.r09.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:015816e307064e679fb352c41a114d44fbe8fb6844eec4b1045a2a49d7167356
	sha256:74146abcf2b65f5da1a8e2b63c0dd2feed85230e649da325a8dc434c20073156
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b29faacaab21c8bd240a967dcb0fd0a17f351043b7f196558855bec62fa89e70
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s040_output"
	    wget -O "n100.r09.s040_output/n100.r09.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s040_output/n100.r09.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s040_output/n100.r09.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s040_output/n100.r09.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s040_output/n100.r09.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s040_output/n100.r09.s040.reference.fas" "n100.r09.s040_output/n100.r09.s040.fq1.fastq" "n100.r09.s040_output/n100.r09.s040.fq2.fastq" | samtools view -bS - > "n100.r09.s040_output/n100.r09.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s040_output/n100.r09.s040.untrimmed.sorted.bam" "n100.r09.s040_output/n100.r09.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s040_output/n100.r09.s040.untrimmed.sorted.bam" -b "n100.r09.s040_output/n100.r09.s040.primers.bed" -p "n100.r09.s040_output/n100.r09.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" "n100.r09.s040_output/n100.r09.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s040_output/n100.r09.s040.reference.fas" "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" > "n100.r09.s040_output/n100.r09.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s040_output/n100.r09.s040.reference.fas" --call-indels "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" > "n100.r09.s040_output/n100.r09.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" > "n100.r09.s040_output/n100.r09.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s040_output/n100.r09.s040.depth.txt" "n100.r09.s040_output/n100.r09.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s040_output/n100.r09.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s040_output/n100.r09.s040.reference.fas" | bcftools consensus -m "n100.r09.s040_output/n100.r09.s040.low_depth.tsv" tmp.vcf.gz > "n100.r09.s040_output/n100.r09.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task c0336850 (flow b1c048e5): loaded val<.=6efbb0a7 35.4MiB>
2021/07/08 17:29:39 scheduler task 339efe72 (flow ac3f4213): loaded val<.=af1b6de9 35.4MiB>
2021/07/08 17:29:39 scheduler task d843f9bd (flow 960857c0): loaded val<.=d4e96572 35.4MiB>
2021/07/08 17:29:39 scheduler task 0bb80e08 (flow 6ea6ac51): loaded val<.=9a1fbe7e 35.4MiB>
2021/07/08 17:29:39 scheduler task 2c100d29 (flow e13da95a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 2c100d29 (flow e13da95a): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s072.Main.out_file e13da95a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s072.Main.out_file e13da95a n100/r09/n100.r09.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac53d430ffa3eaec4fb8014cbbda5e3a1dc0da2585aa1b3923109c8df6783242
	sha256:e13da95a526ef5d5a2ea8f2fef3163c42c1dd4dec9b55c484682d9f87ad08c92
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c100d297c2c55767d8c4864a0936a5aed01e6eb28bc9b711ea2f94c9fc532fb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s072_output"
	    wget -O "n100.r09.s072_output/n100.r09.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s072_output/n100.r09.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s072_output/n100.r09.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s072_output/n100.r09.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s072_output/n100.r09.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s072_output/n100.r09.s072.reference.fas" "n100.r09.s072_output/n100.r09.s072.fq1.fastq" "n100.r09.s072_output/n100.r09.s072.fq2.fastq" | samtools view -bS - > "n100.r09.s072_output/n100.r09.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s072_output/n100.r09.s072.untrimmed.sorted.bam" "n100.r09.s072_output/n100.r09.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s072_output/n100.r09.s072.untrimmed.sorted.bam" -b "n100.r09.s072_output/n100.r09.s072.primers.bed" -p "n100.r09.s072_output/n100.r09.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" "n100.r09.s072_output/n100.r09.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s072_output/n100.r09.s072.reference.fas" "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" > "n100.r09.s072_output/n100.r09.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s072_output/n100.r09.s072.reference.fas" --call-indels "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" > "n100.r09.s072_output/n100.r09.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" > "n100.r09.s072_output/n100.r09.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s072_output/n100.r09.s072.depth.txt" "n100.r09.s072_output/n100.r09.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s072_output/n100.r09.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s072_output/n100.r09.s072.reference.fas" | bcftools consensus -m "n100.r09.s072_output/n100.r09.s072.low_depth.tsv" tmp.vcf.gz > "n100.r09.s072_output/n100.r09.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task 2a30e645 (flow 4834e08f): loaded val<.=142cb683 35.4MiB>
2021/07/08 17:29:39 scheduler task c5cc38da (flow 8dc0d360): loaded val<.=40cf8b3a 35.4MiB>
2021/07/08 17:29:39 scheduler task 1e64ec4b (flow d4b624e7): loaded val<.=325bfbc0 35.4MiB>
2021/07/08 17:29:39 scheduler task c0336850 (flow b1c048e5): loaded val<.=d26849a0 35.4MiB>
2021/07/08 17:29:39 scheduler task 89f12d5b (flow d6d4b6d9): loaded val<.=c2cd1e8b 35.4MiB>
2021/07/08 17:29:39 scheduler task c0336850 (flow b1c048e5): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 107b832c (flow c309afbb): loaded val<.=43a4b1af 35.4MiB>
2021/07/08 17:29:39 scheduler task 704e844b (flow 7c7b20f0): loaded val<.=09db310f 35.4MiB>
2021/07/08 17:29:39 scheduler task 704e844b (flow 7c7b20f0): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task c0336850 (flow b1c048e5): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 1e64ec4b (flow d4b624e7): loaded val<.=3b7ba648 35.4MiB>
2021/07/08 17:29:39 scheduler task 1e64ec4b (flow d4b624e7): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 704e844b (flow 7c7b20f0): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 1e64ec4b (flow d4b624e7): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 4e597b0a (flow b6b37969): loaded val<.=7e875e75 35.4MiB>
2021/07/08 17:29:39 scheduler task b00facdf (flow 202714e1): loaded val<.=3fab4053 35.4MiB>
2021/07/08 17:29:39 scheduler task 97158a03 (flow 61535a0d): loaded val<.=49bdae7d 35.4MiB>
2021/07/08 17:29:39 scheduler task 4e597b0a (flow b6b37969): loaded val<.=9545bc7c 35.4MiB>
2021/07/08 17:29:39 scheduler task 4e597b0a (flow b6b37969): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task b00facdf (flow 202714e1): loaded val<.=9ff63b1b 35.4MiB>
2021/07/08 17:29:39 scheduler task 6a4e8d08 (flow 8ab86c50): loaded val<.=96e20b31 35.4MiB>
2021/07/08 17:29:39 scheduler task b00facdf (flow 202714e1): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 4e597b0a (flow b6b37969): submitting (try 0): started
2021/07/08 17:29:39 scheduler task b00facdf (flow 202714e1): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 2230bc53 (flow 62a0035c): loaded val<.=455a90ae 35.4MiB>
2021/07/08 17:29:39 scheduler task f67f9364 (flow 99c25444): loaded val<.=805eb71b 35.4MiB>
2021/07/08 17:29:39 scheduler task f67f9364 (flow 99c25444): loaded val<.=07c1bce1 35.4MiB>
2021/07/08 17:29:39 scheduler task f67f9364 (flow 99c25444): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 41e87e7d (flow 4e911385): loaded val<.=968c52db 35.4MiB>
2021/07/08 17:29:39 scheduler task 62391e6e (flow 8039d92f): loaded val<.=bf918bab 35.4MiB>
2021/07/08 17:29:39 scheduler task 3d1fe110 (flow 3e3233db): loaded val<.=d20c4a7f 35.4MiB>
2021/07/08 17:29:39 scheduler task 9691b24c (flow 3c2b3c63): loaded val<.=3262db08 35.4MiB>
2021/07/08 17:29:39 scheduler task 9547f06a (flow 85992f0f): loaded val<.=85cf80df 35.4MiB>
2021/07/08 17:29:39 scheduler task f67f9364 (flow 99c25444): submitting (try 0): started
2021/07/08 17:29:39 scheduler task f7e7564f (flow cdae4b3f): loaded val<.=b531f9e0 35.4MiB>
2021/07/08 17:29:39 scheduler task f7e7564f (flow cdae4b3f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 5b93b009 (flow 214bd342): loaded val<.=4e285a8b 35.4MiB>
2021/07/08 17:29:39 scheduler task b49db477 (flow 591b29d1): loaded val<.=d574ec6f 35.4MiB>
2021/07/08 17:29:39 scheduler task 8aa24e0c (flow fd4c25ab): loaded val<.=e12570de 35.4MiB>
2021/07/08 17:29:39 scheduler task f7e7564f (flow cdae4b3f): submitting (try 0): started
2021/07/08 17:29:39 scheduler task b2d0fd0c (flow 37d37b5c): loaded val<.=a24cd8d3 35.4MiB>
2021/07/08 17:29:39 scheduler task b2d0fd0c (flow 37d37b5c): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task b2d0fd0c (flow 37d37b5c): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 8bb87836 (flow 19c275b5): loaded val<.=9bc73a27 35.4MiB>
2021/07/08 17:29:39 scheduler task 71a2240f (flow b69f3a08): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 2a30e645 (flow 4834e08f): loaded val<.=7f5fde9a 35.4MiB>
2021/07/08 17:29:39 scheduler task 2a30e645 (flow 4834e08f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task f75b41ab (flow 7f1c060b): loaded val<.=26a4e9fe 35.4MiB>
2021/07/08 17:29:39 scheduler task 4b51afe4 (flow 88409fe3): loaded val<.=c5e28df8 35.4MiB>
2021/07/08 17:29:39 scheduler task b56b9115 (flow ca6c188a): loaded val<.=593ab71d 35.4MiB>
2021/07/08 17:29:39 scheduler task b56b9115 (flow ca6c188a): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 107b832c (flow c309afbb): loaded val<.=6929ce20 35.4MiB>
2021/07/08 17:29:39 scheduler task 107b832c (flow c309afbb): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task e830d1de (flow 86ffe226): loaded val<.=16baebd3 35.4MiB>
2021/07/08 17:29:39 scheduler task 71a2240f (flow b69f3a08): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s004.Main.out_file b69f3a08 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s004.Main.out_file b69f3a08 n100/r09/n100.r09.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37de21e21f4c7b68e5ac5765fe6184b1624177ff27cd7102ed087ceaf4bf1560
	sha256:b69f3a0866a29361b33ca31d2791098fa1f6c926adf8fa8eab4ff65b587ee88b
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/71a2240fc51f5925947aa45f525c064513f57612157219c4a61feb0fcb784f75
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s004_output"
	    wget -O "n100.r09.s004_output/n100.r09.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s004_output/n100.r09.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s004_output/n100.r09.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s004_output/n100.r09.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s004_output/n100.r09.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s004_output/n100.r09.s004.reference.fas" "n100.r09.s004_output/n100.r09.s004.fq1.fastq" "n100.r09.s004_output/n100.r09.s004.fq2.fastq" | samtools view -bS - > "n100.r09.s004_output/n100.r09.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s004_output/n100.r09.s004.untrimmed.sorted.bam" "n100.r09.s004_output/n100.r09.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s004_output/n100.r09.s004.untrimmed.sorted.bam" -b "n100.r09.s004_output/n100.r09.s004.primers.bed" -p "n100.r09.s004_output/n100.r09.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" "n100.r09.s004_output/n100.r09.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s004_output/n100.r09.s004.reference.fas" "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" > "n100.r09.s004_output/n100.r09.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s004_output/n100.r09.s004.reference.fas" --call-indels "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" > "n100.r09.s004_output/n100.r09.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" > "n100.r09.s004_output/n100.r09.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s004_output/n100.r09.s004.depth.txt" "n100.r09.s004_output/n100.r09.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s004_output/n100.r09.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s004_output/n100.r09.s004.reference.fas" | bcftools consensus -m "n100.r09.s004_output/n100.r09.s004.low_depth.tsv" tmp.vcf.gz > "n100.r09.s004_output/n100.r09.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task eff50ab7 (flow 9176995d): loaded val<.=f3c8073e 35.4MiB>
2021/07/08 17:29:39 scheduler task eff50ab7 (flow 9176995d): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 2a30e645 (flow 4834e08f): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 72711129 (flow ca14132b): loaded val<.=de9224be 35.4MiB>
2021/07/08 17:29:39 scheduler task b56b9115 (flow ca6c188a): submitting (try 0): started
2021/07/08 17:29:39 scheduler task ec0f1f67 (flow 400d5ba5): loaded val<.=99233897 35.4MiB>
2021/07/08 17:29:39 scheduler task ec0f1f67 (flow 400d5ba5): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 107b832c (flow c309afbb): submitting (try 0): started
2021/07/08 17:29:39 scheduler task eff50ab7 (flow 9176995d): submitting (try 0): started
2021/07/08 17:29:39 scheduler task bcbe460f (flow 032e076c): loaded val<.=0d758fb3 35.4MiB>
2021/07/08 17:29:39 scheduler task c8bedcb7 (flow 89fd3d0f): loaded val<.=e90655fc 35.4MiB>
2021/07/08 17:29:39 scheduler task 55154fab (flow 7e991e05): loaded val<.=ab4ebeaf 35.4MiB>
2021/07/08 17:29:39 scheduler task 55154fab (flow 7e991e05): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task ec0f1f67 (flow 400d5ba5): submitting (try 0): started
2021/07/08 17:29:39 scheduler task a118daf0 (flow 01eaeab9): loaded val<.=ecbeeb35 35.4MiB>
2021/07/08 17:29:39 scheduler task 55154fab (flow 7e991e05): submitting (try 0): started
2021/07/08 17:29:39 scheduler task f0471d6b (flow 3e879b55): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 9547f06a (flow 85992f0f): loaded val<.=a6b1e91d 35.4MiB>
2021/07/08 17:29:39 scheduler task 9547f06a (flow 85992f0f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task a96b1313 (flow 2b827096): loaded val<.=c782ab28 35.4MiB>
2021/07/08 17:29:39 scheduler task 03660aa3 (flow 0ff73e1f): loaded val<.=5650eb30 35.4MiB>
2021/07/08 17:29:39 scheduler task f0471d6b (flow 3e879b55): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s018.Main.out_file 3e879b55 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s018.Main.out_file 3e879b55 n100/r09/n100.r09.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8121206f66a4b9811d2598dfb03a34d5e4554d76300e9f069df76d3302a8bc9d
	sha256:3e879b554882ed101a097f909a6a0d7f49c6531a11d86a63232fcd7cc709cece
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0471d6b7d133ff8809f19df4245c4fae8b2b1cbfe9797b296926e24614a5327
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s018_output"
	    wget -O "n100.r09.s018_output/n100.r09.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s018_output/n100.r09.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s018_output/n100.r09.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s018_output/n100.r09.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s018_output/n100.r09.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s018_output/n100.r09.s018.reference.fas" "n100.r09.s018_output/n100.r09.s018.fq1.fastq" "n100.r09.s018_output/n100.r09.s018.fq2.fastq" | samtools view -bS - > "n100.r09.s018_output/n100.r09.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s018_output/n100.r09.s018.untrimmed.sorted.bam" "n100.r09.s018_output/n100.r09.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s018_output/n100.r09.s018.untrimmed.sorted.bam" -b "n100.r09.s018_output/n100.r09.s018.primers.bed" -p "n100.r09.s018_output/n100.r09.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" "n100.r09.s018_output/n100.r09.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s018_output/n100.r09.s018.reference.fas" "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" > "n100.r09.s018_output/n100.r09.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s018_output/n100.r09.s018.reference.fas" --call-indels "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" > "n100.r09.s018_output/n100.r09.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" > "n100.r09.s018_output/n100.r09.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s018_output/n100.r09.s018.depth.txt" "n100.r09.s018_output/n100.r09.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s018_output/n100.r09.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s018_output/n100.r09.s018.reference.fas" | bcftools consensus -m "n100.r09.s018_output/n100.r09.s018.low_depth.tsv" tmp.vcf.gz > "n100.r09.s018_output/n100.r09.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task c3ca00c6 (flow 511c1700): loaded val<.=8c703b34 35.4MiB>
2021/07/08 17:29:39 scheduler task e830d1de (flow 86ffe226): loaded val<.=68797c6e 35.4MiB>
2021/07/08 17:29:39 scheduler task e830d1de (flow 86ffe226): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 9547f06a (flow 85992f0f): submitting (try 0): started
2021/07/08 17:29:39 scheduler task e830d1de (flow 86ffe226): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 03ade628 (flow 6fcd9514): loaded val<.=e79a4c1e 35.4MiB>
2021/07/08 17:29:39 scheduler task 8aa24e0c (flow fd4c25ab): loaded val<.=606587db 35.4MiB>
2021/07/08 17:29:39 scheduler task 8aa24e0c (flow fd4c25ab): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task ec43ea83 (flow 7b4ec1c0): loaded val<.=5e09ec34 35.4MiB>
2021/07/08 17:29:39 scheduler task 8aa24e0c (flow fd4c25ab): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 0bb80e08 (flow 6ea6ac51): loaded val<.=a697265d 35.4MiB>
2021/07/08 17:29:39 scheduler task 0bb80e08 (flow 6ea6ac51): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 0bb80e08 (flow 6ea6ac51): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 6c9cf8f0 (flow 87f0b2e1): loaded val<.=f69f579c 35.4MiB>
2021/07/08 17:29:39 scheduler task 6c9cf8f0 (flow 87f0b2e1): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task 6c9cf8f0 (flow 87f0b2e1): submitting (try 0): started
2021/07/08 17:29:39 scheduler task 43278a34 (flow 85764be5): loaded val<.=15bd0434 35.4MiB>
2021/07/08 17:29:39 scheduler task 4e39b363 (flow 2cf75932): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 4e39b363 (flow 2cf75932): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s012.Main.out_file 2cf75932 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s012.Main.out_file 2cf75932 n100/r09/n100.r09.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:987fb6f61f52ad6c18d441560452a56f5aedc4f0d5ef6acdae10b1c0608dd65d
	sha256:2cf75932a7dca854ae5f19d7ae67f65f1e5bea5a3ec8dfe53219f43626bd496d
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e39b363989f40189c6db87384760645c85f8d138e39945d2aaee1e5b19eab5b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s012_output"
	    wget -O "n100.r09.s012_output/n100.r09.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s012_output/n100.r09.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s012_output/n100.r09.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s012_output/n100.r09.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s012_output/n100.r09.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s012_output/n100.r09.s012.reference.fas" "n100.r09.s012_output/n100.r09.s012.fq1.fastq" "n100.r09.s012_output/n100.r09.s012.fq2.fastq" | samtools view -bS - > "n100.r09.s012_output/n100.r09.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s012_output/n100.r09.s012.untrimmed.sorted.bam" "n100.r09.s012_output/n100.r09.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s012_output/n100.r09.s012.untrimmed.sorted.bam" -b "n100.r09.s012_output/n100.r09.s012.primers.bed" -p "n100.r09.s012_output/n100.r09.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" "n100.r09.s012_output/n100.r09.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s012_output/n100.r09.s012.reference.fas" "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" > "n100.r09.s012_output/n100.r09.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s012_output/n100.r09.s012.reference.fas" --call-indels "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" > "n100.r09.s012_output/n100.r09.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" > "n100.r09.s012_output/n100.r09.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s012_output/n100.r09.s012.depth.txt" "n100.r09.s012_output/n100.r09.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s012_output/n100.r09.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s012_output/n100.r09.s012.reference.fas" | bcftools consensus -m "n100.r09.s012_output/n100.r09.s012.low_depth.tsv" tmp.vcf.gz > "n100.r09.s012_output/n100.r09.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task 1503efcb (flow 29954b22): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:39 scheduler task 1503efcb (flow 29954b22): waiting for completion (try 0): started
2021/07/08 17:29:39  ->  n100.r09.s043.Main.out_file 29954b22 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:39 n100.r09.s043.Main.out_file 29954b22 n100/r09/n100.r09.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f2ffb1de52af8f3c9ccd7787897f104a882c5dfa48c7107f433ebf6496b56453
	sha256:29954b2201e9f270c0290ac20176403c2f00837d95bca57c2e06eb74a3a45453
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1503efcb073200d938c6381839b5e5ea8948d59aae3c5ca14ad61efe8d02fa07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s043_output"
	    wget -O "n100.r09.s043_output/n100.r09.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s043_output/n100.r09.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s043_output/n100.r09.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s043_output/n100.r09.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s043_output/n100.r09.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s043_output/n100.r09.s043.reference.fas" "n100.r09.s043_output/n100.r09.s043.fq1.fastq" "n100.r09.s043_output/n100.r09.s043.fq2.fastq" | samtools view -bS - > "n100.r09.s043_output/n100.r09.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s043_output/n100.r09.s043.untrimmed.sorted.bam" "n100.r09.s043_output/n100.r09.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s043_output/n100.r09.s043.untrimmed.sorted.bam" -b "n100.r09.s043_output/n100.r09.s043.primers.bed" -p "n100.r09.s043_output/n100.r09.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" "n100.r09.s043_output/n100.r09.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s043_output/n100.r09.s043.reference.fas" "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" > "n100.r09.s043_output/n100.r09.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s043_output/n100.r09.s043.reference.fas" --call-indels "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" > "n100.r09.s043_output/n100.r09.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" > "n100.r09.s043_output/n100.r09.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s043_output/n100.r09.s043.depth.txt" "n100.r09.s043_output/n100.r09.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s043_output/n100.r09.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s043_output/n100.r09.s043.reference.fas" | bcftools consensus -m "n100.r09.s043_output/n100.r09.s043.low_depth.tsv" tmp.vcf.gz > "n100.r09.s043_output/n100.r09.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:39 scheduler task a118daf0 (flow 01eaeab9): loaded val<.=c9dd67a8 35.4MiB>
2021/07/08 17:29:39 scheduler task a118daf0 (flow 01eaeab9): loading (try 0): successful, next state: submitting
2021/07/08 17:29:39 scheduler task a118daf0 (flow 01eaeab9): submitting (try 0): started
2021/07/08 17:29:40 scheduler task ca3bf7bf (flow 57c64a3d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task ca3bf7bf (flow 57c64a3d): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s062.Main.out_file 57c64a3d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s062.Main.out_file 57c64a3d n100/r09/n100.r09.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b8a47f936ba41a95774090766d0da1eab71ac795a7ed82dc528f2cb7d45b812
	sha256:57c64a3dd3bd12511ecfd9256ca3354b9c802ea27f6b72bbd2730bf3d9a415f4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ca3bf7bfad8c6757b682b1eecb2d87a181283c447f2415c78f08d2d3a0007021
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s062_output"
	    wget -O "n100.r09.s062_output/n100.r09.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s062_output/n100.r09.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s062_output/n100.r09.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s062_output/n100.r09.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s062_output/n100.r09.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s062_output/n100.r09.s062.reference.fas" "n100.r09.s062_output/n100.r09.s062.fq1.fastq" "n100.r09.s062_output/n100.r09.s062.fq2.fastq" | samtools view -bS - > "n100.r09.s062_output/n100.r09.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s062_output/n100.r09.s062.untrimmed.sorted.bam" "n100.r09.s062_output/n100.r09.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s062_output/n100.r09.s062.untrimmed.sorted.bam" -b "n100.r09.s062_output/n100.r09.s062.primers.bed" -p "n100.r09.s062_output/n100.r09.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" "n100.r09.s062_output/n100.r09.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s062_output/n100.r09.s062.reference.fas" "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" > "n100.r09.s062_output/n100.r09.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s062_output/n100.r09.s062.reference.fas" --call-indels "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" > "n100.r09.s062_output/n100.r09.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" > "n100.r09.s062_output/n100.r09.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s062_output/n100.r09.s062.depth.txt" "n100.r09.s062_output/n100.r09.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s062_output/n100.r09.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s062_output/n100.r09.s062.reference.fas" | bcftools consensus -m "n100.r09.s062_output/n100.r09.s062.low_depth.tsv" tmp.vcf.gz > "n100.r09.s062_output/n100.r09.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:40 scheduler task 02e1d72b (flow 9bb037fa): loaded val<.=b4a0d025 35.4MiB>
2021/07/08 17:29:40 scheduler task 02e1d72b (flow 9bb037fa): loaded val<.=98b8bd3c 35.4MiB>
2021/07/08 17:29:40 scheduler task 02e1d72b (flow 9bb037fa): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 02e1d72b (flow 9bb037fa): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 4e103f12 (flow 59028377): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task 4e103f12 (flow 59028377): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s057.Main.out_file 59028377 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s057.Main.out_file 59028377 n100/r09/n100.r09.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb2257471d97bb2ddf2ba31c0a830a695a717eff3baf0c5f69cd1f5a465c52e1
	sha256:5902837725024061df70507c0280e3823633a0f1362fab6c13b0ef5cfbcd08f9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e103f12b853bfd8339558b1e8d3c162a7f80eb2e4e3ba015c8a9ddb169ea123
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s057_output"
	    wget -O "n100.r09.s057_output/n100.r09.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s057_output/n100.r09.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s057_output/n100.r09.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s057_output/n100.r09.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s057_output/n100.r09.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s057_output/n100.r09.s057.reference.fas" "n100.r09.s057_output/n100.r09.s057.fq1.fastq" "n100.r09.s057_output/n100.r09.s057.fq2.fastq" | samtools view -bS - > "n100.r09.s057_output/n100.r09.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s057_output/n100.r09.s057.untrimmed.sorted.bam" "n100.r09.s057_output/n100.r09.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s057_output/n100.r09.s057.untrimmed.sorted.bam" -b "n100.r09.s057_output/n100.r09.s057.primers.bed" -p "n100.r09.s057_output/n100.r09.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" "n100.r09.s057_output/n100.r09.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s057_output/n100.r09.s057.reference.fas" "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" > "n100.r09.s057_output/n100.r09.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s057_output/n100.r09.s057.reference.fas" --call-indels "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" > "n100.r09.s057_output/n100.r09.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" > "n100.r09.s057_output/n100.r09.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s057_output/n100.r09.s057.depth.txt" "n100.r09.s057_output/n100.r09.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s057_output/n100.r09.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s057_output/n100.r09.s057.reference.fas" | bcftools consensus -m "n100.r09.s057_output/n100.r09.s057.low_depth.tsv" tmp.vcf.gz > "n100.r09.s057_output/n100.r09.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:40 scheduler task 4dd42029 (flow 3d6d80a3): loaded val<.=d5363e91 35.4MiB>
2021/07/08 17:29:40 scheduler task 03ade628 (flow 6fcd9514): loaded val<.=ae6286f1 35.4MiB>
2021/07/08 17:29:40 scheduler task 03ade628 (flow 6fcd9514): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 03ade628 (flow 6fcd9514): submitting (try 0): started
2021/07/08 17:29:40 scheduler task df2d184f (flow 15b3bc1f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task df2d184f (flow 15b3bc1f): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s023.Main.out_file 15b3bc1f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s023.Main.out_file 15b3bc1f n100/r09/n100.r09.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4de8cff36b1f3e010934e1582962b0caeca23c7f2c7b4b1884d3c58eb686a005
	sha256:15b3bc1fb4f02319345896848c4d28509b9ec6dd4187dea05eb2a144ac907e22
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df2d184f2e6ec48c6d8671d55331589a679860558d1a621a35fea047894586fb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s023_output"
	    wget -O "n100.r09.s023_output/n100.r09.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s023_output/n100.r09.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s023_output/n100.r09.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s023_output/n100.r09.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s023_output/n100.r09.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s023_output/n100.r09.s023.reference.fas" "n100.r09.s023_output/n100.r09.s023.fq1.fastq" "n100.r09.s023_output/n100.r09.s023.fq2.fastq" | samtools view -bS - > "n100.r09.s023_output/n100.r09.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s023_output/n100.r09.s023.untrimmed.sorted.bam" "n100.r09.s023_output/n100.r09.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s023_output/n100.r09.s023.untrimmed.sorted.bam" -b "n100.r09.s023_output/n100.r09.s023.primers.bed" -p "n100.r09.s023_output/n100.r09.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" "n100.r09.s023_output/n100.r09.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s023_output/n100.r09.s023.reference.fas" "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" > "n100.r09.s023_output/n100.r09.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s023_output/n100.r09.s023.reference.fas" --call-indels "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" > "n100.r09.s023_output/n100.r09.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" > "n100.r09.s023_output/n100.r09.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s023_output/n100.r09.s023.depth.txt" "n100.r09.s023_output/n100.r09.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s023_output/n100.r09.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s023_output/n100.r09.s023.reference.fas" | bcftools consensus -m "n100.r09.s023_output/n100.r09.s023.low_depth.tsv" tmp.vcf.gz > "n100.r09.s023_output/n100.r09.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:40 scheduler task c5cc38da (flow 8dc0d360): loaded val<.=0aa1cc98 35.4MiB>
2021/07/08 17:29:40 scheduler task c5cc38da (flow 8dc0d360): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task c5cc38da (flow 8dc0d360): submitting (try 0): started
2021/07/08 17:29:40 scheduler task ec43ea83 (flow 7b4ec1c0): loaded val<.=d1d948b9 35.4MiB>
2021/07/08 17:29:40 scheduler task ec43ea83 (flow 7b4ec1c0): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 909dc8d5 (flow b75a80ea): loaded val<.=2479b33f 35.4MiB>
2021/07/08 17:29:40 scheduler task 31dcb46d (flow ca642532): loaded val<.=647a6102 35.4MiB>
2021/07/08 17:29:40 scheduler task ec43ea83 (flow 7b4ec1c0): submitting (try 0): started
2021/07/08 17:29:40 scheduler task e67b8fea (flow ff045352): loaded val<.=65a93da3 35.4MiB>
2021/07/08 17:29:40 scheduler task e67b8fea (flow ff045352): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task e67b8fea (flow ff045352): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 43278a34 (flow 85764be5): loaded val<.=a41fbf56 35.4MiB>
2021/07/08 17:29:40 scheduler task 43278a34 (flow 85764be5): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 43278a34 (flow 85764be5): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 301872db (flow f4514b15): loaded val<.=1928ce1b 35.4MiB>
2021/07/08 17:29:40 scheduler task 6cbee719 (flow 30fe5ddd): loaded val<.=10931eeb 35.4MiB>
2021/07/08 17:29:40 scheduler task 7ef3289f (flow d1e76a3d): loaded val<.=1a3f5d50 35.4MiB>
2021/07/08 17:29:40 scheduler task 25cadac9 (flow bac83fae): loaded val<.=1d78aa5f 35.4MiB>
2021/07/08 17:29:40 scheduler task a9d54835 (flow 462eab90): loaded val<.=6d8111f3 35.4MiB>
2021/07/08 17:29:40 scheduler task 4b51afe4 (flow 88409fe3): loaded val<.=272c4bf2 35.4MiB>
2021/07/08 17:29:40 scheduler task 4b51afe4 (flow 88409fe3): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 25cadac9 (flow bac83fae): loaded val<.=d5914966 35.4MiB>
2021/07/08 17:29:40 scheduler task 25cadac9 (flow bac83fae): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 4b51afe4 (flow 88409fe3): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 25cadac9 (flow bac83fae): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 6798e2db (flow b27ceb8c): loaded val<.=e80d2402 35.4MiB>
2021/07/08 17:29:40 scheduler task 6798e2db (flow b27ceb8c): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task adaa95a9 (flow 48730549): loaded val<.=19ae7594 35.4MiB>
2021/07/08 17:29:40 scheduler task 909dc8d5 (flow b75a80ea): loaded val<.=46b16ce8 35.4MiB>
2021/07/08 17:29:40 scheduler task 909dc8d5 (flow b75a80ea): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 03660aa3 (flow 0ff73e1f): loaded val<.=de1580bf 35.4MiB>
2021/07/08 17:29:40 scheduler task c5ef6095 (flow 7b48a912): loaded val<.=e36d7959 35.4MiB>
2021/07/08 17:29:40 scheduler task c5ef6095 (flow 7b48a912): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 03660aa3 (flow 0ff73e1f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 6798e2db (flow b27ceb8c): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 909dc8d5 (flow b75a80ea): submitting (try 0): started
2021/07/08 17:29:40 scheduler task c5ef6095 (flow 7b48a912): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 03660aa3 (flow 0ff73e1f): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 177a80d4 (flow c571bec1): loaded val<.=b4957c23 35.4MiB>
2021/07/08 17:29:40 scheduler task 2230bc53 (flow 62a0035c): loaded val<.=908e0a75 35.4MiB>
2021/07/08 17:29:40 scheduler task 2230bc53 (flow 62a0035c): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 2230bc53 (flow 62a0035c): submitting (try 0): started
2021/07/08 17:29:40 scheduler task dd516de3 (flow 4874cac6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task e71d796c (flow ef0a70a3): loaded val<.=fa3d9d8f 35.4MiB>
2021/07/08 17:29:40 scheduler task e71d796c (flow ef0a70a3): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task bcbe460f (flow 032e076c): loaded val<.=61eeaa51 35.4MiB>
2021/07/08 17:29:40 scheduler task bcbe460f (flow 032e076c): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 62391e6e (flow 8039d92f): loaded val<.=c0c96767 35.4MiB>
2021/07/08 17:29:40 scheduler task 62391e6e (flow 8039d92f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task dd516de3 (flow 4874cac6): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s094.Main.out_file 4874cac6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s094.Main.out_file 4874cac6 n100/r09/n100.r09.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d2e9190dbd2091e7984fa1c5bdcd59d50d90536618630fcfbabef856bd61cf0c
	sha256:4874cac66952d7d1118bee528860ba57cceb2b5b5954533534bdc66944cfb346
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dd516de352f989f174a6d3a7297130a4f48135b5824c0b64003174297fee87ed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s094_output"
	    wget -O "n100.r09.s094_output/n100.r09.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s094_output/n100.r09.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s094_output/n100.r09.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s094_output/n100.r09.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s094_output/n100.r09.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s094_output/n100.r09.s094.reference.fas" "n100.r09.s094_output/n100.r09.s094.fq1.fastq" "n100.r09.s094_output/n100.r09.s094.fq2.fastq" | samtools view -bS - > "n100.r09.s094_output/n100.r09.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s094_output/n100.r09.s094.untrimmed.sorted.bam" "n100.r09.s094_output/n100.r09.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s094_output/n100.r09.s094.untrimmed.sorted.bam" -b "n100.r09.s094_output/n100.r09.s094.primers.bed" -p "n100.r09.s094_output/n100.r09.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" "n100.r09.s094_output/n100.r09.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s094_output/n100.r09.s094.reference.fas" "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" > "n100.r09.s094_output/n100.r09.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s094_output/n100.r09.s094.reference.fas" --call-indels "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" > "n100.r09.s094_output/n100.r09.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" > "n100.r09.s094_output/n100.r09.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s094_output/n100.r09.s094.depth.txt" "n100.r09.s094_output/n100.r09.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s094_output/n100.r09.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s094_output/n100.r09.s094.reference.fas" | bcftools consensus -m "n100.r09.s094_output/n100.r09.s094.low_depth.tsv" tmp.vcf.gz > "n100.r09.s094_output/n100.r09.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:40 scheduler task 6a4e8d08 (flow 8ab86c50): loaded val<.=cf331490 35.4MiB>
2021/07/08 17:29:40 scheduler task 6a4e8d08 (flow 8ab86c50): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task e71d796c (flow ef0a70a3): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 67bedddd (flow cb1ce740): loaded val<.=594def7b 35.4MiB>
2021/07/08 17:29:40 scheduler task 9691b24c (flow 3c2b3c63): loaded val<.=c70d6a8f 35.4MiB>
2021/07/08 17:29:40 scheduler task 9691b24c (flow 3c2b3c63): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task bcbe460f (flow 032e076c): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 62391e6e (flow 8039d92f): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 177a80d4 (flow c571bec1): loaded val<.=4e534738 35.4MiB>
2021/07/08 17:29:40 scheduler task 177a80d4 (flow c571bec1): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 6cbee719 (flow 30fe5ddd): loaded val<.=97a65ee2 35.4MiB>
2021/07/08 17:29:40 scheduler task 6cbee719 (flow 30fe5ddd): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 67ea8735 (flow 75e64e3f): loaded val<.=0bf4ee4e 35.4MiB>
2021/07/08 17:29:40 scheduler task 67ea8735 (flow 75e64e3f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 6a4e8d08 (flow 8ab86c50): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 9691b24c (flow 3c2b3c63): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 177a80d4 (flow c571bec1): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 89f12d5b (flow d6d4b6d9): loaded val<.=e1c8127b 35.4MiB>
2021/07/08 17:29:40 scheduler task 89f12d5b (flow d6d4b6d9): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 8a72f87e (flow 1eb78b40): loaded val<.=f497844d 35.4MiB>
2021/07/08 17:29:40 scheduler task 41e87e7d (flow 4e911385): loaded val<.=f914105c 35.4MiB>
2021/07/08 17:29:40 scheduler task 8cebfe33 (flow 85081685): loaded val<.=32bbc792 35.4MiB>
2021/07/08 17:29:40 scheduler task 41e87e7d (flow 4e911385): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task d868dd9b (flow 8715eadd): loaded val<.=dfafecc3 35.4MiB>
2021/07/08 17:29:40 scheduler task 6cbee719 (flow 30fe5ddd): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 5b93b009 (flow 214bd342): loaded val<.=f1738bb8 35.4MiB>
2021/07/08 17:29:40 scheduler task 5b93b009 (flow 214bd342): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 67ea8735 (flow 75e64e3f): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 89f12d5b (flow d6d4b6d9): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 8bb87836 (flow 19c275b5): loaded val<.=299d578a 35.4MiB>
2021/07/08 17:29:40 scheduler task 8bb87836 (flow 19c275b5): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task d843f9bd (flow 960857c0): loaded val<.=0f97afc5 35.4MiB>
2021/07/08 17:29:40 scheduler task d843f9bd (flow 960857c0): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task f75b41ab (flow 7f1c060b): loaded val<.=45b2a9da 35.4MiB>
2021/07/08 17:29:40 scheduler task f75b41ab (flow 7f1c060b): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 41e87e7d (flow 4e911385): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 5b93b009 (flow 214bd342): submitting (try 0): started
2021/07/08 17:29:40 scheduler task c3ca00c6 (flow 511c1700): loaded val<.=34e18437 35.4MiB>
2021/07/08 17:29:40 scheduler task c3ca00c6 (flow 511c1700): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task a4988c18 (flow e8b23611): loaded val<.=ef1ebd7a 35.4MiB>
2021/07/08 17:29:40 scheduler task 8a72f87e (flow 1eb78b40): loaded val<.=05f3730e 35.4MiB>
2021/07/08 17:29:40 scheduler task 8a72f87e (flow 1eb78b40): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 8bb87836 (flow 19c275b5): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 0a19571a (flow 36f22554): loaded val<.=81517571 35.4MiB>
2021/07/08 17:29:40 scheduler task 8cebfe33 (flow 85081685): loaded val<.=e20b945e 35.4MiB>
2021/07/08 17:29:40 scheduler task 8cebfe33 (flow 85081685): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task d843f9bd (flow 960857c0): submitting (try 0): started
2021/07/08 17:29:40 scheduler task f75b41ab (flow 7f1c060b): submitting (try 0): started
2021/07/08 17:29:40 scheduler task adaa95a9 (flow 48730549): loaded val<.=4ab799fe 35.4MiB>
2021/07/08 17:29:40 scheduler task adaa95a9 (flow 48730549): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task d868dd9b (flow 8715eadd): loaded val<.=f92a6b73 35.4MiB>
2021/07/08 17:29:40 scheduler task d868dd9b (flow 8715eadd): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 0a19571a (flow 36f22554): loaded val<.=c8bbc9ff 35.4MiB>
2021/07/08 17:29:40 scheduler task 0a19571a (flow 36f22554): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task c3ca00c6 (flow 511c1700): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 3d1fe110 (flow 3e3233db): loaded val<.=f79c6134 35.4MiB>
2021/07/08 17:29:40 scheduler task 3d1fe110 (flow 3e3233db): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 8a72f87e (flow 1eb78b40): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 8cebfe33 (flow 85081685): submitting (try 0): started
2021/07/08 17:29:40 scheduler task adaa95a9 (flow 48730549): submitting (try 0): started
2021/07/08 17:29:40 scheduler task d868dd9b (flow 8715eadd): submitting (try 0): started
2021/07/08 17:29:40 scheduler task a81322e0 (flow 03205e45): loaded val<.=a9a6d018 35.4MiB>
2021/07/08 17:29:40 scheduler task 0a19571a (flow 36f22554): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 3d1fe110 (flow 3e3233db): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 72711129 (flow ca14132b): loaded val<.=277a4920 35.4MiB>
2021/07/08 17:29:40 scheduler task 72711129 (flow ca14132b): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 6a9c93cc (flow 0e69c9bc): loaded val<.=ef08f934 35.4MiB>
2021/07/08 17:29:40 scheduler task 72711129 (flow ca14132b): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 6a9c93cc (flow 0e69c9bc): loaded val<.=2769e60a 35.4MiB>
2021/07/08 17:29:40 scheduler task 6a9c93cc (flow 0e69c9bc): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 7ef3289f (flow d1e76a3d): loaded val<.=28773a98 35.4MiB>
2021/07/08 17:29:40 scheduler task 7ef3289f (flow d1e76a3d): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 6a9c93cc (flow 0e69c9bc): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 7ef3289f (flow d1e76a3d): submitting (try 0): started
2021/07/08 17:29:40 scheduler task a6886853 (flow 3ff94c60): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task a6886853 (flow 3ff94c60): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s024.Main.out_file 3ff94c60 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s024.Main.out_file 3ff94c60 n100/r09/n100.r09.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5ce6f22833f96dc8602e9c64208ad6913d76b80f36e67f753f746ee4c1475e6
	sha256:3ff94c60a1b741c64476de796a4f6a9c4553f445913d2debbf9a520f12b60dd8
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a6886853dcab46c3ba613b265527c65684426e43ae2af67f68fbd49faab3cfed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s024_output"
	    wget -O "n100.r09.s024_output/n100.r09.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s024_output/n100.r09.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s024_output/n100.r09.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s024_output/n100.r09.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s024_output/n100.r09.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s024_output/n100.r09.s024.reference.fas" "n100.r09.s024_output/n100.r09.s024.fq1.fastq" "n100.r09.s024_output/n100.r09.s024.fq2.fastq" | samtools view -bS - > "n100.r09.s024_output/n100.r09.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s024_output/n100.r09.s024.untrimmed.sorted.bam" "n100.r09.s024_output/n100.r09.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s024_output/n100.r09.s024.untrimmed.sorted.bam" -b "n100.r09.s024_output/n100.r09.s024.primers.bed" -p "n100.r09.s024_output/n100.r09.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" "n100.r09.s024_output/n100.r09.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s024_output/n100.r09.s024.reference.fas" "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" > "n100.r09.s024_output/n100.r09.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s024_output/n100.r09.s024.reference.fas" --call-indels "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" > "n100.r09.s024_output/n100.r09.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" > "n100.r09.s024_output/n100.r09.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s024_output/n100.r09.s024.depth.txt" "n100.r09.s024_output/n100.r09.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s024_output/n100.r09.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s024_output/n100.r09.s024.reference.fas" | bcftools consensus -m "n100.r09.s024_output/n100.r09.s024.low_depth.tsv" tmp.vcf.gz > "n100.r09.s024_output/n100.r09.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:40 scheduler task 31dcb46d (flow ca642532): loaded val<.=4cf0f06d 35.4MiB>
2021/07/08 17:29:40 scheduler task 31dcb46d (flow ca642532): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 31dcb46d (flow ca642532): submitting (try 0): started
2021/07/08 17:29:40 scheduler task a9d54835 (flow 462eab90): loaded val<.=39dd305f 35.4MiB>
2021/07/08 17:29:40 scheduler task a9d54835 (flow 462eab90): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task a9d54835 (flow 462eab90): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 6dd29d24 (flow 3e29d10c): loaded val<.=24f6aaf5 35.4MiB>
2021/07/08 17:29:40 scheduler task 0f528024 (flow ed8c06bc): loaded val<.=abfdbe6f 35.4MiB>
2021/07/08 17:29:40 scheduler task 0f528024 (flow ed8c06bc): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 0f528024 (flow ed8c06bc): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 301872db (flow f4514b15): loaded val<.=4737da51 35.4MiB>
2021/07/08 17:29:40 scheduler task 301872db (flow f4514b15): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 97158a03 (flow 61535a0d): loaded val<.=d0af8b1d 35.4MiB>
2021/07/08 17:29:40 scheduler task 97158a03 (flow 61535a0d): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 301872db (flow f4514b15): submitting (try 0): started
2021/07/08 17:29:40 scheduler task a81322e0 (flow 03205e45): loaded val<.=2c6a2b0e 35.4MiB>
2021/07/08 17:29:40 scheduler task a81322e0 (flow 03205e45): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 97158a03 (flow 61535a0d): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 339efe72 (flow ac3f4213): loaded val<.=6f3a2485 35.4MiB>
2021/07/08 17:29:40 scheduler task 339efe72 (flow ac3f4213): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task a81322e0 (flow 03205e45): submitting (try 0): started
2021/07/08 17:29:40 scheduler task c61cb881 (flow 380dcf18): loaded val<.=11d86c28 35.4MiB>
2021/07/08 17:29:40 scheduler task c61cb881 (flow 380dcf18): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 339efe72 (flow ac3f4213): submitting (try 0): started
2021/07/08 17:29:40 scheduler task b49db477 (flow 591b29d1): loaded val<.=5a93c4fe 35.4MiB>
2021/07/08 17:29:40 scheduler task b49db477 (flow 591b29d1): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task b49db477 (flow 591b29d1): submitting (try 0): started
2021/07/08 17:29:40 scheduler task c61cb881 (flow 380dcf18): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 6dd29d24 (flow 3e29d10c): loaded val<.=d482e5f6 35.4MiB>
2021/07/08 17:29:40 scheduler task 6dd29d24 (flow 3e29d10c): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 6dd29d24 (flow 3e29d10c): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 4dd42029 (flow 3d6d80a3): loaded val<.=522cad17 35.4MiB>
2021/07/08 17:29:40 scheduler task 4dd42029 (flow 3d6d80a3): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task a4988c18 (flow e8b23611): loaded val<.=65c8c704 35.4MiB>
2021/07/08 17:29:40 scheduler task a4988c18 (flow e8b23611): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 4dd42029 (flow 3d6d80a3): submitting (try 0): started
2021/07/08 17:29:40 scheduler task a4988c18 (flow e8b23611): submitting (try 0): started
2021/07/08 17:29:40 scheduler task c8bedcb7 (flow 89fd3d0f): loaded val<.=fd1da566 35.4MiB>
2021/07/08 17:29:40 scheduler task c8bedcb7 (flow 89fd3d0f): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task c8bedcb7 (flow 89fd3d0f): submitting (try 0): started
2021/07/08 17:29:40 scheduler task d1b88294 (flow e64b8e8e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task d1b88294 (flow e64b8e8e): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s047.Main.out_file e64b8e8e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s047.Main.out_file e64b8e8e n100/r09/n100.r09.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:18a05d25500f0bb3eb79254402c3f8ce8b2f120fcf5a8b0aa3bf3da35e16ff7d
	sha256:e64b8e8ebf811859886ec5fec48ea810d9ce11359dc0f55b2eba983793138504
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d1b882948b7df947faa7ccc212c0710d2aa54860d61f5c10a3b1dea7ad3dc52d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s047_output"
	    wget -O "n100.r09.s047_output/n100.r09.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s047_output/n100.r09.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s047_output/n100.r09.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s047_output/n100.r09.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s047_output/n100.r09.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s047_output/n100.r09.s047.reference.fas" "n100.r09.s047_output/n100.r09.s047.fq1.fastq" "n100.r09.s047_output/n100.r09.s047.fq2.fastq" | samtools view -bS - > "n100.r09.s047_output/n100.r09.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s047_output/n100.r09.s047.untrimmed.sorted.bam" "n100.r09.s047_output/n100.r09.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s047_output/n100.r09.s047.untrimmed.sorted.bam" -b "n100.r09.s047_output/n100.r09.s047.primers.bed" -p "n100.r09.s047_output/n100.r09.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" "n100.r09.s047_output/n100.r09.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s047_output/n100.r09.s047.reference.fas" "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" > "n100.r09.s047_output/n100.r09.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s047_output/n100.r09.s047.reference.fas" --call-indels "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" > "n100.r09.s047_output/n100.r09.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" > "n100.r09.s047_output/n100.r09.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s047_output/n100.r09.s047.depth.txt" "n100.r09.s047_output/n100.r09.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s047_output/n100.r09.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s047_output/n100.r09.s047.reference.fas" | bcftools consensus -m "n100.r09.s047_output/n100.r09.s047.low_depth.tsv" tmp.vcf.gz > "n100.r09.s047_output/n100.r09.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:40 scheduler task 67bedddd (flow cb1ce740): loaded val<.=87b86b61 35.4MiB>
2021/07/08 17:29:40 scheduler task 67bedddd (flow cb1ce740): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task 67bedddd (flow cb1ce740): submitting (try 0): started
2021/07/08 17:29:40 scheduler task a96b1313 (flow 2b827096): loaded val<.=a65bdb1c 35.4MiB>
2021/07/08 17:29:40 scheduler task a96b1313 (flow 2b827096): loading (try 0): successful, next state: submitting
2021/07/08 17:29:40 scheduler task a96b1313 (flow 2b827096): submitting (try 0): started
2021/07/08 17:29:40 scheduler task 58a3aaa8 (flow 68848ea7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:40 scheduler task 58a3aaa8 (flow 68848ea7): waiting for completion (try 0): started
2021/07/08 17:29:40  ->  n100.r09.s075.Main.out_file 68848ea7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:40 n100.r09.s075.Main.out_file 68848ea7 n100/r09/n100.r09.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1381321058fc3b9d7f1016a4044b5c8e3e3e63350c675388ec0083df16c84e13
	sha256:68848ea710d57060a67095668122dbdcb499ba7393bef0751367cb5319c0d3ea
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/58a3aaa8bc4cf4199176411efdf2f07febb9c4a4b30f67da1ac0bed92b4f4c5a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s075_output"
	    wget -O "n100.r09.s075_output/n100.r09.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s075_output/n100.r09.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s075_output/n100.r09.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s075_output/n100.r09.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s075_output/n100.r09.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s075_output/n100.r09.s075.reference.fas" "n100.r09.s075_output/n100.r09.s075.fq1.fastq" "n100.r09.s075_output/n100.r09.s075.fq2.fastq" | samtools view -bS - > "n100.r09.s075_output/n100.r09.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s075_output/n100.r09.s075.untrimmed.sorted.bam" "n100.r09.s075_output/n100.r09.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s075_output/n100.r09.s075.untrimmed.sorted.bam" -b "n100.r09.s075_output/n100.r09.s075.primers.bed" -p "n100.r09.s075_output/n100.r09.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" "n100.r09.s075_output/n100.r09.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s075_output/n100.r09.s075.reference.fas" "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" > "n100.r09.s075_output/n100.r09.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s075_output/n100.r09.s075.reference.fas" --call-indels "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" > "n100.r09.s075_output/n100.r09.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" > "n100.r09.s075_output/n100.r09.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s075_output/n100.r09.s075.depth.txt" "n100.r09.s075_output/n100.r09.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s075_output/n100.r09.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s075_output/n100.r09.s075.reference.fas" | bcftools consensus -m "n100.r09.s075_output/n100.r09.s075.low_depth.tsv" tmp.vcf.gz > "n100.r09.s075_output/n100.r09.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:41 scheduler task 367eab87 (flow ce2eee55): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:41 scheduler task 367eab87 (flow ce2eee55): waiting for completion (try 0): started
2021/07/08 17:29:41  ->  n100.r09.s022.Main.out_file ce2eee55 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:41 n100.r09.s022.Main.out_file ce2eee55 n100/r09/n100.r09.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3711f97f9730a2d161642ac788e6a1accb791afd9216dc565c4c7a3af6e8ccb1
	sha256:ce2eee5564362be42063349dac7e2c60a72dd862540da5ae3dd9b3e4cf4f7b23
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/367eab873eff6a6a5ae520e6385db3c72efbd9a99c83f300958f653d42fe024a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s022_output"
	    wget -O "n100.r09.s022_output/n100.r09.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s022_output/n100.r09.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s022_output/n100.r09.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s022_output/n100.r09.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s022_output/n100.r09.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s022_output/n100.r09.s022.reference.fas" "n100.r09.s022_output/n100.r09.s022.fq1.fastq" "n100.r09.s022_output/n100.r09.s022.fq2.fastq" | samtools view -bS - > "n100.r09.s022_output/n100.r09.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s022_output/n100.r09.s022.untrimmed.sorted.bam" "n100.r09.s022_output/n100.r09.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s022_output/n100.r09.s022.untrimmed.sorted.bam" -b "n100.r09.s022_output/n100.r09.s022.primers.bed" -p "n100.r09.s022_output/n100.r09.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" "n100.r09.s022_output/n100.r09.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s022_output/n100.r09.s022.reference.fas" "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" > "n100.r09.s022_output/n100.r09.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s022_output/n100.r09.s022.reference.fas" --call-indels "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" > "n100.r09.s022_output/n100.r09.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" > "n100.r09.s022_output/n100.r09.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s022_output/n100.r09.s022.depth.txt" "n100.r09.s022_output/n100.r09.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s022_output/n100.r09.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s022_output/n100.r09.s022.reference.fas" | bcftools consensus -m "n100.r09.s022_output/n100.r09.s022.low_depth.tsv" tmp.vcf.gz > "n100.r09.s022_output/n100.r09.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:41 scheduler task bc405a66 (flow 4f626c55): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:41 scheduler task bc405a66 (flow 4f626c55): waiting for completion (try 0): started
2021/07/08 17:29:41  ->  n100.r09.s048.Main.out_file 4f626c55 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:41 n100.r09.s048.Main.out_file 4f626c55 n100/r09/n100.r09.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dfd2d36de0d65d441e65611c3a439cd719cf83a14c501c81e79d70c8919a5948
	sha256:4f626c55f279ddd8e69185a49d2bf33b9dce8699f9bee1264e63d2620ab6a6c9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc405a660cb0b0d0e8b8d8049b3e2f03178863739a039cbdf3993de0865abc1a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s048_output"
	    wget -O "n100.r09.s048_output/n100.r09.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s048_output/n100.r09.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s048_output/n100.r09.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s048_output/n100.r09.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s048_output/n100.r09.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s048_output/n100.r09.s048.reference.fas" "n100.r09.s048_output/n100.r09.s048.fq1.fastq" "n100.r09.s048_output/n100.r09.s048.fq2.fastq" | samtools view -bS - > "n100.r09.s048_output/n100.r09.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s048_output/n100.r09.s048.untrimmed.sorted.bam" "n100.r09.s048_output/n100.r09.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s048_output/n100.r09.s048.untrimmed.sorted.bam" -b "n100.r09.s048_output/n100.r09.s048.primers.bed" -p "n100.r09.s048_output/n100.r09.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" "n100.r09.s048_output/n100.r09.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s048_output/n100.r09.s048.reference.fas" "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" > "n100.r09.s048_output/n100.r09.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s048_output/n100.r09.s048.reference.fas" --call-indels "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" > "n100.r09.s048_output/n100.r09.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" > "n100.r09.s048_output/n100.r09.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s048_output/n100.r09.s048.depth.txt" "n100.r09.s048_output/n100.r09.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s048_output/n100.r09.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s048_output/n100.r09.s048.reference.fas" | bcftools consensus -m "n100.r09.s048_output/n100.r09.s048.low_depth.tsv" tmp.vcf.gz > "n100.r09.s048_output/n100.r09.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:41 scheduler task 813790ac (flow 4e9d02e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:41 scheduler task 813790ac (flow 4e9d02e3): waiting for completion (try 0): started
2021/07/08 17:29:41  ->  n100.r09.s058.Main.out_file 4e9d02e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:41 n100.r09.s058.Main.out_file 4e9d02e3 n100/r09/n100.r09.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca1f4ec05a09ddca7df5bc63cf2e4c5c5c9898203c6b4bae8b9356c32ae384b0
	sha256:4e9d02e3176261ea385f08aa07bf3ca74bfa2979052c8fb0fbe8f820cc793fa9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/813790ac956f5019ec5268170750be5cd7688b67fddb82563a0f6777385f9d45
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s058_output"
	    wget -O "n100.r09.s058_output/n100.r09.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s058_output/n100.r09.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s058_output/n100.r09.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s058_output/n100.r09.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s058_output/n100.r09.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s058_output/n100.r09.s058.reference.fas" "n100.r09.s058_output/n100.r09.s058.fq1.fastq" "n100.r09.s058_output/n100.r09.s058.fq2.fastq" | samtools view -bS - > "n100.r09.s058_output/n100.r09.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s058_output/n100.r09.s058.untrimmed.sorted.bam" "n100.r09.s058_output/n100.r09.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s058_output/n100.r09.s058.untrimmed.sorted.bam" -b "n100.r09.s058_output/n100.r09.s058.primers.bed" -p "n100.r09.s058_output/n100.r09.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" "n100.r09.s058_output/n100.r09.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s058_output/n100.r09.s058.reference.fas" "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" > "n100.r09.s058_output/n100.r09.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s058_output/n100.r09.s058.reference.fas" --call-indels "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" > "n100.r09.s058_output/n100.r09.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" > "n100.r09.s058_output/n100.r09.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s058_output/n100.r09.s058.depth.txt" "n100.r09.s058_output/n100.r09.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s058_output/n100.r09.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s058_output/n100.r09.s058.reference.fas" | bcftools consensus -m "n100.r09.s058_output/n100.r09.s058.low_depth.tsv" tmp.vcf.gz > "n100.r09.s058_output/n100.r09.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:41 scheduler task b5bd2ae1 (flow 2a7d8e22): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:41 scheduler task b5bd2ae1 (flow 2a7d8e22): waiting for completion (try 0): started
2021/07/08 17:29:41  ->  n100.r09.s076.Main.out_file 2a7d8e22 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:41 n100.r09.s076.Main.out_file 2a7d8e22 n100/r09/n100.r09.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc783925e8986dc1aefc7ebaff6b29bdf0d789e7d781b95238c7dbbdb9395e4e
	sha256:2a7d8e22c09991bf030f6f6f4ff5b6b92d560d758641b4efab08feabe307023d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5bd2ae1b8bf14a231b822b538b9286cefb08f832afbbf9e6d396c6c4fe44160
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s076_output"
	    wget -O "n100.r09.s076_output/n100.r09.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s076_output/n100.r09.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s076_output/n100.r09.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s076_output/n100.r09.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s076_output/n100.r09.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s076_output/n100.r09.s076.reference.fas" "n100.r09.s076_output/n100.r09.s076.fq1.fastq" "n100.r09.s076_output/n100.r09.s076.fq2.fastq" | samtools view -bS - > "n100.r09.s076_output/n100.r09.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s076_output/n100.r09.s076.untrimmed.sorted.bam" "n100.r09.s076_output/n100.r09.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s076_output/n100.r09.s076.untrimmed.sorted.bam" -b "n100.r09.s076_output/n100.r09.s076.primers.bed" -p "n100.r09.s076_output/n100.r09.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" "n100.r09.s076_output/n100.r09.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s076_output/n100.r09.s076.reference.fas" "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" > "n100.r09.s076_output/n100.r09.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s076_output/n100.r09.s076.reference.fas" --call-indels "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" > "n100.r09.s076_output/n100.r09.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" > "n100.r09.s076_output/n100.r09.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s076_output/n100.r09.s076.depth.txt" "n100.r09.s076_output/n100.r09.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s076_output/n100.r09.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s076_output/n100.r09.s076.reference.fas" | bcftools consensus -m "n100.r09.s076_output/n100.r09.s076.low_depth.tsv" tmp.vcf.gz > "n100.r09.s076_output/n100.r09.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:41 scheduler task 3838912f (flow 65bdc09d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:41 scheduler task 3838912f (flow 65bdc09d): waiting for completion (try 0): started
2021/07/08 17:29:41  ->  n100.r09.s025.Main.out_file 65bdc09d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:41 n100.r09.s025.Main.out_file 65bdc09d n100/r09/n100.r09.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f7b5c39e7abc07508f63746932f02160eb832624cf21a914ab19e3ada12e2943
	sha256:65bdc09d19b31cf218ce704f98f2cb735ac9d9f48c4a36a7292b2cc7a52befd9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3838912f0e76a448daf8f43feeb3c98249188e4f9315214fadf8fd92b2e24195
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s025_output"
	    wget -O "n100.r09.s025_output/n100.r09.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s025_output/n100.r09.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s025_output/n100.r09.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s025_output/n100.r09.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s025_output/n100.r09.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s025_output/n100.r09.s025.reference.fas" "n100.r09.s025_output/n100.r09.s025.fq1.fastq" "n100.r09.s025_output/n100.r09.s025.fq2.fastq" | samtools view -bS - > "n100.r09.s025_output/n100.r09.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s025_output/n100.r09.s025.untrimmed.sorted.bam" "n100.r09.s025_output/n100.r09.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s025_output/n100.r09.s025.untrimmed.sorted.bam" -b "n100.r09.s025_output/n100.r09.s025.primers.bed" -p "n100.r09.s025_output/n100.r09.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" "n100.r09.s025_output/n100.r09.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s025_output/n100.r09.s025.reference.fas" "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" > "n100.r09.s025_output/n100.r09.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s025_output/n100.r09.s025.reference.fas" --call-indels "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" > "n100.r09.s025_output/n100.r09.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" > "n100.r09.s025_output/n100.r09.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s025_output/n100.r09.s025.depth.txt" "n100.r09.s025_output/n100.r09.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s025_output/n100.r09.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s025_output/n100.r09.s025.reference.fas" | bcftools consensus -m "n100.r09.s025_output/n100.r09.s025.low_depth.tsv" tmp.vcf.gz > "n100.r09.s025_output/n100.r09.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:41 scheduler task 0e04bf02 (flow 9e93f670): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:41 scheduler task 0e04bf02 (flow 9e93f670): waiting for completion (try 0): started
2021/07/08 17:29:41  ->  n100.r09.s021.Main.out_file 9e93f670 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:41 n100.r09.s021.Main.out_file 9e93f670 n100/r09/n100.r09.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6b9594b295a11aeef0a6e143759921486acd1abc6d78e4b77482b5eb1dbafda1
	sha256:9e93f670b17ecf23ccc2354161f86b69216702838a9e841c9e33956775839f39
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e04bf0281d8f9cbc44dd9334058666a2d3c2c9d0f719fd80eef985ddde4fd0c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s021_output"
	    wget -O "n100.r09.s021_output/n100.r09.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s021_output/n100.r09.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s021_output/n100.r09.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s021_output/n100.r09.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s021_output/n100.r09.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s021_output/n100.r09.s021.reference.fas" "n100.r09.s021_output/n100.r09.s021.fq1.fastq" "n100.r09.s021_output/n100.r09.s021.fq2.fastq" | samtools view -bS - > "n100.r09.s021_output/n100.r09.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s021_output/n100.r09.s021.untrimmed.sorted.bam" "n100.r09.s021_output/n100.r09.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s021_output/n100.r09.s021.untrimmed.sorted.bam" -b "n100.r09.s021_output/n100.r09.s021.primers.bed" -p "n100.r09.s021_output/n100.r09.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" "n100.r09.s021_output/n100.r09.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s021_output/n100.r09.s021.reference.fas" "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" > "n100.r09.s021_output/n100.r09.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s021_output/n100.r09.s021.reference.fas" --call-indels "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" > "n100.r09.s021_output/n100.r09.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" > "n100.r09.s021_output/n100.r09.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s021_output/n100.r09.s021.depth.txt" "n100.r09.s021_output/n100.r09.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s021_output/n100.r09.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s021_output/n100.r09.s021.reference.fas" | bcftools consensus -m "n100.r09.s021_output/n100.r09.s021.low_depth.tsv" tmp.vcf.gz > "n100.r09.s021_output/n100.r09.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:42 scheduler task 2564252a (flow 071f7e69): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:42 scheduler task 2564252a (flow 071f7e69): waiting for completion (try 0): started
2021/07/08 17:29:42  ->  n100.r09.s060.Main.out_file 071f7e69 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:42 n100.r09.s060.Main.out_file 071f7e69 n100/r09/n100.r09.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9879fd12d8813a23b31ae01213e4f9d1bbcdd0b2882dc6cb61014653efacf3b5
	sha256:071f7e69bdbbc39ba2ae679d353ca798017931bc322bb7579c7a7773b702de0f
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2564252addc231ef384a8cd78888616814404ec55313d1905a28b87d6481ec1c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s060_output"
	    wget -O "n100.r09.s060_output/n100.r09.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s060_output/n100.r09.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s060_output/n100.r09.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s060_output/n100.r09.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s060_output/n100.r09.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s060_output/n100.r09.s060.reference.fas" "n100.r09.s060_output/n100.r09.s060.fq1.fastq" "n100.r09.s060_output/n100.r09.s060.fq2.fastq" | samtools view -bS - > "n100.r09.s060_output/n100.r09.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s060_output/n100.r09.s060.untrimmed.sorted.bam" "n100.r09.s060_output/n100.r09.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s060_output/n100.r09.s060.untrimmed.sorted.bam" -b "n100.r09.s060_output/n100.r09.s060.primers.bed" -p "n100.r09.s060_output/n100.r09.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" "n100.r09.s060_output/n100.r09.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s060_output/n100.r09.s060.reference.fas" "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" > "n100.r09.s060_output/n100.r09.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s060_output/n100.r09.s060.reference.fas" --call-indels "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" > "n100.r09.s060_output/n100.r09.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" > "n100.r09.s060_output/n100.r09.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s060_output/n100.r09.s060.depth.txt" "n100.r09.s060_output/n100.r09.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s060_output/n100.r09.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s060_output/n100.r09.s060.reference.fas" | bcftools consensus -m "n100.r09.s060_output/n100.r09.s060.low_depth.tsv" tmp.vcf.gz > "n100.r09.s060_output/n100.r09.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:42 scheduler task c303b8ca (flow 79b1766d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:42 scheduler task c303b8ca (flow 79b1766d): waiting for completion (try 0): started
2021/07/08 17:29:42  ->  n100.r09.s017.Main.out_file 79b1766d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:42 n100.r09.s017.Main.out_file 79b1766d n100/r09/n100.r09.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9043cd84d6fb339e55e08b29c807993285ae8461d867e0ddd035461f45d91acc
	sha256:79b1766db463c3cfa559797bf1208bd79485eb14bf0c16c524c822dfac51a42d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c303b8ca3e3f821fe46e93677070a7db9cb17dc8f4cb64d19aeed0b6a8273497
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s017_output"
	    wget -O "n100.r09.s017_output/n100.r09.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s017_output/n100.r09.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s017_output/n100.r09.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s017_output/n100.r09.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s017_output/n100.r09.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s017_output/n100.r09.s017.reference.fas" "n100.r09.s017_output/n100.r09.s017.fq1.fastq" "n100.r09.s017_output/n100.r09.s017.fq2.fastq" | samtools view -bS - > "n100.r09.s017_output/n100.r09.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s017_output/n100.r09.s017.untrimmed.sorted.bam" "n100.r09.s017_output/n100.r09.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s017_output/n100.r09.s017.untrimmed.sorted.bam" -b "n100.r09.s017_output/n100.r09.s017.primers.bed" -p "n100.r09.s017_output/n100.r09.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" "n100.r09.s017_output/n100.r09.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s017_output/n100.r09.s017.reference.fas" "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" > "n100.r09.s017_output/n100.r09.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s017_output/n100.r09.s017.reference.fas" --call-indels "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" > "n100.r09.s017_output/n100.r09.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" > "n100.r09.s017_output/n100.r09.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s017_output/n100.r09.s017.depth.txt" "n100.r09.s017_output/n100.r09.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s017_output/n100.r09.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s017_output/n100.r09.s017.reference.fas" | bcftools consensus -m "n100.r09.s017_output/n100.r09.s017.low_depth.tsv" tmp.vcf.gz > "n100.r09.s017_output/n100.r09.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:42 scheduler task c4a764b4 (flow 9fc13a0b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:42 scheduler task c4a764b4 (flow 9fc13a0b): waiting for completion (try 0): started
2021/07/08 17:29:42  ->  n100.r09.s098.Main.out_file 9fc13a0b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:42 n100.r09.s098.Main.out_file 9fc13a0b n100/r09/n100.r09.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:002fa9f02a6099684abe2fb3137b5ec96bf70ea5536b5d32f6c5adf5796a79d5
	sha256:9fc13a0bd30bab2cceefde7fa6ae2cb361d7ea07aaf469b2b4f92ee51d336f0d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c4a764b47df66885202626a1015b592530c19d571f9e271153009e9adbe218df
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s098_output"
	    wget -O "n100.r09.s098_output/n100.r09.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s098_output/n100.r09.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s098_output/n100.r09.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s098_output/n100.r09.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s098_output/n100.r09.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s098_output/n100.r09.s098.reference.fas" "n100.r09.s098_output/n100.r09.s098.fq1.fastq" "n100.r09.s098_output/n100.r09.s098.fq2.fastq" | samtools view -bS - > "n100.r09.s098_output/n100.r09.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s098_output/n100.r09.s098.untrimmed.sorted.bam" "n100.r09.s098_output/n100.r09.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s098_output/n100.r09.s098.untrimmed.sorted.bam" -b "n100.r09.s098_output/n100.r09.s098.primers.bed" -p "n100.r09.s098_output/n100.r09.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" "n100.r09.s098_output/n100.r09.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s098_output/n100.r09.s098.reference.fas" "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" > "n100.r09.s098_output/n100.r09.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s098_output/n100.r09.s098.reference.fas" --call-indels "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" > "n100.r09.s098_output/n100.r09.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" > "n100.r09.s098_output/n100.r09.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s098_output/n100.r09.s098.depth.txt" "n100.r09.s098_output/n100.r09.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s098_output/n100.r09.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s098_output/n100.r09.s098.reference.fas" | bcftools consensus -m "n100.r09.s098_output/n100.r09.s098.low_depth.tsv" tmp.vcf.gz > "n100.r09.s098_output/n100.r09.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:42 scheduler task 1f0f569e (flow 945735dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:42 scheduler task 1f0f569e (flow 945735dc): waiting for completion (try 0): started
2021/07/08 17:29:42  ->  n100.r09.s028.Main.out_file 945735dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:42 n100.r09.s028.Main.out_file 945735dc n100/r09/n100.r09.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27cc6f51059704bab991e52e9819bd5606baff9bf0b1e89fc379b9f427169d9a
	sha256:945735dcccd289411ee49aeaa497f7e908baa6085265894962a2d867c0352129
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1f0f569e56db73023fac1c7698150a169527eaa0b5348a669f40914c3fd6b1f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s028_output"
	    wget -O "n100.r09.s028_output/n100.r09.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s028_output/n100.r09.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s028_output/n100.r09.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s028_output/n100.r09.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s028_output/n100.r09.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s028_output/n100.r09.s028.reference.fas" "n100.r09.s028_output/n100.r09.s028.fq1.fastq" "n100.r09.s028_output/n100.r09.s028.fq2.fastq" | samtools view -bS - > "n100.r09.s028_output/n100.r09.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s028_output/n100.r09.s028.untrimmed.sorted.bam" "n100.r09.s028_output/n100.r09.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s028_output/n100.r09.s028.untrimmed.sorted.bam" -b "n100.r09.s028_output/n100.r09.s028.primers.bed" -p "n100.r09.s028_output/n100.r09.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" "n100.r09.s028_output/n100.r09.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s028_output/n100.r09.s028.reference.fas" "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" > "n100.r09.s028_output/n100.r09.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s028_output/n100.r09.s028.reference.fas" --call-indels "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" > "n100.r09.s028_output/n100.r09.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" > "n100.r09.s028_output/n100.r09.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s028_output/n100.r09.s028.depth.txt" "n100.r09.s028_output/n100.r09.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s028_output/n100.r09.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s028_output/n100.r09.s028.reference.fas" | bcftools consensus -m "n100.r09.s028_output/n100.r09.s028.low_depth.tsv" tmp.vcf.gz > "n100.r09.s028_output/n100.r09.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:42 scheduler task 8c6063fe (flow 926c1f50): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:42 scheduler task 8c6063fe (flow 926c1f50): waiting for completion (try 0): started
2021/07/08 17:29:42  ->  n100.r09.s096.Main.out_file 926c1f50 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:42 n100.r09.s096.Main.out_file 926c1f50 n100/r09/n100.r09.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cd9736f8733276f6a1652282df2e742c9375f963149b359adbf3a9733c0e13eb
	sha256:926c1f5010a7a9b0fe9bef7cff4bd033dc860f6aa8eca2f05277621d9edfc83c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c6063fe005b38053fc4adb32c8e3a578e2a928c742998d5547aef5a39b00674
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s096_output"
	    wget -O "n100.r09.s096_output/n100.r09.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s096_output/n100.r09.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s096_output/n100.r09.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s096_output/n100.r09.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s096_output/n100.r09.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s096_output/n100.r09.s096.reference.fas" "n100.r09.s096_output/n100.r09.s096.fq1.fastq" "n100.r09.s096_output/n100.r09.s096.fq2.fastq" | samtools view -bS - > "n100.r09.s096_output/n100.r09.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s096_output/n100.r09.s096.untrimmed.sorted.bam" "n100.r09.s096_output/n100.r09.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s096_output/n100.r09.s096.untrimmed.sorted.bam" -b "n100.r09.s096_output/n100.r09.s096.primers.bed" -p "n100.r09.s096_output/n100.r09.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" "n100.r09.s096_output/n100.r09.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s096_output/n100.r09.s096.reference.fas" "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" > "n100.r09.s096_output/n100.r09.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s096_output/n100.r09.s096.reference.fas" --call-indels "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" > "n100.r09.s096_output/n100.r09.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" > "n100.r09.s096_output/n100.r09.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s096_output/n100.r09.s096.depth.txt" "n100.r09.s096_output/n100.r09.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s096_output/n100.r09.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s096_output/n100.r09.s096.reference.fas" | bcftools consensus -m "n100.r09.s096_output/n100.r09.s096.low_depth.tsv" tmp.vcf.gz > "n100.r09.s096_output/n100.r09.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:42 scheduler task d108e3c8 (flow c686feee): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:42 scheduler task d108e3c8 (flow c686feee): waiting for completion (try 0): started
2021/07/08 17:29:42  ->  n100.r09.s045.Main.out_file c686feee exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:42 n100.r09.s045.Main.out_file c686feee n100/r09/n100.r09.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0234c2db210efd0a8db4071f27153b007d368cc2082bf1ebb943d605647e9884
	sha256:c686feee86e0e4c71a30f61b4c8849995c80361beddd29d50ae761ea35e39cd4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d108e3c8c795db2525ad9eff6d3bf8e2c56d5118f34b211ad89a7307470e1596
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s045_output"
	    wget -O "n100.r09.s045_output/n100.r09.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s045_output/n100.r09.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s045_output/n100.r09.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s045_output/n100.r09.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s045_output/n100.r09.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s045_output/n100.r09.s045.reference.fas" "n100.r09.s045_output/n100.r09.s045.fq1.fastq" "n100.r09.s045_output/n100.r09.s045.fq2.fastq" | samtools view -bS - > "n100.r09.s045_output/n100.r09.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s045_output/n100.r09.s045.untrimmed.sorted.bam" "n100.r09.s045_output/n100.r09.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s045_output/n100.r09.s045.untrimmed.sorted.bam" -b "n100.r09.s045_output/n100.r09.s045.primers.bed" -p "n100.r09.s045_output/n100.r09.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" "n100.r09.s045_output/n100.r09.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s045_output/n100.r09.s045.reference.fas" "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" > "n100.r09.s045_output/n100.r09.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s045_output/n100.r09.s045.reference.fas" --call-indels "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" > "n100.r09.s045_output/n100.r09.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" > "n100.r09.s045_output/n100.r09.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s045_output/n100.r09.s045.depth.txt" "n100.r09.s045_output/n100.r09.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s045_output/n100.r09.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s045_output/n100.r09.s045.reference.fas" | bcftools consensus -m "n100.r09.s045_output/n100.r09.s045.low_depth.tsv" tmp.vcf.gz > "n100.r09.s045_output/n100.r09.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:43 scheduler task c0336850 (flow b1c048e5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:43 scheduler task c0336850 (flow b1c048e5): waiting for completion (try 0): started
2021/07/08 17:29:43  ->  n100.r09.s077.Main.out_file b1c048e5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:43 n100.r09.s077.Main.out_file b1c048e5 n100/r09/n100.r09.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:134d32ea9986ef05ecd1102a3cf04c93fd237158c777412c588e8b25a851fad4
	sha256:b1c048e5f3bde414654195911111a0bbb74956992cb0e54648428e48d7edbe44
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c0336850cf500c3b5508be44916e8b6cf25fb3b3fcb2bbef99faccb7948ea165
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s077_output"
	    wget -O "n100.r09.s077_output/n100.r09.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s077_output/n100.r09.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s077_output/n100.r09.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s077_output/n100.r09.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s077_output/n100.r09.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s077_output/n100.r09.s077.reference.fas" "n100.r09.s077_output/n100.r09.s077.fq1.fastq" "n100.r09.s077_output/n100.r09.s077.fq2.fastq" | samtools view -bS - > "n100.r09.s077_output/n100.r09.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s077_output/n100.r09.s077.untrimmed.sorted.bam" "n100.r09.s077_output/n100.r09.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s077_output/n100.r09.s077.untrimmed.sorted.bam" -b "n100.r09.s077_output/n100.r09.s077.primers.bed" -p "n100.r09.s077_output/n100.r09.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" "n100.r09.s077_output/n100.r09.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s077_output/n100.r09.s077.reference.fas" "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" > "n100.r09.s077_output/n100.r09.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s077_output/n100.r09.s077.reference.fas" --call-indels "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" > "n100.r09.s077_output/n100.r09.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" > "n100.r09.s077_output/n100.r09.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s077_output/n100.r09.s077.depth.txt" "n100.r09.s077_output/n100.r09.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s077_output/n100.r09.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s077_output/n100.r09.s077.reference.fas" | bcftools consensus -m "n100.r09.s077_output/n100.r09.s077.low_depth.tsv" tmp.vcf.gz > "n100.r09.s077_output/n100.r09.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:43 scheduler task 704e844b (flow 7c7b20f0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:43 scheduler task 704e844b (flow 7c7b20f0): waiting for completion (try 0): started
2021/07/08 17:29:43  ->  n100.r09.s087.Main.out_file 7c7b20f0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:43 n100.r09.s087.Main.out_file 7c7b20f0 n100/r09/n100.r09.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:486b023139c5c14529eeaf16ab8c097a96f37d1cefd57cc59094ecfb5869e74d
	sha256:7c7b20f00d87142897dbfa079dc4b4be2092c5aafa7d3dbbfd557292fb1c797c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/704e844b2abf06b285d778d24d40deee9d8580a057d90f794173b776c8d02215
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s087_output"
	    wget -O "n100.r09.s087_output/n100.r09.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s087_output/n100.r09.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s087_output/n100.r09.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s087_output/n100.r09.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s087_output/n100.r09.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s087_output/n100.r09.s087.reference.fas" "n100.r09.s087_output/n100.r09.s087.fq1.fastq" "n100.r09.s087_output/n100.r09.s087.fq2.fastq" | samtools view -bS - > "n100.r09.s087_output/n100.r09.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s087_output/n100.r09.s087.untrimmed.sorted.bam" "n100.r09.s087_output/n100.r09.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s087_output/n100.r09.s087.untrimmed.sorted.bam" -b "n100.r09.s087_output/n100.r09.s087.primers.bed" -p "n100.r09.s087_output/n100.r09.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" "n100.r09.s087_output/n100.r09.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s087_output/n100.r09.s087.reference.fas" "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" > "n100.r09.s087_output/n100.r09.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s087_output/n100.r09.s087.reference.fas" --call-indels "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" > "n100.r09.s087_output/n100.r09.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" > "n100.r09.s087_output/n100.r09.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s087_output/n100.r09.s087.depth.txt" "n100.r09.s087_output/n100.r09.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s087_output/n100.r09.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s087_output/n100.r09.s087.reference.fas" | bcftools consensus -m "n100.r09.s087_output/n100.r09.s087.low_depth.tsv" tmp.vcf.gz > "n100.r09.s087_output/n100.r09.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:43 scheduler task 1e64ec4b (flow d4b624e7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:43 scheduler task 1e64ec4b (flow d4b624e7): waiting for completion (try 0): started
2021/07/08 17:29:43  ->  n100.r09.s016.Main.out_file d4b624e7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:43 n100.r09.s016.Main.out_file d4b624e7 n100/r09/n100.r09.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:746bcf26ba05861e21b7d0b0e52e5c26a5ee382f598de0562d612690046adb51
	sha256:d4b624e74b805b2a2987c32e4af2b34adfb6340a7f705fc0cfb88d4d8b5fd7e3
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e64ec4b31abc79436d7251eb8be8ae742e08bcf20058f99f840a07862bdc98c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s016_output"
	    wget -O "n100.r09.s016_output/n100.r09.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s016_output/n100.r09.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s016_output/n100.r09.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s016_output/n100.r09.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s016_output/n100.r09.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s016_output/n100.r09.s016.reference.fas" "n100.r09.s016_output/n100.r09.s016.fq1.fastq" "n100.r09.s016_output/n100.r09.s016.fq2.fastq" | samtools view -bS - > "n100.r09.s016_output/n100.r09.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s016_output/n100.r09.s016.untrimmed.sorted.bam" "n100.r09.s016_output/n100.r09.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s016_output/n100.r09.s016.untrimmed.sorted.bam" -b "n100.r09.s016_output/n100.r09.s016.primers.bed" -p "n100.r09.s016_output/n100.r09.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" "n100.r09.s016_output/n100.r09.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s016_output/n100.r09.s016.reference.fas" "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" > "n100.r09.s016_output/n100.r09.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s016_output/n100.r09.s016.reference.fas" --call-indels "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" > "n100.r09.s016_output/n100.r09.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" > "n100.r09.s016_output/n100.r09.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s016_output/n100.r09.s016.depth.txt" "n100.r09.s016_output/n100.r09.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s016_output/n100.r09.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s016_output/n100.r09.s016.reference.fas" | bcftools consensus -m "n100.r09.s016_output/n100.r09.s016.low_depth.tsv" tmp.vcf.gz > "n100.r09.s016_output/n100.r09.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:43 scheduler task 4e597b0a (flow b6b37969): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:43 scheduler task 4e597b0a (flow b6b37969): waiting for completion (try 0): started
2021/07/08 17:29:43  ->  n100.r09.s008.Main.out_file b6b37969 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:43 n100.r09.s008.Main.out_file b6b37969 n100/r09/n100.r09.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:219ceadc2015626fb95e89cf7be6e44e6c61def4366f5ef090e11e7d4e37dee7
	sha256:b6b379696ba23eb5c3511d9a6acaff55f9c6b822da95825bf6d67fe92f959945
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e597b0aa608198ce7872cf938edea0c9f962d585383c02ded419fb28dcccc1f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s008_output"
	    wget -O "n100.r09.s008_output/n100.r09.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s008_output/n100.r09.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s008_output/n100.r09.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s008_output/n100.r09.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s008_output/n100.r09.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s008_output/n100.r09.s008.reference.fas" "n100.r09.s008_output/n100.r09.s008.fq1.fastq" "n100.r09.s008_output/n100.r09.s008.fq2.fastq" | samtools view -bS - > "n100.r09.s008_output/n100.r09.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s008_output/n100.r09.s008.untrimmed.sorted.bam" "n100.r09.s008_output/n100.r09.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s008_output/n100.r09.s008.untrimmed.sorted.bam" -b "n100.r09.s008_output/n100.r09.s008.primers.bed" -p "n100.r09.s008_output/n100.r09.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" "n100.r09.s008_output/n100.r09.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s008_output/n100.r09.s008.reference.fas" "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" > "n100.r09.s008_output/n100.r09.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s008_output/n100.r09.s008.reference.fas" --call-indels "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" > "n100.r09.s008_output/n100.r09.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" > "n100.r09.s008_output/n100.r09.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s008_output/n100.r09.s008.depth.txt" "n100.r09.s008_output/n100.r09.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s008_output/n100.r09.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s008_output/n100.r09.s008.reference.fas" | bcftools consensus -m "n100.r09.s008_output/n100.r09.s008.low_depth.tsv" tmp.vcf.gz > "n100.r09.s008_output/n100.r09.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:43 scheduler task b00facdf (flow 202714e1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:43 scheduler task b00facdf (flow 202714e1): waiting for completion (try 0): started
2021/07/08 17:29:43  ->  n100.r09.s005.Main.out_file 202714e1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:43 n100.r09.s005.Main.out_file 202714e1 n100/r09/n100.r09.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:50a583a946fc6c86a0b0af335625296413a6c8b6c27817a705c09b6f8d41b6e1
	sha256:202714e12fe7885656c742d7241def04b2cf69a460c25081bb5ffed80489803d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b00facdf56381f32fbbc8feb57d68ea9de8518b8543faabe6a0f179ff98e1e6f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s005_output"
	    wget -O "n100.r09.s005_output/n100.r09.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s005_output/n100.r09.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s005_output/n100.r09.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s005_output/n100.r09.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s005_output/n100.r09.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s005_output/n100.r09.s005.reference.fas" "n100.r09.s005_output/n100.r09.s005.fq1.fastq" "n100.r09.s005_output/n100.r09.s005.fq2.fastq" | samtools view -bS - > "n100.r09.s005_output/n100.r09.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s005_output/n100.r09.s005.untrimmed.sorted.bam" "n100.r09.s005_output/n100.r09.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s005_output/n100.r09.s005.untrimmed.sorted.bam" -b "n100.r09.s005_output/n100.r09.s005.primers.bed" -p "n100.r09.s005_output/n100.r09.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" "n100.r09.s005_output/n100.r09.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s005_output/n100.r09.s005.reference.fas" "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" > "n100.r09.s005_output/n100.r09.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s005_output/n100.r09.s005.reference.fas" --call-indels "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" > "n100.r09.s005_output/n100.r09.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" > "n100.r09.s005_output/n100.r09.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s005_output/n100.r09.s005.depth.txt" "n100.r09.s005_output/n100.r09.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s005_output/n100.r09.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s005_output/n100.r09.s005.reference.fas" | bcftools consensus -m "n100.r09.s005_output/n100.r09.s005.low_depth.tsv" tmp.vcf.gz > "n100.r09.s005_output/n100.r09.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task f67f9364 (flow 99c25444): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task f67f9364 (flow 99c25444): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s038.Main.out_file 99c25444 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s038.Main.out_file 99c25444 n100/r09/n100.r09.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1fb1aef801edc06b3d80733d11d9933cf6c0801836ab1aa73de2a396562109ad
	sha256:99c254445cac9438c8056bd5d3de916417a9e04e0b6e936c4baa2a42d09ca58b
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f67f936468593656a81063eff8c2ac6fb1c5826ba337ad8af68bf9f007acc2f7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s038_output"
	    wget -O "n100.r09.s038_output/n100.r09.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s038_output/n100.r09.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s038_output/n100.r09.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s038_output/n100.r09.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s038_output/n100.r09.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s038_output/n100.r09.s038.reference.fas" "n100.r09.s038_output/n100.r09.s038.fq1.fastq" "n100.r09.s038_output/n100.r09.s038.fq2.fastq" | samtools view -bS - > "n100.r09.s038_output/n100.r09.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s038_output/n100.r09.s038.untrimmed.sorted.bam" "n100.r09.s038_output/n100.r09.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s038_output/n100.r09.s038.untrimmed.sorted.bam" -b "n100.r09.s038_output/n100.r09.s038.primers.bed" -p "n100.r09.s038_output/n100.r09.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" "n100.r09.s038_output/n100.r09.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s038_output/n100.r09.s038.reference.fas" "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" > "n100.r09.s038_output/n100.r09.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s038_output/n100.r09.s038.reference.fas" --call-indels "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" > "n100.r09.s038_output/n100.r09.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" > "n100.r09.s038_output/n100.r09.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s038_output/n100.r09.s038.depth.txt" "n100.r09.s038_output/n100.r09.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s038_output/n100.r09.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s038_output/n100.r09.s038.reference.fas" | bcftools consensus -m "n100.r09.s038_output/n100.r09.s038.low_depth.tsv" tmp.vcf.gz > "n100.r09.s038_output/n100.r09.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task b2d0fd0c (flow 37d37b5c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task b2d0fd0c (flow 37d37b5c): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s006.Main.out_file 37d37b5c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s006.Main.out_file 37d37b5c n100/r09/n100.r09.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:35142195494eff294b095f4d12371f077e73a994407731a21ad20b45d2b98027
	sha256:37d37b5c63557498b5a683d0f9acf14e78047ea71c672c851e03ff74b517a2d4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b2d0fd0c22980f5e438313216567a1bb6a17765c298a78cae55f11bf4c73d2b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s006_output"
	    wget -O "n100.r09.s006_output/n100.r09.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s006_output/n100.r09.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s006_output/n100.r09.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s006_output/n100.r09.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s006_output/n100.r09.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s006_output/n100.r09.s006.reference.fas" "n100.r09.s006_output/n100.r09.s006.fq1.fastq" "n100.r09.s006_output/n100.r09.s006.fq2.fastq" | samtools view -bS - > "n100.r09.s006_output/n100.r09.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s006_output/n100.r09.s006.untrimmed.sorted.bam" "n100.r09.s006_output/n100.r09.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s006_output/n100.r09.s006.untrimmed.sorted.bam" -b "n100.r09.s006_output/n100.r09.s006.primers.bed" -p "n100.r09.s006_output/n100.r09.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" "n100.r09.s006_output/n100.r09.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s006_output/n100.r09.s006.reference.fas" "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" > "n100.r09.s006_output/n100.r09.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s006_output/n100.r09.s006.reference.fas" --call-indels "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" > "n100.r09.s006_output/n100.r09.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" > "n100.r09.s006_output/n100.r09.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s006_output/n100.r09.s006.depth.txt" "n100.r09.s006_output/n100.r09.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s006_output/n100.r09.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s006_output/n100.r09.s006.reference.fas" | bcftools consensus -m "n100.r09.s006_output/n100.r09.s006.low_depth.tsv" tmp.vcf.gz > "n100.r09.s006_output/n100.r09.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task f7e7564f (flow cdae4b3f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task f7e7564f (flow cdae4b3f): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s007.Main.out_file cdae4b3f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s007.Main.out_file cdae4b3f n100/r09/n100.r09.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1c99f2fd8a7efc010e689a34ae531dd8b03e37807d57c25f5ff9bc58d73a1742
	sha256:cdae4b3f1199ffa7e9ba38c28a93d950ac0762dabceabf8101c61c53a0ef7066
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f7e7564fdb4f4de922a7ca2ed266e1942884d1506262a0985ca1c15c99ef80ec
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s007_output"
	    wget -O "n100.r09.s007_output/n100.r09.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s007_output/n100.r09.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s007_output/n100.r09.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s007_output/n100.r09.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s007_output/n100.r09.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s007_output/n100.r09.s007.reference.fas" "n100.r09.s007_output/n100.r09.s007.fq1.fastq" "n100.r09.s007_output/n100.r09.s007.fq2.fastq" | samtools view -bS - > "n100.r09.s007_output/n100.r09.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s007_output/n100.r09.s007.untrimmed.sorted.bam" "n100.r09.s007_output/n100.r09.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s007_output/n100.r09.s007.untrimmed.sorted.bam" -b "n100.r09.s007_output/n100.r09.s007.primers.bed" -p "n100.r09.s007_output/n100.r09.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" "n100.r09.s007_output/n100.r09.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s007_output/n100.r09.s007.reference.fas" "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" > "n100.r09.s007_output/n100.r09.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s007_output/n100.r09.s007.reference.fas" --call-indels "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" > "n100.r09.s007_output/n100.r09.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" > "n100.r09.s007_output/n100.r09.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s007_output/n100.r09.s007.depth.txt" "n100.r09.s007_output/n100.r09.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s007_output/n100.r09.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s007_output/n100.r09.s007.reference.fas" | bcftools consensus -m "n100.r09.s007_output/n100.r09.s007.low_depth.tsv" tmp.vcf.gz > "n100.r09.s007_output/n100.r09.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task 2a30e645 (flow 4834e08f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task 2a30e645 (flow 4834e08f): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s054.Main.out_file 4834e08f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s054.Main.out_file 4834e08f n100/r09/n100.r09.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:02327f5c989c0a1cdba5b7a5eb6178fef6e593697ae865d9bbe95eea83e661b0
	sha256:4834e08f0b3698340b86933096a3ab30232469d3734f3b07ffdab85387db9fce
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2a30e645e4aa12fa635ff06848f2a3d4ba12d607c2047df7076d9ca81acc8630
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s054_output"
	    wget -O "n100.r09.s054_output/n100.r09.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s054_output/n100.r09.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s054_output/n100.r09.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s054_output/n100.r09.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s054_output/n100.r09.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s054_output/n100.r09.s054.reference.fas" "n100.r09.s054_output/n100.r09.s054.fq1.fastq" "n100.r09.s054_output/n100.r09.s054.fq2.fastq" | samtools view -bS - > "n100.r09.s054_output/n100.r09.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s054_output/n100.r09.s054.untrimmed.sorted.bam" "n100.r09.s054_output/n100.r09.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s054_output/n100.r09.s054.untrimmed.sorted.bam" -b "n100.r09.s054_output/n100.r09.s054.primers.bed" -p "n100.r09.s054_output/n100.r09.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" "n100.r09.s054_output/n100.r09.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s054_output/n100.r09.s054.reference.fas" "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" > "n100.r09.s054_output/n100.r09.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s054_output/n100.r09.s054.reference.fas" --call-indels "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" > "n100.r09.s054_output/n100.r09.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" > "n100.r09.s054_output/n100.r09.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s054_output/n100.r09.s054.depth.txt" "n100.r09.s054_output/n100.r09.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s054_output/n100.r09.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s054_output/n100.r09.s054.reference.fas" | bcftools consensus -m "n100.r09.s054_output/n100.r09.s054.low_depth.tsv" tmp.vcf.gz > "n100.r09.s054_output/n100.r09.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task b56b9115 (flow ca6c188a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task b56b9115 (flow ca6c188a): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s088.Main.out_file ca6c188a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s088.Main.out_file ca6c188a n100/r09/n100.r09.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f4906033321b7d0e669b887c5f4eea73a734376923a42985de06a78d575abc0a
	sha256:ca6c188a38c1c6c8e540a0e41cb07b7efc159dab364b69f4594c3e0dcbe51977
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b56b911551ce81da6fd0dfda943e628ea12348da5b8b1185206ce06844ff4221
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s088_output"
	    wget -O "n100.r09.s088_output/n100.r09.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s088_output/n100.r09.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s088_output/n100.r09.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s088_output/n100.r09.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s088_output/n100.r09.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s088_output/n100.r09.s088.reference.fas" "n100.r09.s088_output/n100.r09.s088.fq1.fastq" "n100.r09.s088_output/n100.r09.s088.fq2.fastq" | samtools view -bS - > "n100.r09.s088_output/n100.r09.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s088_output/n100.r09.s088.untrimmed.sorted.bam" "n100.r09.s088_output/n100.r09.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s088_output/n100.r09.s088.untrimmed.sorted.bam" -b "n100.r09.s088_output/n100.r09.s088.primers.bed" -p "n100.r09.s088_output/n100.r09.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" "n100.r09.s088_output/n100.r09.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s088_output/n100.r09.s088.reference.fas" "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" > "n100.r09.s088_output/n100.r09.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s088_output/n100.r09.s088.reference.fas" --call-indels "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" > "n100.r09.s088_output/n100.r09.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" > "n100.r09.s088_output/n100.r09.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s088_output/n100.r09.s088.depth.txt" "n100.r09.s088_output/n100.r09.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s088_output/n100.r09.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s088_output/n100.r09.s088.reference.fas" | bcftools consensus -m "n100.r09.s088_output/n100.r09.s088.low_depth.tsv" tmp.vcf.gz > "n100.r09.s088_output/n100.r09.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task 107b832c (flow c309afbb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task 107b832c (flow c309afbb): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s031.Main.out_file c309afbb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s031.Main.out_file c309afbb n100/r09/n100.r09.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:264b9c50a79a9f11c6124d8819b00cc30dc6112deffa6d26930e41574509506a
	sha256:c309afbb6d46c9ad6783071493722612bb30bd0a9d0b86d30dd707ae57c08470
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/107b832cb1fcbf35d4c25a53b09a4b97af2e8475a9410c0abd56972304bfcec8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s031_output"
	    wget -O "n100.r09.s031_output/n100.r09.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s031_output/n100.r09.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s031_output/n100.r09.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s031_output/n100.r09.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s031_output/n100.r09.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s031_output/n100.r09.s031.reference.fas" "n100.r09.s031_output/n100.r09.s031.fq1.fastq" "n100.r09.s031_output/n100.r09.s031.fq2.fastq" | samtools view -bS - > "n100.r09.s031_output/n100.r09.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s031_output/n100.r09.s031.untrimmed.sorted.bam" "n100.r09.s031_output/n100.r09.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s031_output/n100.r09.s031.untrimmed.sorted.bam" -b "n100.r09.s031_output/n100.r09.s031.primers.bed" -p "n100.r09.s031_output/n100.r09.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" "n100.r09.s031_output/n100.r09.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s031_output/n100.r09.s031.reference.fas" "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" > "n100.r09.s031_output/n100.r09.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s031_output/n100.r09.s031.reference.fas" --call-indels "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" > "n100.r09.s031_output/n100.r09.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" > "n100.r09.s031_output/n100.r09.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s031_output/n100.r09.s031.depth.txt" "n100.r09.s031_output/n100.r09.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s031_output/n100.r09.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s031_output/n100.r09.s031.reference.fas" | bcftools consensus -m "n100.r09.s031_output/n100.r09.s031.low_depth.tsv" tmp.vcf.gz > "n100.r09.s031_output/n100.r09.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:44 scheduler task eff50ab7 (flow 9176995d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:44 scheduler task eff50ab7 (flow 9176995d): waiting for completion (try 0): started
2021/07/08 17:29:44  ->  n100.r09.s071.Main.out_file 9176995d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:44 n100.r09.s071.Main.out_file 9176995d n100/r09/n100.r09.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6acf52f190bea48574795c71368a2a643c7bff4a0b73f364483eb4ea165d48dd
	sha256:9176995d7d9592ee4d2e7851a89b06df1b21d0f5cf1a674705068f8bb37a07bf
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eff50ab72dbb6841e7d7492c902f67ba8d56919a5b9a25c0c8fda06307909f23
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s071_output"
	    wget -O "n100.r09.s071_output/n100.r09.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s071_output/n100.r09.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s071_output/n100.r09.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s071_output/n100.r09.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s071_output/n100.r09.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s071_output/n100.r09.s071.reference.fas" "n100.r09.s071_output/n100.r09.s071.fq1.fastq" "n100.r09.s071_output/n100.r09.s071.fq2.fastq" | samtools view -bS - > "n100.r09.s071_output/n100.r09.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s071_output/n100.r09.s071.untrimmed.sorted.bam" "n100.r09.s071_output/n100.r09.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s071_output/n100.r09.s071.untrimmed.sorted.bam" -b "n100.r09.s071_output/n100.r09.s071.primers.bed" -p "n100.r09.s071_output/n100.r09.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" "n100.r09.s071_output/n100.r09.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s071_output/n100.r09.s071.reference.fas" "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" > "n100.r09.s071_output/n100.r09.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s071_output/n100.r09.s071.reference.fas" --call-indels "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" > "n100.r09.s071_output/n100.r09.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" > "n100.r09.s071_output/n100.r09.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s071_output/n100.r09.s071.depth.txt" "n100.r09.s071_output/n100.r09.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s071_output/n100.r09.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s071_output/n100.r09.s071.reference.fas" | bcftools consensus -m "n100.r09.s071_output/n100.r09.s071.low_depth.tsv" tmp.vcf.gz > "n100.r09.s071_output/n100.r09.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:45 scheduler task ec0f1f67 (flow 400d5ba5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:45 scheduler task ec0f1f67 (flow 400d5ba5): waiting for completion (try 0): started
2021/07/08 17:29:45  ->  n100.r09.s029.Main.out_file 400d5ba5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:45 n100.r09.s029.Main.out_file 400d5ba5 n100/r09/n100.r09.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aec3698b0c46c557a237206e028bda32759e78ff1be348a73df98fb942415478
	sha256:400d5ba5d74846ab4d8449178968967099fbb6ee370e881ac38f9c5c3a45b332
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ec0f1f67c46eb966e76dbc686fd13adfe6ca321f9cf9481fa579da2ddc6f7c4d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s029_output"
	    wget -O "n100.r09.s029_output/n100.r09.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s029_output/n100.r09.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s029_output/n100.r09.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s029_output/n100.r09.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s029_output/n100.r09.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s029_output/n100.r09.s029.reference.fas" "n100.r09.s029_output/n100.r09.s029.fq1.fastq" "n100.r09.s029_output/n100.r09.s029.fq2.fastq" | samtools view -bS - > "n100.r09.s029_output/n100.r09.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s029_output/n100.r09.s029.untrimmed.sorted.bam" "n100.r09.s029_output/n100.r09.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s029_output/n100.r09.s029.untrimmed.sorted.bam" -b "n100.r09.s029_output/n100.r09.s029.primers.bed" -p "n100.r09.s029_output/n100.r09.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" "n100.r09.s029_output/n100.r09.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s029_output/n100.r09.s029.reference.fas" "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" > "n100.r09.s029_output/n100.r09.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s029_output/n100.r09.s029.reference.fas" --call-indels "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" > "n100.r09.s029_output/n100.r09.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" > "n100.r09.s029_output/n100.r09.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s029_output/n100.r09.s029.depth.txt" "n100.r09.s029_output/n100.r09.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s029_output/n100.r09.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s029_output/n100.r09.s029.reference.fas" | bcftools consensus -m "n100.r09.s029_output/n100.r09.s029.low_depth.tsv" tmp.vcf.gz > "n100.r09.s029_output/n100.r09.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:45 scheduler task 55154fab (flow 7e991e05): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:45 scheduler task 55154fab (flow 7e991e05): waiting for completion (try 0): started
2021/07/08 17:29:45  ->  n100.r09.s070.Main.out_file 7e991e05 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:45 n100.r09.s070.Main.out_file 7e991e05 n100/r09/n100.r09.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f12162458b50ff871f48ddb240296e14841df96a74caf6c3dc3b77ea3428a8a8
	sha256:7e991e0535a13effea910d32a2a4808451c52fbc927c8e1a3f0a7fd4dfb502f0
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/55154fab278671304cfebdcad9d50277359a45cda4bede8397bd15a8cb796fb6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s070_output"
	    wget -O "n100.r09.s070_output/n100.r09.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s070_output/n100.r09.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s070_output/n100.r09.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s070_output/n100.r09.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s070_output/n100.r09.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s070_output/n100.r09.s070.reference.fas" "n100.r09.s070_output/n100.r09.s070.fq1.fastq" "n100.r09.s070_output/n100.r09.s070.fq2.fastq" | samtools view -bS - > "n100.r09.s070_output/n100.r09.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s070_output/n100.r09.s070.untrimmed.sorted.bam" "n100.r09.s070_output/n100.r09.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s070_output/n100.r09.s070.untrimmed.sorted.bam" -b "n100.r09.s070_output/n100.r09.s070.primers.bed" -p "n100.r09.s070_output/n100.r09.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" "n100.r09.s070_output/n100.r09.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s070_output/n100.r09.s070.reference.fas" "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" > "n100.r09.s070_output/n100.r09.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s070_output/n100.r09.s070.reference.fas" --call-indels "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" > "n100.r09.s070_output/n100.r09.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" > "n100.r09.s070_output/n100.r09.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s070_output/n100.r09.s070.depth.txt" "n100.r09.s070_output/n100.r09.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s070_output/n100.r09.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s070_output/n100.r09.s070.reference.fas" | bcftools consensus -m "n100.r09.s070_output/n100.r09.s070.low_depth.tsv" tmp.vcf.gz > "n100.r09.s070_output/n100.r09.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:45 scheduler task 8aa24e0c (flow fd4c25ab): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:45 scheduler task 8aa24e0c (flow fd4c25ab): waiting for completion (try 0): started
2021/07/08 17:29:45  ->  n100.r09.s050.Main.out_file fd4c25ab exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:45 n100.r09.s050.Main.out_file fd4c25ab n100/r09/n100.r09.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9c18049fa3fca61f7e92758e59a330e2fb0bfa639bed603abfb6a8a528d6da10
	sha256:fd4c25ab14df743606dee5025484d9e0b3484f258d8ee8bf09b9e0b01c7f6d30
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8aa24e0c6f581968b3feedcb0826a251bd2ade136de28b6967ae969a7afac862
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s050_output"
	    wget -O "n100.r09.s050_output/n100.r09.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s050_output/n100.r09.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s050_output/n100.r09.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s050_output/n100.r09.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s050_output/n100.r09.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s050_output/n100.r09.s050.reference.fas" "n100.r09.s050_output/n100.r09.s050.fq1.fastq" "n100.r09.s050_output/n100.r09.s050.fq2.fastq" | samtools view -bS - > "n100.r09.s050_output/n100.r09.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s050_output/n100.r09.s050.untrimmed.sorted.bam" "n100.r09.s050_output/n100.r09.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s050_output/n100.r09.s050.untrimmed.sorted.bam" -b "n100.r09.s050_output/n100.r09.s050.primers.bed" -p "n100.r09.s050_output/n100.r09.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" "n100.r09.s050_output/n100.r09.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s050_output/n100.r09.s050.reference.fas" "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" > "n100.r09.s050_output/n100.r09.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s050_output/n100.r09.s050.reference.fas" --call-indels "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" > "n100.r09.s050_output/n100.r09.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" > "n100.r09.s050_output/n100.r09.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s050_output/n100.r09.s050.depth.txt" "n100.r09.s050_output/n100.r09.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s050_output/n100.r09.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s050_output/n100.r09.s050.reference.fas" | bcftools consensus -m "n100.r09.s050_output/n100.r09.s050.low_depth.tsv" tmp.vcf.gz > "n100.r09.s050_output/n100.r09.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:45 scheduler task e830d1de (flow 86ffe226): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:45 scheduler task e830d1de (flow 86ffe226): waiting for completion (try 0): started
2021/07/08 17:29:45  ->  n100.r09.s092.Main.out_file 86ffe226 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:45 n100.r09.s092.Main.out_file 86ffe226 n100/r09/n100.r09.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:48883380f213010eba1a4da88721eec39cafd7dfd6aab3589e000fcfbc8dc007
	sha256:86ffe226fc33b68a89afafba44c27f6562e634ba8a390320cc4243db02e7b706
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e830d1de5cbdc3379bb9a6caedee21857d37e2db4d0b7139df95ca0855a7d113
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s092_output"
	    wget -O "n100.r09.s092_output/n100.r09.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s092_output/n100.r09.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s092_output/n100.r09.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s092_output/n100.r09.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s092_output/n100.r09.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s092_output/n100.r09.s092.reference.fas" "n100.r09.s092_output/n100.r09.s092.fq1.fastq" "n100.r09.s092_output/n100.r09.s092.fq2.fastq" | samtools view -bS - > "n100.r09.s092_output/n100.r09.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s092_output/n100.r09.s092.untrimmed.sorted.bam" "n100.r09.s092_output/n100.r09.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s092_output/n100.r09.s092.untrimmed.sorted.bam" -b "n100.r09.s092_output/n100.r09.s092.primers.bed" -p "n100.r09.s092_output/n100.r09.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" "n100.r09.s092_output/n100.r09.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s092_output/n100.r09.s092.reference.fas" "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" > "n100.r09.s092_output/n100.r09.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s092_output/n100.r09.s092.reference.fas" --call-indels "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" > "n100.r09.s092_output/n100.r09.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" > "n100.r09.s092_output/n100.r09.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s092_output/n100.r09.s092.depth.txt" "n100.r09.s092_output/n100.r09.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s092_output/n100.r09.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s092_output/n100.r09.s092.reference.fas" | bcftools consensus -m "n100.r09.s092_output/n100.r09.s092.low_depth.tsv" tmp.vcf.gz > "n100.r09.s092_output/n100.r09.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:45 scheduler task 9547f06a (flow 85992f0f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:45 scheduler task 9547f06a (flow 85992f0f): waiting for completion (try 0): started
2021/07/08 17:29:45  ->  n100.r09.s046.Main.out_file 85992f0f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:45 n100.r09.s046.Main.out_file 85992f0f n100/r09/n100.r09.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a73f62c3d32e5db42dc7abed81a7901f7fe55187a2885e0e4745bba2a129f6e8
	sha256:85992f0fcc013864152e861e1810b16921202770c618f3ebfc7c90447d802224
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9547f06a48ac02fdc6522e1d6ec37f0949c37a594ec91973731998d5dc2ef16b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s046_output"
	    wget -O "n100.r09.s046_output/n100.r09.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s046_output/n100.r09.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s046_output/n100.r09.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s046_output/n100.r09.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s046_output/n100.r09.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s046_output/n100.r09.s046.reference.fas" "n100.r09.s046_output/n100.r09.s046.fq1.fastq" "n100.r09.s046_output/n100.r09.s046.fq2.fastq" | samtools view -bS - > "n100.r09.s046_output/n100.r09.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s046_output/n100.r09.s046.untrimmed.sorted.bam" "n100.r09.s046_output/n100.r09.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s046_output/n100.r09.s046.untrimmed.sorted.bam" -b "n100.r09.s046_output/n100.r09.s046.primers.bed" -p "n100.r09.s046_output/n100.r09.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" "n100.r09.s046_output/n100.r09.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s046_output/n100.r09.s046.reference.fas" "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" > "n100.r09.s046_output/n100.r09.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s046_output/n100.r09.s046.reference.fas" --call-indels "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" > "n100.r09.s046_output/n100.r09.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" > "n100.r09.s046_output/n100.r09.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s046_output/n100.r09.s046.depth.txt" "n100.r09.s046_output/n100.r09.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s046_output/n100.r09.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s046_output/n100.r09.s046.reference.fas" | bcftools consensus -m "n100.r09.s046_output/n100.r09.s046.low_depth.tsv" tmp.vcf.gz > "n100.r09.s046_output/n100.r09.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:45 scheduler task 0bb80e08 (flow 6ea6ac51): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:45 scheduler task 0bb80e08 (flow 6ea6ac51): waiting for completion (try 0): started
2021/07/08 17:29:45  ->  n100.r09.s074.Main.out_file 6ea6ac51 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:45 n100.r09.s074.Main.out_file 6ea6ac51 n100/r09/n100.r09.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:690464e74d21e9ad5e8afb7b86d8179a6455fdd6fa1f2bfd27e86c7306ed3ea9
	sha256:6ea6ac511ec8508c6ef19597f147a3792739b9ee7a04d52960a57f598c84ef4e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0bb80e0812f43d2a298bca5ffacf80ab5ea99e7d6f3dff79cfe0e0fcb0344214
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s074_output"
	    wget -O "n100.r09.s074_output/n100.r09.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s074_output/n100.r09.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s074_output/n100.r09.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s074_output/n100.r09.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s074_output/n100.r09.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s074_output/n100.r09.s074.reference.fas" "n100.r09.s074_output/n100.r09.s074.fq1.fastq" "n100.r09.s074_output/n100.r09.s074.fq2.fastq" | samtools view -bS - > "n100.r09.s074_output/n100.r09.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s074_output/n100.r09.s074.untrimmed.sorted.bam" "n100.r09.s074_output/n100.r09.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s074_output/n100.r09.s074.untrimmed.sorted.bam" -b "n100.r09.s074_output/n100.r09.s074.primers.bed" -p "n100.r09.s074_output/n100.r09.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" "n100.r09.s074_output/n100.r09.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s074_output/n100.r09.s074.reference.fas" "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" > "n100.r09.s074_output/n100.r09.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s074_output/n100.r09.s074.reference.fas" --call-indels "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" > "n100.r09.s074_output/n100.r09.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" > "n100.r09.s074_output/n100.r09.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s074_output/n100.r09.s074.depth.txt" "n100.r09.s074_output/n100.r09.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s074_output/n100.r09.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s074_output/n100.r09.s074.reference.fas" | bcftools consensus -m "n100.r09.s074_output/n100.r09.s074.low_depth.tsv" tmp.vcf.gz > "n100.r09.s074_output/n100.r09.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task 6c9cf8f0 (flow 87f0b2e1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task 6c9cf8f0 (flow 87f0b2e1): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s089.Main.out_file 87f0b2e1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s089.Main.out_file 87f0b2e1 n100/r09/n100.r09.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ab23625a7cfb95e23f797bf778208b08a60a96ea2307326ee087ac15aefc8bbd
	sha256:87f0b2e12db5271cb3aaa1add046664491683652b348fad35906716e4f4e7cbf
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c9cf8f0f5e89ecc3167ab709d71baf2c6831879c76a2e96c6b8eccf9a157c3b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s089_output"
	    wget -O "n100.r09.s089_output/n100.r09.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s089_output/n100.r09.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s089_output/n100.r09.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s089_output/n100.r09.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s089_output/n100.r09.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s089_output/n100.r09.s089.reference.fas" "n100.r09.s089_output/n100.r09.s089.fq1.fastq" "n100.r09.s089_output/n100.r09.s089.fq2.fastq" | samtools view -bS - > "n100.r09.s089_output/n100.r09.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s089_output/n100.r09.s089.untrimmed.sorted.bam" "n100.r09.s089_output/n100.r09.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s089_output/n100.r09.s089.untrimmed.sorted.bam" -b "n100.r09.s089_output/n100.r09.s089.primers.bed" -p "n100.r09.s089_output/n100.r09.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" "n100.r09.s089_output/n100.r09.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s089_output/n100.r09.s089.reference.fas" "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" > "n100.r09.s089_output/n100.r09.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s089_output/n100.r09.s089.reference.fas" --call-indels "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" > "n100.r09.s089_output/n100.r09.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" > "n100.r09.s089_output/n100.r09.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s089_output/n100.r09.s089.depth.txt" "n100.r09.s089_output/n100.r09.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s089_output/n100.r09.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s089_output/n100.r09.s089.reference.fas" | bcftools consensus -m "n100.r09.s089_output/n100.r09.s089.low_depth.tsv" tmp.vcf.gz > "n100.r09.s089_output/n100.r09.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task a118daf0 (flow 01eaeab9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task a118daf0 (flow 01eaeab9): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s083.Main.out_file 01eaeab9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s083.Main.out_file 01eaeab9 n100/r09/n100.r09.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac624d6c60c1f141a61075e2eb896b9ad85b838080dae1118e14644b332d35e3
	sha256:01eaeab909cd895ee45e2849c20cebdfa1eccb20e4026a0ce60bc688e9dbca63
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a118daf0efe225ca7ebdcba89bfc7855d5cd8264ed2fcee6b233236959e520e9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s083_output"
	    wget -O "n100.r09.s083_output/n100.r09.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s083_output/n100.r09.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s083_output/n100.r09.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s083_output/n100.r09.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s083_output/n100.r09.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s083_output/n100.r09.s083.reference.fas" "n100.r09.s083_output/n100.r09.s083.fq1.fastq" "n100.r09.s083_output/n100.r09.s083.fq2.fastq" | samtools view -bS - > "n100.r09.s083_output/n100.r09.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s083_output/n100.r09.s083.untrimmed.sorted.bam" "n100.r09.s083_output/n100.r09.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s083_output/n100.r09.s083.untrimmed.sorted.bam" -b "n100.r09.s083_output/n100.r09.s083.primers.bed" -p "n100.r09.s083_output/n100.r09.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" "n100.r09.s083_output/n100.r09.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s083_output/n100.r09.s083.reference.fas" "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" > "n100.r09.s083_output/n100.r09.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s083_output/n100.r09.s083.reference.fas" --call-indels "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" > "n100.r09.s083_output/n100.r09.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" > "n100.r09.s083_output/n100.r09.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s083_output/n100.r09.s083.depth.txt" "n100.r09.s083_output/n100.r09.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s083_output/n100.r09.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s083_output/n100.r09.s083.reference.fas" | bcftools consensus -m "n100.r09.s083_output/n100.r09.s083.low_depth.tsv" tmp.vcf.gz > "n100.r09.s083_output/n100.r09.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task 02e1d72b (flow 9bb037fa): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task 02e1d72b (flow 9bb037fa): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s034.Main.out_file 9bb037fa exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s034.Main.out_file 9bb037fa n100/r09/n100.r09.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03b4ee2983f75d0f5bf543648919a8e349bbe4a9288dfeea45c65c14c8fee0d4
	sha256:9bb037fafdcac4e0cdfe92f353bf06e085b23e8118d7fe1ec762de8e56d31a3a
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/02e1d72b0391ce84e7272a2969e641f11565118c18f27e29b552fafb2b10c8e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s034_output"
	    wget -O "n100.r09.s034_output/n100.r09.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s034_output/n100.r09.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s034_output/n100.r09.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s034_output/n100.r09.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s034_output/n100.r09.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s034_output/n100.r09.s034.reference.fas" "n100.r09.s034_output/n100.r09.s034.fq1.fastq" "n100.r09.s034_output/n100.r09.s034.fq2.fastq" | samtools view -bS - > "n100.r09.s034_output/n100.r09.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s034_output/n100.r09.s034.untrimmed.sorted.bam" "n100.r09.s034_output/n100.r09.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s034_output/n100.r09.s034.untrimmed.sorted.bam" -b "n100.r09.s034_output/n100.r09.s034.primers.bed" -p "n100.r09.s034_output/n100.r09.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" "n100.r09.s034_output/n100.r09.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s034_output/n100.r09.s034.reference.fas" "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" > "n100.r09.s034_output/n100.r09.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s034_output/n100.r09.s034.reference.fas" --call-indels "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" > "n100.r09.s034_output/n100.r09.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" > "n100.r09.s034_output/n100.r09.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s034_output/n100.r09.s034.depth.txt" "n100.r09.s034_output/n100.r09.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s034_output/n100.r09.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s034_output/n100.r09.s034.reference.fas" | bcftools consensus -m "n100.r09.s034_output/n100.r09.s034.low_depth.tsv" tmp.vcf.gz > "n100.r09.s034_output/n100.r09.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task 03ade628 (flow 6fcd9514): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task 03ade628 (flow 6fcd9514): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s019.Main.out_file 6fcd9514 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s019.Main.out_file 6fcd9514 n100/r09/n100.r09.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb4f81a1f845fb2c8cd2bac1fe5e25a87f7485469870c1b7d5b9f8e3238835cf
	sha256:6fcd95145d7d24076e79f3ff7305a417d70c626d58d4f5d935c07b7ced841b25
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/03ade628fa9ce76f4c5d50f528d41c29fbc76fb16eac84b222abee9d5ac8f152
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s019_output"
	    wget -O "n100.r09.s019_output/n100.r09.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s019_output/n100.r09.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s019_output/n100.r09.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s019_output/n100.r09.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s019_output/n100.r09.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s019_output/n100.r09.s019.reference.fas" "n100.r09.s019_output/n100.r09.s019.fq1.fastq" "n100.r09.s019_output/n100.r09.s019.fq2.fastq" | samtools view -bS - > "n100.r09.s019_output/n100.r09.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s019_output/n100.r09.s019.untrimmed.sorted.bam" "n100.r09.s019_output/n100.r09.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s019_output/n100.r09.s019.untrimmed.sorted.bam" -b "n100.r09.s019_output/n100.r09.s019.primers.bed" -p "n100.r09.s019_output/n100.r09.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" "n100.r09.s019_output/n100.r09.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s019_output/n100.r09.s019.reference.fas" "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" > "n100.r09.s019_output/n100.r09.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s019_output/n100.r09.s019.reference.fas" --call-indels "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" > "n100.r09.s019_output/n100.r09.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" > "n100.r09.s019_output/n100.r09.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s019_output/n100.r09.s019.depth.txt" "n100.r09.s019_output/n100.r09.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s019_output/n100.r09.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s019_output/n100.r09.s019.reference.fas" | bcftools consensus -m "n100.r09.s019_output/n100.r09.s019.low_depth.tsv" tmp.vcf.gz > "n100.r09.s019_output/n100.r09.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task c5cc38da (flow 8dc0d360): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task c5cc38da (flow 8dc0d360): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s059.Main.out_file 8dc0d360 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s059.Main.out_file 8dc0d360 n100/r09/n100.r09.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5bd88babd21bd9a9da1b21868f8811e9312ea5db025adb97d7d05600091c97d7
	sha256:8dc0d360b85220ed99a081dac8d10c53ca0197d3bef9ecc2f1c8f0c6b59e277b
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5cc38daccd87bcbfb4da5a17c75d25deaf54ea78c4cd8b2687e4165aa715d59
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s059_output"
	    wget -O "n100.r09.s059_output/n100.r09.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s059_output/n100.r09.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s059_output/n100.r09.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s059_output/n100.r09.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s059_output/n100.r09.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s059_output/n100.r09.s059.reference.fas" "n100.r09.s059_output/n100.r09.s059.fq1.fastq" "n100.r09.s059_output/n100.r09.s059.fq2.fastq" | samtools view -bS - > "n100.r09.s059_output/n100.r09.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s059_output/n100.r09.s059.untrimmed.sorted.bam" "n100.r09.s059_output/n100.r09.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s059_output/n100.r09.s059.untrimmed.sorted.bam" -b "n100.r09.s059_output/n100.r09.s059.primers.bed" -p "n100.r09.s059_output/n100.r09.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" "n100.r09.s059_output/n100.r09.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s059_output/n100.r09.s059.reference.fas" "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" > "n100.r09.s059_output/n100.r09.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s059_output/n100.r09.s059.reference.fas" --call-indels "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" > "n100.r09.s059_output/n100.r09.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" > "n100.r09.s059_output/n100.r09.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s059_output/n100.r09.s059.depth.txt" "n100.r09.s059_output/n100.r09.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s059_output/n100.r09.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s059_output/n100.r09.s059.reference.fas" | bcftools consensus -m "n100.r09.s059_output/n100.r09.s059.low_depth.tsv" tmp.vcf.gz > "n100.r09.s059_output/n100.r09.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task e67b8fea (flow ff045352): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task e67b8fea (flow ff045352): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s078.Main.out_file ff045352 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s078.Main.out_file ff045352 n100/r09/n100.r09.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f4d428ee99d6c00d916f763fffce3069c5e9fb4d0184ae9e7a6d81aae9054ca
	sha256:ff045352ea68f95bc969595fbafe27be2c2d5604be343b115eea5ebb8177b106
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e67b8fea56aba9eff17fa39472b33c31441d12e9f4eaebe8ba6f6619d49b0b51
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s078_output"
	    wget -O "n100.r09.s078_output/n100.r09.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s078_output/n100.r09.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s078_output/n100.r09.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s078_output/n100.r09.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s078_output/n100.r09.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s078_output/n100.r09.s078.reference.fas" "n100.r09.s078_output/n100.r09.s078.fq1.fastq" "n100.r09.s078_output/n100.r09.s078.fq2.fastq" | samtools view -bS - > "n100.r09.s078_output/n100.r09.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s078_output/n100.r09.s078.untrimmed.sorted.bam" "n100.r09.s078_output/n100.r09.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s078_output/n100.r09.s078.untrimmed.sorted.bam" -b "n100.r09.s078_output/n100.r09.s078.primers.bed" -p "n100.r09.s078_output/n100.r09.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" "n100.r09.s078_output/n100.r09.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s078_output/n100.r09.s078.reference.fas" "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" > "n100.r09.s078_output/n100.r09.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s078_output/n100.r09.s078.reference.fas" --call-indels "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" > "n100.r09.s078_output/n100.r09.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" > "n100.r09.s078_output/n100.r09.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s078_output/n100.r09.s078.depth.txt" "n100.r09.s078_output/n100.r09.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s078_output/n100.r09.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s078_output/n100.r09.s078.reference.fas" | bcftools consensus -m "n100.r09.s078_output/n100.r09.s078.low_depth.tsv" tmp.vcf.gz > "n100.r09.s078_output/n100.r09.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:46 scheduler task ec43ea83 (flow 7b4ec1c0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:46 scheduler task ec43ea83 (flow 7b4ec1c0): waiting for completion (try 0): started
2021/07/08 17:29:46  ->  n100.r09.s014.Main.out_file 7b4ec1c0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:46 n100.r09.s014.Main.out_file 7b4ec1c0 n100/r09/n100.r09.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c8eddca4f8b3d10dfb27b9472171c99b62b3c5485c5fa2a3d45238473689ed3c
	sha256:7b4ec1c048b8ef1f1755dcf57895b7dd9b441b42e6265a42d54a09b383a7ff1a
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ec43ea83929bd48b74ef32d3cf6e327cc4dc6fb2e1410207c938e18fd6ca47b3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s014_output"
	    wget -O "n100.r09.s014_output/n100.r09.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s014_output/n100.r09.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s014_output/n100.r09.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s014_output/n100.r09.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s014_output/n100.r09.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s014_output/n100.r09.s014.reference.fas" "n100.r09.s014_output/n100.r09.s014.fq1.fastq" "n100.r09.s014_output/n100.r09.s014.fq2.fastq" | samtools view -bS - > "n100.r09.s014_output/n100.r09.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s014_output/n100.r09.s014.untrimmed.sorted.bam" "n100.r09.s014_output/n100.r09.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s014_output/n100.r09.s014.untrimmed.sorted.bam" -b "n100.r09.s014_output/n100.r09.s014.primers.bed" -p "n100.r09.s014_output/n100.r09.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" "n100.r09.s014_output/n100.r09.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s014_output/n100.r09.s014.reference.fas" "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" > "n100.r09.s014_output/n100.r09.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s014_output/n100.r09.s014.reference.fas" --call-indels "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" > "n100.r09.s014_output/n100.r09.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" > "n100.r09.s014_output/n100.r09.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s014_output/n100.r09.s014.depth.txt" "n100.r09.s014_output/n100.r09.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s014_output/n100.r09.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s014_output/n100.r09.s014.reference.fas" | bcftools consensus -m "n100.r09.s014_output/n100.r09.s014.low_depth.tsv" tmp.vcf.gz > "n100.r09.s014_output/n100.r09.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:47 scheduler task 43278a34 (flow 85764be5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:47 scheduler task 43278a34 (flow 85764be5): waiting for completion (try 0): started
2021/07/08 17:29:47  ->  n100.r09.s093.Main.out_file 85764be5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:47 n100.r09.s093.Main.out_file 85764be5 n100/r09/n100.r09.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:50e9217c18d50b8664a6426e68a9be4540ee8e8d14293f13d0074518548de5aa
	sha256:85764be5b40545b7b7b12acab65b4ae224c9cf9620821c579786fabfacd38ac1
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43278a3404fd27aec6587130d594a94a2b07939bffcdcb0dcf0b823262643de6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s093_output"
	    wget -O "n100.r09.s093_output/n100.r09.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s093_output/n100.r09.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s093_output/n100.r09.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s093_output/n100.r09.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s093_output/n100.r09.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s093_output/n100.r09.s093.reference.fas" "n100.r09.s093_output/n100.r09.s093.fq1.fastq" "n100.r09.s093_output/n100.r09.s093.fq2.fastq" | samtools view -bS - > "n100.r09.s093_output/n100.r09.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s093_output/n100.r09.s093.untrimmed.sorted.bam" "n100.r09.s093_output/n100.r09.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s093_output/n100.r09.s093.untrimmed.sorted.bam" -b "n100.r09.s093_output/n100.r09.s093.primers.bed" -p "n100.r09.s093_output/n100.r09.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" "n100.r09.s093_output/n100.r09.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s093_output/n100.r09.s093.reference.fas" "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" > "n100.r09.s093_output/n100.r09.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s093_output/n100.r09.s093.reference.fas" --call-indels "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" > "n100.r09.s093_output/n100.r09.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" > "n100.r09.s093_output/n100.r09.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s093_output/n100.r09.s093.depth.txt" "n100.r09.s093_output/n100.r09.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s093_output/n100.r09.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s093_output/n100.r09.s093.reference.fas" | bcftools consensus -m "n100.r09.s093_output/n100.r09.s093.low_depth.tsv" tmp.vcf.gz > "n100.r09.s093_output/n100.r09.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:47 scheduler task 4b51afe4 (flow 88409fe3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:47 scheduler task 4b51afe4 (flow 88409fe3): waiting for completion (try 0): started
2021/07/08 17:29:47  ->  n100.r09.s027.Main.out_file 88409fe3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:47 n100.r09.s027.Main.out_file 88409fe3 n100/r09/n100.r09.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bd71db265da9c88131afbbb14c31cdff8358b16c2a78e8a18a26885174370220
	sha256:88409fe3c1897d7c9a75f869f3d3dc6484026ddc012446b7f5ef4dcb50daffc7
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4b51afe4b92b16dbdfdf20befbd61434ad4b2b98872355fe19b3fff344913b7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s027_output"
	    wget -O "n100.r09.s027_output/n100.r09.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s027_output/n100.r09.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s027_output/n100.r09.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s027_output/n100.r09.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s027_output/n100.r09.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s027_output/n100.r09.s027.reference.fas" "n100.r09.s027_output/n100.r09.s027.fq1.fastq" "n100.r09.s027_output/n100.r09.s027.fq2.fastq" | samtools view -bS - > "n100.r09.s027_output/n100.r09.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s027_output/n100.r09.s027.untrimmed.sorted.bam" "n100.r09.s027_output/n100.r09.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s027_output/n100.r09.s027.untrimmed.sorted.bam" -b "n100.r09.s027_output/n100.r09.s027.primers.bed" -p "n100.r09.s027_output/n100.r09.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" "n100.r09.s027_output/n100.r09.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s027_output/n100.r09.s027.reference.fas" "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" > "n100.r09.s027_output/n100.r09.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s027_output/n100.r09.s027.reference.fas" --call-indels "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" > "n100.r09.s027_output/n100.r09.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" > "n100.r09.s027_output/n100.r09.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s027_output/n100.r09.s027.depth.txt" "n100.r09.s027_output/n100.r09.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s027_output/n100.r09.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s027_output/n100.r09.s027.reference.fas" | bcftools consensus -m "n100.r09.s027_output/n100.r09.s027.low_depth.tsv" tmp.vcf.gz > "n100.r09.s027_output/n100.r09.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:47 scheduler task 25cadac9 (flow bac83fae): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:47 scheduler task 25cadac9 (flow bac83fae): waiting for completion (try 0): started
2021/07/08 17:29:47  ->  n100.r09.s095.Main.out_file bac83fae exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:47 n100.r09.s095.Main.out_file bac83fae n100/r09/n100.r09.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f58a1a01e036c52c0f4a8ab31565204e607e7a229a2d9d1283b4aaacccafc59e
	sha256:bac83faeb8f216973ff31f517805f0ce26fd6bfb1a081a00e62b8425cd7ec9d8
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/25cadac94d5602052db15d5bcfd40187510421b2d4f959149b35a8f0356431f5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s095_output"
	    wget -O "n100.r09.s095_output/n100.r09.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s095_output/n100.r09.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s095_output/n100.r09.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s095_output/n100.r09.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s095_output/n100.r09.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s095_output/n100.r09.s095.reference.fas" "n100.r09.s095_output/n100.r09.s095.fq1.fastq" "n100.r09.s095_output/n100.r09.s095.fq2.fastq" | samtools view -bS - > "n100.r09.s095_output/n100.r09.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s095_output/n100.r09.s095.untrimmed.sorted.bam" "n100.r09.s095_output/n100.r09.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s095_output/n100.r09.s095.untrimmed.sorted.bam" -b "n100.r09.s095_output/n100.r09.s095.primers.bed" -p "n100.r09.s095_output/n100.r09.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" "n100.r09.s095_output/n100.r09.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s095_output/n100.r09.s095.reference.fas" "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" > "n100.r09.s095_output/n100.r09.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s095_output/n100.r09.s095.reference.fas" --call-indels "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" > "n100.r09.s095_output/n100.r09.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" > "n100.r09.s095_output/n100.r09.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s095_output/n100.r09.s095.depth.txt" "n100.r09.s095_output/n100.r09.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s095_output/n100.r09.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s095_output/n100.r09.s095.reference.fas" | bcftools consensus -m "n100.r09.s095_output/n100.r09.s095.low_depth.tsv" tmp.vcf.gz > "n100.r09.s095_output/n100.r09.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:47 scheduler task 6798e2db (flow b27ceb8c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:47 scheduler task 6798e2db (flow b27ceb8c): waiting for completion (try 0): started
2021/07/08 17:29:47  ->  n100.r09.s079.Main.out_file b27ceb8c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:47 n100.r09.s079.Main.out_file b27ceb8c n100/r09/n100.r09.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9bc7d2ad8f8b5f6b4f55a51d914eac8f20486a26c835ce338d3041bc7c439cb6
	sha256:b27ceb8cb1cbe8c0aa63b223b6b54d245e27fa229d874a172897d6ab31ee8b09
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6798e2db9092cdf5f97ffe6832af955a6ab422b5d49cf9b459d0fe6a0814b964
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s079_output"
	    wget -O "n100.r09.s079_output/n100.r09.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s079_output/n100.r09.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s079_output/n100.r09.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s079_output/n100.r09.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s079_output/n100.r09.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s079_output/n100.r09.s079.reference.fas" "n100.r09.s079_output/n100.r09.s079.fq1.fastq" "n100.r09.s079_output/n100.r09.s079.fq2.fastq" | samtools view -bS - > "n100.r09.s079_output/n100.r09.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s079_output/n100.r09.s079.untrimmed.sorted.bam" "n100.r09.s079_output/n100.r09.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s079_output/n100.r09.s079.untrimmed.sorted.bam" -b "n100.r09.s079_output/n100.r09.s079.primers.bed" -p "n100.r09.s079_output/n100.r09.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" "n100.r09.s079_output/n100.r09.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s079_output/n100.r09.s079.reference.fas" "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" > "n100.r09.s079_output/n100.r09.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s079_output/n100.r09.s079.reference.fas" --call-indels "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" > "n100.r09.s079_output/n100.r09.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" > "n100.r09.s079_output/n100.r09.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s079_output/n100.r09.s079.depth.txt" "n100.r09.s079_output/n100.r09.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s079_output/n100.r09.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s079_output/n100.r09.s079.reference.fas" | bcftools consensus -m "n100.r09.s079_output/n100.r09.s079.low_depth.tsv" tmp.vcf.gz > "n100.r09.s079_output/n100.r09.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:47 scheduler task 909dc8d5 (flow b75a80ea): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:47 scheduler task 909dc8d5 (flow b75a80ea): waiting for completion (try 0): started
2021/07/08 17:29:47  ->  n100.r09.s082.Main.out_file b75a80ea exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:47 n100.r09.s082.Main.out_file b75a80ea n100/r09/n100.r09.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6a8355762c17b6a4582115ad33cd436f81c2c93a416fe7d235bad7be094df00a
	sha256:b75a80eaa7a69cb8c22f59cc4b7089e08074438f7a0ec6d0ed3857496e7f96ad
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/909dc8d530fdc4630e1a231847953d3efef4506025bb209310197eb714487f51
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s082_output"
	    wget -O "n100.r09.s082_output/n100.r09.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s082_output/n100.r09.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s082_output/n100.r09.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s082_output/n100.r09.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s082_output/n100.r09.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s082_output/n100.r09.s082.reference.fas" "n100.r09.s082_output/n100.r09.s082.fq1.fastq" "n100.r09.s082_output/n100.r09.s082.fq2.fastq" | samtools view -bS - > "n100.r09.s082_output/n100.r09.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s082_output/n100.r09.s082.untrimmed.sorted.bam" "n100.r09.s082_output/n100.r09.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s082_output/n100.r09.s082.untrimmed.sorted.bam" -b "n100.r09.s082_output/n100.r09.s082.primers.bed" -p "n100.r09.s082_output/n100.r09.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" "n100.r09.s082_output/n100.r09.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s082_output/n100.r09.s082.reference.fas" "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" > "n100.r09.s082_output/n100.r09.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s082_output/n100.r09.s082.reference.fas" --call-indels "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" > "n100.r09.s082_output/n100.r09.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" > "n100.r09.s082_output/n100.r09.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s082_output/n100.r09.s082.depth.txt" "n100.r09.s082_output/n100.r09.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s082_output/n100.r09.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s082_output/n100.r09.s082.reference.fas" | bcftools consensus -m "n100.r09.s082_output/n100.r09.s082.low_depth.tsv" tmp.vcf.gz > "n100.r09.s082_output/n100.r09.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task c5ef6095 (flow 7b48a912): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task c5ef6095 (flow 7b48a912): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s055.Main.out_file 7b48a912 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s055.Main.out_file 7b48a912 n100/r09/n100.r09.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebf99d5fc86d79dcd2bd5d491f35f8925f37fdb2b8ce33d9360a359cff3ce03e
	sha256:7b48a91214c165203dea30dea0a089d00c069c44cea837dc52431fbbff12220e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5ef60959a99537b4799b711e95ece2644ba685d3070312189c4eca5c46ace93
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s055_output"
	    wget -O "n100.r09.s055_output/n100.r09.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s055_output/n100.r09.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s055_output/n100.r09.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s055_output/n100.r09.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s055_output/n100.r09.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s055_output/n100.r09.s055.reference.fas" "n100.r09.s055_output/n100.r09.s055.fq1.fastq" "n100.r09.s055_output/n100.r09.s055.fq2.fastq" | samtools view -bS - > "n100.r09.s055_output/n100.r09.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s055_output/n100.r09.s055.untrimmed.sorted.bam" "n100.r09.s055_output/n100.r09.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s055_output/n100.r09.s055.untrimmed.sorted.bam" -b "n100.r09.s055_output/n100.r09.s055.primers.bed" -p "n100.r09.s055_output/n100.r09.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" "n100.r09.s055_output/n100.r09.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s055_output/n100.r09.s055.reference.fas" "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" > "n100.r09.s055_output/n100.r09.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s055_output/n100.r09.s055.reference.fas" --call-indels "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" > "n100.r09.s055_output/n100.r09.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" > "n100.r09.s055_output/n100.r09.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s055_output/n100.r09.s055.depth.txt" "n100.r09.s055_output/n100.r09.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s055_output/n100.r09.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s055_output/n100.r09.s055.reference.fas" | bcftools consensus -m "n100.r09.s055_output/n100.r09.s055.low_depth.tsv" tmp.vcf.gz > "n100.r09.s055_output/n100.r09.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task 03660aa3 (flow 0ff73e1f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task 03660aa3 (flow 0ff73e1f): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s065.Main.out_file 0ff73e1f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s065.Main.out_file 0ff73e1f n100/r09/n100.r09.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac2d4672241dc77e5ad3a120c563c7074aaa939a9168f5c96e2f21e9e63e356b
	sha256:0ff73e1f79159d0cdc7301988035686672f8f2e79344ec7902e4e4b009ccd9a3
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/03660aa3eb92b4808af2d57bf7f33e16c12b784830478cc123c8b0bad1369c2c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s065_output"
	    wget -O "n100.r09.s065_output/n100.r09.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s065_output/n100.r09.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s065_output/n100.r09.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s065_output/n100.r09.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s065_output/n100.r09.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s065_output/n100.r09.s065.reference.fas" "n100.r09.s065_output/n100.r09.s065.fq1.fastq" "n100.r09.s065_output/n100.r09.s065.fq2.fastq" | samtools view -bS - > "n100.r09.s065_output/n100.r09.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s065_output/n100.r09.s065.untrimmed.sorted.bam" "n100.r09.s065_output/n100.r09.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s065_output/n100.r09.s065.untrimmed.sorted.bam" -b "n100.r09.s065_output/n100.r09.s065.primers.bed" -p "n100.r09.s065_output/n100.r09.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" "n100.r09.s065_output/n100.r09.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s065_output/n100.r09.s065.reference.fas" "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" > "n100.r09.s065_output/n100.r09.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s065_output/n100.r09.s065.reference.fas" --call-indels "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" > "n100.r09.s065_output/n100.r09.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" > "n100.r09.s065_output/n100.r09.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s065_output/n100.r09.s065.depth.txt" "n100.r09.s065_output/n100.r09.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s065_output/n100.r09.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s065_output/n100.r09.s065.reference.fas" | bcftools consensus -m "n100.r09.s065_output/n100.r09.s065.low_depth.tsv" tmp.vcf.gz > "n100.r09.s065_output/n100.r09.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task e71d796c (flow ef0a70a3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task e71d796c (flow ef0a70a3): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s011.Main.out_file ef0a70a3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s011.Main.out_file ef0a70a3 n100/r09/n100.r09.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3ad4b3387f2c85683620dd88ed92666b19cc522b8dd38d13e8b2f2506273cab3
	sha256:ef0a70a3bbd84ec332ab3014699c6bcd3ba90298cd82844b2f23cd105c77ccdb
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e71d796c59daa9b4385961decdf83bc9f173119bf7fc914890945d7f618ccb48
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s011_output"
	    wget -O "n100.r09.s011_output/n100.r09.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s011_output/n100.r09.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s011_output/n100.r09.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s011_output/n100.r09.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s011_output/n100.r09.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s011_output/n100.r09.s011.reference.fas" "n100.r09.s011_output/n100.r09.s011.fq1.fastq" "n100.r09.s011_output/n100.r09.s011.fq2.fastq" | samtools view -bS - > "n100.r09.s011_output/n100.r09.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s011_output/n100.r09.s011.untrimmed.sorted.bam" "n100.r09.s011_output/n100.r09.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s011_output/n100.r09.s011.untrimmed.sorted.bam" -b "n100.r09.s011_output/n100.r09.s011.primers.bed" -p "n100.r09.s011_output/n100.r09.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" "n100.r09.s011_output/n100.r09.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s011_output/n100.r09.s011.reference.fas" "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" > "n100.r09.s011_output/n100.r09.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s011_output/n100.r09.s011.reference.fas" --call-indels "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" > "n100.r09.s011_output/n100.r09.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" > "n100.r09.s011_output/n100.r09.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s011_output/n100.r09.s011.depth.txt" "n100.r09.s011_output/n100.r09.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s011_output/n100.r09.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s011_output/n100.r09.s011.reference.fas" | bcftools consensus -m "n100.r09.s011_output/n100.r09.s011.low_depth.tsv" tmp.vcf.gz > "n100.r09.s011_output/n100.r09.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task 2230bc53 (flow 62a0035c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task 2230bc53 (flow 62a0035c): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s030.Main.out_file 62a0035c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s030.Main.out_file 62a0035c n100/r09/n100.r09.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:95248b43ad0cbbed648f614381a51edca38a228e50a78ec71d2b0aa61b61206b
	sha256:62a0035c5c70de34df791b44ae4b4f682dfdd9081e1b6275add586385fb2b1d7
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2230bc533dee45d7ef475121dc9f11beb6c0975eba659739f632a93f8a076167
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s030_output"
	    wget -O "n100.r09.s030_output/n100.r09.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s030_output/n100.r09.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s030_output/n100.r09.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s030_output/n100.r09.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s030_output/n100.r09.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s030_output/n100.r09.s030.reference.fas" "n100.r09.s030_output/n100.r09.s030.fq1.fastq" "n100.r09.s030_output/n100.r09.s030.fq2.fastq" | samtools view -bS - > "n100.r09.s030_output/n100.r09.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s030_output/n100.r09.s030.untrimmed.sorted.bam" "n100.r09.s030_output/n100.r09.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s030_output/n100.r09.s030.untrimmed.sorted.bam" -b "n100.r09.s030_output/n100.r09.s030.primers.bed" -p "n100.r09.s030_output/n100.r09.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" "n100.r09.s030_output/n100.r09.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s030_output/n100.r09.s030.reference.fas" "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" > "n100.r09.s030_output/n100.r09.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s030_output/n100.r09.s030.reference.fas" --call-indels "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" > "n100.r09.s030_output/n100.r09.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" > "n100.r09.s030_output/n100.r09.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s030_output/n100.r09.s030.depth.txt" "n100.r09.s030_output/n100.r09.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s030_output/n100.r09.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s030_output/n100.r09.s030.reference.fas" | bcftools consensus -m "n100.r09.s030_output/n100.r09.s030.low_depth.tsv" tmp.vcf.gz > "n100.r09.s030_output/n100.r09.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task bcbe460f (flow 032e076c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task bcbe460f (flow 032e076c): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s002.Main.out_file 032e076c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s002.Main.out_file 032e076c n100/r09/n100.r09.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5a1e6131695632db23159b7bbe9268aaa05ebb91f7d41c836cc393864616d6cb
	sha256:032e076c929470b21eb88d41c4d24857cd9085451b466302c8372db4946578c7
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bcbe460f7be25fd8069b739a0b4b2b58c7be37119ae3de61b9caf6e521b0dce8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s002_output"
	    wget -O "n100.r09.s002_output/n100.r09.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s002_output/n100.r09.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s002_output/n100.r09.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s002_output/n100.r09.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s002_output/n100.r09.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s002_output/n100.r09.s002.reference.fas" "n100.r09.s002_output/n100.r09.s002.fq1.fastq" "n100.r09.s002_output/n100.r09.s002.fq2.fastq" | samtools view -bS - > "n100.r09.s002_output/n100.r09.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s002_output/n100.r09.s002.untrimmed.sorted.bam" "n100.r09.s002_output/n100.r09.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s002_output/n100.r09.s002.untrimmed.sorted.bam" -b "n100.r09.s002_output/n100.r09.s002.primers.bed" -p "n100.r09.s002_output/n100.r09.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" "n100.r09.s002_output/n100.r09.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s002_output/n100.r09.s002.reference.fas" "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" > "n100.r09.s002_output/n100.r09.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s002_output/n100.r09.s002.reference.fas" --call-indels "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" > "n100.r09.s002_output/n100.r09.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" > "n100.r09.s002_output/n100.r09.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s002_output/n100.r09.s002.depth.txt" "n100.r09.s002_output/n100.r09.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s002_output/n100.r09.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s002_output/n100.r09.s002.reference.fas" | bcftools consensus -m "n100.r09.s002_output/n100.r09.s002.low_depth.tsv" tmp.vcf.gz > "n100.r09.s002_output/n100.r09.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task 62391e6e (flow 8039d92f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task 62391e6e (flow 8039d92f): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s037.Main.out_file 8039d92f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s037.Main.out_file 8039d92f n100/r09/n100.r09.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7536e6bafbf9cccdbda984c98550a2fd305567ddc63b6b40b240d34f8888745a
	sha256:8039d92ff9dc20cabd8b827817085836f6e82f02facc8058f05214eb2d2c0112
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/62391e6eb71ce8c237fbf3c7388d8c84843236914462e25ced3e5a325a665e86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s037_output"
	    wget -O "n100.r09.s037_output/n100.r09.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s037_output/n100.r09.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s037_output/n100.r09.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s037_output/n100.r09.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s037_output/n100.r09.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s037_output/n100.r09.s037.reference.fas" "n100.r09.s037_output/n100.r09.s037.fq1.fastq" "n100.r09.s037_output/n100.r09.s037.fq2.fastq" | samtools view -bS - > "n100.r09.s037_output/n100.r09.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s037_output/n100.r09.s037.untrimmed.sorted.bam" "n100.r09.s037_output/n100.r09.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s037_output/n100.r09.s037.untrimmed.sorted.bam" -b "n100.r09.s037_output/n100.r09.s037.primers.bed" -p "n100.r09.s037_output/n100.r09.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" "n100.r09.s037_output/n100.r09.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s037_output/n100.r09.s037.reference.fas" "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" > "n100.r09.s037_output/n100.r09.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s037_output/n100.r09.s037.reference.fas" --call-indels "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" > "n100.r09.s037_output/n100.r09.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" > "n100.r09.s037_output/n100.r09.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s037_output/n100.r09.s037.depth.txt" "n100.r09.s037_output/n100.r09.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s037_output/n100.r09.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s037_output/n100.r09.s037.reference.fas" | bcftools consensus -m "n100.r09.s037_output/n100.r09.s037.low_depth.tsv" tmp.vcf.gz > "n100.r09.s037_output/n100.r09.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:48 scheduler task 6a4e8d08 (flow 8ab86c50): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:48 scheduler task 6a4e8d08 (flow 8ab86c50): waiting for completion (try 0): started
2021/07/08 17:29:48  ->  n100.r09.s020.Main.out_file 8ab86c50 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:48 n100.r09.s020.Main.out_file 8ab86c50 n100/r09/n100.r09.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9861dae434ca6e77c52771f27da49726caff939f8b33db1d2cb2bf24b794077c
	sha256:8ab86c5015ac1de3220714fa0749d041405c2449514ef066069e4972e93406de
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a4e8d08b772005d76c9e22d56acc3278090f04d35922c92c6b9178aed1de829
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s020_output"
	    wget -O "n100.r09.s020_output/n100.r09.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s020_output/n100.r09.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s020_output/n100.r09.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s020_output/n100.r09.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s020_output/n100.r09.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s020_output/n100.r09.s020.reference.fas" "n100.r09.s020_output/n100.r09.s020.fq1.fastq" "n100.r09.s020_output/n100.r09.s020.fq2.fastq" | samtools view -bS - > "n100.r09.s020_output/n100.r09.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s020_output/n100.r09.s020.untrimmed.sorted.bam" "n100.r09.s020_output/n100.r09.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s020_output/n100.r09.s020.untrimmed.sorted.bam" -b "n100.r09.s020_output/n100.r09.s020.primers.bed" -p "n100.r09.s020_output/n100.r09.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" "n100.r09.s020_output/n100.r09.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s020_output/n100.r09.s020.reference.fas" "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" > "n100.r09.s020_output/n100.r09.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s020_output/n100.r09.s020.reference.fas" --call-indels "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" > "n100.r09.s020_output/n100.r09.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" > "n100.r09.s020_output/n100.r09.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s020_output/n100.r09.s020.depth.txt" "n100.r09.s020_output/n100.r09.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s020_output/n100.r09.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s020_output/n100.r09.s020.reference.fas" | bcftools consensus -m "n100.r09.s020_output/n100.r09.s020.low_depth.tsv" tmp.vcf.gz > "n100.r09.s020_output/n100.r09.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:49 scheduler task 9691b24c (flow 3c2b3c63): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:49 scheduler task 9691b24c (flow 3c2b3c63): waiting for completion (try 0): started
2021/07/08 17:29:49  ->  n100.r09.s049.Main.out_file 3c2b3c63 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:49 n100.r09.s049.Main.out_file 3c2b3c63 n100/r09/n100.r09.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0f86058091adc18bba2787a3f9b4916889f438ab4b1ea6b7d6b4b432d66bffed
	sha256:3c2b3c6380239d8b052842ea758e71506c130939b2d1ee365ae4812d8d72ef1a
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9691b24cd44f7373fc5a3efb26ad27a58d9394baad49779f19091eaa67ccbddd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s049_output"
	    wget -O "n100.r09.s049_output/n100.r09.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s049_output/n100.r09.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s049_output/n100.r09.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s049_output/n100.r09.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s049_output/n100.r09.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s049_output/n100.r09.s049.reference.fas" "n100.r09.s049_output/n100.r09.s049.fq1.fastq" "n100.r09.s049_output/n100.r09.s049.fq2.fastq" | samtools view -bS - > "n100.r09.s049_output/n100.r09.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s049_output/n100.r09.s049.untrimmed.sorted.bam" "n100.r09.s049_output/n100.r09.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s049_output/n100.r09.s049.untrimmed.sorted.bam" -b "n100.r09.s049_output/n100.r09.s049.primers.bed" -p "n100.r09.s049_output/n100.r09.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" "n100.r09.s049_output/n100.r09.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s049_output/n100.r09.s049.reference.fas" "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" > "n100.r09.s049_output/n100.r09.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s049_output/n100.r09.s049.reference.fas" --call-indels "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" > "n100.r09.s049_output/n100.r09.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" > "n100.r09.s049_output/n100.r09.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s049_output/n100.r09.s049.depth.txt" "n100.r09.s049_output/n100.r09.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s049_output/n100.r09.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s049_output/n100.r09.s049.reference.fas" | bcftools consensus -m "n100.r09.s049_output/n100.r09.s049.low_depth.tsv" tmp.vcf.gz > "n100.r09.s049_output/n100.r09.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:49 scheduler task 177a80d4 (flow c571bec1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:49 scheduler task 177a80d4 (flow c571bec1): waiting for completion (try 0): started
2021/07/08 17:29:49  ->  n100.r09.s061.Main.out_file c571bec1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:49 n100.r09.s061.Main.out_file c571bec1 n100/r09/n100.r09.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5a95f336106da45c0eb506c6bd99163683cc33c86e5f6bdba74847e783dfe3d
	sha256:c571bec12e53f9f784fa674fbe6da2efe3e3a9fbe754aa0f7c8bd366bf09dae6
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/177a80d47ff102dc3dbdeaf55eb9b87a73f1dc06dbb34ea0d301547a58ff4241
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s061_output"
	    wget -O "n100.r09.s061_output/n100.r09.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s061_output/n100.r09.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s061_output/n100.r09.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s061_output/n100.r09.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s061_output/n100.r09.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s061_output/n100.r09.s061.reference.fas" "n100.r09.s061_output/n100.r09.s061.fq1.fastq" "n100.r09.s061_output/n100.r09.s061.fq2.fastq" | samtools view -bS - > "n100.r09.s061_output/n100.r09.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s061_output/n100.r09.s061.untrimmed.sorted.bam" "n100.r09.s061_output/n100.r09.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s061_output/n100.r09.s061.untrimmed.sorted.bam" -b "n100.r09.s061_output/n100.r09.s061.primers.bed" -p "n100.r09.s061_output/n100.r09.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" "n100.r09.s061_output/n100.r09.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s061_output/n100.r09.s061.reference.fas" "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" > "n100.r09.s061_output/n100.r09.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s061_output/n100.r09.s061.reference.fas" --call-indels "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" > "n100.r09.s061_output/n100.r09.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" > "n100.r09.s061_output/n100.r09.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s061_output/n100.r09.s061.depth.txt" "n100.r09.s061_output/n100.r09.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s061_output/n100.r09.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s061_output/n100.r09.s061.reference.fas" | bcftools consensus -m "n100.r09.s061_output/n100.r09.s061.low_depth.tsv" tmp.vcf.gz > "n100.r09.s061_output/n100.r09.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:49 scheduler task 6cbee719 (flow 30fe5ddd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:49 scheduler task 6cbee719 (flow 30fe5ddd): waiting for completion (try 0): started
2021/07/08 17:29:49  ->  n100.r09.s052.Main.out_file 30fe5ddd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:49 n100.r09.s052.Main.out_file 30fe5ddd n100/r09/n100.r09.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:790ac3fd2039e5dd4fd20886428cee668bd63b5ca9b458a34b14fe061f2772d3
	sha256:30fe5ddd855e3e3786ce178b7d92dfb9235242b53952b4ede650d11687b8ed0b
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6cbee719b5e5729df8ff3023247cf2587eec98abe922864ed1122008f6f38acc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s052_output"
	    wget -O "n100.r09.s052_output/n100.r09.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s052_output/n100.r09.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s052_output/n100.r09.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s052_output/n100.r09.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s052_output/n100.r09.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s052_output/n100.r09.s052.reference.fas" "n100.r09.s052_output/n100.r09.s052.fq1.fastq" "n100.r09.s052_output/n100.r09.s052.fq2.fastq" | samtools view -bS - > "n100.r09.s052_output/n100.r09.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s052_output/n100.r09.s052.untrimmed.sorted.bam" "n100.r09.s052_output/n100.r09.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s052_output/n100.r09.s052.untrimmed.sorted.bam" -b "n100.r09.s052_output/n100.r09.s052.primers.bed" -p "n100.r09.s052_output/n100.r09.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" "n100.r09.s052_output/n100.r09.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s052_output/n100.r09.s052.reference.fas" "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" > "n100.r09.s052_output/n100.r09.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s052_output/n100.r09.s052.reference.fas" --call-indels "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" > "n100.r09.s052_output/n100.r09.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" > "n100.r09.s052_output/n100.r09.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s052_output/n100.r09.s052.depth.txt" "n100.r09.s052_output/n100.r09.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s052_output/n100.r09.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s052_output/n100.r09.s052.reference.fas" | bcftools consensus -m "n100.r09.s052_output/n100.r09.s052.low_depth.tsv" tmp.vcf.gz > "n100.r09.s052_output/n100.r09.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:49 scheduler task 67ea8735 (flow 75e64e3f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:49 scheduler task 67ea8735 (flow 75e64e3f): waiting for completion (try 0): started
2021/07/08 17:29:49  ->  n100.r09.s013.Main.out_file 75e64e3f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:49 n100.r09.s013.Main.out_file 75e64e3f n100/r09/n100.r09.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:de87d46c233206fbd639f3fe153f263cbd7153aedd13bbeb1ed1a82e958e6a8b
	sha256:75e64e3f334733929890fefd576c55b68dc9809e4d2ea0ef737a6da47270fd81
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67ea8735b9f8697277d35a4c46ebe0ed47d4bd0341369ff4ec80bd81a1f4af7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s013_output"
	    wget -O "n100.r09.s013_output/n100.r09.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s013_output/n100.r09.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s013_output/n100.r09.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s013_output/n100.r09.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s013_output/n100.r09.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s013_output/n100.r09.s013.reference.fas" "n100.r09.s013_output/n100.r09.s013.fq1.fastq" "n100.r09.s013_output/n100.r09.s013.fq2.fastq" | samtools view -bS - > "n100.r09.s013_output/n100.r09.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s013_output/n100.r09.s013.untrimmed.sorted.bam" "n100.r09.s013_output/n100.r09.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s013_output/n100.r09.s013.untrimmed.sorted.bam" -b "n100.r09.s013_output/n100.r09.s013.primers.bed" -p "n100.r09.s013_output/n100.r09.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" "n100.r09.s013_output/n100.r09.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s013_output/n100.r09.s013.reference.fas" "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" > "n100.r09.s013_output/n100.r09.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s013_output/n100.r09.s013.reference.fas" --call-indels "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" > "n100.r09.s013_output/n100.r09.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" > "n100.r09.s013_output/n100.r09.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s013_output/n100.r09.s013.depth.txt" "n100.r09.s013_output/n100.r09.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s013_output/n100.r09.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s013_output/n100.r09.s013.reference.fas" | bcftools consensus -m "n100.r09.s013_output/n100.r09.s013.low_depth.tsv" tmp.vcf.gz > "n100.r09.s013_output/n100.r09.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:49 scheduler task 89f12d5b (flow d6d4b6d9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:49 scheduler task 89f12d5b (flow d6d4b6d9): waiting for completion (try 0): started
2021/07/08 17:29:49  ->  n100.r09.s003.Main.out_file d6d4b6d9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:49 n100.r09.s003.Main.out_file d6d4b6d9 n100/r09/n100.r09.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a9fa3540df467b3932cf8e173564af93ebf61d6cfe642f25194162afa2f215f8
	sha256:d6d4b6d9287bef23de24dbecf14124a594a3cc81f1152f564b72673783e0cc56
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/89f12d5b2ca04113e659cec868721fb1162457a147668c61788ef8ff5c7b0f66
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s003_output"
	    wget -O "n100.r09.s003_output/n100.r09.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s003_output/n100.r09.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s003_output/n100.r09.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s003_output/n100.r09.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s003_output/n100.r09.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s003_output/n100.r09.s003.reference.fas" "n100.r09.s003_output/n100.r09.s003.fq1.fastq" "n100.r09.s003_output/n100.r09.s003.fq2.fastq" | samtools view -bS - > "n100.r09.s003_output/n100.r09.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s003_output/n100.r09.s003.untrimmed.sorted.bam" "n100.r09.s003_output/n100.r09.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s003_output/n100.r09.s003.untrimmed.sorted.bam" -b "n100.r09.s003_output/n100.r09.s003.primers.bed" -p "n100.r09.s003_output/n100.r09.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" "n100.r09.s003_output/n100.r09.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s003_output/n100.r09.s003.reference.fas" "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" > "n100.r09.s003_output/n100.r09.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s003_output/n100.r09.s003.reference.fas" --call-indels "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" > "n100.r09.s003_output/n100.r09.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" > "n100.r09.s003_output/n100.r09.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s003_output/n100.r09.s003.depth.txt" "n100.r09.s003_output/n100.r09.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s003_output/n100.r09.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s003_output/n100.r09.s003.reference.fas" | bcftools consensus -m "n100.r09.s003_output/n100.r09.s003.low_depth.tsv" tmp.vcf.gz > "n100.r09.s003_output/n100.r09.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:49 scheduler task 41e87e7d (flow 4e911385): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:49 scheduler task 41e87e7d (flow 4e911385): waiting for completion (try 0): started
2021/07/08 17:29:49  ->  n100.r09.s090.Main.out_file 4e911385 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:49 n100.r09.s090.Main.out_file 4e911385 n100/r09/n100.r09.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bbe8752507fb8bdbff7e97ff81133845ddf0610271f33a77a62c15fe94ebb0f5
	sha256:4e911385c4ae2c8e09220bc3b0a68baff9ad5a9aa582fc46d9b3898d4aa0d46c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/41e87e7dfc6ddd5588737ed386c4f388c4f6ad4526ea92507054115595399d8f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s090_output"
	    wget -O "n100.r09.s090_output/n100.r09.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s090_output/n100.r09.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s090_output/n100.r09.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s090_output/n100.r09.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s090_output/n100.r09.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s090_output/n100.r09.s090.reference.fas" "n100.r09.s090_output/n100.r09.s090.fq1.fastq" "n100.r09.s090_output/n100.r09.s090.fq2.fastq" | samtools view -bS - > "n100.r09.s090_output/n100.r09.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s090_output/n100.r09.s090.untrimmed.sorted.bam" "n100.r09.s090_output/n100.r09.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s090_output/n100.r09.s090.untrimmed.sorted.bam" -b "n100.r09.s090_output/n100.r09.s090.primers.bed" -p "n100.r09.s090_output/n100.r09.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" "n100.r09.s090_output/n100.r09.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s090_output/n100.r09.s090.reference.fas" "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" > "n100.r09.s090_output/n100.r09.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s090_output/n100.r09.s090.reference.fas" --call-indels "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" > "n100.r09.s090_output/n100.r09.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" > "n100.r09.s090_output/n100.r09.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s090_output/n100.r09.s090.depth.txt" "n100.r09.s090_output/n100.r09.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s090_output/n100.r09.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s090_output/n100.r09.s090.reference.fas" | bcftools consensus -m "n100.r09.s090_output/n100.r09.s090.low_depth.tsv" tmp.vcf.gz > "n100.r09.s090_output/n100.r09.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task 5b93b009 (flow 214bd342): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:50 scheduler task 5b93b009 (flow 214bd342): waiting for completion (try 0): started
2021/07/08 17:29:50  ->  n100.r09.s056.Main.out_file 214bd342 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:50 n100.r09.s056.Main.out_file 214bd342 n100/r09/n100.r09.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ac4ccfe15f278a19a66b6e43f4eba44b59ecaaa52a5e25b5b28dd1dc39fa037
	sha256:214bd3426222423c536d7902a0deaa1aa60d5a2de5d91b064c2247661148b554
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5b93b0098fe9f82c2ddd75d5709a34a2f468a1c4e35dfe1d7af7f2c40686d50a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s056_output"
	    wget -O "n100.r09.s056_output/n100.r09.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s056_output/n100.r09.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s056_output/n100.r09.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s056_output/n100.r09.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s056_output/n100.r09.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s056_output/n100.r09.s056.reference.fas" "n100.r09.s056_output/n100.r09.s056.fq1.fastq" "n100.r09.s056_output/n100.r09.s056.fq2.fastq" | samtools view -bS - > "n100.r09.s056_output/n100.r09.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s056_output/n100.r09.s056.untrimmed.sorted.bam" "n100.r09.s056_output/n100.r09.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s056_output/n100.r09.s056.untrimmed.sorted.bam" -b "n100.r09.s056_output/n100.r09.s056.primers.bed" -p "n100.r09.s056_output/n100.r09.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" "n100.r09.s056_output/n100.r09.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s056_output/n100.r09.s056.reference.fas" "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" > "n100.r09.s056_output/n100.r09.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s056_output/n100.r09.s056.reference.fas" --call-indels "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" > "n100.r09.s056_output/n100.r09.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" > "n100.r09.s056_output/n100.r09.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s056_output/n100.r09.s056.depth.txt" "n100.r09.s056_output/n100.r09.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s056_output/n100.r09.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s056_output/n100.r09.s056.reference.fas" | bcftools consensus -m "n100.r09.s056_output/n100.r09.s056.low_depth.tsv" tmp.vcf.gz > "n100.r09.s056_output/n100.r09.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task 8bb87836 (flow 19c275b5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:50 scheduler task 8bb87836 (flow 19c275b5): waiting for completion (try 0): started
2021/07/08 17:29:50  ->  n100.r09.s026.Main.out_file 19c275b5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:50 n100.r09.s026.Main.out_file 19c275b5 n100/r09/n100.r09.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8cc2557465e2d0bff46ab28e2da68fc098b99be6710760d358584b13c8d509b
	sha256:19c275b5dcedeebf145625cc34cdf070c4ee1bf23fcda0d294893a1b90c784d4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8bb87836f81805e60518ee22b51b6ce1e8278ab41d668a70d8783b5ce4c1c864
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s026_output"
	    wget -O "n100.r09.s026_output/n100.r09.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s026_output/n100.r09.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s026_output/n100.r09.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s026_output/n100.r09.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s026_output/n100.r09.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s026_output/n100.r09.s026.reference.fas" "n100.r09.s026_output/n100.r09.s026.fq1.fastq" "n100.r09.s026_output/n100.r09.s026.fq2.fastq" | samtools view -bS - > "n100.r09.s026_output/n100.r09.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s026_output/n100.r09.s026.untrimmed.sorted.bam" "n100.r09.s026_output/n100.r09.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s026_output/n100.r09.s026.untrimmed.sorted.bam" -b "n100.r09.s026_output/n100.r09.s026.primers.bed" -p "n100.r09.s026_output/n100.r09.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" "n100.r09.s026_output/n100.r09.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s026_output/n100.r09.s026.reference.fas" "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" > "n100.r09.s026_output/n100.r09.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s026_output/n100.r09.s026.reference.fas" --call-indels "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" > "n100.r09.s026_output/n100.r09.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" > "n100.r09.s026_output/n100.r09.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s026_output/n100.r09.s026.depth.txt" "n100.r09.s026_output/n100.r09.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s026_output/n100.r09.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s026_output/n100.r09.s026.reference.fas" | bcftools consensus -m "n100.r09.s026_output/n100.r09.s026.low_depth.tsv" tmp.vcf.gz > "n100.r09.s026_output/n100.r09.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task d843f9bd (flow 960857c0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:50 scheduler task d843f9bd (flow 960857c0): waiting for completion (try 0): started
2021/07/08 17:29:50  ->  n100.r09.s069.Main.out_file 960857c0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:50 n100.r09.s069.Main.out_file 960857c0 n100/r09/n100.r09.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2f4acebc6eba5b327a9e5f28180af8519bf9cc675cc8f30778094553935c045b
	sha256:960857c04fadb2725921564cd62211a7464ad9111472618ba27fd6d2f7c81e10
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d843f9bd72b5db49148a17ae02b138cc97c096a0289074017709b3c998ec8896
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s069_output"
	    wget -O "n100.r09.s069_output/n100.r09.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s069_output/n100.r09.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s069_output/n100.r09.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s069_output/n100.r09.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s069_output/n100.r09.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s069_output/n100.r09.s069.reference.fas" "n100.r09.s069_output/n100.r09.s069.fq1.fastq" "n100.r09.s069_output/n100.r09.s069.fq2.fastq" | samtools view -bS - > "n100.r09.s069_output/n100.r09.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s069_output/n100.r09.s069.untrimmed.sorted.bam" "n100.r09.s069_output/n100.r09.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s069_output/n100.r09.s069.untrimmed.sorted.bam" -b "n100.r09.s069_output/n100.r09.s069.primers.bed" -p "n100.r09.s069_output/n100.r09.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" "n100.r09.s069_output/n100.r09.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s069_output/n100.r09.s069.reference.fas" "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" > "n100.r09.s069_output/n100.r09.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s069_output/n100.r09.s069.reference.fas" --call-indels "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" > "n100.r09.s069_output/n100.r09.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" > "n100.r09.s069_output/n100.r09.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s069_output/n100.r09.s069.depth.txt" "n100.r09.s069_output/n100.r09.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s069_output/n100.r09.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s069_output/n100.r09.s069.reference.fas" | bcftools consensus -m "n100.r09.s069_output/n100.r09.s069.low_depth.tsv" tmp.vcf.gz > "n100.r09.s069_output/n100.r09.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task f75b41ab (flow 7f1c060b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:50 scheduler task f75b41ab (flow 7f1c060b): waiting for completion (try 0): started
2021/07/08 17:29:50  ->  n100.r09.s064.Main.out_file 7f1c060b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:50 n100.r09.s064.Main.out_file 7f1c060b n100/r09/n100.r09.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7101e9a4396b80bb20c12aae729b6adfddaff4018356439488aee2981540579e
	sha256:7f1c060bb4ec3f8a9cf515b1406e526990803156f0b829aaba35a9f1039ec25e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f75b41abffddd95b08d269a327f2c2e3bde73e02101974082de8a5c5e9851bad
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s064_output"
	    wget -O "n100.r09.s064_output/n100.r09.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s064_output/n100.r09.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s064_output/n100.r09.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s064_output/n100.r09.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s064_output/n100.r09.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s064_output/n100.r09.s064.reference.fas" "n100.r09.s064_output/n100.r09.s064.fq1.fastq" "n100.r09.s064_output/n100.r09.s064.fq2.fastq" | samtools view -bS - > "n100.r09.s064_output/n100.r09.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s064_output/n100.r09.s064.untrimmed.sorted.bam" "n100.r09.s064_output/n100.r09.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s064_output/n100.r09.s064.untrimmed.sorted.bam" -b "n100.r09.s064_output/n100.r09.s064.primers.bed" -p "n100.r09.s064_output/n100.r09.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" "n100.r09.s064_output/n100.r09.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s064_output/n100.r09.s064.reference.fas" "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" > "n100.r09.s064_output/n100.r09.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s064_output/n100.r09.s064.reference.fas" --call-indels "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" > "n100.r09.s064_output/n100.r09.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" > "n100.r09.s064_output/n100.r09.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s064_output/n100.r09.s064.depth.txt" "n100.r09.s064_output/n100.r09.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s064_output/n100.r09.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s064_output/n100.r09.s064.reference.fas" | bcftools consensus -m "n100.r09.s064_output/n100.r09.s064.low_depth.tsv" tmp.vcf.gz > "n100.r09.s064_output/n100.r09.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task c3ca00c6 (flow 511c1700): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:50 scheduler task c3ca00c6 (flow 511c1700): waiting for completion (try 0): started
2021/07/08 17:29:50  ->  n100.r09.s073.Main.out_file 511c1700 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:50 n100.r09.s073.Main.out_file 511c1700 n100/r09/n100.r09.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2e27a19e44389f50a96026a311daea9651fb6b7bf9cdba0de5eb2abb398222dc
	sha256:511c17007d7faab2873141917cfece73b7cc05a9d94f8e27b28515b662e734cd
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3ca00c6d10b8fab3d71b3367d9d20699f145cb878d41189967fbb5e20c8eda5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s073_output"
	    wget -O "n100.r09.s073_output/n100.r09.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s073_output/n100.r09.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s073_output/n100.r09.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s073_output/n100.r09.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s073_output/n100.r09.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s073_output/n100.r09.s073.reference.fas" "n100.r09.s073_output/n100.r09.s073.fq1.fastq" "n100.r09.s073_output/n100.r09.s073.fq2.fastq" | samtools view -bS - > "n100.r09.s073_output/n100.r09.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s073_output/n100.r09.s073.untrimmed.sorted.bam" "n100.r09.s073_output/n100.r09.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s073_output/n100.r09.s073.untrimmed.sorted.bam" -b "n100.r09.s073_output/n100.r09.s073.primers.bed" -p "n100.r09.s073_output/n100.r09.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" "n100.r09.s073_output/n100.r09.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s073_output/n100.r09.s073.reference.fas" "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" > "n100.r09.s073_output/n100.r09.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s073_output/n100.r09.s073.reference.fas" --call-indels "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" > "n100.r09.s073_output/n100.r09.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" > "n100.r09.s073_output/n100.r09.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s073_output/n100.r09.s073.depth.txt" "n100.r09.s073_output/n100.r09.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s073_output/n100.r09.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s073_output/n100.r09.s073.reference.fas" | bcftools consensus -m "n100.r09.s073_output/n100.r09.s073.low_depth.tsv" tmp.vcf.gz > "n100.r09.s073_output/n100.r09.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task 8a72f87e (flow 1eb78b40): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:50 scheduler task 8a72f87e (flow 1eb78b40): waiting for completion (try 0): started
2021/07/08 17:29:50  ->  n100.r09.s032.Main.out_file 1eb78b40 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:50 n100.r09.s032.Main.out_file 1eb78b40 n100/r09/n100.r09.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7192d4affb9ca105af91e5f6fd29d5a9a0954a8828ef9e25fb9760734a427ed3
	sha256:1eb78b4090e3946bca0ebd2fe7621906db6b879959472b708275d545482b1331
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a72f87eed16b74502183b00a7035fa25cb125f2ca6b0b060f0916e665b68011
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s032_output"
	    wget -O "n100.r09.s032_output/n100.r09.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s032_output/n100.r09.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s032_output/n100.r09.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s032_output/n100.r09.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s032_output/n100.r09.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s032_output/n100.r09.s032.reference.fas" "n100.r09.s032_output/n100.r09.s032.fq1.fastq" "n100.r09.s032_output/n100.r09.s032.fq2.fastq" | samtools view -bS - > "n100.r09.s032_output/n100.r09.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s032_output/n100.r09.s032.untrimmed.sorted.bam" "n100.r09.s032_output/n100.r09.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s032_output/n100.r09.s032.untrimmed.sorted.bam" -b "n100.r09.s032_output/n100.r09.s032.primers.bed" -p "n100.r09.s032_output/n100.r09.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" "n100.r09.s032_output/n100.r09.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s032_output/n100.r09.s032.reference.fas" "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" > "n100.r09.s032_output/n100.r09.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s032_output/n100.r09.s032.reference.fas" --call-indels "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" > "n100.r09.s032_output/n100.r09.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" > "n100.r09.s032_output/n100.r09.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s032_output/n100.r09.s032.depth.txt" "n100.r09.s032_output/n100.r09.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s032_output/n100.r09.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s032_output/n100.r09.s032.reference.fas" | bcftools consensus -m "n100.r09.s032_output/n100.r09.s032.low_depth.tsv" tmp.vcf.gz > "n100.r09.s032_output/n100.r09.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:50 scheduler task 8cebfe33 (flow 85081685): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:51 scheduler task 8cebfe33 (flow 85081685): waiting for completion (try 0): started
2021/07/08 17:29:51  ->  n100.r09.s085.Main.out_file 85081685 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:51 n100.r09.s085.Main.out_file 85081685 n100/r09/n100.r09.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3fb89f79ae3d495a71ab506691207546f156349afd66c0289cd3495b12310414
	sha256:8508168539b76c3d17846b722eba7871d5b8d180688f375ecae79d6976315606
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8cebfe330b9f82f4969fcd99c93a8d62af45d53f3929fb38515f38bdebd15619
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s085_output"
	    wget -O "n100.r09.s085_output/n100.r09.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s085_output/n100.r09.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s085_output/n100.r09.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s085_output/n100.r09.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s085_output/n100.r09.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s085_output/n100.r09.s085.reference.fas" "n100.r09.s085_output/n100.r09.s085.fq1.fastq" "n100.r09.s085_output/n100.r09.s085.fq2.fastq" | samtools view -bS - > "n100.r09.s085_output/n100.r09.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s085_output/n100.r09.s085.untrimmed.sorted.bam" "n100.r09.s085_output/n100.r09.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s085_output/n100.r09.s085.untrimmed.sorted.bam" -b "n100.r09.s085_output/n100.r09.s085.primers.bed" -p "n100.r09.s085_output/n100.r09.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" "n100.r09.s085_output/n100.r09.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s085_output/n100.r09.s085.reference.fas" "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" > "n100.r09.s085_output/n100.r09.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s085_output/n100.r09.s085.reference.fas" --call-indels "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" > "n100.r09.s085_output/n100.r09.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" > "n100.r09.s085_output/n100.r09.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s085_output/n100.r09.s085.depth.txt" "n100.r09.s085_output/n100.r09.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s085_output/n100.r09.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s085_output/n100.r09.s085.reference.fas" | bcftools consensus -m "n100.r09.s085_output/n100.r09.s085.low_depth.tsv" tmp.vcf.gz > "n100.r09.s085_output/n100.r09.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:51 scheduler task adaa95a9 (flow 48730549): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:51 scheduler task adaa95a9 (flow 48730549): waiting for completion (try 0): started
2021/07/08 17:29:51  ->  n100.r09.s086.Main.out_file 48730549 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:51 n100.r09.s086.Main.out_file 48730549 n100/r09/n100.r09.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a7b3d94e29054087eb43a63bcc726040ffb1cf2cde625809ef93f0afe94c49b
	sha256:4873054939176c1479685c38621984d6242de7fa82e39fcd918da1e78dd27021
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/adaa95a96835abb08f21f8cda85f81951f41c133ed86dd185048c906dd4b5a7d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s086_output"
	    wget -O "n100.r09.s086_output/n100.r09.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s086_output/n100.r09.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s086_output/n100.r09.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s086_output/n100.r09.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s086_output/n100.r09.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s086_output/n100.r09.s086.reference.fas" "n100.r09.s086_output/n100.r09.s086.fq1.fastq" "n100.r09.s086_output/n100.r09.s086.fq2.fastq" | samtools view -bS - > "n100.r09.s086_output/n100.r09.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s086_output/n100.r09.s086.untrimmed.sorted.bam" "n100.r09.s086_output/n100.r09.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s086_output/n100.r09.s086.untrimmed.sorted.bam" -b "n100.r09.s086_output/n100.r09.s086.primers.bed" -p "n100.r09.s086_output/n100.r09.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" "n100.r09.s086_output/n100.r09.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s086_output/n100.r09.s086.reference.fas" "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" > "n100.r09.s086_output/n100.r09.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s086_output/n100.r09.s086.reference.fas" --call-indels "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" > "n100.r09.s086_output/n100.r09.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" > "n100.r09.s086_output/n100.r09.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s086_output/n100.r09.s086.depth.txt" "n100.r09.s086_output/n100.r09.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s086_output/n100.r09.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s086_output/n100.r09.s086.reference.fas" | bcftools consensus -m "n100.r09.s086_output/n100.r09.s086.low_depth.tsv" tmp.vcf.gz > "n100.r09.s086_output/n100.r09.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:51 scheduler task d868dd9b (flow 8715eadd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:51 scheduler task d868dd9b (flow 8715eadd): waiting for completion (try 0): started
2021/07/08 17:29:51  ->  n100.r09.s081.Main.out_file 8715eadd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:51 n100.r09.s081.Main.out_file 8715eadd n100/r09/n100.r09.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e0e6d66086930726f2da3f273fbedec81a6cc203abfdcdfeafbdb9036af4c9c
	sha256:8715eadd8919ef1f5d7ceb49682eedbc0a6480c42d96a920c34c45bebda91b46
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d868dd9b884905f128d670ab2975363ba2f8c11865ee38e13a8283d8b6793500
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s081_output"
	    wget -O "n100.r09.s081_output/n100.r09.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s081_output/n100.r09.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s081_output/n100.r09.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s081_output/n100.r09.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s081_output/n100.r09.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s081_output/n100.r09.s081.reference.fas" "n100.r09.s081_output/n100.r09.s081.fq1.fastq" "n100.r09.s081_output/n100.r09.s081.fq2.fastq" | samtools view -bS - > "n100.r09.s081_output/n100.r09.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s081_output/n100.r09.s081.untrimmed.sorted.bam" "n100.r09.s081_output/n100.r09.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s081_output/n100.r09.s081.untrimmed.sorted.bam" -b "n100.r09.s081_output/n100.r09.s081.primers.bed" -p "n100.r09.s081_output/n100.r09.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" "n100.r09.s081_output/n100.r09.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s081_output/n100.r09.s081.reference.fas" "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" > "n100.r09.s081_output/n100.r09.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s081_output/n100.r09.s081.reference.fas" --call-indels "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" > "n100.r09.s081_output/n100.r09.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" > "n100.r09.s081_output/n100.r09.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s081_output/n100.r09.s081.depth.txt" "n100.r09.s081_output/n100.r09.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s081_output/n100.r09.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s081_output/n100.r09.s081.reference.fas" | bcftools consensus -m "n100.r09.s081_output/n100.r09.s081.low_depth.tsv" tmp.vcf.gz > "n100.r09.s081_output/n100.r09.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:51 scheduler task 0a19571a (flow 36f22554): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:51 scheduler task 0a19571a (flow 36f22554): waiting for completion (try 0): started
2021/07/08 17:29:51  ->  n100.r09.s063.Main.out_file 36f22554 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:51 n100.r09.s063.Main.out_file 36f22554 n100/r09/n100.r09.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ce85c278a26d4337d4154e6876283886591a243087a5c649691a02bb306ba4c
	sha256:36f225542b689269ab1c7912ba88068065f18c1016829380126d1506023f7c46
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a19571ac93d53c3aa72ddd96a4caa5bec558946e9edc5065cebf2d89c8d1939
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s063_output"
	    wget -O "n100.r09.s063_output/n100.r09.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s063_output/n100.r09.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s063_output/n100.r09.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s063_output/n100.r09.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s063_output/n100.r09.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s063_output/n100.r09.s063.reference.fas" "n100.r09.s063_output/n100.r09.s063.fq1.fastq" "n100.r09.s063_output/n100.r09.s063.fq2.fastq" | samtools view -bS - > "n100.r09.s063_output/n100.r09.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s063_output/n100.r09.s063.untrimmed.sorted.bam" "n100.r09.s063_output/n100.r09.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s063_output/n100.r09.s063.untrimmed.sorted.bam" -b "n100.r09.s063_output/n100.r09.s063.primers.bed" -p "n100.r09.s063_output/n100.r09.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" "n100.r09.s063_output/n100.r09.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s063_output/n100.r09.s063.reference.fas" "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" > "n100.r09.s063_output/n100.r09.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s063_output/n100.r09.s063.reference.fas" --call-indels "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" > "n100.r09.s063_output/n100.r09.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" > "n100.r09.s063_output/n100.r09.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s063_output/n100.r09.s063.depth.txt" "n100.r09.s063_output/n100.r09.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s063_output/n100.r09.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s063_output/n100.r09.s063.reference.fas" | bcftools consensus -m "n100.r09.s063_output/n100.r09.s063.low_depth.tsv" tmp.vcf.gz > "n100.r09.s063_output/n100.r09.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:51 scheduler task 3d1fe110 (flow 3e3233db): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:51 scheduler task 3d1fe110 (flow 3e3233db): waiting for completion (try 0): started
2021/07/08 17:29:51  ->  n100.r09.s033.Main.out_file 3e3233db exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:51 n100.r09.s033.Main.out_file 3e3233db n100/r09/n100.r09.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8de54f288ee0f45ce0ae746220e24d5ad955833520a2dc83693ef9130834d090
	sha256:3e3233db4716c1aa51a6dda5bf95fcc85754dc1bb7855deca8324a6021efd8b5
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d1fe11077d69c1462530aa36d815f90d576d276301d4af5af74dc4432736c89
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s033_output"
	    wget -O "n100.r09.s033_output/n100.r09.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s033_output/n100.r09.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s033_output/n100.r09.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s033_output/n100.r09.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s033_output/n100.r09.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s033_output/n100.r09.s033.reference.fas" "n100.r09.s033_output/n100.r09.s033.fq1.fastq" "n100.r09.s033_output/n100.r09.s033.fq2.fastq" | samtools view -bS - > "n100.r09.s033_output/n100.r09.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s033_output/n100.r09.s033.untrimmed.sorted.bam" "n100.r09.s033_output/n100.r09.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s033_output/n100.r09.s033.untrimmed.sorted.bam" -b "n100.r09.s033_output/n100.r09.s033.primers.bed" -p "n100.r09.s033_output/n100.r09.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" "n100.r09.s033_output/n100.r09.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s033_output/n100.r09.s033.reference.fas" "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" > "n100.r09.s033_output/n100.r09.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s033_output/n100.r09.s033.reference.fas" --call-indels "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" > "n100.r09.s033_output/n100.r09.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" > "n100.r09.s033_output/n100.r09.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s033_output/n100.r09.s033.depth.txt" "n100.r09.s033_output/n100.r09.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s033_output/n100.r09.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s033_output/n100.r09.s033.reference.fas" | bcftools consensus -m "n100.r09.s033_output/n100.r09.s033.low_depth.tsv" tmp.vcf.gz > "n100.r09.s033_output/n100.r09.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:51 scheduler task 72711129 (flow ca14132b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:51 scheduler task 72711129 (flow ca14132b): waiting for completion (try 0): started
2021/07/08 17:29:51  ->  n100.r09.s036.Main.out_file ca14132b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:51 n100.r09.s036.Main.out_file ca14132b n100/r09/n100.r09.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:395d7ae097a85d4e549575c5080db8105964725a91d54f1c4b9ff7c69625047b
	sha256:ca14132b79564fc676c54087fe2fbb0f2778a3ebe66edf898ea956ad079c19d8
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/72711129c36e552b7d1191149da811963874d1300ec2ee8cee02091c72f8d3b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s036_output"
	    wget -O "n100.r09.s036_output/n100.r09.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s036_output/n100.r09.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s036_output/n100.r09.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s036_output/n100.r09.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s036_output/n100.r09.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s036_output/n100.r09.s036.reference.fas" "n100.r09.s036_output/n100.r09.s036.fq1.fastq" "n100.r09.s036_output/n100.r09.s036.fq2.fastq" | samtools view -bS - > "n100.r09.s036_output/n100.r09.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s036_output/n100.r09.s036.untrimmed.sorted.bam" "n100.r09.s036_output/n100.r09.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s036_output/n100.r09.s036.untrimmed.sorted.bam" -b "n100.r09.s036_output/n100.r09.s036.primers.bed" -p "n100.r09.s036_output/n100.r09.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" "n100.r09.s036_output/n100.r09.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s036_output/n100.r09.s036.reference.fas" "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" > "n100.r09.s036_output/n100.r09.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s036_output/n100.r09.s036.reference.fas" --call-indels "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" > "n100.r09.s036_output/n100.r09.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" > "n100.r09.s036_output/n100.r09.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s036_output/n100.r09.s036.depth.txt" "n100.r09.s036_output/n100.r09.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s036_output/n100.r09.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s036_output/n100.r09.s036.reference.fas" | bcftools consensus -m "n100.r09.s036_output/n100.r09.s036.low_depth.tsv" tmp.vcf.gz > "n100.r09.s036_output/n100.r09.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:52 scheduler task 6a9c93cc (flow 0e69c9bc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:52 scheduler task 6a9c93cc (flow 0e69c9bc): waiting for completion (try 0): started
2021/07/08 17:29:52  ->  n100.r09.s068.Main.out_file 0e69c9bc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:52 n100.r09.s068.Main.out_file 0e69c9bc n100/r09/n100.r09.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4b4c9f1b8b002ab91d4cdf7921f7a3f7669342c02c0b5c7b58548b79f756781b
	sha256:0e69c9bc61d44eddfe54ef13656becdac5b55bf264d3a613a492e7f49e72258d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a9c93cc631a2bbcccab20f1d753fe44737bb2805d9f3312d27487a2d97b437a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s068_output"
	    wget -O "n100.r09.s068_output/n100.r09.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s068_output/n100.r09.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s068_output/n100.r09.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s068_output/n100.r09.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s068_output/n100.r09.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s068_output/n100.r09.s068.reference.fas" "n100.r09.s068_output/n100.r09.s068.fq1.fastq" "n100.r09.s068_output/n100.r09.s068.fq2.fastq" | samtools view -bS - > "n100.r09.s068_output/n100.r09.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s068_output/n100.r09.s068.untrimmed.sorted.bam" "n100.r09.s068_output/n100.r09.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s068_output/n100.r09.s068.untrimmed.sorted.bam" -b "n100.r09.s068_output/n100.r09.s068.primers.bed" -p "n100.r09.s068_output/n100.r09.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" "n100.r09.s068_output/n100.r09.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s068_output/n100.r09.s068.reference.fas" "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" > "n100.r09.s068_output/n100.r09.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s068_output/n100.r09.s068.reference.fas" --call-indels "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" > "n100.r09.s068_output/n100.r09.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" > "n100.r09.s068_output/n100.r09.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s068_output/n100.r09.s068.depth.txt" "n100.r09.s068_output/n100.r09.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s068_output/n100.r09.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s068_output/n100.r09.s068.reference.fas" | bcftools consensus -m "n100.r09.s068_output/n100.r09.s068.low_depth.tsv" tmp.vcf.gz > "n100.r09.s068_output/n100.r09.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:52 scheduler task 7ef3289f (flow d1e76a3d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:52 scheduler task 7ef3289f (flow d1e76a3d): waiting for completion (try 0): started
2021/07/08 17:29:52  ->  n100.r09.s067.Main.out_file d1e76a3d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:52 n100.r09.s067.Main.out_file d1e76a3d n100/r09/n100.r09.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:be7a48f44d605c740655c13e7456bb3882b224671b426c97a73546c2867d678b
	sha256:d1e76a3d4a961a5e5ac507ae1ef5af9260b070ab9585bf409dca777dd2a742bf
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ef3289fa20942ff1d0af34dffa9245ed48d5e9f77d42e04984143514aba4f07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s067_output"
	    wget -O "n100.r09.s067_output/n100.r09.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s067_output/n100.r09.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s067_output/n100.r09.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s067_output/n100.r09.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s067_output/n100.r09.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s067_output/n100.r09.s067.reference.fas" "n100.r09.s067_output/n100.r09.s067.fq1.fastq" "n100.r09.s067_output/n100.r09.s067.fq2.fastq" | samtools view -bS - > "n100.r09.s067_output/n100.r09.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s067_output/n100.r09.s067.untrimmed.sorted.bam" "n100.r09.s067_output/n100.r09.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s067_output/n100.r09.s067.untrimmed.sorted.bam" -b "n100.r09.s067_output/n100.r09.s067.primers.bed" -p "n100.r09.s067_output/n100.r09.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" "n100.r09.s067_output/n100.r09.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s067_output/n100.r09.s067.reference.fas" "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" > "n100.r09.s067_output/n100.r09.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s067_output/n100.r09.s067.reference.fas" --call-indels "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" > "n100.r09.s067_output/n100.r09.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" > "n100.r09.s067_output/n100.r09.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s067_output/n100.r09.s067.depth.txt" "n100.r09.s067_output/n100.r09.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s067_output/n100.r09.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s067_output/n100.r09.s067.reference.fas" | bcftools consensus -m "n100.r09.s067_output/n100.r09.s067.low_depth.tsv" tmp.vcf.gz > "n100.r09.s067_output/n100.r09.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:52 scheduler task 31dcb46d (flow ca642532): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:52 scheduler task 31dcb46d (flow ca642532): waiting for completion (try 0): started
2021/07/08 17:29:52  ->  n100.r09.s035.Main.out_file ca642532 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:52 n100.r09.s035.Main.out_file ca642532 n100/r09/n100.r09.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a62849a46da1ccb7b7324b9fa27ad75f7abf8ccae376f2c7f14ffc2abdb65dd6
	sha256:ca6425327aad044e40c1b44b776944d0b66f7947676340f25f07eec63d14ad9e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/31dcb46defc141d03be20a3f30eb4cda94f07ecd0a12085ee151c5c83ef381dc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s035_output"
	    wget -O "n100.r09.s035_output/n100.r09.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s035_output/n100.r09.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s035_output/n100.r09.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s035_output/n100.r09.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s035_output/n100.r09.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s035_output/n100.r09.s035.reference.fas" "n100.r09.s035_output/n100.r09.s035.fq1.fastq" "n100.r09.s035_output/n100.r09.s035.fq2.fastq" | samtools view -bS - > "n100.r09.s035_output/n100.r09.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s035_output/n100.r09.s035.untrimmed.sorted.bam" "n100.r09.s035_output/n100.r09.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s035_output/n100.r09.s035.untrimmed.sorted.bam" -b "n100.r09.s035_output/n100.r09.s035.primers.bed" -p "n100.r09.s035_output/n100.r09.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" "n100.r09.s035_output/n100.r09.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s035_output/n100.r09.s035.reference.fas" "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" > "n100.r09.s035_output/n100.r09.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s035_output/n100.r09.s035.reference.fas" --call-indels "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" > "n100.r09.s035_output/n100.r09.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" > "n100.r09.s035_output/n100.r09.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s035_output/n100.r09.s035.depth.txt" "n100.r09.s035_output/n100.r09.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s035_output/n100.r09.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s035_output/n100.r09.s035.reference.fas" | bcftools consensus -m "n100.r09.s035_output/n100.r09.s035.low_depth.tsv" tmp.vcf.gz > "n100.r09.s035_output/n100.r09.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:52 scheduler task a9d54835 (flow 462eab90): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:52 scheduler task a9d54835 (flow 462eab90): waiting for completion (try 0): started
2021/07/08 17:29:52  ->  n100.r09.s053.Main.out_file 462eab90 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:52 n100.r09.s053.Main.out_file 462eab90 n100/r09/n100.r09.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d6a6672c5edf3824a6bb8f930a656ce3cc585e7df336eae3c6cfe75f247c3118
	sha256:462eab9009a74c49e0b295515b1e88df52a56b743bca320b8c8e86a9e4ed5b21
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a9d548350ba5d904f6ff215e1c02abc4365705b1025699d24b6ab7d4b369573d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s053_output"
	    wget -O "n100.r09.s053_output/n100.r09.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s053_output/n100.r09.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s053_output/n100.r09.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s053_output/n100.r09.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s053_output/n100.r09.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s053_output/n100.r09.s053.reference.fas" "n100.r09.s053_output/n100.r09.s053.fq1.fastq" "n100.r09.s053_output/n100.r09.s053.fq2.fastq" | samtools view -bS - > "n100.r09.s053_output/n100.r09.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s053_output/n100.r09.s053.untrimmed.sorted.bam" "n100.r09.s053_output/n100.r09.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s053_output/n100.r09.s053.untrimmed.sorted.bam" -b "n100.r09.s053_output/n100.r09.s053.primers.bed" -p "n100.r09.s053_output/n100.r09.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" "n100.r09.s053_output/n100.r09.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s053_output/n100.r09.s053.reference.fas" "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" > "n100.r09.s053_output/n100.r09.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s053_output/n100.r09.s053.reference.fas" --call-indels "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" > "n100.r09.s053_output/n100.r09.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" > "n100.r09.s053_output/n100.r09.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s053_output/n100.r09.s053.depth.txt" "n100.r09.s053_output/n100.r09.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s053_output/n100.r09.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s053_output/n100.r09.s053.reference.fas" | bcftools consensus -m "n100.r09.s053_output/n100.r09.s053.low_depth.tsv" tmp.vcf.gz > "n100.r09.s053_output/n100.r09.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:52 scheduler task 0f528024 (flow ed8c06bc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:52 scheduler task 0f528024 (flow ed8c06bc): waiting for completion (try 0): started
2021/07/08 17:29:52  ->  n100.r09.s041.Main.out_file ed8c06bc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:52 n100.r09.s041.Main.out_file ed8c06bc n100/r09/n100.r09.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db50e9c93cfa5929530a6f73610df2692a83f2aee2d2be2074532ae4714e4200
	sha256:ed8c06bcc1046e2d0d5f15959f5dcc679e833f17468dc6100467acdccde40e73
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0f528024724a28c1254076b55986a2264b63f06c204c6007dd50fb40e99781e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s041_output"
	    wget -O "n100.r09.s041_output/n100.r09.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s041_output/n100.r09.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s041_output/n100.r09.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s041_output/n100.r09.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s041_output/n100.r09.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s041_output/n100.r09.s041.reference.fas" "n100.r09.s041_output/n100.r09.s041.fq1.fastq" "n100.r09.s041_output/n100.r09.s041.fq2.fastq" | samtools view -bS - > "n100.r09.s041_output/n100.r09.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s041_output/n100.r09.s041.untrimmed.sorted.bam" "n100.r09.s041_output/n100.r09.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s041_output/n100.r09.s041.untrimmed.sorted.bam" -b "n100.r09.s041_output/n100.r09.s041.primers.bed" -p "n100.r09.s041_output/n100.r09.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" "n100.r09.s041_output/n100.r09.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s041_output/n100.r09.s041.reference.fas" "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" > "n100.r09.s041_output/n100.r09.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s041_output/n100.r09.s041.reference.fas" --call-indels "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" > "n100.r09.s041_output/n100.r09.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" > "n100.r09.s041_output/n100.r09.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s041_output/n100.r09.s041.depth.txt" "n100.r09.s041_output/n100.r09.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s041_output/n100.r09.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s041_output/n100.r09.s041.reference.fas" | bcftools consensus -m "n100.r09.s041_output/n100.r09.s041.low_depth.tsv" tmp.vcf.gz > "n100.r09.s041_output/n100.r09.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:52 scheduler task 301872db (flow f4514b15): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:52 scheduler task 301872db (flow f4514b15): waiting for completion (try 0): started
2021/07/08 17:29:52  ->  n100.r09.s010.Main.out_file f4514b15 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:52 n100.r09.s010.Main.out_file f4514b15 n100/r09/n100.r09.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:461a3d7f9365f29b4618c4ac95703fb5fbfa47fec8b9f4d9eee159173b482dc0
	sha256:f4514b150b9f839c9a3420687979793840785e34d7842d9050e0af198c63fd4e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/301872dbaeecdff5bef47177c3bf3fd2c6cea5e549e768410f3e45b16bfea6a1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s010_output"
	    wget -O "n100.r09.s010_output/n100.r09.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s010_output/n100.r09.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s010_output/n100.r09.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s010_output/n100.r09.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s010_output/n100.r09.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s010_output/n100.r09.s010.reference.fas" "n100.r09.s010_output/n100.r09.s010.fq1.fastq" "n100.r09.s010_output/n100.r09.s010.fq2.fastq" | samtools view -bS - > "n100.r09.s010_output/n100.r09.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s010_output/n100.r09.s010.untrimmed.sorted.bam" "n100.r09.s010_output/n100.r09.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s010_output/n100.r09.s010.untrimmed.sorted.bam" -b "n100.r09.s010_output/n100.r09.s010.primers.bed" -p "n100.r09.s010_output/n100.r09.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" "n100.r09.s010_output/n100.r09.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s010_output/n100.r09.s010.reference.fas" "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" > "n100.r09.s010_output/n100.r09.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s010_output/n100.r09.s010.reference.fas" --call-indels "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" > "n100.r09.s010_output/n100.r09.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" > "n100.r09.s010_output/n100.r09.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s010_output/n100.r09.s010.depth.txt" "n100.r09.s010_output/n100.r09.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s010_output/n100.r09.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s010_output/n100.r09.s010.reference.fas" | bcftools consensus -m "n100.r09.s010_output/n100.r09.s010.low_depth.tsv" tmp.vcf.gz > "n100.r09.s010_output/n100.r09.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task 97158a03 (flow 61535a0d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:53 scheduler task 97158a03 (flow 61535a0d): waiting for completion (try 0): started
2021/07/08 17:29:53  ->  n100.r09.s091.Main.out_file 61535a0d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:53 n100.r09.s091.Main.out_file 61535a0d n100/r09/n100.r09.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23bfd221cfb5bb9a80180818f2950183d02b07df1d9415ecd2ca4ee753e56dfb
	sha256:61535a0dba51d12f8ac5c0ca9527fcdff85a0b133382ea66dc9ce786c8a1cacb
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97158a033567c7489c416a95b45ee8f41d40b3a56cf92d73d1ae50c5ef12c721
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s091_output"
	    wget -O "n100.r09.s091_output/n100.r09.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s091_output/n100.r09.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s091_output/n100.r09.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s091_output/n100.r09.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s091_output/n100.r09.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s091_output/n100.r09.s091.reference.fas" "n100.r09.s091_output/n100.r09.s091.fq1.fastq" "n100.r09.s091_output/n100.r09.s091.fq2.fastq" | samtools view -bS - > "n100.r09.s091_output/n100.r09.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s091_output/n100.r09.s091.untrimmed.sorted.bam" "n100.r09.s091_output/n100.r09.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s091_output/n100.r09.s091.untrimmed.sorted.bam" -b "n100.r09.s091_output/n100.r09.s091.primers.bed" -p "n100.r09.s091_output/n100.r09.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" "n100.r09.s091_output/n100.r09.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s091_output/n100.r09.s091.reference.fas" "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" > "n100.r09.s091_output/n100.r09.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s091_output/n100.r09.s091.reference.fas" --call-indels "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" > "n100.r09.s091_output/n100.r09.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" > "n100.r09.s091_output/n100.r09.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s091_output/n100.r09.s091.depth.txt" "n100.r09.s091_output/n100.r09.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s091_output/n100.r09.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s091_output/n100.r09.s091.reference.fas" | bcftools consensus -m "n100.r09.s091_output/n100.r09.s091.low_depth.tsv" tmp.vcf.gz > "n100.r09.s091_output/n100.r09.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task a81322e0 (flow 03205e45): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:53 scheduler task a81322e0 (flow 03205e45): waiting for completion (try 0): started
2021/07/08 17:29:53  ->  n100.r09.s080.Main.out_file 03205e45 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:53 n100.r09.s080.Main.out_file 03205e45 n100/r09/n100.r09.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d518bdcb7d75ee7cee6a0b85c8acd0d14ff32a960aabed00d77b01b4eee5f63
	sha256:03205e45ad2338db72ea9b7d7293af8f33410d3a19e54f2b15a271cd2a435697
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a81322e0b5d699ebedcef83984de51e5d8e9b49ba917aae7b3e50e6735d8f054
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s080_output"
	    wget -O "n100.r09.s080_output/n100.r09.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s080_output/n100.r09.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s080_output/n100.r09.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s080_output/n100.r09.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s080_output/n100.r09.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s080_output/n100.r09.s080.reference.fas" "n100.r09.s080_output/n100.r09.s080.fq1.fastq" "n100.r09.s080_output/n100.r09.s080.fq2.fastq" | samtools view -bS - > "n100.r09.s080_output/n100.r09.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s080_output/n100.r09.s080.untrimmed.sorted.bam" "n100.r09.s080_output/n100.r09.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s080_output/n100.r09.s080.untrimmed.sorted.bam" -b "n100.r09.s080_output/n100.r09.s080.primers.bed" -p "n100.r09.s080_output/n100.r09.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" "n100.r09.s080_output/n100.r09.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s080_output/n100.r09.s080.reference.fas" "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" > "n100.r09.s080_output/n100.r09.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s080_output/n100.r09.s080.reference.fas" --call-indels "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" > "n100.r09.s080_output/n100.r09.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" > "n100.r09.s080_output/n100.r09.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s080_output/n100.r09.s080.depth.txt" "n100.r09.s080_output/n100.r09.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s080_output/n100.r09.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s080_output/n100.r09.s080.reference.fas" | bcftools consensus -m "n100.r09.s080_output/n100.r09.s080.low_depth.tsv" tmp.vcf.gz > "n100.r09.s080_output/n100.r09.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task 339efe72 (flow ac3f4213): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:53 scheduler task 339efe72 (flow ac3f4213): waiting for completion (try 0): started
2021/07/08 17:29:53  ->  n100.r09.s015.Main.out_file ac3f4213 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:53 n100.r09.s015.Main.out_file ac3f4213 n100/r09/n100.r09.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d1b020f1befb27e46f44d4efde0d0f8f9f55672afdf21d9a50e9cef6f8f7f062
	sha256:ac3f42137022fcf9abce7b8b280878a88eebfe51cfd40cf1c87e4f89a71a9968
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/339efe72c0d6662ee79ccd9acef8dd7707d6cfb93f0fb1013b86569455d8159d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s015_output"
	    wget -O "n100.r09.s015_output/n100.r09.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s015_output/n100.r09.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s015_output/n100.r09.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s015_output/n100.r09.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s015_output/n100.r09.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s015_output/n100.r09.s015.reference.fas" "n100.r09.s015_output/n100.r09.s015.fq1.fastq" "n100.r09.s015_output/n100.r09.s015.fq2.fastq" | samtools view -bS - > "n100.r09.s015_output/n100.r09.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s015_output/n100.r09.s015.untrimmed.sorted.bam" "n100.r09.s015_output/n100.r09.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s015_output/n100.r09.s015.untrimmed.sorted.bam" -b "n100.r09.s015_output/n100.r09.s015.primers.bed" -p "n100.r09.s015_output/n100.r09.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" "n100.r09.s015_output/n100.r09.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s015_output/n100.r09.s015.reference.fas" "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" > "n100.r09.s015_output/n100.r09.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s015_output/n100.r09.s015.reference.fas" --call-indels "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" > "n100.r09.s015_output/n100.r09.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" > "n100.r09.s015_output/n100.r09.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s015_output/n100.r09.s015.depth.txt" "n100.r09.s015_output/n100.r09.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s015_output/n100.r09.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s015_output/n100.r09.s015.reference.fas" | bcftools consensus -m "n100.r09.s015_output/n100.r09.s015.low_depth.tsv" tmp.vcf.gz > "n100.r09.s015_output/n100.r09.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task b49db477 (flow 591b29d1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:53 scheduler task b49db477 (flow 591b29d1): waiting for completion (try 0): started
2021/07/08 17:29:53  ->  n100.r09.s066.Main.out_file 591b29d1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:53 n100.r09.s066.Main.out_file 591b29d1 n100/r09/n100.r09.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f43adef55690780ef4d760276e74fa4dde6adb3d469f913a3336b4814517e720
	sha256:591b29d1019a0a117cd3fa71d4084a75a70b1ed2ea14c0e80f89266dc811b5df
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b49db47754c6e68207d6df7905a4abdbd30b46bb4b780cde4d92747175c85221
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s066_output"
	    wget -O "n100.r09.s066_output/n100.r09.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s066_output/n100.r09.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s066_output/n100.r09.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s066_output/n100.r09.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s066_output/n100.r09.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s066_output/n100.r09.s066.reference.fas" "n100.r09.s066_output/n100.r09.s066.fq1.fastq" "n100.r09.s066_output/n100.r09.s066.fq2.fastq" | samtools view -bS - > "n100.r09.s066_output/n100.r09.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s066_output/n100.r09.s066.untrimmed.sorted.bam" "n100.r09.s066_output/n100.r09.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s066_output/n100.r09.s066.untrimmed.sorted.bam" -b "n100.r09.s066_output/n100.r09.s066.primers.bed" -p "n100.r09.s066_output/n100.r09.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" "n100.r09.s066_output/n100.r09.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s066_output/n100.r09.s066.reference.fas" "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" > "n100.r09.s066_output/n100.r09.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s066_output/n100.r09.s066.reference.fas" --call-indels "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" > "n100.r09.s066_output/n100.r09.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" > "n100.r09.s066_output/n100.r09.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s066_output/n100.r09.s066.depth.txt" "n100.r09.s066_output/n100.r09.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s066_output/n100.r09.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s066_output/n100.r09.s066.reference.fas" | bcftools consensus -m "n100.r09.s066_output/n100.r09.s066.low_depth.tsv" tmp.vcf.gz > "n100.r09.s066_output/n100.r09.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task c61cb881 (flow 380dcf18): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:53 scheduler task c61cb881 (flow 380dcf18): waiting for completion (try 0): started
2021/07/08 17:29:53  ->  n100.r09.s001.Main.out_file 380dcf18 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:53 n100.r09.s001.Main.out_file 380dcf18 n100/r09/n100.r09.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2d54d56d79d738be22c89f051186007cb341ee3fec87f00b47470fba4b70765a
	sha256:380dcf18336f84b146739a1e3fc21614b1ea3bb8fe8e9930952920e369f40d4c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c61cb88160e1e6af83b619245118da14c5745e89921de5af67eee546a6fa7912
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s001_output"
	    wget -O "n100.r09.s001_output/n100.r09.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s001_output/n100.r09.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s001_output/n100.r09.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s001_output/n100.r09.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s001_output/n100.r09.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s001_output/n100.r09.s001.reference.fas" "n100.r09.s001_output/n100.r09.s001.fq1.fastq" "n100.r09.s001_output/n100.r09.s001.fq2.fastq" | samtools view -bS - > "n100.r09.s001_output/n100.r09.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s001_output/n100.r09.s001.untrimmed.sorted.bam" "n100.r09.s001_output/n100.r09.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s001_output/n100.r09.s001.untrimmed.sorted.bam" -b "n100.r09.s001_output/n100.r09.s001.primers.bed" -p "n100.r09.s001_output/n100.r09.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" "n100.r09.s001_output/n100.r09.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s001_output/n100.r09.s001.reference.fas" "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" > "n100.r09.s001_output/n100.r09.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s001_output/n100.r09.s001.reference.fas" --call-indels "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" > "n100.r09.s001_output/n100.r09.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" > "n100.r09.s001_output/n100.r09.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s001_output/n100.r09.s001.depth.txt" "n100.r09.s001_output/n100.r09.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s001_output/n100.r09.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s001_output/n100.r09.s001.reference.fas" | bcftools consensus -m "n100.r09.s001_output/n100.r09.s001.low_depth.tsv" tmp.vcf.gz > "n100.r09.s001_output/n100.r09.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task 6dd29d24 (flow 3e29d10c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:53 scheduler task 6dd29d24 (flow 3e29d10c): waiting for completion (try 0): started
2021/07/08 17:29:53  ->  n100.r09.s051.Main.out_file 3e29d10c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:53 n100.r09.s051.Main.out_file 3e29d10c n100/r09/n100.r09.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bffe61954efee1a96307351171e637a5b3216c33b5ebe8dd34d554e3e550652a
	sha256:3e29d10c5b3869833899166aabfd3fc3d47558f848727c4657af00326210bf0f
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6dd29d24fe1a8d10235dcd7f87692e1f120009691b645166b1871aff55e525bc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s051_output"
	    wget -O "n100.r09.s051_output/n100.r09.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s051_output/n100.r09.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s051_output/n100.r09.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s051_output/n100.r09.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s051_output/n100.r09.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s051_output/n100.r09.s051.reference.fas" "n100.r09.s051_output/n100.r09.s051.fq1.fastq" "n100.r09.s051_output/n100.r09.s051.fq2.fastq" | samtools view -bS - > "n100.r09.s051_output/n100.r09.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s051_output/n100.r09.s051.untrimmed.sorted.bam" "n100.r09.s051_output/n100.r09.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s051_output/n100.r09.s051.untrimmed.sorted.bam" -b "n100.r09.s051_output/n100.r09.s051.primers.bed" -p "n100.r09.s051_output/n100.r09.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" "n100.r09.s051_output/n100.r09.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s051_output/n100.r09.s051.reference.fas" "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" > "n100.r09.s051_output/n100.r09.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s051_output/n100.r09.s051.reference.fas" --call-indels "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" > "n100.r09.s051_output/n100.r09.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" > "n100.r09.s051_output/n100.r09.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s051_output/n100.r09.s051.depth.txt" "n100.r09.s051_output/n100.r09.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s051_output/n100.r09.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s051_output/n100.r09.s051.reference.fas" | bcftools consensus -m "n100.r09.s051_output/n100.r09.s051.low_depth.tsv" tmp.vcf.gz > "n100.r09.s051_output/n100.r09.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:53 scheduler task 4dd42029 (flow 3d6d80a3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:54 scheduler task 4dd42029 (flow 3d6d80a3): waiting for completion (try 0): started
2021/07/08 17:29:54  ->  n100.r09.s042.Main.out_file 3d6d80a3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:54 n100.r09.s042.Main.out_file 3d6d80a3 n100/r09/n100.r09.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b856a40ce2e9fcd76425112fbafff45692618f545fa7a9250dba6d53679dc873
	sha256:3d6d80a38e1984db294df09b6f1c98e33cce8e1ce1c890097eec85c7cac82858
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4dd42029964da3f133dc94fdc5c2a573daee6ad3935fc93cfc3fd4ae7f389c4c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s042_output"
	    wget -O "n100.r09.s042_output/n100.r09.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s042_output/n100.r09.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s042_output/n100.r09.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s042_output/n100.r09.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s042_output/n100.r09.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s042_output/n100.r09.s042.reference.fas" "n100.r09.s042_output/n100.r09.s042.fq1.fastq" "n100.r09.s042_output/n100.r09.s042.fq2.fastq" | samtools view -bS - > "n100.r09.s042_output/n100.r09.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s042_output/n100.r09.s042.untrimmed.sorted.bam" "n100.r09.s042_output/n100.r09.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s042_output/n100.r09.s042.untrimmed.sorted.bam" -b "n100.r09.s042_output/n100.r09.s042.primers.bed" -p "n100.r09.s042_output/n100.r09.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" "n100.r09.s042_output/n100.r09.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s042_output/n100.r09.s042.reference.fas" "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" > "n100.r09.s042_output/n100.r09.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s042_output/n100.r09.s042.reference.fas" --call-indels "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" > "n100.r09.s042_output/n100.r09.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" > "n100.r09.s042_output/n100.r09.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s042_output/n100.r09.s042.depth.txt" "n100.r09.s042_output/n100.r09.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s042_output/n100.r09.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s042_output/n100.r09.s042.reference.fas" | bcftools consensus -m "n100.r09.s042_output/n100.r09.s042.low_depth.tsv" tmp.vcf.gz > "n100.r09.s042_output/n100.r09.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:54 scheduler task a4988c18 (flow e8b23611): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:54 scheduler task a4988c18 (flow e8b23611): waiting for completion (try 0): started
2021/07/08 17:29:54  ->  n100.r09.s044.Main.out_file e8b23611 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:54 n100.r09.s044.Main.out_file e8b23611 n100/r09/n100.r09.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c6555d548bca1a8cbfc85bdb951e695af37a8e4caba8edd8cd5a76487e01d19b
	sha256:e8b2361196a70d53f13743225de089edfe3403abe913e09bd26975922cb2ec55
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a4988c18e50f052898fe8ce4bcd7987cfe371149b69d4b16bd9443989df0c41f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s044_output"
	    wget -O "n100.r09.s044_output/n100.r09.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s044_output/n100.r09.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s044_output/n100.r09.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s044_output/n100.r09.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s044_output/n100.r09.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s044_output/n100.r09.s044.reference.fas" "n100.r09.s044_output/n100.r09.s044.fq1.fastq" "n100.r09.s044_output/n100.r09.s044.fq2.fastq" | samtools view -bS - > "n100.r09.s044_output/n100.r09.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s044_output/n100.r09.s044.untrimmed.sorted.bam" "n100.r09.s044_output/n100.r09.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s044_output/n100.r09.s044.untrimmed.sorted.bam" -b "n100.r09.s044_output/n100.r09.s044.primers.bed" -p "n100.r09.s044_output/n100.r09.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" "n100.r09.s044_output/n100.r09.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s044_output/n100.r09.s044.reference.fas" "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" > "n100.r09.s044_output/n100.r09.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s044_output/n100.r09.s044.reference.fas" --call-indels "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" > "n100.r09.s044_output/n100.r09.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" > "n100.r09.s044_output/n100.r09.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s044_output/n100.r09.s044.depth.txt" "n100.r09.s044_output/n100.r09.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s044_output/n100.r09.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s044_output/n100.r09.s044.reference.fas" | bcftools consensus -m "n100.r09.s044_output/n100.r09.s044.low_depth.tsv" tmp.vcf.gz > "n100.r09.s044_output/n100.r09.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:54 scheduler task c8bedcb7 (flow 89fd3d0f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:54 scheduler task c8bedcb7 (flow 89fd3d0f): waiting for completion (try 0): started
2021/07/08 17:29:54  ->  n100.r09.s084.Main.out_file 89fd3d0f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:54 n100.r09.s084.Main.out_file 89fd3d0f n100/r09/n100.r09.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:53b5faf5bf4eacd11dc1198c15dcb5525477215ccdf937c3cf94dfa49ae6e8e4
	sha256:89fd3d0f36f6fb2dc08e9e1b3c5b5098a6273ff68787d6d094d7e94a552e269d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c8bedcb7c86d1615a9e18b5d352d10ce68e71380d622830e402ceb10faa12e22
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s084_output"
	    wget -O "n100.r09.s084_output/n100.r09.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s084_output/n100.r09.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s084_output/n100.r09.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s084_output/n100.r09.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s084_output/n100.r09.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s084_output/n100.r09.s084.reference.fas" "n100.r09.s084_output/n100.r09.s084.fq1.fastq" "n100.r09.s084_output/n100.r09.s084.fq2.fastq" | samtools view -bS - > "n100.r09.s084_output/n100.r09.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s084_output/n100.r09.s084.untrimmed.sorted.bam" "n100.r09.s084_output/n100.r09.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s084_output/n100.r09.s084.untrimmed.sorted.bam" -b "n100.r09.s084_output/n100.r09.s084.primers.bed" -p "n100.r09.s084_output/n100.r09.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" "n100.r09.s084_output/n100.r09.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s084_output/n100.r09.s084.reference.fas" "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" > "n100.r09.s084_output/n100.r09.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s084_output/n100.r09.s084.reference.fas" --call-indels "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" > "n100.r09.s084_output/n100.r09.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" > "n100.r09.s084_output/n100.r09.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s084_output/n100.r09.s084.depth.txt" "n100.r09.s084_output/n100.r09.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s084_output/n100.r09.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s084_output/n100.r09.s084.reference.fas" | bcftools consensus -m "n100.r09.s084_output/n100.r09.s084.low_depth.tsv" tmp.vcf.gz > "n100.r09.s084_output/n100.r09.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:54 scheduler task 67bedddd (flow cb1ce740): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:54 scheduler task 67bedddd (flow cb1ce740): waiting for completion (try 0): started
2021/07/08 17:29:54  ->  n100.r09.s009.Main.out_file cb1ce740 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:54 n100.r09.s009.Main.out_file cb1ce740 n100/r09/n100.r09.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:811b90ce0dcc1f8bacb107b0f5e8abe5e82b2b288510656613a09ae05d215b2c
	sha256:cb1ce7401b4399934f5abba4c61433c3da2ac0f8805ae67069cbd4d92f0847b0
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67beddddc91afe4fac5eb35b9f63a9f025d6a18749b35da18457ad7f1adc5d24
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s009_output"
	    wget -O "n100.r09.s009_output/n100.r09.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s009_output/n100.r09.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s009_output/n100.r09.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s009_output/n100.r09.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s009_output/n100.r09.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s009_output/n100.r09.s009.reference.fas" "n100.r09.s009_output/n100.r09.s009.fq1.fastq" "n100.r09.s009_output/n100.r09.s009.fq2.fastq" | samtools view -bS - > "n100.r09.s009_output/n100.r09.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s009_output/n100.r09.s009.untrimmed.sorted.bam" "n100.r09.s009_output/n100.r09.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s009_output/n100.r09.s009.untrimmed.sorted.bam" -b "n100.r09.s009_output/n100.r09.s009.primers.bed" -p "n100.r09.s009_output/n100.r09.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" "n100.r09.s009_output/n100.r09.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s009_output/n100.r09.s009.reference.fas" "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" > "n100.r09.s009_output/n100.r09.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s009_output/n100.r09.s009.reference.fas" --call-indels "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" > "n100.r09.s009_output/n100.r09.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" > "n100.r09.s009_output/n100.r09.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s009_output/n100.r09.s009.depth.txt" "n100.r09.s009_output/n100.r09.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s009_output/n100.r09.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s009_output/n100.r09.s009.reference.fas" | bcftools consensus -m "n100.r09.s009_output/n100.r09.s009.low_depth.tsv" tmp.vcf.gz > "n100.r09.s009_output/n100.r09.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:29:54 scheduler task a96b1313 (flow 2b827096): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:29:54 scheduler task a96b1313 (flow 2b827096): waiting for completion (try 0): started
2021/07/08 17:29:54  ->  n100.r09.s097.Main.out_file 2b827096 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:29:54 n100.r09.s097.Main.out_file 2b827096 n100/r09/n100.r09.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:eb8fffeb9be1589634d2efe105f4c71688232ba44965ce977a0a2360caac7bed
	sha256:2b82709623abd51e05f2f45dc34d5d14167358ee4a24b7e6dd2c680956d172e0
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a96b1313e764a8ce0e38da78df2e656d446d6a2d83d528d4fe6558b49bb2b2ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s097_output"
	    wget -O "n100.r09.s097_output/n100.r09.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s097_output/n100.r09.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s097_output/n100.r09.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s097_output/n100.r09.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s097_output/n100.r09.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s097_output/n100.r09.s097.reference.fas" "n100.r09.s097_output/n100.r09.s097.fq1.fastq" "n100.r09.s097_output/n100.r09.s097.fq2.fastq" | samtools view -bS - > "n100.r09.s097_output/n100.r09.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s097_output/n100.r09.s097.untrimmed.sorted.bam" "n100.r09.s097_output/n100.r09.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s097_output/n100.r09.s097.untrimmed.sorted.bam" -b "n100.r09.s097_output/n100.r09.s097.primers.bed" -p "n100.r09.s097_output/n100.r09.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" "n100.r09.s097_output/n100.r09.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s097_output/n100.r09.s097.reference.fas" "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" > "n100.r09.s097_output/n100.r09.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s097_output/n100.r09.s097.reference.fas" --call-indels "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" > "n100.r09.s097_output/n100.r09.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" > "n100.r09.s097_output/n100.r09.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s097_output/n100.r09.s097.depth.txt" "n100.r09.s097_output/n100.r09.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s097_output/n100.r09.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s097_output/n100.r09.s097.reference.fas" | bcftools consensus -m "n100.r09.s097_output/n100.r09.s097.low_depth.tsv" tmp.vcf.gz > "n100.r09.s097_output/n100.r09.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): promoting objects (try 0): started
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): retrieving diagnostic output (try 0): started
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): retrieving result (try 0): started
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:33:50 scheduler task 4e39b363 (flow 2cf75932): transferring output (try 0): started
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): transferring output (try 0): successful, next state: unloading
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloading (try 0): started
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloading val<.=320f4429 35.4MiB>
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloading val<.=6e751ba1 35.4MiB>
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloading list<val<.=90f81b84 35.7MiB> 35.7MiB>
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloaded list<val<.=90f81b84 35.7MiB> 35.7MiB>
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloaded val<.=320f4429 35.4MiB>
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloaded val<.=6e751ba1 35.4MiB>
2021/07/08 17:33:52 scheduler task 4e39b363 (flow 2cf75932): unloading (try 0): successful, next state: complete
2021/07/08 17:33:52  <-  n100.r09.s012.Main.out_file 2cf75932 ok     exec 3m54s 35.7MiB
2021/07/08 17:33:52 n100.r09.s012.Main.out_file 2cf75932 n100/r09/n100.r09.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:987fb6f61f52ad6c18d441560452a56f5aedc4f0d5ef6acdae10b1c0608dd65d
	sha256:2cf75932a7dca854ae5f19d7ae67f65f1e5bea5a3ec8dfe53219f43626bd496d
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e39b363989f40189c6db87384760645c85f8d138e39945d2aaee1e5b19eab5b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s012_output"
	    wget -O "n100.r09.s012_output/n100.r09.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s012_output/n100.r09.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s012_output/n100.r09.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s012_output/n100.r09.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s012_output/n100.r09.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s012_output/n100.r09.s012.reference.fas" "n100.r09.s012_output/n100.r09.s012.fq1.fastq" "n100.r09.s012_output/n100.r09.s012.fq2.fastq" | samtools view -bS - > "n100.r09.s012_output/n100.r09.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s012_output/n100.r09.s012.untrimmed.sorted.bam" "n100.r09.s012_output/n100.r09.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s012_output/n100.r09.s012.untrimmed.sorted.bam" -b "n100.r09.s012_output/n100.r09.s012.primers.bed" -p "n100.r09.s012_output/n100.r09.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" "n100.r09.s012_output/n100.r09.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s012_output/n100.r09.s012.reference.fas" "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" > "n100.r09.s012_output/n100.r09.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s012_output/n100.r09.s012.reference.fas" --call-indels "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" > "n100.r09.s012_output/n100.r09.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s012_output/n100.r09.s012.trimmed.sorted.bam" > "n100.r09.s012_output/n100.r09.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s012_output/n100.r09.s012.depth.txt" "n100.r09.s012_output/n100.r09.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s012_output/n100.r09.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s012_output/n100.r09.s012.reference.fas" | bcftools consensus -m "n100.r09.s012_output/n100.r09.s012.low_depth.tsv" tmp.vcf.gz > "n100.r09.s012_output/n100.r09.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:90f81b846e21f06741288bd612f72ac1697aa207cc0a6abb4541bbbc5662bca4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.3MiB max=126.8MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=261B max=1.0KiB
2021/07/08 17:33:52 scheduler task b2ca911f (flow 8d72a029): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s012.tar.gz resources {}
2021/07/08 17:33:52  ->  n100.r09.s012.Main.cp_out_file 8d72a029 exec extern s3://niema-test/n100/r09/n100.r09.s012.tar.gz 35.7MiB
2021/07/08 17:33:53 scheduler task b2ca911f (flow 8d72a029): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:90f81b846e21f06741288bd612f72ac1697aa207cc0a6abb4541bbbc5662bca4 -> s3://niema-test/n100/r09/n100.r09.s012.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:33:53  <-  n100.r09.s012.Main.cp_out_file 8d72a029 ok   extern 0s 35.7MiB
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): promoting objects (try 0): started
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): promoting objects (try 0): started
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): retrieving diagnostic output (try 0): started
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): retrieving diagnostic output (try 0): started
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): retrieving result (try 0): started
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): retrieving result (try 0): started
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:33:53 scheduler task b29faaca (flow 74146abc): transferring output (try 0): started
2021/07/08 17:33:53 scheduler task 7f57889b (flow bbdb3d14): transferring output (try 0): started
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloading (try 0): started
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloading list<val<.=7b673a0e 35.7MiB> 35.7MiB>
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloading val<.=aead15e4 35.4MiB>
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloading val<.=2690dda7 35.4MiB>
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): transferring output (try 0): successful, next state: unloading
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloading (try 0): started
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloading list<val<.=9eea6e56 35.7MiB> 35.7MiB>
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloading val<.=2b7dece3 35.4MiB>
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloading val<.=03d5405c 35.4MiB>
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloaded list<val<.=7b673a0e 35.7MiB> 35.7MiB>
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloaded val<.=2690dda7 35.4MiB>
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloaded val<.=aead15e4 35.4MiB>
2021/07/08 17:33:54 scheduler task b29faaca (flow 74146abc): unloading (try 0): successful, next state: complete
2021/07/08 17:33:54  <-  n100.r09.s040.Main.out_file 74146abc ok     exec 3m57s 35.7MiB
2021/07/08 17:33:54 n100.r09.s040.Main.out_file 74146abc n100/r09/n100.r09.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:015816e307064e679fb352c41a114d44fbe8fb6844eec4b1045a2a49d7167356
	sha256:74146abcf2b65f5da1a8e2b63c0dd2feed85230e649da325a8dc434c20073156
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b29faacaab21c8bd240a967dcb0fd0a17f351043b7f196558855bec62fa89e70
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s040_output"
	    wget -O "n100.r09.s040_output/n100.r09.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s040_output/n100.r09.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s040_output/n100.r09.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s040_output/n100.r09.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s040_output/n100.r09.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s040_output/n100.r09.s040.reference.fas" "n100.r09.s040_output/n100.r09.s040.fq1.fastq" "n100.r09.s040_output/n100.r09.s040.fq2.fastq" | samtools view -bS - > "n100.r09.s040_output/n100.r09.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s040_output/n100.r09.s040.untrimmed.sorted.bam" "n100.r09.s040_output/n100.r09.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s040_output/n100.r09.s040.untrimmed.sorted.bam" -b "n100.r09.s040_output/n100.r09.s040.primers.bed" -p "n100.r09.s040_output/n100.r09.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" "n100.r09.s040_output/n100.r09.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s040_output/n100.r09.s040.reference.fas" "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" > "n100.r09.s040_output/n100.r09.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s040_output/n100.r09.s040.reference.fas" --call-indels "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" > "n100.r09.s040_output/n100.r09.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s040_output/n100.r09.s040.trimmed.sorted.bam" > "n100.r09.s040_output/n100.r09.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s040_output/n100.r09.s040.depth.txt" "n100.r09.s040_output/n100.r09.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s040_output/n100.r09.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s040_output/n100.r09.s040.reference.fas" | bcftools consensus -m "n100.r09.s040_output/n100.r09.s040.low_depth.tsv" tmp.vcf.gz > "n100.r09.s040_output/n100.r09.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7b673a0ec0d74cc68bfba91d72a1e824c1bd0f888646ee8c0d977024fdcc38fe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.8MiB max=127.6MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:33:54 scheduler task 883f5a69 (flow ae4fd041): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s040.tar.gz resources {}
2021/07/08 17:33:54  ->  n100.r09.s040.Main.cp_out_file ae4fd041 exec extern s3://niema-test/n100/r09/n100.r09.s040.tar.gz 35.7MiB
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloaded val<.=03d5405c 35.4MiB>
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloaded list<val<.=9eea6e56 35.7MiB> 35.7MiB>
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloaded val<.=2b7dece3 35.4MiB>
2021/07/08 17:33:54 scheduler task 7f57889b (flow bbdb3d14): unloading (try 0): successful, next state: complete
2021/07/08 17:33:54  <-  n100.r09.s039.Main.out_file bbdb3d14 ok     exec 3m57s 35.7MiB
2021/07/08 17:33:54 n100.r09.s039.Main.out_file bbdb3d14 n100/r09/n100.r09.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:290805648e31ca3184061452ad07ef5a4d4595c8fdb9f1b2a65631316eb0404a
	sha256:bbdb3d14569fb5f443eaffc64f7cc797ef806698db0cc52fbbc0c549dde230cb
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7f57889beca7983b891849c25a54a485fbc1f439f7af26fb960b836612d0d7fb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s039_output"
	    wget -O "n100.r09.s039_output/n100.r09.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s039_output/n100.r09.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s039_output/n100.r09.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s039_output/n100.r09.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s039_output/n100.r09.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s039_output/n100.r09.s039.reference.fas" "n100.r09.s039_output/n100.r09.s039.fq1.fastq" "n100.r09.s039_output/n100.r09.s039.fq2.fastq" | samtools view -bS - > "n100.r09.s039_output/n100.r09.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s039_output/n100.r09.s039.untrimmed.sorted.bam" "n100.r09.s039_output/n100.r09.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s039_output/n100.r09.s039.untrimmed.sorted.bam" -b "n100.r09.s039_output/n100.r09.s039.primers.bed" -p "n100.r09.s039_output/n100.r09.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" "n100.r09.s039_output/n100.r09.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s039_output/n100.r09.s039.reference.fas" "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" > "n100.r09.s039_output/n100.r09.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s039_output/n100.r09.s039.reference.fas" --call-indels "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" > "n100.r09.s039_output/n100.r09.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s039_output/n100.r09.s039.trimmed.sorted.bam" > "n100.r09.s039_output/n100.r09.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s039_output/n100.r09.s039.depth.txt" "n100.r09.s039_output/n100.r09.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s039_output/n100.r09.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s039_output/n100.r09.s039.reference.fas" | bcftools consensus -m "n100.r09.s039_output/n100.r09.s039.low_depth.tsv" tmp.vcf.gz > "n100.r09.s039_output/n100.r09.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9eea6e56db2148e59e5aca620a04b2493c5c4cb58b1d3513279740ee7d39ea79 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.7MiB max=128.2MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:33:54 scheduler task 0b1d36a2 (flow 3805086f): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s039.tar.gz resources {}
2021/07/08 17:33:54  ->  n100.r09.s039.Main.cp_out_file 3805086f exec extern s3://niema-test/n100/r09/n100.r09.s039.tar.gz 35.7MiB
2021/07/08 17:33:55 scheduler task 883f5a69 (flow ae4fd041): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7b673a0ec0d74cc68bfba91d72a1e824c1bd0f888646ee8c0d977024fdcc38fe -> s3://niema-test/n100/r09/n100.r09.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:33:55  <-  n100.r09.s040.Main.cp_out_file ae4fd041 ok   extern 0s 35.7MiB
2021/07/08 17:33:55 scheduler task 0b1d36a2 (flow 3805086f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9eea6e56db2148e59e5aca620a04b2493c5c4cb58b1d3513279740ee7d39ea79 -> s3://niema-test/n100/r09/n100.r09.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:33:55  <-  n100.r09.s039.Main.cp_out_file 3805086f ok   extern 0s 35.7MiB
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): promoting objects (try 0): started
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): retrieving diagnostic output (try 0): started
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): retrieving result (try 0): started
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:33:56 scheduler task 71a2240f (flow b69f3a08): transferring output (try 0): started
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): transferring output (try 0): successful, next state: unloading
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloading (try 0): started
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloading list<val<.=314bd2a5 35.7MiB> 35.7MiB>
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloading val<.=c56af1e5 35.4MiB>
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloading val<.=69891a67 35.4MiB>
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloaded val<.=c56af1e5 35.4MiB>
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloaded val<.=69891a67 35.4MiB>
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloaded list<val<.=314bd2a5 35.7MiB> 35.7MiB>
2021/07/08 17:33:57 scheduler task 71a2240f (flow b69f3a08): unloading (try 0): successful, next state: complete
2021/07/08 17:33:57  <-  n100.r09.s004.Main.out_file b69f3a08 ok     exec 4m0s 35.7MiB
2021/07/08 17:33:57 n100.r09.s004.Main.out_file b69f3a08 n100/r09/n100.r09.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37de21e21f4c7b68e5ac5765fe6184b1624177ff27cd7102ed087ceaf4bf1560
	sha256:b69f3a0866a29361b33ca31d2791098fa1f6c926adf8fa8eab4ff65b587ee88b
	ec2-3-128-173-22.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/71a2240fc51f5925947aa45f525c064513f57612157219c4a61feb0fcb784f75
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s004_output"
	    wget -O "n100.r09.s004_output/n100.r09.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s004_output/n100.r09.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s004_output/n100.r09.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s004_output/n100.r09.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s004_output/n100.r09.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s004_output/n100.r09.s004.reference.fas" "n100.r09.s004_output/n100.r09.s004.fq1.fastq" "n100.r09.s004_output/n100.r09.s004.fq2.fastq" | samtools view -bS - > "n100.r09.s004_output/n100.r09.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s004_output/n100.r09.s004.untrimmed.sorted.bam" "n100.r09.s004_output/n100.r09.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s004_output/n100.r09.s004.untrimmed.sorted.bam" -b "n100.r09.s004_output/n100.r09.s004.primers.bed" -p "n100.r09.s004_output/n100.r09.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" "n100.r09.s004_output/n100.r09.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s004_output/n100.r09.s004.reference.fas" "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" > "n100.r09.s004_output/n100.r09.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s004_output/n100.r09.s004.reference.fas" --call-indels "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" > "n100.r09.s004_output/n100.r09.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s004_output/n100.r09.s004.trimmed.sorted.bam" > "n100.r09.s004_output/n100.r09.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s004_output/n100.r09.s004.depth.txt" "n100.r09.s004_output/n100.r09.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s004_output/n100.r09.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s004_output/n100.r09.s004.reference.fas" | bcftools consensus -m "n100.r09.s004_output/n100.r09.s004.low_depth.tsv" tmp.vcf.gz > "n100.r09.s004_output/n100.r09.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:314bd2a5e8210cb641e3662852b203f0dca1700d731bd71a7cd3a902e29eb68a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.9MiB max=125.9MiB
	    disk mean=12.6MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:33:57 scheduler task 6760ee0c (flow f22661c8): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s004.tar.gz resources {}
2021/07/08 17:33:57  ->  n100.r09.s004.Main.cp_out_file f22661c8 exec extern s3://niema-test/n100/r09/n100.r09.s004.tar.gz 35.7MiB
2021/07/08 17:33:58 scheduler task 6760ee0c (flow f22661c8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:314bd2a5e8210cb641e3662852b203f0dca1700d731bd71a7cd3a902e29eb68a -> s3://niema-test/n100/r09/n100.r09.s004.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:33:58  <-  n100.r09.s004.Main.cp_out_file f22661c8 ok   extern 0s 35.7MiB
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): promoting objects (try 0): started
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): retrieving diagnostic output (try 0): started
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): retrieving result (try 0): started
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:48 scheduler task f7e7564f (flow cdae4b3f): transferring output (try 0): started
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloading (try 0): started
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloading list<val<.=9f94946d 35.8MiB> 35.8MiB>
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloading val<.=b531f9e0 35.4MiB>
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloading val<.=84b5e81d 35.4MiB>
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloaded list<val<.=9f94946d 35.8MiB> 35.8MiB>
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloaded val<.=84b5e81d 35.4MiB>
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloaded val<.=b531f9e0 35.4MiB>
2021/07/08 17:34:49 scheduler task f7e7564f (flow cdae4b3f): unloading (try 0): successful, next state: complete
2021/07/08 17:34:49  <-  n100.r09.s007.Main.out_file cdae4b3f ok     exec 4m52s 35.8MiB
2021/07/08 17:34:49 n100.r09.s007.Main.out_file cdae4b3f n100/r09/n100.r09.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1c99f2fd8a7efc010e689a34ae531dd8b03e37807d57c25f5ff9bc58d73a1742
	sha256:cdae4b3f1199ffa7e9ba38c28a93d950ac0762dabceabf8101c61c53a0ef7066
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f7e7564fdb4f4de922a7ca2ed266e1942884d1506262a0985ca1c15c99ef80ec
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s007_output"
	    wget -O "n100.r09.s007_output/n100.r09.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s007_output/n100.r09.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s007_output/n100.r09.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s007_output/n100.r09.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s007_output/n100.r09.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s007_output/n100.r09.s007.reference.fas" "n100.r09.s007_output/n100.r09.s007.fq1.fastq" "n100.r09.s007_output/n100.r09.s007.fq2.fastq" | samtools view -bS - > "n100.r09.s007_output/n100.r09.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s007_output/n100.r09.s007.untrimmed.sorted.bam" "n100.r09.s007_output/n100.r09.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s007_output/n100.r09.s007.untrimmed.sorted.bam" -b "n100.r09.s007_output/n100.r09.s007.primers.bed" -p "n100.r09.s007_output/n100.r09.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" "n100.r09.s007_output/n100.r09.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s007_output/n100.r09.s007.reference.fas" "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" > "n100.r09.s007_output/n100.r09.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s007_output/n100.r09.s007.reference.fas" --call-indels "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" > "n100.r09.s007_output/n100.r09.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s007_output/n100.r09.s007.trimmed.sorted.bam" > "n100.r09.s007_output/n100.r09.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s007_output/n100.r09.s007.depth.txt" "n100.r09.s007_output/n100.r09.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s007_output/n100.r09.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s007_output/n100.r09.s007.reference.fas" | bcftools consensus -m "n100.r09.s007_output/n100.r09.s007.low_depth.tsv" tmp.vcf.gz > "n100.r09.s007_output/n100.r09.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9f94946d7a0132bfe57456c8a6144a6500feb8f4fe9c085c3f9722242e13cd2d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=126.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:34:49 scheduler task 627e40df (flow 95126085): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s007.tar.gz resources {}
2021/07/08 17:34:49  ->  n100.r09.s007.Main.cp_out_file 95126085 exec extern s3://niema-test/n100/r09/n100.r09.s007.tar.gz 35.8MiB
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): promoting objects (try 0): started
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): retrieving diagnostic output (try 0): started
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): retrieving result (try 0): started
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:50 scheduler task b56b9115 (flow ca6c188a): transferring output (try 0): started
2021/07/08 17:34:50 scheduler task 627e40df (flow 95126085): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9f94946d7a0132bfe57456c8a6144a6500feb8f4fe9c085c3f9722242e13cd2d -> s3://niema-test/n100/r09/n100.r09.s007.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:34:50  <-  n100.r09.s007.Main.cp_out_file 95126085 ok   extern 0s 35.8MiB
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloading (try 0): started
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloading list<val<.=3bd3308f 35.8MiB> 35.8MiB>
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloading val<.=593ab71d 35.4MiB>
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloading val<.=59697851 35.4MiB>
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloaded val<.=593ab71d 35.4MiB>
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloaded val<.=59697851 35.4MiB>
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloaded list<val<.=3bd3308f 35.8MiB> 35.8MiB>
2021/07/08 17:34:51 scheduler task b56b9115 (flow ca6c188a): unloading (try 0): successful, next state: complete
2021/07/08 17:34:51  <-  n100.r09.s088.Main.out_file ca6c188a ok     exec 4m54s 35.8MiB
2021/07/08 17:34:51 n100.r09.s088.Main.out_file ca6c188a n100/r09/n100.r09.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f4906033321b7d0e669b887c5f4eea73a734376923a42985de06a78d575abc0a
	sha256:ca6c188a38c1c6c8e540a0e41cb07b7efc159dab364b69f4594c3e0dcbe51977
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b56b911551ce81da6fd0dfda943e628ea12348da5b8b1185206ce06844ff4221
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s088_output"
	    wget -O "n100.r09.s088_output/n100.r09.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s088_output/n100.r09.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s088_output/n100.r09.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s088_output/n100.r09.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s088_output/n100.r09.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s088_output/n100.r09.s088.reference.fas" "n100.r09.s088_output/n100.r09.s088.fq1.fastq" "n100.r09.s088_output/n100.r09.s088.fq2.fastq" | samtools view -bS - > "n100.r09.s088_output/n100.r09.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s088_output/n100.r09.s088.untrimmed.sorted.bam" "n100.r09.s088_output/n100.r09.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s088_output/n100.r09.s088.untrimmed.sorted.bam" -b "n100.r09.s088_output/n100.r09.s088.primers.bed" -p "n100.r09.s088_output/n100.r09.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" "n100.r09.s088_output/n100.r09.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s088_output/n100.r09.s088.reference.fas" "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" > "n100.r09.s088_output/n100.r09.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s088_output/n100.r09.s088.reference.fas" --call-indels "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" > "n100.r09.s088_output/n100.r09.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s088_output/n100.r09.s088.trimmed.sorted.bam" > "n100.r09.s088_output/n100.r09.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s088_output/n100.r09.s088.depth.txt" "n100.r09.s088_output/n100.r09.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s088_output/n100.r09.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s088_output/n100.r09.s088.reference.fas" | bcftools consensus -m "n100.r09.s088_output/n100.r09.s088.low_depth.tsv" tmp.vcf.gz > "n100.r09.s088_output/n100.r09.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3bd3308f577f9bcfb8e37ae920f962edab49e33c7ea332aab3954456b5d78d06 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=127.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:34:51 scheduler task 9b52c17a (flow a24a329a): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s088.tar.gz resources {}
2021/07/08 17:34:51  ->  n100.r09.s088.Main.cp_out_file a24a329a exec extern s3://niema-test/n100/r09/n100.r09.s088.tar.gz 35.8MiB
2021/07/08 17:34:52 scheduler task 9b52c17a (flow a24a329a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3bd3308f577f9bcfb8e37ae920f962edab49e33c7ea332aab3954456b5d78d06 -> s3://niema-test/n100/r09/n100.r09.s088.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:34:52  <-  n100.r09.s088.Main.cp_out_file a24a329a ok   extern 0s 35.8MiB
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): promoting objects (try 0): started
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): retrieving diagnostic output (try 0): started
2021/07/08 17:34:53 scheduler task f75b41ab (flow 7f1c060b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:53 scheduler task f75b41ab (flow 7f1c060b): promoting objects (try 0): started
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): retrieving result (try 0): started
2021/07/08 17:34:53 scheduler task f75b41ab (flow 7f1c060b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:53 scheduler task f75b41ab (flow 7f1c060b): retrieving diagnostic output (try 0): started
2021/07/08 17:34:53 scheduler task 58a3aaa8 (flow 68848ea7): transferring output (try 0): started
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): retrieving result (try 0): started
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): transferring output (try 0): started
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloading (try 0): started
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloading list<val<.=4e28aac6 35.7MiB> 35.7MiB>
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloading val<.=0ac316c2 35.4MiB>
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloading val<.=1a6b33c2 35.4MiB>
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloaded val<.=1a6b33c2 35.4MiB>
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloaded list<val<.=4e28aac6 35.7MiB> 35.7MiB>
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloaded val<.=0ac316c2 35.4MiB>
2021/07/08 17:34:54 scheduler task 58a3aaa8 (flow 68848ea7): unloading (try 0): successful, next state: complete
2021/07/08 17:34:54  <-  n100.r09.s075.Main.out_file 68848ea7 ok     exec 4m57s 35.7MiB
2021/07/08 17:34:54 n100.r09.s075.Main.out_file 68848ea7 n100/r09/n100.r09.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1381321058fc3b9d7f1016a4044b5c8e3e3e63350c675388ec0083df16c84e13
	sha256:68848ea710d57060a67095668122dbdcb499ba7393bef0751367cb5319c0d3ea
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/58a3aaa8bc4cf4199176411efdf2f07febb9c4a4b30f67da1ac0bed92b4f4c5a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s075_output"
	    wget -O "n100.r09.s075_output/n100.r09.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s075_output/n100.r09.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s075_output/n100.r09.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s075_output/n100.r09.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s075_output/n100.r09.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s075_output/n100.r09.s075.reference.fas" "n100.r09.s075_output/n100.r09.s075.fq1.fastq" "n100.r09.s075_output/n100.r09.s075.fq2.fastq" | samtools view -bS - > "n100.r09.s075_output/n100.r09.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s075_output/n100.r09.s075.untrimmed.sorted.bam" "n100.r09.s075_output/n100.r09.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s075_output/n100.r09.s075.untrimmed.sorted.bam" -b "n100.r09.s075_output/n100.r09.s075.primers.bed" -p "n100.r09.s075_output/n100.r09.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" "n100.r09.s075_output/n100.r09.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s075_output/n100.r09.s075.reference.fas" "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" > "n100.r09.s075_output/n100.r09.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s075_output/n100.r09.s075.reference.fas" --call-indels "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" > "n100.r09.s075_output/n100.r09.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s075_output/n100.r09.s075.trimmed.sorted.bam" > "n100.r09.s075_output/n100.r09.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s075_output/n100.r09.s075.depth.txt" "n100.r09.s075_output/n100.r09.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s075_output/n100.r09.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s075_output/n100.r09.s075.reference.fas" | bcftools consensus -m "n100.r09.s075_output/n100.r09.s075.low_depth.tsv" tmp.vcf.gz > "n100.r09.s075_output/n100.r09.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4e28aac65d06ba10d33aace9253063712704a605e01766ee99c1a55f54e3aca9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=129.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:34:54 scheduler task b90e3037 (flow 4a45c1ab): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s075.tar.gz resources {}
2021/07/08 17:34:54  ->  n100.r09.s075.Main.cp_out_file 4a45c1ab exec extern s3://niema-test/n100/r09/n100.r09.s075.tar.gz 35.7MiB
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloading (try 0): started
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloading list<val<.=bcf4d9cb 35.8MiB> 35.8MiB>
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloading val<.=45b2a9da 35.4MiB>
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloading val<.=26a4e9fe 35.4MiB>
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloaded list<val<.=bcf4d9cb 35.8MiB> 35.8MiB>
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloaded val<.=26a4e9fe 35.4MiB>
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloaded val<.=45b2a9da 35.4MiB>
2021/07/08 17:34:54 scheduler task f75b41ab (flow 7f1c060b): unloading (try 0): successful, next state: complete
2021/07/08 17:34:54  <-  n100.r09.s064.Main.out_file 7f1c060b ok     exec 4m58s 35.8MiB
2021/07/08 17:34:54 n100.r09.s064.Main.out_file 7f1c060b n100/r09/n100.r09.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7101e9a4396b80bb20c12aae729b6adfddaff4018356439488aee2981540579e
	sha256:7f1c060bb4ec3f8a9cf515b1406e526990803156f0b829aaba35a9f1039ec25e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f75b41abffddd95b08d269a327f2c2e3bde73e02101974082de8a5c5e9851bad
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s064_output"
	    wget -O "n100.r09.s064_output/n100.r09.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s064_output/n100.r09.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s064_output/n100.r09.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s064_output/n100.r09.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s064_output/n100.r09.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s064_output/n100.r09.s064.reference.fas" "n100.r09.s064_output/n100.r09.s064.fq1.fastq" "n100.r09.s064_output/n100.r09.s064.fq2.fastq" | samtools view -bS - > "n100.r09.s064_output/n100.r09.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s064_output/n100.r09.s064.untrimmed.sorted.bam" "n100.r09.s064_output/n100.r09.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s064_output/n100.r09.s064.untrimmed.sorted.bam" -b "n100.r09.s064_output/n100.r09.s064.primers.bed" -p "n100.r09.s064_output/n100.r09.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" "n100.r09.s064_output/n100.r09.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s064_output/n100.r09.s064.reference.fas" "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" > "n100.r09.s064_output/n100.r09.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s064_output/n100.r09.s064.reference.fas" --call-indels "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" > "n100.r09.s064_output/n100.r09.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s064_output/n100.r09.s064.trimmed.sorted.bam" > "n100.r09.s064_output/n100.r09.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s064_output/n100.r09.s064.depth.txt" "n100.r09.s064_output/n100.r09.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s064_output/n100.r09.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s064_output/n100.r09.s064.reference.fas" | bcftools consensus -m "n100.r09.s064_output/n100.r09.s064.low_depth.tsv" tmp.vcf.gz > "n100.r09.s064_output/n100.r09.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bcf4d9cbb7971c5985d72051a5ca04d78e4761ffcc7f475319352156a55e2e11 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=126.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:34:54 scheduler task 814280dc (flow 04c9023b): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s064.tar.gz resources {}
2021/07/08 17:34:54  ->  n100.r09.s064.Main.cp_out_file 04c9023b exec extern s3://niema-test/n100/r09/n100.r09.s064.tar.gz 35.8MiB
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): promoting objects (try 0): started
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): retrieving diagnostic output (try 0): started
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): retrieving result (try 0): started
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:55 scheduler task 4b51afe4 (flow 88409fe3): transferring output (try 0): started
2021/07/08 17:34:55 scheduler task b90e3037 (flow 4a45c1ab): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4e28aac65d06ba10d33aace9253063712704a605e01766ee99c1a55f54e3aca9 -> s3://niema-test/n100/r09/n100.r09.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:34:55  <-  n100.r09.s075.Main.cp_out_file 4a45c1ab ok   extern 0s 35.7MiB
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): promoting objects (try 0): started
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): retrieving diagnostic output (try 0): started
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): retrieving result (try 0): started
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:55 scheduler task ec43ea83 (flow 7b4ec1c0): transferring output (try 0): started
2021/07/08 17:34:55 scheduler task 814280dc (flow 04c9023b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bcf4d9cbb7971c5985d72051a5ca04d78e4761ffcc7f475319352156a55e2e11 -> s3://niema-test/n100/r09/n100.r09.s064.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:34:55  <-  n100.r09.s064.Main.cp_out_file 04c9023b ok   extern 0s 35.8MiB
2021/07/08 17:34:55 scheduler task 4ba314d6 (flow 631db24c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:55 scheduler task 4ba314d6 (flow 631db24c): promoting objects (try 0): started
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): retrieving diagnostic output (try 0): started
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloading (try 0): started
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloading list<val<.=a4fd27d6 35.8MiB> 35.8MiB>
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloading val<.=272c4bf2 35.4MiB>
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloading val<.=c5e28df8 35.4MiB>
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): retrieving result (try 0): started
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloaded val<.=272c4bf2 35.4MiB>
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloaded list<val<.=a4fd27d6 35.8MiB> 35.8MiB>
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloaded val<.=c5e28df8 35.4MiB>
2021/07/08 17:34:56 scheduler task 4b51afe4 (flow 88409fe3): unloading (try 0): successful, next state: complete
2021/07/08 17:34:56  <-  n100.r09.s027.Main.out_file 88409fe3 ok     exec 4m59s 35.8MiB
2021/07/08 17:34:56 n100.r09.s027.Main.out_file 88409fe3 n100/r09/n100.r09.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bd71db265da9c88131afbbb14c31cdff8358b16c2a78e8a18a26885174370220
	sha256:88409fe3c1897d7c9a75f869f3d3dc6484026ddc012446b7f5ef4dcb50daffc7
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4b51afe4b92b16dbdfdf20befbd61434ad4b2b98872355fe19b3fff344913b7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s027_output"
	    wget -O "n100.r09.s027_output/n100.r09.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s027_output/n100.r09.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s027_output/n100.r09.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s027_output/n100.r09.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s027_output/n100.r09.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s027_output/n100.r09.s027.reference.fas" "n100.r09.s027_output/n100.r09.s027.fq1.fastq" "n100.r09.s027_output/n100.r09.s027.fq2.fastq" | samtools view -bS - > "n100.r09.s027_output/n100.r09.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s027_output/n100.r09.s027.untrimmed.sorted.bam" "n100.r09.s027_output/n100.r09.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s027_output/n100.r09.s027.untrimmed.sorted.bam" -b "n100.r09.s027_output/n100.r09.s027.primers.bed" -p "n100.r09.s027_output/n100.r09.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" "n100.r09.s027_output/n100.r09.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s027_output/n100.r09.s027.reference.fas" "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" > "n100.r09.s027_output/n100.r09.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s027_output/n100.r09.s027.reference.fas" --call-indels "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" > "n100.r09.s027_output/n100.r09.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s027_output/n100.r09.s027.trimmed.sorted.bam" > "n100.r09.s027_output/n100.r09.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s027_output/n100.r09.s027.depth.txt" "n100.r09.s027_output/n100.r09.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s027_output/n100.r09.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s027_output/n100.r09.s027.reference.fas" | bcftools consensus -m "n100.r09.s027_output/n100.r09.s027.low_depth.tsv" tmp.vcf.gz > "n100.r09.s027_output/n100.r09.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a4fd27d679b3b3904eda76fdd535f319d66cb6c9e822d769420c6d4e741c2fa1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=126.1MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:34:56 scheduler task 6f9f9600 (flow 069c6091): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s027.tar.gz resources {}
2021/07/08 17:34:56  ->  n100.r09.s027.Main.cp_out_file 069c6091 exec extern s3://niema-test/n100/r09/n100.r09.s027.tar.gz 35.8MiB
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): transferring output (try 0): started
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloading (try 0): started
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloading list<val<.=5abe05f9 35.7MiB> 35.7MiB>
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloading val<.=d1d948b9 35.4MiB>
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloading val<.=5e09ec34 35.4MiB>
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloaded val<.=5e09ec34 35.4MiB>
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloaded list<val<.=5abe05f9 35.7MiB> 35.7MiB>
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloaded val<.=d1d948b9 35.4MiB>
2021/07/08 17:34:56 scheduler task ec43ea83 (flow 7b4ec1c0): unloading (try 0): successful, next state: complete
2021/07/08 17:34:56  <-  n100.r09.s014.Main.out_file 7b4ec1c0 ok     exec 4m59s 35.7MiB
2021/07/08 17:34:56 n100.r09.s014.Main.out_file 7b4ec1c0 n100/r09/n100.r09.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c8eddca4f8b3d10dfb27b9472171c99b62b3c5485c5fa2a3d45238473689ed3c
	sha256:7b4ec1c048b8ef1f1755dcf57895b7dd9b441b42e6265a42d54a09b383a7ff1a
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ec43ea83929bd48b74ef32d3cf6e327cc4dc6fb2e1410207c938e18fd6ca47b3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s014_output"
	    wget -O "n100.r09.s014_output/n100.r09.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s014_output/n100.r09.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s014_output/n100.r09.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s014_output/n100.r09.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s014_output/n100.r09.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s014_output/n100.r09.s014.reference.fas" "n100.r09.s014_output/n100.r09.s014.fq1.fastq" "n100.r09.s014_output/n100.r09.s014.fq2.fastq" | samtools view -bS - > "n100.r09.s014_output/n100.r09.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s014_output/n100.r09.s014.untrimmed.sorted.bam" "n100.r09.s014_output/n100.r09.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s014_output/n100.r09.s014.untrimmed.sorted.bam" -b "n100.r09.s014_output/n100.r09.s014.primers.bed" -p "n100.r09.s014_output/n100.r09.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" "n100.r09.s014_output/n100.r09.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s014_output/n100.r09.s014.reference.fas" "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" > "n100.r09.s014_output/n100.r09.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s014_output/n100.r09.s014.reference.fas" --call-indels "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" > "n100.r09.s014_output/n100.r09.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s014_output/n100.r09.s014.trimmed.sorted.bam" > "n100.r09.s014_output/n100.r09.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s014_output/n100.r09.s014.depth.txt" "n100.r09.s014_output/n100.r09.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s014_output/n100.r09.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s014_output/n100.r09.s014.reference.fas" | bcftools consensus -m "n100.r09.s014_output/n100.r09.s014.low_depth.tsv" tmp.vcf.gz > "n100.r09.s014_output/n100.r09.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5abe05f9642c822f4633c00555b9419e106977b04c551d5694ae081b3e5d63ec 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=127.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=1.0KiB
2021/07/08 17:34:56 scheduler task 175ec5e2 (flow dd14d863): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s014.tar.gz resources {}
2021/07/08 17:34:56  ->  n100.r09.s014.Main.cp_out_file dd14d863 exec extern s3://niema-test/n100/r09/n100.r09.s014.tar.gz 35.7MiB
2021/07/08 17:34:56 scheduler task f67f9364 (flow 99c25444): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:56 scheduler task f67f9364 (flow 99c25444): promoting objects (try 0): started
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloading (try 0): started
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloading list<val<.=2a6b10e5 35.7MiB> 35.7MiB>
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloading val<.=0bb1c895 35.4MiB>
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloading val<.=31c7d19f 35.4MiB>
2021/07/08 17:34:56 scheduler task f67f9364 (flow 99c25444): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:56 scheduler task f67f9364 (flow 99c25444): retrieving diagnostic output (try 0): started
2021/07/08 17:34:56 scheduler task 6f9f9600 (flow 069c6091): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a4fd27d679b3b3904eda76fdd535f319d66cb6c9e822d769420c6d4e741c2fa1 -> s3://niema-test/n100/r09/n100.r09.s027.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:34:56  <-  n100.r09.s027.Main.cp_out_file 069c6091 ok   extern 0s 35.8MiB
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloaded list<val<.=2a6b10e5 35.7MiB> 35.7MiB>
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloaded val<.=0bb1c895 35.4MiB>
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloaded val<.=31c7d19f 35.4MiB>
2021/07/08 17:34:56 scheduler task 4ba314d6 (flow 631db24c): unloading (try 0): successful, next state: complete
2021/07/08 17:34:56  <-  n100.r09.s100.Main.out_file 631db24c ok     exec 4m59s 35.7MiB
2021/07/08 17:34:56 n100.r09.s100.Main.out_file 631db24c n100/r09/n100.r09.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:807788092e729d09e9b3cddcd85910eb7409c346875ea4b00d65b48ba7a93530
	sha256:631db24ccba5c919e0e2b5716eaf4eb2ca86766af3af111d9ddedbf56f109c75
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4ba314d6a94d67b7620fbabd81b2c0d4b7a881070fc5c429897606a0396e7e66
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s100_output"
	    wget -O "n100.r09.s100_output/n100.r09.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s100_output/n100.r09.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s100_output/n100.r09.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s100_output/n100.r09.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s100_output/n100.r09.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s100_output/n100.r09.s100.reference.fas" "n100.r09.s100_output/n100.r09.s100.fq1.fastq" "n100.r09.s100_output/n100.r09.s100.fq2.fastq" | samtools view -bS - > "n100.r09.s100_output/n100.r09.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s100_output/n100.r09.s100.untrimmed.sorted.bam" "n100.r09.s100_output/n100.r09.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s100_output/n100.r09.s100.untrimmed.sorted.bam" -b "n100.r09.s100_output/n100.r09.s100.primers.bed" -p "n100.r09.s100_output/n100.r09.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" "n100.r09.s100_output/n100.r09.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s100_output/n100.r09.s100.reference.fas" "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" > "n100.r09.s100_output/n100.r09.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s100_output/n100.r09.s100.reference.fas" --call-indels "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" > "n100.r09.s100_output/n100.r09.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s100_output/n100.r09.s100.trimmed.sorted.bam" > "n100.r09.s100_output/n100.r09.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s100_output/n100.r09.s100.depth.txt" "n100.r09.s100_output/n100.r09.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s100_output/n100.r09.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s100_output/n100.r09.s100.reference.fas" | bcftools consensus -m "n100.r09.s100_output/n100.r09.s100.low_depth.tsv" tmp.vcf.gz > "n100.r09.s100_output/n100.r09.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2a6b10e551446dad482f295bd837c8d2ba3c0cf2651494813a2a4c796b954a2d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:34:56 scheduler task 7a0ba7b9 (flow f4984f53): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s100.tar.gz resources {}
2021/07/08 17:34:56  ->  n100.r09.s100.Main.cp_out_file f4984f53 exec extern s3://niema-test/n100/r09/n100.r09.s100.tar.gz 35.7MiB
2021/07/08 17:34:56 scheduler task f67f9364 (flow 99c25444): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:56 scheduler task f67f9364 (flow 99c25444): retrieving result (try 0): started
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): transferring output (try 0): started
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): promoting objects (try 0): started
2021/07/08 17:34:57 scheduler task 175ec5e2 (flow dd14d863): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5abe05f9642c822f4633c00555b9419e106977b04c551d5694ae081b3e5d63ec -> s3://niema-test/n100/r09/n100.r09.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:34:57  <-  n100.r09.s014.Main.cp_out_file dd14d863 ok   extern 0s 35.7MiB
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): retrieving diagnostic output (try 0): started
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): retrieving result (try 0): started
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloading (try 0): started
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloading list<val<.=88070fc0 35.7MiB> 35.7MiB>
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloading val<.=07c1bce1 35.4MiB>
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloading val<.=805eb71b 35.4MiB>
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:57 scheduler task b2d0fd0c (flow 37d37b5c): transferring output (try 0): started
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): promoting objects (try 0): started
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloaded list<val<.=88070fc0 35.7MiB> 35.7MiB>
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloaded val<.=805eb71b 35.4MiB>
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloaded val<.=07c1bce1 35.4MiB>
2021/07/08 17:34:57 scheduler task f67f9364 (flow 99c25444): unloading (try 0): successful, next state: complete
2021/07/08 17:34:57  <-  n100.r09.s038.Main.out_file 99c25444 ok     exec 5m0s 35.7MiB
2021/07/08 17:34:57 n100.r09.s038.Main.out_file 99c25444 n100/r09/n100.r09.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1fb1aef801edc06b3d80733d11d9933cf6c0801836ab1aa73de2a396562109ad
	sha256:99c254445cac9438c8056bd5d3de916417a9e04e0b6e936c4baa2a42d09ca58b
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f67f936468593656a81063eff8c2ac6fb1c5826ba337ad8af68bf9f007acc2f7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s038_output"
	    wget -O "n100.r09.s038_output/n100.r09.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s038_output/n100.r09.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s038_output/n100.r09.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s038_output/n100.r09.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s038_output/n100.r09.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s038_output/n100.r09.s038.reference.fas" "n100.r09.s038_output/n100.r09.s038.fq1.fastq" "n100.r09.s038_output/n100.r09.s038.fq2.fastq" | samtools view -bS - > "n100.r09.s038_output/n100.r09.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s038_output/n100.r09.s038.untrimmed.sorted.bam" "n100.r09.s038_output/n100.r09.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s038_output/n100.r09.s038.untrimmed.sorted.bam" -b "n100.r09.s038_output/n100.r09.s038.primers.bed" -p "n100.r09.s038_output/n100.r09.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" "n100.r09.s038_output/n100.r09.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s038_output/n100.r09.s038.reference.fas" "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" > "n100.r09.s038_output/n100.r09.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s038_output/n100.r09.s038.reference.fas" --call-indels "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" > "n100.r09.s038_output/n100.r09.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s038_output/n100.r09.s038.trimmed.sorted.bam" > "n100.r09.s038_output/n100.r09.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s038_output/n100.r09.s038.depth.txt" "n100.r09.s038_output/n100.r09.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s038_output/n100.r09.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s038_output/n100.r09.s038.reference.fas" | bcftools consensus -m "n100.r09.s038_output/n100.r09.s038.low_depth.tsv" tmp.vcf.gz > "n100.r09.s038_output/n100.r09.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:88070fc0d47aeaee6c6cb3396fb6fc8b69aaf9c43fda4f00b4fb434de0847478 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.9MiB max=124.7MiB
	    disk mean=10.1MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:34:57 scheduler task b37a01f9 (flow f202023a): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s038.tar.gz resources {}
2021/07/08 17:34:57  ->  n100.r09.s038.Main.cp_out_file f202023a exec extern s3://niema-test/n100/r09/n100.r09.s038.tar.gz 35.7MiB
2021/07/08 17:34:57 scheduler task 7a0ba7b9 (flow f4984f53): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2a6b10e551446dad482f295bd837c8d2ba3c0cf2651494813a2a4c796b954a2d -> s3://niema-test/n100/r09/n100.r09.s100.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:34:57  <-  n100.r09.s100.Main.cp_out_file f4984f53 ok   extern 0s 35.7MiB
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): retrieving diagnostic output (try 0): started
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): retrieving result (try 0): started
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:57 scheduler task 4e103f12 (flow 59028377): transferring output (try 0): started
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloading (try 0): started
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloading list<val<.=8b4291c8 35.7MiB> 35.7MiB>
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloading val<.=a24cd8d3 35.4MiB>
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloading val<.=dcd626ec 35.4MiB>
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloaded list<val<.=8b4291c8 35.7MiB> 35.7MiB>
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloaded val<.=dcd626ec 35.4MiB>
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloaded val<.=a24cd8d3 35.4MiB>
2021/07/08 17:34:58 scheduler task b2d0fd0c (flow 37d37b5c): unloading (try 0): successful, next state: complete
2021/07/08 17:34:58  <-  n100.r09.s006.Main.out_file 37d37b5c ok     exec 5m1s 35.7MiB
2021/07/08 17:34:58 n100.r09.s006.Main.out_file 37d37b5c n100/r09/n100.r09.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:35142195494eff294b095f4d12371f077e73a994407731a21ad20b45d2b98027
	sha256:37d37b5c63557498b5a683d0f9acf14e78047ea71c672c851e03ff74b517a2d4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b2d0fd0c22980f5e438313216567a1bb6a17765c298a78cae55f11bf4c73d2b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s006_output"
	    wget -O "n100.r09.s006_output/n100.r09.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s006_output/n100.r09.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s006_output/n100.r09.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s006_output/n100.r09.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s006_output/n100.r09.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s006_output/n100.r09.s006.reference.fas" "n100.r09.s006_output/n100.r09.s006.fq1.fastq" "n100.r09.s006_output/n100.r09.s006.fq2.fastq" | samtools view -bS - > "n100.r09.s006_output/n100.r09.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s006_output/n100.r09.s006.untrimmed.sorted.bam" "n100.r09.s006_output/n100.r09.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s006_output/n100.r09.s006.untrimmed.sorted.bam" -b "n100.r09.s006_output/n100.r09.s006.primers.bed" -p "n100.r09.s006_output/n100.r09.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" "n100.r09.s006_output/n100.r09.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s006_output/n100.r09.s006.reference.fas" "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" > "n100.r09.s006_output/n100.r09.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s006_output/n100.r09.s006.reference.fas" --call-indels "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" > "n100.r09.s006_output/n100.r09.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s006_output/n100.r09.s006.trimmed.sorted.bam" > "n100.r09.s006_output/n100.r09.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s006_output/n100.r09.s006.depth.txt" "n100.r09.s006_output/n100.r09.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s006_output/n100.r09.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s006_output/n100.r09.s006.reference.fas" | bcftools consensus -m "n100.r09.s006_output/n100.r09.s006.low_depth.tsv" tmp.vcf.gz > "n100.r09.s006_output/n100.r09.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8b4291c822f2ff5bb66c89aa523b990af234b962e950ddfcf63274448703ee6a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=125.0MiB
	    disk mean=9.7MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:34:58 scheduler task 9565c197 (flow 4b3a9a68): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s006.tar.gz resources {}
2021/07/08 17:34:58  ->  n100.r09.s006.Main.cp_out_file 4b3a9a68 exec extern s3://niema-test/n100/r09/n100.r09.s006.tar.gz 35.7MiB
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloading (try 0): started
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloading list<val<.=9dfe390c 35.7MiB> 35.7MiB>
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloading val<.=78ea69d3 35.4MiB>
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloading val<.=08a3da3b 35.4MiB>
2021/07/08 17:34:58 scheduler task b37a01f9 (flow f202023a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:88070fc0d47aeaee6c6cb3396fb6fc8b69aaf9c43fda4f00b4fb434de0847478 -> s3://niema-test/n100/r09/n100.r09.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:34:58  <-  n100.r09.s038.Main.cp_out_file f202023a ok   extern 0s 35.7MiB
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): promoting objects (try 0): started
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloaded val<.=08a3da3b 35.4MiB>
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloaded list<val<.=9dfe390c 35.7MiB> 35.7MiB>
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloaded val<.=78ea69d3 35.4MiB>
2021/07/08 17:34:58 scheduler task 4e103f12 (flow 59028377): unloading (try 0): successful, next state: complete
2021/07/08 17:34:58  <-  n100.r09.s057.Main.out_file 59028377 ok     exec 5m1s 35.7MiB
2021/07/08 17:34:58 n100.r09.s057.Main.out_file 59028377 n100/r09/n100.r09.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb2257471d97bb2ddf2ba31c0a830a695a717eff3baf0c5f69cd1f5a465c52e1
	sha256:5902837725024061df70507c0280e3823633a0f1362fab6c13b0ef5cfbcd08f9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e103f12b853bfd8339558b1e8d3c162a7f80eb2e4e3ba015c8a9ddb169ea123
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s057_output"
	    wget -O "n100.r09.s057_output/n100.r09.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s057_output/n100.r09.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s057_output/n100.r09.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s057_output/n100.r09.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s057_output/n100.r09.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s057_output/n100.r09.s057.reference.fas" "n100.r09.s057_output/n100.r09.s057.fq1.fastq" "n100.r09.s057_output/n100.r09.s057.fq2.fastq" | samtools view -bS - > "n100.r09.s057_output/n100.r09.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s057_output/n100.r09.s057.untrimmed.sorted.bam" "n100.r09.s057_output/n100.r09.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s057_output/n100.r09.s057.untrimmed.sorted.bam" -b "n100.r09.s057_output/n100.r09.s057.primers.bed" -p "n100.r09.s057_output/n100.r09.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" "n100.r09.s057_output/n100.r09.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s057_output/n100.r09.s057.reference.fas" "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" > "n100.r09.s057_output/n100.r09.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s057_output/n100.r09.s057.reference.fas" --call-indels "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" > "n100.r09.s057_output/n100.r09.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s057_output/n100.r09.s057.trimmed.sorted.bam" > "n100.r09.s057_output/n100.r09.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s057_output/n100.r09.s057.depth.txt" "n100.r09.s057_output/n100.r09.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s057_output/n100.r09.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s057_output/n100.r09.s057.reference.fas" | bcftools consensus -m "n100.r09.s057_output/n100.r09.s057.low_depth.tsv" tmp.vcf.gz > "n100.r09.s057_output/n100.r09.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9dfe390cf4b1d00559c5e611992b853e12c4aec8223c855585dbba601f56fe3a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=124.1MiB
	    disk mean=7.6MiB max=35.7MiB
	    tmp mean=348B max=1.0KiB
2021/07/08 17:34:58 scheduler task 7fb29da1 (flow b16b8867): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s057.tar.gz resources {}
2021/07/08 17:34:58  ->  n100.r09.s057.Main.cp_out_file b16b8867 exec extern s3://niema-test/n100/r09/n100.r09.s057.tar.gz 35.7MiB
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): retrieving diagnostic output (try 0): started
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): promoting objects (try 0): started
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): retrieving result (try 0): started
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): retrieving diagnostic output (try 0): started
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:58 scheduler task e5db6835 (flow a262e34f): transferring output (try 0): started
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): retrieving result (try 0): started
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:58 scheduler task 909dc8d5 (flow b75a80ea): transferring output (try 0): started
2021/07/08 17:34:58 scheduler task 9565c197 (flow 4b3a9a68): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8b4291c822f2ff5bb66c89aa523b990af234b962e950ddfcf63274448703ee6a -> s3://niema-test/n100/r09/n100.r09.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:34:58  <-  n100.r09.s006.Main.cp_out_file 4b3a9a68 ok   extern 0s 35.7MiB
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): promoting objects (try 0): started
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): retrieving diagnostic output (try 0): started
2021/07/08 17:34:59 scheduler task 7fb29da1 (flow b16b8867): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9dfe390cf4b1d00559c5e611992b853e12c4aec8223c855585dbba601f56fe3a -> s3://niema-test/n100/r09/n100.r09.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:34:59  <-  n100.r09.s057.Main.cp_out_file b16b8867 ok   extern 0s 35.7MiB
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): retrieving result (try 0): started
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloading (try 0): started
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloading list<val<.=70ab4483 35.7MiB> 35.7MiB>
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloading val<.=5e25cd7e 35.4MiB>
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloading val<.=c7104e39 35.4MiB>
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): transferring output (try 0): started
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloaded list<val<.=70ab4483 35.7MiB> 35.7MiB>
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloaded val<.=5e25cd7e 35.4MiB>
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloaded val<.=c7104e39 35.4MiB>
2021/07/08 17:34:59 scheduler task e5db6835 (flow a262e34f): unloading (try 0): successful, next state: complete
2021/07/08 17:34:59  <-  n100.r09.s099.Main.out_file a262e34f ok     exec 5m1s 35.7MiB
2021/07/08 17:34:59 n100.r09.s099.Main.out_file a262e34f n100/r09/n100.r09.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ee6ddcf63820d8a90d413dbb992cac9a7042c19b811056c760eb9e268f4e58ea
	sha256:a262e34f5e0fc2e70d9c9538a8fc4116061fd4339d0e74e17093d226a2907122
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e5db683568814586da47ef0dc33a61975698c49ea26ce11dbb673dd675536429
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s099_output"
	    wget -O "n100.r09.s099_output/n100.r09.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s099_output/n100.r09.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s099_output/n100.r09.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s099_output/n100.r09.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s099_output/n100.r09.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s099_output/n100.r09.s099.reference.fas" "n100.r09.s099_output/n100.r09.s099.fq1.fastq" "n100.r09.s099_output/n100.r09.s099.fq2.fastq" | samtools view -bS - > "n100.r09.s099_output/n100.r09.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s099_output/n100.r09.s099.untrimmed.sorted.bam" "n100.r09.s099_output/n100.r09.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s099_output/n100.r09.s099.untrimmed.sorted.bam" -b "n100.r09.s099_output/n100.r09.s099.primers.bed" -p "n100.r09.s099_output/n100.r09.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" "n100.r09.s099_output/n100.r09.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s099_output/n100.r09.s099.reference.fas" "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" > "n100.r09.s099_output/n100.r09.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s099_output/n100.r09.s099.reference.fas" --call-indels "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" > "n100.r09.s099_output/n100.r09.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s099_output/n100.r09.s099.trimmed.sorted.bam" > "n100.r09.s099_output/n100.r09.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s099_output/n100.r09.s099.depth.txt" "n100.r09.s099_output/n100.r09.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s099_output/n100.r09.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s099_output/n100.r09.s099.reference.fas" | bcftools consensus -m "n100.r09.s099_output/n100.r09.s099.low_depth.tsv" tmp.vcf.gz > "n100.r09.s099_output/n100.r09.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:70ab44832ae1c93ad5e1847d4077335575db7d9d87f2e0656d4089224435634c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=129.2MiB
	    disk mean=7.3MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:34:59 scheduler task ffeac948 (flow 6fa6c577): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s099.tar.gz resources {}
2021/07/08 17:34:59  ->  n100.r09.s099.Main.cp_out_file 6fa6c577 exec extern s3://niema-test/n100/r09/n100.r09.s099.tar.gz 35.7MiB
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloading (try 0): started
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloading list<val<.=c1ad9eb3 35.7MiB> 35.7MiB>
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloading val<.=2479b33f 35.4MiB>
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloading val<.=46b16ce8 35.4MiB>
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloaded list<val<.=c1ad9eb3 35.7MiB> 35.7MiB>
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloaded val<.=2479b33f 35.4MiB>
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloaded val<.=46b16ce8 35.4MiB>
2021/07/08 17:34:59 scheduler task 909dc8d5 (flow b75a80ea): unloading (try 0): successful, next state: complete
2021/07/08 17:34:59  <-  n100.r09.s082.Main.out_file b75a80ea ok     exec 5m1s 35.7MiB
2021/07/08 17:34:59 n100.r09.s082.Main.out_file b75a80ea n100/r09/n100.r09.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6a8355762c17b6a4582115ad33cd436f81c2c93a416fe7d235bad7be094df00a
	sha256:b75a80eaa7a69cb8c22f59cc4b7089e08074438f7a0ec6d0ed3857496e7f96ad
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/909dc8d530fdc4630e1a231847953d3efef4506025bb209310197eb714487f51
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s082_output"
	    wget -O "n100.r09.s082_output/n100.r09.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s082_output/n100.r09.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s082_output/n100.r09.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s082_output/n100.r09.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s082_output/n100.r09.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s082_output/n100.r09.s082.reference.fas" "n100.r09.s082_output/n100.r09.s082.fq1.fastq" "n100.r09.s082_output/n100.r09.s082.fq2.fastq" | samtools view -bS - > "n100.r09.s082_output/n100.r09.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s082_output/n100.r09.s082.untrimmed.sorted.bam" "n100.r09.s082_output/n100.r09.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s082_output/n100.r09.s082.untrimmed.sorted.bam" -b "n100.r09.s082_output/n100.r09.s082.primers.bed" -p "n100.r09.s082_output/n100.r09.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" "n100.r09.s082_output/n100.r09.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s082_output/n100.r09.s082.reference.fas" "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" > "n100.r09.s082_output/n100.r09.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s082_output/n100.r09.s082.reference.fas" --call-indels "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" > "n100.r09.s082_output/n100.r09.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s082_output/n100.r09.s082.trimmed.sorted.bam" > "n100.r09.s082_output/n100.r09.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s082_output/n100.r09.s082.depth.txt" "n100.r09.s082_output/n100.r09.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s082_output/n100.r09.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s082_output/n100.r09.s082.reference.fas" | bcftools consensus -m "n100.r09.s082_output/n100.r09.s082.low_depth.tsv" tmp.vcf.gz > "n100.r09.s082_output/n100.r09.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c1ad9eb3da845596cbe8447d4cfbb10d260213a4cd809605632776905107086b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=130.0MiB
	    disk mean=6.5MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:34:59 scheduler task 3c87889a (flow 5c30f50e): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s082.tar.gz resources {}
2021/07/08 17:34:59  ->  n100.r09.s082.Main.cp_out_file 5c30f50e exec extern s3://niema-test/n100/r09/n100.r09.s082.tar.gz 35.7MiB
2021/07/08 17:34:59 scheduler task 6a4e8d08 (flow 8ab86c50): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:34:59 scheduler task 6a4e8d08 (flow 8ab86c50): promoting objects (try 0): started
2021/07/08 17:34:59 scheduler task 6a4e8d08 (flow 8ab86c50): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:34:59 scheduler task 6a4e8d08 (flow 8ab86c50): retrieving diagnostic output (try 0): started
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): unloading (try 0): started
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): unloading list<val<.=9101cc09 35.8MiB> 35.8MiB>
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): unloading val<.=6929ce20 35.4MiB>
2021/07/08 17:34:59 scheduler task 107b832c (flow c309afbb): unloading val<.=43a4b1af 35.4MiB>
2021/07/08 17:34:59 scheduler task 6a4e8d08 (flow 8ab86c50): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:34:59 scheduler task 6a4e8d08 (flow 8ab86c50): retrieving result (try 0): started
2021/07/08 17:35:00 scheduler task 107b832c (flow c309afbb): unloaded list<val<.=9101cc09 35.8MiB> 35.8MiB>
2021/07/08 17:35:00 scheduler task 107b832c (flow c309afbb): unloaded val<.=43a4b1af 35.4MiB>
2021/07/08 17:35:00 scheduler task 107b832c (flow c309afbb): unloaded val<.=6929ce20 35.4MiB>
2021/07/08 17:35:00 scheduler task 107b832c (flow c309afbb): unloading (try 0): successful, next state: complete
2021/07/08 17:35:00  <-  n100.r09.s031.Main.out_file c309afbb ok     exec 5m2s 35.8MiB
2021/07/08 17:35:00 n100.r09.s031.Main.out_file c309afbb n100/r09/n100.r09.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:264b9c50a79a9f11c6124d8819b00cc30dc6112deffa6d26930e41574509506a
	sha256:c309afbb6d46c9ad6783071493722612bb30bd0a9d0b86d30dd707ae57c08470
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/107b832cb1fcbf35d4c25a53b09a4b97af2e8475a9410c0abd56972304bfcec8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s031_output"
	    wget -O "n100.r09.s031_output/n100.r09.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s031_output/n100.r09.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s031_output/n100.r09.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s031_output/n100.r09.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s031_output/n100.r09.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s031_output/n100.r09.s031.reference.fas" "n100.r09.s031_output/n100.r09.s031.fq1.fastq" "n100.r09.s031_output/n100.r09.s031.fq2.fastq" | samtools view -bS - > "n100.r09.s031_output/n100.r09.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s031_output/n100.r09.s031.untrimmed.sorted.bam" "n100.r09.s031_output/n100.r09.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s031_output/n100.r09.s031.untrimmed.sorted.bam" -b "n100.r09.s031_output/n100.r09.s031.primers.bed" -p "n100.r09.s031_output/n100.r09.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" "n100.r09.s031_output/n100.r09.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s031_output/n100.r09.s031.reference.fas" "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" > "n100.r09.s031_output/n100.r09.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s031_output/n100.r09.s031.reference.fas" --call-indels "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" > "n100.r09.s031_output/n100.r09.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s031_output/n100.r09.s031.trimmed.sorted.bam" > "n100.r09.s031_output/n100.r09.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s031_output/n100.r09.s031.depth.txt" "n100.r09.s031_output/n100.r09.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s031_output/n100.r09.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s031_output/n100.r09.s031.reference.fas" | bcftools consensus -m "n100.r09.s031_output/n100.r09.s031.low_depth.tsv" tmp.vcf.gz > "n100.r09.s031_output/n100.r09.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9101cc091ba9a237f397db536c7d9e7d78d67268e07ba0fc55a0ee24e9448cab 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=125.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:00 scheduler task 05c2573c (flow 08df35c6): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s031.tar.gz resources {}
2021/07/08 17:35:00  ->  n100.r09.s031.Main.cp_out_file 08df35c6 exec extern s3://niema-test/n100/r09/n100.r09.s031.tar.gz 35.8MiB
2021/07/08 17:35:00 scheduler task ffeac948 (flow 6fa6c577): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:70ab44832ae1c93ad5e1847d4077335575db7d9d87f2e0656d4089224435634c -> s3://niema-test/n100/r09/n100.r09.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:00  <-  n100.r09.s099.Main.cp_out_file 6fa6c577 ok   extern 0s 35.7MiB
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): transferring output (try 0): started
2021/07/08 17:35:00 scheduler task 3c87889a (flow 5c30f50e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c1ad9eb3da845596cbe8447d4cfbb10d260213a4cd809605632776905107086b -> s3://niema-test/n100/r09/n100.r09.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:00  <-  n100.r09.s082.Main.cp_out_file 5c30f50e ok   extern 0s 35.7MiB
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloading (try 0): started
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloading list<val<.=e79223a3 35.7MiB> 35.7MiB>
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloading val<.=cf331490 35.4MiB>
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloading val<.=96e20b31 35.4MiB>
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloaded val<.=cf331490 35.4MiB>
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloaded val<.=96e20b31 35.4MiB>
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloaded list<val<.=e79223a3 35.7MiB> 35.7MiB>
2021/07/08 17:35:00 scheduler task 6a4e8d08 (flow 8ab86c50): unloading (try 0): successful, next state: complete
2021/07/08 17:35:00  <-  n100.r09.s020.Main.out_file 8ab86c50 ok     exec 5m3s 35.7MiB
2021/07/08 17:35:00 n100.r09.s020.Main.out_file 8ab86c50 n100/r09/n100.r09.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9861dae434ca6e77c52771f27da49726caff939f8b33db1d2cb2bf24b794077c
	sha256:8ab86c5015ac1de3220714fa0749d041405c2449514ef066069e4972e93406de
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a4e8d08b772005d76c9e22d56acc3278090f04d35922c92c6b9178aed1de829
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s020_output"
	    wget -O "n100.r09.s020_output/n100.r09.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s020_output/n100.r09.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s020_output/n100.r09.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s020_output/n100.r09.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s020_output/n100.r09.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s020_output/n100.r09.s020.reference.fas" "n100.r09.s020_output/n100.r09.s020.fq1.fastq" "n100.r09.s020_output/n100.r09.s020.fq2.fastq" | samtools view -bS - > "n100.r09.s020_output/n100.r09.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s020_output/n100.r09.s020.untrimmed.sorted.bam" "n100.r09.s020_output/n100.r09.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s020_output/n100.r09.s020.untrimmed.sorted.bam" -b "n100.r09.s020_output/n100.r09.s020.primers.bed" -p "n100.r09.s020_output/n100.r09.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" "n100.r09.s020_output/n100.r09.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s020_output/n100.r09.s020.reference.fas" "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" > "n100.r09.s020_output/n100.r09.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s020_output/n100.r09.s020.reference.fas" --call-indels "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" > "n100.r09.s020_output/n100.r09.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s020_output/n100.r09.s020.trimmed.sorted.bam" > "n100.r09.s020_output/n100.r09.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s020_output/n100.r09.s020.depth.txt" "n100.r09.s020_output/n100.r09.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s020_output/n100.r09.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s020_output/n100.r09.s020.reference.fas" | bcftools consensus -m "n100.r09.s020_output/n100.r09.s020.low_depth.tsv" tmp.vcf.gz > "n100.r09.s020_output/n100.r09.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e79223a3c631a02ba489d4789ce4afc689bfc975e67a31af5df51c467ad34e13 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=123.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:35:00 scheduler task c2d26dbb (flow 2d70dabd): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s020.tar.gz resources {}
2021/07/08 17:35:00  ->  n100.r09.s020.Main.cp_out_file 2d70dabd exec extern s3://niema-test/n100/r09/n100.r09.s020.tar.gz 35.7MiB
2021/07/08 17:35:00 scheduler task 05c2573c (flow 08df35c6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9101cc091ba9a237f397db536c7d9e7d78d67268e07ba0fc55a0ee24e9448cab -> s3://niema-test/n100/r09/n100.r09.s031.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:00  <-  n100.r09.s031.Main.cp_out_file 08df35c6 ok   extern 0s 35.8MiB
2021/07/08 17:35:01 scheduler task c2d26dbb (flow 2d70dabd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e79223a3c631a02ba489d4789ce4afc689bfc975e67a31af5df51c467ad34e13 -> s3://niema-test/n100/r09/n100.r09.s020.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:01  <-  n100.r09.s020.Main.cp_out_file 2d70dabd ok   extern 0s 35.7MiB
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): promoting objects (try 0): started
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): promoting objects (try 0): started
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): retrieving diagnostic output (try 0): started
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): retrieving diagnostic output (try 0): started
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): retrieving result (try 0): started
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): retrieving result (try 0): started
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:02 scheduler task 5b93b009 (flow 214bd342): transferring output (try 0): started
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:02 scheduler task 4e597b0a (flow b6b37969): transferring output (try 0): started
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): promoting objects (try 0): started
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloading (try 0): started
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloading val<.=7e875e75 35.4MiB>
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloading list<val<.=e0408c12 35.7MiB> 35.7MiB>
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloading val<.=9545bc7c 35.4MiB>
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): retrieving diagnostic output (try 0): started
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloading (try 0): started
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloading list<val<.=f85a6b1b 35.8MiB> 35.8MiB>
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloading val<.=f1738bb8 35.4MiB>
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloading val<.=4e285a8b 35.4MiB>
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloaded val<.=9545bc7c 35.4MiB>
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloaded list<val<.=e0408c12 35.7MiB> 35.7MiB>
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloaded val<.=7e875e75 35.4MiB>
2021/07/08 17:35:03 scheduler task 4e597b0a (flow b6b37969): unloading (try 0): successful, next state: complete
2021/07/08 17:35:03  <-  n100.r09.s008.Main.out_file b6b37969 ok     exec 5m6s 35.7MiB
2021/07/08 17:35:03 n100.r09.s008.Main.out_file b6b37969 n100/r09/n100.r09.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:219ceadc2015626fb95e89cf7be6e44e6c61def4366f5ef090e11e7d4e37dee7
	sha256:b6b379696ba23eb5c3511d9a6acaff55f9c6b822da95825bf6d67fe92f959945
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e597b0aa608198ce7872cf938edea0c9f962d585383c02ded419fb28dcccc1f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s008_output"
	    wget -O "n100.r09.s008_output/n100.r09.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s008_output/n100.r09.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s008_output/n100.r09.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s008_output/n100.r09.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s008_output/n100.r09.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s008_output/n100.r09.s008.reference.fas" "n100.r09.s008_output/n100.r09.s008.fq1.fastq" "n100.r09.s008_output/n100.r09.s008.fq2.fastq" | samtools view -bS - > "n100.r09.s008_output/n100.r09.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s008_output/n100.r09.s008.untrimmed.sorted.bam" "n100.r09.s008_output/n100.r09.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s008_output/n100.r09.s008.untrimmed.sorted.bam" -b "n100.r09.s008_output/n100.r09.s008.primers.bed" -p "n100.r09.s008_output/n100.r09.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" "n100.r09.s008_output/n100.r09.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s008_output/n100.r09.s008.reference.fas" "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" > "n100.r09.s008_output/n100.r09.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s008_output/n100.r09.s008.reference.fas" --call-indels "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" > "n100.r09.s008_output/n100.r09.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s008_output/n100.r09.s008.trimmed.sorted.bam" > "n100.r09.s008_output/n100.r09.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s008_output/n100.r09.s008.depth.txt" "n100.r09.s008_output/n100.r09.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s008_output/n100.r09.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s008_output/n100.r09.s008.reference.fas" | bcftools consensus -m "n100.r09.s008_output/n100.r09.s008.low_depth.tsv" tmp.vcf.gz > "n100.r09.s008_output/n100.r09.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e0408c12b64894f29b16887d536f0ee5f37f760b7909b3f8dc14b423c585f47b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=127.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:35:03 scheduler task 44507fd7 (flow 0830dde8): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s008.tar.gz resources {}
2021/07/08 17:35:03  ->  n100.r09.s008.Main.cp_out_file 0830dde8 exec extern s3://niema-test/n100/r09/n100.r09.s008.tar.gz 35.7MiB
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): retrieving result (try 0): started
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloaded list<val<.=f85a6b1b 35.8MiB> 35.8MiB>
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloaded val<.=4e285a8b 35.4MiB>
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloaded val<.=f1738bb8 35.4MiB>
2021/07/08 17:35:03 scheduler task 5b93b009 (flow 214bd342): unloading (try 0): successful, next state: complete
2021/07/08 17:35:03  <-  n100.r09.s056.Main.out_file 214bd342 ok     exec 5m5s 35.8MiB
2021/07/08 17:35:03 n100.r09.s056.Main.out_file 214bd342 n100/r09/n100.r09.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ac4ccfe15f278a19a66b6e43f4eba44b59ecaaa52a5e25b5b28dd1dc39fa037
	sha256:214bd3426222423c536d7902a0deaa1aa60d5a2de5d91b064c2247661148b554
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5b93b0098fe9f82c2ddd75d5709a34a2f468a1c4e35dfe1d7af7f2c40686d50a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s056_output"
	    wget -O "n100.r09.s056_output/n100.r09.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s056_output/n100.r09.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s056_output/n100.r09.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s056_output/n100.r09.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s056_output/n100.r09.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s056_output/n100.r09.s056.reference.fas" "n100.r09.s056_output/n100.r09.s056.fq1.fastq" "n100.r09.s056_output/n100.r09.s056.fq2.fastq" | samtools view -bS - > "n100.r09.s056_output/n100.r09.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s056_output/n100.r09.s056.untrimmed.sorted.bam" "n100.r09.s056_output/n100.r09.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s056_output/n100.r09.s056.untrimmed.sorted.bam" -b "n100.r09.s056_output/n100.r09.s056.primers.bed" -p "n100.r09.s056_output/n100.r09.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" "n100.r09.s056_output/n100.r09.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s056_output/n100.r09.s056.reference.fas" "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" > "n100.r09.s056_output/n100.r09.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s056_output/n100.r09.s056.reference.fas" --call-indels "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" > "n100.r09.s056_output/n100.r09.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s056_output/n100.r09.s056.trimmed.sorted.bam" > "n100.r09.s056_output/n100.r09.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s056_output/n100.r09.s056.depth.txt" "n100.r09.s056_output/n100.r09.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s056_output/n100.r09.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s056_output/n100.r09.s056.reference.fas" | bcftools consensus -m "n100.r09.s056_output/n100.r09.s056.low_depth.tsv" tmp.vcf.gz > "n100.r09.s056_output/n100.r09.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f85a6b1b91071960cea5242c0771a25255d52390aba0910ef4ab1da5d8828be8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=127.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:03 scheduler task 04bcc5e5 (flow 831cfccc): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s056.tar.gz resources {}
2021/07/08 17:35:03  ->  n100.r09.s056.Main.cp_out_file 831cfccc exec extern s3://niema-test/n100/r09/n100.r09.s056.tar.gz 35.8MiB
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): transferring output (try 0): started
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): promoting objects (try 0): started
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): retrieving diagnostic output (try 0): started
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): promoting objects (try 0): started
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): retrieving diagnostic output (try 0): started
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): retrieving result (try 0): started
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:03 scheduler task ec0f1f67 (flow 400d5ba5): transferring output (try 0): started
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): retrieving result (try 0): started
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:03 scheduler task 43278a34 (flow 85764be5): transferring output (try 0): started
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloading (try 0): started
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloading list<val<.=760cf97e 35.8MiB> 35.8MiB>
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloading val<.=0aa1cc98 35.4MiB>
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloading val<.=40cf8b3a 35.4MiB>
2021/07/08 17:35:03 scheduler task 44507fd7 (flow 0830dde8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e0408c12b64894f29b16887d536f0ee5f37f760b7909b3f8dc14b423c585f47b -> s3://niema-test/n100/r09/n100.r09.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:03  <-  n100.r09.s008.Main.cp_out_file 0830dde8 ok   extern 0s 35.7MiB
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloaded list<val<.=760cf97e 35.8MiB> 35.8MiB>
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloaded val<.=0aa1cc98 35.4MiB>
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloaded val<.=40cf8b3a 35.4MiB>
2021/07/08 17:35:03 scheduler task c5cc38da (flow 8dc0d360): unloading (try 0): successful, next state: complete
2021/07/08 17:35:03  <-  n100.r09.s059.Main.out_file 8dc0d360 ok     exec 5m6s 35.8MiB
2021/07/08 17:35:03 n100.r09.s059.Main.out_file 8dc0d360 n100/r09/n100.r09.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5bd88babd21bd9a9da1b21868f8811e9312ea5db025adb97d7d05600091c97d7
	sha256:8dc0d360b85220ed99a081dac8d10c53ca0197d3bef9ecc2f1c8f0c6b59e277b
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5cc38daccd87bcbfb4da5a17c75d25deaf54ea78c4cd8b2687e4165aa715d59
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s059_output"
	    wget -O "n100.r09.s059_output/n100.r09.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s059_output/n100.r09.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s059_output/n100.r09.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s059_output/n100.r09.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s059_output/n100.r09.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s059_output/n100.r09.s059.reference.fas" "n100.r09.s059_output/n100.r09.s059.fq1.fastq" "n100.r09.s059_output/n100.r09.s059.fq2.fastq" | samtools view -bS - > "n100.r09.s059_output/n100.r09.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s059_output/n100.r09.s059.untrimmed.sorted.bam" "n100.r09.s059_output/n100.r09.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s059_output/n100.r09.s059.untrimmed.sorted.bam" -b "n100.r09.s059_output/n100.r09.s059.primers.bed" -p "n100.r09.s059_output/n100.r09.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" "n100.r09.s059_output/n100.r09.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s059_output/n100.r09.s059.reference.fas" "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" > "n100.r09.s059_output/n100.r09.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s059_output/n100.r09.s059.reference.fas" --call-indels "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" > "n100.r09.s059_output/n100.r09.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s059_output/n100.r09.s059.trimmed.sorted.bam" > "n100.r09.s059_output/n100.r09.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s059_output/n100.r09.s059.depth.txt" "n100.r09.s059_output/n100.r09.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s059_output/n100.r09.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s059_output/n100.r09.s059.reference.fas" | bcftools consensus -m "n100.r09.s059_output/n100.r09.s059.low_depth.tsv" tmp.vcf.gz > "n100.r09.s059_output/n100.r09.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:760cf97e0a7aba683b5acb7f7e15446ab664dac9ceacd50c87559065795b0974 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=131.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:03 scheduler task a6ac03a6 (flow 65c7fdd0): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s059.tar.gz resources {}
2021/07/08 17:35:03  ->  n100.r09.s059.Main.cp_out_file 65c7fdd0 exec extern s3://niema-test/n100/r09/n100.r09.s059.tar.gz 35.8MiB
2021/07/08 17:35:04 scheduler task 04bcc5e5 (flow 831cfccc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f85a6b1b91071960cea5242c0771a25255d52390aba0910ef4ab1da5d8828be8 -> s3://niema-test/n100/r09/n100.r09.s056.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:04  <-  n100.r09.s056.Main.cp_out_file 831cfccc ok   extern 0s 35.8MiB
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): promoting objects (try 0): started
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloading (try 0): started
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloading list<val<.=8cd8650c 35.7MiB> 35.7MiB>
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloading val<.=99233897 35.4MiB>
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloading val<.=cfbec142 35.4MiB>
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): retrieving diagnostic output (try 0): started
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloaded val<.=cfbec142 35.4MiB>
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloaded val<.=99233897 35.4MiB>
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloaded list<val<.=8cd8650c 35.7MiB> 35.7MiB>
2021/07/08 17:35:04 scheduler task ec0f1f67 (flow 400d5ba5): unloading (try 0): successful, next state: complete
2021/07/08 17:35:04  <-  n100.r09.s029.Main.out_file 400d5ba5 ok     exec 5m7s 35.7MiB
2021/07/08 17:35:04 n100.r09.s029.Main.out_file 400d5ba5 n100/r09/n100.r09.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aec3698b0c46c557a237206e028bda32759e78ff1be348a73df98fb942415478
	sha256:400d5ba5d74846ab4d8449178968967099fbb6ee370e881ac38f9c5c3a45b332
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ec0f1f67c46eb966e76dbc686fd13adfe6ca321f9cf9481fa579da2ddc6f7c4d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s029_output"
	    wget -O "n100.r09.s029_output/n100.r09.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s029_output/n100.r09.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s029_output/n100.r09.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s029_output/n100.r09.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s029_output/n100.r09.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s029_output/n100.r09.s029.reference.fas" "n100.r09.s029_output/n100.r09.s029.fq1.fastq" "n100.r09.s029_output/n100.r09.s029.fq2.fastq" | samtools view -bS - > "n100.r09.s029_output/n100.r09.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s029_output/n100.r09.s029.untrimmed.sorted.bam" "n100.r09.s029_output/n100.r09.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s029_output/n100.r09.s029.untrimmed.sorted.bam" -b "n100.r09.s029_output/n100.r09.s029.primers.bed" -p "n100.r09.s029_output/n100.r09.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" "n100.r09.s029_output/n100.r09.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s029_output/n100.r09.s029.reference.fas" "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" > "n100.r09.s029_output/n100.r09.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s029_output/n100.r09.s029.reference.fas" --call-indels "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" > "n100.r09.s029_output/n100.r09.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s029_output/n100.r09.s029.trimmed.sorted.bam" > "n100.r09.s029_output/n100.r09.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s029_output/n100.r09.s029.depth.txt" "n100.r09.s029_output/n100.r09.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s029_output/n100.r09.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s029_output/n100.r09.s029.reference.fas" | bcftools consensus -m "n100.r09.s029_output/n100.r09.s029.low_depth.tsv" tmp.vcf.gz > "n100.r09.s029_output/n100.r09.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8cd8650c6b0536be9d9f3d96dbe4b1678ef3a39d149acf8762d06bf918f796c6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:35:04 scheduler task f7fdb3ec (flow 96052eb7): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s029.tar.gz resources {}
2021/07/08 17:35:04  ->  n100.r09.s029.Main.cp_out_file 96052eb7 exec extern s3://niema-test/n100/r09/n100.r09.s029.tar.gz 35.7MiB
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): retrieving result (try 0): started
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloading (try 0): started
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloading list<val<.=b82aa77e 35.7MiB> 35.7MiB>
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloading val<.=a41fbf56 35.4MiB>
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloading val<.=15bd0434 35.4MiB>
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:04 scheduler task d1b88294 (flow e64b8e8e): transferring output (try 0): started
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloaded val<.=15bd0434 35.4MiB>
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloaded val<.=a41fbf56 35.4MiB>
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloaded list<val<.=b82aa77e 35.7MiB> 35.7MiB>
2021/07/08 17:35:04 scheduler task 43278a34 (flow 85764be5): unloading (try 0): successful, next state: complete
2021/07/08 17:35:04  <-  n100.r09.s093.Main.out_file 85764be5 ok     exec 5m7s 35.7MiB
2021/07/08 17:35:04 n100.r09.s093.Main.out_file 85764be5 n100/r09/n100.r09.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:50e9217c18d50b8664a6426e68a9be4540ee8e8d14293f13d0074518548de5aa
	sha256:85764be5b40545b7b7b12acab65b4ae224c9cf9620821c579786fabfacd38ac1
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/43278a3404fd27aec6587130d594a94a2b07939bffcdcb0dcf0b823262643de6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s093_output"
	    wget -O "n100.r09.s093_output/n100.r09.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s093_output/n100.r09.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s093_output/n100.r09.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s093_output/n100.r09.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s093_output/n100.r09.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s093_output/n100.r09.s093.reference.fas" "n100.r09.s093_output/n100.r09.s093.fq1.fastq" "n100.r09.s093_output/n100.r09.s093.fq2.fastq" | samtools view -bS - > "n100.r09.s093_output/n100.r09.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s093_output/n100.r09.s093.untrimmed.sorted.bam" "n100.r09.s093_output/n100.r09.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s093_output/n100.r09.s093.untrimmed.sorted.bam" -b "n100.r09.s093_output/n100.r09.s093.primers.bed" -p "n100.r09.s093_output/n100.r09.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" "n100.r09.s093_output/n100.r09.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s093_output/n100.r09.s093.reference.fas" "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" > "n100.r09.s093_output/n100.r09.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s093_output/n100.r09.s093.reference.fas" --call-indels "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" > "n100.r09.s093_output/n100.r09.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s093_output/n100.r09.s093.trimmed.sorted.bam" > "n100.r09.s093_output/n100.r09.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s093_output/n100.r09.s093.depth.txt" "n100.r09.s093_output/n100.r09.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s093_output/n100.r09.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s093_output/n100.r09.s093.reference.fas" | bcftools consensus -m "n100.r09.s093_output/n100.r09.s093.low_depth.tsv" tmp.vcf.gz > "n100.r09.s093_output/n100.r09.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b82aa77e4cb9ccf416e6b58040b80940b93d9e360ab4722bb050da92bc24d009 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.4MiB max=126.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:04 scheduler task 1ec77f6e (flow cf608a5d): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s093.tar.gz resources {}
2021/07/08 17:35:04  ->  n100.r09.s093.Main.cp_out_file cf608a5d exec extern s3://niema-test/n100/r09/n100.r09.s093.tar.gz 35.7MiB
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): promoting objects (try 0): started
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:04 scheduler task a6ac03a6 (flow 65c7fdd0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:760cf97e0a7aba683b5acb7f7e15446ab664dac9ceacd50c87559065795b0974 -> s3://niema-test/n100/r09/n100.r09.s059.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:04  <-  n100.r09.s059.Main.cp_out_file 65c7fdd0 ok   extern 0s 35.8MiB
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): retrieving result (try 0): started
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:04 scheduler task 2a30e645 (flow 4834e08f): transferring output (try 0): started
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloading (try 0): started
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloading list<val<.=ebddc3de 35.7MiB> 35.7MiB>
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloading val<.=29e94f5b 35.4MiB>
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloading val<.=e9e6c4fc 35.4MiB>
2021/07/08 17:35:05 scheduler task f7fdb3ec (flow 96052eb7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8cd8650c6b0536be9d9f3d96dbe4b1678ef3a39d149acf8762d06bf918f796c6 -> s3://niema-test/n100/r09/n100.r09.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:05  <-  n100.r09.s029.Main.cp_out_file 96052eb7 ok   extern 0s 35.7MiB
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): promoting objects (try 0): started
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloaded val<.=29e94f5b 35.4MiB>
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloaded list<val<.=ebddc3de 35.7MiB> 35.7MiB>
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloaded val<.=e9e6c4fc 35.4MiB>
2021/07/08 17:35:05 scheduler task d1b88294 (flow e64b8e8e): unloading (try 0): successful, next state: complete
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:05  <-  n100.r09.s047.Main.out_file e64b8e8e ok     exec 5m8s 35.7MiB
2021/07/08 17:35:05 n100.r09.s047.Main.out_file e64b8e8e n100/r09/n100.r09.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:18a05d25500f0bb3eb79254402c3f8ce8b2f120fcf5a8b0aa3bf3da35e16ff7d
	sha256:e64b8e8ebf811859886ec5fec48ea810d9ce11359dc0f55b2eba983793138504
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d1b882948b7df947faa7ccc212c0710d2aa54860d61f5c10a3b1dea7ad3dc52d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s047_output"
	    wget -O "n100.r09.s047_output/n100.r09.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s047_output/n100.r09.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s047_output/n100.r09.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s047_output/n100.r09.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s047_output/n100.r09.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s047_output/n100.r09.s047.reference.fas" "n100.r09.s047_output/n100.r09.s047.fq1.fastq" "n100.r09.s047_output/n100.r09.s047.fq2.fastq" | samtools view -bS - > "n100.r09.s047_output/n100.r09.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s047_output/n100.r09.s047.untrimmed.sorted.bam" "n100.r09.s047_output/n100.r09.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s047_output/n100.r09.s047.untrimmed.sorted.bam" -b "n100.r09.s047_output/n100.r09.s047.primers.bed" -p "n100.r09.s047_output/n100.r09.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" "n100.r09.s047_output/n100.r09.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s047_output/n100.r09.s047.reference.fas" "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" > "n100.r09.s047_output/n100.r09.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s047_output/n100.r09.s047.reference.fas" --call-indels "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" > "n100.r09.s047_output/n100.r09.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s047_output/n100.r09.s047.trimmed.sorted.bam" > "n100.r09.s047_output/n100.r09.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s047_output/n100.r09.s047.depth.txt" "n100.r09.s047_output/n100.r09.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s047_output/n100.r09.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s047_output/n100.r09.s047.reference.fas" | bcftools consensus -m "n100.r09.s047_output/n100.r09.s047.low_depth.tsv" tmp.vcf.gz > "n100.r09.s047_output/n100.r09.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ebddc3deff27009c47827393f759500438e9025bcf1e3a38408f04c649630f91 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=125.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:05 scheduler task 70e97501 (flow 0f63f2d4): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s047.tar.gz resources {}
2021/07/08 17:35:05  ->  n100.r09.s047.Main.cp_out_file 0f63f2d4 exec extern s3://niema-test/n100/r09/n100.r09.s047.tar.gz 35.7MiB
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): retrieving diagnostic output (try 0): started
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): retrieving result (try 0): started
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): transferring output (try 0): started
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloading (try 0): started
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloading list<val<.=58238ef9 35.7MiB> 35.7MiB>
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloading val<.=7f5fde9a 35.4MiB>
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloading val<.=142cb683 35.4MiB>
2021/07/08 17:35:05 scheduler task 1ec77f6e (flow cf608a5d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b82aa77e4cb9ccf416e6b58040b80940b93d9e360ab4722bb050da92bc24d009 -> s3://niema-test/n100/r09/n100.r09.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:05  <-  n100.r09.s093.Main.cp_out_file cf608a5d ok   extern 0s 35.7MiB
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloaded val<.=142cb683 35.4MiB>
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloaded list<val<.=58238ef9 35.7MiB> 35.7MiB>
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloaded val<.=7f5fde9a 35.4MiB>
2021/07/08 17:35:05 scheduler task 2a30e645 (flow 4834e08f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:05  <-  n100.r09.s054.Main.out_file 4834e08f ok     exec 5m8s 35.7MiB
2021/07/08 17:35:05 n100.r09.s054.Main.out_file 4834e08f n100/r09/n100.r09.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:02327f5c989c0a1cdba5b7a5eb6178fef6e593697ae865d9bbe95eea83e661b0
	sha256:4834e08f0b3698340b86933096a3ab30232469d3734f3b07ffdab85387db9fce
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2a30e645e4aa12fa635ff06848f2a3d4ba12d607c2047df7076d9ca81acc8630
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s054_output"
	    wget -O "n100.r09.s054_output/n100.r09.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s054_output/n100.r09.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s054_output/n100.r09.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s054_output/n100.r09.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s054_output/n100.r09.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s054_output/n100.r09.s054.reference.fas" "n100.r09.s054_output/n100.r09.s054.fq1.fastq" "n100.r09.s054_output/n100.r09.s054.fq2.fastq" | samtools view -bS - > "n100.r09.s054_output/n100.r09.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s054_output/n100.r09.s054.untrimmed.sorted.bam" "n100.r09.s054_output/n100.r09.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s054_output/n100.r09.s054.untrimmed.sorted.bam" -b "n100.r09.s054_output/n100.r09.s054.primers.bed" -p "n100.r09.s054_output/n100.r09.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" "n100.r09.s054_output/n100.r09.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s054_output/n100.r09.s054.reference.fas" "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" > "n100.r09.s054_output/n100.r09.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s054_output/n100.r09.s054.reference.fas" --call-indels "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" > "n100.r09.s054_output/n100.r09.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s054_output/n100.r09.s054.trimmed.sorted.bam" > "n100.r09.s054_output/n100.r09.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s054_output/n100.r09.s054.depth.txt" "n100.r09.s054_output/n100.r09.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s054_output/n100.r09.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s054_output/n100.r09.s054.reference.fas" | bcftools consensus -m "n100.r09.s054_output/n100.r09.s054.low_depth.tsv" tmp.vcf.gz > "n100.r09.s054_output/n100.r09.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:58238ef97010c0ca41dadfc631e6de9be493dae77139c7fe1af283611005c731 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=127.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=700B max=2.1KiB
2021/07/08 17:35:05 scheduler task e9ca520d (flow 88f63b45): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s054.tar.gz resources {}
2021/07/08 17:35:05  ->  n100.r09.s054.Main.cp_out_file 88f63b45 exec extern s3://niema-test/n100/r09/n100.r09.s054.tar.gz 35.7MiB
2021/07/08 17:35:05 scheduler task 70e97501 (flow 0f63f2d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ebddc3deff27009c47827393f759500438e9025bcf1e3a38408f04c649630f91 -> s3://niema-test/n100/r09/n100.r09.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:05  <-  n100.r09.s047.Main.cp_out_file 0f63f2d4 ok   extern 0s 35.7MiB
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): unloading (try 0): started
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): unloading list<val<.=fc74576a 35.7MiB> 35.7MiB>
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): unloading val<.=65a93da3 35.4MiB>
2021/07/08 17:35:05 scheduler task e67b8fea (flow ff045352): unloading val<.=5f9b8cad 35.4MiB>
2021/07/08 17:35:06 scheduler task e67b8fea (flow ff045352): unloaded val<.=5f9b8cad 35.4MiB>
2021/07/08 17:35:06 scheduler task e67b8fea (flow ff045352): unloaded list<val<.=fc74576a 35.7MiB> 35.7MiB>
2021/07/08 17:35:06 scheduler task e67b8fea (flow ff045352): unloaded val<.=65a93da3 35.4MiB>
2021/07/08 17:35:06 scheduler task e67b8fea (flow ff045352): unloading (try 0): successful, next state: complete
2021/07/08 17:35:06  <-  n100.r09.s078.Main.out_file ff045352 ok     exec 5m9s 35.7MiB
2021/07/08 17:35:06 n100.r09.s078.Main.out_file ff045352 n100/r09/n100.r09.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f4d428ee99d6c00d916f763fffce3069c5e9fb4d0184ae9e7a6d81aae9054ca
	sha256:ff045352ea68f95bc969595fbafe27be2c2d5604be343b115eea5ebb8177b106
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e67b8fea56aba9eff17fa39472b33c31441d12e9f4eaebe8ba6f6619d49b0b51
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s078_output"
	    wget -O "n100.r09.s078_output/n100.r09.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s078_output/n100.r09.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s078_output/n100.r09.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s078_output/n100.r09.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s078_output/n100.r09.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s078_output/n100.r09.s078.reference.fas" "n100.r09.s078_output/n100.r09.s078.fq1.fastq" "n100.r09.s078_output/n100.r09.s078.fq2.fastq" | samtools view -bS - > "n100.r09.s078_output/n100.r09.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s078_output/n100.r09.s078.untrimmed.sorted.bam" "n100.r09.s078_output/n100.r09.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s078_output/n100.r09.s078.untrimmed.sorted.bam" -b "n100.r09.s078_output/n100.r09.s078.primers.bed" -p "n100.r09.s078_output/n100.r09.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" "n100.r09.s078_output/n100.r09.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s078_output/n100.r09.s078.reference.fas" "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" > "n100.r09.s078_output/n100.r09.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s078_output/n100.r09.s078.reference.fas" --call-indels "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" > "n100.r09.s078_output/n100.r09.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s078_output/n100.r09.s078.trimmed.sorted.bam" > "n100.r09.s078_output/n100.r09.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s078_output/n100.r09.s078.depth.txt" "n100.r09.s078_output/n100.r09.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s078_output/n100.r09.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s078_output/n100.r09.s078.reference.fas" | bcftools consensus -m "n100.r09.s078_output/n100.r09.s078.low_depth.tsv" tmp.vcf.gz > "n100.r09.s078_output/n100.r09.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fc74576a65a5ed4baf0886007d674861761e407f5998be564790fa1c245e9769 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=127.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:06 scheduler task dff876e7 (flow 01d825ba): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s078.tar.gz resources {}
2021/07/08 17:35:06  ->  n100.r09.s078.Main.cp_out_file 01d825ba exec extern s3://niema-test/n100/r09/n100.r09.s078.tar.gz 35.7MiB
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): promoting objects (try 0): started
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): retrieving diagnostic output (try 0): started
2021/07/08 17:35:06 scheduler task e9ca520d (flow 88f63b45): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:58238ef97010c0ca41dadfc631e6de9be493dae77139c7fe1af283611005c731 -> s3://niema-test/n100/r09/n100.r09.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:06  <-  n100.r09.s054.Main.cp_out_file 88f63b45 ok   extern 0s 35.7MiB
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): retrieving result (try 0): started
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): transferring output (try 0): started
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): promoting objects (try 0): started
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): retrieving diagnostic output (try 0): started
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): promoting objects (try 0): started
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): retrieving result (try 0): started
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): retrieving diagnostic output (try 0): started
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:06 scheduler task 2230bc53 (flow 62a0035c): transferring output (try 0): started
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): retrieving result (try 0): started
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:06 scheduler task 25cadac9 (flow bac83fae): transferring output (try 0): started
2021/07/08 17:35:06 scheduler task dff876e7 (flow 01d825ba): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fc74576a65a5ed4baf0886007d674861761e407f5998be564790fa1c245e9769 -> s3://niema-test/n100/r09/n100.r09.s078.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:06  <-  n100.r09.s078.Main.cp_out_file 01d825ba ok   extern 0s 35.7MiB
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloading (try 0): started
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloading list<val<.=9966e097 35.7MiB> 35.7MiB>
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloading val<.=3fab4053 35.4MiB>
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloading val<.=9ff63b1b 35.4MiB>
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloaded val<.=9ff63b1b 35.4MiB>
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloaded list<val<.=9966e097 35.7MiB> 35.7MiB>
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloaded val<.=3fab4053 35.4MiB>
2021/07/08 17:35:06 scheduler task b00facdf (flow 202714e1): unloading (try 0): successful, next state: complete
2021/07/08 17:35:07  <-  n100.r09.s005.Main.out_file 202714e1 ok     exec 5m10s 35.7MiB
2021/07/08 17:35:07 n100.r09.s005.Main.out_file 202714e1 n100/r09/n100.r09.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:50a583a946fc6c86a0b0af335625296413a6c8b6c27817a705c09b6f8d41b6e1
	sha256:202714e12fe7885656c742d7241def04b2cf69a460c25081bb5ffed80489803d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b00facdf56381f32fbbc8feb57d68ea9de8518b8543faabe6a0f179ff98e1e6f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s005_output"
	    wget -O "n100.r09.s005_output/n100.r09.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s005_output/n100.r09.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s005_output/n100.r09.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s005_output/n100.r09.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s005_output/n100.r09.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s005_output/n100.r09.s005.reference.fas" "n100.r09.s005_output/n100.r09.s005.fq1.fastq" "n100.r09.s005_output/n100.r09.s005.fq2.fastq" | samtools view -bS - > "n100.r09.s005_output/n100.r09.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s005_output/n100.r09.s005.untrimmed.sorted.bam" "n100.r09.s005_output/n100.r09.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s005_output/n100.r09.s005.untrimmed.sorted.bam" -b "n100.r09.s005_output/n100.r09.s005.primers.bed" -p "n100.r09.s005_output/n100.r09.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" "n100.r09.s005_output/n100.r09.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s005_output/n100.r09.s005.reference.fas" "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" > "n100.r09.s005_output/n100.r09.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s005_output/n100.r09.s005.reference.fas" --call-indels "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" > "n100.r09.s005_output/n100.r09.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s005_output/n100.r09.s005.trimmed.sorted.bam" > "n100.r09.s005_output/n100.r09.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s005_output/n100.r09.s005.depth.txt" "n100.r09.s005_output/n100.r09.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s005_output/n100.r09.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s005_output/n100.r09.s005.reference.fas" | bcftools consensus -m "n100.r09.s005_output/n100.r09.s005.low_depth.tsv" tmp.vcf.gz > "n100.r09.s005_output/n100.r09.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9966e09744fba23fa57e991c61656385b4f41d3d069918c0aeded05dc53eca62 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=127.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:35:07 scheduler task a8f94079 (flow 9a2bed64): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s005.tar.gz resources {}
2021/07/08 17:35:07  ->  n100.r09.s005.Main.cp_out_file 9a2bed64 exec extern s3://niema-test/n100/r09/n100.r09.s005.tar.gz 35.7MiB
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloading (try 0): started
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloading list<val<.=843efc53 35.8MiB> 35.8MiB>
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloading val<.=455a90ae 35.4MiB>
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloading val<.=908e0a75 35.4MiB>
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloading (try 0): started
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloading list<val<.=52266754 35.8MiB> 35.8MiB>
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloading val<.=d5914966 35.4MiB>
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloading val<.=1d78aa5f 35.4MiB>
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloaded list<val<.=843efc53 35.8MiB> 35.8MiB>
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloaded val<.=455a90ae 35.4MiB>
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloaded val<.=908e0a75 35.4MiB>
2021/07/08 17:35:07 scheduler task 2230bc53 (flow 62a0035c): unloading (try 0): successful, next state: complete
2021/07/08 17:35:07  <-  n100.r09.s030.Main.out_file 62a0035c ok     exec 5m10s 35.8MiB
2021/07/08 17:35:07 n100.r09.s030.Main.out_file 62a0035c n100/r09/n100.r09.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:95248b43ad0cbbed648f614381a51edca38a228e50a78ec71d2b0aa61b61206b
	sha256:62a0035c5c70de34df791b44ae4b4f682dfdd9081e1b6275add586385fb2b1d7
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2230bc533dee45d7ef475121dc9f11beb6c0975eba659739f632a93f8a076167
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s030_output"
	    wget -O "n100.r09.s030_output/n100.r09.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s030_output/n100.r09.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s030_output/n100.r09.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s030_output/n100.r09.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s030_output/n100.r09.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s030_output/n100.r09.s030.reference.fas" "n100.r09.s030_output/n100.r09.s030.fq1.fastq" "n100.r09.s030_output/n100.r09.s030.fq2.fastq" | samtools view -bS - > "n100.r09.s030_output/n100.r09.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s030_output/n100.r09.s030.untrimmed.sorted.bam" "n100.r09.s030_output/n100.r09.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s030_output/n100.r09.s030.untrimmed.sorted.bam" -b "n100.r09.s030_output/n100.r09.s030.primers.bed" -p "n100.r09.s030_output/n100.r09.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" "n100.r09.s030_output/n100.r09.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s030_output/n100.r09.s030.reference.fas" "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" > "n100.r09.s030_output/n100.r09.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s030_output/n100.r09.s030.reference.fas" --call-indels "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" > "n100.r09.s030_output/n100.r09.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s030_output/n100.r09.s030.trimmed.sorted.bam" > "n100.r09.s030_output/n100.r09.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s030_output/n100.r09.s030.depth.txt" "n100.r09.s030_output/n100.r09.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s030_output/n100.r09.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s030_output/n100.r09.s030.reference.fas" | bcftools consensus -m "n100.r09.s030_output/n100.r09.s030.low_depth.tsv" tmp.vcf.gz > "n100.r09.s030_output/n100.r09.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:843efc530da5d9e796f731e4006818fd0e80c44c064c9c5ac522ba5492e239db 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=125.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:35:07 scheduler task ad572912 (flow 1577f960): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s030.tar.gz resources {}
2021/07/08 17:35:07  ->  n100.r09.s030.Main.cp_out_file 1577f960 exec extern s3://niema-test/n100/r09/n100.r09.s030.tar.gz 35.8MiB
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloaded list<val<.=52266754 35.8MiB> 35.8MiB>
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloaded val<.=d5914966 35.4MiB>
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloaded val<.=1d78aa5f 35.4MiB>
2021/07/08 17:35:07 scheduler task 25cadac9 (flow bac83fae): unloading (try 0): successful, next state: complete
2021/07/08 17:35:07  <-  n100.r09.s095.Main.out_file bac83fae ok     exec 5m10s 35.8MiB
2021/07/08 17:35:07 n100.r09.s095.Main.out_file bac83fae n100/r09/n100.r09.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f58a1a01e036c52c0f4a8ab31565204e607e7a229a2d9d1283b4aaacccafc59e
	sha256:bac83faeb8f216973ff31f517805f0ce26fd6bfb1a081a00e62b8425cd7ec9d8
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/25cadac94d5602052db15d5bcfd40187510421b2d4f959149b35a8f0356431f5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s095_output"
	    wget -O "n100.r09.s095_output/n100.r09.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s095_output/n100.r09.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s095_output/n100.r09.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s095_output/n100.r09.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s095_output/n100.r09.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s095_output/n100.r09.s095.reference.fas" "n100.r09.s095_output/n100.r09.s095.fq1.fastq" "n100.r09.s095_output/n100.r09.s095.fq2.fastq" | samtools view -bS - > "n100.r09.s095_output/n100.r09.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s095_output/n100.r09.s095.untrimmed.sorted.bam" "n100.r09.s095_output/n100.r09.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s095_output/n100.r09.s095.untrimmed.sorted.bam" -b "n100.r09.s095_output/n100.r09.s095.primers.bed" -p "n100.r09.s095_output/n100.r09.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" "n100.r09.s095_output/n100.r09.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s095_output/n100.r09.s095.reference.fas" "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" > "n100.r09.s095_output/n100.r09.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s095_output/n100.r09.s095.reference.fas" --call-indels "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" > "n100.r09.s095_output/n100.r09.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s095_output/n100.r09.s095.trimmed.sorted.bam" > "n100.r09.s095_output/n100.r09.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s095_output/n100.r09.s095.depth.txt" "n100.r09.s095_output/n100.r09.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s095_output/n100.r09.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s095_output/n100.r09.s095.reference.fas" | bcftools consensus -m "n100.r09.s095_output/n100.r09.s095.low_depth.tsv" tmp.vcf.gz > "n100.r09.s095_output/n100.r09.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:522667545d62f65d9630c0cdfdedd6edd788575c34fdbfd752fe9951e8d57461 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=129.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:35:07 scheduler task 95904053 (flow a4f47967): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s095.tar.gz resources {}
2021/07/08 17:35:07  ->  n100.r09.s095.Main.cp_out_file a4f47967 exec extern s3://niema-test/n100/r09/n100.r09.s095.tar.gz 35.8MiB
2021/07/08 17:35:07 scheduler task a8f94079 (flow 9a2bed64): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9966e09744fba23fa57e991c61656385b4f41d3d069918c0aeded05dc53eca62 -> s3://niema-test/n100/r09/n100.r09.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:07  <-  n100.r09.s005.Main.cp_out_file 9a2bed64 ok   extern 0s 35.7MiB
2021/07/08 17:35:08 scheduler task ad572912 (flow 1577f960): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:843efc530da5d9e796f731e4006818fd0e80c44c064c9c5ac522ba5492e239db -> s3://niema-test/n100/r09/n100.r09.s030.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:08  <-  n100.r09.s030.Main.cp_out_file 1577f960 ok   extern 0s 35.8MiB
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): promoting objects (try 0): started
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): promoting objects (try 0): started
2021/07/08 17:35:08 scheduler task 95904053 (flow a4f47967): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:522667545d62f65d9630c0cdfdedd6edd788575c34fdbfd752fe9951e8d57461 -> s3://niema-test/n100/r09/n100.r09.s095.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:08  <-  n100.r09.s095.Main.cp_out_file a4f47967 ok   extern 0s 35.8MiB
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): retrieving diagnostic output (try 0): started
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): retrieving diagnostic output (try 0): started
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): retrieving result (try 0): started
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): retrieving result (try 0): started
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:08 scheduler task c5ef6095 (flow 7b48a912): transferring output (try 0): started
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:08 scheduler task bcbe460f (flow 032e076c): transferring output (try 0): started
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloading (try 0): started
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloading list<val<.=ab1098c7 35.7MiB> 35.7MiB>
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloading val<.=0d758fb3 35.4MiB>
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloading val<.=61eeaa51 35.4MiB>
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloading (try 0): started
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloading list<val<.=c06348cd 35.7MiB> 35.7MiB>
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloading val<.=4551de97 35.4MiB>
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloading val<.=e36d7959 35.4MiB>
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloaded val<.=61eeaa51 35.4MiB>
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloaded list<val<.=ab1098c7 35.7MiB> 35.7MiB>
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloaded val<.=0d758fb3 35.4MiB>
2021/07/08 17:35:09 scheduler task bcbe460f (flow 032e076c): unloading (try 0): successful, next state: complete
2021/07/08 17:35:09  <-  n100.r09.s002.Main.out_file 032e076c ok     exec 5m12s 35.7MiB
2021/07/08 17:35:09 n100.r09.s002.Main.out_file 032e076c n100/r09/n100.r09.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5a1e6131695632db23159b7bbe9268aaa05ebb91f7d41c836cc393864616d6cb
	sha256:032e076c929470b21eb88d41c4d24857cd9085451b466302c8372db4946578c7
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bcbe460f7be25fd8069b739a0b4b2b58c7be37119ae3de61b9caf6e521b0dce8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s002_output"
	    wget -O "n100.r09.s002_output/n100.r09.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s002_output/n100.r09.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s002_output/n100.r09.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s002_output/n100.r09.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s002_output/n100.r09.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s002_output/n100.r09.s002.reference.fas" "n100.r09.s002_output/n100.r09.s002.fq1.fastq" "n100.r09.s002_output/n100.r09.s002.fq2.fastq" | samtools view -bS - > "n100.r09.s002_output/n100.r09.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s002_output/n100.r09.s002.untrimmed.sorted.bam" "n100.r09.s002_output/n100.r09.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s002_output/n100.r09.s002.untrimmed.sorted.bam" -b "n100.r09.s002_output/n100.r09.s002.primers.bed" -p "n100.r09.s002_output/n100.r09.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" "n100.r09.s002_output/n100.r09.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s002_output/n100.r09.s002.reference.fas" "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" > "n100.r09.s002_output/n100.r09.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s002_output/n100.r09.s002.reference.fas" --call-indels "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" > "n100.r09.s002_output/n100.r09.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s002_output/n100.r09.s002.trimmed.sorted.bam" > "n100.r09.s002_output/n100.r09.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s002_output/n100.r09.s002.depth.txt" "n100.r09.s002_output/n100.r09.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s002_output/n100.r09.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s002_output/n100.r09.s002.reference.fas" | bcftools consensus -m "n100.r09.s002_output/n100.r09.s002.low_depth.tsv" tmp.vcf.gz > "n100.r09.s002_output/n100.r09.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ab1098c72732307db78377edea28acaf3699c58bd580a4a0943bfe078d27d648 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=124.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=876B max=2.1KiB
2021/07/08 17:35:09 scheduler task ab888e38 (flow 2ab9e757): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s002.tar.gz resources {}
2021/07/08 17:35:09  ->  n100.r09.s002.Main.cp_out_file 2ab9e757 exec extern s3://niema-test/n100/r09/n100.r09.s002.tar.gz 35.7MiB
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloaded val<.=4551de97 35.4MiB>
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloaded list<val<.=c06348cd 35.7MiB> 35.7MiB>
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloaded val<.=e36d7959 35.4MiB>
2021/07/08 17:35:09 scheduler task c5ef6095 (flow 7b48a912): unloading (try 0): successful, next state: complete
2021/07/08 17:35:09  <-  n100.r09.s055.Main.out_file 7b48a912 ok     exec 5m12s 35.7MiB
2021/07/08 17:35:09 n100.r09.s055.Main.out_file 7b48a912 n100/r09/n100.r09.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebf99d5fc86d79dcd2bd5d491f35f8925f37fdb2b8ce33d9360a359cff3ce03e
	sha256:7b48a91214c165203dea30dea0a089d00c069c44cea837dc52431fbbff12220e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5ef60959a99537b4799b711e95ece2644ba685d3070312189c4eca5c46ace93
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s055_output"
	    wget -O "n100.r09.s055_output/n100.r09.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s055_output/n100.r09.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s055_output/n100.r09.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s055_output/n100.r09.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s055_output/n100.r09.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s055_output/n100.r09.s055.reference.fas" "n100.r09.s055_output/n100.r09.s055.fq1.fastq" "n100.r09.s055_output/n100.r09.s055.fq2.fastq" | samtools view -bS - > "n100.r09.s055_output/n100.r09.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s055_output/n100.r09.s055.untrimmed.sorted.bam" "n100.r09.s055_output/n100.r09.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s055_output/n100.r09.s055.untrimmed.sorted.bam" -b "n100.r09.s055_output/n100.r09.s055.primers.bed" -p "n100.r09.s055_output/n100.r09.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" "n100.r09.s055_output/n100.r09.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s055_output/n100.r09.s055.reference.fas" "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" > "n100.r09.s055_output/n100.r09.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s055_output/n100.r09.s055.reference.fas" --call-indels "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" > "n100.r09.s055_output/n100.r09.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s055_output/n100.r09.s055.trimmed.sorted.bam" > "n100.r09.s055_output/n100.r09.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s055_output/n100.r09.s055.depth.txt" "n100.r09.s055_output/n100.r09.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s055_output/n100.r09.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s055_output/n100.r09.s055.reference.fas" | bcftools consensus -m "n100.r09.s055_output/n100.r09.s055.low_depth.tsv" tmp.vcf.gz > "n100.r09.s055_output/n100.r09.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c06348cd31894a2b3e08f32ccce0918fd0892d55b8eb1751d8c06727624f5581 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=127.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=873B max=2.1KiB
2021/07/08 17:35:09 scheduler task ac6d6b9d (flow 377ea746): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s055.tar.gz resources {}
2021/07/08 17:35:09  ->  n100.r09.s055.Main.cp_out_file 377ea746 exec extern s3://niema-test/n100/r09/n100.r09.s055.tar.gz 35.7MiB
2021/07/08 17:35:10 scheduler task ac6d6b9d (flow 377ea746): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c06348cd31894a2b3e08f32ccce0918fd0892d55b8eb1751d8c06727624f5581 -> s3://niema-test/n100/r09/n100.r09.s055.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:10  <-  n100.r09.s055.Main.cp_out_file 377ea746 ok   extern 0s 35.7MiB
2021/07/08 17:35:10 scheduler task ab888e38 (flow 2ab9e757): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ab1098c72732307db78377edea28acaf3699c58bd580a4a0943bfe078d27d648 -> s3://niema-test/n100/r09/n100.r09.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:10  <-  n100.r09.s002.Main.cp_out_file 2ab9e757 ok   extern 0s 35.7MiB
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): promoting objects (try 0): started
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): retrieving diagnostic output (try 0): started
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): retrieving result (try 0): started
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:14 scheduler task d868dd9b (flow 8715eadd): transferring output (try 0): started
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloading (try 0): started
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloading list<val<.=69b8ad40 35.7MiB> 35.7MiB>
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloading val<.=dfafecc3 35.4MiB>
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloading val<.=f92a6b73 35.4MiB>
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloaded list<val<.=69b8ad40 35.7MiB> 35.7MiB>
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloaded val<.=f92a6b73 35.4MiB>
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloaded val<.=dfafecc3 35.4MiB>
2021/07/08 17:35:15 scheduler task d868dd9b (flow 8715eadd): unloading (try 0): successful, next state: complete
2021/07/08 17:35:15  <-  n100.r09.s081.Main.out_file 8715eadd ok     exec 5m6s 35.7MiB
2021/07/08 17:35:15 n100.r09.s081.Main.out_file 8715eadd n100/r09/n100.r09.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e0e6d66086930726f2da3f273fbedec81a6cc203abfdcdfeafbdb9036af4c9c
	sha256:8715eadd8919ef1f5d7ceb49682eedbc0a6480c42d96a920c34c45bebda91b46
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d868dd9b884905f128d670ab2975363ba2f8c11865ee38e13a8283d8b6793500
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s081_output"
	    wget -O "n100.r09.s081_output/n100.r09.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s081_output/n100.r09.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s081_output/n100.r09.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s081_output/n100.r09.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s081_output/n100.r09.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s081_output/n100.r09.s081.reference.fas" "n100.r09.s081_output/n100.r09.s081.fq1.fastq" "n100.r09.s081_output/n100.r09.s081.fq2.fastq" | samtools view -bS - > "n100.r09.s081_output/n100.r09.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s081_output/n100.r09.s081.untrimmed.sorted.bam" "n100.r09.s081_output/n100.r09.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s081_output/n100.r09.s081.untrimmed.sorted.bam" -b "n100.r09.s081_output/n100.r09.s081.primers.bed" -p "n100.r09.s081_output/n100.r09.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" "n100.r09.s081_output/n100.r09.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s081_output/n100.r09.s081.reference.fas" "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" > "n100.r09.s081_output/n100.r09.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s081_output/n100.r09.s081.reference.fas" --call-indels "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" > "n100.r09.s081_output/n100.r09.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s081_output/n100.r09.s081.trimmed.sorted.bam" > "n100.r09.s081_output/n100.r09.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s081_output/n100.r09.s081.depth.txt" "n100.r09.s081_output/n100.r09.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s081_output/n100.r09.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s081_output/n100.r09.s081.reference.fas" | bcftools consensus -m "n100.r09.s081_output/n100.r09.s081.low_depth.tsv" tmp.vcf.gz > "n100.r09.s081_output/n100.r09.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:69b8ad40c3bd78286073b72e699f8518d8de89706c5ba54eba3a5ac93c9bb441 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.0MiB max=125.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:15 scheduler task dce2e4d2 (flow e86067f2): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s081.tar.gz resources {}
2021/07/08 17:35:15  ->  n100.r09.s081.Main.cp_out_file e86067f2 exec extern s3://niema-test/n100/r09/n100.r09.s081.tar.gz 35.7MiB
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): promoting objects (try 0): started
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): retrieving diagnostic output (try 0): started
2021/07/08 17:35:16 scheduler task dce2e4d2 (flow e86067f2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:69b8ad40c3bd78286073b72e699f8518d8de89706c5ba54eba3a5ac93c9bb441 -> s3://niema-test/n100/r09/n100.r09.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:16  <-  n100.r09.s081.Main.cp_out_file e86067f2 ok   extern 0s 35.7MiB
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): promoting objects (try 0): started
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): retrieving result (try 0): started
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): retrieving diagnostic output (try 0): started
2021/07/08 17:35:16 scheduler task d108e3c8 (flow c686feee): transferring output (try 0): started
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): retrieving result (try 0): started
2021/07/08 17:35:16 scheduler task 8bb87836 (flow 19c275b5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:16 scheduler task 8bb87836 (flow 19c275b5): promoting objects (try 0): started
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:16 scheduler task 72711129 (flow ca14132b): transferring output (try 0): started
2021/07/08 17:35:16 scheduler task 8bb87836 (flow 19c275b5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:16 scheduler task 8bb87836 (flow 19c275b5): retrieving diagnostic output (try 0): started
2021/07/08 17:35:16 scheduler task 8bb87836 (flow 19c275b5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:16 scheduler task e830d1de (flow 86ffe226): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:16 scheduler task 8bb87836 (flow 19c275b5): retrieving result (try 0): started
2021/07/08 17:35:16 scheduler task e830d1de (flow 86ffe226): promoting objects (try 0): started
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): transferring output (try 0): started
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): retrieving diagnostic output (try 0): started
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): retrieving result (try 0): started
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloading (try 0): started
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloading list<val<.=db938acb 35.7MiB> 35.7MiB>
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloading val<.=a12f0726 35.4MiB>
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloading val<.=3158a902 35.4MiB>
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloaded val<.=3158a902 35.4MiB>
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloaded list<val<.=db938acb 35.7MiB> 35.7MiB>
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloaded val<.=a12f0726 35.4MiB>
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:17 scheduler task d108e3c8 (flow c686feee): unloading (try 0): successful, next state: complete
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): transferring output (try 0): started
2021/07/08 17:35:17  <-  n100.r09.s045.Main.out_file c686feee ok     exec 5m8s 35.7MiB
2021/07/08 17:35:17 n100.r09.s045.Main.out_file c686feee n100/r09/n100.r09.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0234c2db210efd0a8db4071f27153b007d368cc2082bf1ebb943d605647e9884
	sha256:c686feee86e0e4c71a30f61b4c8849995c80361beddd29d50ae761ea35e39cd4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d108e3c8c795db2525ad9eff6d3bf8e2c56d5118f34b211ad89a7307470e1596
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s045_output"
	    wget -O "n100.r09.s045_output/n100.r09.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s045_output/n100.r09.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s045_output/n100.r09.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s045_output/n100.r09.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s045_output/n100.r09.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s045_output/n100.r09.s045.reference.fas" "n100.r09.s045_output/n100.r09.s045.fq1.fastq" "n100.r09.s045_output/n100.r09.s045.fq2.fastq" | samtools view -bS - > "n100.r09.s045_output/n100.r09.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s045_output/n100.r09.s045.untrimmed.sorted.bam" "n100.r09.s045_output/n100.r09.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s045_output/n100.r09.s045.untrimmed.sorted.bam" -b "n100.r09.s045_output/n100.r09.s045.primers.bed" -p "n100.r09.s045_output/n100.r09.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" "n100.r09.s045_output/n100.r09.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s045_output/n100.r09.s045.reference.fas" "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" > "n100.r09.s045_output/n100.r09.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s045_output/n100.r09.s045.reference.fas" --call-indels "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" > "n100.r09.s045_output/n100.r09.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s045_output/n100.r09.s045.trimmed.sorted.bam" > "n100.r09.s045_output/n100.r09.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s045_output/n100.r09.s045.depth.txt" "n100.r09.s045_output/n100.r09.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s045_output/n100.r09.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s045_output/n100.r09.s045.reference.fas" | bcftools consensus -m "n100.r09.s045_output/n100.r09.s045.low_depth.tsv" tmp.vcf.gz > "n100.r09.s045_output/n100.r09.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:db938acb6eb510d396083a74b537207f87103d4e96fd323da17aa94102b86218 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:35:17 scheduler task 075c3c05 (flow ae98108f): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s045.tar.gz resources {}
2021/07/08 17:35:17  ->  n100.r09.s045.Main.cp_out_file ae98108f exec extern s3://niema-test/n100/r09/n100.r09.s045.tar.gz 35.7MiB
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloading (try 0): started
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloading list<val<.=c4fe21b2 35.7MiB> 35.7MiB>
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloading val<.=de9224be 35.4MiB>
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloading val<.=277a4920 35.4MiB>
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloaded val<.=277a4920 35.4MiB>
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloaded list<val<.=c4fe21b2 35.7MiB> 35.7MiB>
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloaded val<.=de9224be 35.4MiB>
2021/07/08 17:35:17 scheduler task 72711129 (flow ca14132b): unloading (try 0): successful, next state: complete
2021/07/08 17:35:17  <-  n100.r09.s036.Main.out_file ca14132b ok     exec 5m8s 35.7MiB
2021/07/08 17:35:17 n100.r09.s036.Main.out_file ca14132b n100/r09/n100.r09.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:395d7ae097a85d4e549575c5080db8105964725a91d54f1c4b9ff7c69625047b
	sha256:ca14132b79564fc676c54087fe2fbb0f2778a3ebe66edf898ea956ad079c19d8
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/72711129c36e552b7d1191149da811963874d1300ec2ee8cee02091c72f8d3b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s036_output"
	    wget -O "n100.r09.s036_output/n100.r09.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s036_output/n100.r09.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s036_output/n100.r09.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s036_output/n100.r09.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s036_output/n100.r09.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s036_output/n100.r09.s036.reference.fas" "n100.r09.s036_output/n100.r09.s036.fq1.fastq" "n100.r09.s036_output/n100.r09.s036.fq2.fastq" | samtools view -bS - > "n100.r09.s036_output/n100.r09.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s036_output/n100.r09.s036.untrimmed.sorted.bam" "n100.r09.s036_output/n100.r09.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s036_output/n100.r09.s036.untrimmed.sorted.bam" -b "n100.r09.s036_output/n100.r09.s036.primers.bed" -p "n100.r09.s036_output/n100.r09.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" "n100.r09.s036_output/n100.r09.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s036_output/n100.r09.s036.reference.fas" "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" > "n100.r09.s036_output/n100.r09.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s036_output/n100.r09.s036.reference.fas" --call-indels "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" > "n100.r09.s036_output/n100.r09.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s036_output/n100.r09.s036.trimmed.sorted.bam" > "n100.r09.s036_output/n100.r09.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s036_output/n100.r09.s036.depth.txt" "n100.r09.s036_output/n100.r09.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s036_output/n100.r09.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s036_output/n100.r09.s036.reference.fas" | bcftools consensus -m "n100.r09.s036_output/n100.r09.s036.low_depth.tsv" tmp.vcf.gz > "n100.r09.s036_output/n100.r09.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c4fe21b24c7b90e6604bd88a6e480b7b511dc02fb893d100f3781050be5e359a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.4MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:35:17 scheduler task e2d473fe (flow ab838d58): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s036.tar.gz resources {}
2021/07/08 17:35:17  ->  n100.r09.s036.Main.cp_out_file ab838d58 exec extern s3://niema-test/n100/r09/n100.r09.s036.tar.gz 35.7MiB
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloading (try 0): started
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloading list<val<.=514b5fbc 35.7MiB> 35.7MiB>
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloading val<.=299d578a 35.4MiB>
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloading val<.=9bc73a27 35.4MiB>
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): promoting objects (try 0): started
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloaded val<.=9bc73a27 35.4MiB>
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloaded list<val<.=514b5fbc 35.7MiB> 35.7MiB>
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloaded val<.=299d578a 35.4MiB>
2021/07/08 17:35:17 scheduler task 8bb87836 (flow 19c275b5): unloading (try 0): successful, next state: complete
2021/07/08 17:35:17  <-  n100.r09.s026.Main.out_file 19c275b5 ok     exec 5m9s 35.7MiB
2021/07/08 17:35:17 n100.r09.s026.Main.out_file 19c275b5 n100/r09/n100.r09.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8cc2557465e2d0bff46ab28e2da68fc098b99be6710760d358584b13c8d509b
	sha256:19c275b5dcedeebf145625cc34cdf070c4ee1bf23fcda0d294893a1b90c784d4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8bb87836f81805e60518ee22b51b6ce1e8278ab41d668a70d8783b5ce4c1c864
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s026_output"
	    wget -O "n100.r09.s026_output/n100.r09.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s026_output/n100.r09.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s026_output/n100.r09.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s026_output/n100.r09.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s026_output/n100.r09.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s026_output/n100.r09.s026.reference.fas" "n100.r09.s026_output/n100.r09.s026.fq1.fastq" "n100.r09.s026_output/n100.r09.s026.fq2.fastq" | samtools view -bS - > "n100.r09.s026_output/n100.r09.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s026_output/n100.r09.s026.untrimmed.sorted.bam" "n100.r09.s026_output/n100.r09.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s026_output/n100.r09.s026.untrimmed.sorted.bam" -b "n100.r09.s026_output/n100.r09.s026.primers.bed" -p "n100.r09.s026_output/n100.r09.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" "n100.r09.s026_output/n100.r09.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s026_output/n100.r09.s026.reference.fas" "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" > "n100.r09.s026_output/n100.r09.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s026_output/n100.r09.s026.reference.fas" --call-indels "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" > "n100.r09.s026_output/n100.r09.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s026_output/n100.r09.s026.trimmed.sorted.bam" > "n100.r09.s026_output/n100.r09.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s026_output/n100.r09.s026.depth.txt" "n100.r09.s026_output/n100.r09.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s026_output/n100.r09.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s026_output/n100.r09.s026.reference.fas" | bcftools consensus -m "n100.r09.s026_output/n100.r09.s026.low_depth.tsv" tmp.vcf.gz > "n100.r09.s026_output/n100.r09.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:514b5fbc949217e4a89b6c9554a012c5d5a2f1518daf5b89717e9637577e5f55 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:35:17 scheduler task ab2f152a (flow 77a9afb9): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s026.tar.gz resources {}
2021/07/08 17:35:17  ->  n100.r09.s026.Main.cp_out_file 77a9afb9 exec extern s3://niema-test/n100/r09/n100.r09.s026.tar.gz 35.7MiB
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): retrieving diagnostic output (try 0): started
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloading (try 0): started
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloading list<val<.=75c9ed49 35.8MiB> 35.8MiB>
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloading val<.=68797c6e 35.4MiB>
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloading val<.=16baebd3 35.4MiB>
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): retrieving result (try 0): started
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloaded list<val<.=75c9ed49 35.8MiB> 35.8MiB>
2021/07/08 17:35:17 scheduler task 813790ac (flow 4e9d02e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloaded val<.=16baebd3 35.4MiB>
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloaded val<.=68797c6e 35.4MiB>
2021/07/08 17:35:17 scheduler task e830d1de (flow 86ffe226): unloading (try 0): successful, next state: complete
2021/07/08 17:35:17 scheduler task 813790ac (flow 4e9d02e3): promoting objects (try 0): started
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:17  <-  n100.r09.s092.Main.out_file 86ffe226 ok     exec 5m9s 35.8MiB
2021/07/08 17:35:17 n100.r09.s092.Main.out_file 86ffe226 n100/r09/n100.r09.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:48883380f213010eba1a4da88721eec39cafd7dfd6aab3589e000fcfbc8dc007
	sha256:86ffe226fc33b68a89afafba44c27f6562e634ba8a390320cc4243db02e7b706
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e830d1de5cbdc3379bb9a6caedee21857d37e2db4d0b7139df95ca0855a7d113
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s092_output"
	    wget -O "n100.r09.s092_output/n100.r09.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s092_output/n100.r09.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s092_output/n100.r09.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s092_output/n100.r09.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s092_output/n100.r09.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s092_output/n100.r09.s092.reference.fas" "n100.r09.s092_output/n100.r09.s092.fq1.fastq" "n100.r09.s092_output/n100.r09.s092.fq2.fastq" | samtools view -bS - > "n100.r09.s092_output/n100.r09.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s092_output/n100.r09.s092.untrimmed.sorted.bam" "n100.r09.s092_output/n100.r09.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s092_output/n100.r09.s092.untrimmed.sorted.bam" -b "n100.r09.s092_output/n100.r09.s092.primers.bed" -p "n100.r09.s092_output/n100.r09.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" "n100.r09.s092_output/n100.r09.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s092_output/n100.r09.s092.reference.fas" "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" > "n100.r09.s092_output/n100.r09.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s092_output/n100.r09.s092.reference.fas" --call-indels "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" > "n100.r09.s092_output/n100.r09.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s092_output/n100.r09.s092.trimmed.sorted.bam" > "n100.r09.s092_output/n100.r09.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s092_output/n100.r09.s092.depth.txt" "n100.r09.s092_output/n100.r09.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s092_output/n100.r09.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s092_output/n100.r09.s092.reference.fas" | bcftools consensus -m "n100.r09.s092_output/n100.r09.s092.low_depth.tsv" tmp.vcf.gz > "n100.r09.s092_output/n100.r09.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:75c9ed493a7dbfb4e51547b74a0fe422ece7a28ac1e88808aa4d1fb414474eb1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=124.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=868B max=3.0KiB
2021/07/08 17:35:17 scheduler task 4e9da125 (flow 956de6a3): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s092.tar.gz resources {}
2021/07/08 17:35:17  ->  n100.r09.s092.Main.cp_out_file 956de6a3 exec extern s3://niema-test/n100/r09/n100.r09.s092.tar.gz 35.8MiB
2021/07/08 17:35:17 scheduler task f0471d6b (flow 3e879b55): transferring output (try 0): started
2021/07/08 17:35:17 scheduler task 813790ac (flow 4e9d02e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:17 scheduler task 813790ac (flow 4e9d02e3): retrieving diagnostic output (try 0): started
2021/07/08 17:35:17 scheduler task e2d473fe (flow ab838d58): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c4fe21b24c7b90e6604bd88a6e480b7b511dc02fb893d100f3781050be5e359a -> s3://niema-test/n100/r09/n100.r09.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:17  <-  n100.r09.s036.Main.cp_out_file ab838d58 ok   extern 0s 35.7MiB
2021/07/08 17:35:18 scheduler task 075c3c05 (flow ae98108f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:db938acb6eb510d396083a74b537207f87103d4e96fd323da17aa94102b86218 -> s3://niema-test/n100/r09/n100.r09.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:18  <-  n100.r09.s045.Main.cp_out_file ae98108f ok   extern 0s 35.7MiB
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): retrieving result (try 0): started
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): transferring output (try 0): started
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): promoting objects (try 0): started
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): retrieving diagnostic output (try 0): started
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): retrieving result (try 0): started
2021/07/08 17:35:18 scheduler task ab2f152a (flow 77a9afb9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:514b5fbc949217e4a89b6c9554a012c5d5a2f1518daf5b89717e9637577e5f55 -> s3://niema-test/n100/r09/n100.r09.s026.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:18  <-  n100.r09.s026.Main.cp_out_file 77a9afb9 ok   extern 0s 35.7MiB
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:18 scheduler task 41e87e7d (flow 4e911385): transferring output (try 0): started
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloading (try 0): started
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloading val<.=28ce1c0c 35.4MiB>
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloading val<.=9e3f95d8 35.4MiB>
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloading list<val<.=773f7d2e 35.7MiB> 35.7MiB>
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloaded val<.=9e3f95d8 35.4MiB>
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloaded val<.=28ce1c0c 35.4MiB>
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloaded list<val<.=773f7d2e 35.7MiB> 35.7MiB>
2021/07/08 17:35:18 scheduler task f0471d6b (flow 3e879b55): unloading (try 0): successful, next state: complete
2021/07/08 17:35:18  <-  n100.r09.s018.Main.out_file 3e879b55 ok     exec 5m9s 35.7MiB
2021/07/08 17:35:18 n100.r09.s018.Main.out_file 3e879b55 n100/r09/n100.r09.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8121206f66a4b9811d2598dfb03a34d5e4554d76300e9f069df76d3302a8bc9d
	sha256:3e879b554882ed101a097f909a6a0d7f49c6531a11d86a63232fcd7cc709cece
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0471d6b7d133ff8809f19df4245c4fae8b2b1cbfe9797b296926e24614a5327
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s018_output"
	    wget -O "n100.r09.s018_output/n100.r09.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s018_output/n100.r09.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s018_output/n100.r09.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s018_output/n100.r09.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s018_output/n100.r09.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s018_output/n100.r09.s018.reference.fas" "n100.r09.s018_output/n100.r09.s018.fq1.fastq" "n100.r09.s018_output/n100.r09.s018.fq2.fastq" | samtools view -bS - > "n100.r09.s018_output/n100.r09.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s018_output/n100.r09.s018.untrimmed.sorted.bam" "n100.r09.s018_output/n100.r09.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s018_output/n100.r09.s018.untrimmed.sorted.bam" -b "n100.r09.s018_output/n100.r09.s018.primers.bed" -p "n100.r09.s018_output/n100.r09.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" "n100.r09.s018_output/n100.r09.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s018_output/n100.r09.s018.reference.fas" "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" > "n100.r09.s018_output/n100.r09.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s018_output/n100.r09.s018.reference.fas" --call-indels "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" > "n100.r09.s018_output/n100.r09.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s018_output/n100.r09.s018.trimmed.sorted.bam" > "n100.r09.s018_output/n100.r09.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s018_output/n100.r09.s018.depth.txt" "n100.r09.s018_output/n100.r09.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s018_output/n100.r09.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s018_output/n100.r09.s018.reference.fas" | bcftools consensus -m "n100.r09.s018_output/n100.r09.s018.low_depth.tsv" tmp.vcf.gz > "n100.r09.s018_output/n100.r09.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:773f7d2e6499ea0560d29ddd16f83def33b327d9ba6ab9f95e9c7f30d83628e4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=130.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:35:18 scheduler task c0e84e07 (flow 41a73cb5): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s018.tar.gz resources {}
2021/07/08 17:35:18  ->  n100.r09.s018.Main.cp_out_file 41a73cb5 exec extern s3://niema-test/n100/r09/n100.r09.s018.tar.gz 35.7MiB
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): promoting objects (try 0): started
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloading (try 0): started
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloading list<val<.=9c226ed4 35.7MiB> 35.7MiB>
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloading val<.=cd718d24 35.4MiB>
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloading val<.=053bd67f 35.4MiB>
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): retrieving diagnostic output (try 0): started
2021/07/08 17:35:18 scheduler task 4e9da125 (flow 956de6a3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:75c9ed493a7dbfb4e51547b74a0fe422ece7a28ac1e88808aa4d1fb414474eb1 -> s3://niema-test/n100/r09/n100.r09.s092.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:18  <-  n100.r09.s092.Main.cp_out_file 956de6a3 ok   extern 0s 35.8MiB
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloaded list<val<.=9c226ed4 35.7MiB> 35.7MiB>
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloaded val<.=053bd67f 35.4MiB>
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloaded val<.=cd718d24 35.4MiB>
2021/07/08 17:35:18 scheduler task 813790ac (flow 4e9d02e3): unloading (try 0): successful, next state: complete
2021/07/08 17:35:18  <-  n100.r09.s058.Main.out_file 4e9d02e3 ok     exec 5m10s 35.7MiB
2021/07/08 17:35:18 n100.r09.s058.Main.out_file 4e9d02e3 n100/r09/n100.r09.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca1f4ec05a09ddca7df5bc63cf2e4c5c5c9898203c6b4bae8b9356c32ae384b0
	sha256:4e9d02e3176261ea385f08aa07bf3ca74bfa2979052c8fb0fbe8f820cc793fa9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/813790ac956f5019ec5268170750be5cd7688b67fddb82563a0f6777385f9d45
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s058_output"
	    wget -O "n100.r09.s058_output/n100.r09.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s058_output/n100.r09.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s058_output/n100.r09.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s058_output/n100.r09.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s058_output/n100.r09.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s058_output/n100.r09.s058.reference.fas" "n100.r09.s058_output/n100.r09.s058.fq1.fastq" "n100.r09.s058_output/n100.r09.s058.fq2.fastq" | samtools view -bS - > "n100.r09.s058_output/n100.r09.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s058_output/n100.r09.s058.untrimmed.sorted.bam" "n100.r09.s058_output/n100.r09.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s058_output/n100.r09.s058.untrimmed.sorted.bam" -b "n100.r09.s058_output/n100.r09.s058.primers.bed" -p "n100.r09.s058_output/n100.r09.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" "n100.r09.s058_output/n100.r09.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s058_output/n100.r09.s058.reference.fas" "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" > "n100.r09.s058_output/n100.r09.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s058_output/n100.r09.s058.reference.fas" --call-indels "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" > "n100.r09.s058_output/n100.r09.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s058_output/n100.r09.s058.trimmed.sorted.bam" > "n100.r09.s058_output/n100.r09.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s058_output/n100.r09.s058.depth.txt" "n100.r09.s058_output/n100.r09.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s058_output/n100.r09.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s058_output/n100.r09.s058.reference.fas" | bcftools consensus -m "n100.r09.s058_output/n100.r09.s058.low_depth.tsv" tmp.vcf.gz > "n100.r09.s058_output/n100.r09.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c226ed432d9e2ab8075f47d6390690bf3b885867dfa974a15297ff82fc3de21 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=130.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=870B max=2.0KiB
2021/07/08 17:35:18 scheduler task ee31b1da (flow bd659e65): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s058.tar.gz resources {}
2021/07/08 17:35:18  ->  n100.r09.s058.Main.cp_out_file bd659e65 exec extern s3://niema-test/n100/r09/n100.r09.s058.tar.gz 35.7MiB
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): retrieving result (try 0): started
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:18 scheduler task 02e1d72b (flow 9bb037fa): transferring output (try 0): started
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloading (try 0): started
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloading list<val<.=faed1785 35.8MiB> 35.8MiB>
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloading val<.=968c52db 35.4MiB>
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloading val<.=f914105c 35.4MiB>
2021/07/08 17:35:19 scheduler task c0e84e07 (flow 41a73cb5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:773f7d2e6499ea0560d29ddd16f83def33b327d9ba6ab9f95e9c7f30d83628e4 -> s3://niema-test/n100/r09/n100.r09.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:19  <-  n100.r09.s018.Main.cp_out_file 41a73cb5 ok   extern 0s 35.7MiB
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloaded val<.=f914105c 35.4MiB>
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloaded list<val<.=faed1785 35.8MiB> 35.8MiB>
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloaded val<.=968c52db 35.4MiB>
2021/07/08 17:35:19 scheduler task 41e87e7d (flow 4e911385): unloading (try 0): successful, next state: complete
2021/07/08 17:35:19  <-  n100.r09.s090.Main.out_file 4e911385 ok     exec 5m4s 35.8MiB
2021/07/08 17:35:19 n100.r09.s090.Main.out_file 4e911385 n100/r09/n100.r09.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bbe8752507fb8bdbff7e97ff81133845ddf0610271f33a77a62c15fe94ebb0f5
	sha256:4e911385c4ae2c8e09220bc3b0a68baff9ad5a9aa582fc46d9b3898d4aa0d46c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/41e87e7dfc6ddd5588737ed386c4f388c4f6ad4526ea92507054115595399d8f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s090_output"
	    wget -O "n100.r09.s090_output/n100.r09.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s090_output/n100.r09.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s090_output/n100.r09.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s090_output/n100.r09.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s090_output/n100.r09.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s090_output/n100.r09.s090.reference.fas" "n100.r09.s090_output/n100.r09.s090.fq1.fastq" "n100.r09.s090_output/n100.r09.s090.fq2.fastq" | samtools view -bS - > "n100.r09.s090_output/n100.r09.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s090_output/n100.r09.s090.untrimmed.sorted.bam" "n100.r09.s090_output/n100.r09.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s090_output/n100.r09.s090.untrimmed.sorted.bam" -b "n100.r09.s090_output/n100.r09.s090.primers.bed" -p "n100.r09.s090_output/n100.r09.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" "n100.r09.s090_output/n100.r09.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s090_output/n100.r09.s090.reference.fas" "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" > "n100.r09.s090_output/n100.r09.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s090_output/n100.r09.s090.reference.fas" --call-indels "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" > "n100.r09.s090_output/n100.r09.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s090_output/n100.r09.s090.trimmed.sorted.bam" > "n100.r09.s090_output/n100.r09.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s090_output/n100.r09.s090.depth.txt" "n100.r09.s090_output/n100.r09.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s090_output/n100.r09.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s090_output/n100.r09.s090.reference.fas" | bcftools consensus -m "n100.r09.s090_output/n100.r09.s090.low_depth.tsv" tmp.vcf.gz > "n100.r09.s090_output/n100.r09.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:faed1785ae70b0fb03269f19dba4847f2fc9e7818c0fa46c7e74fcd7e47c7256 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.4MiB max=128.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:19 scheduler task a377852d (flow 3f4fdcd8): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s090.tar.gz resources {}
2021/07/08 17:35:19  ->  n100.r09.s090.Main.cp_out_file 3f4fdcd8 exec extern s3://niema-test/n100/r09/n100.r09.s090.tar.gz 35.8MiB
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloading (try 0): started
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloading list<val<.=3dca59dd 35.7MiB> 35.7MiB>
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloading val<.=98b8bd3c 35.4MiB>
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloading val<.=b4a0d025 35.4MiB>
2021/07/08 17:35:19 scheduler task ee31b1da (flow bd659e65): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c226ed432d9e2ab8075f47d6390690bf3b885867dfa974a15297ff82fc3de21 -> s3://niema-test/n100/r09/n100.r09.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:19  <-  n100.r09.s058.Main.cp_out_file bd659e65 ok   extern 0s 35.7MiB
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloaded val<.=98b8bd3c 35.4MiB>
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloaded val<.=b4a0d025 35.4MiB>
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloaded list<val<.=3dca59dd 35.7MiB> 35.7MiB>
2021/07/08 17:35:19 scheduler task 02e1d72b (flow 9bb037fa): unloading (try 0): successful, next state: complete
2021/07/08 17:35:19  <-  n100.r09.s034.Main.out_file 9bb037fa ok     exec 5m4s 35.7MiB
2021/07/08 17:35:19 n100.r09.s034.Main.out_file 9bb037fa n100/r09/n100.r09.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03b4ee2983f75d0f5bf543648919a8e349bbe4a9288dfeea45c65c14c8fee0d4
	sha256:9bb037fafdcac4e0cdfe92f353bf06e085b23e8118d7fe1ec762de8e56d31a3a
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/02e1d72b0391ce84e7272a2969e641f11565118c18f27e29b552fafb2b10c8e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s034_output"
	    wget -O "n100.r09.s034_output/n100.r09.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s034_output/n100.r09.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s034_output/n100.r09.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s034_output/n100.r09.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s034_output/n100.r09.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s034_output/n100.r09.s034.reference.fas" "n100.r09.s034_output/n100.r09.s034.fq1.fastq" "n100.r09.s034_output/n100.r09.s034.fq2.fastq" | samtools view -bS - > "n100.r09.s034_output/n100.r09.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s034_output/n100.r09.s034.untrimmed.sorted.bam" "n100.r09.s034_output/n100.r09.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s034_output/n100.r09.s034.untrimmed.sorted.bam" -b "n100.r09.s034_output/n100.r09.s034.primers.bed" -p "n100.r09.s034_output/n100.r09.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" "n100.r09.s034_output/n100.r09.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s034_output/n100.r09.s034.reference.fas" "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" > "n100.r09.s034_output/n100.r09.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s034_output/n100.r09.s034.reference.fas" --call-indels "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" > "n100.r09.s034_output/n100.r09.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s034_output/n100.r09.s034.trimmed.sorted.bam" > "n100.r09.s034_output/n100.r09.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s034_output/n100.r09.s034.depth.txt" "n100.r09.s034_output/n100.r09.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s034_output/n100.r09.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s034_output/n100.r09.s034.reference.fas" | bcftools consensus -m "n100.r09.s034_output/n100.r09.s034.low_depth.tsv" tmp.vcf.gz > "n100.r09.s034_output/n100.r09.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3dca59ddb7b79034e314ea25c22b58d9a9d141ba5487b4521b4e518ba3de5ced 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.1MiB max=128.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 17:35:19 scheduler task 8a4e771e (flow d5107c70): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s034.tar.gz resources {}
2021/07/08 17:35:19  ->  n100.r09.s034.Main.cp_out_file d5107c70 exec extern s3://niema-test/n100/r09/n100.r09.s034.tar.gz 35.7MiB
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): promoting objects (try 0): started
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): retrieving diagnostic output (try 0): started
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): retrieving result (try 0): started
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:19 scheduler task 367eab87 (flow ce2eee55): transferring output (try 0): started
2021/07/08 17:35:19 scheduler task a377852d (flow 3f4fdcd8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:faed1785ae70b0fb03269f19dba4847f2fc9e7818c0fa46c7e74fcd7e47c7256 -> s3://niema-test/n100/r09/n100.r09.s090.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:19  <-  n100.r09.s090.Main.cp_out_file 3f4fdcd8 ok   extern 0s 35.8MiB
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): promoting objects (try 0): started
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): promoting objects (try 0): started
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): retrieving diagnostic output (try 0): started
2021/07/08 17:35:20 scheduler task 8a4e771e (flow d5107c70): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3dca59ddb7b79034e314ea25c22b58d9a9d141ba5487b4521b4e518ba3de5ced -> s3://niema-test/n100/r09/n100.r09.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:20  <-  n100.r09.s034.Main.cp_out_file d5107c70 ok   extern 0s 35.7MiB
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): retrieving diagnostic output (try 0): started
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): retrieving result (try 0): started
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:20 scheduler task 1e64ec4b (flow d4b624e7): transferring output (try 0): started
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): retrieving result (try 0): started
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): promoting objects (try 0): started
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): promoting objects (try 0): started
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:20 scheduler task bc405a66 (flow 4f626c55): transferring output (try 0): started
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): retrieving diagnostic output (try 0): started
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): retrieving diagnostic output (try 0): started
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:20 scheduler task 62391e6e (flow 8039d92f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): retrieving result (try 0): started
2021/07/08 17:35:20 scheduler task 62391e6e (flow 8039d92f): promoting objects (try 0): started
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): retrieving result (try 0): started
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloading (try 0): started
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloading list<val<.=ec157514 35.7MiB> 35.7MiB>
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloading val<.=1bec8af9 35.4MiB>
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloading val<.=2480e2d6 35.4MiB>
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:20 scheduler task 62391e6e (flow 8039d92f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:20 scheduler task c3ca00c6 (flow 511c1700): transferring output (try 0): started
2021/07/08 17:35:20 scheduler task 62391e6e (flow 8039d92f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:20 scheduler task dd516de3 (flow 4874cac6): transferring output (try 0): started
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloaded list<val<.=ec157514 35.7MiB> 35.7MiB>
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloaded val<.=2480e2d6 35.4MiB>
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloaded val<.=1bec8af9 35.4MiB>
2021/07/08 17:35:20 scheduler task 367eab87 (flow ce2eee55): unloading (try 0): successful, next state: complete
2021/07/08 17:35:20  <-  n100.r09.s022.Main.out_file ce2eee55 ok     exec 5m11s 35.7MiB
2021/07/08 17:35:20 n100.r09.s022.Main.out_file ce2eee55 n100/r09/n100.r09.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3711f97f9730a2d161642ac788e6a1accb791afd9216dc565c4c7a3af6e8ccb1
	sha256:ce2eee5564362be42063349dac7e2c60a72dd862540da5ae3dd9b3e4cf4f7b23
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/367eab873eff6a6a5ae520e6385db3c72efbd9a99c83f300958f653d42fe024a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s022_output"
	    wget -O "n100.r09.s022_output/n100.r09.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s022_output/n100.r09.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s022_output/n100.r09.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s022_output/n100.r09.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s022_output/n100.r09.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s022_output/n100.r09.s022.reference.fas" "n100.r09.s022_output/n100.r09.s022.fq1.fastq" "n100.r09.s022_output/n100.r09.s022.fq2.fastq" | samtools view -bS - > "n100.r09.s022_output/n100.r09.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s022_output/n100.r09.s022.untrimmed.sorted.bam" "n100.r09.s022_output/n100.r09.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s022_output/n100.r09.s022.untrimmed.sorted.bam" -b "n100.r09.s022_output/n100.r09.s022.primers.bed" -p "n100.r09.s022_output/n100.r09.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" "n100.r09.s022_output/n100.r09.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s022_output/n100.r09.s022.reference.fas" "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" > "n100.r09.s022_output/n100.r09.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s022_output/n100.r09.s022.reference.fas" --call-indels "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" > "n100.r09.s022_output/n100.r09.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s022_output/n100.r09.s022.trimmed.sorted.bam" > "n100.r09.s022_output/n100.r09.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s022_output/n100.r09.s022.depth.txt" "n100.r09.s022_output/n100.r09.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s022_output/n100.r09.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s022_output/n100.r09.s022.reference.fas" | bcftools consensus -m "n100.r09.s022_output/n100.r09.s022.low_depth.tsv" tmp.vcf.gz > "n100.r09.s022_output/n100.r09.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ec15751487a7a14a2cafe337ae92ead2ad58bf65b56f5194cd7e245b08fd8705 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=696B max=2.1KiB
2021/07/08 17:35:20 scheduler task b352ae9b (flow 7ba00fa3): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s022.tar.gz resources {}
2021/07/08 17:35:20  ->  n100.r09.s022.Main.cp_out_file 7ba00fa3 exec extern s3://niema-test/n100/r09/n100.r09.s022.tar.gz 35.7MiB
2021/07/08 17:35:20 scheduler task 62391e6e (flow 8039d92f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:20 scheduler task 62391e6e (flow 8039d92f): retrieving result (try 0): started
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): transferring output (try 0): started
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): promoting objects (try 0): started
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloading (try 0): started
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloading list<val<.=3eae132f 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloading val<.=3b7ba648 35.4MiB>
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloading val<.=325bfbc0 35.4MiB>
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): retrieving diagnostic output (try 0): started
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloaded list<val<.=3eae132f 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloaded val<.=3b7ba648 35.4MiB>
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloaded val<.=325bfbc0 35.4MiB>
2021/07/08 17:35:21 scheduler task 1e64ec4b (flow d4b624e7): unloading (try 0): successful, next state: complete
2021/07/08 17:35:21  <-  n100.r09.s016.Main.out_file d4b624e7 ok     exec 5m12s 35.7MiB
2021/07/08 17:35:21 n100.r09.s016.Main.out_file d4b624e7 n100/r09/n100.r09.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:746bcf26ba05861e21b7d0b0e52e5c26a5ee382f598de0562d612690046adb51
	sha256:d4b624e74b805b2a2987c32e4af2b34adfb6340a7f705fc0cfb88d4d8b5fd7e3
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e64ec4b31abc79436d7251eb8be8ae742e08bcf20058f99f840a07862bdc98c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s016_output"
	    wget -O "n100.r09.s016_output/n100.r09.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s016_output/n100.r09.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s016_output/n100.r09.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s016_output/n100.r09.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s016_output/n100.r09.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s016_output/n100.r09.s016.reference.fas" "n100.r09.s016_output/n100.r09.s016.fq1.fastq" "n100.r09.s016_output/n100.r09.s016.fq2.fastq" | samtools view -bS - > "n100.r09.s016_output/n100.r09.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s016_output/n100.r09.s016.untrimmed.sorted.bam" "n100.r09.s016_output/n100.r09.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s016_output/n100.r09.s016.untrimmed.sorted.bam" -b "n100.r09.s016_output/n100.r09.s016.primers.bed" -p "n100.r09.s016_output/n100.r09.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" "n100.r09.s016_output/n100.r09.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s016_output/n100.r09.s016.reference.fas" "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" > "n100.r09.s016_output/n100.r09.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s016_output/n100.r09.s016.reference.fas" --call-indels "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" > "n100.r09.s016_output/n100.r09.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s016_output/n100.r09.s016.trimmed.sorted.bam" > "n100.r09.s016_output/n100.r09.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s016_output/n100.r09.s016.depth.txt" "n100.r09.s016_output/n100.r09.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s016_output/n100.r09.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s016_output/n100.r09.s016.reference.fas" | bcftools consensus -m "n100.r09.s016_output/n100.r09.s016.low_depth.tsv" tmp.vcf.gz > "n100.r09.s016_output/n100.r09.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3eae132f8d13d7aa460741fa215fc68099fd9b3af3fc0ad76e91182c3098eb13 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=125.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:35:21 scheduler task c4055d6f (flow 68fbab42): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s016.tar.gz resources {}
2021/07/08 17:35:21  ->  n100.r09.s016.Main.cp_out_file 68fbab42 exec extern s3://niema-test/n100/r09/n100.r09.s016.tar.gz 35.7MiB
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): retrieving result (try 0): started
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloading (try 0): started
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloading list<val<.=f263feb8 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloading val<.=1099ecfa 35.4MiB>
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloading val<.=5f2ee61b 35.4MiB>
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): transferring output (try 0): started
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): promoting objects (try 0): started
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloaded val<.=5f2ee61b 35.4MiB>
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloaded list<val<.=f263feb8 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloaded val<.=1099ecfa 35.4MiB>
2021/07/08 17:35:21 scheduler task bc405a66 (flow 4f626c55): unloading (try 0): successful, next state: complete
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:21  <-  n100.r09.s048.Main.out_file 4f626c55 ok     exec 5m7s 35.7MiB
2021/07/08 17:35:21 n100.r09.s048.Main.out_file 4f626c55 n100/r09/n100.r09.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dfd2d36de0d65d441e65611c3a439cd719cf83a14c501c81e79d70c8919a5948
	sha256:4f626c55f279ddd8e69185a49d2bf33b9dce8699f9bee1264e63d2620ab6a6c9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc405a660cb0b0d0e8b8d8049b3e2f03178863739a039cbdf3993de0865abc1a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s048_output"
	    wget -O "n100.r09.s048_output/n100.r09.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s048_output/n100.r09.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s048_output/n100.r09.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s048_output/n100.r09.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s048_output/n100.r09.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s048_output/n100.r09.s048.reference.fas" "n100.r09.s048_output/n100.r09.s048.fq1.fastq" "n100.r09.s048_output/n100.r09.s048.fq2.fastq" | samtools view -bS - > "n100.r09.s048_output/n100.r09.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s048_output/n100.r09.s048.untrimmed.sorted.bam" "n100.r09.s048_output/n100.r09.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s048_output/n100.r09.s048.untrimmed.sorted.bam" -b "n100.r09.s048_output/n100.r09.s048.primers.bed" -p "n100.r09.s048_output/n100.r09.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" "n100.r09.s048_output/n100.r09.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s048_output/n100.r09.s048.reference.fas" "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" > "n100.r09.s048_output/n100.r09.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s048_output/n100.r09.s048.reference.fas" --call-indels "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" > "n100.r09.s048_output/n100.r09.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s048_output/n100.r09.s048.trimmed.sorted.bam" > "n100.r09.s048_output/n100.r09.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s048_output/n100.r09.s048.depth.txt" "n100.r09.s048_output/n100.r09.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s048_output/n100.r09.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s048_output/n100.r09.s048.reference.fas" | bcftools consensus -m "n100.r09.s048_output/n100.r09.s048.low_depth.tsv" tmp.vcf.gz > "n100.r09.s048_output/n100.r09.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f263feb89d4417471dd0627457866931b53420a4ebafa41ad3e823e3e5b759c3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:21 scheduler task fd952087 (flow bea11354): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s048.tar.gz resources {}
2021/07/08 17:35:21  ->  n100.r09.s048.Main.cp_out_file bea11354 exec extern s3://niema-test/n100/r09/n100.r09.s048.tar.gz 35.7MiB
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloading (try 0): started
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloading list<val<.=ceffb3bf 35.8MiB> 35.8MiB>
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloading val<.=cc01d6c6 35.4MiB>
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloading val<.=b55301b0 35.4MiB>
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): retrieving diagnostic output (try 0): started
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloaded val<.=cc01d6c6 35.4MiB>
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloaded val<.=b55301b0 35.4MiB>
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloaded list<val<.=ceffb3bf 35.8MiB> 35.8MiB>
2021/07/08 17:35:21 scheduler task dd516de3 (flow 4874cac6): unloading (try 0): successful, next state: complete
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloading (try 0): started
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloading list<val<.=ee90f4c1 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloading val<.=34e18437 35.4MiB>
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloading val<.=8c703b34 35.4MiB>
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): retrieving result (try 0): started
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:21  <-  n100.r09.s094.Main.out_file 4874cac6 ok     exec 5m12s 35.8MiB
2021/07/08 17:35:21 n100.r09.s094.Main.out_file 4874cac6 n100/r09/n100.r09.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d2e9190dbd2091e7984fa1c5bdcd59d50d90536618630fcfbabef856bd61cf0c
	sha256:4874cac66952d7d1118bee528860ba57cceb2b5b5954533534bdc66944cfb346
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dd516de352f989f174a6d3a7297130a4f48135b5824c0b64003174297fee87ed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s094_output"
	    wget -O "n100.r09.s094_output/n100.r09.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s094_output/n100.r09.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s094_output/n100.r09.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s094_output/n100.r09.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s094_output/n100.r09.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s094_output/n100.r09.s094.reference.fas" "n100.r09.s094_output/n100.r09.s094.fq1.fastq" "n100.r09.s094_output/n100.r09.s094.fq2.fastq" | samtools view -bS - > "n100.r09.s094_output/n100.r09.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s094_output/n100.r09.s094.untrimmed.sorted.bam" "n100.r09.s094_output/n100.r09.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s094_output/n100.r09.s094.untrimmed.sorted.bam" -b "n100.r09.s094_output/n100.r09.s094.primers.bed" -p "n100.r09.s094_output/n100.r09.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" "n100.r09.s094_output/n100.r09.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s094_output/n100.r09.s094.reference.fas" "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" > "n100.r09.s094_output/n100.r09.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s094_output/n100.r09.s094.reference.fas" --call-indels "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" > "n100.r09.s094_output/n100.r09.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s094_output/n100.r09.s094.trimmed.sorted.bam" > "n100.r09.s094_output/n100.r09.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s094_output/n100.r09.s094.depth.txt" "n100.r09.s094_output/n100.r09.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s094_output/n100.r09.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s094_output/n100.r09.s094.reference.fas" | bcftools consensus -m "n100.r09.s094_output/n100.r09.s094.low_depth.tsv" tmp.vcf.gz > "n100.r09.s094_output/n100.r09.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ceffb3bfac3dc447a71f3056465a61d90e0cd2f5b412dad08cbdb6634bd7d4b9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=128.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:21 scheduler task a3bcba9a (flow 6aaa56d1): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s094.tar.gz resources {}
2021/07/08 17:35:21  ->  n100.r09.s094.Main.cp_out_file 6aaa56d1 exec extern s3://niema-test/n100/r09/n100.r09.s094.tar.gz 35.8MiB
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloading (try 0): started
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloading list<val<.=14b88adf 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloading val<.=c0c96767 35.4MiB>
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloading val<.=bf918bab 35.4MiB>
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloaded list<val<.=ee90f4c1 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloaded val<.=34e18437 35.4MiB>
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloaded val<.=8c703b34 35.4MiB>
2021/07/08 17:35:21 scheduler task c3ca00c6 (flow 511c1700): unloading (try 0): successful, next state: complete
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloaded val<.=c0c96767 35.4MiB>
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloaded list<val<.=14b88adf 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:21  <-  n100.r09.s073.Main.out_file 511c1700 ok     exec 5m13s 35.7MiB
2021/07/08 17:35:21 n100.r09.s073.Main.out_file 511c1700 n100/r09/n100.r09.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2e27a19e44389f50a96026a311daea9651fb6b7bf9cdba0de5eb2abb398222dc
	sha256:511c17007d7faab2873141917cfece73b7cc05a9d94f8e27b28515b662e734cd
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3ca00c6d10b8fab3d71b3367d9d20699f145cb878d41189967fbb5e20c8eda5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s073_output"
	    wget -O "n100.r09.s073_output/n100.r09.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s073_output/n100.r09.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s073_output/n100.r09.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s073_output/n100.r09.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s073_output/n100.r09.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s073_output/n100.r09.s073.reference.fas" "n100.r09.s073_output/n100.r09.s073.fq1.fastq" "n100.r09.s073_output/n100.r09.s073.fq2.fastq" | samtools view -bS - > "n100.r09.s073_output/n100.r09.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s073_output/n100.r09.s073.untrimmed.sorted.bam" "n100.r09.s073_output/n100.r09.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s073_output/n100.r09.s073.untrimmed.sorted.bam" -b "n100.r09.s073_output/n100.r09.s073.primers.bed" -p "n100.r09.s073_output/n100.r09.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" "n100.r09.s073_output/n100.r09.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s073_output/n100.r09.s073.reference.fas" "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" > "n100.r09.s073_output/n100.r09.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s073_output/n100.r09.s073.reference.fas" --call-indels "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" > "n100.r09.s073_output/n100.r09.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s073_output/n100.r09.s073.trimmed.sorted.bam" > "n100.r09.s073_output/n100.r09.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s073_output/n100.r09.s073.depth.txt" "n100.r09.s073_output/n100.r09.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s073_output/n100.r09.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s073_output/n100.r09.s073.reference.fas" | bcftools consensus -m "n100.r09.s073_output/n100.r09.s073.low_depth.tsv" tmp.vcf.gz > "n100.r09.s073_output/n100.r09.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ee90f4c1f7c84c3e539d3581fac827fcace8ab861362f49ed18892ae06f46563 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=125.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=870B max=2.0KiB
2021/07/08 17:35:21 scheduler task 4ad46959 (flow c97c2f26): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s073.tar.gz resources {}
2021/07/08 17:35:21  ->  n100.r09.s073.Main.cp_out_file c97c2f26 exec extern s3://niema-test/n100/r09/n100.r09.s073.tar.gz 35.7MiB
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloaded val<.=bf918bab 35.4MiB>
2021/07/08 17:35:21 scheduler task 62391e6e (flow 8039d92f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:21 scheduler task 7ef3289f (flow d1e76a3d): transferring output (try 0): started
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): promoting objects (try 0): started
2021/07/08 17:35:21  <-  n100.r09.s037.Main.out_file 8039d92f ok     exec 5m13s 35.7MiB
2021/07/08 17:35:21 n100.r09.s037.Main.out_file 8039d92f n100/r09/n100.r09.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7536e6bafbf9cccdbda984c98550a2fd305567ddc63b6b40b240d34f8888745a
	sha256:8039d92ff9dc20cabd8b827817085836f6e82f02facc8058f05214eb2d2c0112
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/62391e6eb71ce8c237fbf3c7388d8c84843236914462e25ced3e5a325a665e86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s037_output"
	    wget -O "n100.r09.s037_output/n100.r09.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s037_output/n100.r09.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s037_output/n100.r09.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s037_output/n100.r09.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s037_output/n100.r09.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s037_output/n100.r09.s037.reference.fas" "n100.r09.s037_output/n100.r09.s037.fq1.fastq" "n100.r09.s037_output/n100.r09.s037.fq2.fastq" | samtools view -bS - > "n100.r09.s037_output/n100.r09.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s037_output/n100.r09.s037.untrimmed.sorted.bam" "n100.r09.s037_output/n100.r09.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s037_output/n100.r09.s037.untrimmed.sorted.bam" -b "n100.r09.s037_output/n100.r09.s037.primers.bed" -p "n100.r09.s037_output/n100.r09.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" "n100.r09.s037_output/n100.r09.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s037_output/n100.r09.s037.reference.fas" "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" > "n100.r09.s037_output/n100.r09.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s037_output/n100.r09.s037.reference.fas" --call-indels "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" > "n100.r09.s037_output/n100.r09.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s037_output/n100.r09.s037.trimmed.sorted.bam" > "n100.r09.s037_output/n100.r09.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s037_output/n100.r09.s037.depth.txt" "n100.r09.s037_output/n100.r09.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s037_output/n100.r09.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s037_output/n100.r09.s037.reference.fas" | bcftools consensus -m "n100.r09.s037_output/n100.r09.s037.low_depth.tsv" tmp.vcf.gz > "n100.r09.s037_output/n100.r09.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:14b88adf688471ea83858b9f823abca6df64c49f26f896be46a60eda13309bd3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=126.4MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 17:35:21 scheduler task 1371e7a5 (flow 9b8f6856): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s037.tar.gz resources {}
2021/07/08 17:35:21  ->  n100.r09.s037.Main.cp_out_file 9b8f6856 exec extern s3://niema-test/n100/r09/n100.r09.s037.tar.gz 35.7MiB
2021/07/08 17:35:21 scheduler task b352ae9b (flow 7ba00fa3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ec15751487a7a14a2cafe337ae92ead2ad58bf65b56f5194cd7e245b08fd8705 -> s3://niema-test/n100/r09/n100.r09.s022.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:21  <-  n100.r09.s022.Main.cp_out_file 7ba00fa3 ok   extern 0s 35.7MiB
2021/07/08 17:35:21 scheduler task 8aa24e0c (flow fd4c25ab): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:21 scheduler task 8aa24e0c (flow fd4c25ab): promoting objects (try 0): started
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:21 scheduler task c4055d6f (flow 68fbab42): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3eae132f8d13d7aa460741fa215fc68099fd9b3af3fc0ad76e91182c3098eb13 -> s3://niema-test/n100/r09/n100.r09.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:21  <-  n100.r09.s016.Main.cp_out_file 68fbab42 ok   extern 0s 35.7MiB
2021/07/08 17:35:21 scheduler task 8aa24e0c (flow fd4c25ab): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:21 scheduler task 8aa24e0c (flow fd4c25ab): retrieving diagnostic output (try 0): started
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): retrieving result (try 0): started
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): unloading (try 0): started
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): unloading list<val<.=6d47b1bb 35.7MiB> 35.7MiB>
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): unloading val<.=0f97afc5 35.4MiB>
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): unloading val<.=d4e96572 35.4MiB>
2021/07/08 17:35:21 scheduler task 8aa24e0c (flow fd4c25ab): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:21 scheduler task 8aa24e0c (flow fd4c25ab): retrieving result (try 0): started
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:21 scheduler task 9547f06a (flow 85992f0f): transferring output (try 0): started
2021/07/08 17:35:21 scheduler task 1503efcb (flow 29954b22): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:21 scheduler task 1503efcb (flow 29954b22): promoting objects (try 0): started
2021/07/08 17:35:21 scheduler task d843f9bd (flow 960857c0): unloaded list<val<.=6d47b1bb 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task d843f9bd (flow 960857c0): unloaded val<.=d4e96572 35.4MiB>
2021/07/08 17:35:22 scheduler task d843f9bd (flow 960857c0): unloaded val<.=0f97afc5 35.4MiB>
2021/07/08 17:35:22 scheduler task d843f9bd (flow 960857c0): unloading (try 0): successful, next state: complete
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:22  <-  n100.r09.s069.Main.out_file 960857c0 ok     exec 5m13s 35.7MiB
2021/07/08 17:35:22 n100.r09.s069.Main.out_file 960857c0 n100/r09/n100.r09.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2f4acebc6eba5b327a9e5f28180af8519bf9cc675cc8f30778094553935c045b
	sha256:960857c04fadb2725921564cd62211a7464ad9111472618ba27fd6d2f7c81e10
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d843f9bd72b5db49148a17ae02b138cc97c096a0289074017709b3c998ec8896
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s069_output"
	    wget -O "n100.r09.s069_output/n100.r09.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s069_output/n100.r09.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s069_output/n100.r09.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s069_output/n100.r09.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s069_output/n100.r09.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s069_output/n100.r09.s069.reference.fas" "n100.r09.s069_output/n100.r09.s069.fq1.fastq" "n100.r09.s069_output/n100.r09.s069.fq2.fastq" | samtools view -bS - > "n100.r09.s069_output/n100.r09.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s069_output/n100.r09.s069.untrimmed.sorted.bam" "n100.r09.s069_output/n100.r09.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s069_output/n100.r09.s069.untrimmed.sorted.bam" -b "n100.r09.s069_output/n100.r09.s069.primers.bed" -p "n100.r09.s069_output/n100.r09.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" "n100.r09.s069_output/n100.r09.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s069_output/n100.r09.s069.reference.fas" "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" > "n100.r09.s069_output/n100.r09.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s069_output/n100.r09.s069.reference.fas" --call-indels "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" > "n100.r09.s069_output/n100.r09.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s069_output/n100.r09.s069.trimmed.sorted.bam" > "n100.r09.s069_output/n100.r09.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s069_output/n100.r09.s069.depth.txt" "n100.r09.s069_output/n100.r09.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s069_output/n100.r09.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s069_output/n100.r09.s069.reference.fas" | bcftools consensus -m "n100.r09.s069_output/n100.r09.s069.low_depth.tsv" tmp.vcf.gz > "n100.r09.s069_output/n100.r09.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6d47b1bb3e430865ef590ae47792736eb8f25531521fea9d5cb24a32b175d45d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:35:22 scheduler task da624fc2 (flow 895b0b64): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s069.tar.gz resources {}
2021/07/08 17:35:22  ->  n100.r09.s069.Main.cp_out_file 895b0b64 exec extern s3://niema-test/n100/r09/n100.r09.s069.tar.gz 35.7MiB
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): transferring output (try 0): started
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): retrieving diagnostic output (try 0): started
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): retrieving result (try 0): started
2021/07/08 17:35:22 scheduler task a3bcba9a (flow 6aaa56d1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ceffb3bfac3dc447a71f3056465a61d90e0cd2f5b412dad08cbdb6634bd7d4b9 -> s3://niema-test/n100/r09/n100.r09.s094.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:22  <-  n100.r09.s094.Main.cp_out_file 6aaa56d1 ok   extern 0s 35.8MiB
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): transferring output (try 0): started
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloading (try 0): started
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloading list<val<.=f717d3bd 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloading val<.=28773a98 35.4MiB>
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloading val<.=1a3f5d50 35.4MiB>
2021/07/08 17:35:22 scheduler task fd952087 (flow bea11354): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f263feb89d4417471dd0627457866931b53420a4ebafa41ad3e823e3e5b759c3 -> s3://niema-test/n100/r09/n100.r09.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:22  <-  n100.r09.s048.Main.cp_out_file bea11354 ok   extern 0s 35.7MiB
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloaded list<val<.=f717d3bd 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloaded val<.=1a3f5d50 35.4MiB>
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloaded val<.=28773a98 35.4MiB>
2021/07/08 17:35:22 scheduler task 7ef3289f (flow d1e76a3d): unloading (try 0): successful, next state: complete
2021/07/08 17:35:22  <-  n100.r09.s067.Main.out_file d1e76a3d ok     exec 5m8s 35.7MiB
2021/07/08 17:35:22 n100.r09.s067.Main.out_file d1e76a3d n100/r09/n100.r09.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:be7a48f44d605c740655c13e7456bb3882b224671b426c97a73546c2867d678b
	sha256:d1e76a3d4a961a5e5ac507ae1ef5af9260b070ab9585bf409dca777dd2a742bf
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ef3289fa20942ff1d0af34dffa9245ed48d5e9f77d42e04984143514aba4f07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s067_output"
	    wget -O "n100.r09.s067_output/n100.r09.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s067_output/n100.r09.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s067_output/n100.r09.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s067_output/n100.r09.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s067_output/n100.r09.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s067_output/n100.r09.s067.reference.fas" "n100.r09.s067_output/n100.r09.s067.fq1.fastq" "n100.r09.s067_output/n100.r09.s067.fq2.fastq" | samtools view -bS - > "n100.r09.s067_output/n100.r09.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s067_output/n100.r09.s067.untrimmed.sorted.bam" "n100.r09.s067_output/n100.r09.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s067_output/n100.r09.s067.untrimmed.sorted.bam" -b "n100.r09.s067_output/n100.r09.s067.primers.bed" -p "n100.r09.s067_output/n100.r09.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" "n100.r09.s067_output/n100.r09.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s067_output/n100.r09.s067.reference.fas" "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" > "n100.r09.s067_output/n100.r09.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s067_output/n100.r09.s067.reference.fas" --call-indels "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" > "n100.r09.s067_output/n100.r09.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s067_output/n100.r09.s067.trimmed.sorted.bam" > "n100.r09.s067_output/n100.r09.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s067_output/n100.r09.s067.depth.txt" "n100.r09.s067_output/n100.r09.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s067_output/n100.r09.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s067_output/n100.r09.s067.reference.fas" | bcftools consensus -m "n100.r09.s067_output/n100.r09.s067.low_depth.tsv" tmp.vcf.gz > "n100.r09.s067_output/n100.r09.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f717d3bdf92dbce6f7148f08bae043a5d07c1cae0e4962b14565a2890e8247ce 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=129.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=703B max=3.1KiB
2021/07/08 17:35:22 scheduler task 6b187fe0 (flow f9ea0bdd): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s067.tar.gz resources {}
2021/07/08 17:35:22  ->  n100.r09.s067.Main.cp_out_file f9ea0bdd exec extern s3://niema-test/n100/r09/n100.r09.s067.tar.gz 35.7MiB
2021/07/08 17:35:22 scheduler task 4ad46959 (flow c97c2f26): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ee90f4c1f7c84c3e539d3581fac827fcace8ab861362f49ed18892ae06f46563 -> s3://niema-test/n100/r09/n100.r09.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:22  <-  n100.r09.s073.Main.cp_out_file c97c2f26 ok   extern 0s 35.7MiB
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloading (try 0): started
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloading list<val<.=a228c9da 35.8MiB> 35.8MiB>
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloading val<.=85cf80df 35.4MiB>
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloading val<.=a6b1e91d 35.4MiB>
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloading (try 0): started
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloading list<val<.=38211f38 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloading val<.=606587db 35.4MiB>
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloading val<.=e12570de 35.4MiB>
2021/07/08 17:35:22 scheduler task 1371e7a5 (flow 9b8f6856): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:14b88adf688471ea83858b9f823abca6df64c49f26f896be46a60eda13309bd3 -> s3://niema-test/n100/r09/n100.r09.s037.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:22  <-  n100.r09.s037.Main.cp_out_file 9b8f6856 ok   extern 0s 35.7MiB
2021/07/08 17:35:22 scheduler task da624fc2 (flow 895b0b64): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6d47b1bb3e430865ef590ae47792736eb8f25531521fea9d5cb24a32b175d45d -> s3://niema-test/n100/r09/n100.r09.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:22  <-  n100.r09.s069.Main.cp_out_file 895b0b64 ok   extern 0s 35.7MiB
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloaded list<val<.=a228c9da 35.8MiB> 35.8MiB>
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloaded val<.=85cf80df 35.4MiB>
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloaded val<.=a6b1e91d 35.4MiB>
2021/07/08 17:35:22 scheduler task 9547f06a (flow 85992f0f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:22  <-  n100.r09.s046.Main.out_file 85992f0f ok     exec 5m8s 35.8MiB
2021/07/08 17:35:22 n100.r09.s046.Main.out_file 85992f0f n100/r09/n100.r09.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a73f62c3d32e5db42dc7abed81a7901f7fe55187a2885e0e4745bba2a129f6e8
	sha256:85992f0fcc013864152e861e1810b16921202770c618f3ebfc7c90447d802224
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9547f06a48ac02fdc6522e1d6ec37f0949c37a594ec91973731998d5dc2ef16b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s046_output"
	    wget -O "n100.r09.s046_output/n100.r09.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s046_output/n100.r09.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s046_output/n100.r09.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s046_output/n100.r09.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s046_output/n100.r09.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s046_output/n100.r09.s046.reference.fas" "n100.r09.s046_output/n100.r09.s046.fq1.fastq" "n100.r09.s046_output/n100.r09.s046.fq2.fastq" | samtools view -bS - > "n100.r09.s046_output/n100.r09.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s046_output/n100.r09.s046.untrimmed.sorted.bam" "n100.r09.s046_output/n100.r09.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s046_output/n100.r09.s046.untrimmed.sorted.bam" -b "n100.r09.s046_output/n100.r09.s046.primers.bed" -p "n100.r09.s046_output/n100.r09.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" "n100.r09.s046_output/n100.r09.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s046_output/n100.r09.s046.reference.fas" "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" > "n100.r09.s046_output/n100.r09.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s046_output/n100.r09.s046.reference.fas" --call-indels "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" > "n100.r09.s046_output/n100.r09.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s046_output/n100.r09.s046.trimmed.sorted.bam" > "n100.r09.s046_output/n100.r09.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s046_output/n100.r09.s046.depth.txt" "n100.r09.s046_output/n100.r09.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s046_output/n100.r09.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s046_output/n100.r09.s046.reference.fas" | bcftools consensus -m "n100.r09.s046_output/n100.r09.s046.low_depth.tsv" tmp.vcf.gz > "n100.r09.s046_output/n100.r09.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a228c9da018ce9bdce4f3f2ce3468f864ef68794487bed165d7540bec7412441 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.8MiB max=129.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:35:22 scheduler task f4363df6 (flow 95c59f5c): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s046.tar.gz resources {}
2021/07/08 17:35:22  ->  n100.r09.s046.Main.cp_out_file 95c59f5c exec extern s3://niema-test/n100/r09/n100.r09.s046.tar.gz 35.8MiB
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloaded val<.=606587db 35.4MiB>
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloaded list<val<.=38211f38 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloaded val<.=e12570de 35.4MiB>
2021/07/08 17:35:22 scheduler task 8aa24e0c (flow fd4c25ab): unloading (try 0): successful, next state: complete
2021/07/08 17:35:22  <-  n100.r09.s050.Main.out_file fd4c25ab ok     exec 5m8s 35.7MiB
2021/07/08 17:35:22 n100.r09.s050.Main.out_file fd4c25ab n100/r09/n100.r09.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9c18049fa3fca61f7e92758e59a330e2fb0bfa639bed603abfb6a8a528d6da10
	sha256:fd4c25ab14df743606dee5025484d9e0b3484f258d8ee8bf09b9e0b01c7f6d30
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8aa24e0c6f581968b3feedcb0826a251bd2ade136de28b6967ae969a7afac862
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s050_output"
	    wget -O "n100.r09.s050_output/n100.r09.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s050_output/n100.r09.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s050_output/n100.r09.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s050_output/n100.r09.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s050_output/n100.r09.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s050_output/n100.r09.s050.reference.fas" "n100.r09.s050_output/n100.r09.s050.fq1.fastq" "n100.r09.s050_output/n100.r09.s050.fq2.fastq" | samtools view -bS - > "n100.r09.s050_output/n100.r09.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s050_output/n100.r09.s050.untrimmed.sorted.bam" "n100.r09.s050_output/n100.r09.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s050_output/n100.r09.s050.untrimmed.sorted.bam" -b "n100.r09.s050_output/n100.r09.s050.primers.bed" -p "n100.r09.s050_output/n100.r09.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" "n100.r09.s050_output/n100.r09.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s050_output/n100.r09.s050.reference.fas" "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" > "n100.r09.s050_output/n100.r09.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s050_output/n100.r09.s050.reference.fas" --call-indels "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" > "n100.r09.s050_output/n100.r09.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s050_output/n100.r09.s050.trimmed.sorted.bam" > "n100.r09.s050_output/n100.r09.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s050_output/n100.r09.s050.depth.txt" "n100.r09.s050_output/n100.r09.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s050_output/n100.r09.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s050_output/n100.r09.s050.reference.fas" | bcftools consensus -m "n100.r09.s050_output/n100.r09.s050.low_depth.tsv" tmp.vcf.gz > "n100.r09.s050_output/n100.r09.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:38211f38a3f0d23a5b0b9f950f5a204c72796a22943881aeb2f9d9fec57a1e3c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=130.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:22 scheduler task 209c20c4 (flow 83171b79): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s050.tar.gz resources {}
2021/07/08 17:35:22  ->  n100.r09.s050.Main.cp_out_file 83171b79 exec extern s3://niema-test/n100/r09/n100.r09.s050.tar.gz 35.7MiB
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloading (try 0): started
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloading list<val<.=52be4353 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloading val<.=97afe9c3 35.4MiB>
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloading val<.=489d0954 35.4MiB>
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloaded list<val<.=52be4353 35.7MiB> 35.7MiB>
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloaded val<.=489d0954 35.4MiB>
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloaded val<.=97afe9c3 35.4MiB>
2021/07/08 17:35:22 scheduler task 1503efcb (flow 29954b22): unloading (try 0): successful, next state: complete
2021/07/08 17:35:22  <-  n100.r09.s043.Main.out_file 29954b22 ok     exec 5m8s 35.7MiB
2021/07/08 17:35:22 n100.r09.s043.Main.out_file 29954b22 n100/r09/n100.r09.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f2ffb1de52af8f3c9ccd7787897f104a882c5dfa48c7107f433ebf6496b56453
	sha256:29954b2201e9f270c0290ac20176403c2f00837d95bca57c2e06eb74a3a45453
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1503efcb073200d938c6381839b5e5ea8948d59aae3c5ca14ad61efe8d02fa07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s043_output"
	    wget -O "n100.r09.s043_output/n100.r09.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s043_output/n100.r09.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s043_output/n100.r09.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s043_output/n100.r09.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s043_output/n100.r09.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s043_output/n100.r09.s043.reference.fas" "n100.r09.s043_output/n100.r09.s043.fq1.fastq" "n100.r09.s043_output/n100.r09.s043.fq2.fastq" | samtools view -bS - > "n100.r09.s043_output/n100.r09.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s043_output/n100.r09.s043.untrimmed.sorted.bam" "n100.r09.s043_output/n100.r09.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s043_output/n100.r09.s043.untrimmed.sorted.bam" -b "n100.r09.s043_output/n100.r09.s043.primers.bed" -p "n100.r09.s043_output/n100.r09.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" "n100.r09.s043_output/n100.r09.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s043_output/n100.r09.s043.reference.fas" "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" > "n100.r09.s043_output/n100.r09.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s043_output/n100.r09.s043.reference.fas" --call-indels "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" > "n100.r09.s043_output/n100.r09.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s043_output/n100.r09.s043.trimmed.sorted.bam" > "n100.r09.s043_output/n100.r09.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s043_output/n100.r09.s043.depth.txt" "n100.r09.s043_output/n100.r09.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s043_output/n100.r09.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s043_output/n100.r09.s043.reference.fas" | bcftools consensus -m "n100.r09.s043_output/n100.r09.s043.low_depth.tsv" tmp.vcf.gz > "n100.r09.s043_output/n100.r09.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:52be4353a46f213dfef6d505d617da36992bee3c928f2530db2cab235d3eaf19 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=129.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=877B max=3.1KiB
2021/07/08 17:35:22 scheduler task 91489863 (flow e5b6c6d6): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s043.tar.gz resources {}
2021/07/08 17:35:22  ->  n100.r09.s043.Main.cp_out_file e5b6c6d6 exec extern s3://niema-test/n100/r09/n100.r09.s043.tar.gz 35.7MiB
2021/07/08 17:35:23 scheduler task 6b187fe0 (flow f9ea0bdd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f717d3bdf92dbce6f7148f08bae043a5d07c1cae0e4962b14565a2890e8247ce -> s3://niema-test/n100/r09/n100.r09.s067.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:23  <-  n100.r09.s067.Main.cp_out_file f9ea0bdd ok   extern 0s 35.7MiB
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task f4363df6 (flow 95c59f5c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a228c9da018ce9bdce4f3f2ce3468f864ef68794487bed165d7540bec7412441 -> s3://niema-test/n100/r09/n100.r09.s046.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:23  <-  n100.r09.s046.Main.cp_out_file 95c59f5c ok   extern 0s 35.8MiB
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 209c20c4 (flow 83171b79): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:38211f38a3f0d23a5b0b9f950f5a204c72796a22943881aeb2f9d9fec57a1e3c -> s3://niema-test/n100/r09/n100.r09.s050.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:23  <-  n100.r09.s050.Main.cp_out_file 83171b79 ok   extern 0s 35.7MiB
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 03660aa3 (flow 0ff73e1f): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task b5bd2ae1 (flow 2a7d8e22): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 91489863 (flow e5b6c6d6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:52be4353a46f213dfef6d505d617da36992bee3c928f2530db2cab235d3eaf19 -> s3://niema-test/n100/r09/n100.r09.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:23  <-  n100.r09.s043.Main.cp_out_file e5b6c6d6 ok   extern 0s 35.7MiB
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task c4a764b4 (flow 9fc13a0b): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task 0bb80e08 (flow 6ea6ac51): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task 8a72f87e (flow 1eb78b40): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task ca3bf7bf (flow 57c64a3d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:23 scheduler task ca3bf7bf (flow 57c64a3d): promoting objects (try 0): started
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): retrieving result (try 0): started
2021/07/08 17:35:23 scheduler task 2564252a (flow 071f7e69): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): unloading (try 0): started
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): unloading val<.=08b75226 35.4MiB>
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): unloading list<val<.=83929919 35.7MiB> 35.7MiB>
2021/07/08 17:35:23 scheduler task e71d796c (flow ef0a70a3): unloading val<.=fa3d9d8f 35.4MiB>
2021/07/08 17:35:23 scheduler task ca3bf7bf (flow 57c64a3d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:23 scheduler task ca3bf7bf (flow 57c64a3d): retrieving diagnostic output (try 0): started
2021/07/08 17:35:23 scheduler task 9691b24c (flow 3c2b3c63): transferring output (try 0): started
2021/07/08 17:35:23 scheduler task 704e844b (flow 7c7b20f0): transferring output (try 0): started
2021/07/08 17:35:24 scheduler task e71d796c (flow ef0a70a3): unloaded val<.=fa3d9d8f 35.4MiB>
2021/07/08 17:35:24 scheduler task e71d796c (flow ef0a70a3): unloaded val<.=08b75226 35.4MiB>
2021/07/08 17:35:24 scheduler task e71d796c (flow ef0a70a3): unloaded list<val<.=83929919 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task e71d796c (flow ef0a70a3): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24  <-  n100.r09.s011.Main.out_file ef0a70a3 ok     exec 5m9s 35.7MiB
2021/07/08 17:35:24 n100.r09.s011.Main.out_file ef0a70a3 n100/r09/n100.r09.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3ad4b3387f2c85683620dd88ed92666b19cc522b8dd38d13e8b2f2506273cab3
	sha256:ef0a70a3bbd84ec332ab3014699c6bcd3ba90298cd82844b2f23cd105c77ccdb
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e71d796c59daa9b4385961decdf83bc9f173119bf7fc914890945d7f618ccb48
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s011_output"
	    wget -O "n100.r09.s011_output/n100.r09.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s011_output/n100.r09.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s011_output/n100.r09.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s011_output/n100.r09.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s011_output/n100.r09.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s011_output/n100.r09.s011.reference.fas" "n100.r09.s011_output/n100.r09.s011.fq1.fastq" "n100.r09.s011_output/n100.r09.s011.fq2.fastq" | samtools view -bS - > "n100.r09.s011_output/n100.r09.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s011_output/n100.r09.s011.untrimmed.sorted.bam" "n100.r09.s011_output/n100.r09.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s011_output/n100.r09.s011.untrimmed.sorted.bam" -b "n100.r09.s011_output/n100.r09.s011.primers.bed" -p "n100.r09.s011_output/n100.r09.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" "n100.r09.s011_output/n100.r09.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s011_output/n100.r09.s011.reference.fas" "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" > "n100.r09.s011_output/n100.r09.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s011_output/n100.r09.s011.reference.fas" --call-indels "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" > "n100.r09.s011_output/n100.r09.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s011_output/n100.r09.s011.trimmed.sorted.bam" > "n100.r09.s011_output/n100.r09.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s011_output/n100.r09.s011.depth.txt" "n100.r09.s011_output/n100.r09.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s011_output/n100.r09.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s011_output/n100.r09.s011.reference.fas" | bcftools consensus -m "n100.r09.s011_output/n100.r09.s011.low_depth.tsv" tmp.vcf.gz > "n100.r09.s011_output/n100.r09.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8392991904b7151b2e4a9c73ed155d67cd16bbc80fd362d1d2a8d61735cea2e8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=127.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:35:24 scheduler task ca30c9c7 (flow 911739dc): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s011.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s011.Main.cp_out_file 911739dc exec extern s3://niema-test/n100/r09/n100.r09.s011.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloading (try 0): started
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloading list<val<.=58efbe19 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloading val<.=5650eb30 35.4MiB>
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloading val<.=de1580bf 35.4MiB>
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloading (try 0): started
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloading list<val<.=fa6aa84b 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloading val<.=9b224147 35.4MiB>
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloading val<.=8984543f 35.4MiB>
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): retrieving result (try 0): started
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloaded list<val<.=58efbe19 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloaded val<.=de1580bf 35.4MiB>
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloaded val<.=5650eb30 35.4MiB>
2021/07/08 17:35:24 scheduler task 03660aa3 (flow 0ff73e1f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloaded list<val<.=fa6aa84b 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloaded val<.=9b224147 35.4MiB>
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloaded val<.=8984543f 35.4MiB>
2021/07/08 17:35:24 scheduler task b5bd2ae1 (flow 2a7d8e22): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24  <-  n100.r09.s065.Main.out_file 0ff73e1f ok     exec 5m9s 35.7MiB
2021/07/08 17:35:24 n100.r09.s065.Main.out_file 0ff73e1f n100/r09/n100.r09.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac2d4672241dc77e5ad3a120c563c7074aaa939a9168f5c96e2f21e9e63e356b
	sha256:0ff73e1f79159d0cdc7301988035686672f8f2e79344ec7902e4e4b009ccd9a3
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/03660aa3eb92b4808af2d57bf7f33e16c12b784830478cc123c8b0bad1369c2c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s065_output"
	    wget -O "n100.r09.s065_output/n100.r09.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s065_output/n100.r09.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s065_output/n100.r09.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s065_output/n100.r09.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s065_output/n100.r09.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s065_output/n100.r09.s065.reference.fas" "n100.r09.s065_output/n100.r09.s065.fq1.fastq" "n100.r09.s065_output/n100.r09.s065.fq2.fastq" | samtools view -bS - > "n100.r09.s065_output/n100.r09.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s065_output/n100.r09.s065.untrimmed.sorted.bam" "n100.r09.s065_output/n100.r09.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s065_output/n100.r09.s065.untrimmed.sorted.bam" -b "n100.r09.s065_output/n100.r09.s065.primers.bed" -p "n100.r09.s065_output/n100.r09.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" "n100.r09.s065_output/n100.r09.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s065_output/n100.r09.s065.reference.fas" "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" > "n100.r09.s065_output/n100.r09.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s065_output/n100.r09.s065.reference.fas" --call-indels "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" > "n100.r09.s065_output/n100.r09.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s065_output/n100.r09.s065.trimmed.sorted.bam" > "n100.r09.s065_output/n100.r09.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s065_output/n100.r09.s065.depth.txt" "n100.r09.s065_output/n100.r09.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s065_output/n100.r09.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s065_output/n100.r09.s065.reference.fas" | bcftools consensus -m "n100.r09.s065_output/n100.r09.s065.low_depth.tsv" tmp.vcf.gz > "n100.r09.s065_output/n100.r09.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:58efbe19047a0e900da62cf0e5e82e433d9f1d711a872ceae8739ca0a431a15b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=125.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=697B max=2.0KiB
2021/07/08 17:35:24 scheduler task 53acbecc (flow 4d8af254): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s065.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s065.Main.cp_out_file 4d8af254 exec extern s3://niema-test/n100/r09/n100.r09.s065.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:24  <-  n100.r09.s076.Main.out_file 2a7d8e22 ok     exec 5m9s 35.7MiB
2021/07/08 17:35:24 n100.r09.s076.Main.out_file 2a7d8e22 n100/r09/n100.r09.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc783925e8986dc1aefc7ebaff6b29bdf0d789e7d781b95238c7dbbdb9395e4e
	sha256:2a7d8e22c09991bf030f6f6f4ff5b6b92d560d758641b4efab08feabe307023d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5bd2ae1b8bf14a231b822b538b9286cefb08f832afbbf9e6d396c6c4fe44160
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s076_output"
	    wget -O "n100.r09.s076_output/n100.r09.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s076_output/n100.r09.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s076_output/n100.r09.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s076_output/n100.r09.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s076_output/n100.r09.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s076_output/n100.r09.s076.reference.fas" "n100.r09.s076_output/n100.r09.s076.fq1.fastq" "n100.r09.s076_output/n100.r09.s076.fq2.fastq" | samtools view -bS - > "n100.r09.s076_output/n100.r09.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s076_output/n100.r09.s076.untrimmed.sorted.bam" "n100.r09.s076_output/n100.r09.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s076_output/n100.r09.s076.untrimmed.sorted.bam" -b "n100.r09.s076_output/n100.r09.s076.primers.bed" -p "n100.r09.s076_output/n100.r09.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" "n100.r09.s076_output/n100.r09.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s076_output/n100.r09.s076.reference.fas" "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" > "n100.r09.s076_output/n100.r09.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s076_output/n100.r09.s076.reference.fas" --call-indels "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" > "n100.r09.s076_output/n100.r09.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s076_output/n100.r09.s076.trimmed.sorted.bam" > "n100.r09.s076_output/n100.r09.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s076_output/n100.r09.s076.depth.txt" "n100.r09.s076_output/n100.r09.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s076_output/n100.r09.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s076_output/n100.r09.s076.reference.fas" | bcftools consensus -m "n100.r09.s076_output/n100.r09.s076.low_depth.tsv" tmp.vcf.gz > "n100.r09.s076_output/n100.r09.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fa6aa84bb22d1caf04e235b3e56263ce4c771a4aa6d05968d83ff7642fca9287 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=125.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:24 scheduler task ab700a09 (flow f297a26b): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s076.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s076.Main.cp_out_file f297a26b exec extern s3://niema-test/n100/r09/n100.r09.s076.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): transferring output (try 0): started
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloading (try 0): started
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloading val<.=7edcc527 35.4MiB>
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloading list<val<.=2bbebeb1 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloading val<.=124afdee 35.4MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloading (try 0): started
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloading list<val<.=0da0b5ab 35.8MiB> 35.8MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloading val<.=a697265d 35.4MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloading val<.=9a1fbe7e 35.4MiB>
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloaded val<.=7edcc527 35.4MiB>
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloaded val<.=124afdee 35.4MiB>
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloaded list<val<.=2bbebeb1 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task c4a764b4 (flow 9fc13a0b): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24  <-  n100.r09.s098.Main.out_file 9fc13a0b ok     exec 5m9s 35.7MiB
2021/07/08 17:35:24 n100.r09.s098.Main.out_file 9fc13a0b n100/r09/n100.r09.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:002fa9f02a6099684abe2fb3137b5ec96bf70ea5536b5d32f6c5adf5796a79d5
	sha256:9fc13a0bd30bab2cceefde7fa6ae2cb361d7ea07aaf469b2b4f92ee51d336f0d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c4a764b47df66885202626a1015b592530c19d571f9e271153009e9adbe218df
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s098_output"
	    wget -O "n100.r09.s098_output/n100.r09.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s098_output/n100.r09.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s098_output/n100.r09.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s098_output/n100.r09.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s098_output/n100.r09.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s098_output/n100.r09.s098.reference.fas" "n100.r09.s098_output/n100.r09.s098.fq1.fastq" "n100.r09.s098_output/n100.r09.s098.fq2.fastq" | samtools view -bS - > "n100.r09.s098_output/n100.r09.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s098_output/n100.r09.s098.untrimmed.sorted.bam" "n100.r09.s098_output/n100.r09.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s098_output/n100.r09.s098.untrimmed.sorted.bam" -b "n100.r09.s098_output/n100.r09.s098.primers.bed" -p "n100.r09.s098_output/n100.r09.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" "n100.r09.s098_output/n100.r09.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s098_output/n100.r09.s098.reference.fas" "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" > "n100.r09.s098_output/n100.r09.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s098_output/n100.r09.s098.reference.fas" --call-indels "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" > "n100.r09.s098_output/n100.r09.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s098_output/n100.r09.s098.trimmed.sorted.bam" > "n100.r09.s098_output/n100.r09.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s098_output/n100.r09.s098.depth.txt" "n100.r09.s098_output/n100.r09.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s098_output/n100.r09.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s098_output/n100.r09.s098.reference.fas" | bcftools consensus -m "n100.r09.s098_output/n100.r09.s098.low_depth.tsv" tmp.vcf.gz > "n100.r09.s098_output/n100.r09.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2bbebeb16651bf95572c1062f125966d610e197f90058d8f8f39c6d64d3137ab 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.4MiB max=125.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:35:24 scheduler task 0d0afd13 (flow bb3cc101): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s098.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s098.Main.cp_out_file bb3cc101 exec extern s3://niema-test/n100/r09/n100.r09.s098.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloading (try 0): started
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloading list<val<.=1a57601b 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloading val<.=f497844d 35.4MiB>
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloading val<.=05f3730e 35.4MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloaded val<.=a697265d 35.4MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloaded list<val<.=0da0b5ab 35.8MiB> 35.8MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloaded val<.=9a1fbe7e 35.4MiB>
2021/07/08 17:35:24 scheduler task 0bb80e08 (flow 6ea6ac51): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24  <-  n100.r09.s074.Main.out_file 6ea6ac51 ok     exec 5m15s 35.8MiB
2021/07/08 17:35:24 n100.r09.s074.Main.out_file 6ea6ac51 n100/r09/n100.r09.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:690464e74d21e9ad5e8afb7b86d8179a6455fdd6fa1f2bfd27e86c7306ed3ea9
	sha256:6ea6ac511ec8508c6ef19597f147a3792739b9ee7a04d52960a57f598c84ef4e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0bb80e0812f43d2a298bca5ffacf80ab5ea99e7d6f3dff79cfe0e0fcb0344214
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s074_output"
	    wget -O "n100.r09.s074_output/n100.r09.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s074_output/n100.r09.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s074_output/n100.r09.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s074_output/n100.r09.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s074_output/n100.r09.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s074_output/n100.r09.s074.reference.fas" "n100.r09.s074_output/n100.r09.s074.fq1.fastq" "n100.r09.s074_output/n100.r09.s074.fq2.fastq" | samtools view -bS - > "n100.r09.s074_output/n100.r09.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s074_output/n100.r09.s074.untrimmed.sorted.bam" "n100.r09.s074_output/n100.r09.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s074_output/n100.r09.s074.untrimmed.sorted.bam" -b "n100.r09.s074_output/n100.r09.s074.primers.bed" -p "n100.r09.s074_output/n100.r09.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" "n100.r09.s074_output/n100.r09.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s074_output/n100.r09.s074.reference.fas" "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" > "n100.r09.s074_output/n100.r09.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s074_output/n100.r09.s074.reference.fas" --call-indels "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" > "n100.r09.s074_output/n100.r09.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s074_output/n100.r09.s074.trimmed.sorted.bam" > "n100.r09.s074_output/n100.r09.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s074_output/n100.r09.s074.depth.txt" "n100.r09.s074_output/n100.r09.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s074_output/n100.r09.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s074_output/n100.r09.s074.reference.fas" | bcftools consensus -m "n100.r09.s074_output/n100.r09.s074.low_depth.tsv" tmp.vcf.gz > "n100.r09.s074_output/n100.r09.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0da0b5ab8d969c414818494dbcf882cb3b594565db6923101f4dddbfc59f1818 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=123.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=875B max=2.1KiB
2021/07/08 17:35:24 scheduler task 10fc679c (flow 99be536f): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s074.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s074.Main.cp_out_file 99be536f exec extern s3://niema-test/n100/r09/n100.r09.s074.tar.gz 35.8MiB
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloaded list<val<.=1a57601b 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloaded val<.=f497844d 35.4MiB>
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloaded val<.=05f3730e 35.4MiB>
2021/07/08 17:35:24 scheduler task 8a72f87e (flow 1eb78b40): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24  <-  n100.r09.s032.Main.out_file 1eb78b40 ok     exec 5m9s 35.7MiB
2021/07/08 17:35:24 n100.r09.s032.Main.out_file 1eb78b40 n100/r09/n100.r09.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7192d4affb9ca105af91e5f6fd29d5a9a0954a8828ef9e25fb9760734a427ed3
	sha256:1eb78b4090e3946bca0ebd2fe7621906db6b879959472b708275d545482b1331
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a72f87eed16b74502183b00a7035fa25cb125f2ca6b0b060f0916e665b68011
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s032_output"
	    wget -O "n100.r09.s032_output/n100.r09.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s032_output/n100.r09.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s032_output/n100.r09.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s032_output/n100.r09.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s032_output/n100.r09.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s032_output/n100.r09.s032.reference.fas" "n100.r09.s032_output/n100.r09.s032.fq1.fastq" "n100.r09.s032_output/n100.r09.s032.fq2.fastq" | samtools view -bS - > "n100.r09.s032_output/n100.r09.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s032_output/n100.r09.s032.untrimmed.sorted.bam" "n100.r09.s032_output/n100.r09.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s032_output/n100.r09.s032.untrimmed.sorted.bam" -b "n100.r09.s032_output/n100.r09.s032.primers.bed" -p "n100.r09.s032_output/n100.r09.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" "n100.r09.s032_output/n100.r09.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s032_output/n100.r09.s032.reference.fas" "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" > "n100.r09.s032_output/n100.r09.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s032_output/n100.r09.s032.reference.fas" --call-indels "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" > "n100.r09.s032_output/n100.r09.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s032_output/n100.r09.s032.trimmed.sorted.bam" > "n100.r09.s032_output/n100.r09.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s032_output/n100.r09.s032.depth.txt" "n100.r09.s032_output/n100.r09.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s032_output/n100.r09.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s032_output/n100.r09.s032.reference.fas" | bcftools consensus -m "n100.r09.s032_output/n100.r09.s032.low_depth.tsv" tmp.vcf.gz > "n100.r09.s032_output/n100.r09.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1a57601b05bf0169f9f0df56d08a42e6fc304c7a29b3c35602e7219584d62b2f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.9MiB max=130.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:24 scheduler task 906fb448 (flow 16ed3613): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s032.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s032.Main.cp_out_file 16ed3613 exec extern s3://niema-test/n100/r09/n100.r09.s032.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloading (try 0): started
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloading list<val<.=bfcea4b5 35.8MiB> 35.8MiB>
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloading val<.=6b5268d6 35.4MiB>
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloading val<.=45b15a62 35.4MiB>
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): promoting objects (try 0): started
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloaded val<.=45b15a62 35.4MiB>
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloaded val<.=6b5268d6 35.4MiB>
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloaded list<val<.=bfcea4b5 35.8MiB> 35.8MiB>
2021/07/08 17:35:24 scheduler task 2564252a (flow 071f7e69): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloading (try 0): started
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloading list<val<.=4a88c5b2 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloading val<.=3262db08 35.4MiB>
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloading val<.=c70d6a8f 35.4MiB>
2021/07/08 17:35:24  <-  n100.r09.s060.Main.out_file 071f7e69 ok     exec 5m16s 35.8MiB
2021/07/08 17:35:24 n100.r09.s060.Main.out_file 071f7e69 n100/r09/n100.r09.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9879fd12d8813a23b31ae01213e4f9d1bbcdd0b2882dc6cb61014653efacf3b5
	sha256:071f7e69bdbbc39ba2ae679d353ca798017931bc322bb7579c7a7773b702de0f
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2564252addc231ef384a8cd78888616814404ec55313d1905a28b87d6481ec1c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s060_output"
	    wget -O "n100.r09.s060_output/n100.r09.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s060_output/n100.r09.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s060_output/n100.r09.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s060_output/n100.r09.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s060_output/n100.r09.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s060_output/n100.r09.s060.reference.fas" "n100.r09.s060_output/n100.r09.s060.fq1.fastq" "n100.r09.s060_output/n100.r09.s060.fq2.fastq" | samtools view -bS - > "n100.r09.s060_output/n100.r09.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s060_output/n100.r09.s060.untrimmed.sorted.bam" "n100.r09.s060_output/n100.r09.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s060_output/n100.r09.s060.untrimmed.sorted.bam" -b "n100.r09.s060_output/n100.r09.s060.primers.bed" -p "n100.r09.s060_output/n100.r09.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" "n100.r09.s060_output/n100.r09.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s060_output/n100.r09.s060.reference.fas" "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" > "n100.r09.s060_output/n100.r09.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s060_output/n100.r09.s060.reference.fas" --call-indels "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" > "n100.r09.s060_output/n100.r09.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s060_output/n100.r09.s060.trimmed.sorted.bam" > "n100.r09.s060_output/n100.r09.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s060_output/n100.r09.s060.depth.txt" "n100.r09.s060_output/n100.r09.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s060_output/n100.r09.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s060_output/n100.r09.s060.reference.fas" | bcftools consensus -m "n100.r09.s060_output/n100.r09.s060.low_depth.tsv" tmp.vcf.gz > "n100.r09.s060_output/n100.r09.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bfcea4b55e110e6c7b06189f63b1b5786cb6f8354d09a8147b81f8b942d5f409 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=126.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:35:24 scheduler task 16e1748d (flow a6629f9a): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s060.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s060.Main.cp_out_file a6629f9a exec extern s3://niema-test/n100/r09/n100.r09.s060.tar.gz 35.8MiB
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloading (try 0): started
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloading list<val<.=c138403d 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloading val<.=e12683c5 35.4MiB>
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloading val<.=09db310f 35.4MiB>
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloaded list<val<.=4a88c5b2 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloaded val<.=3262db08 35.4MiB>
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): retrieving diagnostic output (try 0): started
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloaded val<.=c70d6a8f 35.4MiB>
2021/07/08 17:35:24 scheduler task 9691b24c (flow 3c2b3c63): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24  <-  n100.r09.s049.Main.out_file 3c2b3c63 ok     exec 5m10s 35.7MiB
2021/07/08 17:35:24 n100.r09.s049.Main.out_file 3c2b3c63 n100/r09/n100.r09.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0f86058091adc18bba2787a3f9b4916889f438ab4b1ea6b7d6b4b432d66bffed
	sha256:3c2b3c6380239d8b052842ea758e71506c130939b2d1ee365ae4812d8d72ef1a
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9691b24cd44f7373fc5a3efb26ad27a58d9394baad49779f19091eaa67ccbddd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s049_output"
	    wget -O "n100.r09.s049_output/n100.r09.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s049_output/n100.r09.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s049_output/n100.r09.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s049_output/n100.r09.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s049_output/n100.r09.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s049_output/n100.r09.s049.reference.fas" "n100.r09.s049_output/n100.r09.s049.fq1.fastq" "n100.r09.s049_output/n100.r09.s049.fq2.fastq" | samtools view -bS - > "n100.r09.s049_output/n100.r09.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s049_output/n100.r09.s049.untrimmed.sorted.bam" "n100.r09.s049_output/n100.r09.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s049_output/n100.r09.s049.untrimmed.sorted.bam" -b "n100.r09.s049_output/n100.r09.s049.primers.bed" -p "n100.r09.s049_output/n100.r09.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" "n100.r09.s049_output/n100.r09.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s049_output/n100.r09.s049.reference.fas" "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" > "n100.r09.s049_output/n100.r09.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s049_output/n100.r09.s049.reference.fas" --call-indels "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" > "n100.r09.s049_output/n100.r09.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s049_output/n100.r09.s049.trimmed.sorted.bam" > "n100.r09.s049_output/n100.r09.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s049_output/n100.r09.s049.depth.txt" "n100.r09.s049_output/n100.r09.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s049_output/n100.r09.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s049_output/n100.r09.s049.reference.fas" | bcftools consensus -m "n100.r09.s049_output/n100.r09.s049.low_depth.tsv" tmp.vcf.gz > "n100.r09.s049_output/n100.r09.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4a88c5b216ee3aacadfbaa0ed54333efca214ffbfea0471dd2ddf78fb510506e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=125.4MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:24 scheduler task ff56c2db (flow 7ca83bff): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s049.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s049.Main.cp_out_file 7ca83bff exec extern s3://niema-test/n100/r09/n100.r09.s049.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloaded list<val<.=c138403d 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloaded val<.=09db310f 35.4MiB>
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloaded val<.=e12683c5 35.4MiB>
2021/07/08 17:35:24 scheduler task 704e844b (flow 7c7b20f0): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24  <-  n100.r09.s087.Main.out_file 7c7b20f0 ok     exec 5m1s 35.7MiB
2021/07/08 17:35:24 n100.r09.s087.Main.out_file 7c7b20f0 n100/r09/n100.r09.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:486b023139c5c14529eeaf16ab8c097a96f37d1cefd57cc59094ecfb5869e74d
	sha256:7c7b20f00d87142897dbfa079dc4b4be2092c5aafa7d3dbbfd557292fb1c797c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/704e844b2abf06b285d778d24d40deee9d8580a057d90f794173b776c8d02215
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s087_output"
	    wget -O "n100.r09.s087_output/n100.r09.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s087_output/n100.r09.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s087_output/n100.r09.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s087_output/n100.r09.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s087_output/n100.r09.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s087_output/n100.r09.s087.reference.fas" "n100.r09.s087_output/n100.r09.s087.fq1.fastq" "n100.r09.s087_output/n100.r09.s087.fq2.fastq" | samtools view -bS - > "n100.r09.s087_output/n100.r09.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s087_output/n100.r09.s087.untrimmed.sorted.bam" "n100.r09.s087_output/n100.r09.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s087_output/n100.r09.s087.untrimmed.sorted.bam" -b "n100.r09.s087_output/n100.r09.s087.primers.bed" -p "n100.r09.s087_output/n100.r09.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" "n100.r09.s087_output/n100.r09.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s087_output/n100.r09.s087.reference.fas" "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" > "n100.r09.s087_output/n100.r09.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s087_output/n100.r09.s087.reference.fas" --call-indels "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" > "n100.r09.s087_output/n100.r09.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s087_output/n100.r09.s087.trimmed.sorted.bam" > "n100.r09.s087_output/n100.r09.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s087_output/n100.r09.s087.depth.txt" "n100.r09.s087_output/n100.r09.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s087_output/n100.r09.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s087_output/n100.r09.s087.reference.fas" | bcftools consensus -m "n100.r09.s087_output/n100.r09.s087.low_depth.tsv" tmp.vcf.gz > "n100.r09.s087_output/n100.r09.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c138403d345612db7b60ec48206bf37cc8f905c873baf1aa3e5401a7b01caa1b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.9MiB max=126.5MiB
	    disk mean=8.4MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:35:24 scheduler task deb1ef41 (flow 74fa2b7f): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s087.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s087.Main.cp_out_file 74fa2b7f exec extern s3://niema-test/n100/r09/n100.r09.s087.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloading (try 0): started
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloading list<val<.=0866535f 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloading val<.=a5fd1e36 35.4MiB>
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloading val<.=96274d70 35.4MiB>
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): retrieving result (try 0): started
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloaded val<.=a5fd1e36 35.4MiB>
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloaded list<val<.=0866535f 35.7MiB> 35.7MiB>
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloaded val<.=96274d70 35.4MiB>
2021/07/08 17:35:24 scheduler task ca3bf7bf (flow 57c64a3d): unloading (try 0): successful, next state: complete
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:24  <-  n100.r09.s062.Main.out_file 57c64a3d ok     exec 5m10s 35.7MiB
2021/07/08 17:35:24 n100.r09.s062.Main.out_file 57c64a3d n100/r09/n100.r09.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b8a47f936ba41a95774090766d0da1eab71ac795a7ed82dc528f2cb7d45b812
	sha256:57c64a3dd3bd12511ecfd9256ca3354b9c802ea27f6b72bbd2730bf3d9a415f4
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ca3bf7bfad8c6757b682b1eecb2d87a181283c447f2415c78f08d2d3a0007021
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s062_output"
	    wget -O "n100.r09.s062_output/n100.r09.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s062_output/n100.r09.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s062_output/n100.r09.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s062_output/n100.r09.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s062_output/n100.r09.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s062_output/n100.r09.s062.reference.fas" "n100.r09.s062_output/n100.r09.s062.fq1.fastq" "n100.r09.s062_output/n100.r09.s062.fq2.fastq" | samtools view -bS - > "n100.r09.s062_output/n100.r09.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s062_output/n100.r09.s062.untrimmed.sorted.bam" "n100.r09.s062_output/n100.r09.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s062_output/n100.r09.s062.untrimmed.sorted.bam" -b "n100.r09.s062_output/n100.r09.s062.primers.bed" -p "n100.r09.s062_output/n100.r09.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" "n100.r09.s062_output/n100.r09.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s062_output/n100.r09.s062.reference.fas" "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" > "n100.r09.s062_output/n100.r09.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s062_output/n100.r09.s062.reference.fas" --call-indels "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" > "n100.r09.s062_output/n100.r09.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s062_output/n100.r09.s062.trimmed.sorted.bam" > "n100.r09.s062_output/n100.r09.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s062_output/n100.r09.s062.depth.txt" "n100.r09.s062_output/n100.r09.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s062_output/n100.r09.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s062_output/n100.r09.s062.reference.fas" | bcftools consensus -m "n100.r09.s062_output/n100.r09.s062.low_depth.tsv" tmp.vcf.gz > "n100.r09.s062_output/n100.r09.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0866535fb7d11aa5957f73fe3ac0bf7cb06eb922a593f200985658e87c60244c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=127.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:35:24 scheduler task 40a8e650 (flow fc52eafe): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s062.tar.gz resources {}
2021/07/08 17:35:24  ->  n100.r09.s062.Main.cp_out_file fc52eafe exec extern s3://niema-test/n100/r09/n100.r09.s062.tar.gz 35.7MiB
2021/07/08 17:35:24 scheduler task 8c6063fe (flow 926c1f50): transferring output (try 0): started
2021/07/08 17:35:24 scheduler task ca30c9c7 (flow 911739dc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8392991904b7151b2e4a9c73ed155d67cd16bbc80fd362d1d2a8d61735cea2e8 -> s3://niema-test/n100/r09/n100.r09.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:24  <-  n100.r09.s011.Main.cp_out_file 911739dc ok   extern 0s 35.7MiB
2021/07/08 17:35:24 scheduler task 53acbecc (flow 4d8af254): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:58efbe19047a0e900da62cf0e5e82e433d9f1d711a872ceae8739ca0a431a15b -> s3://niema-test/n100/r09/n100.r09.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:24  <-  n100.r09.s065.Main.cp_out_file 4d8af254 ok   extern 0s 35.7MiB
2021/07/08 17:35:24 scheduler task 6a9c93cc (flow 0e69c9bc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:24 scheduler task 6a9c93cc (flow 0e69c9bc): promoting objects (try 0): started
2021/07/08 17:35:24 scheduler task 6a9c93cc (flow 0e69c9bc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:24 scheduler task 6a9c93cc (flow 0e69c9bc): retrieving diagnostic output (try 0): started
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): retrieving result (try 0): started
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): promoting objects (try 0): started
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): transferring output (try 0): started
2021/07/08 17:35:25 scheduler task ab700a09 (flow f297a26b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fa6aa84bb22d1caf04e235b3e56263ce4c771a4aa6d05968d83ff7642fca9287 -> s3://niema-test/n100/r09/n100.r09.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s076.Main.cp_out_file f297a26b ok   extern 0s 35.7MiB
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): promoting objects (try 0): started
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): retrieving diagnostic output (try 0): started
2021/07/08 17:35:25 scheduler task 10fc679c (flow 99be536f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0da0b5ab8d969c414818494dbcf882cb3b594565db6923101f4dddbfc59f1818 -> s3://niema-test/n100/r09/n100.r09.s074.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s074.Main.cp_out_file 99be536f ok   extern 0s 35.8MiB
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): retrieving diagnostic output (try 0): started
2021/07/08 17:35:25 scheduler task 0d0afd13 (flow bb3cc101): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2bbebeb16651bf95572c1062f125966d610e197f90058d8f8f39c6d64d3137ab -> s3://niema-test/n100/r09/n100.r09.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s098.Main.cp_out_file bb3cc101 ok   extern 0s 35.7MiB
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): retrieving result (try 0): started
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloading (try 0): started
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloading list<val<.=d26a51fd 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloading val<.=9e0c6319 35.4MiB>
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloading val<.=8842697c 35.4MiB>
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): retrieving result (try 0): started
2021/07/08 17:35:25 scheduler task 906fb448 (flow 16ed3613): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1a57601b05bf0169f9f0df56d08a42e6fc304c7a29b3c35602e7219584d62b2f -> s3://niema-test/n100/r09/n100.r09.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s032.Main.cp_out_file 16ed3613 ok   extern 0s 35.7MiB
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): transferring output (try 0): started
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloaded val<.=8842697c 35.4MiB>
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloaded list<val<.=d26a51fd 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloaded val<.=9e0c6319 35.4MiB>
2021/07/08 17:35:25 scheduler task 8c6063fe (flow 926c1f50): unloading (try 0): successful, next state: complete
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:25  <-  n100.r09.s096.Main.out_file 926c1f50 ok     exec 5m10s 35.7MiB
2021/07/08 17:35:25 n100.r09.s096.Main.out_file 926c1f50 n100/r09/n100.r09.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cd9736f8733276f6a1652282df2e742c9375f963149b359adbf3a9733c0e13eb
	sha256:926c1f5010a7a9b0fe9bef7cff4bd033dc860f6aa8eca2f05277621d9edfc83c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c6063fe005b38053fc4adb32c8e3a578e2a928c742998d5547aef5a39b00674
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s096_output"
	    wget -O "n100.r09.s096_output/n100.r09.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s096_output/n100.r09.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s096_output/n100.r09.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s096_output/n100.r09.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s096_output/n100.r09.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s096_output/n100.r09.s096.reference.fas" "n100.r09.s096_output/n100.r09.s096.fq1.fastq" "n100.r09.s096_output/n100.r09.s096.fq2.fastq" | samtools view -bS - > "n100.r09.s096_output/n100.r09.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s096_output/n100.r09.s096.untrimmed.sorted.bam" "n100.r09.s096_output/n100.r09.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s096_output/n100.r09.s096.untrimmed.sorted.bam" -b "n100.r09.s096_output/n100.r09.s096.primers.bed" -p "n100.r09.s096_output/n100.r09.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" "n100.r09.s096_output/n100.r09.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s096_output/n100.r09.s096.reference.fas" "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" > "n100.r09.s096_output/n100.r09.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s096_output/n100.r09.s096.reference.fas" --call-indels "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" > "n100.r09.s096_output/n100.r09.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s096_output/n100.r09.s096.trimmed.sorted.bam" > "n100.r09.s096_output/n100.r09.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s096_output/n100.r09.s096.depth.txt" "n100.r09.s096_output/n100.r09.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s096_output/n100.r09.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s096_output/n100.r09.s096.reference.fas" | bcftools consensus -m "n100.r09.s096_output/n100.r09.s096.low_depth.tsv" tmp.vcf.gz > "n100.r09.s096_output/n100.r09.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d26a51fde66f8afd6257c560843812713ee351b8f28762dc4612237325b94210 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=127.2MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:35:25 scheduler task 7a4a98e7 (flow 750d6d39): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s096.tar.gz resources {}
2021/07/08 17:35:25  ->  n100.r09.s096.Main.cp_out_file 750d6d39 exec extern s3://niema-test/n100/r09/n100.r09.s096.tar.gz 35.7MiB
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): promoting objects (try 0): started
2021/07/08 17:35:25 scheduler task ff56c2db (flow 7ca83bff): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4a88c5b216ee3aacadfbaa0ed54333efca214ffbfea0471dd2ddf78fb510506e -> s3://niema-test/n100/r09/n100.r09.s049.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s049.Main.cp_out_file 7ca83bff ok   extern 0s 35.7MiB
2021/07/08 17:35:25 scheduler task deb1ef41 (flow 74fa2b7f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c138403d345612db7b60ec48206bf37cc8f905c873baf1aa3e5401a7b01caa1b -> s3://niema-test/n100/r09/n100.r09.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s087.Main.cp_out_file 74fa2b7f ok   extern 0s 35.7MiB
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): transferring output (try 0): started
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): retrieving diagnostic output (try 0): started
2021/07/08 17:35:25 scheduler task 16e1748d (flow a6629f9a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bfcea4b55e110e6c7b06189f63b1b5786cb6f8354d09a8147b81f8b942d5f409 -> s3://niema-test/n100/r09/n100.r09.s060.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s060.Main.cp_out_file a6629f9a ok   extern 0s 35.8MiB
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): retrieving result (try 0): started
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloading (try 0): started
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloading list<val<.=746bbb20 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloading val<.=ef08f934 35.4MiB>
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloading val<.=2769e60a 35.4MiB>
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:25 scheduler task 55154fab (flow 7e991e05): transferring output (try 0): started
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloaded val<.=ef08f934 35.4MiB>
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloaded val<.=2769e60a 35.4MiB>
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloaded list<val<.=746bbb20 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 6a9c93cc (flow 0e69c9bc): unloading (try 0): successful, next state: complete
2021/07/08 17:35:25  <-  n100.r09.s068.Main.out_file 0e69c9bc ok     exec 5m2s 35.7MiB
2021/07/08 17:35:25 n100.r09.s068.Main.out_file 0e69c9bc n100/r09/n100.r09.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4b4c9f1b8b002ab91d4cdf7921f7a3f7669342c02c0b5c7b58548b79f756781b
	sha256:0e69c9bc61d44eddfe54ef13656becdac5b55bf264d3a613a492e7f49e72258d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a9c93cc631a2bbcccab20f1d753fe44737bb2805d9f3312d27487a2d97b437a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s068_output"
	    wget -O "n100.r09.s068_output/n100.r09.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s068_output/n100.r09.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s068_output/n100.r09.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s068_output/n100.r09.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s068_output/n100.r09.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s068_output/n100.r09.s068.reference.fas" "n100.r09.s068_output/n100.r09.s068.fq1.fastq" "n100.r09.s068_output/n100.r09.s068.fq2.fastq" | samtools view -bS - > "n100.r09.s068_output/n100.r09.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s068_output/n100.r09.s068.untrimmed.sorted.bam" "n100.r09.s068_output/n100.r09.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s068_output/n100.r09.s068.untrimmed.sorted.bam" -b "n100.r09.s068_output/n100.r09.s068.primers.bed" -p "n100.r09.s068_output/n100.r09.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" "n100.r09.s068_output/n100.r09.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s068_output/n100.r09.s068.reference.fas" "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" > "n100.r09.s068_output/n100.r09.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s068_output/n100.r09.s068.reference.fas" --call-indels "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" > "n100.r09.s068_output/n100.r09.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s068_output/n100.r09.s068.trimmed.sorted.bam" > "n100.r09.s068_output/n100.r09.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s068_output/n100.r09.s068.depth.txt" "n100.r09.s068_output/n100.r09.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s068_output/n100.r09.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s068_output/n100.r09.s068.reference.fas" | bcftools consensus -m "n100.r09.s068_output/n100.r09.s068.low_depth.tsv" tmp.vcf.gz > "n100.r09.s068_output/n100.r09.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:746bbb204ca56e80fc48e9156ab31346b990ddc4f24b2a672b532c2095564dd7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=124.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=348B max=2.0KiB
2021/07/08 17:35:25 scheduler task 7243acb4 (flow 466022e2): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s068.tar.gz resources {}
2021/07/08 17:35:25  ->  n100.r09.s068.Main.cp_out_file 466022e2 exec extern s3://niema-test/n100/r09/n100.r09.s068.tar.gz 35.7MiB
2021/07/08 17:35:25 scheduler task 40a8e650 (flow fc52eafe): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0866535fb7d11aa5957f73fe3ac0bf7cb06eb922a593f200985658e87c60244c -> s3://niema-test/n100/r09/n100.r09.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:25  <-  n100.r09.s062.Main.cp_out_file fc52eafe ok   extern 0s 35.7MiB
2021/07/08 17:35:25 scheduler task adaa95a9 (flow 48730549): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:25 scheduler task adaa95a9 (flow 48730549): promoting objects (try 0): started
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloading (try 0): started
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloading list<val<.=9c38b4e3 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloading val<.=6f3a2485 35.4MiB>
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloading val<.=af1b6de9 35.4MiB>
2021/07/08 17:35:25 scheduler task adaa95a9 (flow 48730549): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:25 scheduler task adaa95a9 (flow 48730549): retrieving diagnostic output (try 0): started
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloaded val<.=6f3a2485 35.4MiB>
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloaded list<val<.=9c38b4e3 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloaded val<.=af1b6de9 35.4MiB>
2021/07/08 17:35:25 scheduler task 339efe72 (flow ac3f4213): unloading (try 0): successful, next state: complete
2021/07/08 17:35:25  <-  n100.r09.s015.Main.out_file ac3f4213 ok     exec 4m57s 35.7MiB
2021/07/08 17:35:25 n100.r09.s015.Main.out_file ac3f4213 n100/r09/n100.r09.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d1b020f1befb27e46f44d4efde0d0f8f9f55672afdf21d9a50e9cef6f8f7f062
	sha256:ac3f42137022fcf9abce7b8b280878a88eebfe51cfd40cf1c87e4f89a71a9968
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/339efe72c0d6662ee79ccd9acef8dd7707d6cfb93f0fb1013b86569455d8159d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s015_output"
	    wget -O "n100.r09.s015_output/n100.r09.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s015_output/n100.r09.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s015_output/n100.r09.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s015_output/n100.r09.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s015_output/n100.r09.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s015_output/n100.r09.s015.reference.fas" "n100.r09.s015_output/n100.r09.s015.fq1.fastq" "n100.r09.s015_output/n100.r09.s015.fq2.fastq" | samtools view -bS - > "n100.r09.s015_output/n100.r09.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s015_output/n100.r09.s015.untrimmed.sorted.bam" "n100.r09.s015_output/n100.r09.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s015_output/n100.r09.s015.untrimmed.sorted.bam" -b "n100.r09.s015_output/n100.r09.s015.primers.bed" -p "n100.r09.s015_output/n100.r09.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" "n100.r09.s015_output/n100.r09.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s015_output/n100.r09.s015.reference.fas" "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" > "n100.r09.s015_output/n100.r09.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s015_output/n100.r09.s015.reference.fas" --call-indels "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" > "n100.r09.s015_output/n100.r09.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s015_output/n100.r09.s015.trimmed.sorted.bam" > "n100.r09.s015_output/n100.r09.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s015_output/n100.r09.s015.depth.txt" "n100.r09.s015_output/n100.r09.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s015_output/n100.r09.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s015_output/n100.r09.s015.reference.fas" | bcftools consensus -m "n100.r09.s015_output/n100.r09.s015.low_depth.tsv" tmp.vcf.gz > "n100.r09.s015_output/n100.r09.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c38b4e384b15d07c2a5b0d7dd5966fb7fdb0215bb6c4970be91478dfa99d0fa 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=126.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:35:25 scheduler task 8b3fcad2 (flow c642f9f8): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s015.tar.gz resources {}
2021/07/08 17:35:25  ->  n100.r09.s015.Main.cp_out_file c642f9f8 exec extern s3://niema-test/n100/r09/n100.r09.s015.tar.gz 35.7MiB
2021/07/08 17:35:25 scheduler task adaa95a9 (flow 48730549): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:25 scheduler task adaa95a9 (flow 48730549): retrieving result (try 0): started
2021/07/08 17:35:25 scheduler task 3838912f (flow 65bdc09d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:25 scheduler task 3838912f (flow 65bdc09d): promoting objects (try 0): started
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): unloading (try 0): started
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): unloading list<val<.=c05ae9c2 35.7MiB> 35.7MiB>
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): unloading val<.=e20b945e 35.4MiB>
2021/07/08 17:35:25 scheduler task 8cebfe33 (flow 85081685): unloading val<.=32bbc792 35.4MiB>
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): transferring output (try 0): started
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): retrieving diagnostic output (try 0): started
2021/07/08 17:35:26 scheduler task 8cebfe33 (flow 85081685): unloaded val<.=e20b945e 35.4MiB>
2021/07/08 17:35:26 scheduler task 8cebfe33 (flow 85081685): unloaded list<val<.=c05ae9c2 35.7MiB> 35.7MiB>
2021/07/08 17:35:26 scheduler task 8cebfe33 (flow 85081685): unloaded val<.=32bbc792 35.4MiB>
2021/07/08 17:35:26 scheduler task 8cebfe33 (flow 85081685): unloading (try 0): successful, next state: complete
2021/07/08 17:35:26  <-  n100.r09.s085.Main.out_file 85081685 ok     exec 5m11s 35.7MiB
2021/07/08 17:35:26 n100.r09.s085.Main.out_file 85081685 n100/r09/n100.r09.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3fb89f79ae3d495a71ab506691207546f156349afd66c0289cd3495b12310414
	sha256:8508168539b76c3d17846b722eba7871d5b8d180688f375ecae79d6976315606
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8cebfe330b9f82f4969fcd99c93a8d62af45d53f3929fb38515f38bdebd15619
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s085_output"
	    wget -O "n100.r09.s085_output/n100.r09.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s085_output/n100.r09.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s085_output/n100.r09.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s085_output/n100.r09.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s085_output/n100.r09.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s085_output/n100.r09.s085.reference.fas" "n100.r09.s085_output/n100.r09.s085.fq1.fastq" "n100.r09.s085_output/n100.r09.s085.fq2.fastq" | samtools view -bS - > "n100.r09.s085_output/n100.r09.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s085_output/n100.r09.s085.untrimmed.sorted.bam" "n100.r09.s085_output/n100.r09.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s085_output/n100.r09.s085.untrimmed.sorted.bam" -b "n100.r09.s085_output/n100.r09.s085.primers.bed" -p "n100.r09.s085_output/n100.r09.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" "n100.r09.s085_output/n100.r09.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s085_output/n100.r09.s085.reference.fas" "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" > "n100.r09.s085_output/n100.r09.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s085_output/n100.r09.s085.reference.fas" --call-indels "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" > "n100.r09.s085_output/n100.r09.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s085_output/n100.r09.s085.trimmed.sorted.bam" > "n100.r09.s085_output/n100.r09.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s085_output/n100.r09.s085.depth.txt" "n100.r09.s085_output/n100.r09.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s085_output/n100.r09.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s085_output/n100.r09.s085.reference.fas" | bcftools consensus -m "n100.r09.s085_output/n100.r09.s085.low_depth.tsv" tmp.vcf.gz > "n100.r09.s085_output/n100.r09.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c05ae9c2a0eaf9865d20eac21df76a2786b7e962c2ef22bc26b6c2e4e33c07ed 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=127.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:35:26 scheduler task cf708b86 (flow 85899540): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s085.tar.gz resources {}
2021/07/08 17:35:26  ->  n100.r09.s085.Main.cp_out_file 85899540 exec extern s3://niema-test/n100/r09/n100.r09.s085.tar.gz 35.7MiB
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): retrieving result (try 0): started
2021/07/08 17:35:26 scheduler task 7a4a98e7 (flow 750d6d39): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d26a51fde66f8afd6257c560843812713ee351b8f28762dc4612237325b94210 -> s3://niema-test/n100/r09/n100.r09.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:26  <-  n100.r09.s096.Main.cp_out_file 750d6d39 ok   extern 0s 35.7MiB
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): transferring output (try 0): started
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloading (try 0): started
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloading list<val<.=6eea6c7b 35.8MiB> 35.8MiB>
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloading val<.=ab4ebeaf 35.4MiB>
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloading val<.=0b794a89 35.4MiB>
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloaded list<val<.=6eea6c7b 35.8MiB> 35.8MiB>
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloaded val<.=0b794a89 35.4MiB>
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloaded val<.=ab4ebeaf 35.4MiB>
2021/07/08 17:35:26 scheduler task 55154fab (flow 7e991e05): unloading (try 0): successful, next state: complete
2021/07/08 17:35:26  <-  n100.r09.s070.Main.out_file 7e991e05 ok     exec 5m12s 35.8MiB
2021/07/08 17:35:26 n100.r09.s070.Main.out_file 7e991e05 n100/r09/n100.r09.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f12162458b50ff871f48ddb240296e14841df96a74caf6c3dc3b77ea3428a8a8
	sha256:7e991e0535a13effea910d32a2a4808451c52fbc927c8e1a3f0a7fd4dfb502f0
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/55154fab278671304cfebdcad9d50277359a45cda4bede8397bd15a8cb796fb6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s070_output"
	    wget -O "n100.r09.s070_output/n100.r09.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s070_output/n100.r09.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s070_output/n100.r09.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s070_output/n100.r09.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s070_output/n100.r09.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s070_output/n100.r09.s070.reference.fas" "n100.r09.s070_output/n100.r09.s070.fq1.fastq" "n100.r09.s070_output/n100.r09.s070.fq2.fastq" | samtools view -bS - > "n100.r09.s070_output/n100.r09.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s070_output/n100.r09.s070.untrimmed.sorted.bam" "n100.r09.s070_output/n100.r09.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s070_output/n100.r09.s070.untrimmed.sorted.bam" -b "n100.r09.s070_output/n100.r09.s070.primers.bed" -p "n100.r09.s070_output/n100.r09.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" "n100.r09.s070_output/n100.r09.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s070_output/n100.r09.s070.reference.fas" "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" > "n100.r09.s070_output/n100.r09.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s070_output/n100.r09.s070.reference.fas" --call-indels "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" > "n100.r09.s070_output/n100.r09.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s070_output/n100.r09.s070.trimmed.sorted.bam" > "n100.r09.s070_output/n100.r09.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s070_output/n100.r09.s070.depth.txt" "n100.r09.s070_output/n100.r09.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s070_output/n100.r09.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s070_output/n100.r09.s070.reference.fas" | bcftools consensus -m "n100.r09.s070_output/n100.r09.s070.low_depth.tsv" tmp.vcf.gz > "n100.r09.s070_output/n100.r09.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6eea6c7bbeb09d37083699c430d95ba60f27f712073ea494913f12f86c94ba3c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=125.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:35:26 scheduler task 62edd024 (flow 87236e0d): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s070.tar.gz resources {}
2021/07/08 17:35:26  ->  n100.r09.s070.Main.cp_out_file 87236e0d exec extern s3://niema-test/n100/r09/n100.r09.s070.tar.gz 35.8MiB
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): promoting objects (try 0): started
2021/07/08 17:35:26 scheduler task 7243acb4 (flow 466022e2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:746bbb204ca56e80fc48e9156ab31346b990ddc4f24b2a672b532c2095564dd7 -> s3://niema-test/n100/r09/n100.r09.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:26  <-  n100.r09.s068.Main.cp_out_file 466022e2 ok   extern 0s 35.7MiB
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): retrieving diagnostic output (try 0): started
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): retrieving result (try 0): started
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloading (try 0): started
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloading list<val<.=32c8d2f8 35.7MiB> 35.7MiB>
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloading val<.=4ab799fe 35.4MiB>
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloading val<.=19ae7594 35.4MiB>
2021/07/08 17:35:26 scheduler task 8b3fcad2 (flow c642f9f8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c38b4e384b15d07c2a5b0d7dd5966fb7fdb0215bb6c4970be91478dfa99d0fa -> s3://niema-test/n100/r09/n100.r09.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:26  <-  n100.r09.s015.Main.cp_out_file c642f9f8 ok   extern 0s 35.7MiB
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloaded val<.=4ab799fe 35.4MiB>
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloaded val<.=19ae7594 35.4MiB>
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloaded list<val<.=32c8d2f8 35.7MiB> 35.7MiB>
2021/07/08 17:35:26 scheduler task adaa95a9 (flow 48730549): unloading (try 0): successful, next state: complete
2021/07/08 17:35:26 scheduler task 89f12d5b (flow d6d4b6d9): transferring output (try 0): started
2021/07/08 17:35:26  <-  n100.r09.s086.Main.out_file 48730549 ok     exec 5m12s 35.7MiB
2021/07/08 17:35:26 n100.r09.s086.Main.out_file 48730549 n100/r09/n100.r09.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a7b3d94e29054087eb43a63bcc726040ffb1cf2cde625809ef93f0afe94c49b
	sha256:4873054939176c1479685c38621984d6242de7fa82e39fcd918da1e78dd27021
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/adaa95a96835abb08f21f8cda85f81951f41c133ed86dd185048c906dd4b5a7d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s086_output"
	    wget -O "n100.r09.s086_output/n100.r09.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s086_output/n100.r09.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s086_output/n100.r09.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s086_output/n100.r09.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s086_output/n100.r09.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s086_output/n100.r09.s086.reference.fas" "n100.r09.s086_output/n100.r09.s086.fq1.fastq" "n100.r09.s086_output/n100.r09.s086.fq2.fastq" | samtools view -bS - > "n100.r09.s086_output/n100.r09.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s086_output/n100.r09.s086.untrimmed.sorted.bam" "n100.r09.s086_output/n100.r09.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s086_output/n100.r09.s086.untrimmed.sorted.bam" -b "n100.r09.s086_output/n100.r09.s086.primers.bed" -p "n100.r09.s086_output/n100.r09.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" "n100.r09.s086_output/n100.r09.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s086_output/n100.r09.s086.reference.fas" "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" > "n100.r09.s086_output/n100.r09.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s086_output/n100.r09.s086.reference.fas" --call-indels "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" > "n100.r09.s086_output/n100.r09.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s086_output/n100.r09.s086.trimmed.sorted.bam" > "n100.r09.s086_output/n100.r09.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s086_output/n100.r09.s086.depth.txt" "n100.r09.s086_output/n100.r09.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s086_output/n100.r09.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s086_output/n100.r09.s086.reference.fas" | bcftools consensus -m "n100.r09.s086_output/n100.r09.s086.low_depth.tsv" tmp.vcf.gz > "n100.r09.s086_output/n100.r09.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:32c8d2f8ecc5da4ab893a7a372c17e8b3bd6ec8f11ac98fe128a0729fc2a9dc8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:26 scheduler task af0a3b4c (flow 78ea9f72): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s086.tar.gz resources {}
2021/07/08 17:35:26  ->  n100.r09.s086.Main.cp_out_file 78ea9f72 exec extern s3://niema-test/n100/r09/n100.r09.s086.tar.gz 35.7MiB
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloading (try 0): started
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloading list<val<.=99ad1ddf 35.7MiB> 35.7MiB>
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloading val<.=d83235a4 35.4MiB>
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloading val<.=54f0ef81 35.4MiB>
2021/07/08 17:35:26 scheduler task cf708b86 (flow 85899540): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c05ae9c2a0eaf9865d20eac21df76a2786b7e962c2ef22bc26b6c2e4e33c07ed -> s3://niema-test/n100/r09/n100.r09.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:26  <-  n100.r09.s085.Main.cp_out_file 85899540 ok   extern 0s 35.7MiB
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloaded list<val<.=99ad1ddf 35.7MiB> 35.7MiB>
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloaded val<.=d83235a4 35.4MiB>
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloaded val<.=54f0ef81 35.4MiB>
2021/07/08 17:35:26 scheduler task 3838912f (flow 65bdc09d): unloading (try 0): successful, next state: complete
2021/07/08 17:35:26  <-  n100.r09.s025.Main.out_file 65bdc09d ok     exec 4m58s 35.7MiB
2021/07/08 17:35:26 n100.r09.s025.Main.out_file 65bdc09d n100/r09/n100.r09.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f7b5c39e7abc07508f63746932f02160eb832624cf21a914ab19e3ada12e2943
	sha256:65bdc09d19b31cf218ce704f98f2cb735ac9d9f48c4a36a7292b2cc7a52befd9
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3838912f0e76a448daf8f43feeb3c98249188e4f9315214fadf8fd92b2e24195
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s025_output"
	    wget -O "n100.r09.s025_output/n100.r09.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s025_output/n100.r09.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s025_output/n100.r09.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s025_output/n100.r09.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s025_output/n100.r09.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s025_output/n100.r09.s025.reference.fas" "n100.r09.s025_output/n100.r09.s025.fq1.fastq" "n100.r09.s025_output/n100.r09.s025.fq2.fastq" | samtools view -bS - > "n100.r09.s025_output/n100.r09.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s025_output/n100.r09.s025.untrimmed.sorted.bam" "n100.r09.s025_output/n100.r09.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s025_output/n100.r09.s025.untrimmed.sorted.bam" -b "n100.r09.s025_output/n100.r09.s025.primers.bed" -p "n100.r09.s025_output/n100.r09.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" "n100.r09.s025_output/n100.r09.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s025_output/n100.r09.s025.reference.fas" "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" > "n100.r09.s025_output/n100.r09.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s025_output/n100.r09.s025.reference.fas" --call-indels "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" > "n100.r09.s025_output/n100.r09.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s025_output/n100.r09.s025.trimmed.sorted.bam" > "n100.r09.s025_output/n100.r09.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s025_output/n100.r09.s025.depth.txt" "n100.r09.s025_output/n100.r09.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s025_output/n100.r09.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s025_output/n100.r09.s025.reference.fas" | bcftools consensus -m "n100.r09.s025_output/n100.r09.s025.low_depth.tsv" tmp.vcf.gz > "n100.r09.s025_output/n100.r09.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:99ad1ddf8daa076558c842b5a59b8c0986f2613574602c83445e15786abf834a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=131.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:35:26 scheduler task cf211a92 (flow a0d7bec8): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s025.tar.gz resources {}
2021/07/08 17:35:26  ->  n100.r09.s025.Main.cp_out_file a0d7bec8 exec extern s3://niema-test/n100/r09/n100.r09.s025.tar.gz 35.7MiB
2021/07/08 17:35:27 scheduler task 62edd024 (flow 87236e0d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6eea6c7bbeb09d37083699c430d95ba60f27f712073ea494913f12f86c94ba3c -> s3://niema-test/n100/r09/n100.r09.s070.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:27  <-  n100.r09.s070.Main.cp_out_file 87236e0d ok   extern 0s 35.8MiB
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloading (try 0): started
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloading list<val<.=fb86e48c 35.8MiB> 35.8MiB>
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloading val<.=c2cd1e8b 35.4MiB>
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloading val<.=e1c8127b 35.4MiB>
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloaded list<val<.=fb86e48c 35.8MiB> 35.8MiB>
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloaded val<.=c2cd1e8b 35.4MiB>
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloaded val<.=e1c8127b 35.4MiB>
2021/07/08 17:35:27 scheduler task 89f12d5b (flow d6d4b6d9): unloading (try 0): successful, next state: complete
2021/07/08 17:35:27  <-  n100.r09.s003.Main.out_file d6d4b6d9 ok     exec 5m3s 35.8MiB
2021/07/08 17:35:27 n100.r09.s003.Main.out_file d6d4b6d9 n100/r09/n100.r09.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a9fa3540df467b3932cf8e173564af93ebf61d6cfe642f25194162afa2f215f8
	sha256:d6d4b6d9287bef23de24dbecf14124a594a3cc81f1152f564b72673783e0cc56
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/89f12d5b2ca04113e659cec868721fb1162457a147668c61788ef8ff5c7b0f66
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s003_output"
	    wget -O "n100.r09.s003_output/n100.r09.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s003_output/n100.r09.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s003_output/n100.r09.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s003_output/n100.r09.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s003_output/n100.r09.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s003_output/n100.r09.s003.reference.fas" "n100.r09.s003_output/n100.r09.s003.fq1.fastq" "n100.r09.s003_output/n100.r09.s003.fq2.fastq" | samtools view -bS - > "n100.r09.s003_output/n100.r09.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s003_output/n100.r09.s003.untrimmed.sorted.bam" "n100.r09.s003_output/n100.r09.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s003_output/n100.r09.s003.untrimmed.sorted.bam" -b "n100.r09.s003_output/n100.r09.s003.primers.bed" -p "n100.r09.s003_output/n100.r09.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" "n100.r09.s003_output/n100.r09.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s003_output/n100.r09.s003.reference.fas" "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" > "n100.r09.s003_output/n100.r09.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s003_output/n100.r09.s003.reference.fas" --call-indels "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" > "n100.r09.s003_output/n100.r09.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s003_output/n100.r09.s003.trimmed.sorted.bam" > "n100.r09.s003_output/n100.r09.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s003_output/n100.r09.s003.depth.txt" "n100.r09.s003_output/n100.r09.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s003_output/n100.r09.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s003_output/n100.r09.s003.reference.fas" | bcftools consensus -m "n100.r09.s003_output/n100.r09.s003.low_depth.tsv" tmp.vcf.gz > "n100.r09.s003_output/n100.r09.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fb86e48cbbfd56f3c6fdc732abf819aa31db1e91b46c323e11825e4d8b05657b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.6MiB max=127.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 17:35:27 scheduler task 251af0aa (flow 15f7104b): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s003.tar.gz resources {}
2021/07/08 17:35:27  ->  n100.r09.s003.Main.cp_out_file 15f7104b exec extern s3://niema-test/n100/r09/n100.r09.s003.tar.gz 35.8MiB
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): promoting objects (try 0): started
2021/07/08 17:35:27 scheduler task af0a3b4c (flow 78ea9f72): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:32c8d2f8ecc5da4ab893a7a372c17e8b3bd6ec8f11ac98fe128a0729fc2a9dc8 -> s3://niema-test/n100/r09/n100.r09.s086.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:27  <-  n100.r09.s086.Main.cp_out_file 78ea9f72 ok   extern 0s 35.7MiB
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): promoting objects (try 0): started
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): retrieving diagnostic output (try 0): started
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): retrieving diagnostic output (try 0): started
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): retrieving result (try 0): started
2021/07/08 17:35:27 scheduler task cf211a92 (flow a0d7bec8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:99ad1ddf8daa076558c842b5a59b8c0986f2613574602c83445e15786abf834a -> s3://niema-test/n100/r09/n100.r09.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:27  <-  n100.r09.s025.Main.cp_out_file a0d7bec8 ok   extern 0s 35.7MiB
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): retrieving result (try 0): started
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:27 scheduler task 6798e2db (flow b27ceb8c): transferring output (try 0): started
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:27 scheduler task 6cbee719 (flow 30fe5ddd): transferring output (try 0): started
2021/07/08 17:35:27 scheduler task 2c100d29 (flow e13da95a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:27 scheduler task 2c100d29 (flow e13da95a): promoting objects (try 0): started
2021/07/08 17:35:27 scheduler task 2c100d29 (flow e13da95a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:27 scheduler task 2c100d29 (flow e13da95a): retrieving diagnostic output (try 0): started
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): retrieving result (try 0): started
2021/07/08 17:35:28 scheduler task 251af0aa (flow 15f7104b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fb86e48cbbfd56f3c6fdc732abf819aa31db1e91b46c323e11825e4d8b05657b -> s3://niema-test/n100/r09/n100.r09.s003.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:28  <-  n100.r09.s003.Main.cp_out_file 15f7104b ok   extern 0s 35.8MiB
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloading (try 0): started
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloading list<val<.=88b304da 35.7MiB> 35.7MiB>
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloading val<.=e80d2402 35.4MiB>
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloading val<.=a1803d27 35.4MiB>
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): transferring output (try 0): started
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloaded list<val<.=88b304da 35.7MiB> 35.7MiB>
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloaded val<.=a1803d27 35.4MiB>
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloaded val<.=e80d2402 35.4MiB>
2021/07/08 17:35:28 scheduler task 6798e2db (flow b27ceb8c): unloading (try 0): successful, next state: complete
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:28  <-  n100.r09.s079.Main.out_file b27ceb8c ok     exec 4m59s 35.7MiB
2021/07/08 17:35:28 n100.r09.s079.Main.out_file b27ceb8c n100/r09/n100.r09.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9bc7d2ad8f8b5f6b4f55a51d914eac8f20486a26c835ce338d3041bc7c439cb6
	sha256:b27ceb8cb1cbe8c0aa63b223b6b54d245e27fa229d874a172897d6ab31ee8b09
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6798e2db9092cdf5f97ffe6832af955a6ab422b5d49cf9b459d0fe6a0814b964
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s079_output"
	    wget -O "n100.r09.s079_output/n100.r09.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s079_output/n100.r09.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s079_output/n100.r09.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s079_output/n100.r09.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s079_output/n100.r09.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s079_output/n100.r09.s079.reference.fas" "n100.r09.s079_output/n100.r09.s079.fq1.fastq" "n100.r09.s079_output/n100.r09.s079.fq2.fastq" | samtools view -bS - > "n100.r09.s079_output/n100.r09.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s079_output/n100.r09.s079.untrimmed.sorted.bam" "n100.r09.s079_output/n100.r09.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s079_output/n100.r09.s079.untrimmed.sorted.bam" -b "n100.r09.s079_output/n100.r09.s079.primers.bed" -p "n100.r09.s079_output/n100.r09.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" "n100.r09.s079_output/n100.r09.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s079_output/n100.r09.s079.reference.fas" "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" > "n100.r09.s079_output/n100.r09.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s079_output/n100.r09.s079.reference.fas" --call-indels "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" > "n100.r09.s079_output/n100.r09.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s079_output/n100.r09.s079.trimmed.sorted.bam" > "n100.r09.s079_output/n100.r09.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s079_output/n100.r09.s079.depth.txt" "n100.r09.s079_output/n100.r09.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s079_output/n100.r09.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s079_output/n100.r09.s079.reference.fas" | bcftools consensus -m "n100.r09.s079_output/n100.r09.s079.low_depth.tsv" tmp.vcf.gz > "n100.r09.s079_output/n100.r09.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:88b304da9b4719d5aa6cedd8ed65ac560c333b4e9e49067399028389609e5d81 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=130.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:35:28 scheduler task 36f13091 (flow fdc67d97): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s079.tar.gz resources {}
2021/07/08 17:35:28  ->  n100.r09.s079.Main.cp_out_file fdc67d97 exec extern s3://niema-test/n100/r09/n100.r09.s079.tar.gz 35.7MiB
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloading (try 0): started
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloading list<val<.=452cccd8 35.7MiB> 35.7MiB>
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloading val<.=97a65ee2 35.4MiB>
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloading val<.=10931eeb 35.4MiB>
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloaded val<.=10931eeb 35.4MiB>
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloaded list<val<.=452cccd8 35.7MiB> 35.7MiB>
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloaded val<.=97a65ee2 35.4MiB>
2021/07/08 17:35:28 scheduler task 6cbee719 (flow 30fe5ddd): unloading (try 0): successful, next state: complete
2021/07/08 17:35:28  <-  n100.r09.s052.Main.out_file 30fe5ddd ok     exec 5m14s 35.7MiB
2021/07/08 17:35:28 n100.r09.s052.Main.out_file 30fe5ddd n100/r09/n100.r09.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:790ac3fd2039e5dd4fd20886428cee668bd63b5ca9b458a34b14fe061f2772d3
	sha256:30fe5ddd855e3e3786ce178b7d92dfb9235242b53952b4ede650d11687b8ed0b
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6cbee719b5e5729df8ff3023247cf2587eec98abe922864ed1122008f6f38acc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s052_output"
	    wget -O "n100.r09.s052_output/n100.r09.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s052_output/n100.r09.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s052_output/n100.r09.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s052_output/n100.r09.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s052_output/n100.r09.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s052_output/n100.r09.s052.reference.fas" "n100.r09.s052_output/n100.r09.s052.fq1.fastq" "n100.r09.s052_output/n100.r09.s052.fq2.fastq" | samtools view -bS - > "n100.r09.s052_output/n100.r09.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s052_output/n100.r09.s052.untrimmed.sorted.bam" "n100.r09.s052_output/n100.r09.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s052_output/n100.r09.s052.untrimmed.sorted.bam" -b "n100.r09.s052_output/n100.r09.s052.primers.bed" -p "n100.r09.s052_output/n100.r09.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" "n100.r09.s052_output/n100.r09.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s052_output/n100.r09.s052.reference.fas" "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" > "n100.r09.s052_output/n100.r09.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s052_output/n100.r09.s052.reference.fas" --call-indels "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" > "n100.r09.s052_output/n100.r09.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s052_output/n100.r09.s052.trimmed.sorted.bam" > "n100.r09.s052_output/n100.r09.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s052_output/n100.r09.s052.depth.txt" "n100.r09.s052_output/n100.r09.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s052_output/n100.r09.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s052_output/n100.r09.s052.reference.fas" | bcftools consensus -m "n100.r09.s052_output/n100.r09.s052.low_depth.tsv" tmp.vcf.gz > "n100.r09.s052_output/n100.r09.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:452cccd85a9c9bea3e1dc39d0028778e27a1b6ffe6246dac35d5231c22fe0379 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.3MiB max=124.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:35:28 scheduler task 8c369ad9 (flow 5c42b693): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s052.tar.gz resources {}
2021/07/08 17:35:28  ->  n100.r09.s052.Main.cp_out_file 5c42b693 exec extern s3://niema-test/n100/r09/n100.r09.s052.tar.gz 35.7MiB
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): promoting objects (try 0): started
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): retrieving diagnostic output (try 0): started
2021/07/08 17:35:28 scheduler task 4dd42029 (flow 3d6d80a3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:28 scheduler task 4dd42029 (flow 3d6d80a3): promoting objects (try 0): started
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloading (try 0): started
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloading list<val<.=ed7fd838 35.7MiB> 35.7MiB>
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloading val<.=ae7421de 35.4MiB>
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloading val<.=334903af 35.4MiB>
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): retrieving result (try 0): started
2021/07/08 17:35:28 scheduler task 4dd42029 (flow 3d6d80a3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:28 scheduler task 4dd42029 (flow 3d6d80a3): retrieving diagnostic output (try 0): started
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloaded val<.=ae7421de 35.4MiB>
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloaded val<.=334903af 35.4MiB>
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloaded list<val<.=ed7fd838 35.7MiB> 35.7MiB>
2021/07/08 17:35:28 scheduler task 2c100d29 (flow e13da95a): unloading (try 0): successful, next state: complete
2021/07/08 17:35:28 scheduler task 31dcb46d (flow ca642532): transferring output (try 0): started
2021/07/08 17:35:28  <-  n100.r09.s072.Main.out_file e13da95a ok     exec 5m5s 35.7MiB
2021/07/08 17:35:28 n100.r09.s072.Main.out_file e13da95a n100/r09/n100.r09.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac53d430ffa3eaec4fb8014cbbda5e3a1dc0da2585aa1b3923109c8df6783242
	sha256:e13da95a526ef5d5a2ea8f2fef3163c42c1dd4dec9b55c484682d9f87ad08c92
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2c100d297c2c55767d8c4864a0936a5aed01e6eb28bc9b711ea2f94c9fc532fb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s072_output"
	    wget -O "n100.r09.s072_output/n100.r09.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s072_output/n100.r09.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s072_output/n100.r09.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s072_output/n100.r09.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s072_output/n100.r09.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s072_output/n100.r09.s072.reference.fas" "n100.r09.s072_output/n100.r09.s072.fq1.fastq" "n100.r09.s072_output/n100.r09.s072.fq2.fastq" | samtools view -bS - > "n100.r09.s072_output/n100.r09.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s072_output/n100.r09.s072.untrimmed.sorted.bam" "n100.r09.s072_output/n100.r09.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s072_output/n100.r09.s072.untrimmed.sorted.bam" -b "n100.r09.s072_output/n100.r09.s072.primers.bed" -p "n100.r09.s072_output/n100.r09.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" "n100.r09.s072_output/n100.r09.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s072_output/n100.r09.s072.reference.fas" "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" > "n100.r09.s072_output/n100.r09.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s072_output/n100.r09.s072.reference.fas" --call-indels "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" > "n100.r09.s072_output/n100.r09.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s072_output/n100.r09.s072.trimmed.sorted.bam" > "n100.r09.s072_output/n100.r09.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s072_output/n100.r09.s072.depth.txt" "n100.r09.s072_output/n100.r09.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s072_output/n100.r09.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s072_output/n100.r09.s072.reference.fas" | bcftools consensus -m "n100.r09.s072_output/n100.r09.s072.low_depth.tsv" tmp.vcf.gz > "n100.r09.s072_output/n100.r09.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ed7fd8385202b5d389ec31efc06e4accfd62d5111f8432979b5c54af37cf831d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.7MiB max=129.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=871B max=3.1KiB
2021/07/08 17:35:28 scheduler task cc4ea2b7 (flow 6df237bc): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s072.tar.gz resources {}
2021/07/08 17:35:28  ->  n100.r09.s072.Main.cp_out_file 6df237bc exec extern s3://niema-test/n100/r09/n100.r09.s072.tar.gz 35.7MiB
2021/07/08 17:35:28 scheduler task 4dd42029 (flow 3d6d80a3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:28 scheduler task 4dd42029 (flow 3d6d80a3): retrieving result (try 0): started
2021/07/08 17:35:29 scheduler task 8c369ad9 (flow 5c42b693): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:452cccd85a9c9bea3e1dc39d0028778e27a1b6ffe6246dac35d5231c22fe0379 -> s3://niema-test/n100/r09/n100.r09.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:29  <-  n100.r09.s052.Main.cp_out_file 5c42b693 ok   extern 0s 35.7MiB
2021/07/08 17:35:29 scheduler task 36f13091 (flow fdc67d97): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:88b304da9b4719d5aa6cedd8ed65ac560c333b4e9e49067399028389609e5d81 -> s3://niema-test/n100/r09/n100.r09.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:29  <-  n100.r09.s079.Main.cp_out_file fdc67d97 ok   extern 0s 35.7MiB
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): transferring output (try 0): started
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): promoting objects (try 0): started
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): promoting objects (try 0): started
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): retrieving diagnostic output (try 0): started
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): retrieving result (try 0): started
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): retrieving result (try 0): started
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): promoting objects (try 0): started
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloading (try 0): started
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloading list<val<.=26809432 35.8MiB> 35.8MiB>
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloading val<.=4cf0f06d 35.4MiB>
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloading val<.=647a6102 35.4MiB>
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): transferring output (try 0): started
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): transferring output (try 0): started
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): retrieving diagnostic output (try 0): started
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloaded val<.=647a6102 35.4MiB>
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloaded list<val<.=26809432 35.8MiB> 35.8MiB>
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloaded val<.=4cf0f06d 35.4MiB>
2021/07/08 17:35:29 scheduler task 31dcb46d (flow ca642532): unloading (try 0): successful, next state: complete
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): promoting objects (try 0): started
2021/07/08 17:35:29  <-  n100.r09.s035.Main.out_file ca642532 ok     exec 5m0s 35.8MiB
2021/07/08 17:35:29 n100.r09.s035.Main.out_file ca642532 n100/r09/n100.r09.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a62849a46da1ccb7b7324b9fa27ad75f7abf8ccae376f2c7f14ffc2abdb65dd6
	sha256:ca6425327aad044e40c1b44b776944d0b66f7947676340f25f07eec63d14ad9e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/31dcb46defc141d03be20a3f30eb4cda94f07ecd0a12085ee151c5c83ef381dc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s035_output"
	    wget -O "n100.r09.s035_output/n100.r09.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s035_output/n100.r09.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s035_output/n100.r09.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s035_output/n100.r09.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s035_output/n100.r09.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s035_output/n100.r09.s035.reference.fas" "n100.r09.s035_output/n100.r09.s035.fq1.fastq" "n100.r09.s035_output/n100.r09.s035.fq2.fastq" | samtools view -bS - > "n100.r09.s035_output/n100.r09.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s035_output/n100.r09.s035.untrimmed.sorted.bam" "n100.r09.s035_output/n100.r09.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s035_output/n100.r09.s035.untrimmed.sorted.bam" -b "n100.r09.s035_output/n100.r09.s035.primers.bed" -p "n100.r09.s035_output/n100.r09.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" "n100.r09.s035_output/n100.r09.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s035_output/n100.r09.s035.reference.fas" "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" > "n100.r09.s035_output/n100.r09.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s035_output/n100.r09.s035.reference.fas" --call-indels "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" > "n100.r09.s035_output/n100.r09.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s035_output/n100.r09.s035.trimmed.sorted.bam" > "n100.r09.s035_output/n100.r09.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s035_output/n100.r09.s035.depth.txt" "n100.r09.s035_output/n100.r09.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s035_output/n100.r09.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s035_output/n100.r09.s035.reference.fas" | bcftools consensus -m "n100.r09.s035_output/n100.r09.s035.low_depth.tsv" tmp.vcf.gz > "n100.r09.s035_output/n100.r09.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:268094320c2612ffa5da814b81365ce707761a6c514320024e3b8299e24eebe6 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=128.7MiB
	    disk mean=8.1MiB max=35.8MiB
	    tmp mean=173B max=1.0KiB
2021/07/08 17:35:29 scheduler task 5d303037 (flow c47e1278): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s035.tar.gz resources {}
2021/07/08 17:35:29  ->  n100.r09.s035.Main.cp_out_file c47e1278 exec extern s3://niema-test/n100/r09/n100.r09.s035.tar.gz 35.8MiB
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloading (try 0): started
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloading list<val<.=474d237f 35.8MiB> 35.8MiB>
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloading val<.=522cad17 35.4MiB>
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloading val<.=d5363e91 35.4MiB>
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): retrieving diagnostic output (try 0): started
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): retrieving result (try 0): started
2021/07/08 17:35:29 scheduler task cc4ea2b7 (flow 6df237bc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ed7fd8385202b5d389ec31efc06e4accfd62d5111f8432979b5c54af37cf831d -> s3://niema-test/n100/r09/n100.r09.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:29  <-  n100.r09.s072.Main.cp_out_file 6df237bc ok   extern 0s 35.7MiB
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloaded list<val<.=474d237f 35.8MiB> 35.8MiB>
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloaded val<.=522cad17 35.4MiB>
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloaded val<.=d5363e91 35.4MiB>
2021/07/08 17:35:29 scheduler task 4dd42029 (flow 3d6d80a3): unloading (try 0): successful, next state: complete
2021/07/08 17:35:29  <-  n100.r09.s042.Main.out_file 3d6d80a3 ok     exec 4m54s 35.8MiB
2021/07/08 17:35:29 n100.r09.s042.Main.out_file 3d6d80a3 n100/r09/n100.r09.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b856a40ce2e9fcd76425112fbafff45692618f545fa7a9250dba6d53679dc873
	sha256:3d6d80a38e1984db294df09b6f1c98e33cce8e1ce1c890097eec85c7cac82858
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4dd42029964da3f133dc94fdc5c2a573daee6ad3935fc93cfc3fd4ae7f389c4c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s042_output"
	    wget -O "n100.r09.s042_output/n100.r09.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s042_output/n100.r09.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s042_output/n100.r09.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s042_output/n100.r09.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s042_output/n100.r09.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s042_output/n100.r09.s042.reference.fas" "n100.r09.s042_output/n100.r09.s042.fq1.fastq" "n100.r09.s042_output/n100.r09.s042.fq2.fastq" | samtools view -bS - > "n100.r09.s042_output/n100.r09.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s042_output/n100.r09.s042.untrimmed.sorted.bam" "n100.r09.s042_output/n100.r09.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s042_output/n100.r09.s042.untrimmed.sorted.bam" -b "n100.r09.s042_output/n100.r09.s042.primers.bed" -p "n100.r09.s042_output/n100.r09.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" "n100.r09.s042_output/n100.r09.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s042_output/n100.r09.s042.reference.fas" "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" > "n100.r09.s042_output/n100.r09.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s042_output/n100.r09.s042.reference.fas" --call-indels "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" > "n100.r09.s042_output/n100.r09.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s042_output/n100.r09.s042.trimmed.sorted.bam" > "n100.r09.s042_output/n100.r09.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s042_output/n100.r09.s042.depth.txt" "n100.r09.s042_output/n100.r09.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s042_output/n100.r09.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s042_output/n100.r09.s042.reference.fas" | bcftools consensus -m "n100.r09.s042_output/n100.r09.s042.low_depth.tsv" tmp.vcf.gz > "n100.r09.s042_output/n100.r09.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:474d237fcf4179be9057ab3cf79e3c60c3d2b03e9f64a518dc281b73cf8aca5a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=130.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:35:29 scheduler task 3137ecdb (flow 5445fab5): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s042.tar.gz resources {}
2021/07/08 17:35:29  ->  n100.r09.s042.Main.cp_out_file 5445fab5 exec extern s3://niema-test/n100/r09/n100.r09.s042.tar.gz 35.8MiB
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:29 scheduler task 03ade628 (flow 6fcd9514): transferring output (try 0): started
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): retrieving result (try 0): started
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:29 scheduler task 0a19571a (flow 36f22554): transferring output (try 0): started
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloading (try 0): started
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloading list<val<.=ef758e92 35.7MiB> 35.7MiB>
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloading val<.=60f83df1 35.4MiB>
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloading val<.=c76a2048 35.4MiB>
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloading (try 0): started
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloading list<val<.=d5aaffcc 35.7MiB> 35.7MiB>
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloading val<.=74981f96 35.4MiB>
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloading val<.=0bf4ee4e 35.4MiB>
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloaded list<val<.=ef758e92 35.7MiB> 35.7MiB>
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloaded val<.=60f83df1 35.4MiB>
2021/07/08 17:35:29 scheduler task 0e04bf02 (flow 9e93f670): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloaded val<.=c76a2048 35.4MiB>
2021/07/08 17:35:29 scheduler task c303b8ca (flow 79b1766d): unloading (try 0): successful, next state: complete
2021/07/08 17:35:29 scheduler task 0e04bf02 (flow 9e93f670): promoting objects (try 0): started
2021/07/08 17:35:29  <-  n100.r09.s017.Main.out_file 79b1766d ok     exec 5m15s 35.7MiB
2021/07/08 17:35:29 n100.r09.s017.Main.out_file 79b1766d n100/r09/n100.r09.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9043cd84d6fb339e55e08b29c807993285ae8461d867e0ddd035461f45d91acc
	sha256:79b1766db463c3cfa559797bf1208bd79485eb14bf0c16c524c822dfac51a42d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c303b8ca3e3f821fe46e93677070a7db9cb17dc8f4cb64d19aeed0b6a8273497
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s017_output"
	    wget -O "n100.r09.s017_output/n100.r09.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s017_output/n100.r09.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s017_output/n100.r09.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s017_output/n100.r09.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s017_output/n100.r09.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s017_output/n100.r09.s017.reference.fas" "n100.r09.s017_output/n100.r09.s017.fq1.fastq" "n100.r09.s017_output/n100.r09.s017.fq2.fastq" | samtools view -bS - > "n100.r09.s017_output/n100.r09.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s017_output/n100.r09.s017.untrimmed.sorted.bam" "n100.r09.s017_output/n100.r09.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s017_output/n100.r09.s017.untrimmed.sorted.bam" -b "n100.r09.s017_output/n100.r09.s017.primers.bed" -p "n100.r09.s017_output/n100.r09.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" "n100.r09.s017_output/n100.r09.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s017_output/n100.r09.s017.reference.fas" "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" > "n100.r09.s017_output/n100.r09.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s017_output/n100.r09.s017.reference.fas" --call-indels "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" > "n100.r09.s017_output/n100.r09.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s017_output/n100.r09.s017.trimmed.sorted.bam" > "n100.r09.s017_output/n100.r09.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s017_output/n100.r09.s017.depth.txt" "n100.r09.s017_output/n100.r09.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s017_output/n100.r09.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s017_output/n100.r09.s017.reference.fas" | bcftools consensus -m "n100.r09.s017_output/n100.r09.s017.low_depth.tsv" tmp.vcf.gz > "n100.r09.s017_output/n100.r09.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ef758e92af4c5129c85febb8cf6fb97631398f9c46113fe07b4ad60434d37e4c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:29 scheduler task b4fea816 (flow c92a973c): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s017.tar.gz resources {}
2021/07/08 17:35:29  ->  n100.r09.s017.Main.cp_out_file c92a973c exec extern s3://niema-test/n100/r09/n100.r09.s017.tar.gz 35.7MiB
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloaded list<val<.=d5aaffcc 35.7MiB> 35.7MiB>
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloaded val<.=0bf4ee4e 35.4MiB>
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloaded val<.=74981f96 35.4MiB>
2021/07/08 17:35:29 scheduler task 67ea8735 (flow 75e64e3f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:29  <-  n100.r09.s013.Main.out_file 75e64e3f ok     exec 5m4s 35.7MiB
2021/07/08 17:35:29 n100.r09.s013.Main.out_file 75e64e3f n100/r09/n100.r09.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:de87d46c233206fbd639f3fe153f263cbd7153aedd13bbeb1ed1a82e958e6a8b
	sha256:75e64e3f334733929890fefd576c55b68dc9809e4d2ea0ef737a6da47270fd81
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67ea8735b9f8697277d35a4c46ebe0ed47d4bd0341369ff4ec80bd81a1f4af7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s013_output"
	    wget -O "n100.r09.s013_output/n100.r09.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s013_output/n100.r09.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s013_output/n100.r09.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s013_output/n100.r09.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s013_output/n100.r09.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s013_output/n100.r09.s013.reference.fas" "n100.r09.s013_output/n100.r09.s013.fq1.fastq" "n100.r09.s013_output/n100.r09.s013.fq2.fastq" | samtools view -bS - > "n100.r09.s013_output/n100.r09.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s013_output/n100.r09.s013.untrimmed.sorted.bam" "n100.r09.s013_output/n100.r09.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s013_output/n100.r09.s013.untrimmed.sorted.bam" -b "n100.r09.s013_output/n100.r09.s013.primers.bed" -p "n100.r09.s013_output/n100.r09.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" "n100.r09.s013_output/n100.r09.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s013_output/n100.r09.s013.reference.fas" "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" > "n100.r09.s013_output/n100.r09.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s013_output/n100.r09.s013.reference.fas" --call-indels "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" > "n100.r09.s013_output/n100.r09.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s013_output/n100.r09.s013.trimmed.sorted.bam" > "n100.r09.s013_output/n100.r09.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s013_output/n100.r09.s013.depth.txt" "n100.r09.s013_output/n100.r09.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s013_output/n100.r09.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s013_output/n100.r09.s013.reference.fas" | bcftools consensus -m "n100.r09.s013_output/n100.r09.s013.low_depth.tsv" tmp.vcf.gz > "n100.r09.s013_output/n100.r09.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d5aaffcc26c4749e4693bae9b5a428d5108b976bd9c2950832504f43ee1e0b49 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=127.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=691B max=3.0KiB
2021/07/08 17:35:29 scheduler task 4f399125 (flow 25ef27d0): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s013.tar.gz resources {}
2021/07/08 17:35:29  ->  n100.r09.s013.Main.cp_out_file 25ef27d0 exec extern s3://niema-test/n100/r09/n100.r09.s013.tar.gz 35.7MiB
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): retrieving diagnostic output (try 0): started
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): retrieving result (try 0): started
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloading (try 0): started
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloading list<val<.=95ca890f 35.7MiB> 35.7MiB>
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloading val<.=ae6286f1 35.4MiB>
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloading val<.=e79a4c1e 35.4MiB>
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): transferring output (try 0): started
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloaded list<val<.=95ca890f 35.7MiB> 35.7MiB>
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloading (try 0): started
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloading list<val<.=e4ecdf73 35.7MiB> 35.7MiB>
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloading val<.=81517571 35.4MiB>
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloading val<.=c8bbc9ff 35.4MiB>
2021/07/08 17:35:30 scheduler task 5d303037 (flow c47e1278): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:268094320c2612ffa5da814b81365ce707761a6c514320024e3b8299e24eebe6 -> s3://niema-test/n100/r09/n100.r09.s035.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:30  <-  n100.r09.s035.Main.cp_out_file c47e1278 ok   extern 0s 35.8MiB
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloaded val<.=e79a4c1e 35.4MiB>
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloaded val<.=ae6286f1 35.4MiB>
2021/07/08 17:35:30 scheduler task 03ade628 (flow 6fcd9514): unloading (try 0): successful, next state: complete
2021/07/08 17:35:30  <-  n100.r09.s019.Main.out_file 6fcd9514 ok     exec 5m6s 35.7MiB
2021/07/08 17:35:30 n100.r09.s019.Main.out_file 6fcd9514 n100/r09/n100.r09.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb4f81a1f845fb2c8cd2bac1fe5e25a87f7485469870c1b7d5b9f8e3238835cf
	sha256:6fcd95145d7d24076e79f3ff7305a417d70c626d58d4f5d935c07b7ced841b25
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/03ade628fa9ce76f4c5d50f528d41c29fbc76fb16eac84b222abee9d5ac8f152
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s019_output"
	    wget -O "n100.r09.s019_output/n100.r09.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s019_output/n100.r09.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s019_output/n100.r09.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s019_output/n100.r09.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s019_output/n100.r09.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s019_output/n100.r09.s019.reference.fas" "n100.r09.s019_output/n100.r09.s019.fq1.fastq" "n100.r09.s019_output/n100.r09.s019.fq2.fastq" | samtools view -bS - > "n100.r09.s019_output/n100.r09.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s019_output/n100.r09.s019.untrimmed.sorted.bam" "n100.r09.s019_output/n100.r09.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s019_output/n100.r09.s019.untrimmed.sorted.bam" -b "n100.r09.s019_output/n100.r09.s019.primers.bed" -p "n100.r09.s019_output/n100.r09.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" "n100.r09.s019_output/n100.r09.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s019_output/n100.r09.s019.reference.fas" "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" > "n100.r09.s019_output/n100.r09.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s019_output/n100.r09.s019.reference.fas" --call-indels "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" > "n100.r09.s019_output/n100.r09.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s019_output/n100.r09.s019.trimmed.sorted.bam" > "n100.r09.s019_output/n100.r09.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s019_output/n100.r09.s019.depth.txt" "n100.r09.s019_output/n100.r09.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s019_output/n100.r09.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s019_output/n100.r09.s019.reference.fas" | bcftools consensus -m "n100.r09.s019_output/n100.r09.s019.low_depth.tsv" tmp.vcf.gz > "n100.r09.s019_output/n100.r09.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:95ca890f9b6b2eaa8881ce053069ccbd373a679876964a3c26ea635dc0ffc9a3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.4MiB max=130.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:30 scheduler task 25f20086 (flow 33b2f750): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s019.tar.gz resources {}
2021/07/08 17:35:30  ->  n100.r09.s019.Main.cp_out_file 33b2f750 exec extern s3://niema-test/n100/r09/n100.r09.s019.tar.gz 35.7MiB
2021/07/08 17:35:30 scheduler task 3137ecdb (flow 5445fab5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:474d237fcf4179be9057ab3cf79e3c60c3d2b03e9f64a518dc281b73cf8aca5a -> s3://niema-test/n100/r09/n100.r09.s042.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:30  <-  n100.r09.s042.Main.cp_out_file 5445fab5 ok   extern 0s 35.8MiB
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloaded list<val<.=e4ecdf73 35.7MiB> 35.7MiB>
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloaded val<.=81517571 35.4MiB>
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloaded val<.=c8bbc9ff 35.4MiB>
2021/07/08 17:35:30 scheduler task 0a19571a (flow 36f22554): unloading (try 0): successful, next state: complete
2021/07/08 17:35:30  <-  n100.r09.s063.Main.out_file 36f22554 ok     exec 5m6s 35.7MiB
2021/07/08 17:35:30 n100.r09.s063.Main.out_file 36f22554 n100/r09/n100.r09.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ce85c278a26d4337d4154e6876283886591a243087a5c649691a02bb306ba4c
	sha256:36f225542b689269ab1c7912ba88068065f18c1016829380126d1506023f7c46
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a19571ac93d53c3aa72ddd96a4caa5bec558946e9edc5065cebf2d89c8d1939
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s063_output"
	    wget -O "n100.r09.s063_output/n100.r09.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s063_output/n100.r09.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s063_output/n100.r09.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s063_output/n100.r09.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s063_output/n100.r09.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s063_output/n100.r09.s063.reference.fas" "n100.r09.s063_output/n100.r09.s063.fq1.fastq" "n100.r09.s063_output/n100.r09.s063.fq2.fastq" | samtools view -bS - > "n100.r09.s063_output/n100.r09.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s063_output/n100.r09.s063.untrimmed.sorted.bam" "n100.r09.s063_output/n100.r09.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s063_output/n100.r09.s063.untrimmed.sorted.bam" -b "n100.r09.s063_output/n100.r09.s063.primers.bed" -p "n100.r09.s063_output/n100.r09.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" "n100.r09.s063_output/n100.r09.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s063_output/n100.r09.s063.reference.fas" "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" > "n100.r09.s063_output/n100.r09.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s063_output/n100.r09.s063.reference.fas" --call-indels "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" > "n100.r09.s063_output/n100.r09.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s063_output/n100.r09.s063.trimmed.sorted.bam" > "n100.r09.s063_output/n100.r09.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s063_output/n100.r09.s063.depth.txt" "n100.r09.s063_output/n100.r09.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s063_output/n100.r09.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s063_output/n100.r09.s063.reference.fas" | bcftools consensus -m "n100.r09.s063_output/n100.r09.s063.low_depth.tsv" tmp.vcf.gz > "n100.r09.s063_output/n100.r09.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e4ecdf7353a8d3c7dbf8fe45a470cff43373a8240931b3407415a4d019d95b26 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.9MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 17:35:30 scheduler task 28fba7e0 (flow 874eaa31): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s063.tar.gz resources {}
2021/07/08 17:35:30  ->  n100.r09.s063.Main.cp_out_file 874eaa31 exec extern s3://niema-test/n100/r09/n100.r09.s063.tar.gz 35.7MiB
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): promoting objects (try 0): started
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): retrieving result (try 0): started
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:30 scheduler task df2d184f (flow 15b3bc1f): transferring output (try 0): started
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): promoting objects (try 0): started
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): promoting objects (try 0): started
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): retrieving diagnostic output (try 0): started
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): retrieving diagnostic output (try 0): started
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloading (try 0): started
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloading list<val<.=1cfbb34f 35.7MiB> 35.7MiB>
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloading val<.=7ef301d5 35.4MiB>
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloading val<.=d70cbff9 35.4MiB>
2021/07/08 17:35:30 scheduler task 3d1fe110 (flow 3e3233db): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:30 scheduler task b4fea816 (flow c92a973c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ef758e92af4c5129c85febb8cf6fb97631398f9c46113fe07b4ad60434d37e4c -> s3://niema-test/n100/r09/n100.r09.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:30  <-  n100.r09.s017.Main.cp_out_file c92a973c ok   extern 0s 35.7MiB
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:30 scheduler task 3d1fe110 (flow 3e3233db): promoting objects (try 0): started
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): retrieving result (try 0): started
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): retrieving result (try 0): started
2021/07/08 17:35:30 scheduler task 4f399125 (flow 25ef27d0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d5aaffcc26c4749e4693bae9b5a428d5108b976bd9c2950832504f43ee1e0b49 -> s3://niema-test/n100/r09/n100.r09.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:30  <-  n100.r09.s013.Main.cp_out_file 25ef27d0 ok   extern 0s 35.7MiB
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloaded list<val<.=1cfbb34f 35.7MiB> 35.7MiB>
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloaded val<.=d70cbff9 35.4MiB>
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloaded val<.=7ef301d5 35.4MiB>
2021/07/08 17:35:30 scheduler task 0e04bf02 (flow 9e93f670): unloading (try 0): successful, next state: complete
2021/07/08 17:35:30  <-  n100.r09.s021.Main.out_file 9e93f670 ok     exec 5m2s 35.7MiB
2021/07/08 17:35:30 n100.r09.s021.Main.out_file 9e93f670 n100/r09/n100.r09.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6b9594b295a11aeef0a6e143759921486acd1abc6d78e4b77482b5eb1dbafda1
	sha256:9e93f670b17ecf23ccc2354161f86b69216702838a9e841c9e33956775839f39
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0e04bf0281d8f9cbc44dd9334058666a2d3c2c9d0f719fd80eef985ddde4fd0c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s021_output"
	    wget -O "n100.r09.s021_output/n100.r09.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s021_output/n100.r09.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s021_output/n100.r09.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s021_output/n100.r09.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s021_output/n100.r09.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s021_output/n100.r09.s021.reference.fas" "n100.r09.s021_output/n100.r09.s021.fq1.fastq" "n100.r09.s021_output/n100.r09.s021.fq2.fastq" | samtools view -bS - > "n100.r09.s021_output/n100.r09.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s021_output/n100.r09.s021.untrimmed.sorted.bam" "n100.r09.s021_output/n100.r09.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s021_output/n100.r09.s021.untrimmed.sorted.bam" -b "n100.r09.s021_output/n100.r09.s021.primers.bed" -p "n100.r09.s021_output/n100.r09.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" "n100.r09.s021_output/n100.r09.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s021_output/n100.r09.s021.reference.fas" "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" > "n100.r09.s021_output/n100.r09.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s021_output/n100.r09.s021.reference.fas" --call-indels "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" > "n100.r09.s021_output/n100.r09.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s021_output/n100.r09.s021.trimmed.sorted.bam" > "n100.r09.s021_output/n100.r09.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s021_output/n100.r09.s021.depth.txt" "n100.r09.s021_output/n100.r09.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s021_output/n100.r09.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s021_output/n100.r09.s021.reference.fas" | bcftools consensus -m "n100.r09.s021_output/n100.r09.s021.low_depth.tsv" tmp.vcf.gz > "n100.r09.s021_output/n100.r09.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1cfbb34f99a6835bd0a4e7a929db344f66aea57c8bea289c30f2bd52fc9477c5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=130.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=696B max=3.1KiB
2021/07/08 17:35:30 scheduler task 2c4aff2b (flow bf149cdb): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s021.tar.gz resources {}
2021/07/08 17:35:30  ->  n100.r09.s021.Main.cp_out_file bf149cdb exec extern s3://niema-test/n100/r09/n100.r09.s021.tar.gz 35.7MiB
2021/07/08 17:35:30 scheduler task a118daf0 (flow 01eaeab9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:30 scheduler task a118daf0 (flow 01eaeab9): promoting objects (try 0): started
2021/07/08 17:35:30 scheduler task 3d1fe110 (flow 3e3233db): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:30 scheduler task 3d1fe110 (flow 3e3233db): retrieving diagnostic output (try 0): started
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:30 scheduler task 0f528024 (flow ed8c06bc): transferring output (try 0): started
2021/07/08 17:35:30 scheduler task a9d54835 (flow 462eab90): transferring output (try 0): started
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): retrieving diagnostic output (try 0): started
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): retrieving result (try 0): started
2021/07/08 17:35:31 scheduler task 25f20086 (flow 33b2f750): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:95ca890f9b6b2eaa8881ce053069ccbd373a679876964a3c26ea635dc0ffc9a3 -> s3://niema-test/n100/r09/n100.r09.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:31  <-  n100.r09.s019.Main.cp_out_file 33b2f750 ok   extern 0s 35.7MiB
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): retrieving result (try 0): started
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): transferring output (try 0): started
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): transferring output (try 0): started
2021/07/08 17:35:31 scheduler task 28fba7e0 (flow 874eaa31): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e4ecdf7353a8d3c7dbf8fe45a470cff43373a8240931b3407415a4d019d95b26 -> s3://niema-test/n100/r09/n100.r09.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:31  <-  n100.r09.s063.Main.cp_out_file 874eaa31 ok   extern 0s 35.7MiB
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): promoting objects (try 0): started
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloading (try 0): started
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloading list<val<.=09dfb863 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloading val<.=564e1dde 35.4MiB>
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloading val<.=1aa04050 35.4MiB>
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): promoting objects (try 0): started
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): retrieving diagnostic output (try 0): started
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloaded val<.=564e1dde 35.4MiB>
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloaded val<.=1aa04050 35.4MiB>
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloaded list<val<.=09dfb863 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task df2d184f (flow 15b3bc1f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:31  <-  n100.r09.s023.Main.out_file 15b3bc1f ok     exec 5m3s 35.7MiB
2021/07/08 17:35:31 n100.r09.s023.Main.out_file 15b3bc1f n100/r09/n100.r09.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4de8cff36b1f3e010934e1582962b0caeca23c7f2c7b4b1884d3c58eb686a005
	sha256:15b3bc1fb4f02319345896848c4d28509b9ec6dd4187dea05eb2a144ac907e22
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df2d184f2e6ec48c6d8671d55331589a679860558d1a621a35fea047894586fb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s023_output"
	    wget -O "n100.r09.s023_output/n100.r09.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s023_output/n100.r09.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s023_output/n100.r09.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s023_output/n100.r09.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s023_output/n100.r09.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s023_output/n100.r09.s023.reference.fas" "n100.r09.s023_output/n100.r09.s023.fq1.fastq" "n100.r09.s023_output/n100.r09.s023.fq2.fastq" | samtools view -bS - > "n100.r09.s023_output/n100.r09.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s023_output/n100.r09.s023.untrimmed.sorted.bam" "n100.r09.s023_output/n100.r09.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s023_output/n100.r09.s023.untrimmed.sorted.bam" -b "n100.r09.s023_output/n100.r09.s023.primers.bed" -p "n100.r09.s023_output/n100.r09.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" "n100.r09.s023_output/n100.r09.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s023_output/n100.r09.s023.reference.fas" "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" > "n100.r09.s023_output/n100.r09.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s023_output/n100.r09.s023.reference.fas" --call-indels "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" > "n100.r09.s023_output/n100.r09.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s023_output/n100.r09.s023.trimmed.sorted.bam" > "n100.r09.s023_output/n100.r09.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s023_output/n100.r09.s023.depth.txt" "n100.r09.s023_output/n100.r09.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s023_output/n100.r09.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s023_output/n100.r09.s023.reference.fas" | bcftools consensus -m "n100.r09.s023_output/n100.r09.s023.low_depth.tsv" tmp.vcf.gz > "n100.r09.s023_output/n100.r09.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:09dfb863356b5e3747260464c6eb52809865ab89b22455d8effc96a3ae168b84 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:31 scheduler task 54d9dab4 (flow 12be5f44): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s023.tar.gz resources {}
2021/07/08 17:35:31  ->  n100.r09.s023.Main.cp_out_file 12be5f44 exec extern s3://niema-test/n100/r09/n100.r09.s023.tar.gz 35.7MiB
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): retrieving diagnostic output (try 0): started
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): retrieving result (try 0): started
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloading (try 0): started
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloading list<val<.=a2660e43 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloading val<.=2e0b8144 35.4MiB>
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloading val<.=abfdbe6f 35.4MiB>
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): retrieving result (try 0): started
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): transferring output (try 0): started
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloading (try 0): started
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloading list<val<.=d4d7378c 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloading val<.=39dd305f 35.4MiB>
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloading val<.=6d8111f3 35.4MiB>
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloaded list<val<.=a2660e43 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloaded val<.=abfdbe6f 35.4MiB>
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloaded val<.=2e0b8144 35.4MiB>
2021/07/08 17:35:31 scheduler task 0f528024 (flow ed8c06bc): unloading (try 0): successful, next state: complete
2021/07/08 17:35:31  <-  n100.r09.s041.Main.out_file ed8c06bc ok     exec 5m3s 35.7MiB
2021/07/08 17:35:31 n100.r09.s041.Main.out_file ed8c06bc n100/r09/n100.r09.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db50e9c93cfa5929530a6f73610df2692a83f2aee2d2be2074532ae4714e4200
	sha256:ed8c06bcc1046e2d0d5f15959f5dcc679e833f17468dc6100467acdccde40e73
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0f528024724a28c1254076b55986a2264b63f06c204c6007dd50fb40e99781e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s041_output"
	    wget -O "n100.r09.s041_output/n100.r09.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s041_output/n100.r09.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s041_output/n100.r09.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s041_output/n100.r09.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s041_output/n100.r09.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s041_output/n100.r09.s041.reference.fas" "n100.r09.s041_output/n100.r09.s041.fq1.fastq" "n100.r09.s041_output/n100.r09.s041.fq2.fastq" | samtools view -bS - > "n100.r09.s041_output/n100.r09.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s041_output/n100.r09.s041.untrimmed.sorted.bam" "n100.r09.s041_output/n100.r09.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s041_output/n100.r09.s041.untrimmed.sorted.bam" -b "n100.r09.s041_output/n100.r09.s041.primers.bed" -p "n100.r09.s041_output/n100.r09.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" "n100.r09.s041_output/n100.r09.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s041_output/n100.r09.s041.reference.fas" "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" > "n100.r09.s041_output/n100.r09.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s041_output/n100.r09.s041.reference.fas" --call-indels "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" > "n100.r09.s041_output/n100.r09.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s041_output/n100.r09.s041.trimmed.sorted.bam" > "n100.r09.s041_output/n100.r09.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s041_output/n100.r09.s041.depth.txt" "n100.r09.s041_output/n100.r09.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s041_output/n100.r09.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s041_output/n100.r09.s041.reference.fas" | bcftools consensus -m "n100.r09.s041_output/n100.r09.s041.low_depth.tsv" tmp.vcf.gz > "n100.r09.s041_output/n100.r09.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a2660e4392430c61ee22f6ca582ad175f5e81e4e627fdf5c111554ab88f4430a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=129.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:35:31 scheduler task 8c58d4bc (flow 85c9e303): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s041.tar.gz resources {}
2021/07/08 17:35:31  ->  n100.r09.s041.Main.cp_out_file 85c9e303 exec extern s3://niema-test/n100/r09/n100.r09.s041.tar.gz 35.7MiB
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): promoting objects (try 0): started
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:31 scheduler task c0336850 (flow b1c048e5): transferring output (try 0): started
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloaded list<val<.=d4d7378c 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloaded val<.=39dd305f 35.4MiB>
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloaded val<.=6d8111f3 35.4MiB>
2021/07/08 17:35:31 scheduler task a9d54835 (flow 462eab90): unloading (try 0): successful, next state: complete
2021/07/08 17:35:31  <-  n100.r09.s053.Main.out_file 462eab90 ok     exec 5m3s 35.7MiB
2021/07/08 17:35:31 n100.r09.s053.Main.out_file 462eab90 n100/r09/n100.r09.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d6a6672c5edf3824a6bb8f930a656ce3cc585e7df336eae3c6cfe75f247c3118
	sha256:462eab9009a74c49e0b295515b1e88df52a56b743bca320b8c8e86a9e4ed5b21
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a9d548350ba5d904f6ff215e1c02abc4365705b1025699d24b6ab7d4b369573d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s053_output"
	    wget -O "n100.r09.s053_output/n100.r09.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s053_output/n100.r09.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s053_output/n100.r09.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s053_output/n100.r09.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s053_output/n100.r09.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s053_output/n100.r09.s053.reference.fas" "n100.r09.s053_output/n100.r09.s053.fq1.fastq" "n100.r09.s053_output/n100.r09.s053.fq2.fastq" | samtools view -bS - > "n100.r09.s053_output/n100.r09.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s053_output/n100.r09.s053.untrimmed.sorted.bam" "n100.r09.s053_output/n100.r09.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s053_output/n100.r09.s053.untrimmed.sorted.bam" -b "n100.r09.s053_output/n100.r09.s053.primers.bed" -p "n100.r09.s053_output/n100.r09.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" "n100.r09.s053_output/n100.r09.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s053_output/n100.r09.s053.reference.fas" "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" > "n100.r09.s053_output/n100.r09.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s053_output/n100.r09.s053.reference.fas" --call-indels "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" > "n100.r09.s053_output/n100.r09.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s053_output/n100.r09.s053.trimmed.sorted.bam" > "n100.r09.s053_output/n100.r09.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s053_output/n100.r09.s053.depth.txt" "n100.r09.s053_output/n100.r09.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s053_output/n100.r09.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s053_output/n100.r09.s053.reference.fas" | bcftools consensus -m "n100.r09.s053_output/n100.r09.s053.low_depth.tsv" tmp.vcf.gz > "n100.r09.s053_output/n100.r09.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d4d7378c99aec96c32b4d2799793ce4b8d0c9e17d8eec75729ff8273e5d00c23 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=697B max=3.1KiB
2021/07/08 17:35:31 scheduler task d013e18f (flow 4e6a447e): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s053.tar.gz resources {}
2021/07/08 17:35:31  ->  n100.r09.s053.Main.cp_out_file 4e6a447e exec extern s3://niema-test/n100/r09/n100.r09.s053.tar.gz 35.7MiB
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): retrieving diagnostic output (try 0): started
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloading (try 0): started
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloading list<val<.=6c1e44c0 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloading val<.=f79c6134 35.4MiB>
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloading val<.=d20c4a7f 35.4MiB>
2021/07/08 17:35:31 scheduler task 2c4aff2b (flow bf149cdb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1cfbb34f99a6835bd0a4e7a929db344f66aea57c8bea289c30f2bd52fc9477c5 -> s3://niema-test/n100/r09/n100.r09.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:31  <-  n100.r09.s021.Main.cp_out_file bf149cdb ok   extern 0s 35.7MiB
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): retrieving result (try 0): started
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloaded list<val<.=6c1e44c0 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloaded val<.=f79c6134 35.4MiB>
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloaded val<.=d20c4a7f 35.4MiB>
2021/07/08 17:35:31 scheduler task 3d1fe110 (flow 3e3233db): unloading (try 0): successful, next state: complete
2021/07/08 17:35:31 scheduler task 1f0f569e (flow 945735dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloading (try 0): started
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloading list<val<.=3bc259c3 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloading val<.=c9dd67a8 35.4MiB>
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloading val<.=ecbeeb35 35.4MiB>
2021/07/08 17:35:31  <-  n100.r09.s033.Main.out_file 3e3233db ok     exec 5m3s 35.7MiB
2021/07/08 17:35:31 n100.r09.s033.Main.out_file 3e3233db n100/r09/n100.r09.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8de54f288ee0f45ce0ae746220e24d5ad955833520a2dc83693ef9130834d090
	sha256:3e3233db4716c1aa51a6dda5bf95fcc85754dc1bb7855deca8324a6021efd8b5
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d1fe11077d69c1462530aa36d815f90d576d276301d4af5af74dc4432736c89
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s033_output"
	    wget -O "n100.r09.s033_output/n100.r09.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s033_output/n100.r09.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s033_output/n100.r09.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s033_output/n100.r09.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s033_output/n100.r09.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s033_output/n100.r09.s033.reference.fas" "n100.r09.s033_output/n100.r09.s033.fq1.fastq" "n100.r09.s033_output/n100.r09.s033.fq2.fastq" | samtools view -bS - > "n100.r09.s033_output/n100.r09.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s033_output/n100.r09.s033.untrimmed.sorted.bam" "n100.r09.s033_output/n100.r09.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s033_output/n100.r09.s033.untrimmed.sorted.bam" -b "n100.r09.s033_output/n100.r09.s033.primers.bed" -p "n100.r09.s033_output/n100.r09.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" "n100.r09.s033_output/n100.r09.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s033_output/n100.r09.s033.reference.fas" "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" > "n100.r09.s033_output/n100.r09.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s033_output/n100.r09.s033.reference.fas" --call-indels "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" > "n100.r09.s033_output/n100.r09.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s033_output/n100.r09.s033.trimmed.sorted.bam" > "n100.r09.s033_output/n100.r09.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s033_output/n100.r09.s033.depth.txt" "n100.r09.s033_output/n100.r09.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s033_output/n100.r09.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s033_output/n100.r09.s033.reference.fas" | bcftools consensus -m "n100.r09.s033_output/n100.r09.s033.low_depth.tsv" tmp.vcf.gz > "n100.r09.s033_output/n100.r09.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6c1e44c03eabd6172a3b7081d143f8342be22dec56741a09e503c8ddab0bdae4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=131.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:31 scheduler task c072a055 (flow 84111182): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s033.tar.gz resources {}
2021/07/08 17:35:31  ->  n100.r09.s033.Main.cp_out_file 84111182 exec extern s3://niema-test/n100/r09/n100.r09.s033.tar.gz 35.7MiB
2021/07/08 17:35:31 scheduler task 1f0f569e (flow 945735dc): promoting objects (try 0): started
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:31 scheduler task 97158a03 (flow 61535a0d): transferring output (try 0): started
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloaded list<val<.=3bc259c3 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloaded val<.=ecbeeb35 35.4MiB>
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloaded val<.=c9dd67a8 35.4MiB>
2021/07/08 17:35:31 scheduler task a118daf0 (flow 01eaeab9): unloading (try 0): successful, next state: complete
2021/07/08 17:35:31 scheduler task 1f0f569e (flow 945735dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:31  <-  n100.r09.s083.Main.out_file 01eaeab9 ok     exec 5m3s 35.7MiB
2021/07/08 17:35:31 n100.r09.s083.Main.out_file 01eaeab9 n100/r09/n100.r09.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac624d6c60c1f141a61075e2eb896b9ad85b838080dae1118e14644b332d35e3
	sha256:01eaeab909cd895ee45e2849c20cebdfa1eccb20e4026a0ce60bc688e9dbca63
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a118daf0efe225ca7ebdcba89bfc7855d5cd8264ed2fcee6b233236959e520e9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s083_output"
	    wget -O "n100.r09.s083_output/n100.r09.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s083_output/n100.r09.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s083_output/n100.r09.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s083_output/n100.r09.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s083_output/n100.r09.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s083_output/n100.r09.s083.reference.fas" "n100.r09.s083_output/n100.r09.s083.fq1.fastq" "n100.r09.s083_output/n100.r09.s083.fq2.fastq" | samtools view -bS - > "n100.r09.s083_output/n100.r09.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s083_output/n100.r09.s083.untrimmed.sorted.bam" "n100.r09.s083_output/n100.r09.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s083_output/n100.r09.s083.untrimmed.sorted.bam" -b "n100.r09.s083_output/n100.r09.s083.primers.bed" -p "n100.r09.s083_output/n100.r09.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" "n100.r09.s083_output/n100.r09.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s083_output/n100.r09.s083.reference.fas" "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" > "n100.r09.s083_output/n100.r09.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s083_output/n100.r09.s083.reference.fas" --call-indels "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" > "n100.r09.s083_output/n100.r09.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s083_output/n100.r09.s083.trimmed.sorted.bam" > "n100.r09.s083_output/n100.r09.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s083_output/n100.r09.s083.depth.txt" "n100.r09.s083_output/n100.r09.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s083_output/n100.r09.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s083_output/n100.r09.s083.reference.fas" | bcftools consensus -m "n100.r09.s083_output/n100.r09.s083.low_depth.tsv" tmp.vcf.gz > "n100.r09.s083_output/n100.r09.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3bc259c325dddbccb70f0251c47bd68cfd4a26f3de4d784f95770058350c2702 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=130.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=3.1KiB
2021/07/08 17:35:31 scheduler task 1a158a83 (flow 7a99dd9e): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s083.tar.gz resources {}
2021/07/08 17:35:31  ->  n100.r09.s083.Main.cp_out_file 7a99dd9e exec extern s3://niema-test/n100/r09/n100.r09.s083.tar.gz 35.7MiB
2021/07/08 17:35:31 scheduler task 1f0f569e (flow 945735dc): retrieving diagnostic output (try 0): started
2021/07/08 17:35:31 scheduler task 1f0f569e (flow 945735dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:31 scheduler task 1f0f569e (flow 945735dc): retrieving result (try 0): started
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): unloading (try 0): started
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): unloading list<val<.=abe890d5 35.7MiB> 35.7MiB>
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): unloading val<.=5a93c4fe 35.4MiB>
2021/07/08 17:35:31 scheduler task b49db477 (flow 591b29d1): unloading val<.=d574ec6f 35.4MiB>
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): transferring output (try 0): started
2021/07/08 17:35:32 scheduler task b49db477 (flow 591b29d1): unloaded val<.=5a93c4fe 35.4MiB>
2021/07/08 17:35:32 scheduler task b49db477 (flow 591b29d1): unloaded list<val<.=abe890d5 35.7MiB> 35.7MiB>
2021/07/08 17:35:32 scheduler task b49db477 (flow 591b29d1): unloaded val<.=d574ec6f 35.4MiB>
2021/07/08 17:35:32 scheduler task b49db477 (flow 591b29d1): unloading (try 0): successful, next state: complete
2021/07/08 17:35:32  <-  n100.r09.s066.Main.out_file 591b29d1 ok     exec 5m3s 35.7MiB
2021/07/08 17:35:32 n100.r09.s066.Main.out_file 591b29d1 n100/r09/n100.r09.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f43adef55690780ef4d760276e74fa4dde6adb3d469f913a3336b4814517e720
	sha256:591b29d1019a0a117cd3fa71d4084a75a70b1ed2ea14c0e80f89266dc811b5df
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b49db47754c6e68207d6df7905a4abdbd30b46bb4b780cde4d92747175c85221
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s066_output"
	    wget -O "n100.r09.s066_output/n100.r09.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s066_output/n100.r09.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s066_output/n100.r09.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s066_output/n100.r09.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s066_output/n100.r09.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s066_output/n100.r09.s066.reference.fas" "n100.r09.s066_output/n100.r09.s066.fq1.fastq" "n100.r09.s066_output/n100.r09.s066.fq2.fastq" | samtools view -bS - > "n100.r09.s066_output/n100.r09.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s066_output/n100.r09.s066.untrimmed.sorted.bam" "n100.r09.s066_output/n100.r09.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s066_output/n100.r09.s066.untrimmed.sorted.bam" -b "n100.r09.s066_output/n100.r09.s066.primers.bed" -p "n100.r09.s066_output/n100.r09.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" "n100.r09.s066_output/n100.r09.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s066_output/n100.r09.s066.reference.fas" "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" > "n100.r09.s066_output/n100.r09.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s066_output/n100.r09.s066.reference.fas" --call-indels "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" > "n100.r09.s066_output/n100.r09.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s066_output/n100.r09.s066.trimmed.sorted.bam" > "n100.r09.s066_output/n100.r09.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s066_output/n100.r09.s066.depth.txt" "n100.r09.s066_output/n100.r09.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s066_output/n100.r09.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s066_output/n100.r09.s066.reference.fas" | bcftools consensus -m "n100.r09.s066_output/n100.r09.s066.low_depth.tsv" tmp.vcf.gz > "n100.r09.s066_output/n100.r09.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:abe890d594e2e4e29c26ca968ad71944c972a66d6029d65acfb5007ea021efbc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=698B max=3.1KiB
2021/07/08 17:35:32 scheduler task ca401eee (flow 454a9a2e): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s066.tar.gz resources {}
2021/07/08 17:35:32  ->  n100.r09.s066.Main.cp_out_file 454a9a2e exec extern s3://niema-test/n100/r09/n100.r09.s066.tar.gz 35.7MiB
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloading (try 0): started
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloading list<val<.=6e9f9f85 35.8MiB> 35.8MiB>
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloading val<.=d26849a0 35.4MiB>
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloading val<.=6efbb0a7 35.4MiB>
2021/07/08 17:35:32 scheduler task 54d9dab4 (flow 12be5f44): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:09dfb863356b5e3747260464c6eb52809865ab89b22455d8effc96a3ae168b84 -> s3://niema-test/n100/r09/n100.r09.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s023.Main.cp_out_file 12be5f44 ok   extern 0s 35.7MiB
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloaded val<.=d26849a0 35.4MiB>
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloaded list<val<.=6e9f9f85 35.8MiB> 35.8MiB>
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloaded val<.=6efbb0a7 35.4MiB>
2021/07/08 17:35:32 scheduler task c0336850 (flow b1c048e5): unloading (try 0): successful, next state: complete
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:32  <-  n100.r09.s077.Main.out_file b1c048e5 ok     exec 5m9s 35.8MiB
2021/07/08 17:35:32 n100.r09.s077.Main.out_file b1c048e5 n100/r09/n100.r09.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:134d32ea9986ef05ecd1102a3cf04c93fd237158c777412c588e8b25a851fad4
	sha256:b1c048e5f3bde414654195911111a0bbb74956992cb0e54648428e48d7edbe44
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c0336850cf500c3b5508be44916e8b6cf25fb3b3fcb2bbef99faccb7948ea165
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s077_output"
	    wget -O "n100.r09.s077_output/n100.r09.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s077_output/n100.r09.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s077_output/n100.r09.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s077_output/n100.r09.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s077_output/n100.r09.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s077_output/n100.r09.s077.reference.fas" "n100.r09.s077_output/n100.r09.s077.fq1.fastq" "n100.r09.s077_output/n100.r09.s077.fq2.fastq" | samtools view -bS - > "n100.r09.s077_output/n100.r09.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s077_output/n100.r09.s077.untrimmed.sorted.bam" "n100.r09.s077_output/n100.r09.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s077_output/n100.r09.s077.untrimmed.sorted.bam" -b "n100.r09.s077_output/n100.r09.s077.primers.bed" -p "n100.r09.s077_output/n100.r09.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" "n100.r09.s077_output/n100.r09.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s077_output/n100.r09.s077.reference.fas" "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" > "n100.r09.s077_output/n100.r09.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s077_output/n100.r09.s077.reference.fas" --call-indels "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" > "n100.r09.s077_output/n100.r09.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s077_output/n100.r09.s077.trimmed.sorted.bam" > "n100.r09.s077_output/n100.r09.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s077_output/n100.r09.s077.depth.txt" "n100.r09.s077_output/n100.r09.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s077_output/n100.r09.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s077_output/n100.r09.s077.reference.fas" | bcftools consensus -m "n100.r09.s077_output/n100.r09.s077.low_depth.tsv" tmp.vcf.gz > "n100.r09.s077_output/n100.r09.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6e9f9f852e112d06a38f2d686ba19f72f745f3aa885b71ebe4a4a5f0a96b3c3f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.3MiB max=127.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:32 scheduler task d9dbf4e8 (flow 02b0f257): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s077.tar.gz resources {}
2021/07/08 17:35:32  ->  n100.r09.s077.Main.cp_out_file 02b0f257 exec extern s3://niema-test/n100/r09/n100.r09.s077.tar.gz 35.8MiB
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): promoting objects (try 0): started
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): retrieving diagnostic output (try 0): started
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloading (try 0): started
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloading list<val<.=79022213 35.7MiB> 35.7MiB>
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloading val<.=d0af8b1d 35.4MiB>
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloading val<.=49bdae7d 35.4MiB>
2021/07/08 17:35:32 scheduler task 8c58d4bc (flow 85c9e303): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a2660e4392430c61ee22f6ca582ad175f5e81e4e627fdf5c111554ab88f4430a -> s3://niema-test/n100/r09/n100.r09.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s041.Main.cp_out_file 85c9e303 ok   extern 0s 35.7MiB
2021/07/08 17:35:32 scheduler task d013e18f (flow 4e6a447e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d4d7378c99aec96c32b4d2799793ce4b8d0c9e17d8eec75729ff8273e5d00c23 -> s3://niema-test/n100/r09/n100.r09.s053.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s053.Main.cp_out_file 4e6a447e ok   extern 0s 35.7MiB
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): retrieving result (try 0): started
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloaded list<val<.=79022213 35.7MiB> 35.7MiB>
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloaded val<.=49bdae7d 35.4MiB>
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloaded val<.=d0af8b1d 35.4MiB>
2021/07/08 17:35:32 scheduler task 97158a03 (flow 61535a0d): unloading (try 0): successful, next state: complete
2021/07/08 17:35:32  <-  n100.r09.s091.Main.out_file 61535a0d ok     exec 5m3s 35.7MiB
2021/07/08 17:35:32 n100.r09.s091.Main.out_file 61535a0d n100/r09/n100.r09.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23bfd221cfb5bb9a80180818f2950183d02b07df1d9415ecd2ca4ee753e56dfb
	sha256:61535a0dba51d12f8ac5c0ca9527fcdff85a0b133382ea66dc9ce786c8a1cacb
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97158a033567c7489c416a95b45ee8f41d40b3a56cf92d73d1ae50c5ef12c721
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s091_output"
	    wget -O "n100.r09.s091_output/n100.r09.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s091_output/n100.r09.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s091_output/n100.r09.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s091_output/n100.r09.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s091_output/n100.r09.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s091_output/n100.r09.s091.reference.fas" "n100.r09.s091_output/n100.r09.s091.fq1.fastq" "n100.r09.s091_output/n100.r09.s091.fq2.fastq" | samtools view -bS - > "n100.r09.s091_output/n100.r09.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s091_output/n100.r09.s091.untrimmed.sorted.bam" "n100.r09.s091_output/n100.r09.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s091_output/n100.r09.s091.untrimmed.sorted.bam" -b "n100.r09.s091_output/n100.r09.s091.primers.bed" -p "n100.r09.s091_output/n100.r09.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" "n100.r09.s091_output/n100.r09.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s091_output/n100.r09.s091.reference.fas" "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" > "n100.r09.s091_output/n100.r09.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s091_output/n100.r09.s091.reference.fas" --call-indels "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" > "n100.r09.s091_output/n100.r09.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s091_output/n100.r09.s091.trimmed.sorted.bam" > "n100.r09.s091_output/n100.r09.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s091_output/n100.r09.s091.depth.txt" "n100.r09.s091_output/n100.r09.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s091_output/n100.r09.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s091_output/n100.r09.s091.reference.fas" | bcftools consensus -m "n100.r09.s091_output/n100.r09.s091.low_depth.tsv" tmp.vcf.gz > "n100.r09.s091_output/n100.r09.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:79022213051afe54e6228783bf045e21f217c6af5418b5fb1ad081270d2d7001 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=131.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 17:35:32 scheduler task a1fa72ff (flow 98df4e75): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s091.tar.gz resources {}
2021/07/08 17:35:32  ->  n100.r09.s091.Main.cp_out_file 98df4e75 exec extern s3://niema-test/n100/r09/n100.r09.s091.tar.gz 35.7MiB
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): transferring output (try 0): started
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): promoting objects (try 0): started
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): promoting objects (try 0): started
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloading (try 0): started
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloading list<val<.=7bd91ad9 35.8MiB> 35.8MiB>
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloading val<.=63f6168d 35.4MiB>
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloading val<.=9fa6150a 35.4MiB>
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): retrieving diagnostic output (try 0): started
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): retrieving diagnostic output (try 0): started
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloaded list<val<.=7bd91ad9 35.8MiB> 35.8MiB>
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloaded val<.=63f6168d 35.4MiB>
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloaded val<.=9fa6150a 35.4MiB>
2021/07/08 17:35:32 scheduler task 1f0f569e (flow 945735dc): unloading (try 0): successful, next state: complete
2021/07/08 17:35:32  <-  n100.r09.s028.Main.out_file 945735dc ok     exec 5m9s 35.8MiB
2021/07/08 17:35:32 n100.r09.s028.Main.out_file 945735dc n100/r09/n100.r09.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27cc6f51059704bab991e52e9819bd5606baff9bf0b1e89fc379b9f427169d9a
	sha256:945735dcccd289411ee49aeaa497f7e908baa6085265894962a2d867c0352129
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1f0f569e56db73023fac1c7698150a169527eaa0b5348a669f40914c3fd6b1f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s028_output"
	    wget -O "n100.r09.s028_output/n100.r09.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s028_output/n100.r09.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s028_output/n100.r09.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s028_output/n100.r09.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s028_output/n100.r09.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s028_output/n100.r09.s028.reference.fas" "n100.r09.s028_output/n100.r09.s028.fq1.fastq" "n100.r09.s028_output/n100.r09.s028.fq2.fastq" | samtools view -bS - > "n100.r09.s028_output/n100.r09.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s028_output/n100.r09.s028.untrimmed.sorted.bam" "n100.r09.s028_output/n100.r09.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s028_output/n100.r09.s028.untrimmed.sorted.bam" -b "n100.r09.s028_output/n100.r09.s028.primers.bed" -p "n100.r09.s028_output/n100.r09.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" "n100.r09.s028_output/n100.r09.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s028_output/n100.r09.s028.reference.fas" "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" > "n100.r09.s028_output/n100.r09.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s028_output/n100.r09.s028.reference.fas" --call-indels "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" > "n100.r09.s028_output/n100.r09.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s028_output/n100.r09.s028.trimmed.sorted.bam" > "n100.r09.s028_output/n100.r09.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s028_output/n100.r09.s028.depth.txt" "n100.r09.s028_output/n100.r09.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s028_output/n100.r09.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s028_output/n100.r09.s028.reference.fas" | bcftools consensus -m "n100.r09.s028_output/n100.r09.s028.low_depth.tsv" tmp.vcf.gz > "n100.r09.s028_output/n100.r09.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7bd91ad9b56281f224274fbf40023cf3855301c22061afaa212fa6088d998f27 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.6MiB max=129.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:35:32 scheduler task 2cbd6f00 (flow 396db806): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s028.tar.gz resources {}
2021/07/08 17:35:32  ->  n100.r09.s028.Main.cp_out_file 396db806 exec extern s3://niema-test/n100/r09/n100.r09.s028.tar.gz 35.8MiB
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): retrieving result (try 0): started
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): retrieving result (try 0): started
2021/07/08 17:35:32 scheduler task c072a055 (flow 84111182): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6c1e44c03eabd6172a3b7081d143f8342be22dec56741a09e503c8ddab0bdae4 -> s3://niema-test/n100/r09/n100.r09.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s033.Main.cp_out_file 84111182 ok   extern 0s 35.7MiB
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:32 scheduler task 301872db (flow f4514b15): transferring output (try 0): started
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:32 scheduler task eff50ab7 (flow 9176995d): transferring output (try 0): started
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): promoting objects (try 0): started
2021/07/08 17:35:32 scheduler task 1a158a83 (flow 7a99dd9e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3bc259c325dddbccb70f0251c47bd68cfd4a26f3de4d784f95770058350c2702 -> s3://niema-test/n100/r09/n100.r09.s083.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s083.Main.cp_out_file 7a99dd9e ok   extern 0s 35.7MiB
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): retrieving diagnostic output (try 0): started
2021/07/08 17:35:32 scheduler task d9dbf4e8 (flow 02b0f257): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6e9f9f852e112d06a38f2d686ba19f72f745f3aa885b71ebe4a4a5f0a96b3c3f -> s3://niema-test/n100/r09/n100.r09.s077.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s077.Main.cp_out_file 02b0f257 ok   extern 0s 35.8MiB
2021/07/08 17:35:32 scheduler task ca401eee (flow 454a9a2e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:abe890d594e2e4e29c26ca968ad71944c972a66d6029d65acfb5007ea021efbc -> s3://niema-test/n100/r09/n100.r09.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:32  <-  n100.r09.s066.Main.cp_out_file 454a9a2e ok   extern 0s 35.7MiB
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloading (try 0): started
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloading list<val<.=0148a802 35.7MiB> 35.7MiB>
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloading val<.=f69f579c 35.4MiB>
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloading val<.=ce8c7023 35.4MiB>
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): retrieving result (try 0): started
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloaded val<.=ce8c7023 35.4MiB>
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloaded list<val<.=0148a802 35.7MiB> 35.7MiB>
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloaded val<.=f69f579c 35.4MiB>
2021/07/08 17:35:32 scheduler task 6c9cf8f0 (flow 87f0b2e1): unloading (try 0): successful, next state: complete
2021/07/08 17:35:32  <-  n100.r09.s089.Main.out_file 87f0b2e1 ok     exec 5m4s 35.7MiB
2021/07/08 17:35:32 n100.r09.s089.Main.out_file 87f0b2e1 n100/r09/n100.r09.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ab23625a7cfb95e23f797bf778208b08a60a96ea2307326ee087ac15aefc8bbd
	sha256:87f0b2e12db5271cb3aaa1add046664491683652b348fad35906716e4f4e7cbf
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c9cf8f0f5e89ecc3167ab709d71baf2c6831879c76a2e96c6b8eccf9a157c3b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s089_output"
	    wget -O "n100.r09.s089_output/n100.r09.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s089_output/n100.r09.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s089_output/n100.r09.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s089_output/n100.r09.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s089_output/n100.r09.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s089_output/n100.r09.s089.reference.fas" "n100.r09.s089_output/n100.r09.s089.fq1.fastq" "n100.r09.s089_output/n100.r09.s089.fq2.fastq" | samtools view -bS - > "n100.r09.s089_output/n100.r09.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s089_output/n100.r09.s089.untrimmed.sorted.bam" "n100.r09.s089_output/n100.r09.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s089_output/n100.r09.s089.untrimmed.sorted.bam" -b "n100.r09.s089_output/n100.r09.s089.primers.bed" -p "n100.r09.s089_output/n100.r09.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" "n100.r09.s089_output/n100.r09.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s089_output/n100.r09.s089.reference.fas" "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" > "n100.r09.s089_output/n100.r09.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s089_output/n100.r09.s089.reference.fas" --call-indels "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" > "n100.r09.s089_output/n100.r09.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s089_output/n100.r09.s089.trimmed.sorted.bam" > "n100.r09.s089_output/n100.r09.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s089_output/n100.r09.s089.depth.txt" "n100.r09.s089_output/n100.r09.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s089_output/n100.r09.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s089_output/n100.r09.s089.reference.fas" | bcftools consensus -m "n100.r09.s089_output/n100.r09.s089.low_depth.tsv" tmp.vcf.gz > "n100.r09.s089_output/n100.r09.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0148a802a70c1262d9b2710c625096e0522d962bbcfc59d198763fe86a201c37 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=130.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=698B max=3.1KiB
2021/07/08 17:35:32 scheduler task 8b6f4b8c (flow 09497d09): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s089.tar.gz resources {}
2021/07/08 17:35:32  ->  n100.r09.s089.Main.cp_out_file 09497d09 exec extern s3://niema-test/n100/r09/n100.r09.s089.tar.gz 35.7MiB
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:32 scheduler task a4988c18 (flow e8b23611): transferring output (try 0): started
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): promoting objects (try 0): started
2021/07/08 17:35:33 scheduler task a1fa72ff (flow 98df4e75): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:79022213051afe54e6228783bf045e21f217c6af5418b5fb1ad081270d2d7001 -> s3://niema-test/n100/r09/n100.r09.s091.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:33  <-  n100.r09.s091.Main.cp_out_file 98df4e75 ok   extern 0s 35.7MiB
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): retrieving diagnostic output (try 0): started
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloading (try 0): started
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloading list<val<.=a6b901ff 35.7MiB> 35.7MiB>
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloading val<.=4737da51 35.4MiB>
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloading val<.=1928ce1b 35.4MiB>
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloading (try 0): started
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloading list<val<.=4b8079e8 35.8MiB> 35.8MiB>
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloading val<.=f3c8073e 35.4MiB>
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloading val<.=16c3cfb9 35.4MiB>
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): retrieving result (try 0): started
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloaded list<val<.=a6b901ff 35.7MiB> 35.7MiB>
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloaded val<.=1928ce1b 35.4MiB>
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloaded val<.=4737da51 35.4MiB>
2021/07/08 17:35:33 scheduler task 2cbd6f00 (flow 396db806): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7bd91ad9b56281f224274fbf40023cf3855301c22061afaa212fa6088d998f27 -> s3://niema-test/n100/r09/n100.r09.s028.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:33  <-  n100.r09.s028.Main.cp_out_file 396db806 ok   extern 0s 35.8MiB
2021/07/08 17:35:33 scheduler task 301872db (flow f4514b15): unloading (try 0): successful, next state: complete
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): promoting objects (try 0): started
2021/07/08 17:35:33  <-  n100.r09.s010.Main.out_file f4514b15 ok     exec 5m4s 35.7MiB
2021/07/08 17:35:33 n100.r09.s010.Main.out_file f4514b15 n100/r09/n100.r09.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:461a3d7f9365f29b4618c4ac95703fb5fbfa47fec8b9f4d9eee159173b482dc0
	sha256:f4514b150b9f839c9a3420687979793840785e34d7842d9050e0af198c63fd4e
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/301872dbaeecdff5bef47177c3bf3fd2c6cea5e549e768410f3e45b16bfea6a1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s010_output"
	    wget -O "n100.r09.s010_output/n100.r09.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s010_output/n100.r09.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s010_output/n100.r09.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s010_output/n100.r09.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s010_output/n100.r09.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s010_output/n100.r09.s010.reference.fas" "n100.r09.s010_output/n100.r09.s010.fq1.fastq" "n100.r09.s010_output/n100.r09.s010.fq2.fastq" | samtools view -bS - > "n100.r09.s010_output/n100.r09.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s010_output/n100.r09.s010.untrimmed.sorted.bam" "n100.r09.s010_output/n100.r09.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s010_output/n100.r09.s010.untrimmed.sorted.bam" -b "n100.r09.s010_output/n100.r09.s010.primers.bed" -p "n100.r09.s010_output/n100.r09.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" "n100.r09.s010_output/n100.r09.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s010_output/n100.r09.s010.reference.fas" "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" > "n100.r09.s010_output/n100.r09.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s010_output/n100.r09.s010.reference.fas" --call-indels "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" > "n100.r09.s010_output/n100.r09.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s010_output/n100.r09.s010.trimmed.sorted.bam" > "n100.r09.s010_output/n100.r09.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s010_output/n100.r09.s010.depth.txt" "n100.r09.s010_output/n100.r09.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s010_output/n100.r09.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s010_output/n100.r09.s010.reference.fas" | bcftools consensus -m "n100.r09.s010_output/n100.r09.s010.low_depth.tsv" tmp.vcf.gz > "n100.r09.s010_output/n100.r09.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a6b901ff36f6a137c9bf647ef38eca898466bced0fc6589a9449d122392ca415 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=129.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:35:33 scheduler task f90d21c9 (flow bb2e01ed): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s010.tar.gz resources {}
2021/07/08 17:35:33  ->  n100.r09.s010.Main.cp_out_file bb2e01ed exec extern s3://niema-test/n100/r09/n100.r09.s010.tar.gz 35.7MiB
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloaded val<.=f3c8073e 35.4MiB>
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloaded val<.=16c3cfb9 35.4MiB>
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloaded list<val<.=4b8079e8 35.8MiB> 35.8MiB>
2021/07/08 17:35:33 scheduler task eff50ab7 (flow 9176995d): unloading (try 0): successful, next state: complete
2021/07/08 17:35:33  <-  n100.r09.s071.Main.out_file 9176995d ok     exec 5m4s 35.8MiB
2021/07/08 17:35:33 n100.r09.s071.Main.out_file 9176995d n100/r09/n100.r09.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6acf52f190bea48574795c71368a2a643c7bff4a0b73f364483eb4ea165d48dd
	sha256:9176995d7d9592ee4d2e7851a89b06df1b21d0f5cf1a674705068f8bb37a07bf
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eff50ab72dbb6841e7d7492c902f67ba8d56919a5b9a25c0c8fda06307909f23
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s071_output"
	    wget -O "n100.r09.s071_output/n100.r09.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s071_output/n100.r09.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s071_output/n100.r09.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s071_output/n100.r09.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s071_output/n100.r09.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s071_output/n100.r09.s071.reference.fas" "n100.r09.s071_output/n100.r09.s071.fq1.fastq" "n100.r09.s071_output/n100.r09.s071.fq2.fastq" | samtools view -bS - > "n100.r09.s071_output/n100.r09.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s071_output/n100.r09.s071.untrimmed.sorted.bam" "n100.r09.s071_output/n100.r09.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s071_output/n100.r09.s071.untrimmed.sorted.bam" -b "n100.r09.s071_output/n100.r09.s071.primers.bed" -p "n100.r09.s071_output/n100.r09.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" "n100.r09.s071_output/n100.r09.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s071_output/n100.r09.s071.reference.fas" "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" > "n100.r09.s071_output/n100.r09.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s071_output/n100.r09.s071.reference.fas" --call-indels "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" > "n100.r09.s071_output/n100.r09.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s071_output/n100.r09.s071.trimmed.sorted.bam" > "n100.r09.s071_output/n100.r09.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s071_output/n100.r09.s071.depth.txt" "n100.r09.s071_output/n100.r09.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s071_output/n100.r09.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s071_output/n100.r09.s071.reference.fas" | bcftools consensus -m "n100.r09.s071_output/n100.r09.s071.low_depth.tsv" tmp.vcf.gz > "n100.r09.s071_output/n100.r09.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4b8079e807f960c7092ca8800f2f14ca3c02de51f4ce7f7d7f417e3c2a36c28e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=128.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 17:35:33 scheduler task 14c0b628 (flow 8177398f): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s071.tar.gz resources {}
2021/07/08 17:35:33  ->  n100.r09.s071.Main.cp_out_file 8177398f exec extern s3://niema-test/n100/r09/n100.r09.s071.tar.gz 35.8MiB
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): transferring output (try 0): started
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): retrieving diagnostic output (try 0): started
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): retrieving result (try 0): started
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloading (try 0): started
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloading list<val<.=4d295f76 35.7MiB> 35.7MiB>
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloading val<.=65c8c704 35.4MiB>
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloading val<.=ef1ebd7a 35.4MiB>
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:33 scheduler task a6886853 (flow 3ff94c60): transferring output (try 0): started
2021/07/08 17:35:33 scheduler task 8b6f4b8c (flow 09497d09): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0148a802a70c1262d9b2710c625096e0522d962bbcfc59d198763fe86a201c37 -> s3://niema-test/n100/r09/n100.r09.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:33  <-  n100.r09.s089.Main.cp_out_file 09497d09 ok   extern 0s 35.7MiB
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): promoting objects (try 0): started
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloaded val<.=65c8c704 35.4MiB>
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloaded list<val<.=4d295f76 35.7MiB> 35.7MiB>
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloaded val<.=ef1ebd7a 35.4MiB>
2021/07/08 17:35:33 scheduler task a4988c18 (flow e8b23611): unloading (try 0): successful, next state: complete
2021/07/08 17:35:33  <-  n100.r09.s044.Main.out_file e8b23611 ok     exec 4m58s 35.7MiB
2021/07/08 17:35:33 n100.r09.s044.Main.out_file e8b23611 n100/r09/n100.r09.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c6555d548bca1a8cbfc85bdb951e695af37a8e4caba8edd8cd5a76487e01d19b
	sha256:e8b2361196a70d53f13743225de089edfe3403abe913e09bd26975922cb2ec55
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a4988c18e50f052898fe8ce4bcd7987cfe371149b69d4b16bd9443989df0c41f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s044_output"
	    wget -O "n100.r09.s044_output/n100.r09.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s044_output/n100.r09.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s044_output/n100.r09.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s044_output/n100.r09.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s044_output/n100.r09.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s044_output/n100.r09.s044.reference.fas" "n100.r09.s044_output/n100.r09.s044.fq1.fastq" "n100.r09.s044_output/n100.r09.s044.fq2.fastq" | samtools view -bS - > "n100.r09.s044_output/n100.r09.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s044_output/n100.r09.s044.untrimmed.sorted.bam" "n100.r09.s044_output/n100.r09.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s044_output/n100.r09.s044.untrimmed.sorted.bam" -b "n100.r09.s044_output/n100.r09.s044.primers.bed" -p "n100.r09.s044_output/n100.r09.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" "n100.r09.s044_output/n100.r09.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s044_output/n100.r09.s044.reference.fas" "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" > "n100.r09.s044_output/n100.r09.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s044_output/n100.r09.s044.reference.fas" --call-indels "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" > "n100.r09.s044_output/n100.r09.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s044_output/n100.r09.s044.trimmed.sorted.bam" > "n100.r09.s044_output/n100.r09.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s044_output/n100.r09.s044.depth.txt" "n100.r09.s044_output/n100.r09.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s044_output/n100.r09.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s044_output/n100.r09.s044.reference.fas" | bcftools consensus -m "n100.r09.s044_output/n100.r09.s044.low_depth.tsv" tmp.vcf.gz > "n100.r09.s044_output/n100.r09.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4d295f761c36a572d449d3f3059ac2f5046669fce11329c85d5f3c46cd94014a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=127.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:35:33 scheduler task f45d0853 (flow ca2d0ca8): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s044.tar.gz resources {}
2021/07/08 17:35:33  ->  n100.r09.s044.Main.cp_out_file ca2d0ca8 exec extern s3://niema-test/n100/r09/n100.r09.s044.tar.gz 35.7MiB
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): retrieving diagnostic output (try 0): started
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): retrieving result (try 0): started
2021/07/08 17:35:33 scheduler task 177a80d4 (flow c571bec1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:33 scheduler task 177a80d4 (flow c571bec1): promoting objects (try 0): started
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:33 scheduler task a81322e0 (flow 03205e45): transferring output (try 0): started
2021/07/08 17:35:33 scheduler task c61cb881 (flow 380dcf18): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:33 scheduler task 177a80d4 (flow c571bec1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloading (try 0): started
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloading list<val<.=4da92f4d 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloading val<.=5dc6bcfd 35.4MiB>
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloading val<.=11d86c28 35.4MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): retrieving diagnostic output (try 0): started
2021/07/08 17:35:34 scheduler task 14c0b628 (flow 8177398f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4b8079e807f960c7092ca8800f2f14ca3c02de51f4ce7f7d7f417e3c2a36c28e -> s3://niema-test/n100/r09/n100.r09.s071.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:34  <-  n100.r09.s071.Main.cp_out_file 8177398f ok   extern 0s 35.8MiB
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloaded val<.=11d86c28 35.4MiB>
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloaded list<val<.=4da92f4d 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloaded val<.=5dc6bcfd 35.4MiB>
2021/07/08 17:35:34 scheduler task c61cb881 (flow 380dcf18): unloading (try 0): successful, next state: complete
2021/07/08 17:35:34  <-  n100.r09.s001.Main.out_file 380dcf18 ok     exec 4m58s 35.7MiB
2021/07/08 17:35:34 n100.r09.s001.Main.out_file 380dcf18 n100/r09/n100.r09.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2d54d56d79d738be22c89f051186007cb341ee3fec87f00b47470fba4b70765a
	sha256:380dcf18336f84b146739a1e3fc21614b1ea3bb8fe8e9930952920e369f40d4c
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c61cb88160e1e6af83b619245118da14c5745e89921de5af67eee546a6fa7912
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s001_output"
	    wget -O "n100.r09.s001_output/n100.r09.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s001_output/n100.r09.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s001_output/n100.r09.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s001_output/n100.r09.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s001_output/n100.r09.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s001_output/n100.r09.s001.reference.fas" "n100.r09.s001_output/n100.r09.s001.fq1.fastq" "n100.r09.s001_output/n100.r09.s001.fq2.fastq" | samtools view -bS - > "n100.r09.s001_output/n100.r09.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s001_output/n100.r09.s001.untrimmed.sorted.bam" "n100.r09.s001_output/n100.r09.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s001_output/n100.r09.s001.untrimmed.sorted.bam" -b "n100.r09.s001_output/n100.r09.s001.primers.bed" -p "n100.r09.s001_output/n100.r09.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" "n100.r09.s001_output/n100.r09.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s001_output/n100.r09.s001.reference.fas" "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" > "n100.r09.s001_output/n100.r09.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s001_output/n100.r09.s001.reference.fas" --call-indels "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" > "n100.r09.s001_output/n100.r09.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s001_output/n100.r09.s001.trimmed.sorted.bam" > "n100.r09.s001_output/n100.r09.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s001_output/n100.r09.s001.depth.txt" "n100.r09.s001_output/n100.r09.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s001_output/n100.r09.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s001_output/n100.r09.s001.reference.fas" | bcftools consensus -m "n100.r09.s001_output/n100.r09.s001.low_depth.tsv" tmp.vcf.gz > "n100.r09.s001_output/n100.r09.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4da92f4d344b4e90cda649439855b85365d3a28257ded47a467d56d239e17ecf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.8MiB max=129.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:35:34 scheduler task f68c14c8 (flow 17079ffd): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s001.tar.gz resources {}
2021/07/08 17:35:34  ->  n100.r09.s001.Main.cp_out_file 17079ffd exec extern s3://niema-test/n100/r09/n100.r09.s001.tar.gz 35.7MiB
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): retrieving result (try 0): started
2021/07/08 17:35:34 scheduler task f90d21c9 (flow bb2e01ed): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a6b901ff36f6a137c9bf647ef38eca898466bced0fc6589a9449d122392ca415 -> s3://niema-test/n100/r09/n100.r09.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:34  <-  n100.r09.s010.Main.cp_out_file bb2e01ed ok   extern 0s 35.7MiB
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): transferring output (try 0): started
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloading (try 0): started
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloading list<val<.=0bbb59c4 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloading val<.=79bd477b 35.4MiB>
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloading val<.=d1eef5ac 35.4MiB>
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloaded val<.=79bd477b 35.4MiB>
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloaded list<val<.=0bbb59c4 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloaded val<.=d1eef5ac 35.4MiB>
2021/07/08 17:35:34 scheduler task a6886853 (flow 3ff94c60): unloading (try 0): successful, next state: complete
2021/07/08 17:35:34  <-  n100.r09.s024.Main.out_file 3ff94c60 ok     exec 5m6s 35.7MiB
2021/07/08 17:35:34 n100.r09.s024.Main.out_file 3ff94c60 n100/r09/n100.r09.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5ce6f22833f96dc8602e9c64208ad6913d76b80f36e67f753f746ee4c1475e6
	sha256:3ff94c60a1b741c64476de796a4f6a9c4553f445913d2debbf9a520f12b60dd8
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a6886853dcab46c3ba613b265527c65684426e43ae2af67f68fbd49faab3cfed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s024_output"
	    wget -O "n100.r09.s024_output/n100.r09.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s024_output/n100.r09.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s024_output/n100.r09.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s024_output/n100.r09.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s024_output/n100.r09.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s024_output/n100.r09.s024.reference.fas" "n100.r09.s024_output/n100.r09.s024.fq1.fastq" "n100.r09.s024_output/n100.r09.s024.fq2.fastq" | samtools view -bS - > "n100.r09.s024_output/n100.r09.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s024_output/n100.r09.s024.untrimmed.sorted.bam" "n100.r09.s024_output/n100.r09.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s024_output/n100.r09.s024.untrimmed.sorted.bam" -b "n100.r09.s024_output/n100.r09.s024.primers.bed" -p "n100.r09.s024_output/n100.r09.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" "n100.r09.s024_output/n100.r09.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s024_output/n100.r09.s024.reference.fas" "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" > "n100.r09.s024_output/n100.r09.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s024_output/n100.r09.s024.reference.fas" --call-indels "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" > "n100.r09.s024_output/n100.r09.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s024_output/n100.r09.s024.trimmed.sorted.bam" > "n100.r09.s024_output/n100.r09.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s024_output/n100.r09.s024.depth.txt" "n100.r09.s024_output/n100.r09.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s024_output/n100.r09.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s024_output/n100.r09.s024.reference.fas" | bcftools consensus -m "n100.r09.s024_output/n100.r09.s024.low_depth.tsv" tmp.vcf.gz > "n100.r09.s024_output/n100.r09.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0bbb59c4e507aba8fdca70de50cf3f06043bb99be4bfc76924f53fa5933a3f54 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=3.1KiB
2021/07/08 17:35:34 scheduler task ac64a0cd (flow d9fadc11): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s024.tar.gz resources {}
2021/07/08 17:35:34  ->  n100.r09.s024.Main.cp_out_file d9fadc11 exec extern s3://niema-test/n100/r09/n100.r09.s024.tar.gz 35.7MiB
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloading (try 0): started
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloading list<val<.=1838411f 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloading val<.=a9a6d018 35.4MiB>
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloading val<.=2c6a2b0e 35.4MiB>
2021/07/08 17:35:34 scheduler task f45d0853 (flow ca2d0ca8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4d295f761c36a572d449d3f3059ac2f5046669fce11329c85d5f3c46cd94014a -> s3://niema-test/n100/r09/n100.r09.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:34  <-  n100.r09.s044.Main.cp_out_file ca2d0ca8 ok   extern 0s 35.7MiB
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloaded val<.=a9a6d018 35.4MiB>
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloaded list<val<.=1838411f 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloaded val<.=2c6a2b0e 35.4MiB>
2021/07/08 17:35:34 scheduler task a81322e0 (flow 03205e45): unloading (try 0): successful, next state: complete
2021/07/08 17:35:34  <-  n100.r09.s080.Main.out_file 03205e45 ok     exec 5m5s 35.7MiB
2021/07/08 17:35:34 n100.r09.s080.Main.out_file 03205e45 n100/r09/n100.r09.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d518bdcb7d75ee7cee6a0b85c8acd0d14ff32a960aabed00d77b01b4eee5f63
	sha256:03205e45ad2338db72ea9b7d7293af8f33410d3a19e54f2b15a271cd2a435697
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a81322e0b5d699ebedcef83984de51e5d8e9b49ba917aae7b3e50e6735d8f054
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s080_output"
	    wget -O "n100.r09.s080_output/n100.r09.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s080_output/n100.r09.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s080_output/n100.r09.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s080_output/n100.r09.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s080_output/n100.r09.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s080_output/n100.r09.s080.reference.fas" "n100.r09.s080_output/n100.r09.s080.fq1.fastq" "n100.r09.s080_output/n100.r09.s080.fq2.fastq" | samtools view -bS - > "n100.r09.s080_output/n100.r09.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s080_output/n100.r09.s080.untrimmed.sorted.bam" "n100.r09.s080_output/n100.r09.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s080_output/n100.r09.s080.untrimmed.sorted.bam" -b "n100.r09.s080_output/n100.r09.s080.primers.bed" -p "n100.r09.s080_output/n100.r09.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" "n100.r09.s080_output/n100.r09.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s080_output/n100.r09.s080.reference.fas" "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" > "n100.r09.s080_output/n100.r09.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s080_output/n100.r09.s080.reference.fas" --call-indels "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" > "n100.r09.s080_output/n100.r09.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s080_output/n100.r09.s080.trimmed.sorted.bam" > "n100.r09.s080_output/n100.r09.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s080_output/n100.r09.s080.depth.txt" "n100.r09.s080_output/n100.r09.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s080_output/n100.r09.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s080_output/n100.r09.s080.reference.fas" | bcftools consensus -m "n100.r09.s080_output/n100.r09.s080.low_depth.tsv" tmp.vcf.gz > "n100.r09.s080_output/n100.r09.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1838411f2ade2778bd4f26f089e21b0dd819dc79e1f45b4414601bc719c3dbe3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 17:35:34 scheduler task 25318556 (flow df511b99): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s080.tar.gz resources {}
2021/07/08 17:35:34  ->  n100.r09.s080.Main.cp_out_file df511b99 exec extern s3://niema-test/n100/r09/n100.r09.s080.tar.gz 35.7MiB
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloading (try 0): started
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloading list<val<.=8d598436 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloading val<.=4e534738 35.4MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloading val<.=b4957c23 35.4MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloaded val<.=b4957c23 35.4MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloaded val<.=4e534738 35.4MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloaded list<val<.=8d598436 35.7MiB> 35.7MiB>
2021/07/08 17:35:34 scheduler task 177a80d4 (flow c571bec1): unloading (try 0): successful, next state: complete
2021/07/08 17:35:34  <-  n100.r09.s061.Main.out_file c571bec1 ok     exec 5m6s 35.7MiB
2021/07/08 17:35:34 n100.r09.s061.Main.out_file c571bec1 n100/r09/n100.r09.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5a95f336106da45c0eb506c6bd99163683cc33c86e5f6bdba74847e783dfe3d
	sha256:c571bec12e53f9f784fa674fbe6da2efe3e3a9fbe754aa0f7c8bd366bf09dae6
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/177a80d47ff102dc3dbdeaf55eb9b87a73f1dc06dbb34ea0d301547a58ff4241
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s061_output"
	    wget -O "n100.r09.s061_output/n100.r09.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s061_output/n100.r09.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s061_output/n100.r09.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s061_output/n100.r09.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s061_output/n100.r09.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s061_output/n100.r09.s061.reference.fas" "n100.r09.s061_output/n100.r09.s061.fq1.fastq" "n100.r09.s061_output/n100.r09.s061.fq2.fastq" | samtools view -bS - > "n100.r09.s061_output/n100.r09.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s061_output/n100.r09.s061.untrimmed.sorted.bam" "n100.r09.s061_output/n100.r09.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s061_output/n100.r09.s061.untrimmed.sorted.bam" -b "n100.r09.s061_output/n100.r09.s061.primers.bed" -p "n100.r09.s061_output/n100.r09.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" "n100.r09.s061_output/n100.r09.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s061_output/n100.r09.s061.reference.fas" "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" > "n100.r09.s061_output/n100.r09.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s061_output/n100.r09.s061.reference.fas" --call-indels "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" > "n100.r09.s061_output/n100.r09.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s061_output/n100.r09.s061.trimmed.sorted.bam" > "n100.r09.s061_output/n100.r09.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s061_output/n100.r09.s061.depth.txt" "n100.r09.s061_output/n100.r09.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s061_output/n100.r09.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s061_output/n100.r09.s061.reference.fas" | bcftools consensus -m "n100.r09.s061_output/n100.r09.s061.low_depth.tsv" tmp.vcf.gz > "n100.r09.s061_output/n100.r09.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8d598436804e3dc300d0a2763b79b97401ba81e50e15ad80be47aa9d6eebfb5b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:35:34 scheduler task 308d1e8b (flow 30b978b3): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s061.tar.gz resources {}
2021/07/08 17:35:34  ->  n100.r09.s061.Main.cp_out_file 30b978b3 exec extern s3://niema-test/n100/r09/n100.r09.s061.tar.gz 35.7MiB
2021/07/08 17:35:34 scheduler task f68c14c8 (flow 17079ffd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4da92f4d344b4e90cda649439855b85365d3a28257ded47a467d56d239e17ecf -> s3://niema-test/n100/r09/n100.r09.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:34  <-  n100.r09.s001.Main.cp_out_file 17079ffd ok   extern 0s 35.7MiB
2021/07/08 17:35:34 scheduler task ac64a0cd (flow d9fadc11): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0bbb59c4e507aba8fdca70de50cf3f06043bb99be4bfc76924f53fa5933a3f54 -> s3://niema-test/n100/r09/n100.r09.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:34  <-  n100.r09.s024.Main.cp_out_file d9fadc11 ok   extern 0s 35.7MiB
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): promoting objects (try 0): started
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:35 scheduler task 25318556 (flow df511b99): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1838411f2ade2778bd4f26f089e21b0dd819dc79e1f45b4414601bc719c3dbe3 -> s3://niema-test/n100/r09/n100.r09.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:35  <-  n100.r09.s080.Main.cp_out_file df511b99 ok   extern 0s 35.7MiB
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): retrieving diagnostic output (try 0): started
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): retrieving result (try 0): started
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:35 scheduler task 308d1e8b (flow 30b978b3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8d598436804e3dc300d0a2763b79b97401ba81e50e15ad80be47aa9d6eebfb5b -> s3://niema-test/n100/r09/n100.r09.s061.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:35  <-  n100.r09.s061.Main.cp_out_file 30b978b3 ok   extern 0s 35.7MiB
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): promoting objects (try 0): started
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:35 scheduler task a96b1313 (flow 2b827096): transferring output (try 0): started
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): promoting objects (try 0): started
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): retrieving diagnostic output (try 0): started
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): retrieving diagnostic output (try 0): started
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): retrieving result (try 0): started
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): retrieving result (try 0): started
2021/07/08 17:35:35 scheduler task 6dd29d24 (flow 3e29d10c): transferring output (try 0): started
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:35 scheduler task c8bedcb7 (flow 89fd3d0f): transferring output (try 0): started
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloading (try 0): started
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloading list<val<.=9fd9e214 35.7MiB> 35.7MiB>
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloading val<.=a65bdb1c 35.4MiB>
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloading val<.=c782ab28 35.4MiB>
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloaded list<val<.=9fd9e214 35.7MiB> 35.7MiB>
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloaded val<.=a65bdb1c 35.4MiB>
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloaded val<.=c782ab28 35.4MiB>
2021/07/08 17:35:36 scheduler task a96b1313 (flow 2b827096): unloading (try 0): successful, next state: complete
2021/07/08 17:35:36  <-  n100.r09.s097.Main.out_file 2b827096 ok     exec 5m0s 35.7MiB
2021/07/08 17:35:36 n100.r09.s097.Main.out_file 2b827096 n100/r09/n100.r09.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:eb8fffeb9be1589634d2efe105f4c71688232ba44965ce977a0a2360caac7bed
	sha256:2b82709623abd51e05f2f45dc34d5d14167358ee4a24b7e6dd2c680956d172e0
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a96b1313e764a8ce0e38da78df2e656d446d6a2d83d528d4fe6558b49bb2b2ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s097_output"
	    wget -O "n100.r09.s097_output/n100.r09.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s097_output/n100.r09.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s097_output/n100.r09.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s097_output/n100.r09.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s097_output/n100.r09.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s097_output/n100.r09.s097.reference.fas" "n100.r09.s097_output/n100.r09.s097.fq1.fastq" "n100.r09.s097_output/n100.r09.s097.fq2.fastq" | samtools view -bS - > "n100.r09.s097_output/n100.r09.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s097_output/n100.r09.s097.untrimmed.sorted.bam" "n100.r09.s097_output/n100.r09.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s097_output/n100.r09.s097.untrimmed.sorted.bam" -b "n100.r09.s097_output/n100.r09.s097.primers.bed" -p "n100.r09.s097_output/n100.r09.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" "n100.r09.s097_output/n100.r09.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s097_output/n100.r09.s097.reference.fas" "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" > "n100.r09.s097_output/n100.r09.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s097_output/n100.r09.s097.reference.fas" --call-indels "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" > "n100.r09.s097_output/n100.r09.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s097_output/n100.r09.s097.trimmed.sorted.bam" > "n100.r09.s097_output/n100.r09.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s097_output/n100.r09.s097.depth.txt" "n100.r09.s097_output/n100.r09.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s097_output/n100.r09.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s097_output/n100.r09.s097.reference.fas" | bcftools consensus -m "n100.r09.s097_output/n100.r09.s097.low_depth.tsv" tmp.vcf.gz > "n100.r09.s097_output/n100.r09.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9fd9e2145e703b67a3ad6a0a1d76fba5b15afb735cec0cc794646f93d8613f7f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=126.0MiB
	    disk mean=10.2MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 17:35:36 scheduler task b57488e4 (flow 72e04581): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s097.tar.gz resources {}
2021/07/08 17:35:36  ->  n100.r09.s097.Main.cp_out_file 72e04581 exec extern s3://niema-test/n100/r09/n100.r09.s097.tar.gz 35.7MiB
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloading (try 0): started
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloading list<val<.=e67c4bc8 35.7MiB> 35.7MiB>
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloading val<.=d482e5f6 35.4MiB>
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloading val<.=24f6aaf5 35.4MiB>
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloading (try 0): started
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloading list<val<.=36b523b8 35.8MiB> 35.8MiB>
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloading val<.=e90655fc 35.4MiB>
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloading val<.=fd1da566 35.4MiB>
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloaded val<.=d482e5f6 35.4MiB>
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloaded val<.=24f6aaf5 35.4MiB>
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloaded list<val<.=e67c4bc8 35.7MiB> 35.7MiB>
2021/07/08 17:35:36 scheduler task 6dd29d24 (flow 3e29d10c): unloading (try 0): successful, next state: complete
2021/07/08 17:35:36  <-  n100.r09.s051.Main.out_file 3e29d10c ok     exec 5m0s 35.7MiB
2021/07/08 17:35:36 n100.r09.s051.Main.out_file 3e29d10c n100/r09/n100.r09.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bffe61954efee1a96307351171e637a5b3216c33b5ebe8dd34d554e3e550652a
	sha256:3e29d10c5b3869833899166aabfd3fc3d47558f848727c4657af00326210bf0f
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6dd29d24fe1a8d10235dcd7f87692e1f120009691b645166b1871aff55e525bc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s051_output"
	    wget -O "n100.r09.s051_output/n100.r09.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s051_output/n100.r09.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s051_output/n100.r09.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s051_output/n100.r09.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s051_output/n100.r09.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s051_output/n100.r09.s051.reference.fas" "n100.r09.s051_output/n100.r09.s051.fq1.fastq" "n100.r09.s051_output/n100.r09.s051.fq2.fastq" | samtools view -bS - > "n100.r09.s051_output/n100.r09.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s051_output/n100.r09.s051.untrimmed.sorted.bam" "n100.r09.s051_output/n100.r09.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s051_output/n100.r09.s051.untrimmed.sorted.bam" -b "n100.r09.s051_output/n100.r09.s051.primers.bed" -p "n100.r09.s051_output/n100.r09.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" "n100.r09.s051_output/n100.r09.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s051_output/n100.r09.s051.reference.fas" "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" > "n100.r09.s051_output/n100.r09.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s051_output/n100.r09.s051.reference.fas" --call-indels "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" > "n100.r09.s051_output/n100.r09.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s051_output/n100.r09.s051.trimmed.sorted.bam" > "n100.r09.s051_output/n100.r09.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s051_output/n100.r09.s051.depth.txt" "n100.r09.s051_output/n100.r09.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s051_output/n100.r09.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s051_output/n100.r09.s051.reference.fas" | bcftools consensus -m "n100.r09.s051_output/n100.r09.s051.low_depth.tsv" tmp.vcf.gz > "n100.r09.s051_output/n100.r09.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e67c4bc8b26f9779b6fb0beaf3e827b72e24b934c282cf3603cb948f8ade26fc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=128.4MiB
	    disk mean=7.9MiB max=35.7MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 17:35:36 scheduler task 785129c1 (flow b3b41b72): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s051.tar.gz resources {}
2021/07/08 17:35:36  ->  n100.r09.s051.Main.cp_out_file b3b41b72 exec extern s3://niema-test/n100/r09/n100.r09.s051.tar.gz 35.7MiB
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloaded list<val<.=36b523b8 35.8MiB> 35.8MiB>
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloaded val<.=e90655fc 35.4MiB>
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloaded val<.=fd1da566 35.4MiB>
2021/07/08 17:35:36 scheduler task c8bedcb7 (flow 89fd3d0f): unloading (try 0): successful, next state: complete
2021/07/08 17:35:36  <-  n100.r09.s084.Main.out_file 89fd3d0f ok     exec 5m0s 35.8MiB
2021/07/08 17:35:36 n100.r09.s084.Main.out_file 89fd3d0f n100/r09/n100.r09.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:53b5faf5bf4eacd11dc1198c15dcb5525477215ccdf937c3cf94dfa49ae6e8e4
	sha256:89fd3d0f36f6fb2dc08e9e1b3c5b5098a6273ff68787d6d094d7e94a552e269d
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c8bedcb7c86d1615a9e18b5d352d10ce68e71380d622830e402ceb10faa12e22
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s084_output"
	    wget -O "n100.r09.s084_output/n100.r09.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s084_output/n100.r09.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s084_output/n100.r09.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s084_output/n100.r09.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s084_output/n100.r09.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s084_output/n100.r09.s084.reference.fas" "n100.r09.s084_output/n100.r09.s084.fq1.fastq" "n100.r09.s084_output/n100.r09.s084.fq2.fastq" | samtools view -bS - > "n100.r09.s084_output/n100.r09.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s084_output/n100.r09.s084.untrimmed.sorted.bam" "n100.r09.s084_output/n100.r09.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s084_output/n100.r09.s084.untrimmed.sorted.bam" -b "n100.r09.s084_output/n100.r09.s084.primers.bed" -p "n100.r09.s084_output/n100.r09.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" "n100.r09.s084_output/n100.r09.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s084_output/n100.r09.s084.reference.fas" "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" > "n100.r09.s084_output/n100.r09.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s084_output/n100.r09.s084.reference.fas" --call-indels "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" > "n100.r09.s084_output/n100.r09.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s084_output/n100.r09.s084.trimmed.sorted.bam" > "n100.r09.s084_output/n100.r09.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s084_output/n100.r09.s084.depth.txt" "n100.r09.s084_output/n100.r09.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s084_output/n100.r09.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s084_output/n100.r09.s084.reference.fas" | bcftools consensus -m "n100.r09.s084_output/n100.r09.s084.low_depth.tsv" tmp.vcf.gz > "n100.r09.s084_output/n100.r09.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:36b523b8377ce9b95ed437ea63efa2aed8dba7516232b91bf39c99988ec6fe8d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=127.6MiB
	    disk mean=8.3MiB max=35.8MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 17:35:36 scheduler task ab6a2755 (flow be2c960d): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s084.tar.gz resources {}
2021/07/08 17:35:36  ->  n100.r09.s084.Main.cp_out_file be2c960d exec extern s3://niema-test/n100/r09/n100.r09.s084.tar.gz 35.8MiB
2021/07/08 17:35:36 scheduler task 785129c1 (flow b3b41b72): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e67c4bc8b26f9779b6fb0beaf3e827b72e24b934c282cf3603cb948f8ade26fc -> s3://niema-test/n100/r09/n100.r09.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:36  <-  n100.r09.s051.Main.cp_out_file b3b41b72 ok   extern 0s 35.7MiB
2021/07/08 17:35:37 scheduler task b57488e4 (flow 72e04581): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9fd9e2145e703b67a3ad6a0a1d76fba5b15afb735cec0cc794646f93d8613f7f -> s3://niema-test/n100/r09/n100.r09.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:37  <-  n100.r09.s097.Main.cp_out_file 72e04581 ok   extern 0s 35.7MiB
2021/07/08 17:35:37 scheduler task ab6a2755 (flow be2c960d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:36b523b8377ce9b95ed437ea63efa2aed8dba7516232b91bf39c99988ec6fe8d -> s3://niema-test/n100/r09/n100.r09.s084.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:35:37  <-  n100.r09.s084.Main.cp_out_file be2c960d ok   extern 0s 35.8MiB
2021/07/08 17:35:37 scheduler task 67bedddd (flow cb1ce740): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:35:37 scheduler task 67bedddd (flow cb1ce740): promoting objects (try 0): started
2021/07/08 17:35:37 scheduler task 67bedddd (flow cb1ce740): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:35:37 scheduler task 67bedddd (flow cb1ce740): retrieving diagnostic output (try 0): started
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): retrieving result (try 0): started
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): transferring output (try 0): started
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): transferring output (try 0): successful, next state: unloading
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloading (try 0): started
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloading list<val<.=dd8c1c4a 35.7MiB> 35.7MiB>
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloading val<.=594def7b 35.4MiB>
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloading val<.=87b86b61 35.4MiB>
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloaded list<val<.=dd8c1c4a 35.7MiB> 35.7MiB>
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloaded val<.=594def7b 35.4MiB>
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloaded val<.=87b86b61 35.4MiB>
2021/07/08 17:35:38 scheduler task 67bedddd (flow cb1ce740): unloading (try 0): successful, next state: complete
2021/07/08 17:35:38  <-  n100.r09.s009.Main.out_file cb1ce740 ok     exec 5m3s 35.7MiB
2021/07/08 17:35:38 n100.r09.s009.Main.out_file cb1ce740 n100/r09/n100.r09.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:811b90ce0dcc1f8bacb107b0f5e8abe5e82b2b288510656613a09ae05d215b2c
	sha256:cb1ce7401b4399934f5abba4c61433c3da2ac0f8805ae67069cbd4d92f0847b0
	ec2-13-59-123-235.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/67beddddc91afe4fac5eb35b9f63a9f025d6a18749b35da18457ad7f1adc5d24
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r09.s009_output"
	    wget -O "n100.r09.s009_output/n100.r09.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r09.s009_output/n100.r09.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r09.s009_output/n100.r09.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r09.s009_output/n100.r09.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r09.s009_output/n100.r09.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r09.s009_output/n100.r09.s009.reference.fas" "n100.r09.s009_output/n100.r09.s009.fq1.fastq" "n100.r09.s009_output/n100.r09.s009.fq2.fastq" | samtools view -bS - > "n100.r09.s009_output/n100.r09.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s009_output/n100.r09.s009.untrimmed.sorted.bam" "n100.r09.s009_output/n100.r09.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r09.s009_output/n100.r09.s009.untrimmed.sorted.bam" -b "n100.r09.s009_output/n100.r09.s009.primers.bed" -p "n100.r09.s009_output/n100.r09.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" "n100.r09.s009_output/n100.r09.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r09.s009_output/n100.r09.s009.reference.fas" "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" > "n100.r09.s009_output/n100.r09.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r09.s009_output/n100.r09.s009.reference.fas" --call-indels "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" > "n100.r09.s009_output/n100.r09.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r09.s009_output/n100.r09.s009.trimmed.sorted.bam" > "n100.r09.s009_output/n100.r09.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r09.s009_output/n100.r09.s009.depth.txt" "n100.r09.s009_output/n100.r09.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r09.s009_output/n100.r09.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r09.s009_output/n100.r09.s009.reference.fas" | bcftools consensus -m "n100.r09.s009_output/n100.r09.s009.low_depth.tsv" tmp.vcf.gz > "n100.r09.s009_output/n100.r09.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r09.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:dd8c1c4a8890b7fda026a5ba4c4a214879f5c6400530c487ba1e44e57fe03140 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=125.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:35:38 scheduler task c3d9b028 (flow 9fb9af30): submitted with execconfig extern url s3://niema-test/n100/r09/n100.r09.s009.tar.gz resources {}
2021/07/08 17:35:38  ->  n100.r09.s009.Main.cp_out_file 9fb9af30 exec extern s3://niema-test/n100/r09/n100.r09.s009.tar.gz 35.7MiB
2021/07/08 17:35:39 scheduler task c3d9b028 (flow 9fb9af30): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:dd8c1c4a8890b7fda026a5ba4c4a214879f5c6400530c487ba1e44e57fe03140 -> s3://niema-test/n100/r09/n100.r09.s009.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:35:39  <-  n100.r09.s009.Main.cp_out_file 9fb9af30 ok   extern 0s 35.7MiB
2021/07/08 17:35:39 total n=400 time=6m51s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r09.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s001.Main.fq1         1   0      0B                                                      
	n100.r09.s001.Main.fq2         1   0      0B                                                      
	n100.r09.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s002.Main.fq1         1   0      0B                                                      
	n100.r09.s002.Main.fq2         1   0      0B                                                      
	n100.r09.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s003.Main.fq1         1   0      0B                                                      
	n100.r09.s003.Main.fq2         1   0      0B                                                      
	n100.r09.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s004.Main.fq1         1   0      0B                                                      
	n100.r09.s004.Main.fq2         1   0      0B                                                      
	n100.r09.s004.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s005.Main.fq1         1   0      0B                                                      
	n100.r09.s005.Main.fq2         1   0      0B                                                      
	n100.r09.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s006.Main.fq1         1   0      0B                                                      
	n100.r09.s006.Main.fq2         1   0      0B                                                      
	n100.r09.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s007.Main.fq1         1   0      0B                                                      
	n100.r09.s007.Main.fq2         1   0      0B                                                      
	n100.r09.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s008.Main.fq1         1   0      0B                                                      
	n100.r09.s008.Main.fq2         1   0      0B                                                      
	n100.r09.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s009.Main.fq1         1   0      0B                                                      
	n100.r09.s009.Main.fq2         1   0      0B                                                      
	n100.r09.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s010.Main.fq1         1   0      0B                                                      
	n100.r09.s010.Main.fq2         1   0      0B                                                      
	n100.r09.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s011.Main.fq1         1   0      0B                                                      
	n100.r09.s011.Main.fq2         1   0      0B                                                      
	n100.r09.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s012.Main.fq1         1   0      0B                                                      
	n100.r09.s012.Main.fq2         1   0      0B                                                      
	n100.r09.s012.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s013.Main.fq1         1   0      0B                                                      
	n100.r09.s013.Main.fq2         1   0      0B                                                      
	n100.r09.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s014.Main.fq1         1   0      0B                                                      
	n100.r09.s014.Main.fq2         1   0      0B                                                      
	n100.r09.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s015.Main.fq1         1   0      0B                                                      
	n100.r09.s015.Main.fq2         1   0      0B                                                      
	n100.r09.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s016.Main.fq1         1   0      0B                                                      
	n100.r09.s016.Main.fq2         1   0      0B                                                      
	n100.r09.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s017.Main.fq1         1   0      0B                                                      
	n100.r09.s017.Main.fq2         1   0      0B                                                      
	n100.r09.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s018.Main.fq1         1   0      0B                                                      
	n100.r09.s018.Main.fq2         1   0      0B                                                      
	n100.r09.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s019.Main.fq1         1   0      0B                                                      
	n100.r09.s019.Main.fq2         1   0      0B                                                      
	n100.r09.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s020.Main.fq1         1   0      0B                                                      
	n100.r09.s020.Main.fq2         1   0      0B                                                      
	n100.r09.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s021.Main.fq1         1   0      0B                                                      
	n100.r09.s021.Main.fq2         1   0      0B                                                      
	n100.r09.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s022.Main.fq1         1   0      0B                                                      
	n100.r09.s022.Main.fq2         1   0      0B                                                      
	n100.r09.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s023.Main.fq1         1   0      0B                                                      
	n100.r09.s023.Main.fq2         1   0      0B                                                      
	n100.r09.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s024.Main.fq1         1   0      0B                                                      
	n100.r09.s024.Main.fq2         1   0      0B                                                      
	n100.r09.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s025.Main.fq1         1   0      0B                                                      
	n100.r09.s025.Main.fq2         1   0      0B                                                      
	n100.r09.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s026.Main.fq1         1   0      0B                                                      
	n100.r09.s026.Main.fq2         1   0      0B                                                      
	n100.r09.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s027.Main.fq1         1   0      0B                                                      
	n100.r09.s027.Main.fq2         1   0      0B                                                      
	n100.r09.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s028.Main.fq1         1   0      0B                                                      
	n100.r09.s028.Main.fq2         1   0      0B                                                      
	n100.r09.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s029.Main.fq1         1   0      0B                                                      
	n100.r09.s029.Main.fq2         1   0      0B                                                      
	n100.r09.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s030.Main.fq1         1   0      0B                                                      
	n100.r09.s030.Main.fq2         1   0      0B                                                      
	n100.r09.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s031.Main.fq1         1   0      0B                                                      
	n100.r09.s031.Main.fq2         1   0      0B                                                      
	n100.r09.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s032.Main.fq1         1   0      0B                                                      
	n100.r09.s032.Main.fq2         1   0      0B                                                      
	n100.r09.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s033.Main.fq1         1   0      0B                                                      
	n100.r09.s033.Main.fq2         1   0      0B                                                      
	n100.r09.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s034.Main.fq1         1   0      0B                                                      
	n100.r09.s034.Main.fq2         1   0      0B                                                      
	n100.r09.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s035.Main.fq1         1   0      0B                                                      
	n100.r09.s035.Main.fq2         1   0      0B                                                      
	n100.r09.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s036.Main.fq1         1   0      0B                                                      
	n100.r09.s036.Main.fq2         1   0      0B                                                      
	n100.r09.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s037.Main.fq1         1   0      0B                                                      
	n100.r09.s037.Main.fq2         1   0      0B                                                      
	n100.r09.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s038.Main.fq1         1   0      0B                                                      
	n100.r09.s038.Main.fq2         1   0      0B                                                      
	n100.r09.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s039.Main.fq1         1   0      0B                                                      
	n100.r09.s039.Main.fq2         1   0      0B                                                      
	n100.r09.s039.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s040.Main.fq1         1   0      0B                                                      
	n100.r09.s040.Main.fq2         1   0      0B                                                      
	n100.r09.s040.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s041.Main.fq1         1   0      0B                                                      
	n100.r09.s041.Main.fq2         1   0      0B                                                      
	n100.r09.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s042.Main.fq1         1   0      0B                                                      
	n100.r09.s042.Main.fq2         1   0      0B                                                      
	n100.r09.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s043.Main.fq1         1   0      0B                                                      
	n100.r09.s043.Main.fq2         1   0      0B                                                      
	n100.r09.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s044.Main.fq1         1   0      0B                                                      
	n100.r09.s044.Main.fq2         1   0      0B                                                      
	n100.r09.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s045.Main.fq1         1   0      0B                                                      
	n100.r09.s045.Main.fq2         1   0      0B                                                      
	n100.r09.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s046.Main.fq1         1   0      0B                                                      
	n100.r09.s046.Main.fq2         1   0      0B                                                      
	n100.r09.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s047.Main.fq1         1   0      0B                                                      
	n100.r09.s047.Main.fq2         1   0      0B                                                      
	n100.r09.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s048.Main.fq1         1   0      0B                                                      
	n100.r09.s048.Main.fq2         1   0      0B                                                      
	n100.r09.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s049.Main.fq1         1   0      0B                                                      
	n100.r09.s049.Main.fq2         1   0      0B                                                      
	n100.r09.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s050.Main.fq1         1   0      0B                                                      
	n100.r09.s050.Main.fq2         1   0      0B                                                      
	n100.r09.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s051.Main.fq1         1   0      0B                                                      
	n100.r09.s051.Main.fq2         1   0      0B                                                      
	n100.r09.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s052.Main.fq1         1   0      0B                                                      
	n100.r09.s052.Main.fq2         1   0      0B                                                      
	n100.r09.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s053.Main.fq1         1   0      0B                                                      
	n100.r09.s053.Main.fq2         1   0      0B                                                      
	n100.r09.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s054.Main.fq1         1   0      0B                                                      
	n100.r09.s054.Main.fq2         1   0      0B                                                      
	n100.r09.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s055.Main.fq1         1   0      0B                                                      
	n100.r09.s055.Main.fq2         1   0      0B                                                      
	n100.r09.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s056.Main.fq1         1   0      0B                                                      
	n100.r09.s056.Main.fq2         1   0      0B                                                      
	n100.r09.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s057.Main.fq1         1   0      0B                                                      
	n100.r09.s057.Main.fq2         1   0      0B                                                      
	n100.r09.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s058.Main.fq1         1   0      0B                                                      
	n100.r09.s058.Main.fq2         1   0      0B                                                      
	n100.r09.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s059.Main.fq1         1   0      0B                                                      
	n100.r09.s059.Main.fq2         1   0      0B                                                      
	n100.r09.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s060.Main.fq1         1   0      0B                                                      
	n100.r09.s060.Main.fq2         1   0      0B                                                      
	n100.r09.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s061.Main.fq1         1   0      0B                                                      
	n100.r09.s061.Main.fq2         1   0      0B                                                      
	n100.r09.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s062.Main.fq1         1   0      0B                                                      
	n100.r09.s062.Main.fq2         1   0      0B                                                      
	n100.r09.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s063.Main.fq1         1   0      0B                                                      
	n100.r09.s063.Main.fq2         1   0      0B                                                      
	n100.r09.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s064.Main.fq1         1   0      0B                                                      
	n100.r09.s064.Main.fq2         1   0      0B                                                      
	n100.r09.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s065.Main.fq1         1   0      0B                                                      
	n100.r09.s065.Main.fq2         1   0      0B                                                      
	n100.r09.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s066.Main.fq1         1   0      0B                                                      
	n100.r09.s066.Main.fq2         1   0      0B                                                      
	n100.r09.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s067.Main.fq1         1   0      0B                                                      
	n100.r09.s067.Main.fq2         1   0      0B                                                      
	n100.r09.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s068.Main.fq1         1   0      0B                                                      
	n100.r09.s068.Main.fq2         1   0      0B                                                      
	n100.r09.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s069.Main.fq1         1   0      0B                                                      
	n100.r09.s069.Main.fq2         1   0      0B                                                      
	n100.r09.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s070.Main.fq1         1   0      0B                                                      
	n100.r09.s070.Main.fq2         1   0      0B                                                      
	n100.r09.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s071.Main.fq1         1   0      0B                                                      
	n100.r09.s071.Main.fq2         1   0      0B                                                      
	n100.r09.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s072.Main.fq1         1   0      0B                                                      
	n100.r09.s072.Main.fq2         1   0      0B                                                      
	n100.r09.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s073.Main.fq1         1   0      0B                                                      
	n100.r09.s073.Main.fq2         1   0      0B                                                      
	n100.r09.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s074.Main.fq1         1   0      0B                                                      
	n100.r09.s074.Main.fq2         1   0      0B                                                      
	n100.r09.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s075.Main.fq1         1   0      0B                                                      
	n100.r09.s075.Main.fq2         1   0      0B                                                      
	n100.r09.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s076.Main.fq1         1   0      0B                                                      
	n100.r09.s076.Main.fq2         1   0      0B                                                      
	n100.r09.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s077.Main.fq1         1   0      0B                                                      
	n100.r09.s077.Main.fq2         1   0      0B                                                      
	n100.r09.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s078.Main.fq1         1   0      0B                                                      
	n100.r09.s078.Main.fq2         1   0      0B                                                      
	n100.r09.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s079.Main.fq1         1   0      0B                                                      
	n100.r09.s079.Main.fq2         1   0      0B                                                      
	n100.r09.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s080.Main.fq1         1   0      0B                                                      
	n100.r09.s080.Main.fq2         1   0      0B                                                      
	n100.r09.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s081.Main.fq1         1   0      0B                                                      
	n100.r09.s081.Main.fq2         1   0      0B                                                      
	n100.r09.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s082.Main.fq1         1   0      0B                                                      
	n100.r09.s082.Main.fq2         1   0      0B                                                      
	n100.r09.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s083.Main.fq1         1   0      0B                                                      
	n100.r09.s083.Main.fq2         1   0      0B                                                      
	n100.r09.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s084.Main.fq1         1   0      0B                                                      
	n100.r09.s084.Main.fq2         1   0      0B                                                      
	n100.r09.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s085.Main.fq1         1   0      0B                                                      
	n100.r09.s085.Main.fq2         1   0      0B                                                      
	n100.r09.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s086.Main.fq1         1   0      0B                                                      
	n100.r09.s086.Main.fq2         1   0      0B                                                      
	n100.r09.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s087.Main.fq1         1   0      0B                                                      
	n100.r09.s087.Main.fq2         1   0      0B                                                      
	n100.r09.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s088.Main.fq1         1   0      0B                                                      
	n100.r09.s088.Main.fq2         1   0      0B                                                      
	n100.r09.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s089.Main.fq1         1   0      0B                                                      
	n100.r09.s089.Main.fq2         1   0      0B                                                      
	n100.r09.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s090.Main.fq1         1   0      0B                                                      
	n100.r09.s090.Main.fq2         1   0      0B                                                      
	n100.r09.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s091.Main.fq1         1   0      0B                                                      
	n100.r09.s091.Main.fq2         1   0      0B                                                      
	n100.r09.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s092.Main.fq1         1   0      0B                                                      
	n100.r09.s092.Main.fq2         1   0      0B                                                      
	n100.r09.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s093.Main.fq1         1   0      0B                                                      
	n100.r09.s093.Main.fq2         1   0      0B                                                      
	n100.r09.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s094.Main.fq1         1   0      0B                                                      
	n100.r09.s094.Main.fq2         1   0      0B                                                      
	n100.r09.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s095.Main.fq1         1   0      0B                                                      
	n100.r09.s095.Main.fq2         1   0      0B                                                      
	n100.r09.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s096.Main.fq1         1   0      0B                                                      
	n100.r09.s096.Main.fq2         1   0      0B                                                      
	n100.r09.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s097.Main.fq1         1   0      0B                                                      
	n100.r09.s097.Main.fq2         1   0      0B                                                      
	n100.r09.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s098.Main.fq1         1   0      0B                                                      
	n100.r09.s098.Main.fq2         1   0      0B                                                      
	n100.r09.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s099.Main.fq1         1   0      0B                                                      
	n100.r09.s099.Main.fq2         1   0      0B                                                      
	n100.r09.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r09.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r09.s100.Main.fq1         1   0      0B                                                      
	n100.r09.s100.Main.fq2         1   0      0B                                                      
	n100.r09.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r09.s001.Main.out_file, n100.r09.s002.Main.out_file, n100.r09.s003.Main.out_file, n100.r09.s004.Main.out_file, n100.r09.s005.Main.out_file, n100.r09.s006.Main.out_file, n100.r09.s007.Main.out_file, n100.r09.s008.Main.out_file, n100.r09.s009.Main.out_file, n100.r09.s010.Main.out_file, n100.r09.s011.Main.out_file, n100.r09.s012.Main.out_file, n100.r09.s013.Main.out_file, n100.r09.s014.Main.out_file, n100.r09.s015.Main.out_file, n100.r09.s016.Main.out_file, n100.r09.s017.Main.out_file, n100.r09.s018.Main.out_file, n100.r09.s019.Main.out_file, n100.r09.s020.Main.out_file, n100.r09.s021.Main.out_file, n100.r09.s022.Main.out_file, n100.r09.s023.Main.out_file, n100.r09.s024.Main.out_file, n100.r09.s025.Main.out_file, n100.r09.s026.Main.out_file, n100.r09.s027.Main.out_file, n100.r09.s028.Main.out_file, n100.r09.s029.Main.out_file, n100.r09.s030.Main.out_file, n100.r09.s031.Main.out_file, n100.r09.s032.Main.out_file, n100.r09.s033.Main.out_file, n100.r09.s034.Main.out_file, n100.r09.s035.Main.out_file, n100.r09.s036.Main.out_file, n100.r09.s037.Main.out_file, n100.r09.s038.Main.out_file, n100.r09.s039.Main.out_file, n100.r09.s040.Main.out_file, n100.r09.s041.Main.out_file, n100.r09.s042.Main.out_file, n100.r09.s043.Main.out_file, n100.r09.s044.Main.out_file, n100.r09.s045.Main.out_file, n100.r09.s046.Main.out_file, n100.r09.s047.Main.out_file, n100.r09.s048.Main.out_file, n100.r09.s049.Main.out_file, n100.r09.s050.Main.out_file, n100.r09.s051.Main.out_file, n100.r09.s052.Main.out_file, n100.r09.s053.Main.out_file, n100.r09.s054.Main.out_file, n100.r09.s055.Main.out_file, n100.r09.s056.Main.out_file, n100.r09.s057.Main.out_file, n100.r09.s058.Main.out_file, n100.r09.s059.Main.out_file, n100.r09.s060.Main.out_file, n100.r09.s061.Main.out_file, n100.r09.s062.Main.out_file, n100.r09.s063.Main.out_file, n100.r09.s064.Main.out_file, n100.r09.s065.Main.out_file, n100.r09.s066.Main.out_file, n100.r09.s067.Main.out_file, n100.r09.s068.Main.out_file, n100.r09.s069.Main.out_file, n100.r09.s070.Main.out_file, n100.r09.s071.Main.out_file, n100.r09.s072.Main.out_file, n100.r09.s073.Main.out_file, n100.r09.s074.Main.out_file, n100.r09.s075.Main.out_file, n100.r09.s076.Main.out_file, n100.r09.s077.Main.out_file, n100.r09.s078.Main.out_file, n100.r09.s079.Main.out_file, n100.r09.s080.Main.out_file, n100.r09.s081.Main.out_file, n100.r09.s082.Main.out_file, n100.r09.s083.Main.out_file, n100.r09.s084.Main.out_file, n100.r09.s085.Main.out_file, n100.r09.s086.Main.out_file, n100.r09.s087.Main.out_file, n100.r09.s088.Main.out_file, n100.r09.s089.Main.out_file, n100.r09.s090.Main.out_file, n100.r09.s091.Main.out_file, n100.r09.s092.Main.out_file, n100.r09.s093.Main.out_file, n100.r09.s094.Main.out_file, n100.r09.s095.Main.out_file, n100.r09.s096.Main.out_file, n100.r09.s097.Main.out_file, n100.r09.s098.Main.out_file, n100.r09.s099.Main.out_file, n100.r09.s100.Main.out_file
2021/07/08 17:35:40 result: [val<.=4da92f4d 35.7MiB>, val<.=ab1098c7 35.7MiB>, val<.=fb86e48c 35.8MiB>, val<.=314bd2a5 35.7MiB>, val<.=9966e097 35.7MiB>, val<.=8b4291c8 35.7MiB>, val<.=9f94946d 35.8MiB>, val<.=e0408c12 35.7MiB>, val<.=dd8c1c4a 35.7MiB>, val<.=a6b901ff 35.7MiB>, val<.=83929919 35.7MiB>, val<.=90f81b84 35.7MiB>, val<.=d5aaffcc 35.7MiB>, val<.=5abe05f9 35.7MiB>, val<.=9c38b4e3 35.7MiB>, val<.=3eae132f 35.7MiB>, val<.=ef758e92 35.7MiB>, val<.=773f7d2e 35.7MiB>, val<.=95ca890f 35.7MiB>, val<.=e79223a3 35.7MiB>, val<.=1cfbb34f 35.7MiB>, val<.=ec157514 35.7MiB>, val<.=09dfb863 35.7MiB>, val<.=0bbb59c4 35.7MiB>, val<.=99ad1ddf 35.7MiB>, val<.=514b5fbc 35.7MiB>, val<.=a4fd27d6 35.8MiB>, val<.=7bd91ad9 35.8MiB>, val<.=8cd8650c 35.7MiB>, val<.=843efc53 35.8MiB>, val<.=9101cc09 35.8MiB>, val<.=1a57601b 35.7MiB>, val<.=6c1e44c0 35.7MiB>, val<.=3dca59dd 35.7MiB>, val<.=26809432 35.8MiB>, val<.=c4fe21b2 35.7MiB>, val<.=14b88adf 35.7MiB>, val<.=88070fc0 35.7MiB>, val<.=9eea6e56 35.7MiB>, val<.=7b673a0e 35.7MiB>, val<.=a2660e43 35.7MiB>, val<.=474d237f 35.8MiB>, val<.=52be4353 35.7MiB>, val<.=4d295f76 35.7MiB>, val<.=db938acb 35.7MiB>, val<.=a228c9da 35.8MiB>, val<.=ebddc3de 35.7MiB>, val<.=f263feb8 35.7MiB>, val<.=4a88c5b2 35.7MiB>, val<.=38211f38 35.7MiB>, val<.=e67c4bc8 35.7MiB>, val<.=452cccd8 35.7MiB>, val<.=d4d7378c 35.7MiB>, val<.=58238ef9 35.7MiB>, val<.=c06348cd 35.7MiB>, val<.=f85a6b1b 35.8MiB>, val<.=9dfe390c 35.7MiB>, val<.=9c226ed4 35.7MiB>, val<.=760cf97e 35.8MiB>, val<.=bfcea4b5 35.8MiB>, val<.=8d598436 35.7MiB>, val<.=0866535f 35.7MiB>, val<.=e4ecdf73 35.7MiB>, val<.=bcf4d9cb 35.8MiB>, val<.=58efbe19 35.7MiB>, val<.=abe890d5 35.7MiB>, val<.=f717d3bd 35.7MiB>, val<.=746bbb20 35.7MiB>, val<.=6d47b1bb 35.7MiB>, val<.=6eea6c7b 35.8MiB>, val<.=4b8079e8 35.8MiB>, val<.=ed7fd838 35.7MiB>, val<.=ee90f4c1 35.7MiB>, val<.=0da0b5ab 35.8MiB>, val<.=4e28aac6 35.7MiB>, val<.=fa6aa84b 35.7MiB>, val<.=6e9f9f85 35.8MiB>, val<.=fc74576a 35.7MiB>, val<.=88b304da 35.7MiB>, val<.=1838411f 35.7MiB>, val<.=69b8ad40 35.7MiB>, val<.=c1ad9eb3 35.7MiB>, val<.=3bc259c3 35.7MiB>, val<.=36b523b8 35.8MiB>, val<.=c05ae9c2 35.7MiB>, val<.=32c8d2f8 35.7MiB>, val<.=c138403d 35.7MiB>, val<.=3bd3308f 35.8MiB>, val<.=0148a802 35.7MiB>, val<.=faed1785 35.8MiB>, val<.=79022213 35.7MiB>, val<.=75c9ed49 35.8MiB>, val<.=b82aa77e 35.7MiB>, val<.=ceffb3bf 35.8MiB>, val<.=52266754 35.8MiB>, val<.=d26a51fd 35.7MiB>, val<.=9fd9e214 35.7MiB>, val<.=2bbebeb1 35.7MiB>, val<.=70ab4483 35.7MiB>, val<.=2a6b10e5 35.7MiB>]
2021/07/08 17:35:40 waiting for 1 background tasks to complete
